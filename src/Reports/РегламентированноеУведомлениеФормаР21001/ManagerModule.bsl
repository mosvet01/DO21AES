#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СоздатьЗаполненноеУведомление(Параметры, СуществующийДокументСсылка = Неопределено) Экспорт
	
	ИмяФормы = Неопределено;
	Если НЕ Параметры.Свойство("ИмяФормы", ИмяФормы) Тогда
		ИмяФормы = "Форма2020_4";
	КонецЕсли;
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат СоздатьЗаполненноеУведомление_Форма2014_1(Параметры, СуществующийДокументСсылка);
		
	ИначеЕсли ИмяФормы = "Форма2020_4" Тогда
		Возврат СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СоздатьЗаполненноеУведомление():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы) Экспорт
	
	СоответствиеПоказателей = Новый Структура;
	
	Если ИмяФормы = "Форма2020_4" Тогда
		ЗаполнитьСоответствиеРеквизитамАдреса_Форма2020_4(СоответствиеПоказателей);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СоответствиеПоказателейСтраницыРеквизитамАдреса():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
	Возврат СоответствиеПоказателей;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат Истина;
		
	ИначеЕсли ИмяФормы = "Форма2020_4" Тогда
		Возврат Истина;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ДоступнаПечатьPDF417():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьМакет(Объект, ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат СформироватьМакет_Форма2014_1(Объект);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьМакет():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьСразу(Объект, ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат ПечатьСразу_Форма2014_1(Объект);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ПечатьСразу():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьДокумент(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Попытка
			Данные = Объект.ДанныеУведомления.Получить();
			Проверить_Форма2014_1(Данные, УникальныйИдентификатор);
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"Проверка уведомления прошла успешно.", УникальныйИдентификатор);
		Исключение
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"При проверке уведомления обнаружены ошибки.", УникальныйИдентификатор);
		КонецПопытки;
		
	ИначеЕсли ИмяФормы = "Форма2020_4" Тогда
		Попытка
			Данные = Объект.ДанныеУведомления.Получить();
			Проверить_Форма2020_4(Данные, УникальныйИдентификатор);
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"Проверка уведомления прошла успешно.", УникальныйИдентификатор);
		Исключение
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"При проверке уведомления обнаружены ошибки.", УникальныйИдентификатор);
		КонецПопытки;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ПроверитьДокумент():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат ЭлектронноеПредставление_Форма2014_1(Объект, УникальныйИдентификатор);
		
	ИначеЕсли ИмяФормы = "Форма2020_4" Тогда
		Возврат ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияОтчета

Функция СформироватьДеревоСтраниц(ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2014_1" Тогда
		Возврат СформироватьДеревоСтраниц_Форма2014_1();
		
	ИначеЕсли ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьДеревоСтраниц_Форма2020_4();
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьДеревоСтраниц():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьДеревоСтраниц_Форма2014_1()
	
	ДеревоСтраниц = НовоеДеревоСтраниц();
	
	КорневойУровень = ДеревоСтраниц.Строки;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 001";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2014_1_Страница1";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист001";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 002";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2014_1_Страница2";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист002";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 003";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2014_1_Страница3";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист003";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Лист А";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2014_1_Страница4";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист004";
	Стр001.МногострочныеЧасти.Добавить("МногострочнаяЧасть1");
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Лист Б";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2014_1_Страница5";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист005";
	
	Возврат ДеревоСтраниц;
	
КонецФункции

Функция СформироватьДеревоСтраниц_Форма2020_4()
	
	ДеревоСтраниц = НовоеДеревоСтраниц();
	
	КорневойУровень = ДеревоСтраниц.Строки;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница1";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист001";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 2";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница2";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист002";
	Стр001.МногострочныеЧасти.Добавить("МногострочнаяЧастьП010707");
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 3";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница3";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист003";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Лист А";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница4";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист004";
	Стр001.МногострочныеЧасти.Добавить("МногострочнаяЧастьА010200");
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Лист Б";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница5";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист005";
	
	Возврат ДеревоСтраниц;
	
КонецФункции

Функция НовоеДеревоСтраниц()
	
	ДеревоСтраниц = Новый ДеревоЗначений;
	ДеревоСтраниц.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоСтраниц.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДеревоСтраниц.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("Многостраничность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("Многострочность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	
	Возврат ДеревоСтраниц;
	
КонецФункции

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, КонтейнерВходящий, КонтейнерРезультат) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		ДобавитьМногострочныеЧасти_Форма2020_4(КонтейнерРезультат);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ИнициализироватьМногострочныеЧасти():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМногострочныеЧасти_Форма2020_4(КонтейнерРезультат)
	
	ИмяРеквизита = "МногострочнаяЧастьП010707";
	ТаблицаМСЧ = Новый ТаблицаЗначений;
	ТаблицаМСЧ.Колонки.Добавить("П01070701", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаМСЧ.Колонки.Добавить("П01070702", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(255)));
	ТаблицаМСЧ.Добавить();
	КонтейнерРезультат.Вставить(ИмяРеквизита, ТаблицаМСЧ);
	
	ИмяРеквизита = "МногострочнаяЧастьА010200";
	ТаблицаМСЧ = Новый ТаблицаЗначений;
	ТаблицаМСЧ.Колонки.Добавить("А01020000", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(8)));
	ТаблицаМСЧ.Добавить();
	КонтейнерРезультат.Вставить(ИмяРеквизита, ТаблицаМСЧ);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Функция ПечатьСразу_Форма2014_1(Объект)
	
	ПечатнаяФорма = СформироватьМакет_Форма2014_1(Объект);
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакет_Форма2014_1(Объект)
	
	ЕстьВыходЗаГраницы = Ложь;
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураПараметров = Объект.ДанныеУведомления.Получить();
	
	НомСтр = 0;
	Для Каждого Стр Из СтруктураПараметров.ДеревоСтраниц.Строки Цикл
		НомСтр = НомСтр + 1;
		МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР21001.ПолучитьМакет("Печать_" + Стр.ИмяМакета);
		
		Если Стр.ИДНаименования = "Лист004" Тогда
			МногострочнаяЧасть = СтруктураПараметров.МногострочнаяЧасть1;
			УведомлениеОСпецрежимахНалогообложения.ВывестиОКВЭДНаПечать(СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования].А01010000, "А01010000", МакетПФ.Области);
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
			ВсегоНапечатаноСтрок = 1;
			Для Каждого СтрМнг Из МногострочнаяЧасть Цикл
				Если Не ЗначениеЗаполнено(СтрМнг.А01020000) Тогда
					Продолжить;
				КонецЕсли;
				
				УведомлениеОСпецрежимахНалогообложения.ВывестиОКВЭДНаПечать(СтрМнг.А01020000, "А01020000_"+ВсегоНапечатаноСтрок, МакетПФ.Области);
				ВсегоНапечатаноСтрок = ВсегоНапечатаноСтрок + 1;
				Если ВсегоНапечатаноСтрок = 57 Тогда
					ПечатнаяФорма.Вывести(МакетПФ);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					
					ВсегоНапечатаноСтрок = 1;
					НомСтр = НомСтр + 1;
					МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР21001.ПолучитьМакет("Печать_" + Стр.ИмяМакета);
					УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
				КонецЕсли;
			КонецЦикла;
			
			ПечатнаяФорма.Вывести(МакетПФ);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе 
			СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
			
			Для Каждого КЗ Из СтруктураДанныхСтраницы Цикл
				Если ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					Если УведомлениеОСпецрежимахНалогообложения.ЭтоПолеАдресаРегистрационныхЗаявлений(КЗ.Ключ) Тогда
						УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечатьСКонтролемДляРегистрационныхЗаявлений(ВРег(КЗ.Значение), КЗ.Ключ, МакетПФ.Области, "-", ЕстьВыходЗаГраницы);
					Иначе 
						УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(ВРег(КЗ.Значение), КЗ.Ключ, МакетПФ.Области);
					КонецЕсли;
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Дата") Тогда
					УведомлениеОСпецрежимахНалогообложения.ВывестиДатуНаПечать(КЗ.Значение, КЗ.Ключ, МакетПФ.Области);
				КонецЕсли;
			КонецЦикла;
			
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
			
			ПечатнаяФорма.Вывести(МакетПФ);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВыходЗаГраницы = Истина Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Некоторые поля адреса не уместились, рекомендуется воспользоваться печатной формой PDF417'"));
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьСписокЛистов(Объект, ЕстьВыходЗаГраницы = Ложь) Экспорт
	
	Если Объект.ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьСписокЛистов():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы)
	
	Листы = Новый СписокЗначений;
	СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить();
	
	НомСтр = 0;
	Для Каждого Стр Из СтруктураПараметров.ДеревоСтраниц.Строки Цикл
		
		Если Стр.ИДНаименования = "Лист003" Тогда
			ВывестиБланк2020_4_Лист003(СтруктураПараметров, Стр, ЕстьВыходЗаГраницы, Объект, Листы, НомСтр);
		ИначеЕсли Стр.ИДНаименования = "Лист004" Тогда
			ВывестиБланк2020_4_Лист004(СтруктураПараметров, Стр, Объект, Листы, НомСтр);
		Иначе
			ВывестиПростойБланк(СтруктураПараметров, Стр, ЕстьВыходЗаГраницы, Объект, Листы, НомСтр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Листы;
	
КонецФункции

Процедура ВывестиПростойБланк(СтруктураПараметров, Стр, ЕстьВыходЗаГраницы, Объект, Листы, НомСтр)
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
	
	Если УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхСтраницы) Тогда
		МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР21001.ПолучитьМакет("Печать_" + Стр.ИмяМакета);
		НомСтр = НомСтр + 1;
		
		Для Каждого КЗ Из СтруктураДанныхСтраницы Цикл
			ВывестиПоказательНаБланк(КЗ.Ключ, КЗ.Значение, МакетПФ, ЕстьВыходЗаГраницы)
		КонецЦикла;
		
		УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000" + НомСтр, 3), "НомСтр", МакетПФ.Области);
		ПечатнаяФорма.Вывести(МакетПФ);
		УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиБланк2020_4_Лист003(СтруктураПараметров, Стр, ЕстьВыходЗаГраницы, Объект, Листы, НомСтр)
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураДанныхЛист002 = СтруктураПараметров.ДанныеУведомления["Лист002"];
	СтруктураДанныхЛист003 = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
	МногострочнаяЧасть = СтруктураПараметров.МногострочныеЧасти.МногострочнаяЧастьП010707;
	
	Если НЕ УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхЛист002)
	   И НЕ УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхЛист003)
	   И НЕ УведомлениеОСпецрежимахНалогообложения.МногострочнаяЧастьЗаполнена(МногострочнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР21001.ПолучитьМакет("Печать_" + Стр.ИмяМакета);
	НомСтр = НомСтр + 1;
	
	Для Каждого КЗ Из СтруктураДанныхЛист002 Цикл
		ВывестиПоказательНаБланк(КЗ.Ключ, КЗ.Значение, МакетПФ, ЕстьВыходЗаГраницы)
	КонецЦикла;
	
	Для Каждого КЗ Из СтруктураДанныхЛист003 Цикл
		ВывестиПоказательНаБланк(КЗ.Ключ, КЗ.Значение, МакетПФ, ЕстьВыходЗаГраницы)
	КонецЦикла;
	
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть Цикл
		НомерСтроки = МногострочнаяЧасть.Индекс(СтрокаМСЧ) + 1;
		Если НомерСтроки > 3 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого Колонка Из МногострочнаяЧасть.Колонки Цикл
			ИмяПоказателя = Колонка.Имя + "_" + СтрокаЧГ0(НомерСтроки);
			ЗначениеПоказателя = СтрокаМСЧ[Колонка.Имя];
			ВывестиПоказательНаБланк(ИмяПоказателя, ЗначениеПоказателя, МакетПФ, ЕстьВыходЗаГраницы);
		КонецЦикла;
		
	КонецЦикла;
	
	УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000" + НомСтр, 3), "НомСтр", МакетПФ.Области);
	ПечатнаяФорма.Вывести(МакетПФ);
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
	
КонецПроцедуры

Процедура ВывестиБланк2020_4_Лист004(СтруктураПараметров, Стр, Объект, Листы, НомСтр)
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
	МногострочнаяЧасть = СтруктураПараметров.МногострочныеЧасти.МногострочнаяЧастьА010200;
	
	Если НЕ УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхСтраницы)
		И НЕ УведомлениеОСпецрежимахНалогообложения.МногострочнаяЧастьЗаполнена(МногострочнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР21001.ПолучитьМакет("Печать_" + Стр.ИмяМакета);
	
	НомСтр = НомСтр + 1;
	
	УведомлениеОСпецрежимахНалогообложения.ВывестиОКВЭДНаПечать(
		СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования].А01010000, "А01010000", МакетПФ.Области);
	УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
	
	ВсегоНапечатаноСтрок = 1;
	Для Каждого СтрМнг Из МногострочнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрМнг.А01020000) Тогда
			Продолжить;
		КонецЕсли;
		
		УведомлениеОСпецрежимахНалогообложения.ВывестиОКВЭДНаПечать(
			СтрМнг.А01020000, "А01020000_"+СтрокаЧГ0(ВсегоНапечатаноСтрок), МакетПФ.Области);
		ВсегоНапечатаноСтрок = ВсегоНапечатаноСтрок + 1;
		
		Если ВсегоНапечатаноСтрок > 68 Тогда
			ПечатнаяФорма.Вывести(МакетПФ);
			УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
			
			ВсегоНапечатаноСтрок = 1;
			НомСтр = НомСтр + 1;
			МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР21001.ПолучитьМакет("Печать_" + Стр.ИмяМакета);
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(МакетПФ);
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
	
КонецПроцедуры

Процедура ВывестиПоказательНаБланк(ИмяПоказателя, ЗначениеПоказателя, МакетПФ, ЕстьВыходЗаГраницы)
	
	Если ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		Если УведомлениеОСпецрежимахНалогообложения.ЭтоПолеАдресаРегистрационныхЗаявлений(ИмяПоказателя) Тогда
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечатьСКонтролемДляРегистрационныхЗаявлений(
				ВРег(ЗначениеПоказателя), ИмяПоказателя, МакетПФ.Области, "-", ЕстьВыходЗаГраницы);
		Иначе
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(
				ВРег(ЗначениеПоказателя), ИмяПоказателя, МакетПФ.Области);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		УведомлениеОСпецрежимахНалогообложения.ВывестиДатуНаПечать(ЗначениеПоказателя, ИмяПоказателя, МакетПФ.Области);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеПредставление

Процедура Проверить_Форма2014_1(Данные, УникальныйИдентификатор)
	
	ПроверкаПоказателейФормыНеТребуется = Истина;
	
КонецПроцедуры

Процедура Проверить_Форма2020_4(Данные, УникальныйИдентификатор)
	
	ПроверкаПоказателейФормыНеТребуется = Истина;
	
КонецПроцедуры

Функция ЭлектронноеПредставление_Форма2014_1(Объект, УникальныйИдентификатор)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма2014_1(Объект, УникальныйИдентификатор);
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(Объект.ИмяОтчета, "СхемаВыгрузкиФорма2014_1");
	ЗаполнитьДанными_Форма2014_1(Объект, ОсновныеСведения, СтруктураВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(СтруктураВыгрузки);
	
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма2014_1(Объект, УникальныйИдентификатор)
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
	Данные = Объект.ДанныеУведомления.Получить();
	Если ЗначениеЗаполнено(Данные.ДанныеУведомления.Лист002.П01070501) И ЗначениеЗаполнено(Данные.ДанныеУведомления.Лист002.П01070502) Тогда
		ОсновныеСведения.Вставить("КодПодр", "" + Данные.ДанныеУведомления.Лист002.П01070501 + "-" + Данные.ДанныеУведомления.Лист002.П01070502);
	Иначе
		ОсновныеСведения.Вставить("КодПодр", "");
	КонецЕсли;
	
	Проверить_Форма2014_1(Данные, УникальныйИдентификатор);
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма2014_1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	Возврат ОсновныеСведения;
	
КонецФункции

Процедура ЗаполнитьДанными_Форма2014_1(Объект, Параметры, ДеревоВыгрузки)
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДаннымиУзел(Объект.ДанныеУведомления.Получить(), ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма2014_1(СведенияОтправки)
	
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда
		ДатаФормированияФайла = Формат(Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)), Число(Сред(СведенияОтправки.ДатаДок, 4, 2)), Число(Лев(СведенияОтправки.ДатаДок, 2))), "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	Префикс = "RO_R21001_0000_0000_000000000000000_" + ДатаФормированияФайла + "_" + Строка(Новый УникальныйИдентификатор);
	Возврат Префикс;
	
КонецФункции

Функция ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма2020_4(Объект, УникальныйИдентификатор);
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(
		Объект.ИмяОтчета, "СхемаВыгрузкиФорма2020_4");
	ЗаполнитьДанными_Форма2020_4(Объект, ОсновныеСведения, СтруктураВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(СтруктураВыгрузки);
	
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма2020_4(Объект, УникальныйИдентификатор)
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
	Данные = Объект.ДанныеУведомления.Получить();
	
	Проверить_Форма2020_4(Данные, УникальныйИдентификатор);
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма2020_4(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	Возврат ОсновныеСведения;
	
КонецФункции

Процедура ЗаполнитьДанными_Форма2020_4(Объект, Параметры, ДеревоВыгрузки)
	
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	ДополнитьПараметры_Форма2020_4(Параметры, ДанныеУведомления);
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДаннымиУзел(ДанныеУведомления, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ДополнитьПараметры_Форма2020_4(Параметры, ДанныеУведомления)
	
	Лист001 = ДанныеУведомления.ДанныеУведомления.Лист001;
	
	ДобавитьПризнакиНаличияФИО(Лист001, "П0101010");
	ДобавитьПризнакиНаличияФИО(Лист001, "П0101020", Истина);
	
	Лист002 = ДанныеУведомления.ДанныеУведомления.Лист002;
	ДобавитьПолныйКодПодразделения(Лист002, "П0106050");
	
	МногострочнаяЧастьП010707 = ДанныеУведомления.МногострочныеЧасти.МногострочнаяЧастьП010707;
	ДобавитьПоказателиМСЧ(Лист002, МногострочнаяЧастьП010707);
	
	// Сделать многострочные части видимыми для общих механизмов выгрузки.
	ДанныеУведомления.Вставить("МногострочнаяЧастьА010200",
		ДанныеУведомления.МногострочныеЧасти.МногострочнаяЧастьА010200);
		
КонецПроцедуры

Процедура ДобавитьПризнакиНаличияФИО(ДанныеРаздела, Префикс, ТолькоЗаполненные = Ложь)
	
	ПоказательФ = Префикс + "1";
	ПоказательИ = Префикс + "2";
	ПоказательО = Префикс + "3";
	
	ФИОЗаполнено =  ЗначениеЗаполнено(ДанныеРаздела[ПоказательФ])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ПоказательИ])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ПоказательО]);
	
	Если ТолькоЗаполненные И НЕ ФИОЗаполнено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательФ, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательФ]), "", "1"));
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательИ, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательИ]), "", "1"));
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательО, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательО]), "", "1"));
	
КонецПроцедуры

Процедура ДобавитьПолныйКодПодразделения(ДанныеРаздела, Префикс)
	
	КодПодразделения = "";
	Если ЗначениеЗаполнено(ДанныеРаздела[Префикс + "1"]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[Префикс + "2"]) Тогда
		КодПодразделения = ДанныеРаздела[Префикс + "1"] + "-" + ДанныеРаздела[Префикс + "2"];
	КонецЕсли;
	
	ДанныеРаздела.Вставить("Х" + Сред(Префикс, 2) + "0", КодПодразделения);
	
КонецПроцедуры

Процедура ДобавитьПоказателиМСЧ(ДанныеРаздела, МСЧ)
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаМСЧ Из МСЧ Цикл
		СтрокаЗаполнена = Ложь;
		Для Каждого КолонкаМСЧ Из МСЧ.Колонки Цикл
			СтрокаЗаполнена = СтрокаЗаполнена
				ИЛИ КолонкаМСЧ.Имя <> "УИД" И ЗначениеЗаполнено(СтрокаМСЧ[КолонкаМСЧ.Имя]);
		КонецЦикла;
		
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КолонкаМСЧ Из МСЧ.Колонки Цикл
			ИмяПоказателя = КолонкаМСЧ.Имя;
			ДанныеРаздела.Вставить(ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки), СтрокаМСЧ[ИмяПоказателя]);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма2020_4(СведенияОтправки)
	
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда
		ДатаДокумента = Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)),
			Число(Сред(СведенияОтправки.ДатаДок, 4, 2)),
			Число(Лев(СведенияОтправки.ДатаДок, 2)));
		ДатаФормированияФайла = Формат(ДатаДокумента, "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	Префикс = "RO_R21001";
	ИдПолучателя = "0000_0000";
	ИдОтправителя = "000000000000000";
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ПрефиксИмениФайла = Префикс + "_" + ИдПолучателя + "_" + ИдОтправителя + "_"
	                  + ДатаФормированияФайла + "_" + ИдентификационныйНомер;
	
	Возврат ПрефиксИмениФайла;
	
КонецФункции

#КонецОбласти

Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт
	
	Возврат "Отчет.РегламентированноеУведомлениеФормаР21001.Форма.Форма2020_4";
	
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт
	
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	ПолноеОписаниеФормы = Результат.Добавить();
	ПолноеОписаниеФормы.ИмяФормы = "Форма2014_1";
	ПолноеОписаниеФормы.ОписаниеФормы = "В редакции от 25.01.2012 приказ ФНС России № ММВ-7-6/25@";
	ПолноеОписаниеФормы.ДатаНачала = '2012-01-25';
	ПолноеОписаниеФормы.ДатаКонца  = '2020-11-24';
	
	ПолноеОписаниеФормы = Результат.Добавить();
	ПолноеОписаниеФормы.ИмяФормы = "Форма2020_4";
	ПолноеОписаниеФормы.ОписаниеФормы = "В редакции приказа ФНС России от 31.08.2020 № ЕД-7-14/617@";
	ПолноеОписаниеФормы.ДатаНачала = '2020-11-25';
	ПолноеОписаниеФормы.ДатаКонца  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеУведомления(ЭкземплярУведомления) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	Если ЭкземплярУведомления.ИмяФормы = "Форма2014_1" Тогда
		
		ДанныеУведомления = ЭкземплярУведомления.ДанныеУведомления.Получить();
		
		Если ТипЗнч(ДанныеУведомления) <> Тип("Структура") Тогда
			Возврат СтруктураДанных;
		КонецЕсли;
		
		Если ДанныеУведомления.ДанныеУведомления.Свойство("Лист005") Тогда
			
			КодСпособаРегистрации = "Б01010000";
			
			Лист005 = ДанныеУведомления.ДанныеУведомления.Лист005;
			
			СпособРегистрации = Неопределено;
			Если Лист005.Свойство(КодСпособаРегистрации, СпособРегистрации) Тогда
				СтруктураДанных.Вставить("СпособРегистрации", СпособРегистрации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СоздатьЗаполненноеУведомление_Форма2014_1(Параметры, СуществующийДокументСсылка)
	
	ИмяФормы = "Форма2014_1";
	Дерево = СформироватьДеревоСтраниц(ИмяФормы);
	ИмяОтчета = "РегламентированноеУведомлениеФормаР21001";
	
	ВходящийКонтейнер = Новый Структура("ИмяФормы, ДеревоСтраниц", "1."+ИмяОтчета+".1."+ИмяФормы, Дерево);
	РезультатКонтейнер1 = Новый Структура;
	УведомлениеОСпецрежимахНалогообложения.СформироватьКонтейнерДанныхУведомления(ВходящийКонтейнер, РезультатКонтейнер1);
	РезультатКонтейнер2 = Новый Структура;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииСКонтейнеромМногострочныхБлоков(ВходящийКонтейнер, РезультатКонтейнер2);
	
	УведомлениеОСпецрежимахНалогообложения.ДополнитьСлужебнымиСтруктурамиАдреса(РезультатКонтейнер1.ДанныеУведомления);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			     Параметры.Организация);
	ПараметрыОтчета.Вставить("ПараметрыЗаполнения",          Параметры.ДополнительныеПараметры);
	ПараметрыОтчета.Вставить("ИмяФормы", ИмяФормы);
	
	Контейнер = Новый Структура;
	Для Каждого КЗ Из РезультатКонтейнер1.ДанныеУведомления Цикл
		Контейнер.Вставить(КЗ.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КЗ.Значение));
	КонецЦикла;
	
	Для Каждого КЗ Из РезультатКонтейнер2 Цикл
		Контейнер.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;

	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета, ИмяФормы, ПараметрыОтчета, Контейнер);
	
	Для Каждого КЗ Из Контейнер Цикл
		Если РезультатКонтейнер1.ДанныеУведомления.Свойство(КЗ.Ключ) Тогда
			ЗаполнитьЗначенияСвойств(РезультатКонтейнер1.ДанныеУведомления[КЗ.Ключ], КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КЗ Из РезультатКонтейнер2 Цикл
		РезультатКонтейнер2[КЗ.Ключ] = Контейнер[КЗ.Ключ];
	КонецЦикла;
	
	Если ТипЗнч(СуществующийДокументСсылка) = Тип("Структура")
		И СуществующийДокументСсылка.Свойство("Ссылка")
		И ЗначениеЗаполнено(СуществующийДокументСсылка.Ссылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.Ссылка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(СуществующийДокументСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		И ЗначениеЗаполнено(СуществующийДокументСсылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.ПолучитьОбъект();
	Иначе
		НовыйДок = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
		НовыйДок.Организация = Параметры.Организация;
		НовыйДок.ИмяОтчета = ИмяОтчета;
		НовыйДок.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР21001;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДанныеУведомления, ДеревоСтраниц, МногострочнаяЧасть1",
			РезультатКонтейнер1.ДанныеУведомления, Дерево, РезультатКонтейнер2["МногострочнаяЧасть1"]);
	
	ДатаСоставления = Неопределено;
	Если Параметры.ДополнительныеПараметры.Свойство("ДатаСоставления", ДатаСоставления)
		И ЗначениеЗаполнено(ДатаСоставления) Тогда
		
		НовыйДок.Дата = ДатаСоставления;
	Иначе
		НовыйДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	НовыйДок.ДатаПодписи = НовыйДок.Дата;
	НовыйДок.ИмяФормы = ИмяФормы;
	НовыйДок.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	НовыйДок.Записать();
	
	Возврат НовыйДок.Ссылка;
КонецФункции

Функция СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка)
	
	ИмяФормы = "Форма2020_4";
	
	Дерево = СформироватьДеревоСтраниц(ИмяФормы);
	ИмяОтчета = "РегламентированноеУведомлениеФормаР21001";
	
	ВходящийКонтейнер = Новый Структура("ИмяФормы, ДеревоСтраниц", "1."+ИмяОтчета+".1."+ИмяФормы, Дерево);
	РезультатКонтейнер1 = Новый Структура;
	УведомлениеОСпецрежимахНалогообложения.СформироватьКонтейнерДанныхУведомления(ВходящийКонтейнер, РезультатКонтейнер1);
	РезультатКонтейнер2 = Новый Структура;
	ИнициализироватьМногострочныеЧасти(ИмяФормы, ВходящийКонтейнер, РезультатКонтейнер2);
	
	УведомлениеОСпецрежимахНалогообложения.ДополнитьСлужебнымиСтруктурамиАдреса(РезультатКонтейнер1.ДанныеУведомления);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Параметры.Организация);
	ПараметрыОтчета.Вставить("ПараметрыЗаполнения", Параметры.ДополнительныеПараметры);
	ПараметрыОтчета.Вставить("ИмяФормы", ИмяФормы);
	
	Контейнер = Новый Структура;
	Для Каждого КЗ Из РезультатКонтейнер1.ДанныеУведомления Цикл
		Контейнер.Вставить(КЗ.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КЗ.Значение));
	КонецЦикла;
	
	Для Каждого КЗ Из РезультатКонтейнер2 Цикл
		Контейнер.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета, ИмяФормы, ПараметрыОтчета, Контейнер);
	
	Для Каждого КЗ Из Контейнер Цикл
		Если РезультатКонтейнер1.ДанныеУведомления.Свойство(КЗ.Ключ) Тогда
			ЗаполнитьЗначенияСвойств(РезультатКонтейнер1.ДанныеУведомления[КЗ.Ключ], КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КЗ Из РезультатКонтейнер2 Цикл
		РезультатКонтейнер2[КЗ.Ключ] = Контейнер[КЗ.Ключ];
	КонецЦикла;
	
	Если ТипЗнч(СуществующийДокументСсылка) = Тип("Структура")
		И СуществующийДокументСсылка.Свойство("Ссылка")
		И ЗначениеЗаполнено(СуществующийДокументСсылка.Ссылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.Ссылка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(СуществующийДокументСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		И ЗначениеЗаполнено(СуществующийДокументСсылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.ПолучитьОбъект();
	Иначе
		НовыйДок = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
		НовыйДок.Организация = Параметры.Организация;
		НовыйДок.ИмяОтчета = ИмяОтчета;
		НовыйДок.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР21001;
	КонецЕсли;
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ДанныеУведомления", РезультатКонтейнер1.ДанныеУведомления);
	ДанныеОтчета.Вставить("ДеревоСтраниц", Дерево);
	
	ДанныеОтчета.Вставить("МногострочныеЧасти", Новый Структура);
	Для Каждого КЗ Из РезультатКонтейнер2 Цикл
	ДанныеОтчета.МногострочныеЧасти.Вставить(
			КЗ.Ключ, РезультатКонтейнер2[КЗ.Ключ]);
	КонецЦикла;
	
	ДатаСоставления = Неопределено;
	Если Параметры.ДополнительныеПараметры.Свойство("ДатаСоставления", ДатаСоставления)
		И ЗначениеЗаполнено(ДатаСоставления) Тогда
		НовыйДок.Дата = ДатаСоставления;
	Иначе
		НовыйДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	НовыйДок.ДатаПодписи = НовыйДок.Дата;
	НовыйДок.ИмяФормы = ИмяФормы;
	НовыйДок.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеОтчета);
	НовыйДок.Записать();
	
	Возврат НовыйДок.Ссылка;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

Процедура ЗаполнитьСоответствиеРеквизитамАдреса_Форма2020_4(СоответствиеПоказателей)
	
	СоответствиеПоказателей.Вставить("ПИ1070100", "ИдентификаторАдресногоОбъекта");
	СоответствиеПоказателей.Вставить("ПД1070100", "СтрокаАдресногоОбъекта");
	
	СоответствиеПоказателей.Вставить("П01070100", "КодРегиона");
	СоответствиеПоказателей.Вставить("П01070201", "МуниципальныйРайонВид");
	СоответствиеПоказателей.Вставить("П01070202", "МуниципальныйРайон");
	СоответствиеПоказателей.Вставить("П01070301", "ПоселениеВид");
	СоответствиеПоказателей.Вставить("П01070302", "Поселение");
	СоответствиеПоказателей.Вставить("П01070401", "НаселенныйПунктВид");
	СоответствиеПоказателей.Вставить("П01070402", "НаселенныйПункт");
	СоответствиеПоказателей.Вставить("П01070501", "ТерриторияТип");
	СоответствиеПоказателей.Вставить("П01070502", "Территория");
	СоответствиеПоказателей.Вставить("П01070601", "УлицаТип");
	СоответствиеПоказателей.Вставить("П01070602", "Улица");
	СоответствиеПоказателей.Вставить("П01070801", "ПомещениеВЗданииТип");
	СоответствиеПоказателей.Вставить("П01070802", "ПомещениеВЗданииНомер");
	СоответствиеПоказателей.Вставить("П01070901", "ПомещениеВКвартиреТип");
	СоответствиеПоказателей.Вставить("П01070902", "ПомещениеВКвартиреНомер");
	
	Здания = Новый Массив;
	Здания.Добавить("Здания");
	Здания.Добавить(Новый Структура("П01070701, П01070702", "ЗданиеТип", "ЗданиеНомер"));
	СоответствиеПоказателей.Вставить("П010707", Здания);
	
КонецПроцедуры

Функция СведенияИзФормРегистрации(ИмяФормы, ДанныеУведомления) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("КодЗаявления", "Р21001");
	Данные = ДанныеУведомления.Получить();
	
	Лист001 = Данные.ДанныеУведомления.Лист001;
	Результат.Вставить("ОГРНИП", "");
	Результат.Вставить("Фамилия", Лист001.П01010101);
	Результат.Вставить("Имя", Лист001.П01010202);
	Результат.Вставить("Отчество", Лист001.П01010203);
	
	Результат.Вставить("Заявители", Новый Массив);
	
	СвЗаяв = Новый Структура;
	СвЗаяв.Вставить("Фамилия", Лист001.П01010101);
	СвЗаяв.Вставить("Имя", Лист001.П01010202);
	СвЗаяв.Вставить("Отчество", Лист001.П01010203);
	СвЗаяв.Вставить("ЭлектроннаяПочта", Данные.ДанныеУведомления.Лист005.Б01030000);
	Результат.Заявители.Добавить(СвЗаяв);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли
