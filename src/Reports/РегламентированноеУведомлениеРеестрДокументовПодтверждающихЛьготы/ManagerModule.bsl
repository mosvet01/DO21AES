#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт 
	Возврат Истина;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт 
	Возврат Истина;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт 
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	Стр = Результат.Добавить();
	Стр.ИмяФормы = "Форма2020_1";
	Стр.ОписаниеФормы = "Письмо ФНС России от 12 ноября 2020 № ЕА-4-15/18589@";
	
	Возврат Результат;
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2020_1" Тогда
		Возврат ЭлектронноеПредставление_Форма2020_1(Объект, УникальныйИдентификатор);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПроверитьДокумент(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
КонецФункции

Функция СформироватьСписокЛистов(Объект) Экспорт
	Если Объект.ИмяФормы = "Форма2020_1" Тогда 
		Возврат СформироватьСписокЛистовФорма2020_1(Объект);
	КонецЕсли;
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт 
	Если ИмяФормы = "Форма2020_1" Тогда 
		Данные = Объект.ДанныеУведомления.Получить();
		Данные.Вставить("Организация", Объект.Организация);
		Возврат ПроверитьДокументСВыводомВТаблицу_Форма2020_1(Данные, УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Процедура ВывестиОбласть(Объект, Листы, Область, ПечатнаяФорма, Колонки)
	Если Не ПечатнаяФорма.ПроверитьВывод(Область) Тогда 
		ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма);
		ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
		ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(Колонки);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область);
КонецПроцедуры

Функция СформироватьСписокЛистовФорма2020_1(Объект)
	ОТД = Новый ОписаниеТипов("Дата");
	Листы = Новый СписокЗначений;
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить().СтруктураРеквизитов;
	
	МакетПФ = Отчеты.РегламентированноеУведомлениеРеестрДокументовПодтверждающихЛьготы.ПолучитьМакет("Печать_MXL_Форма2020_1");
	ШапкаИнформация = МакетПФ.ПолучитьОбласть("ШапкаИнформация");
	Шапка = МакетПФ.ПолучитьОбласть("Шапка");
	Строка = МакетПФ.ПолучитьОбласть("Строка");
	Колонки = МакетПФ.ПолучитьОбласть("Колонки");
	ИтогиПоКоду = МакетПФ.ПолучитьОбласть("ИтогиПоКоду");
	
	Шапка.Параметры.НаимОрг = ?(РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация),
								СтруктураПараметров._НаимОрг,
								СтруктураПараметров._Фамилия + " " + СтруктураПараметров._Имя + " " + СтруктураПараметров._Отчество);
	Шапка.Параметры.КвОтчета = Месяц(КонецКвартала(СтруктураПараметров._Период)) / 3;
	Шапка.Параметры.ГодОтчета = Формат(Год(СтруктураПараметров._Период), "ЧГ=");
	
	_РеестрДокПОбНЛ = СтруктураПараметров._РеестрДокПОбНЛ.Скопировать();
	СтруктураОтбора = Новый Структура("КодОпер");
	СтруктураОтбораВДереве = Новый Структура("УИД");
	_РеестрДокПОбНЛ.Свернуть("КодОпер");
	_РеестрДокПОбНЛ.Сортировать("КодОпер");
	
	ПечатнаяФорма.Вывести(ШапкаИнформация);
	ПечатнаяФорма.Вывести(Шапка);
	
	Для Каждого СтрКодОпер Из _РеестрДокПОбНЛ Цикл
		Для Инд = 0 По Строка.Параметры.Количество() - 1 Цикл 
			Строка.Параметры[Инд] = Неопределено;
		КонецЦикла;
		СтруктураОтбора.КодОпер = СтрКодОпер.КодОпер;
		НайденныеСтроки = СтруктураПараметров._РеестрДокПОбНЛ.НайтиСтроки(СтруктураОтбора);
		Строка.Параметры.КодОперации = СтрКодОпер.КодОпер;
		
		ИтогПоВидам = 0;
		ИтогПоОперациям = 0;
		Для Каждого Стр2 Из НайденныеСтроки Цикл
			ИтогПоВидам = ИтогПоВидам + Стр2.СумНеоблОпер;
			Строка.Параметры.ВидОперации = Стр2.ВидОпер;
			Строка.Параметры.СуммаПоВиду = Стр2.СумНеоблОпер;
			СтруктураОтбораВДереве.УИД = Стр2.УИД;
			СтрокиВДереве = СтруктураПараметров._ПредТипДог.Строки.НайтиСтроки(СтруктураОтбораВДереве, Ложь);
			Если СтрокиВДереве.Количество() = 0 Тогда 
				ВывестиОбласть(Объект, Листы, Строка, ПечатнаяФорма, Колонки);
				ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, 4, ПечатнаяФорма.ВысотаТаблицы, 15).ГраницаСнизу = 
					ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, 2, ПечатнаяФорма.ВысотаТаблицы, 2).ГраницаСлева;
				Продолжить;
			КонецЕсли;
			
			Для Каждого стрДерево1 Из СтрокиВДереве Цикл 
				Для Каждого стрДерево2 Из стрДерево1.Строки Цикл
					Строка.Параметры.Контрагент = ?(ЗначениеЗаполнено(стрДерево2.НаимОрг),
						стрДерево2.НаимОрг,
						стрДерево2.Фамилия + " " + стрДерево2.Имя + " " + стрДерево2.Отчество);
					Строка.Параметры.КонтрагентИНН = ?(ЗначениеЗаполнено(стрДерево2.ИННЮЛ), стрДерево2.ИННЮЛ, стрДерево2.ИННФЛ);
					Строка.Параметры.КонтрагентКПП = стрДерево2.КПП;
					Строка.Параметры.СуммаОперации = стрДерево2.СумОпер;
					
					Если стрДерево2.Строки.Количество() = 0 Тогда 
						ВывестиОбласть(Объект, Листы, Строка, ПечатнаяФорма, Колонки);
					КонецЕсли;
					ИтогПоОперациям = ИтогПоОперациям + стрДерево2.СумОпер;
					
					Для Каждого стрДерево3 Из стрДерево2.Строки Цикл
						Строка.Параметры.ТипДокумента = стрДерево3.ТипДок;
						Строка.Параметры.НомерДокумента = стрДерево3.НомДок;
						Строка.Параметры.ДатаДокумента = Формат(стрДерево3.ДатаДок, "ДФ=dd.MM.yyyy; ДП=' '");
						ВывестиОбласть(Объект, Листы, Строка, ПечатнаяФорма, Колонки);
						
						Строка.Параметры.КодОперации = "";
						Строка.Параметры.ВидОперации = "";
						Строка.Параметры.СуммаПоВиду = "";
						Строка.Параметры.Контрагент = "";
						Строка.Параметры.КонтрагентИНН = "";
						Строка.Параметры.КонтрагентКПП = "";
						Строка.Параметры.СуммаОперации = "";
					КонецЦикла;
					
					Строка.Параметры.КодОперации = "";
					Строка.Параметры.ВидОперации = "";
					Строка.Параметры.СуммаПоВиду = "";
					Строка.Параметры.Контрагент = "";
					Строка.Параметры.КонтрагентИНН = "";
					Строка.Параметры.КонтрагентКПП = "";
					Строка.Параметры.СуммаОперации = "";
					ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, 7, ПечатнаяФорма.ВысотаТаблицы, 15).ГраницаСнизу = 
						ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, 2, ПечатнаяФорма.ВысотаТаблицы, 2).ГраницаСлева;
				КонецЦикла;
			КонецЦикла;
			
			Строка.Параметры.КодОперации = "";
			ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, 4, ПечатнаяФорма.ВысотаТаблицы, 15).ГраницаСнизу = 
				ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, 2, ПечатнаяФорма.ВысотаТаблицы, 2).ГраницаСлева;
		КонецЦикла;
		
		ИтогиПоКоду.Параметры.ИтогПоВидам = ИтогПоВидам;
		ИтогиПоКоду.Параметры.ИтогПоОперациям = ИтогПоОперациям;
		ВывестиОбласть(Объект, Листы, ИтогиПоКоду, ПечатнаяФорма, Колонки);
	КонецЦикла;
	
	ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма);
	Возврат Листы;
КонецФункции

Процедура ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма) Экспорт 
	Лист = Новый Массив;
	Лист.Добавить(ПоместитьВоВременноеХранилище(ПечатнаяФорма));
	Лист.Добавить(Новый УникальныйИдентификатор);
	Лист.Добавить(Метаданные.Отчеты[Объект.ИмяОтчета].Синоним);
	Листы.Добавить(Лист, Метаданные.Отчеты[Объект.ИмяОтчета].Синоним);
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма2020_1(СведенияОтправки)
	Префикс = "KO_RROBNL";
	Возврат Документы.УведомлениеОСпецрежимахНалогообложения.ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу_Форма2020_1(Данные, УникальныйИдентификатор)
	ОТД = Новый ОписаниеТипов("Дата");
	ТаблицаОшибок = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._Дата) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана дата подписи", "ОсновныеСведения", "ДатаПодписи"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._ИмяФайлТреб) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не заполнено имя файла входящего требования", "ОсновныеСведения", "_ИмяФайлТреб"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._КодНО) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан налоговый орган", "ОсновныеСведения", "РегистрацияВИФНС"));
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Данные.Организация) Тогда 
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._НаимОрг) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано наименование организации", "ОсновныеСведения", "_НаимОрг"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._ИННЮЛ)
			Или Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Данные.СтруктураРеквизитов._ИННЮЛ, Истина, "") Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан/неправильно указан ИНН", "ОсновныеСведения", "_ИННЮЛ"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._КПП)
			Или Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Данные.СтруктураРеквизитов._КПП, "") Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан/неправильно указан КПП", "ОсновныеСведения", "_КПП"));
		КонецЕсли;
		
		ФормРеорг = Данные.СтруктураРеквизитов._ФормРеорг;
		Если ФормРеорг = "1" Или ФормРеорг = "2" Или ФормРеорг = "3" Или ФормРеорг = "5" Или ФормРеорг = "6" Тогда 
			Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._ИННЮЛРеорг)
				Или Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Данные.СтруктураРеквизитов._ИННЮЛРеорг, Истина, "") Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан/неправильно указан ИНН реорганизованной организации", "ОсновныеСведения", "_ИННЮЛРеорг"));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._КППРеорг)
				Или Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Данные.СтруктураРеквизитов._КППРеорг, "") Тогда 
				ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
					"Не указан/неправильно указан КПП реорганизованной организации", "ОсновныеСведения", "_КППРеорг"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._Фамилия) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указана фамилия", "ОсновныеСведения", "_Фамилия"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._Имя) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано имя", "ОсновныеСведения", "_Имя"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._ИННФЛ)
			Или Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Данные.СтруктураРеквизитов._ИННФЛ, Ложь, "") Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан/неправильно указан ИНН", "ОсновныеСведения", "_ИННФЛ"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._ФамилияПодп) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана фамилия подписанта", "СведенияОбОтправителе", "_ФамилияПодп"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._ИмяПодп) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указано имя подписанта", "СведенияОбОтправителе", "_ИмяПодп"));
	КонецЕсли;
	
	Если Данные.СтруктураРеквизитов._ПрПодп = 2 
		Или ЗначениеЗаполнено(Данные.СтруктураРеквизитов._НаимДок) Тогда 
		
		Если Не ЗначениеЗаполнено(Данные.СтруктураРеквизитов._НаимДок) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указано наименование документа представителя", "СведенияОбОтправителе", "_НаимДок"));
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Данные.СтруктураРеквизитов._РеестрДокПОбНЛ Цикл 
		Если СтрДлина(СокрЛП(Стр.КодОпер)) <> 7 Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не заполнен/неправильно заполнен код операции", "Реестр", "_РеестрДокПОбНЛ", Стр.УИД));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.ВидОпер) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не заполнен вид операции", "Реестр", "_РеестрДокПОбНЛ", Стр.УИД));
		КонецЕсли;
		Если Данные.СтруктураРеквизитов._ПредТипДог.Строки.НайтиСтроки(Новый Структура("УИД", Стр.УИД)).Количество() = 0 Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не заполнена информация по контрагентам/договорам", "Реестр", "_РеестрДокПОбНЛ", Стр.УИД));
		КонецЕсли;
	КонецЦикла;
	
	Строки = Данные.СтруктураРеквизитов._ПредТипДог.Строки.НайтиСтроки(Новый Структура("ФлагОшибки", Истина), Истина);
	Если Строки.Количество() > 0 Тогда
		Родитель = Строки[0];
		Пока Родитель.Родитель <> Неопределено Цикл 
			Родитель = Родитель.Родитель;
		КонецЦикла;
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Некорректно заполнены реквизиты (выделено красным цветом)", "Реестр", "_РеестрДокПОбНЛ", Родитель.УИД));
	КонецЕсли;
	
	Возврат ТаблицаОшибок;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма2020_1(Объект, УникальныйИдентификатор)
	ОсновныеСведения = Новый Структура;
	
	ДанныеОрг = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьСведенияОбОрганизации(Объект);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не ДанныеОрг.ЭтоЮрЛицо);
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДанныеНПФЛ(Объект, ОсновныеСведения);
	Иначе 
		Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДанныеНПЮЛ(Объект, ОсновныеСведения);
	КонецЕсли;
	
	Если Не ДанныеОрг.ЭтоЮрЛицо Тогда
		ОсновныеСведения.Вставить("ИННФЛ", ДанныеОрг.ИНН);
		ОсновныеСведения.Вставить("Фамилия", ДанныеОрг.Фамилия);
		ОсновныеСведения.Вставить("Имя", ДанныеОрг.Имя);
		ОсновныеСведения.Вставить("Отчество", ДанныеОрг.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", ДанныеОрг.НаименованиеПолное);
		ОсновныеСведения.Вставить("ИННЮЛ", ДанныеОрг.ИНН);
		ОсновныеСведения.Вставить("КПП", ДанныеОрг.КПП);
		ОсновныеСведения.Вставить("ИННОрг", ДанныеОрг.ИНН);
		ОсновныеСведения.Вставить("КППОрг", ДанныеОрг.КПП);
	КонецЕсли;
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьОбщиеДанные(Объект, ОсновныеСведения);
	Данные = Объект.ДанныеУведомления.Получить();
	СтруктураРеквизитов = Данные.СтруктураРеквизитов;
	Для Каждого КЗ Из СтруктураРеквизитов Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("Строка")
			Или ТипЗнч(КЗ.Значение) = Тип("Число") Тогда 
			ОсновныеСведения.Вставить(КЗ.Ключ, КЗ.Значение);
		ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Дата") Тогда
			ОсновныеСведения.Вставить(КЗ.Ключ, Формат(КЗ.Значение, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
	КонецЦикла;
	
	ОсновныеСведения.Вставить("КодНО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код"));
	ОсновныеСведения.Вставить("_Дата", Формат(Объект.ДатаПодписи, "ДФ=dd.MM.yyyy"));
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма2020_1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ЭлектронноеПредставление_Форма2020_1(Объект, УникальныйИдентификатор)
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	ДвоичныеДанные = Новый ОписаниеТипов("ДвоичныеДанные");
	
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	ДанныеУведомления.Вставить("Организация", Объект.Организация);
	Ошибки = ПроверитьДокументСВыводомВТаблицу_Форма2020_1(ДанныеУведомления, УникальныйИдентификатор);
	Если Ошибки.Количество() > 0 Тогда 
		Если ДанныеУведомления.Свойство("РазрешитьВыгружатьСОшибками") И ДанныеУведомления.РазрешитьВыгружатьСОшибками = Ложь Тогда 
			ОбщегоНазначения.СообщитьПользователю("При проверке выгрузки обнаружены ошибки. Для просмотра "
				+ "списка ошибок перейдите в форму уведомления, меню ""Проверка"", пункт ""Проверить выгрузку""");
			ВызватьИсключение "";
		Иначе 
			ОбщегоНазначения.СообщитьПользователю("При проверке выгрузки обнаружены ошибки. Для просмотра "
				+ "списка ошибок перейдите в форму уведомления, меню ""Проверка"", пункт ""Проверить выгрузку""");
		КонецЕсли;
	КонецЕсли;
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ДвоичныеДанныеФайла", ДвоичныеДанные);
	
	ДатаИмФайла = Формат(ТекущаяДатаСеанса(), "ДФ=_yyyyMMdd_");
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма2020_1(Объект, УникальныйИдентификатор);
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		ИННФЛ = ?(ЗначениеЗаполнено(ОсновныеСведения.ИННФЛ), ОсновныеСведения.ИННФЛ, "000000000000");
		ИдентификаторОтправителя = СокрЛП(ИННФЛ);
	Иначе
		ИННЮЛ = ?(ЗначениеЗаполнено(ОсновныеСведения.ИННЮЛ), ОсновныеСведения.ИННЮЛ, "0000000000");
		КПП = ?(ЗначениеЗаполнено(ОсновныеСведения.КПП), ОсновныеСведения.КПП, "000000000");
		ИдентификаторОтправителя = ИННЮЛ + КПП;
	КонецЕсли;
	ОсновныеСведения.Вставить("ДатаИмФайла", ДатаИмФайла);
	ОсновныеСведения.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(Объект.ИмяОтчета, "СхемаВыгрузкиФорма2020_1");
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(ОсновныеСведения, СтруктураВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(ОсновныеСведения, СтруктураВыгрузки);
	ДополнитьПараметры_2020_1(ДанныеУведомления);
	ЗаполнитьДаннымиУзелНов(ДанныеУведомления, СтруктураВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(СтруктураВыгрузки);
	
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Процедура ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, Узел, ПараметрыТекущейСтраницы = Неопределено, УИДРодителя = Неопределено)
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "А" Или Стр.Тип = "A" Или Стр.Тип = "П" Тогда
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыТекущейСтраницы <> Неопределено И ПараметрыТекущейСтраницы.Свойство(Стр.Ключ, ЗначениеПоказателя) Тогда 
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
				ИначеЕсли ПараметрыТекущейСтраницы = Неопределено 
					И ЗначениеЗаполнено(Стр.Раздел)
					И ПараметрыВыгрузки.ДанныеУведомления.Свойство(Стр.Раздел, ЗначениеПоказателя) Тогда 
					Если ЗначениеПоказателя.Свойство(Стр.Ключ, ЗначениеПоказателя) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многостраничность = Истина Тогда
				Многостраничность = Неопределено;
				Если ПараметрыВыгрузки.ДанныеМногостраничныхРазделов.Свойство(Стр.Раздел, Многостраничность)
					И ТипЗнч(Многостраничность) = Тип("СписокЗначений") Тогда
				
					Для Каждого СтрМнгч Из Многостраничность Цикл 
						Если УИДРодителя = Неопределено Или СтрМнгч.Значение.УИДРодителя = УИДРодителя Тогда 
							НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
							ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, НовУзел, СтрМнгч.Значение, СтрМнгч.Значение.УИД);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, Стр, ПараметрыТекущейСтраницы, УИДРодителя)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПустаяСтруктура_РеестрДокПОбНЛ()
	Результат = Новый Структура("УИД, УИДРодителя");
	Результат.Вставить("НомРеестр");
	Результат.Вставить("КодОпер");
	Результат.Вставить("СумНеоблОперВс");
	Результат.Вставить("СумОперВс");
	Возврат Результат;
КонецФункции

Функция ПустаяСтруктура_СведВидОпер()
	Результат = Новый Структура("УИД, УИДРодителя");
	Результат.Вставить("НомСвВидОп");
	Результат.Вставить("ВидОпер");
	Результат.Вставить("СумНеоблОпер");
	Возврат Результат;
КонецФункции

Функция ПустаяСтруктура_ПредТипДог()
	Результат = Новый Структура("УИД, УИДРодителя");
	Результат.Вставить("НомТипДог");
	Результат.Вставить("ИмяФайлДог");
	Возврат Результат;
КонецФункции

Функция ПустаяСтруктура_СведКАгент()
	Результат = Новый Структура("УИД, УИДРодителя");
	Результат.Вставить("СумОпер");
	Результат.Вставить("НаимОрг");
	Результат.Вставить("ИННЮЛ");
	Результат.Вставить("КПП");
	Результат.Вставить("ИННФЛ");
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Возврат Результат;
КонецФункции

Функция ПустаяСтруктура_ДокПОбНЛ()
	Результат = Новый Структура("УИД, УИДРодителя");
	Результат.Вставить("ТипДок");
	Результат.Вставить("НомДок");
	Результат.Вставить("ДатаДок");
	Возврат Результат;
КонецФункции

Процедура ДополнитьДаннымиТиповыхДоговоров(УИДВТаблице, УИДРодителя, СумОперВс, Параметры, НумераторНомТипДог)
	Для Каждого Стр1 Из Параметры.СтруктураРеквизитов._ПредТипДог.Строки.НайтиСтроки(Новый Структура("УИД", УИДВТаблице), Ложь) Цикл 
		НумераторНомТипДог = НумераторНомТипДог + 1;
		УИДПредТипДог = Новый УникальныйИдентификатор;
		ПредТипДог = ПустаяСтруктура_ПредТипДог();
		
		ПредТипДог.УИД = УИДПредТипДог;
		ПредТипДог.УИДРодителя = УИДРодителя;
		ПредТипДог.НомТипДог = НумераторНомТипДог;
		ПредТипДог.ИмяФайлДог = Стр1.ИмяФайлДог;
		
		Для Каждого Стр2 Из Стр1.Строки Цикл
			УИДСведКАгент = Новый УникальныйИдентификатор;
			СведКАгент = ПустаяСтруктура_СведКАгент();
			ЗаполнитьЗначенияСвойств(СведКАгент, Стр2);
			СведКАгент.УИД = УИДСведКАгент;
			СведКАгент.УИДРодителя = УИДПредТипДог;
			СумОперВс = СумОперВс + Стр2.СумОпер;
			
			Для Каждого Стр3 Из Стр2.Строки Цикл
				УИДДокПОбНЛ = Новый УникальныйИдентификатор;
				ДокПОбНЛ = ПустаяСтруктура_ДокПОбНЛ();
				ЗаполнитьЗначенияСвойств(ДокПОбНЛ, Стр3);
				ДокПОбНЛ.УИД = УИДДокПОбНЛ;
				ДокПОбНЛ.УИДРодителя = УИДСведКАгент;
				Параметры.ДанныеМногостраничныхРазделов.ДокПОбНЛ.Добавить(ДокПОбНЛ);
			КонецЦикла;
			
			Параметры.ДанныеМногостраничныхРазделов.СведКАгент.Добавить(СведКАгент);
		КонецЦикла;
		
		Параметры.ДанныеМногостраничныхРазделов.ПредТипДог.Добавить(ПредТипДог);
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьПараметры_2020_1(Параметры)
	Параметры.Вставить("ДанныеМногостраничныхРазделов", Новый Структура);
	Параметры.ДанныеМногостраничныхРазделов.Вставить("РеестрДокПОбНЛ", Новый СписокЗначений);
	Параметры.ДанныеМногостраничныхРазделов.Вставить("СведВидОпер", Новый СписокЗначений);
	Параметры.ДанныеМногостраничныхРазделов.Вставить("ПредТипДог", Новый СписокЗначений);
	Параметры.ДанныеМногостраничныхРазделов.Вставить("СведКАгент", Новый СписокЗначений);
	Параметры.ДанныеМногостраничныхРазделов.Вставить("ДокПОбНЛ", Новый СписокЗначений);
	
	Коды = Новый Соответствие;
	Для Каждого Стр1 Из Параметры.СтруктураРеквизитов._РеестрДокПОбНЛ Цикл 
		Если Не ЗначениеЗаполнено(Стр1.КодОпер) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Коды[Стр1.КодОпер] = Неопределено Тогда 
			Коды.Вставить(Стр1.КодОпер, Новый Соответствие);
		КонецЕсли;
		Коды[Стр1.КодОпер].Вставить(Стр1.ВидОпер);
	КонецЦикла;
	
	НумераторКод = 0;
	НумераторВид = 0;
	Отбор = Новый Структура("КодОпер, ВидОпер");
	Для Каждого КЗ1 Из Коды Цикл
		УИДКод = Новый УникальныйИдентификатор;
		НумераторКод = НумераторКод + 1;
		РеестрДокПОбНЛ = ПустаяСтруктура_РеестрДокПОбНЛ();
		РеестрДокПОбНЛ.УИД = УИДКод;
		РеестрДокПОбНЛ.НомРеестр = НумераторКод;
		РеестрДокПОбНЛ.КодОпер = КЗ1.Ключ;
		РеестрДокПОбНЛ.СумНеоблОперВс = 0;
		РеестрДокПОбНЛ.СумОперВс = 0;
		
		НумераторВид = 0;
		Для Каждого КЗ2 Из КЗ1.Значение Цикл
			УИДВид = Новый УникальныйИдентификатор;
			НумераторВид = НумераторВид + 1;
			
			СведВидОпер = ПустаяСтруктура_СведВидОпер();
			СведВидОпер.УИД = УИДВид;
			СведВидОпер.УИДРодителя = УИДКод;
			СведВидОпер.НомСвВидОп = НумераторВид;
			СведВидОпер.ВидОпер = КЗ2.Ключ;
			СведВидОпер.СумНеоблОпер = 0;
			
			Отбор["КодОпер"] = КЗ1.Ключ;
			Отбор["ВидОпер"] = КЗ2.Ключ;
			
			НумераторНомТипДог = 0;
			Для Каждого Стр Из Параметры.СтруктураРеквизитов._РеестрДокПОбНЛ.НайтиСтроки(Отбор) Цикл 
				СведВидОпер.СумНеоблОпер = СведВидОпер.СумНеоблОпер + Стр.СумНеоблОпер;
				РеестрДокПОбНЛ.СумНеоблОперВс = РеестрДокПОбНЛ.СумНеоблОперВс + Стр.СумНеоблОпер;
				
				ДополнитьДаннымиТиповыхДоговоров(Стр.УИД, УИДВид, РеестрДокПОбНЛ.СумОперВс, Параметры, НумераторНомТипДог);
			КонецЦикла;
			
			Параметры.ДанныеМногостраничныхРазделов.СведВидОпер.Добавить(СведВидОпер);
		КонецЦикла;
		
		Параметры.ДанныеМногостраничныхРазделов.РеестрДокПОбНЛ.Добавить(РеестрДокПОбНЛ);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
#КонецЕсли