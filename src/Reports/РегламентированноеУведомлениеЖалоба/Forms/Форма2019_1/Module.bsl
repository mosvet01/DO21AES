&НаКлиенте
Перем ОТД;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗагрузитьДанные()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить();
	СтруктураРеквизитов = СтруктураПараметров.СтруктураРеквизитов;
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Рекв Из Реквизиты Цикл 
		Если СтруктураРеквизитов.Свойство(Рекв.Имя) Тогда 
			Если ТипЗнч(СтруктураРеквизитов[Рекв.Имя]) = Тип("ТаблицаЗначений")
				Или ТипЗнч(СтруктураРеквизитов[Рекв.Имя]) = Тип("ДеревоЗначений") Тогда 
				ЗначениеВРеквизитФормы(СтруктураРеквизитов[Рекв.Имя], Рекв.Имя);
			Иначе
				ЭтотОбъект[Рекв.Имя] = СтруктураРеквизитов[Рекв.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Свойство("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЖалобаФНС;
		Объект.Организация = Организация;
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	Реквизиты = ПолучитьРеквизиты();
	СтруктураРеквизитов = Новый Структура();
	Для Каждого Рекв Из Реквизиты Цикл 
		Если СтрНачинаетсяС(Рекв.Имя, "_") Тогда 
			Если ТипЗнч(ЭтотОбъект[Рекв.Имя]) = Тип("ДанныеФормыКоллекция")
				Или ТипЗнч(ЭтотОбъект[Рекв.Имя]) = Тип("ДанныеФормыДерево") Тогда 
				СтруктураРеквизитов.Вставить(Рекв.Имя, РеквизитФормыВЗначение(Рекв.Имя));
			Иначе
				СтруктураРеквизитов.Вставить(Рекв.Имя, ЭтотОбъект[Рекв.Имя]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("СтруктураРеквизитов, РазрешитьВыгружатьСОшибками", СтруктураРеквизитов, РазрешитьВыгружатьСОшибками);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(ЭтаФорма);
	
	Модифицированность = Ложь;
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Данные = Неопределено;
	Параметры.Свойство("Данные", Данные);
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Организация = Объект.Организация;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ДанныеУведомления = Параметры.ЗначениеКопирования.ДанныеУведомления.Получить().СтруктураРеквизитов;
		Для Каждого Реквизит Из ЭтотОбъект.ПолучитьРеквизиты() Цикл 
			Если ДанныеУведомления.Свойство(Реквизит.Имя)
				И (ТипЗнч(ДанныеУведомления[Реквизит.Имя]) = Тип("Строка")
					Или ТипЗнч(ДанныеУведомления[Реквизит.Имя]) = Тип("Дата")
					Или ТипЗнч(ДанныеУведомления[Реквизит.Имя]) = Тип("Число")) Тогда 
				
				ЭтотОбъект[Реквизит.Имя] = ДанныеУведомления[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
	Иначе
		Организация = Параметры.Организация;
		Объект.Организация = Параметры.Организация;
		Если Параметры.Свойство("НалоговыйОрган") И ЗначениеЗаполнено(Параметры.НалоговыйОрган) Тогда 
			Объект.РегистрацияВИФНС = Параметры.НалоговыйОрган;
		Иначе
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Организация);
		КонецЕсли;
		УстановитьДанныеПоРегистрацииВИФНС();
	КонецЕсли;
	
	НачальнаяИнициализация();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаПодписи = ТекущаяДатаСеанса();
		ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " (создание)";
	КонецЕсли;
	
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	Объект.ИмяФормы = Разложение[3];
	Объект.ИмяОтчета = Разложение[1];
	
	ЗагрузитьДанные();
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.ГруппаЮЛ.Видимость = (_ОтпрЮЛ = 0);
	Элементы.ГруппаФЛ.Видимость = (_ОтпрЮЛ = 1);
	Элементы.ПриложенныеДокументы.Видимость = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами");
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = РазрешитьВыгружатьСОшибками;
	Элементы._НаимДокПодп.АвтоОтметкаНезаполненного = (_ПрПодп = 2);
КонецПроцедуры

&НаСервере
Процедура НачальнаяИнициализация()
	ЭтоЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаПодписи = ТекущаяДатаСеанса();
		Если ЭтоЮрЛицо Тогда 
			Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "ИННЮЛ,КППЮЛ,НаимЮЛПол,АдрЮР,АдрЮР_XML");
			_НаимОрг = Сведения.НаимЮЛПол;
			_ИНН = Сведения.ИННЮЛ;
			_КПП = Сведения.КППЮЛ;
			_АдрРФ = Сведения.АдрЮР;
			_НаимОргОтпр = Сведения.НаимЮЛПол;
			_ИННЮЛОтпр = Сведения.ИННЮЛ;
			_КППОтпр = Сведения.КППЮЛ;
			_АдрРФ = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Сведения.АдрЮР_XML);
			_ОтпрЮЛ = 0;
		Иначе
			Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "ИННФЛ,ФамилияИП,ИмяИП,ОтчествоИП,АдрПрописки");
			_ИНН = Сведения.ИННФЛ;
			_ФамилияОрг = Сведения.ФамилияИП;
			_ИмяОрг = Сведения.ИмяИП;
			_ОтчествоОрг = Сведения.ОтчествоИП;
			_АдрРФ = Сведения.АдрПрописки;
			_ИННФЛОтпр = Сведения.ИННФЛ;
			_ФамилияОтпр = Сведения.ФамилияИП;
			_ИмяОтпр = Сведения.ИмяИП;
			_ОтчествоОтпр = Сведения.ОтчествоИП;
			_ОтпрЮЛ = 1;
		КонецЕсли;
	КонецЕсли;
	_ПрПодп = 1;
	
	Элементы._НомЖалоб.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НаимОргОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИННЮЛОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._КППОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИННФЛОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ФамилияОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИмяОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ОтчествоОтпр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ФамилияПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИмяПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ОтчествоПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НаимДокПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ПрПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	
	Элементы._ИНН.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._АдрРФ.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Если ЭтоЮрЛицо Тогда 
		Элементы._НаимОрг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
		Элементы._КПП.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
		Элементы._ФамилияОрг.Видимость = Ложь;
		Элементы._ИмяОрг.Видимость = Ложь;
		Элементы._ОтчествоОрг.Видимость = Ложь;
	Иначе
		Элементы._ФамилияОрг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
		Элементы._ИмяОрг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
		Элементы._ОтчествоОрг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
		Элементы._НаимОрг.Видимость = Ложь;
		Элементы._КПП.Видимость = Ложь;
	КонецЕсли;
	
	Элементы._НаимНО.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._КодНО.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НаимНОВыш.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._КодНОВыш.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ПредмОбжал.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ДатаДокОбжал.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НомДокОбжал.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._Требования.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ОснНарушПрав.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._СпосПолРеш.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._КодЖалоб.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФорму()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПечатьСразу();
КонецФункции

&НаКлиенте
Процедура ПечатьУведомления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьУведомленияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СформироватьXML(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

#Область ОтправкаВФНС
////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС
&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ТаблицаОшибок = ПроверитьВыгрузкуНаСервере();
	Если ТаблицаОшибок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам", Новый Структура("ТаблицаОшибок", ТаблицаОшибок), ЭтотОбъект, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитов(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура _ОтпрЮЛПриИзменении(Элемент)
	Элементы.ГруппаЮЛ.Видимость = (_ОтпрЮЛ = 0);
	Элементы.ГруппаФЛ.Видимость = (_ОтпрЮЛ = 1);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоФизЛицу(Физлицо)
	Если ЗначениеЗаполнено(Физлицо) Тогда 
		ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
		Объект.ПодписантФамилия = СокрЛП(ДанныеПредставителя.Фамилия);
		Объект.ПодписантИмя = СокрЛП(ДанныеПредставителя.Имя);
		Объект.ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
		
		_ФамилияПодп = СокрЛП(ДанныеПредставителя.Фамилия);
		_ИмяПодп = СокрЛП(ДанныеПредставителя.Имя);
		_ОтчествоПодп = СокрЛП(ДанныеПредставителя.Отчество);
		
		_ИННФЛОтпр = ДанныеПредставителя.ИНН;
		_ФамилияОтпр = _ФамилияПодп;
		_ИмяОтпр = _ИмяПодп;
		_ОтчествоОтпр = _ОтчествоПодп;
	Иначе
		Объект.ПодписантФамилия = "";
		Объект.ПодписантИмя = "";
		Объект.ПодписантОтчество = "";
		
		_ФамилияПодп = "";
		_ИмяПодп = "";
		_ОтчествоПодп = "";
		_ИННФЛОтпр = "";
		_ФамилияОтпр = "";
		_ИмяОтпр = "";
		_ОтчествоОтпр = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоОрганизации()
	Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьДанныеРуководителя(Объект);
	
	_ФамилияПодп = Объект.ПодписантФамилия;
	_ИмяПодп = Объект.ПодписантИмя;
	_ОтчествоПодп = Объект.ПодписантОтчество;
	Если ЭтоЮрЛицо Тогда 
		Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "ИННЮЛ,КППЮЛ,НаимЮЛПол");
		_НаимОргОтпр = Сведения.НаимЮЛПол;
		_ИННЮЛОтпр = Сведения.ИННЮЛ;
		_КППОтпр = Сведения.КППЮЛ;
		_ОтпрЮЛ = 0;
	Иначе
		Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "ИННФЛ,ФамилияИП,ИмяИП,ОтчествоИП");
		_ИННФЛОтпр = Сведения.ИННФЛ;
		_ФамилияОтпр = Сведения.ФамилияИП;
		_ИмяОтпр = Сведения.ИмяИП;
		_ОтчествоОтпр = Сведения.ОтчествоИП;
		_ОтпрЮЛ = 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РегистрацияВИФНС, "Код,Наименование,Представитель,ДокументПредставителя");
	_КодНО = Реквизиты.Код;
	_НаимНО = Реквизиты.Наименование;
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		_ПрПодп = 2;
		_НаимДокПодп = Реквизиты.ДокументПредставителя;
	Иначе
		УстановитьПредставителяПоОрганизации();
		_ПрПодп = 1;
		_НаимДокПодп = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО(Команда)
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, , Ложь, СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
КонецПроцедуры

&НаСервере
Процедура ПечатьБРОНаСервере()
	УведомлениеОСпецрежимахНалогообложения.ПечатьУведомленияБРО(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	РазрешитьВыгружатьСОшибками = Не РазрешитьВыгружатьСОшибками;
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = РазрешитьВыгружатьСОшибками;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда 
		Попытка
			Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы[Параметр.ИмяСтраницы];
			ТекущийЭлемент = Элементы[Параметр.ИмяОбласти];
		Исключение
		КонецПопытки;
		
		Активизировать();
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И Источник.Открыта() Тогда 
			Источник.Закрыть( );
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПрПодпПриИзменении(Элемент)
	Элементы._НаимДокПодп.АвтоОтметкаНезаполненного = (_ПрПодп = 2);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПослеДобавленияПрисоединенногоФайла(ИмяДокумент, УИДДокумент, УИДФайл, ПрисоединенныйФайл, ПрисоединенныйФайлИмя) Экспорт
	Модифицированность = Истина;
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОТД = Новый ОписаниеТипов("Дата");
КонецПроцедуры

&НаКлиенте
Процедура _ПриложПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда 
		ТекстВопроса = "Перед добавлением файлов необходимо сохранить документ. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("_ПриложПередНачаломПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ВвестиНаименованиеДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПриложПередНачаломПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьДанные();
		ВвестиНаименованиеДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаименованиеДокумента()
	ОО = Новый ОписаниеОповещения("_ПриложПередНачаломДобавленияПослеВвводаНаименования", ЭтотОбъект);
	ПоказатьВводСтроки(ОО, "", "Наименование документа");
КонецПроцедуры

&НаКлиенте
Процедура _ПриложПередНачаломДобавленияПослеВвводаНаименования(НаименованиеДокумента, Параметры) Экспорт
	Если ТипЗнч(НаименованиеДокумента) = Тип("Строка") И ЗначениеЗаполнено(НаименованиеДокумента) Тогда
		ПарамДобавления = Новый Структура("НаименованиеДокумента", НаименованиеДокумента);
		ОО = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ПарамДобавления);
		
		АдресФайла  = "";
		ВыбИмяФайла = "";
		Попытка
			НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
		Исключение
			ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
										 |%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог, НаименованиеДокумента) Экспорт 
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	РасширениеБезТочки = СтрНайти(ПолноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ЗначениеЗаполнено(РасширениеБезТочки) Тогда 
		РасширениеБезТочки = Сред(ПолноеИмяФайла, РасширениеБезТочки + 1);
	Иначе 
		РасширениеБезТочки = "";
	КонецЕсли;
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	НоваяСсылкаНаФайл = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	
	НовСтрФайл = _Прилож.Добавить();
	НовСтрФайл.НаимПрилДок = НаименованиеДокумента;
	НовСтрФайл.ИмяФайла = ИмяФайла;
	НовСтрФайл.ИдентификаторФайла = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	НовСтрФайл.ПрисоединенныйФайл = НоваяСсылкаНаФайл;
	Модифицированность = Истина;
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
		ИЛИ ВРег(Прав(ВыбИмяФайла, 5)) = ".TIFF"
		ИЛИ ВРег(Прав(ВыбИмяФайла, 5)) = ".JPEG"
		ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
		ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PNG"
		ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
		
		ТекстПредупреждения = НСтр(
			"ru='Файл приложения должен иметь одно из допустимых расширений: JPEG, PDF, TIF, PNG!'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ВыбИмяФайла, Каталог, Парам.НаименованиеДокумента);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	_ПриложПриАктивизацииСтроки(Неопределено);
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлНаСервере(ПрисоединенныйФайл)
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	Если ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы) Тогда 
		ФайлОбъект.Удалить();
	Иначе
		ФайлОбъект.ПометкаУдаления = Истина;
		ФайлОбъект.Записать();
	КонецЕсли;
	Модифицированность = Истина;
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура _ПриложПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы._Прилож.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПрисоединенныйФайл) Тогда
		ПрисоединенныйФайл = ТекущиеДанные.ПрисоединенныйФайл;
		_Прилож.Удалить(_Прилож.Индекс(ТекущиеДанные));
		УдалитьФайлНаСервере(ПрисоединенныйФайл);
		_ПриложПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПриложПриАктивизацииСтроки(Элемент)
	Элементы._ПриложУдалить.Доступность = (Элементы._Прилож.ТекущиеДанные <> Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПриложВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "_ПриложИмяФайла" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _КодНОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, "");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

