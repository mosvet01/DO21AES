#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуПримененияФорматов() Экспорт 
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуПримененияФорматов();
	
	Стр = Результат.Добавить();
	Стр.ИмяФормы = "Форма2020_1";
	Стр.КНД = "1125332";
	Стр.ВерсияФормата = "5.01";
	
	Возврат Результат;
КонецФункции

Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт 
	Возврат Истина;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт 
	Возврат Ложь;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт 
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	Стр = Результат.Добавить();
	Стр.ИмяФормы = "Форма2020_1";
	Стр.ОписаниеФормы = "Форма учетной политики организации";
	Стр.ДатаНачала = '20201001';
	Стр.ДатаКонца = '20991231';
	
	Возврат Результат;
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2020_1" Тогда
		Возврат ЭлектронноеПредставление_Форма2020_1(Объект, УникальныйИдентификатор);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПроверитьДокумент(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2020_1" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Электронный формат для данной формы не опубликован'"));
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СформироватьСписокЛистов(Объект) Экспорт
	Если Объект.ИмяФормы = "Форма2020_1" Тогда 
		Возврат СформироватьСписокЛистовФорма2020_1(Объект);
	КонецЕсли;
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт 
	Если ИмяФормы = "Форма2020_1" Тогда 
		Данные = Объект.ДанныеУведомления.Получить();
		Данные.Вставить("Организация", Объект.Организация);
		Данные.Вставить("ПодписантФамилия", Объект.ПодписантФамилия);
		Данные.Вставить("ПодписантИмя", Объект.ПодписантИмя);
		Данные.Вставить("Организация", Объект.Организация);
		Возврат ПроверитьДокументСВыводомВТаблицу_Форма2020_1(Данные, УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма2020_1(СведенияОтправки)
	Префикс = "ON_UCHPOLNALMON";
	Возврат Документы.УведомлениеОСпецрежимахНалогообложения.ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Процедура Проверить_ОбщПолож(Данные, ТаблицаОшибок)
	Страница = "ОбщПолож";
	ДанныеСтраницы = Данные.ДанныеУведомления[Страница];
	
	Если Не ЗначениеЗаполнено(ДанныеСтраницы["ПорядВеденПрПорВеден"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ПорядВеденПрПорВеден"));
	КонецЕсли;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр1 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["ВидДеятПрДеят"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "ВидДеятПрДеят___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр2 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["НаличОППрНалОП"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "НаличОППрНалОП___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр3 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["СпособВеденПрПорВеден"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "СпособВеденПрПорВеден___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Проверить_НДС(Данные, ТаблицаОшибок)
	Страница = "НДС";
	ДанныеСтраницы = Данные.ДанныеУведомления[Страница];
	
	Если Не ЗначениеЗаполнено(ДанныеСтраницы["НалМетНДСПрМетНДС"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "НалМетНДСПрМетНДС"));
	КонецЕсли;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр4 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["ПорРасх5ПрПорРасх5"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "ПорРасх5ПрПорРасх5___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр5 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["РаспРасх5ПрРаспРасх5"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "РаспРасх5ПрРаспРасх5___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Проверить_Приб(Данные, ТаблицаОшибок)
	Страница = "Приб";
	ДанныеСтраницы = Данные.ДанныеУведомления[Страница];
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр7 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["РегистрУчПрРегистрУч"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "РегистрУчПрРегистрУч___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр8 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["ПокРаспПрРасхПрПокРаспРасх"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "ПокРаспПрРасхПрПокРаспРасх___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;

	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр9 Цикл 
		Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Стр["РезервОргПрРезервОрг"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "РезервОргПрРезервОрг___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр10 Цикл 
		Инд = Инд + 1;
		Если ЗначениеЗаполнено(Стр["МетСписЦБКратОпис"]) И Не ЗначениеЗаполнено(Стр["МетСписЦБПрМетСписЦБ"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "МетСписЦБПрМетСписЦБ___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр11 Цикл 
		Инд = Инд + 1;
		Если ЗначениеЗаполнено(Стр["ДолПрибОПКратОпис"]) И Не ЗначениеЗаполнено(Стр["ДолПрибОППрДолПрибОП"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "ДолПрибОППрДолПрибОП___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ОтчПерПрОтчПер,
		|АвансПлатПрАвансПлат,МетДохРасхПрМетДохРасх,ПерПрямРасхКратОпис,ПорРаспПрРасхПрПорРаспРасх,
		|УчетТМЦПрУчетТМЦ,ОценМатПроизвПрОцМатПроизв,РасхПриобрМИПрРасхПриобрМИ,АмортИмущПрАмортИмущ,
		|НачислАмортПрНачислАморт,АмортПремПрАмортПрем", ",", Истина, Истина) Цикл 
		
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[Элт]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, Элт));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеСтраницы["ДохРабДТЦКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ДохРабДТЦПрДохРабДТЦ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ДохРабДТЦПрДохРабДТЦ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ДохНИОКРКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ДохНИОКРПрДохНИОКР"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ДохНИОКРПрДохНИОКР"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ДохАрендКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ДохАрендПрДохАренд"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ДохАрендПрДохАренд"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ОценПокТовКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ОценПокТовПрОценПокТов"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ОценПокТовПрОценПокТов"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["АмортАрендОСКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["АмортАрендОСПрАмортАрендОС"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "АмортАрендОСПрАмортАрендОС"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["СрокИспОСРекКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["СрокИспОСРекПрСрокИспОСРек"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "СрокИспОСРекПрСрокИспОСРек"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["СрокИспОСБУКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["СрокИспОСБУПрСрокИспОСБУ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "СрокИспОСБУПрСрокИспОСБУ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["КоэфАмортКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["КоэфАмортПрКоэфАморт"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "КоэфАмортПрКоэфАморт"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ЦенРынокЦБКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ЦенРынокЦБПрЦенРынокЦБ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ЦенРынокЦБПрЦенРынокЦБ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ОперЦБКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ОперЦБПрПорСделЦБ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ОперЦБПрПорСделЦБ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["РаспРасхНедрКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["РаспРасхНедрПрРаспРасхНедр"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "РаспРасхНедрПрРаспРасхНедр"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["РасхПравЗУКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["РасхПравЗУПрРасхПравЗУ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "РасхПравЗУПрРасхПравЗУ"));
	КонецЕсли
КонецПроцедуры

Процедура Проверить_НалИмущ(Данные, ТаблицаОшибок)
	Страница = "НалИмущ";
	Инд = 0;
	ЕстьСтроки = Ложь;
	Для Каждого Стр Из Данные.ДанныеДопСтрокБД.МнгСтр6 Цикл 
		Инд = Инд + 1;
		Если ЗначениеЗаполнено(Стр["НалИмущКратОпис"]) И Не ЗначениеЗаполнено(Стр["НалИмущПрНалИмущ"]) Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Не указан обязательный признак", Страница, "НалИмущПрНалИмущ___" + Формат(Инд, "ЧГ=")));
		КонецЕсли;
		ЕстьСтроки = ЕстьСтроки Или ЗначениеЗаполнено(Стр["НалИмущКратОпис"]) Или ЗначениеЗаполнено(Стр["НалИмущПрНалИмущ"]);
	КонецЦикла;
	
	Если Не ЕстьСтроки Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не заполнены данные по налогу на имущество", Страница, "НалИмущПрНалИмущ___1"));
	КонецЕсли;
КонецПроцедуры

Процедура Проверить_НДПИ(Данные, ТаблицаОшибок)
	Страница = "НДПИ";
	ДанныеСтраницы = Данные.ДанныеУведомления[Страница];
	Если ЗначениеЗаполнено(ДанныеСтраницы["ОпрКолДПИКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ОпрКолДПИПрОпрКолДПИ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ОпрКолДПИПрОпрКолДПИ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["СтоимДПИКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["СтоимДПИПрСтоимДПИ"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "СтоимДПИПрСтоимДПИ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["РаздУчРасхКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["РаздУчРасхПрРаздУчРасх"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "РаздУчРасхПрРаздУчРасх"));
	КонецЕсли;
КонецПроцедуры

Процедура Проверить_Акциз(Данные, ТаблицаОшибок)
	Страница = "Акциз";
	ДанныеСтраницы = Данные.ДанныеУведомления[Страница];
	Если ЗначениеЗаполнено(ДанныеСтраницы["КолАкц193НККратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["КолАкц193НКПрКолАкц193НК"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "КолАкц193НКПрКолАкц193НК"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ВычАкц200НККратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ВычАкц200НКПрВычАкц200НК"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ВычАкц200НКПрВычАкц200НК"));
	КонецЕсли;
КонецПроцедуры

Процедура Проверить_ПрибКГН(Данные, ТаблицаОшибок)
	Страница = "ПрибКГН";
	ДанныеСтраницы = Данные.ДанныеУведомления[Страница];
	Если ЗначениеЗаполнено(ДанныеСтраницы["РасчНалБазКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["РасчНалБазПрРасчНалБаз"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "РасчНалБазПрРасчНалБаз"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["ОпрНалБазКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["ОпрНалБазПрОпрНалБаз"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "ОпрНалБазПрОпрНалБаз"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтраницы["УчУбытКГНКратОпис"]) И Не ЗначениеЗаполнено(ДанныеСтраницы["УчУбытКГНПрУчУбытКГН"]) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан обязательный признак", Страница, "УчУбытКГНПрУчУбытКГН"));
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьДокументСВыводомВТаблицу_Форма2020_1(Данные, УникальныйИдентификатор)
	ТаблицаОшибок = Новый СписокЗначений;
	
	Титульная = Данные.ДанныеУведомления.Титульная;
	Если Не ЗначениеЗаполнено(Титульная.КодНО) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан налоговый орган", "Титульная", "КодНО"));
	ИначеЕсли Не УведомлениеОСпецрежимахНалогообложения.СтрокаСодержитТолькоЦифры(Титульная.КодНО) Или СтрДлина(СокрЛП(Титульная.КодНО)) <> 4 Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Неправильно указан налоговый орган", "Титульная", "КодНО"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Титульная.Наименование) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указано наименование организации", "Титульная", "Наименование"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Титульная.ДАТА_ПОДПИСИ) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана дата формирования документа", "Титульная", "ДАТА_ПОДПИСИ"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Титульная.ГодУчПол) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан год начала действия учетной политики", "Титульная", "ГодУчПол"));
	ИначеЕсли СтрДлина(СокрЛП(Титульная.ГодУчПол)) <> 4 Тогда
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Неправильно указан год начала действия учетной политики", "Титульная", "ГодУчПол"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Титульная.ДатаУчПол) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана дата приказа утверждения учетной политики организации", "Титульная", "ДатаУчПол"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Титульная.ПриказУчПол) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан номер  приказа утверждения учетной политики организации", "Титульная", "ПриказУчПол"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Титульная.ИНН) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан ИНН", "Титульная", "ИНН"));
	ИначеЕсли Не ЗначениеЗаполнено(Титульная.КПП) Тогда
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан КПП", "Титульная", "КПП"));
	Иначе
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Титульная.ИНН, Истина, "") Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Неправильно указан ИНН", "Титульная", "ИНН"));
		КонецЕсли;
		Если Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Титульная.КПП, "") Тогда 
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"Неправильно указан КПП", "Титульная", "КПП"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Титульная.ПРИЗНАК_НП_ПОДВАЛ) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан признак подписанта", "Титульная", "ПРИЗНАК_НП_ПОДВАЛ"));
	ИначеЕсли Не (Титульная.ПРИЗНАК_НП_ПОДВАЛ = "1" Или Титульная.ПРИЗНАК_НП_ПОДВАЛ = "2") Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Неправильно указан признак подписанта", "Титульная", "ПРИЗНАК_НП_ПОДВАЛ"));
	КонецЕсли;
	Если (Не ЗначениеЗаполнено(Данные.ПодписантФамилия) Или Не ЗначениеЗаполнено(Данные.ПодписантИмя)) Тогда 
		
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Необходимо указать подписанта", "Титульная", "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Титульная.Долж) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана должность подписанта", "Титульная", "Долж"));
	КонецЕсли;
	
	Если Титульная.ПРИЗНАК_НП_ПОДВАЛ = "2" И Не ЗначениеЗаполнено(Титульная.НаимДок) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан документ подписанта", "Титульная", "НаимДок"));
	КонецЕсли;
	
	Проверить_ОбщПолож(Данные, ТаблицаОшибок);
	Проверить_НДС(Данные, ТаблицаОшибок);
	Проверить_Приб(Данные, ТаблицаОшибок);
	Проверить_НалИмущ(Данные, ТаблицаОшибок);
	Проверить_НДПИ(Данные, ТаблицаОшибок);
	Проверить_Акциз(Данные, ТаблицаОшибок);
	Проверить_ПрибКГН(Данные, ТаблицаОшибок);
	
	Для Каждого Стр Из Данные.ПриложенныеФайлы.Строки Цикл 
		Если Стр.Строки.Количество() = 0 Тогда
			ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
				"К каждому документу необходимо приложить файлы", "ПриложенныеФайлы", ""));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма2020_1(Объект, УникальныйИдентификатор)
	ОсновныеСведения = Новый Структура;
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Ложь);
		Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДанныеНПЮЛ(Объект, ОсновныеСведения);
	Иначе
		ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Истина);
		Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДанныеНПФЛ(Объект, ОсновныеСведения);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ОсновныеСведения.Вставить("ДатаДок", Формат(Объект.ДатаПодписи, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("ФамилияПодп", Объект.ПодписантФамилия);
	ОсновныеСведения.Вставить("ИмяПодп", Объект.ПодписантИмя);
	ОсновныеСведения.Вставить("ОтчествоПодп", Объект.ПодписантОтчество);
	
	Данные = Объект.ДанныеУведомления.Получить();
	ОсновныеСведения.Вставить("КодНО", Данные.ДанныеУведомления.Титульная.КодНО);
	ОсновныеСведения.Вставить("ПрПодп", Данные.ДанныеУведомления.Титульная.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННТитул", Данные.ДанныеУведомления.Титульная.ИНН);
	ОсновныеСведения.Вставить("ИННЮЛ", Данные.ДанныеУведомления.Титульная.ИНН);
	ОсновныеСведения.Вставить("НаимДок", Данные.ДанныеУведомления.Титульная.НаимДок);
	КолФайл = 0;
	Для Каждого Стр Из Данные.ПриложенныеФайлы.Строки Цикл 
		КолФайл = КолФайл + Стр.Строки.Количество();
	КонецЦикла;
	ОсновныеСведения.Вставить("КолФайл", КолФайл);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма2020_1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ЭлектронноеПредставление_Форма2020_1(Объект, УникальныйИдентификатор)
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	СписокФайлов = Новый СписокЗначений;
	ИменаФайлов = Новый СписокЗначений;
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ДвоичныеДанныеФайла", Новый ОписаниеТипов("ДвоичныеДанные"));
	
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	ДанныеУведомления.Вставить("Организация", Объект.Организация);
	ДанныеУведомления.Вставить("ПодписантФамилия", Объект.ПодписантФамилия);
	ДанныеУведомления.Вставить("ПодписантИмя", Объект.ПодписантИмя);
	ДанныеУведомления.Вставить("Организация", Объект.Организация);
	Ошибки = ПроверитьДокументСВыводомВТаблицу_Форма2020_1(ДанныеУведомления, УникальныйИдентификатор);
	Если Ошибки.Количество() > 0 Тогда 
		Если ДанныеУведомления.Свойство("РазрешитьВыгружатьСОшибками") И ДанныеУведомления.РазрешитьВыгружатьСОшибками = Ложь Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проверке выгрузки обнаружены ошибки. Для просмотра списка ошибок перейдите в форму уведомления, меню ""Проверка"", пункт ""Проверить выгрузку""", Объект.Ссылка);
			ВызватьИсключение "";
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проверке выгрузки обнаружены ошибки. Для просмотра списка ошибок перейдите в форму уведомления, меню ""Проверка"", пункт ""Проверить выгрузку""", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма2020_1(Объект, УникальныйИдентификатор);
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(Объект.ИмяОтчета, "СхемаВыгрузкиФорма2020_1");
	ЗаполнитьДанными_Форма2020_1(Объект, ОсновныеСведения, СтруктураВыгрузки, СписокФайлов, ИменаФайлов);
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		Для Инд = 0 По СписокФайлов.Количество() - 1 Цикл 
			Файл = СписокФайлов[Инд];
			ИмяФайлаПрод = ИменаФайлов[Инд];
			СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
			СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ИмяФайлаПрод;
			СтрокаСведенийЭлектронногоПредставления.ДвоичныеДанныеФайла = МодульРаботаСФайлами.ДвоичныеДанныеФайла(Файл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Процедура ДополнитьПараметры_2020(Параметры)
КонецПроцедуры

Процедура ЗаполнитьДанными_Форма2020_1(Объект, Параметры, ДеревоВыгрузки, СписокФайлов, ИменаФайлов)
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(Параметры, ДеревоВыгрузки);
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	ДополнитьПараметры_2020(ДанныеУведомления);
	ЗаполнитьДаннымиУзелНов(ДанныеУведомления, ДеревоВыгрузки);
	
	ДатаИмФайла = Формат(ТекущаяДатаСеанса(), "ДФ=_yyyyMMdd_");
	Узел_Документ = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_СведУчПол = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_Документ, "СведУчПол");
	Узел_ДокСкан = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СведУчПол, "ДокСкан");
	Для Каждого Стр0 Из ДанныеУведомления.ПриложенныеФайлы.Строки Цикл
		УИД1 = Строка(Новый УникальныйИдентификатор);
		НовУзел_ДокСкан = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Узел_ДокСкан);
		Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьЗначениеЭлемента(НовУзел_ДокСкан, "НаимДок", Стр0.Документ);
		
		Узел_ИмяФайл = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(НовУзел_ДокСкан, "ИмяФайл");
		Для Каждого Стр1 Из Стр0.Строки Цикл
			УИД2 = Строка(Новый УникальныйИдентификатор);
			НовУзел_ИмяФайл = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Узел_ИмяФайл);
			ИмяФайлаПрод = "1125332_" + Параметры.ИННЮЛ + Параметры.КПП + "_"  + Параметры.КодНО 
							+ "_" + УИД1 + ДатаИмФайла + УИД2 + ".pdf";
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(НовУзел_ИмяФайл, ИмяФайлаПрод);
			
			ИменаФайлов.Добавить(ИмяФайлаПрод);
			СписокФайлов.Добавить(Стр1.ПрисоединенныйФайл);
		КонецЦикла;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_ДокСкан);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, Узел, ПараметрыТекущейСтраницы = Неопределено, УИДРодителя = Неопределено)
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "А" Или Стр.Тип = "A" Или Стр.Тип = "П" Тогда
			Если Стр.Многострочность = Истина Тогда
				Многострочность = Неопределено;
				Если ПараметрыВыгрузки.ДанныеДопСтрокБД.Свойство(Стр.Раздел, Многострочность)
					И ТипЗнч(Многострочность) = Тип("ТаблицаЗначений") Тогда
				
					Для Каждого СтрМнгч Из Многострочность Цикл
						Если ЗначениеЗаполнено(УИДРодителя)
							И УИДРодителя <> СтрМнгч.УИД Тогда 
							
							Продолжить;
						КонецЕсли;
						
						НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(НовУзел, СтрМнгч[НовУзел["Ключ"]]);
					КонецЦикла;
					
					РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Стр.Ключ) Тогда
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыТекущейСтраницы <> Неопределено И ПараметрыТекущейСтраницы.Свойство(Стр.Ключ, ЗначениеПоказателя) Тогда 
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
				ИначеЕсли ПараметрыТекущейСтраницы = Неопределено 
					И ЗначениеЗаполнено(Стр.Раздел)
					И ПараметрыВыгрузки.ДанныеУведомления.Свойство(Стр.Раздел, ЗначениеПоказателя) Тогда 
					Если ЗначениеПоказателя.Свойство(Стр.Ключ, ЗначениеПоказателя) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многостраничность = Истина Тогда
				Многостраничность = Неопределено;
				Если ПараметрыВыгрузки.ДанныеМногостраничныхРазделов.Свойство(Стр.Раздел, Многостраничность)
					И ТипЗнч(Многостраничность) = Тип("СписокЗначений") Тогда
				
					Для Каждого СтрМнгч Из Многостраничность Цикл 
						Если УИДРодителя = Неопределено Или СтрМнгч.Значение.УИДРодителя = УИДРодителя Тогда 
							НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
							ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, НовУзел, СтрМнгч.Значение, СтрМнгч.Значение.УИД);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				Если Стр.Многострочность = Истина Тогда
					Многострочность = Неопределено;
					Если ПараметрыВыгрузки.ДанныеДопСтрокБД.Свойство(Стр.Раздел, Многострочность)
						И ТипЗнч(Многострочность) = Тип("ТаблицаЗначений") Тогда
					
						Для Каждого СтрМнгч Из Многострочность Цикл
							Если ЗначениеЗаполнено(УИДРодителя)
								И УИДРодителя <> СтрМнгч.УИД Тогда 
								
								Продолжить;
							КонецЕсли;
							
							НовУзел = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Стр);
							ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, НовУзел, 
								ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрМнгч));
						КонецЦикла;
						
						РегламентированнаяОтчетность.УдалитьУзел(Стр);
					КонецЕсли;
					Иначе
						ЗаполнитьДаннымиУзелНов(ПараметрыВыгрузки, Стр, ПараметрыТекущейСтраницы, УИДРодителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьСписокЛистовФорма2020_1(Объект) Экспорт
	Листы = Новый СписокЗначений;
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	ПечатнаяФорма.Вывести(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПечатьВСледующихВерсиях"));
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, 1, Ложь);
	Возврат Листы;
КонецФункции
#КонецОбласти
#КонецЕсли
