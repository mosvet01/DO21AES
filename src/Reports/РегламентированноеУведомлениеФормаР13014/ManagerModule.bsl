#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СоздатьЗаполненноеУведомление(Параметры, СуществующийДокументСсылка = Неопределено) Экспорт
	
	ИмяФормы = Неопределено;
	Если НЕ Параметры.Свойство("ИмяФормы", ИмяФормы) Тогда
		ИмяФормы = "Форма2020_4";
	КонецЕсли;
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СоздатьЗаполненноеУведомление():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, НазначениеАдреса = Неопределено) Экспорт
	
	СоответствиеПоказателей = Новый Структура;
	
	Если ИмяФормы = "Форма2020_4" Тогда
		ЗаполнитьСоответствиеРеквизитамАдреса_Форма2020_4(СоответствиеПоказателей, НазначениеАдреса);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СоответствиеПоказателейСтраницыРеквизитамАдреса():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
	Возврат СоответствиеПоказателей;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат Истина;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ДоступнаПечатьPDF417():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт
	
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	ПолноеОписаниеФормы = Результат.Добавить();
	ПолноеОписаниеФормы.ИмяФормы = "Форма2020_4";
	ПолноеОписаниеФормы.ОписаниеФормы = "В редакции приказа ФНС России от 31.08.2020 № ЕД-7-14/617@ (в редакции приказа ФНС России от 06.11.2020 № ЕД-7-14/794@)";
	ПолноеОписаниеФормы.ДатаНачала = '2020-11-25';
	ПолноеОписаниеФормы.ДатаКонца  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт
	
	Возврат "Отчет.РегламентированноеУведомлениеФормаР13014.Форма.Форма2020_4";
	
КонецФункции

Процедура СохранитьДанныеПомощника(Уведомление, ДанныеПомощникаЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Уведомление) Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = Уведомление.ПолучитьОбъект();
	ДанныеУведомления = УведомлениеОбъект.ДанныеУведомления.Получить();
	Если ТипЗнч(ДанныеУведомления) = Тип("Структура") Тогда
		ДанныеУведомления.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения);
	КонецЕсли;
	
	УведомлениеОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеУведомления);
	Попытка
		УведомлениеОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьДокумент(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Попытка
			Данные = Объект.ДанныеУведомления.Получить();
			Проверить_Форма2020_4(Данные, УникальныйИдентификатор);
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"Проверка уведомления прошла успешно.", УникальныйИдентификатор);
		Исключение
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"При проверке уведомления обнаружены ошибки.", УникальныйИдентификатор);
		КонецПопытки;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ПроверитьДокумент():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СведенияИзФормРегистрации(ИмяФормы, ДанныеУведомления) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодЗаявления", "Р13014");
	Данные = ДанныеУведомления.Получить();
	
	Лист001 = Данные.ДанныеУведомления.Лист001;
	ЛистА   = Данные.ДанныеУведомления.ЛистА;
	
	Результат.Вставить("ОГРН", Лист001.П01010100);
	Результат.Вставить("НаимЮЛПолн", ЛистА.А01010100);
	
	Результат.Вставить("Заявители", Новый Массив);
	
	Для Каждого ЛистН Из Данные.ДанныеМногостраничныхРазделов.ЛистН Цикл
		Если Не УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(ЛистН.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СвЗаяв = Новый Структура;
		СвЗаяв.Вставить("Фамилия",  ЛистН.Значение.Н01020101);
		СвЗаяв.Вставить("Имя",      ЛистН.Значение.Н01020102);
		СвЗаяв.Вставить("Отчество", ЛистН.Значение.Н01020103);
		СвЗаяв.Вставить("ЭлектроннаяПочта", ЛистН.Значение.Н01030100);
		
		Результат.Заявители.Добавить(СвЗаяв);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияОтчета

Функция СформироватьДеревоСтраниц(ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьДеревоСтраниц_Форма2020_4();
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьДеревоСтраниц():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьДеревоСтраниц_Форма2020_4()
	
	ДеревоСтраниц = НовоеДеревоСтраниц();
	КорневойУровень = ДеревоСтраниц.Строки;
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Стр. 1";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.ИмяМакета = "Форма2020_4_Страница1";
	СтраницаУровня1.Многостраничность = Ложь;
	СтраницаУровня1.Многострочность = Ложь;
	СтраницаУровня1.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня1.ИДНаименования = "Лист001";
	СтраницаУровня1.МакетыПФ = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_Страница", 2);
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Лист А";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.ИмяМакета = "Форма2020_4_ЛистА";
	СтраницаУровня1.Многостраничность = Ложь;
	СтраницаУровня1.Многострочность = Истина;
	СтраницаУровня1.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня1.ИДНаименования = "ЛистА";
	СтраницаУровня1.МногострочныеЧасти.Добавить("МногострочнаяЧастьА010201");
	СтраницаУровня1.МногострочныеЧасти.Добавить("МногострочнаяЧастьА010202");
	СтраницаУровня1.МакетыПФ = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистА_", 2);
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Лист Б";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.ИмяМакета = "Форма2020_4_ЛистБ";
	СтраницаУровня1.Многостраничность = Ложь;
	СтраницаУровня1.Многострочность = Истина;
	СтраницаУровня1.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня1.ИДНаименования = "ЛистБ";
	СтраницаУровня1.МногострочныеЧасти.Добавить("МногострочнаяЧастьБ010207");
	СтраницаУровня1.МакетыПФ = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистБ_", 2);
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистВ_", 7);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "В", БланкиПечати);
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистГ_", 10);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "Г", БланкиПечати);
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистД_", 8);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "Д", БланкиПечати);
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистЕ_", 7);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "Е", БланкиПечати);
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистЖ_", 7);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "Ж", БланкиПечати);
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Лист З";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.ИмяМакета = "Форма2020_4_ЛистЗ";
	СтраницаУровня1.Многостраничность = Ложь;
	СтраницаУровня1.Многострочность = Ложь;
	СтраницаУровня1.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня1.ИДНаименования = "ЛистЗ";
	СтраницаУровня1.МакетыПФ = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистЗ_", 5);
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистИ_", 2);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "И", БланкиПечати);
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Лист К";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.ИмяМакета = "Форма2020_4_ЛистК";
	СтраницаУровня1.Многостраничность = Ложь;
	СтраницаУровня1.Многострочность = Истина;
	СтраницаУровня1.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня1.ИДНаименования = "ЛистК";
	СтраницаУровня1.МногострочныеЧасти.Добавить("МногострочнаяЧастьК010102");
	СтраницаУровня1.МногострочныеЧасти.Добавить("МногострочнаяЧастьК010202");
	СтраницаУровня1.МакетыПФ = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистК_", 2);
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Листы Л";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.Многостраничность = Истина;
	СтраницаУровня1.Многострочность = Истина;
	
	СтраницаУровня2 = СтраницаУровня1.Строки.Добавить();
	СтраницаУровня2.Наименование = "Стр. 1";
	СтраницаУровня2.ИндексКартинки = 1;
	СтраницаУровня2.ИмяМакета = "Форма2020_4_ЛистЛ";
	СтраницаУровня2.Многостраничность = Истина;
	СтраницаУровня2.Многострочность = Истина;
	СтраницаУровня2.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня2.ИДНаименования = "ЛистЛ";
	СтраницаУровня2.МногострочныеЧасти.Добавить("МногострочнаяЧастьЛ010408");
	СтраницаУровня2.МакетыПФ = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистЛ_", 2);
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = "Лист М";
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.ИмяМакета = "Форма2020_4_ЛистМ";
	СтраницаУровня1.Многостраничность = Ложь;
	СтраницаУровня1.Многострочность = Истина;
	СтраницаУровня1.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня1.ИДНаименования = "ЛистМ";
	СтраницаУровня1.МногострочныеЧасти.Добавить("МногострочнаяЧастьМ010101");
	СтраницаУровня1.МакетыПФ = "Печать_Форма2020_4_ЛистМ";
	
	БланкиПечати = СписокПечатныхЛистовПоПрефиксу("Печать_Форма2020_4_ЛистН_", 2);
	ДобавитьМногостраничныйРазделЛист(КорневойУровень, "Форма2020_4", "Н", БланкиПечати);
	
	Возврат ДеревоСтраниц;
	
КонецФункции

Функция НовоеДеревоСтраниц()
	
	ДеревоСтраниц = Новый ДеревоЗначений;
	ДеревоСтраниц.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоСтраниц.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДеревоСтраниц.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("Многостраничность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("Многострочность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоСтраниц.Колонки.Добавить("МакетыПФ", Новый ОписаниеТипов("Строка"));
	
	Возврат ДеревоСтраниц;
	
КонецФункции

Процедура ДобавитьМногостраничныйРазделЛист(КорневойУровень, ПрефиксИмениМакета, БуквенныйКодЛиста, БланкиПечати)
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = СтрШаблон("Листы %1", БуквенныйКодЛиста);
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.Многостраничность = Истина;
	СтраницаУровня1.Многострочность = Ложь;
	
	СтраницаУровня2 = СтраницаУровня1.Строки.Добавить();
	СтраницаУровня2.Наименование = "Стр. 1";
	СтраницаУровня2.ИндексКартинки = 1;
	СтраницаУровня2.ИмяМакета = СтрШаблон("%1_Лист%2", ПрефиксИмениМакета, БуквенныйКодЛиста);
	СтраницаУровня2.Многостраничность = Истина;
	СтраницаУровня2.Многострочность = Ложь;
	СтраницаУровня2.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня2.ИДНаименования = СтрШаблон("Лист%1", БуквенныйКодЛиста);
	СтраницаУровня2.МакетыПФ = БланкиПечати;
	
КонецПроцедуры

Функция СписокПечатныхЛистовПоПрефиксу(Префикс, Количество)
	
	СписокПечатныхЛистов = "";
	
	Для Инд = 1 По Количество Цикл
		СписокПечатныхЛистов = СписокПечатныхЛистов + ";"
		                     + Префикс + СтрокаЧГ0(Инд);
	КонецЦикла;
	
	Возврат Сред(СписокПечатныхЛистов, 2);
	
КонецФункции

#КонецОбласти

#Область Печать

Функция СформироватьСписокЛистов(Объект, ЕстьВыходЗаГраницы = Ложь) Экспорт
	
	Если Объект.ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьСписокЛистов():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы)
	
	Листы = Новый СписокЗначений;
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить();
	
	ДеревоСтраницОбъекта = СтруктураПараметров.ДеревоСтраниц;
	АктуализироватьПараметрыДереваСтраниц(Объект.ИмяФормы, ДеревоСтраницОбъекта);
	
	НомСтр = 0;
	Для Каждого Стр Из ДеревоСтраницОбъекта.Строки Цикл
		Если Стр.ИДНаименования = "ЛистК" Тогда
			ВывестиБланк2020_4_ЛистК(СтруктураПараметров, Стр, Объект, Листы, НомСтр);
			
		ИначеЕсли Стр.ИДНаименования = "ЛистМ" Тогда
			ВывестиБланк2020_4_ЛистМ(СтруктураПараметров, Стр, Объект, Листы, НомСтр);
			
		Иначе
			НапечататьСтроку(Объект, СтруктураПараметров, Листы, Стр, ПечатнаяФорма, НомСтр, ЕстьВыходЗаГраницы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Листы;
	
КонецФункции

Процедура НапечататьСтроку(Объект, СтруктураПараметров, Листы, СтрПарам, ПечатнаяФорма, НомСтр, ЕстьВыходЗаГраницы)
	
	МакетыПФ = СтрПарам.МакетыПФ;
	ИмяМакета = СтрПарам.ИмяМакета;
	
	Если НЕ ЗначениеЗаполнено(МакетыПФ) И НЕ ЗначениеЗаполнено(ИмяМакета) Тогда
		Для Каждого СтрПодч Из СтрПарам.Строки Цикл
			НапечататьСтроку(Объект, СтруктураПараметров, Листы, СтрПодч, ПечатнаяФорма, НомСтр, ЕстьВыходЗаГраницы);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МакетыПФ) Тогда
		МассивИменМакетов = СтрРазделить(МакетыПФ, ";", Ложь);
	Иначе
		МассивИменМакетов = Новый Массив;
		МассивИменМакетов.Добавить("Печать_" + ИмяМакета);
	КонецЕсли;
	
	Если СтруктураПараметров.ДанныеУведомления.Свойство(СтрПарам.ИДНаименования) Тогда
		СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[СтрПарам.ИДНаименования];
		
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			Если УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхСтраницы) Тогда
				НапечататьСтруктуру(СтруктураДанныхСтраницы, НомСтр, ИмяМакета, ПечатнаяФорма, ЕстьВыходЗаГраницы);
				ВывестиМногострочныеЧастиНаЕдинственныйЛист(ПечатнаяФорма, СтрПарам,
					СтруктураПараметров.ДанныеДопСтрокБД, ЕстьВыходЗаГраницы);
				УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураПараметров.ДанныеМногостраничныхРазделов.Свойство(СтрПарам.ИДНаименования) Тогда
		Для Каждого МнгСтр Из СтруктураПараметров.ДанныеМногостраничныхРазделов[СтрПарам.ИДНаименования] Цикл
			Если СтрПарам.УИД <> МнгСтр.Значение.УИД Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИмяМакета Из МассивИменМакетов Цикл
				Если УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(МнгСтр.Значение) Тогда
					НапечататьСтруктуру(МнгСтр.Значение, НомСтр, ИмяМакета, ПечатнаяФорма, ЕстьВыходЗаГраницы);
					ВывестиМногострочныеЧастиНаЕдинственныйЛист(ПечатнаяФорма, СтрПарам,
						СтруктураПараметров.ДанныеДопСтрокБД, ЕстьВыходЗаГраницы);
					УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрПодч Из СтрПарам.Строки Цикл
				НапечататьСтроку(Объект, СтруктураПараметров, Листы, СтрПодч, ПечатнаяФорма, НомСтр, ЕстьВыходЗаГраницы);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НапечататьСтруктуру(СтруктураДанныхСтраницы, НомСтр, ИмяМакета, ПечатнаяФорма, ЕстьВыходЗаГраницы)
	
	Отчеты.РегламентированноеУведомлениеФормаР13014.ПолучитьМакет(ИмяМакета);
	
	Если УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхСтраницы) Тогда
		НомСтр = НомСтр + 1;
		МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР13014.ПолучитьМакет(ИмяМакета);
		
		Для Каждого КЗ Из СтруктураДанныхСтраницы Цикл
			ИмяПоказателя = КЗ.Ключ;
			ЗначениеПоказателя = КЗ.Значение;
			ВывестиПоказательНаБланк(ИмяПоказателя, ЗначениеПоказателя, МакетПФ, ЕстьВыходЗаГраницы);
		КонецЦикла;
		
		УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
		ЗаполнитьЗначенияСвойств(МакетПФ.Параметры, СтруктураДанныхСтраницы);
		ПечатнаяФорма.Вывести(МакетПФ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМногострочныеЧастиНаЕдинственныйЛист(ПечатнаяФорма, СтраницаРаздела, МногострочныеЧасти, ЕстьВыходЗаГраницы)
	
	ИменаМногострочныхЧастей = СтраницаРаздела.МногострочныеЧасти;
	ИдСтраницы = СтраницаРаздела.УИД;
	
	Для Каждого МСЧРаздела Из ИменаМногострочныхЧастей Цикл
		ИмяМСЧ = МСЧРаздела.Значение;
		МногострочнаяЧасть = МногострочныеЧасти[ИмяМСЧ];
		
		СтрокиМСЧ = МногострочнаяЧасть.НайтиСтроки(Новый Структура("УИД", ИдСтраницы));
		
		НомерСтроки = 0;
		Для Каждого СтрокаМСЧ Из СтрокиМСЧ Цикл
			СтрокаЗаполнена = Ложь;
			Для Каждого Колонка ИЗ МногострочнаяЧасть.Колонки Цикл
				ИмяПоказателя = Колонка.Имя;
				СтрокаЗаполнена = СтрокаЗаполнена
					ИЛИ ИмяПоказателя <> "УИД" И ЗначениеЗаполнено(СтрокаМСЧ[ИмяПоказателя]);
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Для Каждого Колонка Из МногострочнаяЧасть.Колонки Цикл
				ИмяПоказателя = Колонка.Имя + "_" + СтрокаЧГ0(НомерСтроки);
				ЗначениеПоказателя = СтрокаМСЧ[Колонка.Имя];
				ВывестиПоказательНаБланк(ИмяПоказателя, ЗначениеПоказателя, ПечатнаяФорма, ЕстьВыходЗаГраницы);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиБланк2020_4_ЛистК(СтруктураПараметров, Стр, Объект, Листы, НомСтр)
	
	СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
	РазмещениеМСЧ = СтруктураПараметров.ДанныеДопСтрокБД;
	МСЧ1 = РазмещениеМСЧ.МногострочнаяЧастьК010102;
	МСЧ2 = РазмещениеМСЧ.МногострочнаяЧастьК010202;
	
	Если НЕ УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхСтраницы)
	   И НЕ УведомлениеОСпецрежимахНалогообложения.МногострочнаяЧастьЗаполнена(МСЧ1)
	   И НЕ УведомлениеОСпецрежимахНалогообложения.МногострочнаяЧастьЗаполнена(МСЧ2) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполненияИПечати = Новый Структура;
	ПараметрыЗаполненияИПечати.Вставить("Объект", Объект);
	ПараметрыЗаполненияИПечати.Вставить("Листы", Листы);
	ПараметрыЗаполненияИПечати.Вставить("СтруктураПараметров", СтруктураПараметров);
	ПараметрыЗаполненияИПечати.Вставить("СтруктураДанныхСтраницы", СтруктураДанныхСтраницы);
	ПараметрыЗаполненияИПечати.Вставить("МакетыПФ", СтрРазделить(Стр.МакетыПФ, ";", Ложь));
	
	// Страница 1.
	ПараметрыЗаполненияИПечати.Вставить("ИмяОсновногоПоказателя", "К01010100");
	ПараметрыЗаполненияИПечати.Вставить("ПолноеИмяМСЧ", "МногострочнаяЧастьК010102");
	ПараметрыЗаполненияИПечати.Вставить("ИмяПоказателяМСЧ", "К01010200");
	ПараметрыЗаполненияИПечати.Вставить("ИндексМакета", 0);
	
	ВывестиБланк2020_4_ЛистК_Страница(ПараметрыЗаполненияИПечати, НомСтр);
	
	// Страница 2.
	ПараметрыЗаполненияИПечати.Вставить("ИмяОсновногоПоказателя", "К01020100");
	ПараметрыЗаполненияИПечати.Вставить("ПолноеИмяМСЧ", "МногострочнаяЧастьК010202");
	ПараметрыЗаполненияИПечати.Вставить("ИмяПоказателяМСЧ", "К01020200");
	ПараметрыЗаполненияИПечати.Вставить("ИндексМакета", 1);
	
	ВывестиБланк2020_4_ЛистК_Страница(ПараметрыЗаполненияИПечати, НомСтр);
	
КонецПроцедуры

Процедура ВывестиБланк2020_4_ЛистК_Страница(ПараметрыЗаполненияИПечати, НомСтр)
	
	Объект = ПараметрыЗаполненияИПечати.Объект;
	Листы = ПараметрыЗаполненияИПечати.Листы;
	СтруктураПараметров = ПараметрыЗаполненияИПечати.СтруктураПараметров;
	СтруктураДанныхСтраницы = ПараметрыЗаполненияИПечати.СтруктураДанныхСтраницы;
	МакетыПФ = ПараметрыЗаполненияИПечати.МакетыПФ;
	
	ИмяОсновногоПоказателя = ПараметрыЗаполненияИПечати.ИмяОсновногоПоказателя;
	ПолноеИмяМСЧ = ПараметрыЗаполненияИПечати.ПолноеИмяМСЧ;
	ИмяПоказателяМСЧ = ПараметрыЗаполненияИПечати.ИмяПоказателяМСЧ;
	ИндексМакета = ПараметрыЗаполненияИПечати.ИндексМакета;
	
	РазмещениеМСЧ = СтруктураПараметров.ДанныеДопСтрокБД;
	МногострочнаяЧасть = РазмещениеМСЧ[ПолноеИмяМСЧ];
	
	СтраницаЗаполнена = ЗначениеЗаполнено(СтруктураДанныхСтраницы[ИмяОсновногоПоказателя])
	                ИЛИ УведомлениеОСпецрежимахНалогообложения.МногострочнаяЧастьЗаполнена(МногострочнаяЧасть);
	
	Если НЕ СтраницаЗаполнена Тогда
		Возврат;
	КонецЕсли;
	
	НомСтр = НомСтр + 1;
	МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР13014.ПолучитьМакет(МакетыПФ[ИндексМакета]);
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	
	УведомлениеОСпецрежимахНалогообложения.ВывестиОКВЭДНаПечать(
		СтруктураДанныхСтраницы[ИмяОсновногоПоказателя], ИмяОсновногоПоказателя, МакетПФ.Области);
	УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
	
	ВсегоНапечатаноСтрок = 1;
	Для Каждого СтрМнг Из МногострочнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрМнг[ИмяПоказателяМСЧ]) Тогда
			Продолжить;
		КонецЕсли;
		
		УведомлениеОСпецрежимахНалогообложения.ВывестиОКВЭДНаПечать(
			СтрМнг[ИмяПоказателяМСЧ], ИмяПоказателяМСЧ + "_"+СтрокаЧГ0(ВсегоНапечатаноСтрок), МакетПФ.Области);
		ВсегоНапечатаноСтрок = ВсегоНапечатаноСтрок + 1;
		
		Если ВсегоНапечатаноСтрок > 68 Тогда
			ПечатнаяФорма.Вывести(МакетПФ);
			УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
			
			ВсегоНапечатаноСтрок = 1;
			НомСтр = НомСтр + 1;
			МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР13014.ПолучитьМакет(МакетыПФ[ИндексМакета]);
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000"+НомСтр, 3), "НомСтр", МакетПФ.Области);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(МакетПФ);
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
	
КонецПроцедуры

Процедура ВывестиБланк2020_4_ЛистМ(СтруктураПараметров, Стр, Объект, Листы, НомСтр)
	
	СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
	РазмещениеМСЧ = СтруктураПараметров.ДанныеДопСтрокБД;
	МногострочнаяЧасть = РазмещениеМСЧ.МногострочнаяЧастьМ010101;
	
	Если НЕ УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(СтруктураДанныхСтраницы)
	   И НЕ УведомлениеОСпецрежимахНалогообложения.МногострочнаяЧастьЗаполнена(МногострочнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	МакетПФ = Отчеты.РегламентированноеУведомлениеФормаР13014.ПолучитьМакет(Стр.МакетыПФ);
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	
	Для Каждого СтрМнг Из МногострочнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрМнг.М01010100) Тогда
			Продолжить;
		КонецЕсли;
		
		ПечатнаяФорма.Вывести(МакетПФ);
		ПечатнаяФорма.Области.М01010100.Текст = ВРег(СокрЛП(СтрМнг.М01010100));
		
		НомСтр = НомСтр + 1;
		УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(Прав("000" + НомСтр, 3), "НомСтр", ПечатнаяФорма.Области);
		УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПоказательНаБланк(ИмяПоказателя, ЗначениеПоказателя, МакетПФ, ЕстьВыходЗаГраницы)
	
	Если ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		Если УведомлениеОСпецрежимахНалогообложения.ЭтоПолеАдресаРегистрационныхЗаявлений(ИмяПоказателя) Тогда
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечатьСКонтролемДляРегистрационныхЗаявлений(
				ВРег(ЗначениеПоказателя), ИмяПоказателя, МакетПФ.Области, "-", ЕстьВыходЗаГраницы);
		Иначе
			УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(
				ВРег(ЗначениеПоказателя), ИмяПоказателя, МакетПФ.Области);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		УведомлениеОСпецрежимахНалогообложения.ВывестиДатуНаПечать(ЗначениеПоказателя, ИмяПоказателя, МакетПФ.Области);
		
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		УведомлениеОСпецрежимахНалогообложения.ВывестиЧислоНаПечать(ЗначениеПоказателя, ИмяПоказателя, МакетПФ.Области);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеПредставление

Процедура Проверить_Форма2020_4(Данные, УникальныйИдентификатор)
	
	ПроверкаПоказателейФормыНеТребуется = Истина;
	
КонецПроцедуры

Функция ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма2020_4(Объект, УникальныйИдентификатор);
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(
		Объект.ИмяОтчета, "СхемаВыгрузкиФорма2020_4");
	ЗаполнитьДанными_Форма2020_4(Объект, ОсновныеСведения, СтруктураВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(СтруктураВыгрузки);
	
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма2020_4(Объект, УникальныйИдентификатор)
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
	Данные = Объект.ДанныеУведомления.Получить();
	
	Проверить_Форма2020_4(Данные, УникальныйИдентификатор);
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма2020_4(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	Возврат ОсновныеСведения;
	
КонецФункции

Процедура ЗаполнитьДанными_Форма2020_4(Объект, Параметры, ДеревоВыгрузки)
	
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	ДополнитьПараметры_Форма2020_4(Параметры, ДанныеУведомления);
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДаннымиУзел(ДанныеУведомления, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ДополнитьПараметры_Форма2020_4(Параметры, ВсеДанные)
	
	Лист001 = ВсеДанные.ДанныеУведомления.Лист001;
	
	ДобавитьСоставляющиеСтоимости(Лист001, "П01040200");
	
	ЛистБ = ВсеДанные.ДанныеУведомления.ЛистБ;
	
	МногострочнаяЧастьБ010207 = ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьБ010207;
	ДобавитьПоказателиМСЧ(ЛистБ, МногострочнаяЧастьБ010207);
	
	ЛистыВ = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистВ;
	
	Для Каждого Страница Из ЛистыВ Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьСоставляющиеСтоимости(ДанныеСтраницы,  "В01040100");
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "В0162070", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "В0162170", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "В0162280");
		КонецЕсли;
	КонецЦикла;
	
	ЛистыГ = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистГ;
	
	Для Каждого Страница Из ЛистыГ Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Г0102010", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Г0103010", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Г0103120");
			ДобавитьСоставляющиеСтоимости(ДанныеСтраницы,  "Г01040100");
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Г0162070", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Г0162170", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Г0162280");
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Г0171070", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Г0171170", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Г0171280");
		КонецЕсли;
	КонецЦикла;
	
	ЛистыД = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистД;
	
	Для Каждого Страница Из ЛистыД Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Д0132020", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Д0132040", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Д0132120");
			ДобавитьСоставляющиеСтоимости(ДанныеСтраницы,  "Д01040100");
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Д0162070", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Д0162170", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Д0162280");
		КонецЕсли;
	КонецЦикла;
	
	ЛистыЕ = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистЕ;
	
	Для Каждого Страница Из ЛистыЕ Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьСоставляющиеСтоимости(ДанныеСтраницы,  "Е01040100");
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Е0162070", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Е0162170", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Е0162280");
		КонецЕсли;
	КонецЦикла;
	
	ЛистыЖ = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистЖ;
	
	Для Каждого Страница Из ЛистыЖ Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьСоставляющиеСтоимости(ДанныеСтраницы,  "Ж01040100");
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Ж0162070", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Ж0162170", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Ж0162280");
		КонецЕсли;
	КонецЦикла;
	
	ЛистЗ = ВсеДанные.ДанныеУведомления.ЛистЗ;
	
	ДобавитьСоставляющиеСтоимости(ЛистЗ,  "З01010100");
	ДобавитьПризнакиНаличияФИО(ЛистЗ,     "З0122070", Истина);
	ДобавитьПризнакиНаличияФИО(ЛистЗ,     "З0122170", Истина);
	ДобавитьПолныйКодПодразделения(ЛистЗ, "З0122280");
	
	ЛистыИ = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистИ;
	
	Для Каждого Страница Из ЛистыИ Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "И0102030", Истина);
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "И0103050", Истина);
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "И0103160");
		КонецЕсли;
	КонецЦикла;
	
	ЛистыЛ = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистЛ;
	
	Для Каждого Страница Из ЛистыЛ Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			МногострочнаяЧастьЛ010408 = ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьЛ010408;
			ДобавитьПоказателиМСЧПоУИД(ДанныеСтраницы, МногострочнаяЧастьЛ010408, ДанныеСтраницы.УИД);
		КонецЕсли;
	КонецЦикла;
	
	ЛистМ = ВсеДанные.ДанныеУведомления.ЛистМ;
	
	МногострочнаяЧастьМ010101 = ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьМ010101;
	ДобавитьПоказателиМСЧ(ЛистМ, МногострочнаяЧастьМ010101);
	
	ЛистыН = ВсеДанные.ДанныеМногостраничныхРазделов.ЛистН;
	
	Для Каждого Страница Из ЛистыН Цикл
		ДанныеСтраницы = Страница.Значение;
		Если СтраницаЗаполнена(ДанныеСтраницы) Тогда
			ДобавитьПризнакиНаличияФИО(ДанныеСтраницы,     "Н0102010");
			ДобавитьПолныйКодПодразделения(ДанныеСтраницы, "Н0102090");
		КонецЕсли;
	КонецЦикла;
	
	// Сделать многострочные части видимыми для общих механизмов выгрузки.
	ВсеДанные.Вставить("МногострочнаяЧастьА010201",
		ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьА010201);
	ВсеДанные.Вставить("МногострочнаяЧастьА010202",
		ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьА010202);
	ВсеДанные.Вставить("МногострочнаяЧастьК010102",
		ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьК010102);
	ВсеДанные.Вставить("МногострочнаяЧастьК010202",
		ВсеДанные.ДанныеДопСтрокБД.МногострочнаяЧастьК010202);
	
КонецПроцедуры

Функция СтраницаЗаполнена(Данные)
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Для Каждого КЗ Из Данные Цикл
			Если ТипЗнч(КЗ.Значение) = Тип("УникальныйИдентификатор") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КЗ.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьСоставляющиеСтоимости(Показатели, ИмяПоказателя)
	
	УстКапитал = Показатели[ИмяПоказателя];
	ПредставлениеУК = Формат(УстКапитал, "ЧРД=,; ЧГ=0");
	СоставляющиеУК = СтрРазделить(ПредставлениеУК, ",", Истина);
	Если СоставляющиеУК.Количество() = 1 Тогда
		СоставляющиеУК.Добавить("");
	КонецЕсли;
	Показатели.Вставить("Х" + Сред(ИмяПоказателя, 2) + "_1", СоставляющиеУК[0]); // Рубли
	Показатели.Вставить("Х" + Сред(ИмяПоказателя, 2) + "_2", СоставляющиеУК[1]); // Копейки
	
КонецПроцедуры

Процедура ДобавитьПризнакиНаличияФИО(ДанныеРаздела, Префикс, ТолькоЗаполненные = Ложь)
	
	ПоказательФ = Префикс + "1";
	ПоказательИ = Префикс + "2";
	ПоказательО = Префикс + "3";
	
	ФИОЗаполнено =  ЗначениеЗаполнено(ДанныеРаздела[ПоказательФ])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ПоказательИ])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ПоказательО]);
	
	Если ТолькоЗаполненные И НЕ ФИОЗаполнено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательФ, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательФ]), "", "1"));
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательИ, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательИ]), "", "1"));
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательО, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательО]), "", "1"));
	
КонецПроцедуры

Процедура ДобавитьПолныйКодПодразделения(ДанныеРаздела, Префикс)
	
	КодПодразделения = "";
	Если ЗначениеЗаполнено(ДанныеРаздела[Префикс + "1"]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[Префикс + "2"]) Тогда
		КодПодразделения = ДанныеРаздела[Префикс + "1"] + "-" + ДанныеРаздела[Префикс + "2"];
	КонецЕсли;
	
	ДанныеРаздела.Вставить("Х" + Сред(Префикс, 2) + "0", КодПодразделения);
	
КонецПроцедуры

Процедура ДобавитьПоказателиМСЧ(ДанныеРаздела, МСЧ)
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаМСЧ Из МСЧ Цикл
		СтрокаЗаполнена = Ложь;
		Для Каждого КолонкаМСЧ Из МСЧ.Колонки Цикл
			СтрокаЗаполнена = СтрокаЗаполнена
				ИЛИ КолонкаМСЧ.Имя <> "УИД" И ЗначениеЗаполнено(СтрокаМСЧ[КолонкаМСЧ.Имя]);
		КонецЦикла;
		
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КолонкаМСЧ Из МСЧ.Колонки Цикл
			ИмяПоказателя = КолонкаМСЧ.Имя;
			ДанныеРаздела.Вставить(ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки), СтрокаМСЧ[ИмяПоказателя]);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиМСЧПоУИД(ДанныеРаздела, МСЧ, УИД)
	
	СтрокиМСЧ = МСЧ.НайтиСтроки(Новый Структура("УИД", УИД));
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаМСЧ Из СтрокиМСЧ Цикл
		СтрокаЗаполнена = Ложь;
		Для Каждого КолонкаМСЧ Из МСЧ.Колонки Цикл
			СтрокаЗаполнена = СтрокаЗаполнена
				ИЛИ КолонкаМСЧ.Имя <> "УИД" И ЗначениеЗаполнено(СтрокаМСЧ[КолонкаМСЧ.Имя]);
		КонецЦикла;
		
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КолонкаМСЧ Из МСЧ.Колонки Цикл
			ИмяПоказателя = КолонкаМСЧ.Имя;
			ДанныеРаздела.Вставить(ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки), СтрокаМСЧ[ИмяПоказателя]);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма2020_4(СведенияОтправки)
	
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда
		ДатаДокумента = Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)),
			Число(Сред(СведенияОтправки.ДатаДок, 4, 2)),
			Число(Лев(СведенияОтправки.ДатаДок, 2)));
		ДатаФормированияФайла = Формат(ДатаДокумента, "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	Префикс = "RO_R13014";
	ИдПолучателя = "0000_0000";
	ИдОтправителя = "000000000000000";
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ПрефиксИмениФайла = Префикс + "_" + ИдПолучателя + "_" + ИдОтправителя + "_"
	                  + ДатаФормированияФайла + "_" + ИдентификационныйНомер;
	
	Возврат ПрефиксИмениФайла;
	
КонецФункции

#КонецОбласти

#Область ОбработкаАдресовФИАС

Процедура ЗаполнитьСоответствиеРеквизитамАдреса_Форма2020_4(СоответствиеПоказателей, НазначениеАдреса)
	
	Если НазначениеАдреса = "МестоНахождения" Тогда
		СоответствиеПоказателей.Вставить("БИ1010100", "ИдентификаторАдресногоОбъекта");
		СоответствиеПоказателей.Вставить("БД1010100", "СтрокаАдресногоОбъекта");
		
		СоответствиеПоказателей.Вставить("Б01010100", "КодРегиона");
		СоответствиеПоказателей.Вставить("Б01010201", "МуниципальныйРайонВид");
		СоответствиеПоказателей.Вставить("Б01010202", "МуниципальныйРайон");
		СоответствиеПоказателей.Вставить("Б01010301", "ПоселениеВид");
		СоответствиеПоказателей.Вставить("Б01010302", "Поселение");
		СоответствиеПоказателей.Вставить("Б01010401", "НаселенныйПунктВид");
		СоответствиеПоказателей.Вставить("Б01010402", "НаселенныйПункт");
		
	ИначеЕсли НазначениеАдреса = "АдресБ0102" Тогда
		СоответствиеПоказателей.Вставить("БИ1020100", "ИдентификаторАдресногоОбъекта");
		СоответствиеПоказателей.Вставить("БД1020100", "СтрокаАдресногоОбъекта");
		
		СоответствиеПоказателей.Вставить("Б01020100", "КодРегиона");
		СоответствиеПоказателей.Вставить("Б01020201", "МуниципальныйРайонВид");
		СоответствиеПоказателей.Вставить("Б01020202", "МуниципальныйРайон");
		СоответствиеПоказателей.Вставить("Б01020301", "ПоселениеВид");
		СоответствиеПоказателей.Вставить("Б01020302", "Поселение");
		СоответствиеПоказателей.Вставить("Б01020401", "НаселенныйПунктВид");
		СоответствиеПоказателей.Вставить("Б01020402", "НаселенныйПункт");
		СоответствиеПоказателей.Вставить("Б01020501", "ТерриторияТип");
		СоответствиеПоказателей.Вставить("Б01020502", "Территория");
		СоответствиеПоказателей.Вставить("Б01020601", "УлицаТип");
		СоответствиеПоказателей.Вставить("Б01020602", "Улица");
		СоответствиеПоказателей.Вставить("Б01020801", "ПомещениеВЗданииТип");
		СоответствиеПоказателей.Вставить("Б01020802", "ПомещениеВЗданииНомер");
		СоответствиеПоказателей.Вставить("Б01020901", "ПомещениеВКвартиреТип");
		СоответствиеПоказателей.Вставить("Б01020902", "ПомещениеВКвартиреНомер");
		
		Здания = Новый Массив;
		Здания.Добавить("Здания");
		Здания.Добавить(Новый Структура("Б01020701, Б01020702", "ЗданиеТип", "ЗданиеНомер"));
		СоответствиеПоказателей.Вставить("Б010207", Здания);
		
	ИначеЕсли НазначениеАдреса = "АдресЛ0104" Тогда
		СоответствиеПоказателей.Вставить("ЛИ1020200", "ИдентификаторАдресногоОбъекта");
		СоответствиеПоказателей.Вставить("ЛД1020200", "СтрокаАдресногоОбъекта");
		
		СоответствиеПоказателей.Вставить("Л01040200", "КодРегиона");
		СоответствиеПоказателей.Вставить("Л01040301", "МуниципальныйРайонВид");
		СоответствиеПоказателей.Вставить("Л01040302", "МуниципальныйРайон");
		СоответствиеПоказателей.Вставить("Л01040401", "ПоселениеВид");
		СоответствиеПоказателей.Вставить("Л01040402", "Поселение");
		СоответствиеПоказателей.Вставить("Л01040501", "НаселенныйПунктВид");
		СоответствиеПоказателей.Вставить("Л01040502", "НаселенныйПункт");
		СоответствиеПоказателей.Вставить("Л01040601", "ТерриторияТип");
		СоответствиеПоказателей.Вставить("Л01040602", "Территория");
		СоответствиеПоказателей.Вставить("Л01040701", "УлицаТип");
		СоответствиеПоказателей.Вставить("Л01040702", "Улица");
		СоответствиеПоказателей.Вставить("Л01040901", "ПомещениеВЗданииТип");
		СоответствиеПоказателей.Вставить("Л01040902", "ПомещениеВЗданииНомер");
		СоответствиеПоказателей.Вставить("Л01041001", "ПомещениеВКвартиреТип");
		СоответствиеПоказателей.Вставить("Л01041002", "ПомещениеВКвартиреНомер");
		
		Здания = Новый Массив;
		Здания.Добавить("Здания");
		Здания.Добавить(Новый Структура("Л01040801, Л01040802", "ЗданиеТип", "ЗданиеНомер"));
		СоответствиеПоказателей.Вставить("Л010408", Здания);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Процедура ЗаполнитьСоответствиеРеквизитамАдреса_Форма2020_4():
			|вызов процедуры с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура АктуализироватьПараметрыДереваСтраниц(ИмяФормы, ИсходноеДерево) Экспорт
	
	НовоеДеревоСтраниц = СформироватьДеревоСтраниц(ИмяФормы);
	
	ИсходноеДерево.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	СтрокиДереваЗначений = ИсходноеДерево.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	ИсходноеДерево.Колонки.Удалить("ПреобразоватьВМассив");
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗначений Цикл
		ИДНаименования = СтрокаДерева.ИДНаименования;
		Если ЗначениеЗаполнено(ИДНаименования) Тогда
			СтрокаОбразец = НовоеДеревоСтраниц.Строки.Найти(ИДНаименования, "ИДНаименования", Истина);
			
			Если СтрокаОбразец <> Неопределено Тогда
				СтрокаДерева.МакетыПФ = СтрокаОбразец.МакетыПФ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка = Неопределено)
	
	ИмяОтчета = "РегламентированноеУведомлениеФормаР13014";
	ИмяФормы = "Форма2020_4";
	
	// Подготовка структуры контейнера для автозаполнения.
	Дерево = СформироватьДеревоСтраниц(ИмяФормы);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Параметры.Организация);
	ПараметрыОтчета.Вставить("ПараметрыЗаполнения", Параметры.ДополнительныеПараметры);
	ПараметрыОтчета.Вставить("ИмяФормы", ИмяФормы);
	
	Контейнер = Неопределено;
	
	ВходящийКонтейнер = Новый Структура("ИмяФормы, ДеревоСтраниц", "1."+ИмяОтчета+".1."+ИмяФормы, Дерево);
	РезультатКонтейнер1 = Новый Структура;
	СформироватьКонтейнерДанныхУведомления(ВходящийКонтейнер, РезультатКонтейнер1, Истина);
	
	// Заполнение данными в потребителе.
	Контейнер = НовыйКонтейнерДляАвтозаполнения(РезультатКонтейнер1.ДанныеУведомления,
		РезультатКонтейнер1.ДанныеМногостраничныхРазделов);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета, ИмяФормы, ПараметрыОтчета, Контейнер);
	
	// Заполнение данных в отчете.
	Если ТипЗнч(СуществующийДокументСсылка) = Тип("Структура")
	   И СуществующийДокументСсылка.Свойство("Ссылка")
	   И ЗначениеЗаполнено(СуществующийДокументСсылка.Ссылка) Тогда
		НовыйДок = СуществующийДокументСсылка.Ссылка.ПолучитьОбъект();
		
	ИначеЕсли ТипЗнч(СуществующийДокументСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
	        И ЗначениеЗаполнено(СуществующийДокументСсылка) Тогда
		НовыйДок = СуществующийДокументСсылка.ПолучитьОбъект();
		
	Иначе
		НовыйДок = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
		НовыйДок.Организация = Параметры.Организация;
		НовыйДок.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР13014;
		
	КонецЕсли;
	
	ДанныеДопСтрокБД = Новый Структура;
	ИдентификаторыОбычныхСтраниц = Новый Структура;
	
	ДанныеУведомления = ОбщегоНазначения.СкопироватьРекурсивно(РезультатКонтейнер1.ДанныеУведомления);
	
	Для Каждого Раздел Из ДанныеУведомления Цикл
		ИмяРаздела = Раздел.Ключ;
		ДанныеРаздела = Раздел.Значение;
		ДанныеВКонтейнере = Контейнер[ИмяРаздела];
		
		РазделВДереве = Дерево.Строки.Найти(ИмяРаздела, "ИДНаименования");
		ИдентификаторыОбычныхСтраниц.Вставить(РазделВДереве.ИДНаименования, РазделВДереве.УИД);
		
		Если РазделВДереве.Многострочность Тогда
			Для Каждого МСЧ Из РазделВДереве.МногострочныеЧасти Цикл
				ИмяМСЧ = МСЧ.Значение;
				ТаблицаМСЧ = ДанныеВКонтейнере[ИмяМСЧ];
				ТаблицаМСЧ.Колонки.Добавить("УИД");
				ТаблицаМСЧ.ЗаполнитьЗначения(РазделВДереве.УИД, "УИД");
				ДанныеДопСтрокБД.Вставить(ИмяМСЧ, ТаблицаМСЧ);
				ДанныеРаздела.Удалить(ИмяМСЧ);
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеРаздела, ДанныеВКонтейнере);
		
	КонецЦикла;
	
	ДанныеМногостраничныхРазделов = ОбщегоНазначения.СкопироватьРекурсивно(РезультатКонтейнер1.ДанныеМногостраничныхРазделов);
	
	Для Каждого Раздел Из ДанныеМногостраничныхРазделов Цикл
		ИмяРаздела = Раздел.Ключ;
		КореньРаздела = Дерево.Строки.Найти(ИмяРаздела, "ИДНаименования", Истина).Родитель;
		ДанныеРаздела = Раздел.Значение;
		ДанныеВКонтейнере = Контейнер[ИмяРаздела];
		
		// Страница с индексом 0 выступает в роли образца и требует удаления служебных структур.
		Если КореньРаздела.Строки[0].Многострочность Тогда
			Для Каждого МСЧ Из КореньРаздела.Строки[0].МногострочныеЧасти Цикл
				ИмяМСЧ = МСЧ.Значение;
				ДанныеРаздела[0].Значение.Удалить(ИмяМСЧ);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтраницаВКонтейнере Из ДанныеВКонтейнере Цикл
			ИндексСтраницы = ДанныеВКонтейнере.Индекс(СтраницаВКонтейнере);
			
			Если ИндексСтраницы + 1 > КореньРаздела.Строки.Количество() Тогда
				// Новая страница в дереве разделов отчета.
				НоваяСтраница = КореньРаздела.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтраница, КореньРаздела.Строки[0]);
				НоваяСтраница.УИД = Новый УникальныйИдентификатор;
				НоваяСтраница.Наименование = "Стр. " + СтрокаЧГ0(ИндексСтраницы + 1);
			КонецЕсли;
			
			Если ИндексСтраницы + 2 > ДанныеРаздела.Количество() Тогда
				// Новая страница в структуре многостраничных разделов.
				НоваяСтраницаДанных = ДанныеРаздела.Добавить();
				НоваяСтраницаДанных.Значение = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела[0].Значение);
			КонецЕсли;
			
			СтраницаВДереве = КореньРаздела.Строки[ИндексСтраницы];
			СтраницаДанных = ДанныеРаздела[ИндексСтраницы + 1];
			ДанныеСтраницыВКонтейнере = СтраницаВКонтейнере.Значение;
			
			Если СтраницаВДереве.Многострочность Тогда
				Для Каждого МСЧ Из СтраницаВДереве.МногострочныеЧасти Цикл
					ИмяМСЧ = МСЧ.Значение;
					ТаблицаМСЧ = СтраницаВКонтейнере.Значение[ИмяМСЧ];
					ТаблицаМСЧ.Колонки.Добавить("УИД");
					ТаблицаМСЧ.ЗаполнитьЗначения(СтраницаВДереве.УИД, "УИД");
					ДанныеДопСтрокБД.Вставить(ИмяМСЧ, ТаблицаМСЧ);
				КонецЦикла;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтраницаДанных.Значение, СтраницаВКонтейнере.Значение);
			СтраницаДанных.Значение.Вставить("УИД", СтраницаВДереве.УИД);
			
		КонецЦикла;
		
		ДанныеРаздела.Удалить(0); // Образец больше не требуется.
		
	КонецЦикла;
	
	// Структура и содержание данных повторяет аналогичную при записи уведомления в интерактивном режиме.
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ДеревоСтраниц", Дерево);
	ДанныеОтчета.Вставить("ДанныеУведомления", ДанныеУведомления);
	ДанныеОтчета.Вставить("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	ДанныеОтчета.Вставить("ДанныеДопСтрокБД", ДанныеДопСтрокБД);
	ДанныеОтчета.Вставить("РазрешитьВыгружатьСОшибками", Ложь);
	
	ДатаСоставления = Неопределено;
	Если Параметры.ДополнительныеПараметры.Свойство("ДатаСоставления", ДатаСоставления)
	   И ЗначениеЗаполнено(ДатаСоставления) Тогда
		НовыйДок.Дата = ДатаСоставления;
	Иначе
		НовыйДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	НовыйДок.ДатаПодписи = НовыйДок.Дата;
	НовыйДок.ИмяФормы = ИмяФормы;
	НовыйДок.ИмяОтчета = ИмяОтчета;
	НовыйДок.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеОтчета);
	
	НовыйДок.Записать();
	
	Возврат НовыйДок.Ссылка;
	
КонецФункции

Процедура СформироватьКонтейнерДанныхУведомления(КонтейнерВходящий, КонтейнерРезультат, ЕстьМногостраничность = Ложь)
	
	КонтейнерРезультат.Вставить("ДанныеУведомления", Новый Структура);
	Если ЕстьМногостраничность Тогда
		КонтейнерРезультат.Вставить("ДанныеМногостраничныхРазделов", Новый Структура);
	КонецЕсли;
	Разложение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтейнерВходящий.ИмяФормы, ".");
	
	Для Каждого Стр Из КонтейнерВходящий.ДеревоСтраниц.Строки Цикл
		Если Стр.Многостраничность Тогда
			Если Стр.Многострочность Тогда
				СтраницаРаздела = Стр.Строки[0];
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(СтраницаРаздела.ИмяМакета);
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", СтраницаРаздела.УИД);
				
				ПоказателиМСЧ = Новый Соответствие;
				Для Каждого МСЧ Из СтраницаРаздела.МногострочныеЧасти Цикл
					ПолноеИмяМСЧ = МСЧ.Значение;
					ТаблицаМСЧ = Новый ТаблицаЗначений;
					
					Для Каждого Обл Из МакетДокумента.ПолучитьОбласть(МСЧ.Значение).Области Цикл
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						   И Обл.СодержитЗначение Тогда
							ПоказателиМСЧ.Вставить(Обл.Имя, Истина);
							ТаблицаМСЧ.Колонки.Добавить(Обл.Имя, Обл.ТипЗначения);
						КонецЕсли;
					КонецЦикла;
					
					ТаблицаМСЧ.Добавить();
					СтруктураМногостраничнойСтраницы.Вставить(ПолноеИмяМСЧ, ТаблицаМСЧ);
					
				КонецЦикла;
				
				Для Каждого Обл Из МакетДокумента.Области Цикл
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
					   И Обл.СодержитЗначение
					   И ПоказателиМСЧ[Обл.Имя] = Неопределено Тогда
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаРаздела.Строки.Количество() > 0 Тогда
					СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, Разложение[1], СтраницаРаздела);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(СтраницаРаздела.ИДНаименования, СЗ);
				
			Иначе
				СтраницаРаздела = Стр.Строки[0];
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(СтраницаРаздела.ИмяМакета);
				
				СтруктураМногостраничнойСтраницы = Новый Структура("УИД", СтраницаРаздела.УИД);
				
				Для Каждого Обл Из МакетДокумента.Области Цикл
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
					   И Обл.СодержитЗначение Тогда
						СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаРаздела.Строки.Количество() > 0 Тогда
					СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, Разложение[1], СтраницаРаздела);
				КонецЕсли;
				
				СЗ = Новый СписокЗначений;
				СЗ.Добавить(СтруктураМногостраничнойСтраницы);
				КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(СтраницаРаздела.ИДНаименования, СЗ);
				
			КонецЕсли;
			
		Иначе
			Если Стр.Многострочность Тогда
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				
				ПоказателиМСЧ = Новый Соответствие;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого МСЧ Из Стр.МногострочныеЧасти Цикл
					ПолноеИмяМСЧ = МСЧ.Значение;
					ТаблицаМСЧ = Новый ТаблицаЗначений;
					
					Для Каждого Обл Из МакетДокумента.ПолучитьОбласть(МСЧ.Значение).Области Цикл
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						   И Обл.СодержитЗначение Тогда
							ПоказателиМСЧ.Вставить(Обл.Имя, Истина);
							ТаблицаМСЧ.Колонки.Добавить(Обл.Имя, Обл.ТипЗначения);
						КонецЕсли;
					КонецЦикла;
					
					ТаблицаМСЧ.Добавить();
					СтруктураСтраницы.Вставить(ПолноеИмяМСЧ, ТаблицаМСЧ);
					
				КонецЦикла;
				
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
					   И Обл.СодержитЗначение
					   И ПоказателиМСЧ[Обл.Имя] = Неопределено Тогда
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				КонтейнерРезультат.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
				
			Иначе
				СтруктураСтраницы = Новый Структура;
				МакетДокумента = Отчеты[Разложение[1]].ПолучитьМакет(Стр.ИмяМакета);
				Для Каждого Обл Из МакетДокумента.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
					   И Обл.СодержитЗначение Тогда
						СтруктураСтраницы.Вставить(Обл.Имя);
					КонецЕсли;
				КонецЦикла;
				
				КонтейнерРезультат.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, ИмяОтчета, Строка)
	
	Для Каждого ПодчМнг Из Строка.Строки Цикл
		Если ПодчМнг.Строки.Количество() > 0 Тогда
			СформироватьКонтейнерДанныхУведомленияРек(КонтейнерВходящий, КонтейнерРезультат, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда 
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			КонтейнерРезультат.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйКонтейнерДляАвтозаполнения(ДанныеУведомления, ДанныеМногостраничныхРазделов)
	
	Контейнер = Новый Структура;
	Для Каждого КЗ Из ДанныеУведомления Цикл
		Контейнер.Вставить(КЗ.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КЗ.Значение));
	КонецЦикла;
	
	СтруктураДерева = Новый Соответствие;
	Для Каждого КЗ Из ДанныеМногостраничныхРазделов Цикл
		Для Каждого Стр Из КЗ.Значение Цикл
			СтруктураДерева[Стр.Значение.УИД] = Новый Структура("Раздел, Данные",
				КЗ.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(Стр.Значение));
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КЗ Из СтруктураДерева Цикл
		Если КЗ.Значение.Данные.Свойство("УИДРодителя") Тогда
			Родитель = СтруктураДерева[КЗ.Значение.Данные.УИДРодителя];
			Если Не Родитель.Данные.Свойство(КЗ.Значение.Раздел) Тогда
				Родитель.Данные.Вставить(КЗ.Значение.Раздел, Новый СписокЗначений);
			КонецЕсли;
			Родитель.Данные[КЗ.Значение.Раздел].Добавить(КЗ.Значение.Данные);
		ИначеЕсли Не Контейнер.Свойство(КЗ.Значение.Раздел) Тогда
			Контейнер.Вставить(КЗ.Значение.Раздел, Новый СписокЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КЗ Из СтруктураДерева Цикл
		КЗ.Значение.Данные.Удалить("УИД");
		КЗ.Значение.Данные.Удалить("УИДРодителя");
	КонецЦикла;
	
	Для Каждого КЗ Из СтруктураДерева Цикл
		Если Контейнер.Свойство(КЗ.Значение.Раздел) Тогда
			Контейнер[КЗ.Значение.Раздел].Добавить(КЗ.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контейнер;
	
КонецФункции

Функция ПолучитьУИДРодителя(Строка) Экспорт
	
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда
		Родитель = Строка.Родитель;
	Иначе 
		Родитель = Строка.ПолучитьРодителя();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель.ИДНаименования) Тогда 
		Возврат Родитель.УИД;
	КонецЕсли;
	
	Возврат ПолучитьУИДРодителя(Родитель);
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

#КонецОбласти

#КонецЕсли
