#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Данные = Неопределено;
	Параметры.Свойство("Данные", Данные);
	РазделительНомераСтроки = "_";
	ОТЧ = Новый ОписаниеТипов("Число");
	
	// Сокрытие элементов, видимость которых определяется доступной функциональностью.
	Элементы.Проверка.Видимость = Ложь;
	Элементы.ФормаПредварительныйПросмотр.Видимость = Ложь;
	Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	Элементы.ГруппаПанельОтправки.Видимость = Ложь;
	
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР13014;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииПриСозданииНаСервере(ЭтотОбъект);
	УведомлениеОСпецрежимахНалогообложения.СформироватьСпискиВыбора(ЭтотОбъект, "СпискиВыбора2020_4");
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СформироватьДеревоСтраниц();
		СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		УведомлениеОСпецрежимахНалогообложения.ЗагрузитьДанныеПростогоУведомления(
			ЭтотОбъект, Данные, ПредставлениеУведомления);
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Организация = Параметры.Ключ.Организация;
		ЗагрузитьДанные(Параметры.Ключ);
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Организация = Параметры.ЗначениеКопирования.Организация;
		ЗагрузитьДанные(Параметры.ЗначениеКопирования);
		
	Иначе
		Параметры.Свойство("Организация", Объект.Организация);
		Объект.РегистрацияВИФНС =
			Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		СформироватьДеревоСтраниц();
		СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		
	КонецЕсли;
	
	УведомлениеОСпецрежимахНалогообложения.ЗаполнитьТаблицуФорматов(ЭтотОбъект, "Форматы2020_4");
	ИдДляСвор = УведомлениеОСпецрежимахНалогообложения.ПолучитьИдентификаторыДляСворачивания(ЭтотОбъект);
	СворачиваемыеЭлементы = ПоместитьВоВременноеХранилище(ИдДляСвор);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	Заголовок = УведомлениеОСпецрежимахНалогообложения.ДополнитьЗаголовокУведомления(Заголовок, Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СохраненныеДанныеУведомления = Объект.Ссылка.ДанныеУведомления.Получить();
		УведомлениеЗаполненоВПомощнике = СохраненныеДанныеУведомления.Свойство("ДанныеПомощникаЗаполнения") 
			И ТипЗнч(СохраненныеДанныеУведомления.ДанныеПомощникаЗаполнения) = Тип("Структура")
			И ЗначениеЗаполнено(СохраненныеДанныеУведомления.ДанныеПомощникаЗаполнения);
	Иначе
		УведомлениеЗаполненоВПомощнике = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
		ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда
		УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаОповещенияНавигацииПоОшибкам(
			ЭтотОбъект, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеЗаполненоВПомощникеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВнесениеИзмененийЕГР" Тогда
		СтандартнаяОбработка = Ложь;
		
		МодульРегистрацияОрганизацииКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РегистрацияОрганизацииКлиентСервер");
		ПараметрыПомощника = МодульРегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений();
		ПараметрыПомощника.Организация = Объект.Организация;
		ПараметрыПомощника.КонтекстныйВызов = Истина;
		
		МодульРегистрацияОрганизацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегистрацияОрганизацииКлиент");
		МодульРегистрацияОрганизацииКлиент.ОткрытьПомощникВнесенияИзменений(ПараметрыПомощника);
		
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьУведомлениеЗаполненоВПомощникеНажатие(Элемент)
	
	УведомлениеЗаполненоВПомощнике = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	Если СтрНачинаетсяС(ИмяОбласти, "ДобавитьСтроку") Тогда
		ДобавитьСтроку(Неопределено);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "УдалитьСтроку") Тогда
		УдалитьСтроку(Неопределено);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "ДобавитьСтраницу") Тогда
		ДобавитьСтраницу(Неопределено);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "УдалитьСтраницу") Тогда
		УведомлениеОСпецрежимахНалогообложенияКлиент.УдалитьСтраницу(ЭтотОбъект);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если РучнойВвод Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "Б0101") = 1 ИЛИ СтрНайти(ИмяОбласти, "Б0102") = 1
	 ИЛИ СтрНайти(ИмяОбласти, "Л0104") = 1 И ИмяОбласти <> "Л01040100" И ИмяОбласти <> "Л01041100" Тогда
		ОбработкаАдреса(Область, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыбор(
			ЭтотОбъект, Область, СтандартнаяОбработка, Истина, Истина);
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыборКодЗнач(
			ЭтотОбъект, Область, СтандартнаяОбработка, Истина);
	КонецЕсли;
	
	Если СтандартнаяОбработка И ЭтоОбластьОКСМ(Область) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Область, СтандартнаяОбработка, Элемент",
			Область, СтандартнаяОбработка, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.СтраныМира.ФормаВыбора",
			Новый Структура("РежимВыбора", Истина), ЭтотОбъект, , , ,
			ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриАктивизации(Элемент)
	
	Область = Элемент.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Элементы.ПредставлениеУведомленияКонтекстноеМенюОчиститьОКСМ.Доступность = ЭтоОбластьОКСМ(Область);
	Иначе
		Элементы.ПредставлениеУведомленияКонтекстноеМенюОчиститьОКСМ.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьКонтекстноеМенюПредставленияУведомления(ИмяОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСтраниц

&НаКлиенте
Процедура ДеревоСтраницПриАктивизацииСтроки(Элемент)
	
	Если УИДТекущаяСтраница <> Элемент.ТекущиеДанные.УИД Тогда
		ПредУИД = УИДТекущаяСтраница;
		
		УИДТекущаяСтраница = Элемент.ТекущиеДанные.УИД;
		ТекущееИДНаименования = Элемент.ТекущиеДанные.ИДНаименования;
		Если НЕ ЗначениеЗаполнено(ТекущееИДНаименования) Тогда
			ТекущееИДНаименования = Элемент.ТекущиеДанные.ПолучитьЭлементы()[0].ИДНаименования;
			УИДТекущаяСтраница = Элемент.ТекущиеДанные.ПолучитьЭлементы()[0].УИД;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.Многостраничность Тогда
			ИмяМакета = ПолучитьИмяВыводимогоМакета(Элемент.ТекущиеДанные);
			ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, ПолучитьМногострочныеЧасти(Элемент.ТекущиеДанные), ПредУИД);
		Иначе
			ПоказатьТекущуюСтраницу(Элемент.ТекущиеДанные.ИмяМакета, Элемент.ТекущиеДанные.МногострочныеЧасти, ПредУИД);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьXML(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ДобавитьСтраницуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", , Объект.Ссылка);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОКСМ(Команда)
	
	ПредставлениеУведомления.ТекущаяОбласть.Значение = Неопределено;
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(
		ЭтотОбъект, ПредставлениеУведомления.ТекущаяОбласть, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОчиститьУведомление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО(Команда)
	
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, , Ложь, СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	Если ДоступнаПечатьPDF417(ИмяФормы) Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Печать формы со штрихкодом PDF417 будет реализована в будущих версиях программы.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	ИначеЕсли Модифицированность Тогда
		СохранитьДанные();
	КонецЕсли;
	
	МассивПечати = Новый Массив;
	МассивПечати.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.УведомлениеОСпецрежимахНалогообложения",
		"Уведомление", МассивПечати, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ТаблицаОшибок = ПроверитьВыгрузкуНаСервере();
	
	Если ТаблицаОшибок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам", Новый Структура("ТаблицаОшибок", ТаблицаОшибок), ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВвод(Команда)
	
	РучнойВвод = НЕ РучнойВвод;
	Элементы.ФормаРучнойВвод.Пометка = РучнойВвод;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу() Экспорт
	
	УдалениеСтраницы = Истина;
	УдалитьСтраницуНаСервере();
	УдалениеСтраницы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Область = Элементы.ПредставлениеУведомления.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	
	Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда
		ИмяОбластиДобавленияСтроки = ИмяОбласти;
		ИдМСЧ = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
		ИдМСЧ = СтрЗаменить(ИдМСЧ, "Значок", "");
	Иначе
		ПолноеИмяМСЧ = ПолноеИмяМСЧПоПоказателю(ИмяОбласти);
		ИдМСЧ = ИдМСЧ(ПолноеИмяМСЧ);
		ИмяОбластиДобавленияСтроки = "ДобавитьСтроку" + ИдМСЧ;
	КонецЕсли;
	
	ПроверкаМаксимумаСтрок = ПроверитьДостижениеМаксимальногоКоличестваСтрок(ИдМСЧ);
	
	Если ПроверкаМаксимумаСтрок.ДостигнутМаксимум Тогда
		ПоказатьПредупреждение( , ПроверкаМаксимумаСтрок.ТекстПредупреждения);
	Иначе
		ДобавитьСтрокуНаСервере(ИмяОбластиДобавленияСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	Область = Элементы.ПредставлениеУведомления.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	
	Если СтрНайти(ИмяОбласти, "УдалитьСтроку") = 1 Тогда
		ИмяОбластиУдаленияСтроки = ИмяОбласти;
	Иначе
		ПолноеИмяМСЧ = ПолноеИмяМСЧПоПоказателю(ИмяОбласти);
		ИдМСЧ = ИдМСЧ(ПолноеИмяМСЧ);
		Постфикс = Сред(ИмяОбласти, СтрНайти(ИмяОбласти, "_"));
		ИмяОбластиУдаленияСтроки = "УдалитьСтроку" + ИдМСЧ + Постфикс;
	КонецЕсли;
	
	Если НЕ ПредставлениеУведомления.Области[ИмяОбластиУдаленияСтроки].Гиперссылка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИмяОбластиУдаленияСтроки", ИмяОбластиУдаленияСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияСтруктурДанных

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхУведомленияНовогоОбразца(Форма)
	
	Форма.ДанныеУведомления = Новый Структура;
	Форма.ДанныеМногостраничныхРазделов = Новый Структура;
	Форма.ДанныеДопСтрок = Новый Структура;
	Форма.ДанныеДопСтрокСтраницы = Новый Структура;
	Форма.ИдентификаторыОбычныхСтраниц = Новый Структура;
	
	Разложение = СтрРазделить(Форма.ИмяФормы, ".", Ложь);
	ИдОтчета = Разложение[1];
	
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многостраничность Тогда
			СформироватьСтруктуруДанныхМногостраничногоРаздела(Форма, ИдОтчета, Стр);
		Иначе
			СформироватьСтруктуруДанныхОбычногоРаздела(Форма, ИдОтчета, Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.ПолучитьЭлементы() Цикл
		Если ПодчМнг.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда
			Если ПодчМнг.Многострочность Тогда
				Для Каждого МногострочныйЭлемент Из ПодчМнг.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя);
							СтрокаДанных.Вставить(Обл.Имя);
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, УведомлениеОСпецрежимахНалогообложения.ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = Отчеты[ИмяОтчета].ПолучитьМакет(ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			Форма.ДанныеМногостраничныхРазделов.Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхОбычногоРаздела(Форма, ИдОтчета, Стр)
	
	Форма.ИдентификаторыОбычныхСтраниц.Вставить(Стр.ИДНаименования, Стр.УИД);
	
	Если Стр.Многострочность Тогда
		СтруктураСтраницы = Новый Структура;
		МакетДокумента = Отчеты[ИдОтчета].ПолучитьМакет(Стр.ИмяМакета);
		
		ОбластиМСЧ = Новый Массив;
		
		Для Каждого МногострочныйЭлемент Из Стр.МногострочныеЧасти Цикл
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("УИД");
			СтрокаДанных = Новый Структура;
			МакетМСЧ = Отчеты[ИдОтчета].ПолучитьМакет(Стр.ИмяМакета).ПолучитьОбласть(МногострочныйЭлемент.Значение);
			Для Каждого Обл Из МакетМСЧ.Области Цикл
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				   И Обл.СодержитЗначение Тогда
					ТЗ.Колонки.Добавить(Обл.Имя);
					СтрокаДанных.Вставить(Обл.Имя);
					ОбластиМСЧ.Добавить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Форма.ДанныеДопСтрок.Вставить(
				МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтрокаДанных);
			Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
			
		КонецЦикла;
		
		Для Каждого Обл Из МакетДокумента.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение
			   И ОбластиМСЧ.Найти(Обл.Имя) = Неопределено Тогда
				СтруктураСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
		
	Иначе
		СтруктураСтраницы = Новый Структура;
		
		МакетДокумента = Отчеты[ИдОтчета].ПолучитьМакет(Стр.ИмяМакета);
		Для Каждого Обл Из МакетДокумента.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение Тогда 
				СтруктураСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
		
		Для Каждого МнгСтр Из Стр.ПолучитьЭлементы() Цикл
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИдОтчета, МнгСтр);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхМногостраничногоРаздела(Форма, ИдОтчета, Стр)
	
	Если Стр.Многострочность Тогда
		МнгСтр = Стр.ПолучитьЭлементы()[0];
		МакетДокумента = Отчеты[ИдОтчета].ПолучитьМакет(МнгСтр.ИмяМакета);
		
		ОбластиМСЧ = Новый Массив;
		
		Для Каждого МногострочныйЭлемент Из МнгСтр.МногострочныеЧасти Цикл
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("УИД");
			СтрокаДанных = Новый Структура;
			МакетМногострочки = Отчеты[ИдОтчета].ПолучитьМакет(МнгСтр.ИмяМакета).ПолучитьОбласть(МногострочныйЭлемент.Значение);
			Для Каждого Обл Из МакетМногострочки.Области Цикл
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				   И Обл.СодержитЗначение Тогда
					ТЗ.Колонки.Добавить(Обл.Имя);
					СтрокаДанных.Вставить(Обл.Имя);
					ОбластиМСЧ.Добавить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение,
				ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтрокаДанных);
			Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
			
		КонецЦикла;
		
		СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
		Для Каждого Обл Из МакетДокумента.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение
			   И ОбластиМСЧ.Найти(Обл.Имя) = Неопределено Тогда
				СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИдОтчета, МнгСтр);
		КонецЕсли;
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(СтруктураМногостраничнойСтраницы);
		Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
		
	Иначе
		МнгСтр = Стр.ПолучитьЭлементы()[0];
		
		СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
		МакетДокумента = Отчеты[ИдОтчета].ПолучитьМакет(МнгСтр.ИмяМакета);
		Для Каждого Обл Из МакетДокумента.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение Тогда
				СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИдОтчета, МнгСтр);
		КонецЕсли;
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(СтруктураМногостраничнойСтраницы);
		Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ГруппаУведомлениеИзПомощника.Видимость = Форма.УведомлениеЗаполненоВПомощнике;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКонтекстноеМенюПредставленияУведомления(ИмяОбласти)
	
	ЭтоПоказательМСЧ = СтрНайти(ИмяОбласти, "А010201") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "А010202") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "Б010207") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "К010102") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "К010202") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "Л010408") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "М010101") = 1;
	
	ЭтоЕдинственнаяСтрока = Истина;
	Если ЭтоПоказательМСЧ Тогда
		ИмяБезПостфикса = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, "_") - 1);
		ИмяПоказателяВторойСтроки = ИмяБезПостфикса + "_2";
		ЭтоЕдинственнаяСтрока = (ПредставлениеУведомления.Области.Найти(ИмяПоказателяВторойСтроки) = Неопределено);
	КонецЕсли;
	
	Элементы.ПредставлениеУведомленияКонтекстноеМенюДобавитьСтроку.Доступность = ЭтоПоказательМСЧ;
	Элементы.ПредставлениеУведомленияКонтекстноеМенюУдалитьСтроку.Доступность =
		ЭтоПоказательМСЧ И НЕ ЭтоЕдинственнаяСтрока;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПоказатьТекущуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД)
	
	Если НЕ УдалениеСтраницы И ТекущиеМногострочныеЧасти.Количество() > 0 Тогда
		СобратьДанныеМногострочныхЧастейТекущейСтраницы(МногострочныеЧасти, ПредУИД);
	КонецЕсли;
	
	ТекущиеМногострочныеЧасти = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(МногострочныеЧасти);
	
	ПредставлениеУведомления.Очистить();
	ТекущийМакет = ИмяМакета;
	Макет = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	СкрытьСлужебныеОбласти(Макет);
	УстановитьФорматыВПрочихПолях(Макет);
	
	ПредставлениеУведомления.Вывести(Макет);
	УведомлениеОСпецрежимахНалогообложения.УстановитьФорматыВПолях(ЭтотОбъект);
	
	СтрДанных = ДанныеУведомления[ТекущееИДНаименования];
	
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Обл.СодержитЗначение Тогда
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьМногострочныеЧасти(Макет, МногострочныеЧасти);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьСлужебныеОбласти(Макет)
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
	
	СкрываемаяОбласть = Макет.Области.Найти("СкрытьПриОткрытии1");
	Если СкрываемаяОбласть <> Неопределено Тогда
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЕсли;
	
	СкрываемаяОбласть = Макет.Области.Найти("СкрытьПриОткрытии2");
	Если СкрываемаяОбласть <> Неопределено Тогда
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматыВПрочихПолях(Макет)
	
	Если ТекущееИДНаименования = "ЛистМ" Тогда
		Строка_2000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(2000));
		Макет.Области.М01010100.ТипЗначения = Строка_2000;
	КонецЕсли;
	
КонецПроцедуры

#Область Многостраничность

&НаСервере
Процедура ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД)
	
	Если НЕ УдалениеСтраницы И ТекущиеМногострочныеЧасти.Количество() > 0 Тогда 
		СобратьДанныеМногострочныхЧастейТекущейСтраницы(МногострочныеЧасти, ПредУИД);
	КонецЕсли;
	
	ТекущиеМногострочныеЧасти = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(МногострочныеЧасти);
	
	ПредставлениеУведомления.Очистить();
	ТекущийМакет = ИмяМакета;
	Макет = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	СкрытьСлужебныеОбласти(Макет);
	УстановитьФорматыВПрочихПолях(Макет);
	
	ПредставлениеУведомления.Вывести(Макет);
	УведомлениеОСпецрежимахНалогообложения.УстановитьФорматыВПолях(ЭтотОбъект);
	
	СтрДанных = Неопределено;
	Для Каждого Элт Из ДанныеМногостраничныхРазделов[ТекущееИДНаименования] Цикл
		Если Элт.Значение.УИД = УИДТекущаяСтраница Тогда
			СтрДанных = Элт.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Обл.СодержитЗначение Тогда
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	НайденнаяСтрока = НайтиСтрокуВДеревеПоУИД(ДеревоСтраниц.ПолучитьЭлементы(), УИДТекущаяСтраница);
	Если НайденнаяСтрока <> Неопределено
	   И НайденнаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
		ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Текст = "";
		ПредставлениеУведомления.Области.УдалитьСтраницу.Текст = "";
		ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Гиперссылка = Ложь;
		ПредставлениеУведомления.Области.УдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
	ПоказатьМногострочныеЧасти(Макет, МногострочныеЧасти);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяВыводимогоМакета(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяМакета) Тогда
		Возврат ТекущиеДанные.ИмяМакета;
	Иначе
		Возврат ТекущиеДанные.ПолучитьЭлементы()[0].ИмяМакета;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуВДеревеПоУИД(Дерево, УИД)
	
	Для Каждого Элемент Из Дерево Цикл
		Если Элемент.УИД = УИД И Не ПустаяСтрока(Элемент.ИДНаименования) Тогда
			Возврат Элемент;
		КонецЕсли;
		
		НайденныйИД = НайтиСтрокуВДеревеПоУИД(Элемент.ПолучитьЭлементы(), УИД);
		Если НайденныйИД <> Неопределено Тогда
			Возврат НайденныйИД;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтраницуНаСервере()
	
	НовИд = УведомлениеОСпецрежимахНалогообложения.ДобавитьСтраницуУведомления(ЭтотОбъект);
	Если НовИд <> Неопределено Тогда 
		Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере()
	Для Каждого Стр Из ТекущиеМногострочныеЧасти Цикл 
		ТЗ = ПолучитьИзВременногоХранилища(ДанныеДопСтрок[Стр.Значение]);
		Строки = ТЗ.НайтиСтроки(Новый Структура("УИД", УИДТекущаяСтраница));
		Для Каждого СтрМнг Из Строки Цикл 
			ТЗ.Удалить(СтрМнг);
		КонецЦикла;
		ДанныеДопСтрок[Стр.Значение] = ПоместитьВоВременноеХранилище(ТЗ, ДанныеДопСтрок[Стр.Значение]);
	КонецЦикла;
	
	НовИд = УведомлениеОСпецрежимахНалогообложения.УдалитьСтраницуНаСервере(ЭтотОбъект);
	Если НовИд <> Неопределено Тогда 
		Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область Многострочность

&НаСервере
Процедура СобратьДанныеМногострочныхЧастейТекущейСтраницы(МногострочныеЧасти, ПредУИД)
	
	Для Каждого МнгЧ Из ТекущиеМногострочныеЧасти Цикл
		СЗ = ДанныеДопСтрокСтраницы[МнгЧ.Значение];
		Для Инд = 1 По СЗ.Количество() Цикл 
			ИндСтр = РазделительНомераСтроки + Формат(Инд, "ЧГ=0");
			ДанныеСтроки = СЗ[Инд-1].Значение;
			Для Каждого КЗ Из ДанныеСтроки Цикл 
				ДанныеСтроки[КЗ.Ключ] = ПредставлениеУведомления.Области[КЗ.Ключ + ИндСтр].Значение;
			КонецЦикла;
		КонецЦикла;
		
		ВсеДопСтроки = ПолучитьИзВременногоХранилища(ДанныеДопСтрок[МнгЧ.Значение]);
		СтрокиТекущейСтраницы = ВсеДопСтроки.НайтиСтроки(Новый Структура("УИД", ПредУИД));
		Для Каждого СохраненнаяСтрокаМСЧ Из СтрокиТекущейСтраницы Цикл
			ВсеДопСтроки.Удалить(СохраненнаяСтрокаМСЧ);
		КонецЦикла;
		
		Для Каждого СтрокаМСЧ Из СЗ Цикл
			НовСтр = ВсеДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаМСЧ.Значение);
			НовСтр.УИД = ПредУИД;
		КонецЦикла;
		
		ДанныеДопСтрок[МнгЧ.Значение] = ПоместитьВоВременноеХранилище(ВсеДопСтроки, ДанныеДопСтрок[МнгЧ.Значение]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьМногострочныеЧасти(Макет, МногострочныеЧасти)
	
	Если ТипЗнч(МногострочныеЧасти) = Тип("СписокЗначений")
	   И МногострочныеЧасти.Количество() > 0 Тогда
		Для Каждого МнгСтр Из МногострочныеЧасти Цикл
			ПолноеИмяМСЧ = МнгСтр.Значение;
			ИдМСЧ = ИдМСЧ(ПолноеИмяМСЧ);
			
			ТЗ = ПолучитьИзВременногоХранилища(ДанныеДопСтрок[ПолноеИмяМСЧ]);
			ИсхСтр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ][0].Значение);
			Для Каждого КЗ Из ИсхСтр Цикл
				ИсхСтр[Кз.Ключ] = Неопределено;
			КонецЦикла;
			
			Строки = ТЗ.НайтиСтроки(Новый Структура("УИД", УИДТекущаяСтраница));
			ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ].Очистить();
			Инд = 0;
			Пока ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ].Количество() < Строки.Количество() Цикл
				ТекСтр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсхСтр);
				ЗаполнитьЗначенияСвойств(ТекСтр, Строки[Инд]);
				ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ].Добавить(ТекСтр);
				Инд = Инд + 1;
			КонецЦикла;
			
			Если ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ].Количество() = 0 Тогда
				ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ].Добавить(ИсхСтр);
			КонецЕсли;
			
			МакетМСЧ = Макет.ПолучитьОбласть(ПолноеИмяМСЧ);
			ПоказателиМСЧ = ПоказателиМСЧ(МакетМСЧ);
			
			ПромежуточныйМакет = Новый ТабличныйДокумент;
			Инд = 1;
			Для Каждого Стр Из ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ] Цикл
				МакетМСЧ = Макет.ПолучитьОбласть(ПолноеИмяМСЧ);
				Для Каждого ИмяПоказателя Из ПоказателиМСЧ Цикл
					ОбластьПоказателя = МакетМСЧ.Область(ИмяПоказателя);
					ОбластьПоказателя.Значение = Стр.Значение[ИмяПоказателя];
					ОбластьПоказателя.Имя = ИмяПоказателя + "_" + СтрокаЧГ0(Инд);
				КонецЦикла;
				
				ОбластьУдаленияСтроки = МакетМСЧ.Область("УдалитьСтроку" + ИдМСЧ);
				ОбластьУдаленияСтроки.Имя = "УдалитьСтроку" + ИдМСЧ + "_" + СтрокаЧГ0(Инд);
				
				ПромежуточныйМакет.Вывести(МакетМСЧ);
				Инд = Инд + 1;
				
			КонецЦикла;
			
			ИсходнаяОбластьМСЧ = ПредставлениеУведомления.Область(ПолноеИмяМСЧ);
			ПозицияВставки = ИсходнаяОбластьМСЧ.Верх;
			
			ПредставлениеУведомления.УдалитьОбласть(ИсходнаяОбластьМСЧ, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			ПредставлениеУведомления.ВставитьОбласть(
				ПромежуточныйМакет.Область(1, , ПромежуточныйМакет.ВысотаТаблицы),
				ПредставлениеУведомления.Область(ПозицияВставки, , ПозицияВставки, ),
				ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМногострочныеЧасти(ТекущиеДанные)
	
	Если ТекущиеДанные.МногострочныеЧасти.Количество() > 0 Тогда
		Возврат ТекущиеДанные.МногострочныеЧасти;
	ИначеЕсли ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат ТекущиеДанные.ПолучитьЭлементы()[0].МногострочныеЧасти;
	Иначе
		Возврат ТекущиеДанные.МногострочныеЧасти;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуНаСервере(ИмяОбласти)
	
	ИдМСЧ = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИдМСЧ = СтрЗаменить(ИдМСЧ, "Значок", "");
	ПолноеИмяМСЧ = "МногострочнаяЧасть" + ИдМСЧ;
	
	ДопСтрокиТекущейСтраницы = ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ];
	НомерДобавляемойСтроки = ДопСтрокиТекущейСтраницы.Количество() + 1;
	НоваяСтрока = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ][0].Значение);
	Для Каждого КЗ Из НоваяСтрока Цикл
		НоваяСтрока[КЗ.Ключ] = Неопределено;
	КонецЦикла;
	ДопСтрокиТекущейСтраницы.Добавить(НоваяСтрока);
	
	МакетМСЧ = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ТекущийМакет).ПолучитьОбласть(ПолноеИмяМСЧ);
	ПоказателиМСЧ = ПоказателиМСЧ(МакетМСЧ);
	ИндСтр = РазделительНомераСтроки + СтрокаЧГ0(НомерДобавляемойСтроки);
	
	Для Каждого ИмяПоказателя Из ПоказателиМСЧ Цикл
		МакетМСЧ.Области[ИмяПоказателя].Имя = ИмяПоказателя + ИндСтр;
	КонецЦикла;
	ОбластьУдаленияСтроки = МакетМСЧ.Область("УдалитьСтроку" + ИдМСЧ);
	ОбластьУдаленияСтроки.Имя = "УдалитьСтроку" + ИдМСЧ + ИндСтр;
	
	ПозицияВставки = ПредставлениеУведомления.Область(ИмяОбласти).Верх;
	ПредставлениеУведомления.ВставитьОбласть(
		МакетМСЧ.Область(1, , МакетМСЧ.ВысотаТаблицы),
		ПредставлениеУведомления.Область(ПозицияВставки, , ПозицияВставки, ),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ);
	
	ИмяОбластиДляАктивации = ПоказателиМСЧ[0] + ИндСтр;
	Элементы.ПредставлениеУведомления.ТекущаяОбласть = ПредставлениеУведомления.Область(ИмяОбластиДляАктивации);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере(ИмяОбласти)
	
	ИмяБезПостфикса = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, "_") - 1);
	ИдМСЧ = СтрЗаменить(ИмяБезПостфикса, "УдалитьСтроку", "");
	ПолноеИмяМСЧ = "МногострочнаяЧасть" + ИдМСЧ;
	НомерСтроки = Число(Сред(ИмяОбласти, СтрНайти(ИмяОбласти, "_") + 1));
	
	МногострочнаяЧасть = ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ];
	МногострочнаяЧасть.Удалить(НомерСтроки - 1);
	
	МакетМСЧ = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ТекущийМакет).ПолучитьОбласть(ПолноеИмяМСЧ);
	ПоказателиМСЧ = ПоказателиМСЧ(МакетМСЧ);
	ВысотаБлокаМСЧ = МакетМСЧ.Область().Низ;
	
	НомерСтрокиМакета = ПредставлениеУведомления.Область(ИмяОбласти).Верх;
	УдаляемаяОбласть = ПредставлениеУведомления.Область(НомерСтрокиМакета, , НомерСтрокиМакета + ВысотаБлокаМСЧ - 1, );
	ПредставлениеУведомления.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Пока Истина Цикл
		ОбластьУдаленияСтроки = ПредставлениеУведомления.Области.Найти(
			"УдалитьСтроку" + ИдМСЧ + "_" + СтрокаЧГ0(НомерСтроки + 1));
		Если ОбластьУдаленияСтроки = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ИмяПоказателя Из ПоказателиМСЧ Цикл
			ОбластьПоказателя = ПредставлениеУведомления.Область(ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки + 1));
			ОбластьПоказателя.Имя = ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки);
		КонецЦикла;
		ОбластьУдаленияСтроки.Имя = "УдалитьСтроку" + ИдМСЧ + "_" + СтрокаЧГ0(НомерСтроки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ);
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ИдМСЧ(ПолноеИмяМСЧ)
	
	Возврат СтрЗаменить(ПолноеИмяМСЧ, "МногострочнаяЧасть", "");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ)
	
	ПолноеИмяМСЧ = "МногострочнаяЧасть" + ИдМСЧ;
	ДанныеМСЧ = ДанныеДопСтрокСтраницы[ПолноеИмяМСЧ];
	УдалениеВозможно = (ДанныеМСЧ.Количество() >= 2);
	
	ОбластьУдаленияСтроки = ПредставлениеУведомления.Область("УдалитьСтроку" + ИдМСЧ + "_1");
	ОбластьУдаленияСтроки.Гиперссылка = УдалениеВозможно;
	ОбластьУдаленияСтроки.Текст = ?(УдалениеВозможно, "х", "");
	
КонецПроцедуры

&НаСервере
Функция ПоказателиМСЧ(МакетМСЧ)
	
	ПоказателиМСЧ = Новый Массив;
	Для Каждого Область Из МакетМСЧ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Область.СодержитЗначение Тогда
			ИмяПоказателя = Область.Имя;
			ПоказателиМСЧ.Добавить(ИмяПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиМСЧ;
	
КонецФункции

&НаКлиенте
Функция ОпределитьПринадлежностьОбластиКМногострочномуРазделу(ИмяОбласти) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолноеИмяМСЧПоПоказателю(ИмяОбласти)
	
	ИмяБезПостфикса = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, "_") - 1);
	
	Если ИмяБезПостфикса = "А01020100" Тогда
		Возврат "МногострочнаяЧастьА010201";
		
	ИначеЕсли ИмяБезПостфикса = "А01020200" Тогда
		Возврат "МногострочнаяЧастьА010202";
		
	ИначеЕсли ИмяБезПостфикса = "Б01020701" ИЛИ ИмяБезПостфикса = "Б01020702" Тогда
		Возврат "МногострочнаяЧастьБ010207";
		
	ИначеЕсли ИмяБезПостфикса = "К01010200" Тогда
		Возврат "МногострочнаяЧастьК010102";
		
	ИначеЕсли ИмяБезПостфикса = "К01020200" Тогда
		Возврат "МногострочнаяЧастьК010202";
		
	ИначеЕсли ИмяБезПостфикса = "Л01040801" ИЛИ ИмяБезПостфикса = "Л01040802" Тогда
		Возврат "МногострочнаяЧастьЛ010408";
		
	ИначеЕсли ИмяБезПостфикса = "М01010100" Тогда
		Возврат "МногострочнаяЧастьМ010101";
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ПолноеИмяМСЧПоПоказателю():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДостижениеМаксимальногоКоличестваСтрок(ИдМСЧ)
	
	Результат = Новый Структура("ДостигнутМаксимум, ТекстПредупреждения", Ложь, "");
	
	Если ИдМСЧ = "А010201" Тогда
		ИмяПредельногоПоказателя = "А01020100_18";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 18 строк с указанием кодов языков народов РФ или иностранных языков'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "А010202" Тогда
		ИмяПредельногоПоказателя = "А01020200_18";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 18 строк с указанием кодов языков народов РФ или иностранных языков'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "Б010207" Тогда
		ИмяПредельногоПоказателя = "Б01020701_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием здания/сооружения'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "Л010408" Тогда
		ИмяПредельногоПоказателя = "Л01040801_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием здания/сооружения'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "М010101" Тогда
		ИмяПредельногоПоказателя = "М01010100_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием причин ограничения доступа к сведениям'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокуНаСервере(ДополнительныеПараметры.ИмяОбластиУдаленияСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ВводАдресаФИАС

&НаКлиенте
Процедура ОбработкаАдреса(Область, СтандартнаяОбработка) Экспорт
	
	ИмяОбласти = Область.Имя;
	
	Если СтрНайти(ИмяОбласти, "Б0101") = 1 Тогда
		ОбработкаМестаНахождения(Область, СтандартнаяОбработка);
		
	ИначеЕсли СтрНайти(ИмяОбласти, "Б0102") = 1
	      ИЛИ СтрНайти(ИмяОбласти, "Л0104") = 1 Тогда
		ОбработкаАдресаЮЛ(Область, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАдресаЮЛ(Область, СтандартнаяОбработка)
	
	ИдАдреса = Лев(Область.Имя, 5);
	
	Если ИДАдреса = "Б0102" Тогда
		ИдМСЧ = "Б010207";
	ИначеЕсли ИДАдреса = "Л0104" Тогда
		ИдМСЧ = "Л010408";
	КонецЕсли;
	
	// Эмуляция механизма многострочных частей из налоговой отчетности.
	СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей = Новый Структура;
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить(ИдМСЧ + "01");
	ИменаГраф.Добавить(ИдМСЧ + "02");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей.Вставить(ИдМСЧ,
		Новый Структура("ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
			ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтандартнаяОбработка = Ложь;
	
	СоответствиеПоказателейСтраницыРеквизитамАдреса =
		СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, "Адрес" + ИдАдреса);
	
	ПараметрыОпределенияАдреса = Новый Структура;
	ПараметрыОпределенияАдреса.Вставить("СтруктураМногострочныхЧастей",
		СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей);
	ПараметрыОпределенияАдреса.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса);
	
	ПоляАдресаВJSON = "";
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		Если Элем.Значение = "СтрокаАдресногоОбъекта" Тогда
			ПоляАдресаВJSON = ПредставлениеУведомления.Области[Элем.Ключ].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", ПоляАдресаВJSON);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации",
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НазначениеАдреса","Адрес" + ИдАдреса);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаМестаНахождения(Область, СтандартнаяОбработка)
	
	// Эмуляция механизма многострочных частей из налоговой отчетности.
	СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей = Новый Структура;
	
	СтандартнаяОбработка = Ложь;
	
	СоответствиеПоказателейСтраницыРеквизитамАдреса =
		СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, "МестоНахождения");
	
	ПараметрыОпределенияАдреса = Новый Структура;
	ПараметрыОпределенияАдреса.Вставить("СтруктураМногострочныхЧастей",
		СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей);
	ПараметрыОпределенияАдреса.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса);
	
	ПоляАдресаВJSON = "";
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		Если Элем.Значение = "СтрокаАдресногоОбъекта" Тогда
			ПоляАдресаВJSON = ПредставлениеУведомления.Области[Элем.Ключ].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", ПоляАдресаВJSON);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации",
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НазначениеАдреса", "МестоНахождения");
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение данных текущего раздела (страницы раздела).
	ПредУИД = УИДТекущаяСтраница;
	Если Элементы.ДеревоСтраниц.ТекущиеДанные.Многостраничность Тогда
		ИмяМакета = ПолучитьИмяВыводимогоМакета(Элементы.ДеревоСтраниц.ТекущиеДанные);
		МногострочныеЧасти = ПолучитьМногострочныеЧасти(Элементы.ДеревоСтраниц.ТекущиеДанные);
	Иначе
		ИмяМакета = Элементы.ДеревоСтраниц.ТекущиеДанные.ИмяМакета;
		МногострочныеЧасти = Элементы.ДеревоСтраниц.ТекущиеДанные.МногострочныеЧасти;
	КонецЕсли;
	СобратьДанныеМногострочныхЧастейТекущейСтраницы(МногострочныеЧасти, ПредУИД);
	
	ОбновитьАдресВМестеХранения(Результат, Параметры, ПредУИД);
	
	Элемент= Элементы.ДеревоСтраниц;
	
	УдалениеСтраницы = Истина; // Подавление сбора данных из табличного документа.
	
	Если Элемент.ТекущиеДанные.Многостраничность Тогда
		ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД);
	Иначе
		ПоказатьТекущуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД);
	КонецЕсли;
	
	УдалениеСтраницы = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресВМестеХранения(Результат, ПараметрыАдреса, ПредУИД)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Адрес", Результат.Значение);
	ПараметрыЗаполнения.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, ПараметрыАдреса.НазначениеАдреса));
	ПараметрыЗаполнения.Вставить("ВерсияАдреса", 2);
	
	ВиртуальноеДеревоРазделов = Новый ДеревоЗначений;
	ВиртуальноеДеревоРазделов.Колонки.Добавить("Данные");
	ВиртуальноеДеревоРазделов.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	Если ПараметрыАдреса.НазначениеАдреса = "МестоНахождения" Тогда
		ВиртуальнаяВеткаРаздела = ВиртуальноеДеревоРазделов.Строки.Добавить();
		ВиртуальнаяВеткаРаздела.Данные = ДанныеУведомления.ЛистБ;
		
		ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ВиртуальнаяВеткаРаздела, ПараметрыЗаполнения, ПредУИД, Истина);
		
	ИначеЕсли ПараметрыАдреса.НазначениеАдреса = "АдресБ0102" Тогда
		ВиртуальнаяВеткаРаздела = ВиртуальноеДеревоРазделов.Строки.Добавить();
		ВиртуальнаяВеткаРаздела.Данные = ДанныеУведомления.ЛистБ;
		ВиртуальнаяВеткаРаздела.ДанныеМногострочныхЧастей = Новый Структура("Б010207, ПолноеИмяМСЧ",
			ДанныеДопСтрокСтраницы.МногострочнаяЧастьБ010207, "МногострочнаяЧастьБ010207");
		
		ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ВиртуальнаяВеткаРаздела, ПараметрыЗаполнения, ПредУИД);
		
	ИначеЕсли ПараметрыАдреса.НазначениеАдреса = "АдресЛ0104" Тогда
		ДанныеТекущегоЛистаРаздела = Неопределено;
		Для Каждого ЛистРаздела Из ДанныеМногостраничныхРазделов.ЛистЛ Цикл
			ДанныеРаздела = ЛистРаздела.Значение;
			Если ДанныеРаздела.УИД = УИДТекущаяСтраница Тогда
				ДанныеТекущегоЛистаРаздела = ДанныеРаздела;
			КонецЕсли;
		КонецЦикла;
		
		ВиртуальнаяВеткаРаздела = ВиртуальноеДеревоРазделов.Строки.Добавить();
		ВиртуальнаяВеткаРаздела.Данные = ДанныеТекущегоЛистаРаздела;
		ВиртуальнаяВеткаРаздела.ДанныеМногострочныхЧастей = Новый Структура("Л010408, ПолноеИмяМСЧ",
			ДанныеДопСтрокСтраницы.МногострочнаяЧастьЛ010408, "МногострочнаяЧастьЛ010408");
		
		ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ВиртуальнаяВеткаРаздела, ПараметрыЗаполнения, ПредУИД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(СтраницаРаздела, ПараметрыЗаполнения, ПредУИД, ЭтоМестоНахождения = Ложь)
	
	СоответствиеПоказателейСтраницыРеквизитамАдреса = ПараметрыЗаполнения.СоответствиеПоказателейСтраницыРеквизитамАдреса;
	
	ДополнительныеПараметры = Неопределено;
	Если ПараметрыЗаполнения.Свойство("ВерсияАдреса") Тогда
		ДополнительныеПараметры = Новый Структура("ВерсияАдреса", ПараметрыЗаполнения.ВерсияАдреса);
	КонецЕсли;
	
	СтруктураАдреса = УведомлениеОСпецрежимахНалогообложения.АдресВФорматеФИАС(
		ПараметрыЗаполнения.Адрес, ДополнительныеПараметры);
	
	Если ЭтоМестоНахождения Тогда
		КодыГородовФедеральногоЗначения = СтрРазделить("77,78,92,99", ",", Ложь);
		Если КодыГородовФедеральногоЗначения.Найти(СтруктураАдреса.КодРегиона) <> Неопределено Тогда
			СтруктураАдреса.МуниципальныйРайонВид = "";
			СтруктураАдреса.МуниципальныйРайонСокращение = "";
			СтруктураАдреса.МуниципальныйРайон = "";
			СтруктураАдреса.ПоселениеВид = "";
			СтруктураАдреса.ПоселениеСокращение = "";
			СтруктураАдреса.Поселение = "";
			СтруктураАдреса.НаселенныйПунктВид = "";
			СтруктураАдреса.НаселенныйПунктСокращение = "";
			СтруктураАдреса.НаселенныйПункт = "";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтраницы = СтраницаРаздела.Данные;
	
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		Если ДанныеСтраницы.Свойство(Элем.Ключ) Тогда
			ДанныеСтраницы.Вставить(Элем.Ключ, СтруктураАдреса[Элем.Значение]);
			
		ИначеЕсли СтраницаРаздела.ДанныеМногострочныхЧастей.Свойство(Элем.Ключ)
			И ТипЗнч(Элем.Значение) = Тип("Массив") И Элем.Значение.Количество() >= 2
			И ТипЗнч(Элем.Значение[0]) = Тип("Строка") И ЗначениеЗаполнено(Элем.Значение[0])
			И СтруктураАдреса.Свойство(Элем.Значение[0]) И ТипЗнч(СтруктураАдреса[Элем.Значение[0]]) = Тип("Массив")
			И ТипЗнч(Элем.Значение[1]) = Тип("Структура") Тогда
			
			ПолноеИмяМСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей.ПолноеИмяМСЧ;
			ДанныеМСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[Элем.Ключ];
			ПоказателиМСЧ = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеМСЧ[0].Значение);
			ДанныеМСЧ.Очистить();
			
			СоответствиеМногострочнойЧастиМножественномуРеквизитуАдреса = Элем.Значение[1];
			
			МножественныйРеквизитАдреса = СтруктураАдреса[Элем.Значение[0]];
			
			Для Каждого РеквизитАдреса Из МножественныйРеквизитАдреса Цикл
				СтрокаМногострочнойЧасти = ДанныеМСЧ.Добавить();
				СтрокаМногострочнойЧасти.Значение = Новый Структура;
				Для Каждого ПоказательМСЧ Из ПоказателиМСЧ Цикл
					СтрокаМногострочнойЧасти.Значение.Вставить(ПоказательМСЧ.Ключ);
				КонецЦикла;
				
				Для Каждого ЭлемСоответствия Из СоответствиеМногострочнойЧастиМножественномуРеквизитуАдреса Цикл
					СтрокаМногострочнойЧасти.Значение[ЭлемСоответствия.Ключ] = РеквизитАдреса[ЭлемСоответствия.Значение];
				КонецЦикла;
				
			КонецЦикла;
			
			Если ДанныеМСЧ.Количество() = 0 Тогда
				СтрокаМногострочнойЧасти = ДанныеМСЧ.Добавить();
				СтрокаМногострочнойЧасти.Значение = Новый Структура;
				Для Каждого ПоказательМСЧ Из ПоказателиМСЧ Цикл
					СтрокаМногострочнойЧасти.Значение.Вставить(ПоказательМСЧ.Ключ);
				КонецЦикла;
			КонецЕсли;
			
			// Подмена МСЧ в хранилище.
			ВсеДопСтроки = ПолучитьИзВременногоХранилища(ДанныеДопСтрок[ПолноеИмяМСЧ]);
			СтрокиТекущейСтраницы = ВсеДопСтроки.НайтиСтроки(Новый Структура("УИД", ПредУИД));
			Для Каждого СохраненнаяСтрокаМСЧ Из СтрокиТекущейСтраницы Цикл
				ВсеДопСтроки.Удалить(СохраненнаяСтрокаМСЧ);
			КонецЦикла;
			
			Для Каждого СтрокаМСЧ Из ДанныеМСЧ Цикл
				НовСтр = ВсеДопСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаМСЧ.Значение);
				НовСтр.УИД = ПредУИД;
			КонецЦикла;
			
			ДанныеДопСтрок[ПолноеИмяМСЧ] = ПоместитьВоВременноеХранилище(ВсеДопСтроки, ДанныеДопСтрок[ПолноеИмяМСЧ]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановление

&НаСервере
Процедура СохранитьДанные() Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТекущиеМногострочныеЧасти.Количество() > 0 Тогда
		СобратьДанныеМногострочныхЧастейТекущейСтраницы(ТекущиеМногострочныеЧасти, УИДТекущаяСтраница);
	КонецЕсли;
	
	ДанныеДопСтрокБД = Новый Структура;
	Для Каждого КЗ Из ДанныеДопСтрок Цикл 
		ДанныеДопСтрокБД.Вставить(КЗ.Ключ, ПолучитьИзВременногоХранилища(КЗ.Значение));
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
	СтруктураПараметров.Вставить("ДанныеДопСтрокБД", ДанныеДопСтрокБД);
	СтруктураПараметров.Вставить("ДеревоСтраниц", РеквизитФормыВЗначение("ДеревоСтраниц"));
	СтруктураПараметров.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	СтруктураПараметров.Вставить("ДанныеУведомления", ДанныеУведомления);
	СтруктураПараметров.Вставить("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(ЭтаФорма);
	
	Модифицированность = Ложь;
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");
	
	УведомлениеОСпецрежимахНалогообложения.СохранитьНастройкиРучногоВвода(ЭтотОбъект);
	УведомлениеЗаполненоВПомощнике = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если Модифицированность Тогда
		СохранитьДанные();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УведомлениеОбъект = Объект.Ссылка.ПолучитьОбъект();
		Если УведомлениеОбъект.Заблокирован() Тогда
			УведомлениеОбъект.Разблокировать();
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СсылкаНаДанные)
	
	СохраненныеДанные = СсылкаНаДанные.Ссылка.ДанныеУведомления.Получить();
	
	ДанныеУведомления = СохраненныеДанные.ДанныеУведомления;
	ДанныеМногостраничныхРазделов = СохраненныеДанные.ДанныеМногостраничныхРазделов;
	
	СохраненноеДеревоСтраниц = СохраненныеДанные.ДеревоСтраниц;
	АктуализироватьПараметрыДереваСтраниц(СохраненноеДеревоСтраниц);
	ЗначениеВРеквизитФормы(СохраненноеДеревоСтраниц, "ДеревоСтраниц");
	
	СохраненныеДанные.Свойство("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
	
	ДанныеДопСтрокБД = СохраненныеДанные.ДанныеДопСтрокБД;
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрокСтраницы = Новый Структура;
	Для Каждого КЗ Из ДанныеДопСтрокБД Цикл 
		ДанныеДопСтрок.Вставить(КЗ.Ключ, ПоместитьВоВременноеХранилище(КЗ.Значение, Новый УникальныйИдентификатор));
		Стр = Новый Структура;
		Для Каждого Кол Из КЗ.Значение.Колонки Цикл
			Если Кол.Имя <> "УИД" Тогда
				Стр.Вставить(Кол.Имя);
			КонецЕсли;
		КонецЦикла;
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(Стр);
		ДанныеДопСтрокСтраницы.Вставить(КЗ.Ключ, СЗ);
	КонецЦикла;
	
	СохраненныеДанные.Свойство("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	
	// В ранее сохраненных заявлениях могут отсутствовать показатели, добавившиеся в новых редакциях заявления.
	ДобавитьНедостающиеПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНедостающиеПоказатели()
	
	ЛистБ = ДанныеУведомления.ЛистБ;
	
	Если НЕ ЛистБ.Свойство("БД1010100") Тогда
		ЛистБ.Вставить("БД1010100", "");
	КонецЕсли;
	
	Если НЕ ЛистБ.Свойство("БД1020100") Тогда
		ЛистБ.Вставить("БД1020100", "");
	КонецЕсли;
	
	ЛистыЛ = ДанныеМногостраничныхРазделов.ЛистЛ;
	
	Для Каждого ЛистЛ Из ЛистыЛ Цикл
		ПоказателиРаздела = ЛистЛ.Значение;
		Если НЕ ПоказателиРаздела.Свойство("ЛД1020200") Тогда
			ПоказателиРаздела.Вставить("ЛД1020200", "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсОбращенияКМодулюМенеджераИОбъекта

&НаСервере
Процедура СформироватьДеревоСтраниц() Экспорт
	
	НовоеДеревоСтраниц = Отчеты[ИДОтчета(ИмяФормы)].СформироватьДеревоСтраниц(ИДФормыОтчета(ИмяФормы));
	
	ЗначениеВРеквизитФормы(НовоеДеревоСтраниц, "ДеревоСтраниц");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти(КонтейнерВходящий, КонтейнерРезультат) Экспорт
	
	Отчеты[ИДОтчета(ИмяФормы)].ИнициализироватьМногострочныеЧасти(
		ИДФормыОтчета(ИмяФормы), КонтейнерВходящий, КонтейнерРезультат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеПоказателейСтраницыРеквизитамАдреса(ПолноеИмяФормы, НазначениеАдреса)
	
	Возврат Отчеты[ИДОтчета(ПолноеИмяФормы)].СоответствиеПоказателейСтраницыРеквизитамАдреса(
		ИДФормыОтчета(ПолноеИмяФормы), НазначениеАдреса);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(ПолноеИмяФормы)
	
	Возврат Отчеты[ИДОтчета(ПолноеИмяФормы)].ДоступнаПечатьPDF417(
		ИДФормыОтчета(ПолноеИмяФормы));
	
КонецФункции

&НаСервере
Процедура АктуализироватьПараметрыДереваСтраниц(ИсходноеДерево)
	
	Отчеты[ИДОтчета(ИмяФормы)].АктуализироватьПараметрыДереваСтраниц(
		ИДФормыОтчета(ИмяФормы), ИсходноеДерево);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИДОтчета(Знач ПолноеИмяФормы)
	
	СоставляющиеИмени = СтрРазделить(ПолноеИмяФормы, ".");
	Возврат СоставляющиеИмени[1];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИДФормыОтчета(ПолноеИмяФормы)
	
	СоставляющиеИмени = СтрРазделить(ПолноеИмяФормы, ".");
	Возврат СоставляющиеИмени[3];
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПечатьБРОНаСервере()
	
	УведомлениеОСпецрежимахНалогообложения.ПечатьУведомленияБРО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОбластьОКСМ(Область)
	
	ПоказателиОКСМ = "В01020500, В01030600, В01620600, В01621400, В01622300, В01631000, В01631800,
		|Г01030700, Г01620600, Г01621400, Г01622300, Г01631000, Г01631800, Г01710600, Г01711400, Г01712300,
		|Д01620600, Д01621400, Д01622300, Д01631000, Д01631800,
		|Е01620600, Е01621400, Е01622300, Е01631000, Е01631800,
		|Ж01620600, Ж01621400, Ж01622300, Ж01631000, Ж01631800,
		|З01220600, З01221400, З01222300, З01231000, З01231800,
		|И01031100,
		|Л01030300, Л01041100";
	
	ИмяОбласти = Область.Имя;
	
	Возврат СтрНайти(ПоказателиОКСМ, ИмяОбласти) > 0;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		Область = ДополнительныеПараметры.Область;
		Если Область.Значение <> КодЭлементаСправочника Тогда
			Область.Значение = КодЭлементаСправочника;
			Модифицированность = Истина;
		КонецЕсли;
		
		ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элементы.ПредставлениеУведомления, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодЭлементаСправочника(Результат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "Код");
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если Модифицированность И УведомлениеЗаполненоВПомощнике Тогда
		Оповестить("ЗакрытьПомощникВнесенияИзмененийЕГР", Объект.Ссылка);
	КонецЕсли;
	
	СохранитьДанные();
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	
	СохранитьДанные();
	
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт
	
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выгрузка = Выгрузка[0];
	Возврат Новый Структура("ТестВыгрузки, КодировкаВыгрузки, Данные, ИмяФайла",
		Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки,
		Отчеты[Объект.ИмяОтчета].ПолучитьМакет("TIFF_2020_4"),
		"1111520_5.01000_01.tif");
		
КонецФункции

&НаСервере
Процедура ОчисткаОтчета() Экспорт
	
	Объект.РегистрацияВИФНС =
		Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
	СформироватьДеревоСтраниц();
	СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

#КонецОбласти
