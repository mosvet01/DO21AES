////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отсутствия".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет отсутствие для записи рабочего календаря.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение которое будет обработано в случае отсутствия.
//  Отказ - Булево - Отказ от дальнейшей обработки.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоЗаписиРабочегоКалендаря(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтаФорма.ПроверитьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ЭтаФорма.Объект.Пользователь);
	
	Если Не ПроверитьОтсутствиеПользователей(МассивПользователей,
		ЭтаФорма.Объект.ДатаНачала, ЭтаФорма.Объект.ДатаОкончания, ИнформацияОбОтсутствии) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	ЭтаФорма.ПроверитьОтсутствие = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Показывает предупреждение об отсутствии для записи рабочего календаря.
//
// Параметры:
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
Процедура ПоказатьПредупреждениеОбОтсутствииПоЗаписиРабочегоКалендаря(
	ИнформацияОбОтсутствии, ОписаниеОповещения, Владелец) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Пользователь отсутствует во время данной записи календаря.'");
	ТекстВопроса = НСтр("ru = 'Записать запись календаря?'");
	ТекстКоманды = НСтр("ru = 'Записать'");
	
	ОбработатьИнформациюОбОтсутствии(ИнформацияОбОтсутствии, ОписаниеОповещения,
		ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец);
	
КонецПроцедуры

// Проверяет отсутствие для контроля.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ТаблицаИсполнители - ТаблицаЗначений - Таблица исполнителей контроля.
//  СрокИсполнения - Дата - Срок исполнения контроля.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения, которые будет обработано в случае отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоКонтролю(ЭтаФорма, ТаблицаИсполнители, СрокИсполнения, ОписаниеОповещения) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Исполнители = Новый Массив;
	Для Каждого Строка Из ТаблицаИсполнители Цикл
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(Строка.Исполнитель);
		Исполнители.Добавить(ДанныеИсполнителя);
	КонецЦикла;
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время контроля.'");
	ТекстВопроса = НСтр("ru = 'Поставить на контроль?'");
	ТекстКоманды = НСтр("ru = 'Поставить на контроль'");
	
	Если Не ПроверитьОтсутствиеИсполнителейИПоказатьПредупреждение(
			Исполнители, Неопределено, СрокИсполнения,
			ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет отсутствие для мероприятия.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  Отказ - Булево - Отказ от дальнейшей обработки.
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоМероприятию(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтаФорма.ПроверитьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивИсполнителей = Новый Массив;
	Для Каждого СтрокаУчастник Из ЭтаФорма.Участники Цикл
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			СтрокаУчастник.Исполнитель);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЦикла;
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Председатель) Тогда
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			ЭтаФорма.Объект.Председатель);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Секретарь) Тогда
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			ЭтаФорма.Объект.Секретарь);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЕсли;
	
	Если Не ПроверитьОтсутствиеИсполнителей(МассивИсполнителей,
		ЭтаФорма.Объект.ДатаНачала, ЭтаФорма.Объект.ДатаОкончания, ИнформацияОбОтсутствии) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	ЭтаФорма.ПроверитьОтсутствие = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Показывает предупреждение об отсутствии для мероприятия.
//
// Параметры:
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
Процедура ПоказатьПредупреждениеОбОтсутствииПоМероприятию(
	ИнформацияОбОтсутствии, ОписаниеОповещения, Владелец) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время проведения мероприятия.'");
	ТекстВопроса = НСтр("ru = 'Записать мероприятие?'");
	ТекстКоманды = НСтр("ru = 'Записать'");
	
	ОбработатьИнформациюОбОтсутствии(ИнформацияОбОтсутствии, ОписаниеОповещения,
		ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец);
	
КонецПроцедуры

// Проверяет отсутствие для проектной задачи.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  Отказ - Булево - Отказ от дальнейшей обработки.
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоПроектнойЗадаче(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтаФорма.ПроверитьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивИсполнителей = Новый Массив;
	Для Каждого СтрокаИсполнитель Из ЭтаФорма.Объект.Исполнители Цикл
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			СтрокаИсполнитель.Исполнитель);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЦикла;
	
	Если Не ПроверитьОтсутствиеИсполнителей(МассивИсполнителей,
		ЭтаФорма.ТекущийПланНачало, ЭтаФорма.ТекущийПланОкончание, ИнформацияОбОтсутствии) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	ЭтаФорма.ПроверитьОтсутствие = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Показывает предупреждение об отсутствии для проектной задачи.
//
// Параметры:
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
Процедура ПоказатьПредупреждениеОбОтсутствииПоПроектнойЗадаче(
	ИнформацияОбОтсутствии, ОписаниеОповещения, Владелец) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время проектной задачи.'");
	ТекстВопроса = НСтр("ru = 'Записать проектную задачу?'");
	ТекстКоманды = НСтр("ru = 'Записать'");
	
	ОбработатьИнформациюОбОтсутствии(ИнформацияОбОтсутствии, ОписаниеОповещения,
		ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец);
	
КонецПроцедуры

// Проверяет отсутствие для проекта.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  Отказ - Булево - Отказ от дальнейшей обработки.
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоПроекту(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтаФорма.ПроверитьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Исполнители = Новый Массив;
	Для Каждого СтрокаИсполнитель Из ЭтаФорма.Объект.ПроектнаяКоманда Цикл
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			СтрокаИсполнитель.Исполнитель);
		Исполнители.Добавить(ДанныеИсполнителя);
	КонецЦикла;
	
	Если Не ПроверитьОтсутствиеИсполнителей(Исполнители,
		ЭтаФорма.Объект.ТекущийПланНачало, ЭтаФорма.Объект.ТекущийПланОкончание, ИнформацияОбОтсутствии) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	ЭтаФорма.ПроверитьОтсутствие = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Показывает предупреждение об отсутствии для проекта.
//
// Параметры:
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
Процедура ПоказатьПредупреждениеОбОтсутствииПоПроекту(ИнформацияОбОтсутствии, ОписаниеОповещения, Владелец) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время выполнения проекта.'");
	ТекстВопроса = НСтр("ru = 'Записать проект?'");
	ТекстКоманды = НСтр("ru = 'Записать'");
	
	ОбработатьИнформациюОбОтсутствии(ИнформацияОбОтсутствии, ОписаниеОповещения,
		ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец);
	
КонецПроцедуры

// Проверяет отсутствие для письма.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение которое будет обработано в случае отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоПисьму(ЭтаФорма, ОписаниеОповещения) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые адресаты письма сейчас отсутствуют.'");
	ТекстВопроса = НСтр("ru = 'Отправить письмо?'");
	ТекстКоманды = НСтр("ru = 'Отправить'");
	
	Если Не ПроверитьОтсутствиеАдресатов(ЭтаФорма.Получатели, ОписаниеОповещения,
		ТекстВопроса, ТекстКоманды, ТекстПредупреждения, ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет отсутствие для процесса.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение которое будет обработано в случае отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоПроцессу(ЭтаФорма, ОписаниеОповещения) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Исполнители = ПолучитьИсполнителейБизнесПроцесса(ЭтаФорма.Объект);
	ДатаОкончания = ПолучитьДатуОкончанияБизнесПроцесса(ЭтаФорма.Объект);
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время выполнения процесса.'");
	ТекстВопроса = НСтр("ru = 'Продолжить запуск процесса?'");
	ТекстКоманды = НСтр("ru = 'Продолжить'");
	
	Если ТипЗнч(ЭтаФорма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ДополнительныеДанные = Новый Структура;
		ДополнительныеДанные.Вставить("Объект", ЭтаФорма.Объект);
		ДополнительныеДанные.Вставить("Схема", ЭтаФорма.СхемаКомплексногоПроцесса);
		ДополнительныеДанные.Вставить("ИспользоватьСхемуПроцесса", ЭтаФорма.ИспользоватьСхемуПроцесса);
	Иначе
		ДополнительныеДанные = ЭтаФорма.Объект;
	КонецЕсли;
	
	Если Не ПроверитьОтсутствиеИсполнителейИПоказатьПредупреждение(
			Исполнители, Неопределено, ДатаОкончания,
			ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, ЭтаФорма,
			ДополнительныеДанные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет отсутствие для процесса перед записью.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыЗаписи - Структура - Параметры записи процесса.
//  Отказ - Булево - Отказ от дальнейшей обработки.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоПроцессуПередЗаписью(ЭтаФорма, ПараметрыЗаписи, Отказ) Экспорт
	
	Если ПараметрыЗаписи.Свойство("СтартоватьПриОтсутствии") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписи);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаОбОтсутствии",
		ЭтотОбъект, ПараметрыОбработчикаОповещения);
	
	Если Не ПроверитьОтсутствиеПоПроцессу(ЭтаФорма, ОписаниеОповещения) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет отсутствие для задачи.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение которое будет обработано в случае отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоЗадаче(ЭтаФорма, ОписаниеОповещения) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
		ЭтаФорма.Исполнитель);
	ТекстПредупреждения = НСтр("ru = 'Исполнитель будет отсутствовать во время выполнения задачи.'");
	ТекстВопроса = НСтр("ru = 'Продолжить?'");
	ТекстКоманды = НСтр("ru = 'Продолжить'");
	
	Если Не ПроверитьОтсутствиеИсполнителя(ДанныеИсполнителя, Неопределено, ЭтаФорма.СрокИсполнения,
			ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет отсутствие для задачи рассмотрения.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение которое будет обработано в случае отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоЗадачеРассмотрения(ЭтаФорма, ОписаниеОповещения) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтаФорма.ВариантРассмотрения = ЭтаФорма.ВариантРассмотренияВвестиТекстРезолюции Тогда 
		Возврат Истина;
	КонецЕсли;
	
	МассивИсполнителей = Новый Массив;
	Если ЭтаФорма.ВариантРассмотрения = ЭтаФорма.ВариантРассмотренияНаправитьНаИсполнение Тогда 
		
		Для Каждого Строка Из ЭтаФорма.ИсполнителиИсполнения Цикл
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Строка.Исполнитель,
				Строка.СрокИсполнения);
			МассивИсполнителей.Добавить(ДанныеИсполнителя);
		КонецЦикла;
		
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			ЭтаФорма.ПроверяющийИсполнения);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
		
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			ЭтаФорма.КонтролерИсполнения);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
		
		Если ЗначениеЗаполнено(ЭтаФорма.СрокИсполненияПроцессаИсполнения) Тогда
			ДатаОкончания = ЭтаФорма.СрокИсполненияПроцессаИсполнения;
		Иначе
			ДатаОкончания = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ЭтаФорма.ВариантРассмотрения = ЭтаФорма.ВариантРассмотренияНаправитьНаОзнакомление Тогда 
		
		Для Каждого Строка Из ЭтаФорма.ИсполнителиОзнакомления Цикл
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Строка.Исполнитель);
			МассивИсполнителей.Добавить(ДанныеИсполнителя);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭтаФорма.СрокИсполненияПроцессаОзнакомления) Тогда
			ДатаОкончания = ЭтаФорма.СрокИсполненияПроцессаОзнакомления;
		Иначе
			ДатаОкончания = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время выполнения процесса.'");
	ТекстВопроса = НСтр("ru = 'Продолжить запуск процесса?'");
	ТекстКоманды = НСтр("ru = 'Продолжить'");
	
	Если Не ПроверитьОтсутствиеИсполнителейИПоказатьПредупреждение(
			МассивИсполнителей, Неопределено, ДатаОкончания,
			ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет отсутствие для задачи обработки резолюции.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма.
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение которое будет обработано в случае отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоЗадачеОбработкиРезолюции(ЭтаФорма, ОписаниеОповещения) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ЭтаФорма.ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтаФорма.ВариантОбработкиРезолюции = ЭтаФорма.ВариантОбработкиРезолюцииНеНаправлять Тогда 
		Возврат Истина;
	КонецЕсли;
	
	МассивИсполнителей = Новый Массив;
	Если ЭтаФорма.ВариантОбработкиРезолюции = ЭтаФорма.ВариантОбработкиРезолюцииНаправитьНаИсполнение Тогда 
		
		Для Каждого Строка Из ЭтаФорма.ИсполнителиИсполнения Цикл
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Строка.Исполнитель,
				Строка.СрокИсполнения);
			МассивИсполнителей.Добавить(ДанныеИсполнителя);
		КонецЦикла;
		
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			ЭтаФорма.ПроверяющийИсполнения);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
		
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			ЭтаФорма.КонтролерИсполнения);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
		
		Если ЗначениеЗаполнено(ЭтаФорма.СрокИсполненияПроцессаИсполнения) Тогда
			ДатаОкончания = ЭтаФорма.СрокИсполненияПроцессаИсполнения;
		Иначе
			ДатаОкончания = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ЭтаФорма.ВариантОбработкиРезолюции = ЭтаФорма.ВариантОбработкиРезолюцииНаправитьНаОзнакомление Тогда 
		
		Для Каждого Строка Из ЭтаФорма.ИсполнителиОзнакомления Цикл
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Строка.Исполнитель);
			МассивИсполнителей.Добавить(ДанныеИсполнителя);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭтаФорма.СрокИсполненияПроцессаОзнакомления) Тогда
			ДатаОкончания = ЭтаФорма.СрокИсполненияПроцессаОзнакомления;
		Иначе
			ДатаОкончания = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Некоторые пользователи будут отсутствовать во время выполнения процесса.'");
	ТекстВопроса = НСтр("ru = 'Продолжить запуск процесса?'");
	ТекстКоманды = НСтр("ru = 'Продолжить'");
	
	Если Не ПроверитьОтсутствиеИсполнителейИПоказатьПредупреждение(
			МассивИсполнителей, Неопределено, ДатаОкончания,
			ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Открывает форму создания нового отсутствия.
//
// Параметры:
//  ДатаОтсутствия - Дата, Структура - Дата нового отсутствия.
//  ВидОтсутствия - СправочникСсылка.ВидыОтсутствий - Вид нового отсутствия.
//
Процедура СоздатьОтсутствие(ДатаОтсутствия = Неопределено, ВидОтсутствия = Неопределено) Экспорт
	
	ЗначениеЗаполнения = Новый Структура("ДатаОтсутствия, ВидОтсутствия", ДатаОтсутствия, ВидОтсутствия);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначениеЗаполнения);
	ОткрытьФорму("Документ.Отсутствие.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Проверяет возможность отсутствия сотрудника.
//
// Параметры:
//  ДатаНачала - Дата - Дата, с которой проверяется возможность отсутствия.
//  ДатаОкончания - Дата - Дата, до которой проверяется возможность отсутствия.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, возможность отсутствия которого проверяется.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  ПроверятьОтсутствие - Булево - Флаг, определяющий необходимость проверки отсутствия.
//
// Возвращаемое значение:
//  Булево - Признак того что возможно отсутствие.
//
Функция ПроверитьВозможностьОтсутствия(ДатаНачала, ДатаОкончания, Сотрудник, ОписаниеОповещения, ПроверятьОтсутствие) Экспорт
	
	// Проверка необходимость проверки отсутствия
	Если Не ПроверятьОтсутствие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания)
		Или Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОтсутствияВызовСервера.ПроверитьВозможностьОтсутствия(
		ДатаНачала, ДатаОкончания, Сотрудник) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
	
	ОткрытьФорму("Документ.Отсутствие.Форма.ПредупреждениеОНаличииДел",
		ПараметрыФормы, , , , , ОписаниеОповещения);
	
	Возврат Ложь;
	
КонецФункции

// Проверяет пересечения отсутствий сотрудника.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие, пересечение которого проверяются.
//  ДатаНачала - Дата - Дата, с которой выполняется проверка.
//  ДатаОкончания - Дата - Дата, до которой выполняется проверка.
//  Сотрудник - СправочникСсылка.Пользователи - Сотрудник, для которого выполняется проверка.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//
// Возвращаемое значение:
//  Булево - Признак того, что возможно отсутствие.
//
Функция ПроверитьПересечениеОтсутствий(Отсутствие, ДатаНачала, ДатаОкончания, Сотрудник, БудуРазбиратьЗадачи, ОписаниеОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания)
		Или Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОтсутствияВызовСервера.ПроверитьПересечениеОтсутствий(
		Отсутствие, ДатаНачала, ДатаОкончания, Сотрудник, БудуРазбиратьЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отсутствие", Отсутствие);
	ПараметрыФормы.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
	ПараметрыФормы.Вставить("БудуРазбиратьЗадачи", БудуРазбиратьЗадачи);
	
	ОткрытьФорму("Документ.Отсутствие.Форма.ПредупреждениеОПересеченииОтсутствий",
		ПараметрыФормы, , , , , ОписаниеОповещения);
	
	Возврат Ложь;
	
КонецФункции

// Предлагает отправить письмо и создать правило обработки писем после записи отсутствия.
//
// Параметры:
//  ЭтаФорма								 - ФормаКлиентскогоПриложения			 - Управляемая форма.
//  Ссылка									 - ДокументСсылка.Отсутствие - Отсутствие.
//  ПредложитьОтправитьПисьмо				 - Булево					 - Обработать вопрос отправки письма.
//  ВопросСоздатьПисьмоБольшеНеСпрашивать	 - Булево					 - Не показывать вопрос отправки письма.
//  ВопросСоздатьПисьмоВариантОтвета		 - Булево					 - Вариант ответа на вопрос отправки письма.
//  ПредложитьСоздатьПравилоОбработкиПисем	 - Булево					 - Обработать вопрос создания правила.
//  ВопросСоздатьПравилоБольшеНеСпрашивать	 - Булево					 - Не показывать вопрос создания правила.
//  ВопросСоздатьПравилоВариантОтвета		 - Булево					 - Вариант ответа на вопрос создания правила.
//  ВыполнитьОповещение						 - Булево					 - Необходимо выполнить обработку оповещения.
// 
// Возвращаемое значение:
//  Булево - Признак того что показан вопрос.
//
Функция ОбработкаЗаписиНового(ЭтаФорма, Ссылка, ПредложитьОтправитьПисьмо,
	ВопросСоздатьПисьмоБольшеНеСпрашивать, ВопросСоздатьПисьмоВариантОтвета,
	ПредложитьСоздатьПравилоОбработкиПисем, ВопросСоздатьПравилоБольшеНеСпрашивать,
	ВопросСоздатьПравилоВариантОтвета, ВыполнитьОповещение = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
	ДополнительныеПараметры.Вставить("ПредложитьОтправитьПисьмо", ПредложитьОтправитьПисьмо);
	ДополнительныеПараметры.Вставить("ВопросСоздатьПисьмоБольшеНеСпрашивать", ВопросСоздатьПисьмоБольшеНеСпрашивать);
	ДополнительныеПараметры.Вставить("ВопросСоздатьПисьмоВариантОтвета", ВопросСоздатьПисьмоВариантОтвета);
	ДополнительныеПараметры.Вставить("ПредложитьСоздатьПравилоОбработкиПисем", ПредложитьСоздатьПравилоОбработкиПисем);
	ДополнительныеПараметры.Вставить("ВопросСоздатьПравилоБольшеНеСпрашивать", ВопросСоздатьПравилоБольшеНеСпрашивать);
	ДополнительныеПараметры.Вставить("ВопросСоздатьПравилоВариантОтвета", ВопросСоздатьПравилоВариантОтвета);
	
	Если ПредложитьОтправитьПисьмо Тогда
		ДополнительныеПараметры.ПредложитьОтправитьПисьмо = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработкаЗаписиНовогоЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПредложитьОтправитьПисьмо(ЭтаФорма, Ссылка, ОписаниеОповещения,
			ВопросСоздатьПисьмоБольшеНеСпрашивать, ВопросСоздатьПисьмоВариантОтвета);
		Возврат Истина;
	КонецЕсли;
	
	Если ПредложитьСоздатьПравилоОбработкиПисем Тогда
		ДополнительныеПараметры.ПредложитьСоздатьПравилоОбработкиПисем = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработкаЗаписиНовогоЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПредложитьСоздатьПравилоОбработкиПисем(ЭтаФорма, Ссылка, ОписаниеОповещения,
			ВопросСоздатьПравилоБольшеНеСпрашивать, ВопросСоздатьПравилоВариантОтвета);
		Возврат Истина;
	КонецЕсли;
	
	Если ВыполнитьОповещение Тогда
		Оповестить("ВыполненаОбработкаЗаписиНового", Ссылка);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет отсутствие исполнителя. Выдает предупреждение, если пользователь отсутствует.
//
// Параметры:
//  Исполнитель - Структура - Исполнитель, для которого происходит проверка.
//  ДатаНачала - Дата - Дата, с которой выполняется проверка.
//  ДатаОкончания - Дата - Дата, до которой выполняется проверка.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  ТекстВопроса - Строка - Текст вопроса при отсутствии.
//  ТекстКоманды - Строка - Текст команды продолжения при отсутствии.
//  ТекстПредупреждения - Строка - Текст предупреждения об отсутствии.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
// Возвращаемое значение:
//  Булево - Признак того что исполнитель отсутствует.
//
Функция ПроверитьОтсутствиеИсполнителя(Исполнитель, ДатаНачала, ДатаОкончания,
	ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец)
	
	Исполнители = Новый Массив;
	Исполнители.Добавить(Исполнитель);
	
	Возврат ПроверитьОтсутствиеИсполнителейИПоказатьПредупреждение(
		Исполнители, ДатаНачала, ДатаОкончания,
		ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец);
	
КонецФункции

// Процедура для обработки оповещения после вопроса об отсутствии.
//
Процедура ЗавершениеВопросаОбОтсутствии(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Если пользователь ответил утвердительно, то информируем форму процесса о том,
	// что запуск может быть возобновлен.
	Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриОтсутствии", Истина);
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
	ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
	Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	
КонецПроцедуры

// Предлагает отправить письмо.
//
// Параметры:
//  Ссылка - ДокументСсылка.Отсутствие - Отсутствие.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения, которые будет обработано в случае отсутствия.
//  ВопросСоздатьПисьмоБольшеНеСпрашивать - Булево - Не показывать вопрос отправки письма.
//  ВопросСоздатьПисьмоВариантОтвета - Булево - Вариант ответа на вопрос отправки письма.
//
// Возвращаемое значение:
//  Булево - Признак того что показан вопрос.
//
Процедура ПредложитьОтправитьПисьмо(ЭтаФорма, Ссылка, ОписаниеОповещения,
	ВопросСоздатьПисьмоБольшеНеСпрашивать, ВопросСоздатьПисьмоВариантОтвета)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьОтправитьПисьмоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ВопросСоздатьПисьмоБольшеНеСпрашивать Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВопросСоздатьПисьмоВариантОтвета);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Отсутствие.Форма.ВопросСоздатьПисьмо", ,ЭтаФорма , , , , ОписаниеОповещения);
	Возврат;
	
КонецПроцедуры

// Предлагает отправить письмо.
//
Процедура ПредложитьОтправитьПисьмоЗавершение(СоздатьПисьмо, ДополнительныеПараметры) Экспорт
	
	Если СоздатьПисьмо = Истина Тогда
		Если ПолучитьФункциональнуюОпциюИнтерфейса("ИспользованиеВстроеннойПочты") Тогда
			ПараметрыФормы = Новый Структура("Основание", ДополнительныеПараметры.Ссылка);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.ФормаОбъекта",
				ПараметрыФормы,
				ДополнительныеПараметры.ЭтаФорма,
				Новый УникальныйИдентификатор,,,
				ДополнительныеПараметры.ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		ИначеЕсли ПолучитьФункциональнуюОпциюИнтерфейса("ИспользованиеЛегкойПочты") Тогда
			Объекты = Новый Массив;
			Объекты.Добавить(ДополнительныеПараметры.Ссылка);
			ПараметрыОткрытия = Новый Структура("Объекты", Объекты);
			ОткрытьФорму(
				"Обработка.ПочтовоеСообщение.Форма.Форма",
				ПараметрыОткрытия,
				ДополнительныеПараметры.ЭтаФорма,
				Новый УникальныйИдентификатор,,,
				ДополнительныеПараметры.ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

// Предлагает создать правило обработки писем.
//
// Параметры:
//  Ссылка - ДокументСсылка.Отсутствие - Отсутствие.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения, которые будет обработано в случае отсутствия.
//  ВопросСоздатьПравилоБольшеНеСпрашивать - Булево - Не показывать вопрос создания правила.
//  ВопросСоздатьПравилоВариантОтвета - Булево - Вариант ответа на вопрос создания правила.
//
// Возвращаемое значение:
//  Булево - Признак того что показан вопрос.
//
Процедура ПредложитьСоздатьПравилоОбработкиПисем(ЭтаФорма, Ссылка, ОписаниеОповещения,
	ВопросСоздатьПравилоБольшеНеСпрашивать, ВопросСоздатьПравилоВариантОтвета)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьСоздатьПравилоОбработкиПисемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ВопросСоздатьПравилоБольшеНеСпрашивать Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВопросСоздатьПравилоВариантОтвета);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Отсутствие.Форма.ВопросСоздатьПравилоОбработкиПисем", , ЭтаФорма , , , , ОписаниеОповещения);
	Возврат;
	
КонецПроцедуры

// Предлагает создать правило обработки писем.
//
Процедура ПредложитьСоздатьПравилоОбработкиПисемЗавершение(СоздатьПравило, ДополнительныеПараметры) Экспорт
	
	Если СоздатьПравило = Истина Тогда
		ПараметрыФормы = Новый Структура("Основание", ДополнительныеПараметры.Ссылка);
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.ФормаОбъекта", ПараметрыФормы, ДополнительныеПараметры.ЭтаФорма,
			Новый УникальныйИдентификатор, , , ДополнительныеПараметры.ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

// Предлагает отправить письмо и создать правило обработки писем после записи отсутствия.
//
Процедура ОбработкаЗаписиНовогоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаЗаписиНового(
		ДополнительныеПараметры.ЭтаФорма,
		ДополнительныеПараметры.Ссылка,
		ДополнительныеПараметры.ПредложитьОтправитьПисьмо,
		ДополнительныеПараметры.ВопросСоздатьПисьмоБольшеНеСпрашивать,
		ДополнительныеПараметры.ВопросСоздатьПисьмоВариантОтвета,
		ДополнительныеПараметры.ПредложитьСоздатьПравилоОбработкиПисем,
		ДополнительныеПараметры.ВопросСоздатьПравилоБольшеНеСпрашивать,
		ДополнительныеПараметры.ВопросСоздатьПравилоВариантОтвета,
		Истина);
	
КонецПроцедуры

// Проверяет отсутствие пользователей. Выдает предупреждение, если хотя бы один из пользователей отсутствует.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//  ДатаНачала - Дата - Дата, с которой выполняется проверка.
//  ДатаОкончания - Дата - Дата, до которой выполняется проверка.
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//
// Возвращаемое значение:
//  Булево - Признак того что один из пользователей отсутствует.
//
Функция ПроверитьОтсутствиеПользователей(МассивПользователей,
	ДатаНачала, ДатаОкончания, ИнформацияОбОтсутствии)
	
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка отсутствия
	ИнформацияОбОтсутствии = ОтсутствияВызовСервера.ПроверитьОтсутствиеПользователей(МассивПользователей, ДатаНачала, ДатаОкончания);
	
	Возврат Не ИнформацияОбОтсутствии.ЕстьПредупреждения;
	
КонецФункции

// Проверяет отсутствие адресатов. Выдает предупреждение, если хотя бы один из адресатов отсутствует.
//
// Параметры:
//  Адресаты - ДанныеФормыКоллекция - Коллекция адресатов письма.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  ТекстВопроса - Строка - Текст вопроса при отсутствии.
//  ТекстКоманды - Строка - Текст команды продолжения при отсутствии.
//  ТекстПредупреждения - Строка - Текст предупреждения об отсутствии.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
// Возвращаемое значение:
//  Булево - Признак того что один из адресатов отсутствует.
//
Функция ПроверитьОтсутствиеАдресатов(Адресаты, ОписаниеОповещения,
	ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец)
	
	// Для большого числа адресатов не выполняется проверка отсутствия
	Отбор = Новый Структура("ТипАдреса", НСтр("ru = 'Кому:'"));
	СтрокиКому = Адресаты.НайтиСтроки(Отбор);
	Если СтрокиКому.Количество() > 50 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка отсутствия
	ИнформацияОбОтсутствии = ОтсутствияВызовСервера.ПроверитьОтсутствиеАдресатов(Адресаты);
	
	Если Не ИнформацияОбОтсутствии.ЕстьПредупреждения Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отсутствия", ИнформацияОбОтсутствии.Отсутствия);
	ПараметрыФормы.Вставить("Адресаты", Адресаты);
	
	ОткрытьФорму("Документ.Отсутствие.Форма.ПредупреждениеОбОтсутствииАдресатов",
		ПараметрыФормы, Владелец, , , , ОписаниеОповещения);
	
	Возврат Ложь;
	
КонецФункции

// Проверяет отсутствие исполнителей. Выдает предупреждение, если хотя бы один из исполнителей отсутствует.
//
// Параметры:
//  Исполнители - Массив - Массив исполнителей.
//  ДатаНачала - Дата - Дата, с которой выполняется проверка.
//  ДатаОкончания - Дата - Дата, до которой выполняется проверка.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения для вызова показа вопроса.
//  ДополнительныеДанные - ДанныеФормы - Данные, с учетом которых будет скорректирована проверка.
//  ТекстВопроса - Строка - Текст вопроса при отсутствии.
//  ТекстКоманды - Строка - Текст команды продолжения при отсутствии.
//  ТекстПредупреждения - Строка - Текст предупреждения об отсутствии.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
// Возвращаемое значение:
//  Булево - Признак того что один из исполнителей отсутствует.
//
Функция ПроверитьОтсутствиеИсполнителейИПоказатьПредупреждение(
	Исполнители, ДатаНачала, ДатаОкончания,
	ОписаниеОповещения, ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец,
	ДополнительныеДанные = Неопределено)
	
	Перем ИнформацияОбОтсутствии;
	
	Если ПроверитьОтсутствиеИсполнителей(Исполнители, ДатаНачала, ДатаОкончания,
		ИнформацияОбОтсутствии, ДополнительныеДанные) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработатьИнформациюОбОтсутствии(ИнформацияОбОтсутствии, ОписаниеОповещения,
		ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец);
	
КонецФункции

// Проверяет отсутствие исполнителей.
//
// Параметры:
//  Исполнители - Массив - Массив исполнителей.
//  ДатаНачала - Дата - Дата, с которой выполняется проверка.
//  ДатаОкончания - Дата - Дата, до которой выполняется проверка.
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//  ДополнительныеДанные - ДанныеФормы - Данные, с учетом которых будет скорректирована проверка.
//
// Возвращаемое значение:
//  Булево - Признак того что исполнитель отсутствует.
//
Функция ПроверитьОтсутствиеИсполнителей(Исполнители,
	ДатаНачала = Неопределено, ДатаОкончания = Неопределено,
	ИнформацияОбОтсутствии = Неопределено, ДополнительныеДанные = Неопределено)
	
	Если Исполнители.Количество() = 0 И ДополнительныеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка отсутствия
	ИнформацияОбОтсутствии = ОтсутствияВызовСервера.ПроверитьОтсутствиеИсполнителей(
		Исполнители, ДатаНачала, ДатаОкончания, ДополнительныеДанные);
	
	Возврат Не ИнформацияОбОтсутствии.ЕстьПредупреждения;
	
КонецФункции

// Обработчик информации об отсутствии. Выдает предупреждение если есть предупреждения для отображения.
//
// Параметры:
//  ИнформацияОбОтсутствии - Структура - Информация об отсутствии.
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения, которые будет обработано в случае отсутствия.
//  ТекстВопроса - Строка - Текст вопроса при отсутствии.
//  ТекстКоманды - Строка - Текст команды продолжения при отсутствии.
//  ТекстПредупреждения - Строка - Текст предупреждения об отсутствии.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы предупреждения.
//
// Возвращаемое значение:
//  Булево - Признак того предупреждений нет.
//
Функция ОбработатьИнформациюОбОтсутствии(ИнформацияОбОтсутствии, ОписаниеОповещения,
	ТекстВопроса, ТекстКоманды, ТекстПредупреждения, Владелец) Экспорт
	
	Если Не ИнформацияОбОтсутствии.ЕстьПредупреждения Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отсутствия", ИнформацияОбОтсутствии.Отсутствия);
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыФормы.Вставить("ТекстКоманды", ТекстКоманды);
	ПараметрыФормы.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ОткрытьФорму("Документ.Отсутствие.Форма.ПредупреждениеОбОтсутствии",
		ПараметрыФормы, Владелец, , , , ОписаниеОповещения);
	
	Возврат Ложь;
	
КонецФункции

// Возвращает исполнителей бизнес-процесса, для которых необходимо проверить отсутствие.
//
// Параметры:
//  Объект - ДанныеФормы - Бизнес-процесс.
//
// Возвращаемое значение:
//  Массив - Массив исполнителей.
//
Функция ПолучитьИсполнителейБизнесПроцесса(Объект)
	
	Исполнители = Новый Массив;
	
	// Исполнитель
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Поручение")
		Или ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Объект.Исполнитель);
			Исполнители.Добавить(ДанныеИсполнителя);
		КонецЕсли;
		
	КонецЕсли;
	
	// Исполнители
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Для Каждого СтрокаИсполнитель Из Объект.Исполнители Цикл
			
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				СтрокаИсполнитель.Исполнитель,
				СтрокаИсполнитель.СрокИсполнения);
			Исполнители.Добавить(ДанныеИсполнителя);
			
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Приглашение")
		Или ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		Для Каждого СтрокаИсполнитель Из Объект.Исполнители Цикл
			
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				СтрокаИсполнитель.Исполнитель);
			Исполнители.Добавить(ДанныеИсполнителя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контролер и проверяющий
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Поручение")
		Или ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		Если ЗначениеЗаполнено(Объект.Контролер) Тогда
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Объект.Контролер);
			Исполнители.Добавить(ДанныеИсполнителя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Проверяющий) Тогда
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Объект.Проверяющий);
			Исполнители.Добавить(ДанныеИсполнителя);
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициатор процесса
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		
		Если ЗначениеЗаполнено(Объект.ИнициаторПроцесса) Тогда
			ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
				Объект.ИнициаторПроцесса,
				Объект.СрокИсполнения);
			Исполнители.Добавить(ДанныеИсполнителя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Исполнители;
	
КонецФункции

// Возвращает дату окончания бизнес-процесса.
//
// Параметры:
//  Объект - ДанныеФормы - Бизнес-процесс.
//
// Возвращаемое значение:
//  Дата - Дата окончания бизнес-процесса.
//
Функция ПолучитьДатуОкончанияБизнесПроцесса(Объект)
	
	ДатаОкончания = Неопределено;
	
	Если ТипЗнч(Объект.Ссылка) <> Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		И ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса) Тогда
		
		ДатаОкончания = Объект.СрокИсполненияПроцесса;
		
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

#КонецОбласти