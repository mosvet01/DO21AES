#Область ПрограммныйИнтерфейс

// Возвращает основной вид работ пользователя из настроек учета времени.
//
Функция ПолучитьОсновнойВидРабот() Экспорт
	
	Возврат ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВидРабот");

КонецФункции

// Возвращает основной проект из настроек пользователя.
//
Функция ПолучитьОсновнойПроект() Экспорт 
	
	Возврат РаботаСПроектами.ПолучитьПроектПоУмолчанию();
	
КонецФункции	

// Возвращает способ указания времени пользователя из настроек учета времени.
//
Функция ПолучитьСпособУказанияВремени() Экспорт
	
	СпособУказанияВремени = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "СпособУказанияВремени");
	Если Не ЗначениеЗаполнено(СпособУказанияВремени) Тогда
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала;
	КонецЕсли;
	
	Возврат СпособУказанияВремени;
	
КонецФункции	

// Создает запись в регистре сведений ХронометражРабочегоВремениПользователей
Процедура СоздатьЗаписьХронометража(Объект, ДатаНачала) Экспорт
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Объект);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = ТекущийПользователь;
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.ВремяНачала = ДатаНачала;
	НоваяЗапись.ВремяОкончания = '00010101';
	НаборЗаписей.Записать();
КонецПроцедуры	

// Очистить хронометраж
Процедура ОчиститьХронометраж(Объект) Экспорт
	// Создать набор записей  - пустой - чтобы очистить регистр сведений
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Записать();
КонецПроцедуры	

// добавляет в отчет за дату
Процедура ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	ПараметрыОповещения = Новый Структура;
	
	Пользователь = ?(ПараметрыОтчета.Свойство("Пользователь"),
		ПараметрыОтчета.Пользователь,
		ПользователиКлиентСервер.ТекущийПользователь());
		
	// Создать набор записей  - пустой - чтобы очистить регистр сведений
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Объект.Установить(ПараметрыОтчета.Объект);
	НаборЗаписей.Записать();
	
	// запись в регистр ФактическиеТрудозатраты
	МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаДобавления	= ПараметрыОтчета.ДатаОтчета;
	МенеджерЗаписи.Пользователь 	= Пользователь;
	МенеджерЗаписи.Подразделение	= РаботаСПользователями.ПолучитьПодразделение(Пользователь);
	МенеджерЗаписи.ВидРабот 		= ПараметрыОтчета.ВидРаботы;
	МенеджерЗаписи.ОписаниеРаботы 	= ПараметрыОтчета.ОписаниеРаботы;
	МенеджерЗаписи.Источник 		= ПараметрыОтчета.Объект;
		
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Если ПараметрыОтчета.Свойство("Проект") И ПараметрыОтчета.Свойство("ПроектнаяЗадача") Тогда 
			
			Проект = ПараметрыОтчета.Проект;
			ПроектнаяЗадача = ПараметрыОтчета.ПроектнаяЗадача;
			
		Иначе	
			Объект = ПараметрыОтчета.Объект;
			
			Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
				Проект = Объект.Проект;
				ПроектнаяЗадача = Объект.ПроектнаяЗадача;
				
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты") Тогда
				Проект = Объект;
				ПроектнаяЗадача = Неопределено;
				
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
				Проект = Объект.Владелец;
				ПроектнаяЗадача = Объект;
				
			ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) 
				Или ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект)
				Или ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия") 
				Или ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда 
				
				Проект = Объект.Проект;
				ПроектнаяЗадача = Неопределено;
				
			КонецЕсли;
			
			ПараметрыОтчета.Вставить("Проект", Проект);
			ПараметрыОтчета.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
			
		КонецЕсли;
		
		МенеджерЗаписи.Проект = Проект;
		МенеджерЗаписи.ПроектнаяЗадача = ПроектнаяЗадача;
		
	КонецЕсли;
	
	СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
	
	Если СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
		МенеджерЗаписи.Длительность = ПараметрыОтчета.ДлительностьРаботы;
	Иначе
		МенеджерЗаписи.Начало = ПараметрыОтчета.НачалоРаботы;
		МенеджерЗаписи.Окончание = ПараметрыОтчета.ОкончаниеРаботы;
		МенеджерЗаписи.Длительность = ?(МенеджерЗаписи.Окончание - МенеджерЗаписи.Начало >= 0,
			МенеджерЗаписи.Окончание - МенеджерЗаписи.Начало,
			МенеджерЗаписи.Окончание - МенеджерЗаписи.Начало + 86400);
	КонецЕсли;
	
	МенеджерЗаписи.НомерДобавления = МаксимальныйНомерДобавления(
		МенеджерЗаписи.Подразделение, МенеджерЗаписи.Пользователь, МенеджерЗаписи.ДатаДобавления);
	МенеджерЗаписи.Записать();
	
	ЗначенияКлюча = Новый Структура("Подразделение, Пользователь, Источник, Проект, ПроектнаяЗадача, ВидРабот, УдалитьОписаниеРаботы, ДатаДобавления, НомерДобавления, Начало, Окончание");
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, МенеджерЗаписи);
	КлючЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьКлючЗаписи(ЗначенияКлюча);
	
	ПараметрыОповещения.Вставить("КлючЗаписи", КлючЗаписи);
	ПараметрыОповещения.Вставить("Представление", МенеджерЗаписи.ОписаниеРаботы);
	
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПараметрыОповещения.Вставить("Изменение_ФактическиеТрудозатратыЗадачи", ПараметрыОтчета.Объект);
	КонецЕсли;	
		
	Если ПараметрыОтчета.Свойство("ПроектнаяЗадача") И ЗначениеЗаполнено(ПараметрыОтчета.ПроектнаяЗадача) Тогда 
		ПараметрыОповещения.Вставить("Изменение_ФактическиеТрудозатратыПроектнойЗадачи", ПараметрыОтчета.ПроектнаяЗадача);
	КонецЕсли;
	
КонецПроцедуры	

// находит первую запись в регистре ХронометражРабочегоВремениПользователей с пустой датой окончания (00010101)
Процедура НайтиДатыХронометража(Объект, ДатаНачалаХронометража, ДатаКонцаХронометража) Экспорт
	
	Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Хронометраж.ВремяНачала КАК ВремяНачала,
	|	Хронометраж.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	РегистрСведений.ХронометражРабочегоВремениПользователей КАК Хронометраж
	|ГДЕ
	|	Хронометраж.Пользователь = &ТекущийПользователь
	|	И Хронометраж.Объект = &Объект";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Исполнитель);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДатаНачалаХронометража = Выборка.ВремяНачала;
		ДатаКонцаХронометража = Выборка.ВремяОкончания;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить параметры - ДатаНачалаХронометража и ВидРаботы
Процедура ПолучитьПараметрыХронометража(Объект, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража, 
	ВидыРабот, СпособУказанияВремени) Экспорт
	
	ДатаНачалаХронометража = '00010101000000';
	НайтиДатыХронометража(Объект, ДатаНачалаХронометража, ДатаКонцаХронометража);
	Если ДатаНачалаХронометража <> '00010101000000' И ДатаКонцаХронометража = '00010101000000' Тогда
		ВключенХронометраж = Истина;
	Иначе
		ВключенХронометраж = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		ВидыРабот = ПолучитьВидыРабот(Объект.ТочкаМаршрута);
	Иначе	
		ВидыРабот = Новый СписокЗначений;
	КонецЕсли;	
	
	СпособУказанияВремени = ПолучитьСпособУказанияВремениИзОтчета(Объект);
КонецПроцедуры	

// В форме инициализирует параметры в ПриСозданииНаСервере
Процедура ПроинициализироватьПараметрыУчетаВремени(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ОпцияВестиУчетТрудозатрат,
	Ссылка,
	ВидыРабот,
	СпособУказанияВремени,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж,
	ЭлементДобавитьВОтчет) Экспорт
	
	ДатаНачалаХронометража = '00010101';
	ДатаКонцаХронометража = '00010101';
	ВключенХронометраж = Ложь;
	
	ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ФактическиеТрудозатраты);
	Если ОпцияВестиУчетТрудозатрат Тогда
		ПолучитьПараметрыХронометража(Ссылка, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража, ВидыРабот, СпособУказанияВремени);
	КонецЕсли;

	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"Выполнена, Исполнитель, РольИсполнителя");
		
		Если РеквизитыСсылки.Выполнена Тогда
			ЭлементПереключитьХронометраж.Видимость = Ложь;
		КонецЕсли;
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ИсполнителиЗадач = БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь);
		
		Если ЗначениеЗаполнено(РеквизитыСсылки.Исполнитель) Тогда
			Если ИсполнителиЗадач.Найти(РеквизитыСсылки.Исполнитель) = Неопределено Тогда
				ЭлементПереключитьХронометраж.Доступность = Ложь;
				ЭлементДобавитьВОтчет.Доступность = Ложь;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(РеквизитыСсылки.РольИсполнителя) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИсполнителиЗадач.Исполнитель
				|ИЗ
				|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				|ГДЕ
				|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
				|	И ИсполнителиЗадач.Исполнитель В(&Исполнители)";
			Запрос.УстановитьПараметр("РольИсполнителя", РеквизитыСсылки.РольИсполнителя);
			Запрос.УстановитьПараметр("Исполнители", ИсполнителиЗадач);
			
			ПользователюНЕДоступнаРольЗадачи = Запрос.Выполнить().Пустой();
			
			Если ПользователюНЕДоступнаРольЗадачи Тогда
				ЭлементПереключитьХронометраж.Доступность = Ложь;
				ЭлементДобавитьВОтчет.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			ЭлементПереключитьХронометраж.Доступность = Ложь;
			ЭлементДобавитьВОтчет.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В форме инициализирует параметры в ПриСозданииНаСервере
Процедура ПроинициализироватьПараметрыИНачатьХронометраж(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ОпцияВестиУчетТрудозатрат,
	Ссылка,
	СпособУказанияВремени,
	ВидыРабот) Экспорт
	
	ДатаНачалаХронометража = '00010101000000';
	ДатаКонцаХронометража = '00010101000000';
	ВключенХронометраж = Ложь;
	ВидыРабот = Новый СписокЗначений;
	
	ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ФактическиеТрудозатраты);
	Если ОпцияВестиУчетТрудозатрат Тогда
		
		СпособУказанияВремени = ПолучитьСпособУказанияВремениИзОтчета(Ссылка);
		ВключенХронометраж = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Устанавливает свойства - подсказка и пометка элементам формы
Процедура УстановитьСвойстваЭлементов(
	ВключенХронометраж, 
	КомандаПереключитьХронометраж, 
	ЭлементПереключитьХронометраж) Экспорт
	
	Если ВключенХронометраж Тогда // хронометраж включен
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Закончить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Истина;
	Иначе
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Включить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// переключает хронометраж, когда не нужно показывать диалог
Процедура ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект,
	ВидыРабот,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт

	ПереключитьХронометраж(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект,
		ВидыРабот);
	
	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

// переключает хронометраж, когда не нужно показывать диалог
Процедура ПереключитьХронометраж(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект,
	ВидыРабот = Неопределено) Экспорт

	Если Не ВключенХронометраж Тогда // создаем новую запись
		
		ДатаНачалаХронометража = ТекущаяДатаСеанса();
		ДатаКонцаХронометража = '00010101';
		СоздатьЗаписьХронометража(Объект, ДатаНачалаХронометража);
		ВключенХронометраж = Истина;
		
	Иначе
		
		ВидРаботы = Неопределено;
        
		Если ВидыРабот <> Неопределено И ВидыРабот.Количество() <> 0 Тогда
			ВидРаботы = ВидыРабот[0].Значение;
		КонецЕсли;
		
		КонецХронометража = ТекущаяДатаСеанса();
		ДлительностьРаботы = КонецХронометража - ДатаНачалаХронометража;
		
		Если ДлительностьРаботы >= 60 Тогда // больше 1 минуты
			ПараметрыОтчета = Новый Структура();
			ПараметрыОтчета.Вставить("ДатаОтчета", ТекущаяДатаСеанса());
			ПараметрыОтчета.Вставить("ВидРаботы", ВидРаботы);
			ПараметрыОтчета.Вставить("ОписаниеРаботы", Строка(Объект));
			ПараметрыОтчета.Вставить("ДлительностьРаботы", ДлительностьРаботы);
			ПараметрыОтчета.Вставить("НачалоРаботы", ДатаНачалаХронометража);
			ПараметрыОтчета.Вставить("ОкончаниеРаботы", КонецХронометража);
			ПараметрыОтчета.Вставить("Объект", Объект);
			
			Источник = Объект;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
				Проект = Неопределено;
				ПроектнаяЗадача = Неопределено;
				
				Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
					РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
						"Проект, ПроектнаяЗадача");
					Проект = РеквизитыЗадачи.Проект;
					ПроектнаяЗадача = РеквизитыЗадачи.ПроектнаяЗадача;
				ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
					Проект = Источник;
					ПроектнаяЗадача = Неопределено;
				ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
					Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Владелец");
					ПроектнаяЗадача = Источник;
				ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Контроль") Тогда
					Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Предмет");
					
					Если ЗначениеЗаполнено(Предмет) Тогда  
						Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда
							Проект = Предмет;
							ПроектнаяЗадача = Неопределено;
						ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
							Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец");
							ПроектнаяЗадача = Предмет;
						ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
							Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Проект");
							ПроектнаяЗадача = Предмет.ПроектнаяЗадача;
						ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) 
							Или ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет)
							Или ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") 
							Или ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда 
							Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Проект");
							ПроектнаяЗадача = Неопределено;
						КонецЕсли;	
		  			КонецЕсли;	
				ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Источник) 
					Или ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Источник)
					Или ТипЗнч(Источник) = Тип("СправочникСсылка.Мероприятия")
					Или ТипЗнч(Источник) = Тип("СправочникСсылка.Файлы") Тогда 
					
					Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Проект");
					ПроектнаяЗадача = Неопределено;
				КонецЕсли; 
				
				ПараметрыОтчета.Вставить("Проект", Проект);
				ПараметрыОтчета.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
			КонецЕсли;
			
			
			ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
		Иначе
			ОчиститьХронометраж(Объект);
		КонецЕсли;
		
		ДатаНачалаХронометража = '00010101';
		ДатаКонцаХронометража = '00010101';
		ВключенХронометраж = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

// Отключает хронометраж и делает обновление элементов формы при выключении хронометража
Процедура ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Задача,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт
	
	ОчиститьХронометраж(Задача);
	
	ДатаНачалаХронометража = '00010101000000';
	ДатаКонцаХронометража = '00010101000000';
	ВключенХронометраж = Ложь;
	
	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

// Отключает хронометраж
Процедура ОтключитьХронометражСерверБезЭлементов(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Задача) Экспорт
	
	ОчиститьХронометраж(Задача);
	
	ДатаНачалаХронометража = '00010101000000';
	ДатаКонцаХронометража = '00010101000000';
	ВключенХронометраж = Ложь;
	
КонецПроцедуры

// Инициализирует персональные настройки учета времени - для использования на клиенте
Функция ПолучитьПерсональныеНастройкиУчетаВремениСервер() Экспорт
	
	Настройки = Новый Структура;
	ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени",
		"ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи");
		
	Если Не ЗначениеЗаполнено(ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи) Тогда
		ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиУчетаВремени", 
			"ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи",
			ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи);
	КонецЕсли;
	
	Настройки.Вставить("ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи",
		ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи);
	
	Возврат Настройки; // параметры доступны только для чтения
	
КонецФункции

// Выполняет обновление элементов формы при выключении хронометража
Процедура ДобавитьВОтчетИОбновитьФорму(
	ПараметрыОтчета, 
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт
	
	ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
	
	ДатаНачалаХронометража = '00010101';
	ДатаКонцаХронометража = '00010101';
	ВключенХронометраж = Ложь;
	
	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

Функция НеобходимоПоказатьДиалогВводаТрудозатрат(ЗадачаСсылка) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах")
		И РаботаСБизнесПроцессамиВызовСервера.ПолучитьФактическиеТрудозатратыПоЗадаче(ЗадачаСсылка) = 0;
	
КонецФункции

Функция ЕстьЕжедневныеОтчетыНаДату(Пользователь, НаДату) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕжедневныйОтчет.Ссылка
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|ГДЕ
	|	ЕжедневныйОтчет.Пользователь = &Пользователь
	|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И ЕжедневныйОтчет.Проведен";
	
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция МаксимальныйНомерДобавления(Подразделение, пользователь, ДатаДобавления) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФактическиеТрудозатраты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.ДатаДобавления.Установить(ДатаДобавления);
	НаборЗаписей.Прочитать();
	
	МаксНомерДобавления = 0;
	Если НаборЗаписей.Количество() > 0 Тогда 
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		ТаблицаНабора.Сортировать("НомерДобавления Убыв");
		МаксНомерДобавления = ТаблицаНабора[0].НомерДобавления + 1;
	КонецЕсли;	
	
	Возврат МаксНомерДобавления;
	
КонецФункции	

Функция ПолучитьДанныеАвтоподбораРабот(Текст, Пользователь) Экспорт 
	
	ПериодВыборки = Новый СтандартныйПериод;
	
	ВариантПериодаВыборки = ХранилищеОбщихНастроек.Загрузить("НастройкиПодбораРабот", "ВариантПериодаВыборки");
	Если ЗначениеЗаполнено(ВариантПериодаВыборки) Тогда 
		ПериодВыборки.Вариант = ВариантПериодаВыборки;
	Иначе	
		ПериодВыборки.Вариант = ВариантСтандартногоПериода.Месяц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеТрудозатраты.ВидРабот КАК ВидРабот,
	|	ВЫРАЗИТЬ(ФактическиеТрудозатраты.ОписаниеРаботы КАК СТРОКА(500)) КАК Работа,
	|	ФактическиеТрудозатраты.Проект КАК Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача КАК ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.Источник КАК Источник
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	ФактическиеТрудозатраты.ДатаДобавления МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ФактическиеТрудозатраты.Пользователь = &Пользователь
	|	И ФактическиеТрудозатраты.ОписаниеРаботы ПОДОБНО &Текст
	|	И НЕ ФактическиеТрудозатраты.Удалена
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ВЫРАЗИТЬ(ФактическиеТрудозатраты.ОписаниеРаботы КАК СТРОКА(500))";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодВыборки.ДатаНачала);
	
	Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодВыборки.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", '39990101');
	КонецЕсли;	
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Параметр = Новый Структура;
		Параметр.Вставить("Работа",	  Выборка.Работа);
		Параметр.Вставить("ВидРабот", Выборка.ВидРабот);
		Параметр.Вставить("Проект",   Выборка.Проект);
		Параметр.Вставить("ПроектнаяЗадача", Выборка.ПроектнаяЗадача);
		Параметр.Вставить("Источник", Выборка.Источник);
		
		ДанныеВыбора.Добавить(Параметр, Параметр.Работа);
		
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает таблицу, содежащую фонд рабочего времени указанных пользователей за период.
//
Функция ФондРабочегоВремени(Пользователи, ДатаНачала, Знач ДатаОкончания) Экспорт
	
	Если ТипЗнч(Пользователи) = Тип("Массив") Тогда
		ПользователиМассивом = Пользователи;
	ИначеЕсли ТипЗнч(Пользователи) = Тип("СправочникСсылка.Пользователи") Тогда
		ПользователиМассивом = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователи);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип параметра (%1)'"), ТипЗнч(Пользователи));
	КонецЕсли;
	
	ДатаОкончания = КонецДня(ДатаОкончания);
	
	Фонд = Новый ТаблицаЗначений;
	Фонд.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Фонд.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Фонд.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Фонд.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
		ЗаполнитьФондРабочимВременемСУчетомГрафиков(Фонд, ПользователиМассивом, ДатаНачала, ДатаОкончания);
	Иначе
		ЗаполнитьФондРабочимВременемБезУчетаГрафиков(Фонд, ПользователиМассивом, ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		Возврат Фонд;
	КонецЕсли;
	
	ОтсутствияПользователейЗаПериодНеВФонде = 
		ОтсутствияПользователейЗаПериодНеВФонде(ПользователиМассивом, ДатаНачала, ДатаОкончания);
		
	ИсключитьОтсутствияИзФонда(Фонд, ОтсутствияПользователейЗаПериодНеВФонде);
	
	Возврат Фонд;
	
КонецФункции

// Вызывается из РаботаСУведомлениями.ДоступныеУведомления() и дополняет
// доступные уведомления уведомлениями, относящимися к заявкам на оплату.
//
Процедура ПриПолученииДоступныхУведомлений(ДоступныеУведомления) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЕженедельныеОтчеты") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.СводкаОРабочемВремени;
	СтрокаУведомления.Представление = НСтр("ru = 'Сводка о рабочем времени'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
КонецПроцедуры

// Обработчик одноименного регламентного задания. Рассылает сводки о рабочем времени.
//
Процедура РассылкаСводокОРабочемВремени() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.РассылкаСводокОРабочемВремени, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЕженедельныеОтчеты") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаАнализа = ТекущаяДатаСеанса();
	
	// Соберем периоды сводок, формируемых сегодня.
	ПериодыСводок = Новый Массив;
	Если ЭтоСуббота(ДатаАнализа) Тогда
		Период = НовыйПериодСводки();
		Период.ДатаНачала = УчетВремениКлиентСервер.ДатаНачалаОтчетаЗаНеделю(НачалоДня(ДатаАнализа) - 1);
		Период.ДатаОкончания = НачалоДня(ДатаАнализа) - 1;
		Период.Представление = СтрШаблон(НСтр("ru = 'Неделя с %1 по %2'"),
			Формат(Период.ДатаНачала, "ДФ=dd.MM"),
			Формат(Период.ДатаОкончания, "ДФ=dd.MM"));
		Период.Предыдущий.ДатаНачала = Период.ДатаНачала - 7 * 86400;
		Период.Предыдущий.ДатаОкончания = Период.ДатаОкончания - 7 * 86400;
		Период.Предыдущий.Представление = НСтр("ru = 'предыдущая неделя'");
		ПериодыСводок.Добавить(Период);
	КонецЕсли;
	Если ЭтоПерваяСубботаМесяца(ДатаАнализа) Тогда
		Период = НовыйПериодСводки();
		Период.ДатаНачала = НачалоМесяца(НачалоМесяца(ДатаАнализа) - 1);
		Период.ДатаОкончания = НачалоМесяца(ДатаАнализа) - 1;
		Период.Представление = Формат(Период.ДатаНачала, "ДФ=MMMM");
		Период.Предыдущий.ДатаНачала = НачалоМесяца(Период.ДатаНачала - 1);
		Период.Предыдущий.ДатаОкончания = Период.ДатаНачала - 1;
		Период.Предыдущий.Представление = Формат(Период.Предыдущий.ДатаНачала, "ДФ=MMMM");
		ПериодыСводок.Добавить(Период);
	КонецЕсли;
	Если ПериодыСводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Подписчики = ПодписчикиНаСводкиОРабочемВремени();
	Для Каждого Подписчик Из Подписчики Цикл
		Для Каждого ПериодСводки Из ПериодыСводок Цикл
			СформироватьСводку(Подписчик.Ключ,
				ПериодСводки,
				Подписчик.Значение.ПолучателиУведомлений,
				Подписчик.Значение.ПредметыАнализа);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу отсутствий пользователей не в фонде за указанный период.
//
Функция ОтсутствияПользователейЗаПериодНеВФонде(Пользователи, ДатаНачала, ДатаОкончания)
	
	Настройки = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	Настройки.УчитыватьТолькоВидыОтсутствийНеВФонде = Истина;
	
	Возврат Отсутствия.ПолучитьТаблицуОтсутствий(ДатаНачала, 
		ДатаОкончания,
		Пользователи,
		Настройки);
	
КонецФункции

// Возвращает отсутствя пользователя за указанный указанный период.
//
Функция ОтсутствияПользователяЗаПериод(Отсутствия, Пользователь, ДатаНачала, ДатаОкончания)
	ОтсутствияПользователяЗаПериод = Новый Массив;
	
	ОтсутствияПользователя = Отсутствия.НайтиСтроки(Новый Структура("Сотрудник", Пользователь));
	Для Каждого ОтсутствиеПользователя Из ОтсутствияПользователя Цикл
		Если ОтсутствиеПользователя.ДатаОкончания > ДатаНачала
			И ОтсутствиеПользователя.ДатаНачала < ДатаОкончания Тогда
			ОтсутствияПользователяЗаПериод.Добавить(ОтсутствиеПользователя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтсутствияПользователяЗаПериод;
КонецФункции

// Исключает из фонда отсутствия согласно переданной таблице.
//
Процедура ИсключитьОтсутствияИзФонда(Фонд, Отсутствия)
	
	НСтроки = 0;
	Пока НСтроки < Фонд.Количество() Цикл
		Строка = Фонд[НСтроки];
		ОтсутствияПользователяЗаПериод = ОтсутствияПользователяЗаПериод(Отсутствия,
			Строка.Пользователь,
			Строка.ДатаНачала,
			Строка.ДатаОкончания);
		Для Каждого Отсутствие Из ОтсутствияПользователяЗаПериод Цикл
			Если Строка.ДатаНачала < Отсутствие.ДатаНачала
				И Строка.ДатаОкончания > Отсутствие.ДатаОкончания Тогда // делим интервал
				НоваяСтрока = Фонд.Вставить(НСтроки + 1);
				НоваяСтрока.Пользователь = Строка.Пользователь;
				НоваяСтрока.ДатаОкончания = Строка.ДатаОкончания;
				НоваяСтрока.ДатаНачала = Отсутствие.ДатаОкончания + 1;
				НоваяСтрока.Длительность = НоваяСтрока.ДатаОкончания - НоваяСтрока.ДатаНачала;
				Строка.ДатаОкончания = Отсутствие.ДатаНачала - 1;
				Строка.Длительность = Строка.ДатаОкончания - Строка.ДатаНачала;
			Иначе
				Если Отсутствие.ДатаНачала <= Строка.ДатаНачала Тогда
					Строка.ДатаНачала = Макс(Отсутствие.ДатаОкончания + 1, Строка.ДатаНачала);
				КонецЕсли;
				Если Отсутствие.ДатаОкончания >= Строка.ДатаОкончания Тогда
					Строка.ДатаОкончания = Мин(Отсутствие.ДатаНачала, Строка.ДатаОкончания);
				КонецЕсли;
				Строка.Длительность = Строка.ДатаОкончания - Строка.ДатаНачала;
				Если Строка.Длительность <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Строка.Длительность <= 0 Тогда
			Фонд.Удалить(НСтроки);
		Иначе
			НСтроки = НСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет фонд рабочего времени с учетом графиков пользователей.
//
Процедура ЗаполнитьФондРабочимВременемСУчетомГрафиков(Фонд, Пользователи, ДатаНачала, ДатаОкончания) Экспорт
	
	ИнтервалыПоГрафикам = Новый Соответствие;
	
	Для Каждого Пользователь Из Пользователи Цикл
		ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
		ИнтервалыРабочегоВремени = ИнтервалыПоГрафикам[ГрафикРаботы];
		Если ИнтервалыРабочегоВремени = Неопределено Тогда
			ИнтервалыРабочегоВремени = ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(ГрафикРаботы,
				ДатаНачала,
				ДатаОкончания);
			ИнтервалыПоГрафикам[ГрафикРаботы] = ИнтервалыРабочегоВремени;
		КонецЕсли;
		Для Каждого ИнтервалРабочегоВремени Из ИнтервалыРабочегоВремени Цикл
			Строка = Фонд.Добавить();
			Строка.Пользователь = Пользователь;
			Строка.ДатаНачала = ИнтервалРабочегоВремени.ДатаНачала;
			Строка.ДатаОкончания = ИнтервалРабочегоВремени.ДатаОкончания;
			Строка.Длительность = ИнтервалРабочегоВремени.Длительность;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет фонд рабочего времени без учета графиков пользователей.
//
Процедура ЗаполнитьФондРабочимВременемБезУчетаГрафиков(Фонд, Пользователи, ДатаНачала, ДатаОкончания) Экспорт
	
	День = ДатаНачала;
	Пока День < ДатаОкончания Цикл
		Если ДеньНедели(День) < 6 Тогда
			Для Каждого Пользователь Из Пользователи Цикл
				Строка = Фонд.Добавить(); // 9-13
				Строка.Пользователь = Пользователь;
				Строка.ДатаНачала = Дата(Год(День), Месяц(День), День(День), 9, 0, 0);
				Строка.ДатаОкончания = Дата(Год(День), Месяц(День), День(День), 13, 0, 0);
				Строка.Длительность = Строка.ДатаОкончания - Строка.ДатаНачала;
				Строка = Фонд.Добавить(); // 14-18
				Строка.Пользователь = Пользователь;
				Строка.ДатаНачала = Дата(Год(День), Месяц(День), День(День), 14, 0, 0);
				Строка.ДатаОкончания = Дата(Год(День), Месяц(День), День(День), 18, 0, 0);
				Строка.Длительность = Строка.ДатаОкончания - Строка.ДатаНачала;
			КонецЦикла;
		КонецЕсли;
		День = День + 86400;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список видов работ для указанной точки маршрута.
//
Функция ПолучитьВидыРабот(ТочкаМаршрута)
	
	ВидыРабот = Новый СписокЗначений;
	
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	ЗапросВРегистр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	СведенияОТочкахМаршрута.ВидРаботы КАК ВидРаботы
	                       |ИЗ
	                       |	РегистрСведений.СведенияОТочкахМаршрута КАК СведенияОТочкахМаршрута
	                       |ГДЕ
	                       |	СведенияОТочкахМаршрута.ТочкаМаршрута = &ТочкаМаршрута";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыРабот.Добавить(Выборка.ВидРаботы);
	КонецЦикла;
	
	Возврат ВидыРабот;
КонецФункции	

// Находит еж отчет и берет из него СпособУказанияВремени
Функция ПолучитьСпособУказанияВремениИзОтчета(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕжедневныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|ГДЕ
	|	ЕжедневныйОтчет.Пользователь = &Пользователь
	|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)";
	
	ДатаОтчета = ТекущаяДатаСеанса();
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Выполнена, ДатаИсполнения");
		
		Если РеквизитыОбъекта.Выполнена  Тогда
			ДатаОтчета = РеквизитыОбъекта.ДатаИсполнения;
		КонецЕсли;
	КонецЕсли;	
	
	Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("Дата", ДатаОтчета);
	Запрос.УстановитьПараметр("Пользователь", Исполнитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕжедневныйОтчет = Документы.ЕжедневныйОтчет.ПустаяСсылка();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка.СпособУказанияВремени;
	Иначе
		Возврат ПолучитьСпособУказанияВремени();
	КонецЕсли;
	
КонецФункции	

// Формирует сводку для указанного подписчика и помещает ее в очередь уведомлений.
//
Процедура СформироватьСводку(Подписчик, Период, ПолучателиУведомлений, ПредметыАнализа)
	
	Если ПредметыАнализа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСводки = НовыеДанныеСводкиОРабочемВремени();
	
	РезультатыАнализа = Новый ТаблицаЗначений;
	РезультатыАнализа.Колонки.Добавить("ПредметАнализа");
	РезультатыАнализа.Колонки.Добавить("РабочихЧасов");
	РезультатыАнализа.Колонки.Добавить("Фонд");
	РезультатыАнализа.Колонки.Добавить("ПроцентФонда");
	
	ПредыдущийРабочихЧасов = 0;
	ПредыдущийФонд = 0;
	Для Каждого ПредметАнализа Из ПредметыАнализа Цикл
		
		РезультатАнализа = РезультатыАнализа.Добавить();
		РезультатАнализа.ПредметАнализа = ПредметАнализа.Ссылка;
		
		РезультатАнализа.РабочихЧасов = РабочиеЧасыПользователейЗаПериод(
			ПредметАнализа.Пользователи, Период.ДатаНачала, Период.ДатаОкончания);
		ФондТаблицей = ФондРабочегоВремени(
			ПредметАнализа.Пользователи, Период.ДатаНачала, Период.ДатаОкончания);
		РезультатАнализа.Фонд = ФондТаблицей.Итог("Длительность") / 3600;
		РезультатАнализа.ПроцентФонда = ?(РезультатАнализа.Фонд = 0, 0,
			100 * РезультатАнализа.РабочихЧасов / РезультатАнализа.Фонд);
			
		ПредыдущийРабочихЧасов = ПредыдущийРабочихЧасов + РабочиеЧасыПользователейЗаПериод(
			ПредметАнализа.Пользователи, Период.Предыдущий.ДатаНачала, Период.Предыдущий.ДатаОкончания);
		ПредыдущийФондТаблицей = ФондРабочегоВремени(
			ПредметАнализа.Пользователи, Период.Предыдущий.ДатаНачала, Период.Предыдущий.ДатаОкончания);
		ПредыдущийФонд = ПредыдущийФонд + ПредыдущийФондТаблицей.Итог("Длительность");
			
	КонецЦикла;
	ДанныеСводки.РабочихЧасов = РезультатыАнализа.Итог("РабочихЧасов");
	ДанныеСводки.ПроцентФонда = ?(РезультатыАнализа.Итог("Фонд") = 0, 0,
			100 * ДанныеСводки.РабочихЧасов / РезультатыАнализа.Итог("Фонд"));
	ДанныеСводки.ПредыдущийПроцентФонда = ?(ПредыдущийФонд = 0, 0,
			100 * ПредыдущийРабочихЧасов / ПредыдущийФонд * 3600);
			
	// Определим подзаголовок.
	ТолькоПодразделения = Истина; СводкаСамогоПодписчика = Истина;
	Для Каждого ПредметАнализа Из ПредметыАнализа Цикл
		Если ПредметАнализа.Ссылка <> Подписчик Тогда
			СводкаСамогоПодписчика = Ложь;
		КонецЕсли;
		Если ТипЗнч(ПредметАнализа.Ссылка) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТолькоПодразделения = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ТолькоПодразделения Тогда
		ДанныеСводки.Подзаголовок = НСтр("ru = 'Подчиненные подразделения'");
	ИначеЕсли СводкаСамогоПодписчика Тогда
		ДанныеСводки.Подзаголовок = "";
	Иначе
		ДанныеСводки.Подзаголовок = НСтр("ru = 'Подчиненные сотрудники'");
	КонецЕсли;
	
	ДанныеСводки.Период = Период.Представление;
	ДанныеСводки.ПредыдущийПериод = Период.Предыдущий.Представление;
	
	Если ПредметыАнализа.Количество() > 1 Тогда
		РезультатыАнализа.Сортировать("ПроцентФонда, РабочихЧасов");
		ДанныеСводки.Лидер = РезультатыАнализа[РезультатыАнализа.Количество() - 1];
		ДанныеСводки.Аутсайдер = РезультатыАнализа[0];
	КонецЕсли;
	
	ТекстСводки = ТекстСводкиОРабочемВремени(ДанныеСводки);
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомлений Цикл
		
		Если Не РаботаСУведомлениями.РассылатьУведомленияПользователюИзДанногоУзла(ПолучательУведомления) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			ПолучательУведомления,
			Перечисления.СобытияУведомлений.СводкаОРабочемВремени,
			ПолучательУведомления,
			ПолучательУведомления,
			ТекстСводки);
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает ссылку отчета о рабочем времени для уведомления-сводки как HTML-тег <a href>.
//
Функция СсылкаОтчетаДляУведомления()
	
	ВнутренняяСсылкаОтчета = "e1cib/app/Отчет.ЗатратыВремени";
	ПредставлениеСсылкиОтчета = НСтр("ru = 'Отчет'");
	
	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Если Прав(АдресПубликацииНаВебСервере, 2) = "/#" Или  Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
		Иначе
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
		КонецЕсли;
		ПолнаяСсылкаОтчета = АдресПубликацииНаВебСервере + ВнутренняяСсылкаОтчета;
	Иначе
		ПолнаяСсылкаОтчета = ВнутренняяСсылкаОтчета;
	КонецЕсли;
	
	СсылкаОтчетаДляУведомления = СтрШаблон(
		"<a href=%1>%2</a>",
		КодироватьСтроку(ПолнаяСсылкаОтчета, СпособКодированияСтроки.URLВКодировкеURL),
		ПредставлениеСсылкиОтчета);
		
	Возврат СсылкаОтчетаДляУведомления;
	
КонецФункции

// Возвращает сумму рабочих часов указанных пользователей за период.
//
Функция РабочиеЧасыПользователейЗаПериод(Пользователи, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРабот.Ссылка КАК ВидРабот
		|ПОМЕСТИТЬ ВидыРабот
		|ИЗ Справочник.ВидыРабот КАК ВидыРабот
		|ГДЕ ВидыРабот.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.Рабочее)
		|;
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ФактическиеТрудозатраты.Длительность), 0) КАК Длительность
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыРабот
		|ПО ФактическиеТрудозатраты.ВидРабот = ВидыРабот.ВидРабот
		|ГДЕ
		|	Пользователь В (&Пользователи)
		|	И ДатаДобавления МЕЖДУ &ДатаНачала И &ДатаОкончания
		|");
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Длительность / 3600;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает пустую структуру, описывающую период сводки.
//
Функция НовыйПериодСводки()
	Возврат Новый Структура("Представление, ДатаНачала, ДатаОкончания, Предыдущий",
		Неопределено,
		Неопределено,
		Неопределено,
		Новый Структура("Представление, ДатаНачала, ДатаОкончания"));
КонецФункции

// Возвращает пустую структуру-описание предмета анализа.
//
Функция НовыйПредметАнализаПодписчикаСводки()
	Возврат Новый Структура("Ссылка, Пользователи",
		Неопределено, Новый Массив);
КонецФункции

// Возвращает пустую структуру данных сводки о рабочем времени.
//
Функция НовыеДанныеСводкиОРабочемВремени()
	
	Данные = Новый Структура;
	
	Данные.Вставить("Подзаголовок");
	Данные.Вставить("Период");
	Данные.Вставить("РабочихЧасов");
	Данные.Вставить("ПроцентФонда");
	Данные.Вставить("ПредыдущийПериод");
	Данные.Вставить("ПредыдущийПроцентФонда");
	Данные.Вставить("Лидер");
	Данные.Вставить("Аутсайдер");
	Данные.Вставить("РезультатАнализа");
	Данные.Вставить("СсылкаОтчета", СсылкаОтчетаДляУведомления());
	
	Возврат Данные;
	
КонецФункции

// Возвращает текст сводки, сформированный по данным сводки (см. НовыеДанныеСводкиОРабочемВремени()).
//
Функция ТекстСводкиОРабочемВремени(Данные)
	
	Если ЗначениеЗаполнено(Данные.Подзаголовок) Тогда
		Текст = СтрШаблон(НСтр("ru = '%1, %2'"),
			Данные.Подзаголовок,
			НРег(Данные.Период));
	Иначе
		Текст = СтрШаблон(НСтр("ru = '%1'"),
			Данные.Период);
	КонецЕсли;
	
	Текст = Текст + Символы.ПС;
	Текст = Текст + СтрШаблон(НСтр("ru = 'Рабочих часов: %1 (%2 фонда, %3 – %4 фонда).'"),
		Формат(Данные.РабочихЧасов, "ЧДЦ=2; ЧН=0; ЧГ=0"),
		Формат(Данные.ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%",
		Данные.ПредыдущийПериод,
		Формат(Данные.ПредыдущийПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");
	
	Если ЗначениеЗаполнено(Данные.Лидер) Тогда
		Текст = Текст + Символы.ПС + СтрШаблон(НСтр("ru = 'Больше всех: %1 (%2 ч, %3 фонда).'"),
			Данные.Лидер.ПредметАнализа,
			Формат(Данные.Лидер.РабочихЧасов, "ЧДЦ=2; ЧН=0; ЧГ=0"),
			Формат(Данные.Лидер.ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Аутсайдер) Тогда
		Текст = Текст + Символы.ПС + СтрШаблон(НСтр("ru = 'Меньше всех: %1 (%2 ч, %3 фонда).'"),
			Данные.Аутсайдер.ПредметАнализа,
			Формат(Данные.Аутсайдер.РабочихЧасов, "ЧДЦ=2; ЧН=0; ЧГ=0"),
			Формат(Данные.Аутсайдер.ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.СсылкаОтчета) Тогда
		Текст = Текст + Символы.ПС + Данные.СсылкаОтчета;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает Истина, если указанная дата - суббота.
//
Функция ЭтоСуббота(ДатаАнализа)
	Возврат ДеньНедели(ДатаАнализа) = 6;
КонецФункции

// Возвращает Истина, если указанная дата - первая суббота месяца.
//
Функция ЭтоПерваяСубботаМесяца(ДатаАнализа)
	Возврат ДеньНедели(ДатаАнализа) = 6
		И НачалоМесяца(ДатаАнализа) <> НачалоМесяца(ДатаАнализа - 7 * 86400);
КонецФункции

// Возвращает Соответствие, Ключ которого - подписчики на сводки о рабочем времени, а Значение -
// Структура со свойствами:
//   ПолучателиУведомлений - Массив - получатели уведомлений, включая подписчика и делегатов.
//   ПредметыАнализа - Массив - предметы анализа для подписчика; сам подписчик, его подчиненные
//     сотрудники или подразделения.
//
Функция ПодписчикиНаСводкиОРабочемВремени()
	
	Подписчики = Новый Соответствие;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РаботаСУведомлениями.ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.СводкаОРабочемВремени,
		"ЕжедневныеОтчеты",
		"ПодписчикиИПолучателиУведомлений");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодписчикиИПолучателиУведомлений.Подписчик КАК Подписчик
		|ПОМЕСТИТЬ Подписчики
		|ИЗ
		|	ПодписчикиИПолучателиУведомлений КАК ПодписчикиИПолучателиУведомлений
		|ГДЕ ПодписчикиИПолучателиУведомлений.Подписчик ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подписчики.Подписчик КАК Подписчик,
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ РуководимыеПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО СтруктураПредприятия.Руководитель = Подписчики.Подписчик
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РуководимыеПодразделения.Подписчик КАК Подписчик,
		|	СтруктураПредприятия.Ссылка КАК Подчиненное,
		|	ПодчиненностьПодразделений.Подчиненное КАК ПодчиненноеПоИерархии
		|ПОМЕСТИТЬ ПодчиненныеПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РуководимыеПодразделения КАК РуководимыеПодразделения
		|		ПО СтруктураПредприятия.Родитель = РуководимыеПодразделения.Подразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО СтруктураПредприятия.Ссылка = ПодчиненностьПодразделений.Вышестоящее
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодписчикиИПолучателиУведомлений.Подписчик КАК Подписчик,
		|	ПодписчикиИПолучателиУведомлений.ПолучательУведомления КАК ПолучательУведомления
		|ИЗ
		|	ПодписчикиИПолучателиУведомлений КАК ПодписчикиИПолучателиУведомлений
		|ГДЕ
		|	ПодписчикиИПолучателиУведомлений.Подписчик ССЫЛКА Справочник.Пользователи
		|ИТОГИ ПО
		|	Подписчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РуководимыеПодразделения.Подписчик КАК Подписчик,
		|	СведенияОПользователях.Подразделение КАК Подразделение,
		|	СведенияОПользователях.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РуководимыеПодразделения КАК РуководимыеПодразделения
		|		ПО СведенияОПользователях.Подразделение = РуководимыеПодразделения.Подразделение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СведенияОПользователях.Пользователь = Пользователи.Ссылка
		|			И (НЕ Пользователи.Недействителен)
		|			И НЕ Пользователи.Ссылка = РуководимыеПодразделения.Подписчик
		|ИТОГИ ПО
		|	Подписчик, Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодчиненныеПодразделения.Подписчик КАК Подписчик,
		|	ПодчиненныеПодразделения.Подчиненное КАК Подразделение,
		|	СведенияОПользователях.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеПодразделения КАК ПодчиненныеПодразделения
		|		ПО СведенияОПользователях.Подразделение = ПодчиненныеПодразделения.ПодчиненноеПоИерархии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СведенияОПользователях.Пользователь = Пользователи.Ссылка
		|			И (НЕ Пользователи.Недействителен)
		|			И НЕ Пользователи.Ссылка = ПодчиненныеПодразделения.Подписчик
		|ИТОГИ ПО
		|	Подписчик, Подразделение");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результаты = Запрос.ВыполнитьПакет();
	
	// Подписчики и получатели уведомлений.
	РезультатПодписчикиИПолучателиУведомлений = Результаты[3];
	ПодписчикиИПолучателиУведомлений = Новый Соответствие;
	ВыборкаПодписчики = РезультатПодписчикиИПолучателиУведомлений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодписчики.Следующий() Цикл
		Подписчики[ВыборкаПодписчики.Подписчик] = Новый Структура("ПолучателиУведомлений, ПредметыАнализа",
			Новый Массив, Новый Массив);
		// Получатели уведомлений.
		ВыборкаПолучателиУведомлений = ВыборкаПодписчики.Выбрать();
		Пока ВыборкаПолучателиУведомлений.Следующий() Цикл
			Подписчики[ВыборкаПодписчики.Подписчик].ПолучателиУведомлений.Добавить(
				ВыборкаПолучателиУведомлений.ПолучательУведомления);
		КонецЦикла;
		// Предметы анализа.
		ПредметАнализа = НовыйПредметАнализаПодписчикаСводки();
		ПредметАнализа.Ссылка = ВыборкаПодписчики.Подписчик;
		ПредметАнализа.Пользователи.Добавить(ВыборкаПодписчики.Подписчик);
		Подписчики[ВыборкаПодписчики.Подписчик].ПредметыАнализа.Добавить(ПредметАнализа);
	КонецЦикла;
	
	// Подразделения, непосредственно руководимые; вытесняют из предметов анализа собственно подписчика.
	РезультатРуководимыеПодразделения = Результаты[4];
	ВыборкаПодписчики = РезультатРуководимыеПодразделения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодписчики.Следующий() Цикл
		Подписчики[ВыборкаПодписчики.Подписчик].ПредметыАнализа = Новый Массив;
		ВыборкаПодразделения = ВыборкаПодписчики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ВыборкаПользователи = ВыборкаПодразделения.Выбрать();
			Пока ВыборкаПользователи.Следующий() Цикл
				ПредметАнализа = НовыйПредметАнализаПодписчикаСводки();
				ПредметАнализа.Ссылка = ВыборкаПользователи.Пользователь;
				ПредметАнализа.Пользователи.Добавить(ВыборкаПользователи.Пользователь);
				Подписчики[ВыборкаПодписчики.Подписчик].ПредметыАнализа.Добавить(ПредметАнализа);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Подчиненные подразделения; вытесняют из предметов анализа непосредственно руководимые.
	РезультатПодчиненныеПодразделения = Результаты[5];
	ВыборкаПодписчики = РезультатПодчиненныеПодразделения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодписчики.Следующий() Цикл
		Подписчики[ВыборкаПодписчики.Подписчик].ПредметыАнализа = Новый Массив;
		ВыборкаПодразделения = ВыборкаПодписчики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ПредметАнализа = НовыйПредметАнализаПодписчикаСводки();
			ПредметАнализа.Ссылка = ВыборкаПодразделения.Подразделение;
			ВыборкаПользователи = ВыборкаПодразделения.Выбрать();
			Пока ВыборкаПользователи.Следующий() Цикл
				ПредметАнализа.Пользователи.Добавить(ВыборкаПользователи.Пользователь);
			КонецЦикла;
			Подписчики[ВыборкаПодписчики.Подписчик].ПредметыАнализа.Добавить(ПредметАнализа);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Подписчики;
	
КонецФункции

#КонецОбласти