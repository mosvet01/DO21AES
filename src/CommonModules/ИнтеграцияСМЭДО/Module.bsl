// Переопределяемый модуль - совершает аналогичные действия, но отличается для конкретной конфигурации из-за привязки
// к метаданным.
// Сюда вынесены методы, зависящие от метаданных других подсистем конфигурации.
//

#Область ПрограммныйИнтерфейс

// есть ли у текущего пользователя доступ к работе с МЭДО.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДоступКРаботеСМЭДО() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СостоянияДокументовМЭДО);
	
КонецФункции

// Устанавливает состояние "Документ зарегистрирован" у входящих и исходящих документов со способом доставки МЭДО.
//
// Параметры:
//   ДокументОбъект - ОпределяемыйТип.ПредметМЭДООбъект - Объект документа, которому устанавливается состояние.
Процедура УстановитьСостояниеДокументЗарегистрирован(ДокументОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	
	Если ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда
		
		Если ДокументОбъект.Получатели.НайтиСтроки(
			Новый Структура("СпособОтправки", Справочники.СпособыДоставки.МЭДО)).Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Если есть настройки контрагента МЭДО, то можно зарегистрировать для отправки:
		ЕстьКонтрагентыМЭДО = Ложь;
		Для Каждого СтрокаТЗ Из ДокументОбъект.Получатели Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.Получатель) Тогда
				Продолжить;
			КонецЕсли;
			
			НастройкиКонтрагента = РегистрыСведений.НастройкиКонтрагентовМЭДО.ПолучитьНастройки(
				СтрокаТЗ.Получатель, ДанныеОтвета);
			Если Не ДанныеОтвета.Успех Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(НастройкиКонтрагента.АдресМЭДО) Тогда
				ЕстьКонтрагентыМЭДО = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьКонтрагентыМЭДО Тогда
			Возврат;
		КонецЕсли;
		
		ДокументСсылка = СсылкаНовогоОбъекта(ДокументОбъект);
		
		СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.ПолучитьСостояниеДокумента(
			ДокументСсылка,
			Перечисления.СостоянияДокументовМЭДО.ДокументЗарегистрированГотовКОтправке,
			"Состояние",
			ДокументОбъект.ДатаРегистрации);
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда
			Возврат; // Уже зарегистрирован.
		КонецЕсли;
		
		
		ДанныеОбъект = Документы.ДанныеДокументаМЭДО.ПолучитьОбъектДанныхДокумента(ДокументСсылка, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат;
		КонецЕсли;
		// на этот момент реквизиты в родительском документе еще не записались,
		// поэтому сообщаем этот признак искусственно:
		ДанныеОбъект.ДатаРегистрации = ДокументОбъект.ДатаРегистрации;
		ДанныеОбъект.ИдентификаторДокумента = НРег("" + ДокументСсылка.УникальныйИдентификатор());
		Документы.ДанныеДокументаМЭДО.ЗаписатьОбъектДанныхДокумента(ДанныеОбъект, ДанныеОтвета);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда
		
		ДокументСсылка = СсылкаНовогоОбъекта(ДокументОбъект.Ссылка);
		СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.ПолучитьСостояниеДокумента(
			ДокументСсылка,
			Перечисления.СостоянияДокументовМЭДО.ДокументПолучен,
			"Состояние",
			ДокументОбъект.ДатаРегистрации);
		Если Не ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда
			Возврат;// Документ получен не по МЭДО, такие не учитываем.
		КонецЕсли;
		
		ДанныеОбъект = Документы.ДанныеДокументаМЭДО.ПолучитьОбъектДанныхДокумента(ДокументСсылка, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат;
		КонецЕсли;
		// на этот момент реквизиты в родительском документе еще не записались,
		// поэтому сообщаем этот признак искусственно:
		ДанныеОбъект.ДатаРегистрации = ДокументОбъект.ДатаРегистрации;
		Документы.ДанныеДокументаМЭДО.ЗаписатьОбъектДанныхДокумента(ДанныеОбъект, ДанныеОтвета);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при регистрации документа и обновляет связанные с документом данные.
//
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ПредметМЭДООбъект - Форма.Объект или объект документа
//  ВидДокументаКэш - Структура - имеет минимум 2 поля:
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
Процедура ПриРегистрацииДокумента(ДокументОбъект, ВидДокументаКэш) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтоДокументМЭДО(ДокументОбъект, ВидДокументаКэш) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРегистрационныйШтамп(ДокументОбъект, ВидДокументаКэш, МЭДОСтруктурыДанных.НовыйЛегкийОтвет());
	
КонецПроцедуры

// Заполняет закладку МЭДО в форме документа. 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  ВидДокументаКэш - Структура - имеет минимум 2 поля:
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
Процедура ЗаполнитьЗакладкуМЭДОВФорме(Форма, ВидДокументаКэш) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ = РегистрыСведений.СостоянияДокументовМЭДО.ПолучитьИсториюСостоянийПоДокументу(Форма.Объект.Ссылка);
	Форма.ИсторияСостоянийМЭДО.Загрузить(ТЗ);
	Если ТЗ.Количество() > 0 Тогда
		Форма.ТекущееСостояниеМЭДО = ТЗ[0].Состояние;
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Документы.ДанныеДокументаМЭДО.ПолучитьДанныеДокументаМЭДО(
		Форма.Объект.Ссылка, "*", МЭДОСтруктурыДанных.НовыйЛегкийОтвет());
	Если Не ЗначениеЗаполнено(Данные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВерсияМЭДО = Данные.ВерсияМЭДО;
	Форма.ВидДокументаМЭДО = Данные.ВидДокумента;
	Форма.ГлавныйФайлМЭДО = Данные.ГлавныйФайл;
	// ГрифДоступа = на основной закладке.
	Форма.ИдентификаторДокументаМЭДО = Данные.ИдентификаторДокумента;
	Форма.ИдентификаторСообщенияМЭДО = Данные.ИдентификаторСообщения;
	Форма.ИмяАрхиваЭсдМэдо = Данные.ИмяАрхиваЭСД;
	//Комментарий = на основной закладке.
	Форма.МестоСоставленияМЭДО = Данные.МестоСоставления;
	//Ответственный = на основной закладке.
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Форма.ГотовКОтправкеМЭДО = Данные.ГотовКОтправке;
		Форма.ОтправленМЭДО = Данные.Отправлен;
	КонецЕсли;
	
КонецПроцедуры

// Управляет на форме исходящего документа видимостью элементов закладки МЭДО.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  ВидДокументаКэш - Структура - имеет минимум 2 поля:
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
//  ЭтоПолноправныйПользователь - Булево - Признак администратора, которому видны некоторые служебные поля.
Процедура ВидимостьЭлементовМЭДОВФорме(Форма, ВидДокументаКэш, ЭтоПолноправныйПользователь) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не ЭтоДокументМЭДО(Форма.Объект, ВидДокументаКэш) Или Не ЕстьДоступКРаботеСМЭДО() Тогда
		Элементы.ГруппаМЭДО.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаМЭДО.Видимость = Истина;
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Видимость = ЭтоПолноправныйПользователь;
	КонецЕсли;
	
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Если Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Видимость Тогда
			Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Доступность = Форма.ГотовКОтправкеМЭДО;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПолноправныйПользователь Тогда
		Элементы.ТехническиеДанныеМЭДО.Видимость = Ложь;
		Элементы.ИсторияСостоянийМЭДОИдентификаторДокумента.Видимость = Ложь;
		Элементы.ИсторияСостоянийМЭДОИдентификаторСообщения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет вспомогательный документ ДанныеДокументаМЭДО из формы документа-владельца.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  ВидДокументаКэш - Структура - имеет минимум 2 поля:
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
//  Отказ - Булево - Неявно возращаемое значение для отказа от записи документа-владельца
Процедура СохранитьДанныеМЭДОВФорме(Форма, ВидДокументаКэш, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтоДокументМЭДО(Форма.Объект, ВидДокументаКэш) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	ДанныеОбъект = Документы.ДанныеДокументаМЭДО.ПолучитьОбъектДанныхДокумента(Форма.Объект.Ссылка, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// В МЭДО участвуют только входящие и исходящие документы:
	Если Не ВидДокументаКэш.Свойство("ЯвляетсяИсходящейКорреспонденцией")
		Или Не ВидДокументаКэш.Свойство("ЯвляетсяВходящейКорреспонденцией") Тогда
		Если Не ДанныеОбъект.ЭтоНовый() Тогда
			ДанныеОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ВерсияМЭДО, Форма.ВерсияМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ВидДокумента, Форма.ВидДокументаМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГлавныйФайл, Форма.ГлавныйФайлМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГрифДоступа, Форма.Объект.ГрифДоступа);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Комментарий, Форма.Объект.Комментарий);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.МестоСоставления, Форма.МестоСоставленияМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Организация, Форма.Объект.Организация);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Ответственный, Форма.Объект.Ответственный);
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГотовКОтправке, Форма.ГотовКОтправкеМЭДО);
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Направление, Перечисления.НаправленияСообщенийМЭДО.Исходящее);
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Отправлен, Форма.ОтправленМЭДО);
	Иначе
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГотовКОтправке, Ложь);
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Направление, Перечисления.НаправленияСообщенийМЭДО.Входящее);
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Отправлен, Ложь);
	КонецЕсли;
	Документы.ДанныеДокументаМЭДО.ЗаписатьОбъектДанныхДокумента(ДанныеОбъект, ДанныеОтвета);
	
КонецПроцедуры

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ВыполнениеОбменаМЭДО;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьМЭДО;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВходящиеДокументы

// Функция - Выполняет поиск документа в этой базе по id или создает новый, если документ не найден.
// 
// Параметры: 
//  ИдентификаторДокумента	 - Строка	 - Идентификатор документа из входящего сообщения
//  ИдентификаторСообщения	 - Строка	 - Идентификатор входящего сообщения из него
//  ДанныеДокумента - см. МЭДОСтруктурыДанных.НовыйДанныеВходящегоДокументаДляСоздания.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПредметМЭДО - Созданный или найденный документ
Функция НайтиСоздатьВходящийДокумент(ДанныеДокумента, ДанныеОтвета) Экспорт
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СвязиОбъектовИнтегрированныхСистем");
	ЭлементБлокировки.УстановитьЗначение("ТипВнешнегоОбъекта", МЭДО.Обозначение_ВнешнийДокумент());
	Блокировка.Заблокировать(); // транзакция начата "снаружи".
	
	ДокументОбъект = Неопределено;
	
	// Возможно, документ уже есть в этой ИБ:
	ДокументСсылка = ПолучитьОбъектИБПоИдентификатору(
		ДанныеДокумента.ИдентификаторДокумента, МЭДО.Обозначение_ВнешнийДокумент());
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Состояния.Состояние,
			|	ВЫБОР
			|		КОГДА Состояния.ПредметСообщения ССЫЛКА Документ.УведомлениеМЭДО
			|			ТОГДА Состояния.ПредметСообщения.ТипУведомления
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыУведомленийМЭДО.ПустаяСсылка)
			|	КОНЕЦ КАК ТипУведомления,
			|	Состояния.ИдентификаторДокумента
			|ИЗ
			|	РегистрСведений.СостоянияДокументовМЭДО.СрезПоследних(, Документ = &ДокументСсылка
			|	И Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСообщенийМЭДО.Входящее)) КАК Состояния");
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		ИдентификаторДокумента = Неопределено;
		Если Выборка.Следующий() Тогда
			Состояние = Выборка.Состояние;
			ТипУведомления = Выборка.ТипУведомления;
			ИдентификаторДокумента = Выборка.ИдентификаторДокумента;
		
			// Документ был загружен ранее. Требуется проверка состояния:
			//   * Если документ зарегистрирован или отправлено уведомление о регистрации - отправим уведомление об отказе
			//       в регистрации по причине ДокументЗарегистрированРанееТекстВзаменРазосланногоЗагружен
			//   * Для всех остальных состояний примем полученные изменения
			Если Состояние = Перечисления.СостоянияДокументовМЭДО.ВходящийДокументЗарегистрирован
					Или 
					(Состояние = Перечисления.СостоянияДокументовМЭДО.ОтправленоУведомление
					И ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОРегистрации) Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				// Автоматически создаем уведомление об отказе, документ уже зарегистрирован:
				Уведомление = Документы.УведомлениеМЭДО.СоздатьДокумент();
				Уведомление.Дата = ТекущаяДатаСеанса();
				Уведомление.ИсходящаяДата = ТекущаяДатаСеанса();
				Уведомление.Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее;
				Уведомление.Заполнить(Неопределено);
				Уведомление.Организация = ДанныеДокумента.Организация.ОрганизацияСсылка;
				Уведомление.ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОбОтказеВРегистрации;
				Уведомление.Документ = ДокументСсылка;
				Уведомление.ИдентификаторДокумента = ИдентификаторДокумента;
				Уведомление.ИдентификаторУведомления = ДанныеДокумента.ИдентификаторСообщения;
				Уведомление.Отправлено = Ложь;
				Уведомление.ГотовоКОтправке = Истина;
				Уведомление.Комментарий
					= Нстр("ru = 'Отказано в регистрации автоматически, документ уже зарегистрирован'");
				НоваяСтрока = Уведомление.ОтказВРегистрации.Добавить();
				Если ДанныеДокумента.ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия271 Тогда
					НоваяСтрока.ПричинаОтказа
						= Справочники.ПричиныОтказаВРегистрацииМЭДО.ДокументЗарегистрированРанееНовыйТекстВзаменРазосланногоЗагружен
				Иначе
					НоваяСтрока.ПричинаОтказа
						= Справочники.ПричиныОтказаВРегистрацииМЭДО.ДокументЗарегистрированРанееТекстВзаменРазосланногоЗагружен;
				КонецЕсли;
				Уведомление.Записать();
				
				
				ТекстОшибкиПодробно = СтрШаблон(
					НСтр("ru = 'Документ был уже загружен и зарегистрирован ранее. Текущее состояние документа: %1.
					|Создано исходящее уведомление об отказе в регистрации %2'"), 
					Состояние, Уведомление.Ссылка);
				МЭДО.ЗаписьВЖурналСобытий(
					Перечисления.УровниСобытийМЭДО.Ошибка,
					ДокументСсылка, 
					НСтр("ru = 'Документ уже загружен и зарегистрирован'"),
					ТекстОшибкиПодробно,
					ДанныеОтвета);
				Возврат ДокументСсылка;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь; // На случай, когда второй раз загружаем тот же документ, он "оживает".
	Иначе
		ДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		ДокументОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ДокументОбъект, ДанныеДокумента,
		"Заголовок, Содержание, КоличествоЛистов, КоличествоПриложений, ГрифДоступа, ИсходящаяДата, ИсходящийНомер");
	
	ДокументОбъект.Организация = ДанныеДокумента.Организация.ОрганизацияСсылка;
	ДокументОбъект.Отправитель = ДанныеДокумента.Отправитель.Контрагент.КонтрагентСсылка;
	ДокументОбъект.Подписал = ДанныеДокумента.Подписал.КонтактноеЛицоСсылка;
	ДокументОбъект.СпособПолучения = Справочники.СпособыДоставки.МЭДО;
	
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(
		ДанныеДокумента.Организация.ОрганизацияСсылка, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат ДокументОбъект.Ссылка;
	КонецЕсли;
	ДокументОбъект.ВидДокумента = Настройки.ВидВходящегоДокументаПоУмолчанию;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		ДокументОбъект.ВидДокумента = ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидВходящегоДокумента");
	КонецЕсли;
	ДокументОбъект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная;
	
	Для Каждого СтруктураАдресата Из ДанныеДокумента.Адресаты Цикл  
		Если ЗначениеЗаполнено(СтруктураАдресата.Персона) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(СтруктураАдресата.Персона);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				ДокументОбъект.Адресат = Пользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДокументОбъект.Записать();
	
	СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
		ДанныеДокумента.ИдентификаторДокумента, МЭДО.Обозначение_ВнешнийДокумент(), ДокументОбъект.Ссылка);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

// Данные входящего документа для передачи уведомлений и квитанций по МЭДО. Часть полей берется из самого документа,
// а часть из связанных с ним данных.
// 
// Параметры:
//  Документ		- ОпределяемыйТип.ПредметМЭДО - документ.
//  СписокТребуемыхПолей - Строка	- Список полей через запятую, которые нужно получить. Названия полей определенные.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  Структура	- Структура, включающая требуемые поля (СписокТребуемыхПолей) из документа. Значения полей возвращаются 
//  			в том виде "как есть" в документе. Возможные имена полей структуры заданы жестко:
//  	* ПометкаУдаления - Булево
//		* Организация - ОпределяемыйТип.Организация
//  	* ГрифДоступа - ОпределяемыйТип.ГрифДоступаМЭДО
//		* Контрагент - ОпределяемыйТип.КонтрагентМЭДО
//		* ДатаСоздания - Дата
//		* ДатаРегистрации - Дата
//		* ДатаУчетаДокумента - Дата - возвращается на основании ДатаСоздания и ДатаРегистрации,
//										даже если они не переданы.
//		* РегистрационныйНомер - Строка
//		* ИсходящаяДата - Дата
//		* ИсходящийНомер - Дата
//		* ИсходящийПодписал - ОпределяемыйТип.КонтактноеЛицоМЭДО - Подписавший исходящий документ со стороны контрагента.
//		* Комментарий - Строка
Функция ПолучитьТребуемыеДанныеВходящегоДокумента(Документ, Знач СписокТребуемыхПолей, ДанныеОтвета = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	// Если передали фиктивное поле "ДатаУчетаДокумента", то искусственно добавляем дату создания и дату регистрации
	// для ее определения:
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		Если СтрНайти(СписокТребуемыхПолей, "ДатаСоздания") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаСоздания";
		КонецЕсли;
		Если СтрНайти(СписокТребуемыхПолей, "ДатаРегистрации") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаРегистрации";
		КонецЕсли;
	КонецЕсли;
	
	// В разных конфигурациях поля могут называться по разному, но на выходе нужно получить единообразную структуру.
	СопоставлениеПолей = Новый ТаблицаЗначений();
	СопоставлениеПолей.Колонки.Добавить("ИмяПоля"); // Такое название будет использоваться для передачи данных в МЭДО
	СопоставлениеПолей.Колонки.Добавить("ИмяПоляКакВОбъекте"); // Так поле называется в конкретном объекте метаданных в привязке к конкретной конфигурации.
	
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ПометкаУдаления", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Организация", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ГрифДоступа", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Контрагент", СписокТребуемыхПолей, "Отправитель");
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаСоздания", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаРегистрации", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "РегистрационныйНомер", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ИсходящийПодписал", СписокТребуемыхПолей, "Подписал");
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Комментарий", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ИсходящаяДата", СписокТребуемыхПолей, "ИсходящаяДата");
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ИсходящийНомер", СписокТребуемыхПолей, "ИсходящийНомер");
	ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, Документ);
	
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		// Дату создания и дату регистрации добавили и вычислили выше.
		Результат.Вставить("ДатаУчетаДокумента", Делопроизводство.ДатаУчетаДокумента(Результат));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, является ли документ входящим.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО, ОпределяемыйТип.ПредметМЭДООбъект - Документ. Можно передавать и объект и ссылку
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВходящийДокумент(Документ) Экспорт
	
	Возврат ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Документ);
	
КонецФункции

#КонецОбласти

#Область ИсходящиеДокументы

// Функция - Возвращает данные исходящего документа для отправки по МЭДО.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - отправляемый исходящий документ.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  см. МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки.
Функция ДанныеИсходящегоДокументаДляОтправки(Документ, ДанныеОтвета) Экспорт
	
	Данные = МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки();
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ,
		"ВидДокумента, ГрифДоступа, ДатаСоздания, ДатаРегистрации, РегистрационныйНомер, 
		|Заголовок, Организация, Подготовил, Содержание, КоличествоЛистов, КоличествоПриложений");
	
	// ВерсияМЭДО - если не указана у контрагента, то может быть указана напрямую в документе, если и там нет,
	// то только тогда берется последняя версия.
	Данные.ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.ПоследняяВерсия();// ниже может быть переопределена.
	
	Данные.Документ = Документ;
	Данные.ИдентификаторДокумента = "" + Документ.УникальныйИдентификатор();
	
	ДанныеДокументаМЭДО = Документы.ДанныеДокументаМЭДО.ПолучитьДанныеДокументаМЭДО(Документ, "*", ДанныеОтвета);
	Если ЗначениеЗаполнено(ДанныеДокументаМЭДО.Ссылка) Тогда
		Данные.ИдентификаторСообщения = ДанныеДокументаМЭДО.ИдентификаторСообщения;
		
		Если ЗначениеЗаполнено(ДанныеДокументаМЭДО.ВидДокумента) Тогда 
			Данные.ВидДокумента.Идентификатор = ДанныеДокументаМЭДО.ВидДокумента.КодМЭДО;
			Данные.ВидДокумента.Наименование = ДанныеДокументаМЭДО.ВидДокумента.НаименованиеПолное;
			Данные.ВидДокументаСсылка = ДанныеДокументаМЭДО.ВидДокумента;
		Иначе
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'У документа %1 не заполнен в дополнительных данных не заполнен ""вид документа МЭДО"".'"),
				Документ);
			МЭДО.ЗаписьВЖурналСобытий(
				Перечисления.УровниСобытийМЭДО.Ошибка, 
				Документ,
				НСтр("ru = 'Не заполнен ""Вид документа МЭДО""'"),
				ТекстОшибкиПодробно,
				ДанныеОтвета);
			Возврат Данные;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеДокументаМЭДО.ВерсияМЭДО) Тогда
			Данные.ВерсияМЭДО = ДанныеДокументаМЭДО.ВерсияМЭДО;
		КонецЕсли;
	Иначе
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'У документа %1 не заполнены дополнительные данные для МЭДО.
			|Для успешной отправки их нужно заполнить'"), Документ);
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка, 
			Документ,
			НСтр("ru = 'Не заполнены ""Данные документа МЭДО""'"),
			ТекстОшибкиПодробно,
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	Данные.ДатаУчетаДокумента = Делопроизводство.ДатаУчетаДокумента(Реквизиты);
	
	// Получатели:
	ТаблицаПолучатели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Получатели").Выгрузить();
	Для Каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл
		Получатель = МЭДОСтруктурыДанных.НовыйПолучатель();
		СтруктураКонтрагент = МЭДО.ПолучитьПоляКонтрагента(
			СтрокаПолучатель.Получатель, Данные.ДатаУчетаДокумента, Истина, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат Данные;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Получатель.Контрагент, СтруктураКонтрагент);
		Получатель.КонтактноеЛицо = ПолучитьПоляКонтактногоЛица(СтрокаПолучатель.Адресат, Данные.ДатаУчетаДокумента);
		
		Данные.Получатели.Добавить(Получатель);
	КонецЦикла;
	Если Данные.Получатели.Количество() = 0 Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(), 
			НСтр("ru = 'В исходящем документе не найдены подходящие получатели'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	// Определяем версию для отправки, достаточно хотя бы у одного, если не проставлено, то останется по умолчанию.
	Для Каждого СтруктураПолучатель Из Данные.Получатели Цикл
		Если ЗначениеЗаполнено(СтруктураПолучатель.Контрагент.ВерсияМЭДО) Тогда
			Данные.ВерсияМЭДО = СтруктураПолучатель.Контрагент.ВерсияМЭДО;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	МестоСоставления = ДанныеДокументаМЭДО.МестоСоставления;
	Если ЗначениеЗаполнено(МестоСоставления) Тогда
		Данные.МестоСоставления.Идентификатор = МестоСоставления.КодМЭДО;
		Данные.МестоСоставления.Наименование = МестоСоставления.Наименование;
		Данные.МестоСоставленияСсылка = МестоСоставления;
	Иначе
		// Место составления для 2.7.1 - обязательное, для 2.7 - не обязательное.
		Если Данные.ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия271 Тогда
			МЭДО.ЗаписьВЖурналСобытий(
				Перечисления.УровниСобытийМЭДО.Ошибка,
				Документ,
				МЭДО.Текст_ОшибкаВДокументе(),
				НСтр("ru = 'У документа не указано место составления, для МЭДО версии 2.7.1 это обязательное поле.'"),
				ДанныеОтвета);
			Возврат Данные;
		КонецЕсли;
	КонецЕсли;
	
	Организация = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Организация = Реквизиты.Организация;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(Организация, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат Данные;
	КонецЕсли;
	
	// Гриф доступа:
	СтруктураГриф = МЭДО.ГрифДоступаВВидеСтруктуры(Реквизиты.ГрифДоступа, Настройки);
	ЗаполнитьЗначенияСвойств(Данные.ГрифДоступа, СтруктураГриф);
	Данные.ГрифДоступаСсылка = Реквизиты.ГрифДоступа;
	Если Не ЗначениеЗаполнено(Данные.ГрифДоступа.Идентификатор)
		И Данные.ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия271 Тогда
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'Для отправки документа по формату версии МЭДО 2.7.1 должен быть определен гриф доступа и в документе и в настройках %1'"),
			ОрганизацииРодительный()); 
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			ТекстОшибкиПодробно,
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;

	
	Данные.Заголовок = Реквизиты.Заголовок;
	Данные.Заголовок = СтрЗаменить(Данные.Заголовок, """", "");
	Данные.Заголовок = СтрЗаменить(Данные.Заголовок, "'", "");
	
	Данные.Содержание = ?(СтрДлина(Реквизиты.Содержание) <= 2047, Реквизиты.Содержание, Лев(Реквизиты.Содержание, 2047));
	Данные.КоличествоЛистов = ?(ЗначениеЗаполнено(Реквизиты.КоличествоЛистов), Реквизиты.КоличествоЛистов, 1);
	
	// Главный файл:
	Если Не ЗначениеЗаполнено(ДанныеДокументаМЭДО.ГлавныйФайл) Тогда
		// если явно не задан, попробуем "вычислить" методом исключения:
		ДанныеДокументаМЭДО.ГлавныйФайл = МЭДО.ПопытатьсяОпределитьГлавныйФайл(Документ);
		Если Не ЗначениеЗаполнено(ДанныеДокументаМЭДО.ГлавныйФайл) Тогда
			МЭДО.ЗаписьВЖурналСобытий(
				Перечисления.УровниСобытийМЭДО.Ошибка,
				Документ,
				МЭДО.Текст_ОшибкаВДокументе(), 
				НСтр("ru = 'Не определен главный файл документа для отправки.'"),
				ДанныеОтвета);
			Возврат Данные;
		КонецЕсли;
	КонецЕсли;
	ГлавныйФайлРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеДокументаМЭДО.ГлавныйФайл, "ТекущаяВерсия, Наименование, ТекущаяВерсияРасширение");
	Данные.Файл.ЛокальноеИмя = МЭДО.ЗаменитьНеподходящееИмяФайла(
		ГлавныйФайлРеквизиты.Наименование, ГлавныйФайлРеквизиты.ТекущаяВерсияРасширение);
	Данные.Файл.ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(
		ГлавныйФайлРеквизиты.ТекущаяВерсия);
	Данные.ГлавныйФайлСсылка = ДанныеДокументаМЭДО.ГлавныйФайл;
	
	// Отправитель:	
	Данные.Отправитель.Организация.Идентификатор = Настройки.ИдентификаторМЭДО;
	Данные.Отправитель.Организация.Наименование = Настройки.НаименованиеМЭДО;
	Данные.Отправитель.Организация.ОрганизацияСсылка = Организация;
	
	// Исполнитель:
	Если Данные.ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия271 И Не ЗначениеЗаполнено(Реквизиты.Подготовил) Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'Для отправки документа по формату версии МЭДО 2.7.1 должен быть определен исполнитель - тот, кто подготовил документ!'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	Данные.Отправитель.Исполнитель = ПолучитьПоляКонтактногоЛица(Реквизиты.Подготовил, Данные.ДатаУчетаДокумента);
	
	Данные.Отправитель.РегистрационныйНомер = Реквизиты.РегистрационныйНомер;
	Данные.Отправитель.ДатаРегистрации = Реквизиты.ДатаРегистрации;
	Если Не ЗначениеЗаполнено(Реквизиты.РегистрационныйНомер) Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'Документ не зарегистрирован'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	Данные.Отправитель.РегистрационныйШтамп.Файл.ЛокальноеИмя = "registrationStamp.png";
	ФайлРегистрационныйШтамп = ПолучитьРегистрационныйШтамп(
		Документ, Данные.Отправитель.РегистрационныйШтамп.Положение);
	Если Не ЗначениеЗаполнено(ФайлРегистрационныйШтамп) Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(), 
			НСтр("ru = 'Среди служебных файлов документа нет изображения регистрационного штампа.'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	Данные.Отправитель.РегистрационныйШтамп.Файл.ДвоичныеДанные = 
		РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлРегистрационныйШтамп).ДвоичныеДанные;
	
	
	// Подписи главного файла - в "Отправителя":
	Выборка = ВыборкаПодписейВерсииФайла(ГлавныйФайлРеквизиты.ТекущаяВерсия);
	Если Выборка.Количество() = 0 Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'У подписываемого файла документа нет ни одной ЭП.'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	// Отметки в РС СлужебныеФайлДокументов могут храниться либо по идентификаторам подписи (строкам),
	// либо по ссылкам на файлы, поищем и так и так.
	НашлиПоСсылкеНаФайл = Ложь;
	НашлиХотяБыОдну = Ложь;
	Пока Выборка.Следующий() Цикл
		Подпись = МЭДОСтруктурыДанных.НовыйПодпись();
		Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Подпись.Подписал = ПолучитьПоляКонтактногоЛица(Выборка.Пользователь, Данные.ДатаУчетаДокумента);
		КонецЕсли;
		ЛокальноеИмя = СтрЗаменить("" + Выборка.УникальныйИдентификатор, "-", "");
		Подпись.Файл.ЛокальноеИмя = ЛокальноеИмя + ".p7s";
		Подпись.Файл.ДвоичныеДанные = Выборка.Подпись.Получить();
		Подпись.ОтметкаЭП.Файл.ЛокальноеИмя = ЛокальноеИмя + ".png";
		Подпись.ДатаПодписания = НачалоДня(Выборка.ДатаПодписи);
		ФайлОтметкиЭП = РаботаСЭП.ПолучитьОтметкуЭП(
			Документ,
			"" + Выборка.УникальныйИдентификатор,
			Подпись.ОтметкаЭП.Положение);
		Если ЗначениеЗаполнено(ФайлОтметкиЭП) Тогда
			Подпись.ОтметкаЭП.Файл.ДвоичныеДанные = 
				РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлОтметкиЭП).ДвоичныеДанные;
			Данные.Отправитель.Подписи.Добавить(Подпись);
			НашлиХотяБыОдну = Истина;
		ИначеЕсли Не НашлиПоСсылкеНаФайл Тогда
			ФайлОтметкиЭП = РаботаСЭП.ПолучитьОтметкуЭП(
				Документ,
				Данные.ГлавныйФайлСсылка,
				Подпись.ОтметкаЭП.Положение);
			Если ЗначениеЗаполнено(ФайлОтметкиЭП) Тогда
				Подпись.ОтметкаЭП.Файл.ДвоичныеДанные = 
					РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлОтметкиЭП).ДвоичныеДанные;
				Данные.Отправитель.Подписи.Добавить(Подпись);
				НашлиПоСсылкеНаФайл = Истина;
				НашлиХотяБыОдну = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не НашлиХотяБыОдну Тогда
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'У подписываемого файла документа %1 не удалось сгенерировать отметку ЭП. 
			|Возможно отключен или отсутствует ImageMagick.
			|Или отключена настройка штампа ЭП (настройки электронных подписей)'"),
			Данные.Файл.ЛокальноеИмя);
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Предупреждение,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			ТекстОшибкиПодробно,
			ДанныеОтвета);
	КонецЕсли;
	
	
	// Приложения.
	// Все файлы в документе, кроме служебных и кроме главного - считаем приложениями для отправки:
	ТаблицаФайлыДокумента = ПолучитьОбычныеФайлыДокумента(Документ, ДанныеОтвета);
	Для Каждого СтрокаФайл Из ТаблицаФайлыДокумента Цикл 		
		Если СтрокаФайл.Файл = ДанныеДокументаМЭДО.ГлавныйФайл Тогда
			Продолжить;
		КонецЕсли;
		
		Приложение = МЭДОСтруктурыДанных.НовыйФайл();
		Приложение.ЛокальноеИмя   = МЭДО.ЗаменитьНеподходящееИмяФайла(СтрокаФайл.Наименование, СтрокаФайл.Расширение);
		Приложение.ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(
			СтрокаФайл.ТекущаяВерсия);
		Данные.Приложения.Добавить(Приложение);

	КонецЦикла;
	
	
	Данные.ПодписьКонтейнера.ЛокальноеИмя = "signature.p7s";
	
	
	Возврат Данные;
	
КонецФункции

// Данные исходящего документа для передачи уведомлений и квитанций по МЭДО. Часть полей берется из самого документа,
// а часть из связанных с ним данных.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ
//  СписокТребуемыхПолей - Строка	- Список полей через запятую, которые нужно получить. Названия полей определенные.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  Структура	- Структура, включающая требуемые поля (СписокТребуемых) из документа. Значения полей возвращаются 
//  			в том виде "как есть" в документе. Возможные имена полей структуры заданы жестко:
//  	* ПометкаУдаления - Булево
//		* Организация - ОпределяемыйТип.Организация
//  	* ГрифДоступа - ОпределяемыйТип.ГрифДоступаМЭДО
//		* Контрагенты - Массив Из Структура - Если указать либо "Контрагент" его либо "Контрагенты", то получит и то и то:
//		** Контрагент - ОпределяемыйТип.КонтрагентМЭДО
//		** КонтактноеЛицо - ОпределяемыйТип.КонтактноеЛицоМЭДО
//		* Контрагент - ОпределяемыйТип.КонтрагентМЭДО - Если указать либо "Контрагент" его либо "Контрагенты", то получит и то и то.
//		* ДатаСоздания - Дата
//		* ДатаРегистрации - Дата
//		* ДатаУчетаДокумента - Дата - возвращается на основании ДатаСоздания и ДатаРегистрации,
//										даже если они не переданы.
//		* РегистрационныйНомер - Строка
Функция ПолучитьТребуемыеДанныеИсходящегоДокумента(Документ, Знач СписокТребуемыхПолей, ДанныеОтвета = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	// Если передали фиктивное поле "ДатаУчетаДокумента", то искусственно добавляем дату создания и дату регистрации
	// для ее определения:
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		Если СтрНайти(СписокТребуемыхПолей, "ДатаСоздания") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаСоздания";
		КонецЕсли;
		Если СтрНайти(СписокТребуемыхПолей, "ДатаРегистрации") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаРегистрации";
		КонецЕсли;
	КонецЕсли;
	
	// В разных конфигурациях поля могут называться по разному, но на выходе нужно получить единообразную структуру.
	СопоставлениеПолей = Новый ТаблицаЗначений();
	СопоставлениеПолей.Колонки.Добавить("ИмяПоля"); // Такое название будет использоваться для передачи данных в МЭДО
	СопоставлениеПолей.Колонки.Добавить("ИмяПоляКакВОбъекте"); // Так поле называется в конкретном объекте метаданных в привязке к конкретной конфигурации.
	
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ПометкаУдаления", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Организация", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ГрифДоступа", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаСоздания", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаРегистрации", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "РегистрационныйНомер", СписокТребуемыхПолей);
	ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, Документ);
	
	Если СтрНайти(СписокТребуемыхПолей, "Контрагенты") > 0 Или СтрНайти(СписокТребуемыхПолей, "Контрагент") > 0 Тогда
		Получатели = Новый Массив();
		ПолучателиТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Получатели");
		Если ПолучателиТЧ <> Неопределено Тогда
			Для Каждого СтрокаТЧ Из ПолучателиТЧ.Выгрузить() Цикл
				СтруктураКонтрагент = Новый Структура(
					"Контрагент, КонтактноеЛицо", СтрокаТЧ.Получатель, СтрокаТЧ.Адресат);
				Получатели.Добавить(СтруктураКонтрагент);
			КонецЦикла;
		КонецЕсли;
		Результат.Вставить("Контрагенты", Получатели);
		
		Контрагент = Неопределено;
		Если Получатели.Количество() > 0 Тогда
			Контрагент = Получатели[0].Контрагент;
		КонецЕсли;
		Результат.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		// Дату создания и дату регистрации добавили и вычислили выше.
		Результат.Вставить("ДатаУчетаДокумента", Делопроизводство.ДатаУчетаДокумента(Результат));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записать в исходящий документ данные о регистрации со стороны контрагента.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Исходящийдокумент
//  Получатель - ОпределяемыйТип.КонтрагентМЭДО - Контрагент, т.к. в общем случае их может быть несколько.
//  РегистрационныйНомерКонтрагента - Строка - Регистрационный номер контрагента
//  ДатаРегистрацииКонтрагента - Дата -  регистрации контрагента
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
Процедура ЗаписатьВИсходящийДокументРегистрациюКонтрагента(
	Документ, Получатель, РегистрационныйНомерКонтрагента, ДатаРегистрацииКонтрагента, ДанныеОтвета) Экспорт
	
	ЕстьИзменения = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();
	Для Каждого СтрокаТаблицы Из ДокументОбъект.Получатели Цикл
		Если СтрокаТаблицы.Получатель <> Получатель Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ВходящийНомер = РегистрационныйНомерКонтрагента;
		СтрокаТаблицы.ВходящаяДата = ДатаРегистрацииКонтрагента;
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Находит все "обычные" файлы документа, т.е. которые не являются служебными.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Отправляемый Документ
//  ДанныеОтвета - Структура,Неопределено - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 											Если передано, то выдаст туда ошибку, если не найдется ни одного файла
// Возвращаемое значение:
//  ТаблицаЗначений,Неопределено
Функция ПолучитьОбычныеФайлыДокумента(Документ, ДанныеОтвета = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.ТекущаяВерсия,
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.Наименование,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
		|	Файлы.ПодписанЭП
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если ДанныеОтвета <> Неопределено И Таблица.Количество() = 0 Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'У документа нет подписываемого файла PDF.'"),
			ДанныеОтвета);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции


// Проверяет, является ли документ исходящим.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО, ОпределяемыйТип.ПредметМЭДООбъект - Можно передавать и объект и ссылку
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИсходящийДокумент(Документ) Экспорт
	
	Возврат ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ);
	
КонецФункции

#КонецОбласти

// Получает документ по идентификатору, взятому из сообщения МЭДО. 
// Можно переопределить в другой конфигурации, в зависимости от типа данных документа.
// 
// Параметры:
//  ИдентификаторДокумента - Строка - Идентификатор документа строкой, полученный из сообщения МЭДО
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПредметМЭДО, Неопределено - Получить документ по идентификатору
Функция ПолучитьДокументПоИдентификатору(ИдентификаторДокумента) Экспорт
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Справочники.ИсходящиеДокументы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДокумента));
	
	// Проверим, существует ли эта ссылка:
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ссылка")) Тогда
		
		// не нашли исходящий, может найдется входящий:
		Ссылка = Справочники.ВходящиеДокументы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДокумента));
		
		// Проверим, существует ли эта ссылка:
		Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ссылка")) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#Область ОбработкаФайловВКонтейнере

// Записывает регистрационный штамп в служебные файлы документа.
//
// Параметры:
//   ДокументСсылка - ОпределяемыйТип.ПредметМЭДО.
//   ПутьКРегистрационномуШтампу - Строка - полный путь к файлу со штампом.
//   Положение - Структура - Струткура с координатами, см. НовыйПоложениеИзображения.
//
Процедура ЗаписатьРегистрационныйШтамп(ДокументСсылка, ПутьКРегистрационномуШтампу, Положение) Экспорт
	
	ДанныеШтампа = Новый ДвоичныеДанные(ПутьКРегистрационномуШтампу);
	АдресШтампа = ПоместитьВоВременноеХранилище(ДанныеШтампа);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресШтампа;
	СведенияОФайле.ИмяБезРасширения = "РегистрационныйШтамп";
	СведенияОФайле.РасширениеБезТочки = "png";
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДанныеШтампа.Размер();
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);

	РегистрационныйШтамп = ПолучитьРегистрационныйШтамп(ДокументСсылка);
	Если ЗначениеЗаполнено(РегистрационныйШтамп) Тогда
		РаботаСФайламиВызовСервера.СоздатьВерсию(РегистрационныйШтамп, СведенияОФайле);
	Иначе
		РегистрационныйШтамп = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ДокументСсылка, СведенияОФайле);
			
		РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
			ДокументСсылка, 
			Неопределено,
			Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтамп,
			РегистрационныйШтамп,
			Положение);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Присоединяет файл к документу. Если файл существует - он заменяется.
// Файлу ставится признак "Подписывается".
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Владелец файла.
//  НаименованиеФайлаВБазе - Строка - Имя файла
//  ПутьКФайлу - Строка - Полный путь к временному файлу на диске
//  Комментарий - Строка - комментарий в карточку файла.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы - Ссылка на созданный файл, или пустая ссылка, в случае неуспеха.
Функция ПрисоединитьФайл(Документ, НаименованиеФайлаВБазе, ПутьКФайлу, Комментарий, ДанныеОтвета) Экспорт
	
	ФайлСсылка = Справочники.Файлы.ПустаяСсылка();
	
	ВременныйФайл = Новый Файл(ПутьКФайлу);
	Если Не ВременныйФайл.Существует() Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			ПутьКФайлу, 
			НСтр("ru = 'Файл в контейнере описан, но не найден'"),
			СтрШаблон(НСтр("ru = 'Файл %1 описан, но не найден'"), НаименованиеФайлаВБазе),
			ДанныеОтвета);
		Возврат ФайлСсылка;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла	= ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
	СведенияОФайле.ИмяБезРасширения					= НаименованиеФайлаВБазе;
	СведенияОФайле.ВремяИзменения					= ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное		= ТекущаяДатаСеанса();
	СведенияОФайле.Комментарий						= Комментарий;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ТекущаяВерсия.ПометкаУдаления КАК ТекущаяВерсияПомеченаНаУдаление,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.Ссылка КАК ФайлСсылка,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.Наименование = &Наименование");
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр("Наименование", НаименованиеФайлаВБазе);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияФайла = Выборка.ТекущаяВерсия;
		ФайлСсылка = Выборка.ФайлСсылка;
		Если Выборка.ТекущаяВерсияПомеченаНаУдаление Тогда
			ВерсияФайлаОбъект = ВерсияФайла.ПолучитьОбъект();
			ВерсияФайлаОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления Тогда
			ФайлОбъект	= Выборка.ФайлСсылка.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		СведенияОФайле.РасширениеБезТочки				= Выборка.ТекущаяВерсияРасширение;
		СведенияОФайле.ХранитьВерсии					= Выборка.ХранитьВерсии;
		НоваяВерсия = РаботаСФайламиВызовСервера.ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ВерсияФайла);
		Если НоваяВерсия <> Неопределено Тогда
			РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(ФайлСсылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста);
		КонецЕсли;
		//* to do РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(ФайлСсылка, "Подписывается", Истина);
	Иначе
		СведенияОФайле.РасширениеБезТочки				= ВременныйФайл.Расширение;
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Документ, СведенияОФайле);
		//* to do РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(ФайлСсылка, "Подписывается", Истина);
	КонецЕсли;
	
	Возврат ФайлСсылка;
	
КонецФункции

// Записывает визуализацию ЭП в справочник "Файлы" и в РС "Служебные файлы документа".
//
// Параметры:
//   Документ - ОпределяемыйТип.ПредметМЭДО - Документ-владелец.
//   ПутьКФайлуВизуализации - Строка - Путь к файлу визуализации, перед этим файл должен существовать.
//
Процедура ЗаписатьВизуализациюЭП(Документ, ПутьКФайлуВизуализации) Экспорт
	
	ДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлуВизуализации);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресФайла;
	СведенияОФайле.ИмяБезРасширения = "ВизуализацияЭП";
	СведенияОФайле.РасширениеБезТочки = "pdf";
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДанныеФайла.Размер();
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);

	ФайлВизуализации = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Документ, СведенияОФайле);
	
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		Документ, 
		Неопределено,
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП,
		ФайлВизуализации,
		Неопределено);
	
КонецПроцедуры

// Удалить все подписи и изображения отметок подписей файла. Нужно на случай повторной загрузки одного и того же
// документа, чтобы потом заново загрузить все его подписи и отметки.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ-владелец.
Процедура УдалитьФайлыПодписиИСлужебныеФайлы(Документ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлы.Владелец,
		|	СлужебныеФайлы.Файл,
		|	СлужебныеФайлы.Файл.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлы
		|ГДЕ
		|	СлужебныеФайлы.Документ = &Документ
		|	И СлужебныеФайлы.Отношение В (&Отношения)
		|	И НЕ СлужебныеФайлы.Файл.ПометкаУдаления");
	Запрос.УстановитьПараметр("Документ", Документ);
	Отношения = Новый Массив();
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтамп);
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП);
	Запрос.УстановитьПараметр("Отношения", Отношения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СлужебныеФайлыДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ	= Документ;
		МенеджерЗаписи.Владелец	= Выборка.Владелец;
		МенеджерЗаписи.Файл		= Выборка.Файл;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Файл) Тогда
			ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	
	Набор = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Документ);
	Набор.Записать();
	
КонецПроцедуры

// Записывает отметку ЭП в служебные файлы документа.
//
// Параметры:
//   Документ - ОпределяемыйТип.ПредметМЭДО.
//   ИдентификаторЭП - Строка - идентификатор ЭП.
//   ПутьКОтметкеЭП - Строка - полный путь к файлу с изображением отметки ЭП.
//   НомерПодписи - Число - Порядковый номер подписи, когда их может быть несколько
//   Положение - см. НовыйПоложениеИзображения.
//
Процедура ЗаписатьОтметкуЭП(
	Документ, ИдентификаторЭП, ПутьКОтметкеЭП, НомерПодписи = 1, Положение = Неопределено) Экспорт
	
	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоДокументуИВладельцу(Документ, ИдентификаторЭП);
	РаботаСЭП.ЗаписатьОтметкуЭП(Документ, ИдентификаторЭП, ПутьКОтметкеЭП, НомерПодписи, Положение);
	
КонецПроцедуры

// Записать файл внешней ЭП в РС ЭлектронныеПодписи
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы - Документ или конкретный его файл (в случае приложений).
//  ИдентификаторПодписи - УникальныйИдентификатор - Идентификатор подписи
//  ПутьКФайлуПодписи - Строка -  Путь к файлу подписи (.p7s)
// 
// Возвращаемое значение:
//  Строка - Получившийся идентификатор подписи
Функция ЗаписатьВнешнююЭП(Файл, ПутьКФайлуПодписи) Экспорт
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	ДанныеДляЗанесенияВБазу = Новый Структура;
	ДанныеДляЗанесенияВБазу.Вставить("ПодписанныйОбъект", Файл);
	
	СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.Подпись = Новый ДвоичныеДанные(ПутьКФайлуПодписи);
	СвойстваПодписи.ПодписанныйОбъект = Файл;
	СвойстваПодписи.ПодписьВерна = Истина;
	СвойстваПодписи.СертификатДействителен = Истина;
	ДанныеДляЗанесенияВБазу.Вставить("СвойстваПодписи", СвойстваПодписи);
	
	МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
	РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу);
	
	ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.УникальныйИдентификатор
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.Объект = &ВерсияФайла");
	Запрос.УстановитьПараметр("ВерсияФайла", ВерсияФайла);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат "" + Выборка.УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияСправочников

// Функция - Определяет контрагента по наименованию и идентификатору внешней системы, если не найден - создает нового.
//           Если найдено больше одного - берется тот, который чаще встречался во входящих документах за последний год.
//
// Параметры:
//  Наименование	 - Строка	 - Наименование контрагента
//  Идентификатор	 - Строка	 - Идентификатор контрагента из сообщения МЭДО
//  ДатаСведений	 - Дата		 - Дата актуальности наименования контрагента, на случай смены названия.
//  							Если в конфигурации это не предусмотрено, то параметр не влияет на работу.
//  ТолькоНайти		 - Булево	 - Только найти, не создавая.
//  ДанныеОтвета	 - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  см. МЭДОСтруктурыДанных.НовыйКонтрагент.
Функция НайтиСоздатьКонтрагента(Наименование, Идентификатор, ДатаСведений, ТолькоНайти, ДанныеОтвета) Экспорт
	
	Данные = МЭДОСтруктурыДанных.НовыйКонтрагент();
	
	КонтрагентСсылка = ПолучитьОбъектИБПоИдентификатору(Идентификатор, МЭДО.Обозначение_ВнешнийКонтрагент());
	Если ЗначениеЗаполнено(Контрагентссылка) Тогда
		Данные = МЭДО.ПолучитьПоляКонтрагента(КонтрагентСсылка, ДатаСведений, Ложь, ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	// Поиск по наименованию в справочнике Контрагенты, с учетом частоты использования
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТКонтрагент.Ссылка КАК ОсновнойКонтрагент,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВходящиеДокументы.Ссылка) КАК КолвоДокуменов
		|ИЗ
		|	ВТКонтрагент КАК ВТКонтрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ПО ВТКонтрагент.Ссылка = ВходящиеДокументы.Отправитель
		|		И (ВходящиеДокументы.ДатаСоздания > &ДатаОтсчета)
		|СГРУППИРОВАТЬ ПО
		|	ВТКонтрагент.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КолвоДокуменов УБЫВ");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ДатаОтсчета", ТекущаяДатаСеанса() - 365*24*60*60);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КонтрагентСсылка = Выборка.ОсновнойКонтрагент;
		Данные = МЭДО.ПолучитьПоляКонтрагента(КонтрагентСсылка, ДатаСведений, Ложь, ДанныеОтвета);
		Данные.Идентификатор = Идентификатор;
	Иначе
		Если ТолькоНайти Тогда
			Возврат Данные;
		КонецЕсли;
		
		// не найден, создаем нового:
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Наименование = Наименование;
		НовыйКонтрагент.НаименованиеПолное = Наименование;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НовыйКонтрагент.Записать();
		
		Данные.КонтрагентСсылка = НовыйКонтрагент.Ссылка;
		Данные.Наименование =  Наименование;
		Данные.Идентификатор = Идентификатор;
	КонецЕсли;

	// Привязка контрагента к идентификатору МЭДО, если новый контрагент, если старый, то убедиться, что есть связь.
	СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
		Идентификатор, МЭДО.Обозначение_ВнешнийКонтрагент(), Данные.КонтрагентСсылка);
	
	Возврат Данные;
	
КонецФункции

// Функция - Определяет контактное лицо по владельцу и наименованию, если не найден - создает нового.
//           Если найдено больше одного - берется то, которое чаще встречалось во входящих документах за последний год.
//
// Параметры:
//  СтруктураВладелец - Структура - Структура, см. МЭДОСтруктурыДанных.НовыйКонтрагент. Структура описывает 
//  								контрагента-владельца контактного лица
//  Наименование - Строка - Наименование контактного лица
//  Идентификатор - Строка - Идентификатор во внешней системе. В некоторых структурах данных xsd-схемы может
//  						 отсутствовать, тогда синхронизация только по наименованию + Контрагент.
//  ДатаСведений - Дата - Дата актуальности контактной информации, если поддерживается периодичность КИ. Если нет, то
//  					  дата не важна.
// 
// Возвращаемое значение:
//  см. МЭДОСтруктурыДанных.НовыйКонтактноеЛицо.
Функция НайтиСоздатьКонтактноеЛицо(СтруктураВладелец, Наименование, Идентификатор, ДатаСведений) Экспорт
	
	Данные = МЭДОСтруктурыДанных.НовыйКонтактноеЛицо();
	
	Если Не ЗначениеЗаполнено(СтруктураВладелец.КонтрагентСсылка) Тогда
		Возврат Данные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		КонтактноеЛицоСсылка = ПолучитьОбъектИБПоИдентификатору(Идентификатор, МЭДО.Обозначение_ВнешнееКонтактноеЛицо());
		Если ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
			Данные = ПолучитьПоляКонтактногоЛица(КонтактноеЛицоСсылка, ДатаСведений);
			Возврат Данные;
		КонецЕсли;
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛица.Должность
		|ПОМЕСТИТЬ ВТКонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И КонтактныеЛица.Наименование = &Наименование
		|	И НЕ КонтактныеЛица.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТКонтактноеЛицо.КонтактноеЛицо КАК КонтактноеЛицо,
		|	ВТКонтактноеЛицо.Должность КАК Должность,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВходящиеДокументы.Ссылка) КАК КолвоДокуменов
		|ИЗ
		|	ВТКонтактноеЛицо КАК ВТКонтактноеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ПО ВТКонтактноеЛицо.КонтактноеЛицо = ВходящиеДокументы.Подписал
		|		И (ВходящиеДокументы.ДатаСоздания > &ДатаОтсчета)
		|СГРУППИРОВАТЬ ПО
		|	ВТКонтактноеЛицо.КонтактноеЛицо,
		|	ВТКонтактноеЛицо.Должность
		|
		|УПОРЯДОЧИТЬ ПО
		|	КолвоДокуменов УБЫВ"
	);
	Запрос.УстановитьПараметр("Владелец", СтруктураВладелец.КонтрагентСсылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ДатаОтсчета", ТекущаяДатаСеанса() - 365*24*60*60);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонтактноеЛицоСсылка = Неопределено;
	Если Выборка.Следующий() Тогда
		КонтактноеЛицоСсылка = Выборка.КонтактноеЛицо;
		Данные = ПолучитьПоляКонтактногоЛица(КонтактноеЛицоСсылка, ДатаСведений);
	Иначе
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Владелец = СтруктураВладелец.КонтрагентСсылка;
		НовоеКонтактноеЛицо.Наименование = Наименование;
		НовоеКонтактноеЛицо.Записать();
		
		КонтактноеЛицоСсылка = НовоеКонтактноеЛицо.Ссылка;
		
		Данные.КонтактноеЛицоСсылка = КонтактноеЛицоСсылка;
		Данные.ФИО = Наименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) И ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
		// Привязка к идентификатору, если новое, если старое, то убедиться, что есть связь.
		СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
			Идентификатор, МЭДО.Обозначение_ВнешнееКонтактноеЛицо(), КонтактноеЛицоСсылка);
	КонецЕсли;
	
	
	Возврат Данные;
	
КонецФункции

// Заполнить поля контактного лица.
// 
// Параметры:
//  КонтактноеЛицоСсылка - ОпределяемыйТип.КонтактноеЛицоМЭДО - Ссылка на контактное лицо ()
//  ДатаСведений - Дата - Если контактную информацию нужно получить на дату. Если это не предусмотрено
//  						в конфигурации, то эта дата не влияет.
// 
// Возвращаемое значение:
//  см. МЭДОСтруктурыДанных.НовыйКонтактноеЛицо.
Функция ПолучитьПоляКонтактногоЛица(КонтактноеЛицоСсылка, ДатаСведений) Экспорт
	
	Поля = МЭДОСтруктурыДанных.НовыйКонтактноеЛицо();
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
		Возврат Поля;
	КонецЕсли;
	
	Поля.Идентификатор = ИдентификаторВнешнегоОбъекта(КонтактноеЛицоСсылка, МЭДО.Обозначение_ВнешнееКонтактноеЛицо());
	Поля.КонтактноеЛицоСсылка = КонтактноеЛицоСсылка;
	Поля.ФИО = "" + КонтактноеЛицоСсылка;
	
	Если ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Поля.Подразделение.Наименование = "";
		Поля.Подразделение.Идентификатор = "";
		Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицоСсылка, "Должность");
		Если ЗначениеЗаполнено(Должность) Тогда
			Поля.Должность.Наименование = Должность;
			Поля.Должность.Идентификатор = "";
		Иначе
			Поля.Должность.Наименование = НСтр("ru = 'не указана'"); // часто - обязательное поле.
			Поля.Должность.Идентификатор = "";
		КонецЕсли;
		
		Поля.МобильныйТелефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, ,
			ДатаСведений);
		Поля.Телефон = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, ,
			ДатаСведений);
		Если Не ЗначениеЗаполнено(Поля.Телефон) Тогда
			Поля.Телефон = НСтр("ru = 'не указан'"); // часто - обязательное поле.
		КонецЕсли;
		Поля.ЭлектроннаяПочта = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, ,
			ДатаСведений);
		
	ИначеЕсли ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		Реквизиты = РегистрыСведений.СведенияОПользователяхДокументооборот.ПолучитьСведенияОПользователе(КонтактноеЛицоСсылка);
		Если Реквизиты.Свойство("Подразделение") И ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
			Поля.Подразделение.Наименование = "" + Реквизиты.Подразделение;
			Поля.Подразделение.Идентификатор = "" + Реквизиты.Подразделение.УникальныйИдентификатор();
		КонецЕсли;
		
		Если Реквизиты.Свойство("Должность") И ЗначениеЗаполнено(Реквизиты.Должность) Тогда
			Поля.Должность.Наименование = "" + Реквизиты.Должность;
			Поля.Должность.Идентификатор = "" + Реквизиты.Должность.УникальныйИдентификатор();
		Иначе
			Поля.Должность.Наименование = НСтр("ru = 'не указана'"); // часто - обязательное поле.
			Поля.Должность.Идентификатор = "";
		КонецЕсли;
		
		Поля.МобильныйТелефон = "";
		Поля.Телефон = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, ,
			ДатаСведений);
		Если Не ЗначениеЗаполнено(Поля.Телефон) Тогда
			Поля.Телефон = НСтр("ru = 'не указан'"); // часто - обязательное поле.
		КонецЕсли;
		Поля.ЭлектроннаяПочта = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.EmailПользователя, ,
			ДатаСведений);
		
	КонецЕсли;

	Поля.КонтактнаяИнформацияПредставление = 
		МЭДО.ЗаполненноеЗначениеСтрокой(НСтр("ru = 'Тел:'"), Поля.Телефон, "; ", "")
		+ МЭДО.ЗаполненноеЗначениеСтрокой(НСтр("ru = 'Тел:'"), Поля.МобильныйТелефон, "; ", "")
		+ МЭДО.ЗаполненноеЗначениеСтрокой(НСтр("ru = 'e-mail:'"), Поля.ЭлектроннаяПочта, "", "");

	Возврат Поля;
	
КонецФункции

// Возвращает идентификатор внешнего объекта в МЭДО по объекту в этой базе.
//
// Параметры:
//   СсылкаНаОбъектИБ - ЛюбаяСсылка - Ссылка на объект в этой информационной базе
//   ТипВнешнегоОбъекта - Строка
//
// Возвращаемое значение:
//   Строка - идентификатор объекта, ранее полученный из МЭДО,
//     или пустая строка если не найдено.
//
Функция ИдентификаторВнешнегоОбъекта(СсылкаНаОбъектИБ, ТипВнешнегоОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектИБ) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьИдентификаторПоОбъектуДО(
		СсылкаНаОбъектИБ, ТипВнешнегоОбъекта);
	
КонецФункции

// Создать/проверить связь объекта в данной ИБ и внешнего объекта
// 
// Параметры:
//  ИДВнешнегоОбъекта - Строка - Уникальный идентификатор внешнего объекта.
//  ТипВнешнегоОбъекта - Строка - Тип внешнего объекта
//  СсылкаНаОбъектИБ - ЛюбаяСсылка - Ссылка на объект в этой информационной базе
// 
Процедура СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектИБ) Экспорт
	
	Если Не ЗначениеЗаполнено(ИДВнешнегоОбъекта) Или Не ЗначениеЗаполнено(СсылкаНаОбъектИБ) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектИБ);
		
КонецПроцедуры

// Получить объект ИБ по идентификатору из внешней системы.
// 
// Параметры:
//  ИДВнешнегоОбъекта - Строка - Уникальный идентификатор внешнего объекта.
//  ТипВнешнегоОбъекта - Строка - Тип внешнего объекта
// 
// Возвращаемое значение:
//  Неопределено, Произвольный - Получить объект ИБПо идентификатору
Функция ПолучитьОбъектИБПоИдентификатору(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта) Экспорт
	
	МассивОбъектов = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
		ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, Истина);
	Если МассивОбъектов.Количество() > 0 Тогда
		Возврат МассивОбъектов[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Термин "Организация".
// 
// Возвращаемое значение:
//  Строка 
Функция Организация() Экспорт
	
	Возврат РедакцииКонфигурацииКлиентСервер.Организация();
	
КонецФункции

// Термин "Организация" в родительном падеже.
// 
// Возвращаемое значение:
//  Строка
Функция ОрганизацииРодительный() Экспорт
	
	Возврат РедакцииКонфигурацииКлиентСервер.ОрганизацииРодительный();
	
КонецФункции

// Обращение к организации по умолчанию для данной конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Организация - Организация по умолчанию, если организаций несколько или ни одной, то пустая.
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецФункции

// Возвращает текущего ответственного - пользователя, сотрудника... - так, как принято в этой конфигурации 
//
// Возвращаемое значение:
//  ОпределяемыйТип.ОтветственныйМЭДО - Значение, характеризующее текущего пользователя (пользователь, сотрудник...).
Функция ТекущийОтветственный() Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

// Есть ли у текущего пользователя полные права.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПолныеПрава() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

// Возвращает пустую структуру - положение изображения для размещения в документе.
// 
// Возвращаемое значение:
//  Структура - Новый положение изображения:
// * Страница - Число -
// * Слева - Число -
// * Сверху - Число -
// * Ширина - Число -
// * Высота - Число -
Функция НовыйПоложениеИзображения() Экспорт
	
	Возврат РаботаСЭП.НовыйПоложениеИзображения();
	
КонецФункции

// Актуальное на дату название юрлица - контрагента или организации.
// Т.е. либо полное наименование, либо просто наименование, если нет полного. Если в конфигураии нет такого функционала
// для периодичности наименований, то функция должна вернуть просто обычное наименование.
// 
// Параметры:
//  Юрлицо - ОпределяемыйТип.Юрлицо - Контрагент или организация
//  ДатаСведений - Дата - Дата сведений. 
//      Если передана пустая дата или Неопределено, то возвращаются актуальные данные, из самого справочника 
//      Контрагенты/Организации.
// 
// Возвращаемое значение:
//  Строка - Наименование или полное наименование юрлица.
Функция НаименованиеЮрлицаНаДату(Юрлицо, Знач ДатаСведений = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Юрлицо, "Наименование");
	
КонецФункции

// Определяет ссылку нового объекта, если даже он пока не записан. Если записан, то просто ссылку на этот объект
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - Новый объект.
// 
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка - Ссылка на новый объект.
//
Функция СсылкаНовогоОбъекта(Объект) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.СсылкаНовогоОбъекта(Объект);
	
КонецФункции

#Область ПереопределяемыеТипы

// Пустая ссылка на сотрудника нашей организации - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция СотрудникПустаяСсылка() Экспорт
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции

// Пустая ссылка на контактное лицо - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция КонтактноеЛицоПустаяСсылка() Экспорт
	Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
КонецФункции

// Пустая ссылка на контрагента - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтрагентМЭДО
Функция КонтрагентПустаяСсылка() Экспорт
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции

Функция ТипКонтрагенты() Экспорт
	Возврат Тип("СправочникСсылка.Контрагенты");
КонецФункции

// Имя формы выбора контактного лица - зависит от конфигурации.
// 
// Возвращаемое значение:
//  Строка
Функция КонтактныеЛицаФормаВыбора() Экспорт
	Возврат "Справочник.КонтактныеЛица.ФормаВыбора";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает регистрационный штамп из служебных файлов документа.
//
// Параметры:
//   Документ - ОпределяемыйТип.ПредметМЭДО.
//   Положение - Структура - неявно возвращаемое значение, положение штампа; см. НовыйПоложениеИзображения.
//
//  Возвращаемое значение:
//    СправочникСсылка.Файлы - файл-изображение регистрационного штампа.
//
Функция ПолучитьРегистрационныйШтамп(Документ, Положение = Неопределено)
	
	ДополнительныеСведения = Неопределено;
	РегистрационныйШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		Документ,
		Неопределено,
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтамп,
		ДополнительныеСведения);
	
	Положение = НовыйПоложениеИзображения();
	Если ДополнительныеСведения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Положение, ДополнительныеСведения);
	КонецЕсли;
	Возврат РегистрационныйШтамп;
	
КонецФункции

// Получив сведения о регистрации, обновляет изображение регистрационного штампа в служебных файлах документа.
//
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ПредметМЭДООбъект - Форма.Объект или объект документа
//  ВидДокументаКэш - Структура - имеет минимум 2 поля:
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
// 
//   ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
//
Процедура ОбновитьРегистрационныйШтамп(ДокументОбъект, ВидДокументаКэш, ДанныеОтвета)
	
	СведенияОРегистрации = Новый Структура("РегистрационныйНомер, ДатаРегистрации, ЭтоВходящийДокумент");
	ЗаполнитьЗначенияСвойств(СведенияОРегистрации, ДокументОбъект);
	СведенияОРегистрации.ЭтоВходящийДокумент = ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
	
	Если ЗначениеЗаполнено(СведенияОРегистрации.РегистрационныйНомер)
			И ЗначениеЗаполнено(СведенияОРегистрации.ДатаРегистрации) Тогда
		ПутьКРегистрационномуШтампу = Делопроизводство.СоздатьРегистрационныйШтамп(СведенияОРегистрации);
		
		Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(ДокументОбъект.Организация, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат;
		КонецЕсли;
		
		Положение = НовыйПоложениеИзображения();
		Положение.Страница	= 1;
		Положение.Сверху	= Настройки.ШтампСверху;
		Положение.Слева		= Настройки.ШтампСлева;
		Положение.Ширина	= Настройки.ШтампШирина;
		Положение.Высота	= Настройки.ШтампВысота;
		
		ЗаписатьРегистрационныйШтамп(ДокументОбъект.Ссылка, ПутьКРегистрационномуШтампу, Положение);
		УдалитьФайлы(ПутьКРегистрационномуШтампу);
		
	Иначе
		// Удаляем регистрационный штамп из служебных файлов документа.
		РегистрационныйШтамп = ПолучитьРегистрационныйШтамп(ДокументОбъект.Ссылка);
		Если ЗначениеЗаполнено(РегистрационныйШтамп) Тогда
			РегистрыСведений.СлужебныеФайлыДокументов.УдалитьФайл(ДокументОбъект.Ссылка, РегистрационныйШтамп);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Выполняет запрос и возвращает выборку ЭП указанной версии файла.
//
// Параметры:
//  ВерсияФайла	 - ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//   * УникальныйИдентификатор - УникальныйИдентификатор
//   * Пользователь - ОпределяемыйТип.КонтактноеЛицоМЭДО - Пользователь/Сотрудник
//   * Подпись - ХранилищеЗначения
//   * ДатаПодписи - Дата
Функция ВыборкаПодписейВерсииФайла(ВерсияФайла)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭП.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЭП.УстановившийПодпись КАК Пользователь,
		|	ЭП.Подпись КАК Подпись,
		|	ЭП.ДатаПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект = &ВерсияФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭП.ДатаПодписи УБЫВ");
	Запрос.УстановитьПараметр("ВерсияФайла", ВерсияФайла);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Добавить требуемое поле.
// 
// Параметры:
//  СопоставлениеПолей - ТаблицаЗначений - Таблица требуемых полей куда добавить:
//   * ИмяПоля - Строка - 
//   * ИмяПоляКакВОбъекте - Строка - 
//  ИмяПоля - Строка - с таким названием надо поле вернуть для формирования структур МЭДО.
//  ИсходныйСписокПолей - Строка, Число - Исходный список полей
//  ИмяПоляКакВОбъекте - Неопределено, Строка - Так поле называется в объекте метаданных этой конфигурации.
// 
// Возвращаемое значение:
//  Булево - Добавить требуемое поле
Функция ДобавитьТребуемоеПоле(СопоставлениеПолей, ИмяПоля, ИсходныйСписокПолей, Знач ИмяПоляКакВОбъекте = Неопределено)
	
	Если ИмяПоляКакВОбъекте = Неопределено Тогда
		ИмяПоляКакВОбъекте = ИмяПоля;
	КонецЕсли;
	
	Если СтрНайти(ИсходныйСписокПолей, ИмяПоля) > 0 Тогда
			Новая = СопоставлениеПолей.Добавить();
			Новая.ИмяПоля = ИмяПоля;
			Новая.ИмяПоляКакВОбъекте = ИмяПоляКакВОбъекте;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, СсылкаНаОбъект)

	Если СопоставлениеПолей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаОбъект, СопоставлениеПолей.ВыгрузитьКолонку("ИмяПоляКакВОбъекте"));
	Для Каждого КлючЗначение Из Реквизиты Цикл
		СтрокаПолей = СопоставлениеПолей.Найти(КлючЗначение.Ключ, "ИмяПоляКакВОбъекте");
		Если СтрокаПолей = Неопределено Тогда
			Продолжить; // теоретически невозможная ситуация.
		КонецЕсли;
		
		Результат.Вставить(СтрокаПолей.ИмяПоля, КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, относится ли вообще документ к МЭДО или нет
// 
// Параметры:
//  ФормаОбъект - ДанныеФормыСтруктура, ОпределяемыйТип.ПредметМЭДООбъект - Форма.Объект или Объект документа.
//  ВидДокументаКэш - Структура - имеет минимум 2 поля:
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
// 
// Возвращаемое значение:
//  Булево - Это докмент МЭДО или нет.
Функция ЭтоДокументМЭДО(ФормаОбъект, ВидДокументаКэш)
	
	Если Не ЗначениеЗаполнено(ФормаОбъект.Ссылка) Тогда
		Возврат Ложь;
	
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьМЭДО") Тогда
		Возврат Ложь;
		
	ИначеЕсли Не ВидДокументаКэш.Свойство("ЯвляетсяИсходящейКорреспонденцией")
		Или Не ВидДокументаКэш.Свойство("ЯвляетсяВходящейКорреспонденцией") Тогда
		Возврат Ложь;
	
	ИначеЕсли Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией
		И Не ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
		Возврат Ложь;
		
	ИначеЕсли ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
		
		СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.ПолучитьСостояниеДокумента(
			ФормаОбъект.Ссылка,
			Перечисления.СостоянияДокументовМЭДО.ДокументПолучен,
			"Состояние",
			ТекущаяДатаСеанса());
		Если Не ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		
		ОтборСпособа = Новый Структура("СпособОтправки", Справочники.СпособыДоставки.МЭДО);
		Если ФормаОбъект.Получатели.НайтиСтроки(ОтборСпособа).Количество() = 0 Тогда
			Возврат Ложь
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти