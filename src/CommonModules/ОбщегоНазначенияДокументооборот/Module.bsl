#Область ПрограммныйИнтерфейс

// Возвращает Истину, если клиентское приложение является веб клиентом,
// иначе Ложь.
//
Функция ПриложениеЯвляетсяВебКлиентом() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат ЗначениеЗаполнено(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Выполняется в привилегированном режиме.
// 
Функция ЗначенияРеквизитовОбъектаВПривилегированномРежиме(Ссылка, Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// Выполняется в привилегированном режиме.
//
Функция ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы
// для нескольких объектов. Выполняется в привилегированном режиме.
// 
Функция ЗначенияРеквизитовОбъектовВПривилегированномРежиме(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные);
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
// Выполняется в привилегированном режиме.
//
Функция ЗначениеРеквизитаОбъектовВПривилегированномРежиме(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь);
	
КонецФункции

// Получает текущую дату в миллисекундах
//  
// Параметры:
//  ДатаВремя - Дата - преобразуемая дата
//
// Возвращаемое значение:
//  Число - количество миллисекунд, прошедших от 01.01.0001 00:00:00 до текущей даты
// 
Функция ТекущаяДатаВМиллисекундах() Экспорт

	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() + (ТекущаяДата() - ТекущаяУниверсальнаяДата()) * 1000;
			
КонецФункции

// Получает дату в миллисекундах
//
// Параметры:
//  ДатаВремя - Дата - преобразуемая дата
//
// Возвращаемое значение:
//  Число - количество миллисекунд, прошедших от 01.01.0001 00:00:00 до переданной даты (на начало секунды)
// 
Функция ДатаВМиллисекундах(ДатаВремя) Экспорт
	
	ПустаяДата = Дата('00010101000000');
	Результат = (ДатаВремя - ПустаяДата) * 1000;
	
	Возврат Результат;
	
КонецФункции

// Преобразует дату в миллисекундах в дату
//
// Параметры:
//  ДатаВМиллисекундах - количество миллисекунд начиная с 01.01.0001 00:00:00
//
// Возвращаемое значение:
//  Дата
// 
Функция ПреобразоватьМиллисекундыВДату(ДатаВМиллисекундах) Экспорт
	
	ПустаяДата = Дата('00010101000000');
	Результат = ПустаяДата + ДатаВМиллисекундах / 1000;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив результататов запроса. 
// Каждый результат содержит выборку по одной из временных таблиц с именем, входящим в массив ИменаТаблиц.
// 
// Индексы результатов соответствуют индексам имен ВТ в массиве ИменаТаблиц.
// Если временная таблица не была найдена в запросе, 
// то по соответствующем индексу будет возвращено Неопределено вместо результата запроса.
// 
Функция ДанныеИзВременныхТаблицЗапроса(БазовыйЗапрос, ИменаТаблиц) Экспорт
	
	Данные = Новый Массив;
	
	// Формирование запроса, который выберет информацию из нужных временных таблиц
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	НомерПодзапроса = 0;
	НомераПодзапросов = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Данные.Добавить(Неопределено);
		
		Если Найти(БазовыйЗапрос.Текст, "ПОМЕСТИТЬ " + ИмяТаблицы) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|")
		+ "ВЫБРАТЬ * ИЗ " + ИмяТаблицы;
		
		НомераПодзапросов.Вставить(ИмяТаблицы, НомерПодзапроса);
		НомерПодзапроса = НомерПодзапроса + 1;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат Данные;
	КонецЕсли;
	
	// Выполнение запроса для заполнения временных таблиц
	БазовыйЗапрос.МенеджерВременныхТаблиц = МВТ;
	БазовыйЗапрос.Выполнить();
	
	// Формирование результата
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Для Сч = 0 По ИменаТаблиц.Количество() - 1 Цикл
		
		ИмяТаблицы = ИменаТаблиц[Сч];
		НомерПодзапроса = НомераПодзапросов.Получить(ИмяТаблицы);
		
		Если НомерПодзапроса <> Неопределено Тогда
			Данные[Сч] = РезультатыЗапросов[НомерПодзапроса];
		КонецЕсли;
		
	КонецЦикла;
	
	МВТ.Закрыть();
	
	Возврат Данные;
	
КонецФункции

// Устаналивает стандартные цвета диаграмм отчета.
//
// Параметры:
//   ДокументРезультат - ТабличныйДокумент - оформляемый результат отчета.
//
Процедура УстановитьЦветаДиаграмм(ДокументРезультат) Экспорт
	
	Для Каждого Рисунок из ДокументРезультат.Рисунки Цикл
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма Тогда
			УстановитьЦветаДиаграммы(Рисунок.Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, загружается ли объект из узла РИБ. Предназначена для вызова из обработчиков событий
// ПередЗаписью и ПриЗаписи модулей объектов, а также в обработчиках подписок на события. Объект,
// загружаемый не из узла РИБ, требует обновления связанных данных. Объект, загружаемый из узла
// РИБ, загружается вместе со связанными данными, заполненными при его записи в узле-источнике.
//
// Параметры:
//   Объект - Произвольный - записываемый объект.
//
// Возвращаемое значение:
//   Булево - Истина, если объект загружается из узла РИБ, и Ложь в противном случае.
//
Функция ЭтоЗагрузкаИзУзлаРИБ(Объект) Экспорт
	
	Возврат Объект.ОбменДанными.Загрузка = Истина
		И ТипЗнч(Объект.ОбменДанными.Отправитель) = Тип("ПланОбменаСсылка.Полный");
	
КонецФункции

// Проверяет наличие метода менеджера объекта.
// Для проверки используется дополнительный метод "ЕстьМетод<ИмяМетода>".
//
// Параметры:
//  МенеджерОбъекта - СправочникМенеджер, ДокументМенеджер и т.п.
//  ИмяМетода - Строка - имя метода, наличие которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если есть метод, Ложь в противном случае.
//
Функция ЕстьМетодМенеджера(МенеджерОбъекта, ИмяМетода) Экспорт
	
	ПолноеИмя = МенеджерОбъекта.ПустаяСсылка().Метаданные().ПолноеИмя();
	
	Возврат ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(ПолноеИмя, ИмяМетода);
	
КонецФункции

// Устанавливает дополнительное свойство ЭтоНовый.
//
// Параметры:
//  Объект - Любой объект - Объект.
//
Процедура УстановитьДополнительноеСвойствоЭтоНовый(Объект) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	
КонецПроцедуры

// Устанавливает дополнительное свойство ПредыдущиеЗначенияРеквизитов.
//
// Параметры:
//  Объект - Любой объект - Объект.
//
Процедура УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(Объект) Экспорт
	
	УстановитьДополнительноеСвойствоЭтоНовый(Объект);
	
	Если Объект.ДополнительныеСвойства.ЭтоНовый
		Или Объект.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ОтслеживаемыеРеквизиты = МенеджерОбъекта.ОтслеживаемыеРеквизиты();
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Ссылка,
		ОтслеживаемыеРеквизиты);
	Объект.ДополнительныеСвойства.Вставить(
		"ПредыдущиеЗначенияРеквизитов",
		ПредыдущиеЗначенияРеквизитов);
	
КонецПроцедуры

// Возвращает массив всех родителей переданного элемента.
// 
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на элемент иерархического справочника.
//
// Возвращаемое значение:
//  Массив - массив родителей элемента по всей иерархии, отсортированный по старшинству в порядке возрастания.
//  Если родителей нет, то пустой массив.
//
Функция ВсеРодителиЭлемента(Ссылка) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Родитель КАК Родитель1,
		|	ТаблицаСправочника.Родитель.Родитель КАК Родитель2,
		|	ТаблицаСправочника.Родитель.Родитель.Родитель КАК Родитель3
		|ИЗ
		|	%1 КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка = &Ссылка";
		
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ТекстЗапроса, Ссылка.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ПрекратитьОбработку = Ложь;
	Пока Не ПрекратитьОбработку Цикл
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.Родитель1) Тогда
				Результат.Добавить(Выборка.Родитель1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Родитель2) Тогда
				Результат.Добавить(Выборка.Родитель2);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Родитель3) Тогда
				Результат.Добавить(Выборка.Родитель3);
				Запрос.УстановитьПараметр("Ссылка", Выборка.Родитель3);
			Иначе
				ПрекратитьОбработку = Истина;
			КонецЕсли;
		Иначе
			ПрекратитьОбработку = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Помещает выделенные строки табличной части в буфер обмена.
// Параметры:
//  ТабличнаяЧасть   - ДанныеФормыКоллекция - Табличная часть, строки которой
//                     необходимо поместить в буфер обмена.
//  ВыделенныеСтроки - Массив - Массив идентификаторов выделенных строк.
//  Источник         - Строка - Имя объекта, строки табличной части которого
//                     помещаются в буфер обмена.
//
Процедура СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(ТабличнаяЧасть, ВыделенныеСтроки, Источник = Неопределено) Экспорт
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		КопируемаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивФайлов.Добавить(КопируемаяСтрока.Ссылка);


	КонецЦикла;
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	
	Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
		Адрес = ТекущийБуферОбмена.Данные;
	Иначе
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеВХранилище = ПоместитьВоВременноеХранилище(МассивФайлов, Адрес);
	
	СтруктураБуфераОбмена = Новый Структура;
	СтруктураБуфераОбмена.Вставить("Источник", Источник);
	СтруктураБуфераОбмена.Вставить("Данные", ДанныеВХранилище);
	
	ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);
	
КонецПроцедуры

// Помещает выделенные строки табличной части в буфер обмена.
// Параметры:
//  ТабличнаяЧасть   - ДанныеФормыКоллекция - Табличная часть, строки которой
//                     необходимо поместить в буфер обмена.
//  ВыделенныеСтроки - Массив - Массив идентификаторов выделенных строк.
//  Источник         - Строка - Имя объекта, строки табличной части которого
//                     помещаются в буфер обмена.
//
Процедура СкопироватьФайлыВБуферОбменаИзСпискаФайлов(ВыделенныеСтроки, Источник = Неопределено) Экспорт
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	
	Для Каждого СсылкаФайла Из ВыделенныеСтроки Цикл
		МассивФайлов.Добавить(СсылкаФайла);
	КонецЦикла;
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	
	Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
		Адрес = ТекущийБуферОбмена.Данные;
	Иначе
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеВХранилище = ПоместитьВоВременноеХранилище(МассивФайлов, Адрес);
	
	СтруктураБуфераОбмена = Новый Структура;
	СтруктураБуфераОбмена.Вставить("Источник", Источник);
	СтруктураБуфераОбмена.Вставить("Данные", ДанныеВХранилище);
	
	ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);
	
КонецПроцедуры

// Выдялет слова поиска в представлении данных.
//
// Параметры:
//  Данные - СписокЗначений - Данные.
//  СловаПоиска - Массив - Слова поиска.
//
// Возвращаемое значение:
//  СписокЗначений - Данные с выделенными словами поиска.
//
Функция ВыделитьСловаПоиска(Данные, СловаПоиска) Экспорт
	
	ВыделенныеДанные = Новый СписокЗначений;
	Если СловаПоиска.Количество() = 0 Тогда
		Возврат ВыделенныеДанные;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из Данные Цикл
		Представление = ФорматированныйРезультатПоиска(ЭлементДанных.Представление, СловаПоиска);
		ВыделенныеДанные.Добавить(ЭлементДанных.Значение, Представление);
	КонецЦикла;
	
	Возврат ВыделенныеДанные;
	
КонецФункции

// Формирует форматированный результат поиска по словам.
//
// Параметры:
//  РезультатПоиска - Строка - Строка результат поиска.
//  СловаПоиска - Массив - Слова поиска.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Форматированная строка результат поиска.
//
Функция ФорматированныйРезультатПоиска(РезультатПоиска, СловаПоиска) Экспорт
	
	Представление = Новый Массив;
	Представление.Добавить(РезультатПоиска);
	Для Каждого СловоПоиска Из СловаПоиска Цикл
		ДлинаСловаПоиска = СтрДлина(СловоПоиска);
		НовоеПредставление = Новый Массив;
		Для Каждого СловоПредставления Из Представление Цикл
			Если ТипЗнч(СловоПредставления) = Тип("ФорматированнаяСтрока") Тогда
				НовоеПредставление.Добавить(СловоПредставления);
				Продолжить;
			КонецЕсли;
			ПозицияСловаПоиска = СтрНайти(НРег(СловоПредставления), СловоПоиска);
			Если ПозицияСловаПоиска = 0 Тогда
				НовоеПредставление.Добавить(СловоПредставления);
				Продолжить;
			КонецЕсли;
			НовоеПредставление.Добавить(Лев(СловоПредставления, ПозицияСловаПоиска - 1));
			НовоеПредставление.Добавить(Новый ФорматированнаяСтрока(
				Сред(СловоПредставления, ПозицияСловаПоиска, ДлинаСловаПоиска),
				ШрифтыСтиля.ВыделениеТекстаВСпискеВыбораШрифт,
				ЦветаСтиля.ВыделениеТекстаВСпискеВыбораЦвет));
			НовоеПредставление.Добавить(Сред(СловоПредставления, ПозицияСловаПоиска + ДлинаСловаПоиска));
		КонецЦикла;
		Представление = НовоеПредставление;
	КонецЦикла;
	ФорматированныйРезультатПоиска = Новый ФорматированнаяСтрока(Представление);
	
	Возврат ФорматированныйРезультатПоиска;
	
КонецФункции

// Разбивает строку поиска по словам.
//
// Параметры:
//  СтрокаПоиска - Строка - Строка поиска.
// 
// Возвращаемое значение:
//  Массив - Слова поиска.
//
Функция СловаПоиска(СтрокаПоиска) Экспорт
	
	СловаПоиска = СтрРазделить(СтрокаПоиска, " ", Ложь);
	КоличествоЭлементов = СловаПоиска.Количество();
	Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
		СловаПоиска[Индекс] = НРег(СловаПоиска[Индекс]);
	КонецЦикла;
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ПроверяемоеСловоПоиска = СловаПоиска[КоличествоЭлементов - Индекс];
		ЯвляетсяПодстрокойДругогоСлова = Ложь;
		Индекс2 = 0;
		Для Каждого СловоПоиска Из СловаПоиска Цикл
			Если Индекс2 = (КоличествоЭлементов - Индекс) Тогда
				Индекс2 = Индекс2 + 1;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(СловоПоиска, ПроверяемоеСловоПоиска) <> 0 Тогда
				ЯвляетсяПодстрокойДругогоСлова = Истина;
				Прервать;
			КонецЕсли;
			Индекс2 = Индекс2 + 1;
		КонецЦикла;
		Если ЯвляетсяПодстрокойДругогоСлова Тогда
			СловаПоиска.Удалить(КоличествоЭлементов - Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СловаПоиска;
	
КонецФункции

// Находит данные, содержащие слова поиска.
//
// Параметры:
//  Данные - СписокЗначений - Данные.
//  СловаПоиска - Массив - Слова поиска.
// 
// Возвращаемое значение:
//  СписокЗначений - Найденные данные.
//
Функция НайтиПоСловамПоиска(Данные, СловаПоиска) Экспорт
	
	НайденныеДанные = Новый СписокЗначений;
	Если СловаПоиска.Количество() = 0 Тогда
		Возврат НайденныеДанные;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из Данные Цикл
		
		НайденыВсеСловаПоиска = Истина;
		Для Каждого СловоПоиска Из СловаПоиска Цикл
			Если Не СтрНайти(НРег(ЭлементДанных), СловоПоиска) Тогда
				НайденыВсеСловаПоиска = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыВсеСловаПоиска Тогда
			НайденныеДанные.Добавить(ЭлементДанных, ЭлементДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеДанные;
	
КонецФункции

// Получает дерево метаданных конфигурации с заданным отбором по объектам метаданных.
//
// Параметры:
//   Отбор - Структура - содержит значения элементов отбора.
//						Если параметр задан, то будет получено дерево метаданных в соответствии с заданным отбором:
//						Ключ - Строка - имя свойства элемента метаданных;
//						Значение - Массив - множество значений для отбора.
//
// Пример инициализации переменной "Отбор":
//
// Массив = Новый Массив;
// Массив.Добавить("Константа.ИспользоватьСинхронизациюДанных");
// Массив.Добавить("Справочник.Валюты");
// Массив.Добавить("Справочник.Организации");
// Отбор = Новый Структура;
// Отбор.Вставить("ПолноеИмя", Массив);
// 
//  Возвращаемое значение:
//   ДеревоЗначений - дерево описания метаданных конфигурации.
//
Функция ДеревоМетаданныхКонфигурации(Отбор = Неопределено) Экспорт
	
	ИспользоватьОтбор = (Отбор <> Неопределено);
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("Константы",               НСтр("ru = 'Константы'"),                 БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Справочники",             НСтр("ru = 'Справочники'"),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Документы",               НСтр("ru = 'Документы'"),                 БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыСчетов",             НСтр("ru = 'Планы счетов'"),              БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,       КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыСведений",        НСтр("ru = 'Регистры сведений'"),         БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыНакопления",      НСтр("ru = 'Регистры накопления'"),       БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыБухгалтерии",     НСтр("ru = 'Регистры бухгалтерии'"),      БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыРасчета",         НСтр("ru = 'Регистры расчета'"),          БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы'"),           БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Задачи",                  НСтр("ru = 'Задачи'"),                    БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 КоллекцииОбъектовМетаданных);
	
	// Возвращаемое значение функции.
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	ДеревоМетаданных.Колонки.Добавить("Синоним");
	ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			Если ИспользоватьОтбор Тогда
				
				ОбъектПрошелФильтр = Истина;
				Для Каждого ЭлементОтбора Из Отбор Цикл
					
					Значение = ?(ВРег(ЭлементОтбора.Ключ) = ВРег("ПолноеИмя"), ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных[ЭлементОтбора.Ключ]);
					Если ЭлементОтбора.Значение.Найти(Значение) = Неопределено Тогда
						ОбъектПрошелФильтр = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ОбъектПрошелФильтр Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваОМ = СтрокаДерева.Строки.Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем строки без подчиненных элементов.
	Если ИспользоватьОтбор Тогда
		
		// Используем обратный порядок обхода дерева значений.
		КоличествоЭлементовКоллекции = ДеревоМетаданных.Строки.Количество();
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
			
			ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
			СтрокаДерева = ДеревоМетаданных.Строки[ТекущийИндекс];
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДеревоМетаданных.Строки.Удалить(ТекущийИндекс);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

// Возвращает имя пользователя ИБ.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Имя пользователя ИБ.
//
Функция ИмяПользователяИБ(Пользователь) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПользовательИБ.Имя;
	
КонецФункции

// Заполняет имя клиентского приложения (User-Agent), используемое при формировании веб-запросов.
// 
// Возвращаемое значение:
//  Строка - Имя клиентского приложения (User-Agent), используемое при формировании веб-запросов.
//
Функция ИмяКлиентскогоПриложения() Экспорт
	
	Возврат "DocMngCorp";
	
КонецФункции

// Заполняет данные клиентского приложения, используемые для авторизации в Google.
//
Функция ИдентификацияПриложенияДляGoogle() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id", "");
	ИдентификаторПриложения.Вставить("client_secret", "");
	ИдентификаторПриложения.Вставить("redirect_uri", "http://localhost");
	ИдентификаторПриложения.Вставить("auth_uri", "https://accounts.google.com/o/oauth2/auth");
	ИдентификаторПриложения.Вставить("token_uri", "https://accounts.google.com/o/oauth2/token");
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторПриложения.client_id = Константы.ИдентификаторПриложенияGoogleClientID.Получить();
	ИдентификаторПриложения.client_secret = Константы.ИдентификаторПриложенияGoogleClientSecret.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(ИдентификаторПриложения.client_id)
		Или Не ЗначениеЗаполнено(ИдентификаторПриложения.client_secret) Тогда
		ИдентификаторПриложения.client_id = "566135723419-pn0f4ps4t4d445udjjks848jaibcubo1.apps.googleusercontent.com";
		ИдентификаторПриложения.client_secret = "8zLIPVs-5TOkP4WkMjbzQ7Ve";
	КонецЕсли;
	
	Возврат ИдентификаторПриложения;
	
КонецФункции

// Шлет письмо по легкой почте и делает запись в журнал регистрации
// 
// Параметры:
//  Наименование - Строка - наименование (для наименования бизнес процесса или Темы письма)
//  Описание - Строка - подробное описание
//  ИмяЗаписиЖурналаРегистрации - Строка - для имени события в журнале регистрации
//  Метаданные - Метаданные, Неопределено - Метаданные для события в ЖР
//  Данные - ЛюбаяСсылка, Неопределено - Данные для события в ЖР
Процедура УведомитьОтветственныхОПроблеме(Наименование, Описание, ИмяЗаписиЖурналаРегистрации,
		Метаданные = Неопределено, Данные = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		ИмяЗаписиЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные,
		Данные,
		Описание);
	
	МассивПользователей = РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.Администрирование);
			
	Если МассивПользователей.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	АдресаОповещения = "";
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		
		Адрес = ВстроеннаяПочтаСервер.ПолучитьОсновнойАдрес(Пользователь);
		
		Если ЗначениеЗаполнено(Адрес) Тогда          
			
			Если ЗначениеЗаполнено(АдресаОповещения) Тогда
				АдресаОповещения = АдресаОповещения + ";";
			КонецЕсли;	
			
			АдресаОповещения = АдресаОповещения + Адрес;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Попытка
	
//		НаименованиеУзла = ОбщегоНазначенияДокументооборот.НаименованиеУзлаБазы();
//		ПолнаяТема = СтрШаблон(НСтр("ru = '%1. %2'"), НаименованиеУзла, Наименование);
		ПолнаяТема = Наименование; 
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Тема", ПолнаяТема);
		ПараметрыПисьма.Вставить("Текст", Описание);
		ПараметрыПисьма.Вставить("Кому", АдресаОповещения);
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст);
	
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2. %3.'"),
			ИмяЗаписиЖурналаРегистрации, Наименование, ОписаниеОшибки);
			
		ЗаписьЖурналаРегистрации(
			ИмяЗаписиЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные,
			Данные,
			ТекстСообщения);
			
	КонецПопытки;
	
	СообщениеОбОшибке = "";
	
	Попытка
		
		КодВозврата = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма,,,СообщениеОбОшибке);
		
		Если КодВозврата = Ложь Тогда
			
			ЗаписьЖурналаРегистрации(
				ИмяЗаписиЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные,
				Данные,
				СообщениеОбОшибке);
			
		КонецЕсли;	
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2.'"),
			ИмяЗаписиЖурналаРегистрации, ОписаниеОшибки);
			
		ЗаписьЖурналаРегистрации(
			ИмяЗаписиЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные,
			Данные,
			ТекстСообщения);
			
	КонецПопытки;
	
КонецПроцедуры	

// Определяет ссылку нового объекта.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - Новый объект.
// 
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка - Ссылка на новый объекта.
//
Функция СсылкаНовогоОбъекта(Объект) Экспорт
	
	СсылкаНовогоОбъекта = Объект.Ссылка;
	Если Не ЗначениеЗаполнено(СсылкаНовогоОбъекта) Тогда
		
		СсылкаНовогоОбъекта = Объект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаНовогоОбъекта) Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			СсылкаНового = МенеджерОбъекта.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНового);
			
			СсылкаНовогоОбъекта = СсылкаНового;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНовогоОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устаналивает стандартные цвета диаграммы отчета.
//
// Параметры:
//   Диаграмма - Диаграмма - оформляемая диаграмма.
//
Процедура УстановитьЦветаДиаграммы(Диаграмма) 
	
	Если Диаграмма.ТипДиаграммы = ТипДиаграммы.Гистограмма
		Или Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаГоризонтальная
		Или Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаСНакоплением
		Или Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная Тогда
		
		НомерОбласти = 0; 
		КоличествоСерий = Диаграмма.Серии.Количество();
		Для Каждого Серия из Диаграмма.Серии Цикл
			Если КоличествоСерий <= 4 Тогда
				Серия.Цвет = ОттенокЦвета(НомерОбласти, 5, 1); // начиная со светло-синего
			Иначе
				Серия.Цвет = КонтрастныйЦвет(НомерОбласти, 5, 1); // начиная со светло-синего
			КонецЕсли;
			НомерОбласти = НомерОбласти + 1;
		КонецЦикла;
		
	ИначеЕсли Диаграмма.ТипДиаграммы = ТипДиаграммы.График
		Или Диаграмма.ТипДиаграммы = ТипДиаграммы.ГрафикПоШагам
		Или Диаграмма.ТипДиаграммы = ТипДиаграммы.ГрафикСОбластями Тогда
		
		НомерОбласти = 0;
		Для Каждого Серия из Диаграмма.Серии Цикл
			Серия.Цвет = ЦветОттенка(НомерОбласти, 5, 5); // начиная с темно-синего
			НомерОбласти = НомерОбласти + 1;
		КонецЦикла;
		
	ИначеЕсли Диаграмма.ТипДиаграммы = ТипДиаграммы.Круговая Тогда
		
		НомерОбласти = 0;
		Для Каждого Серия из Диаграмма.Серии Цикл
			Серия.Цвет = КонтрастныйЦвет(НомерОбласти, 5, 1); // начиная со светло-синего
			НомерОбласти = НомерОбласти + 1;
		КонецЦикла;
		
	Иначе
		
		НомерОбласти = 0;
		Для Каждого Серия из Диаграмма.Серии Цикл
			Серия.Цвет = ОттенокЦвета(НомерОбласти, 5, 1); // начиная со светло-синего
			НомерОбласти = НомерОбласти + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает цвет для указанной области диаграммы, подходящий для диаграмм с большим количеством
// областей. Чередует цвета и избегает слишком светлых цветов.
//
// Параметры:
//   НомерОбласти - Число - номер области (серии, точки) диаграммы.
//   БазовыйЦвет - Число - цвет палитры для области с номером 0.
//   БазовыйОттенок - Число - оттенок палитры для области с номером 0.
//
// Возвращаемое значение:
//   Цвет - цвет из палитры для указанной области.
//
Функция КонтрастныйЦвет(НомерОбласти, БазовыйЦвет, БазовыйОттенок)
	
	Позиция = БазовыйЦвет * 8 + БазовыйОттенок + НомерОбласти * 21;
	НомерЦвета = Цел(Позиция / 8) % 8;
	НомерОттенка = Позиция % 8;
	Если НомерОттенка = 3 И НомерЦвета = 3 Тогда
		НомерЦвета = НомерЦвета - 1;
	ИначеЕсли НомерОттенка = 3 И НомерЦвета = 7 Тогда
		НомерЦвета = НомерЦвета - 1;
	КонецЕсли;

	Возврат ЦветПалитры(НомерЦвета, НомерОттенка);
	
КонецФункции

// Возвращает цвет для указанной области диаграммы, подходящий для диаграмм с небольшим (2-4)
// количеством областей. Дает оттенки одного цвета и избегает слишком светлых цветов.
//
// Параметры:
//   НомерОбласти - Число - номер области (серии, точки) диаграммы.
//   БазовыйЦвет - Число - цвет палитры для области с номером 0.
//   БазовыйОттенок - Число - оттенок палитры для области с номером 0.
//
// Возвращаемое значение:
//   Цвет - цвет из палитры для указанной области.
//
Функция ОттенокЦвета(НомерОбласти, БазовыйЦвет, БазовыйОттенок)
	
	НомерОттенка = (БазовыйОттенок + 5 * НомерОбласти) % 8;
	Если (НомерОттенка = 3 И БазовыйЦвет = 3)
		Или (НомерОттенка = 3 И БазовыйЦвет = 7) Тогда
		НомерЦвета = БазовыйЦвет - 1;
	Иначе
		НомерЦвета = БазовыйЦвет;
	КонецЕсли;
	
	Возврат ЦветПалитры(НомерЦвета, НомерОттенка);
	
КонецФункции

// Возвращает цвет для указанной области диаграммы, подходящий для графиков с небольшим (2-4)
// количеством серий. Чередует цвета одного оттенка (светлоты). Не избегает светлых цветов.
//
// Параметры:
//   НомерОбласти - Число - номер области (серии, точки) диаграммы.
//   БазовыйЦвет - Число - цвет палитры для области с номером 0.
//   БазовыйОттенок - Число - оттенок палитры для области с номером 0.
//
// Возвращаемое значение:
//   Цвет - цвет из палитры для указанной области.
//
Функция ЦветОттенка(НомерОбласти, БазовыйЦвет, БазовыйОттенок)
	
	НомерЦвета = (БазовыйЦвет + 5 * НомерОбласти) % 8;
	
	Возврат ЦветПалитры(НомерЦвета, БазовыйОттенок);
	
КонецФункции

// Возвращает цвет из стандартной палитры по номеру цвета и номеру оттенка.
//
// Параметры:
//   НомерЦвета - Число - 0...7, номер цвета.
//   НомерОттенка - Число - 0...7, номер оттенка указанного цвета.
//     Оттенки светлеют от 0 (средний) до 3 (самый светлый) и
//     темнеют до 7 (самый темный).
//
// Возвращаемое значение:
//   Цвет - цвет палитры.
//
Функция ЦветПалитры(НомерЦвета, НомерОттенка)
	
	Если НомерЦвета = 0 Тогда // красный и бордо
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(229,85,85);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(234,119,119);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(239,153,153);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(245,187,187);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(207,77,91);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(167,69,81);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(130,65,73);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(117,70,59);
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 1 Тогда // оранжевый и коричневый
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(239,116,78);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(242,144,113);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(245,172,149);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(249,199,184);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(228,119,56);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(176,104,62);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(136,86,59);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(123,99,55);
		Иначе
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 2 Тогда // желтый и хаки
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(251, 221, 100);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(252,228,131);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(253,235,162);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(253,241,193);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(237,203,74);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(189,163,67);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(143,125,63);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(122,128,58);
		Иначе
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 3 Тогда // зеленый
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(171,221,185);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(188,228,199);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(205,235,213);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(221,241,227);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(148,194,161);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(123,157,133);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(99,121,106);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(90,111,103);
		Иначе
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 4 Тогда // голубой и циан
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(104,187,219);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(134,201,226);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(164,214,233);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(195,228,241);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(93,164,197);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(81,135,159);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(73,108,124);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(66,84,112);
		Иначе
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 5 Тогда // синий
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(136,160,210);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(160,179,219);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(184,198,228);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(207,217,237);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(119,138,187);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(102,117,152);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(86,96,119);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(79,80,108);
		Иначе
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 6 Тогда // фиолетовый
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(149,133,244);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(170,157,246);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(191,182,248);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(213,206,251);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(132,115,215);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(111,98,173);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(92,83,133);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(98,76,121);
		Иначе
		КонецЕсли;
		
	ИначеЕсли НомерЦвета = 7 Тогда // розовый и маджента
		Если НомерОттенка = 0 Тогда Возврат Новый Цвет(210,170,226);
		ИначеЕсли НомерОттенка = 1 Тогда Возврат Новый Цвет(219,187,232);
		ИначеЕсли НомерОттенка = 2 Тогда Возврат Новый Цвет(228,204,238);
		ИначеЕсли НомерОттенка = 3 Тогда Возврат Новый Цвет(237,221,243);
		ИначеЕсли НомерОттенка = 4 Тогда Возврат Новый Цвет(185,146,197);
		ИначеЕсли НомерОттенка = 5 Тогда Возврат Новый Цвет(150,122,160);
		ИначеЕсли НомерОттенка = 6 Тогда Возврат Новый Цвет(118,99,123);
		ИначеЕсли НомерОттенка = 7 Тогда Возврат Новый Цвет(111,90,108);
		КонецЕсли;
			
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Недопустимый цвет палитры: (%1, %2)'"),
		НомерЦвета,
		НомерОттенка);
		
	ВызватьИсключение ТекстСообщения;
	
КонецФункции

Процедура НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	
КонецПроцедуры

#КонецОбласти