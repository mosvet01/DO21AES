
////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес-процессами вызов сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура УстановитьФорматДаты(ПолеДаты) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ПолеДаты.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Если ПолеДаты.Вид = ВидПоляФормы.ПолеВвода Тогда
		ПолеДаты.ФорматРедактирования = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	КонецЕсли;	
	
КонецПроцедуры		

Функция НайтиВложенныйБизнесПроцесс(ВедущаяЗадача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Согласование.Ссылка
	|ИЗ
	|	БизнесПроцесс.Согласование КАК Согласование
	|ГДЕ
	|	Согласование.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ознакомление.Ссылка
	|ИЗ
	|	БизнесПроцесс.Ознакомление КАК Ознакомление
	|ГДЕ
	|	Ознакомление.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Исполнение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Исполнение КАК Исполнение
	|ГДЕ
	|	Исполнение.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Утверждение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Утверждение КАК Утверждение
	|ГДЕ
	|	Утверждение.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрация.Ссылка
	|ИЗ
	|	БизнесПроцесс.Регистрация КАК Регистрация
	|ГДЕ
	|	Регистрация.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Поручение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Поручение КАК Поручение
	|ГДЕ
	|	Поручение.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рассмотрение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Рассмотрение КАК Рассмотрение
	|ГДЕ
	|	Рассмотрение.ВедущаяЗадача = &ВедущаяЗадача";
	
	Запрос.УстановитьПараметр("ВедущаяЗадача", ВедущаяЗадача);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции	

//Получает значение функциональной опции ИспользоватьДатуИВремяВСрокахЗадач
Функция ПолучитьИспользованиеДатыИВремениВСрокахЗадач() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
КонецФункции

// Возвращает доступность интерактивной пометки удаления процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступностьИнтерактивнойПометкиУдаленияБизнесПроцесса(Процесс) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Процесс) Тогда
		
		ПраваПоПроцессу = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Процесс);
		
		ВедущаяЗадачаПроцесса = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Процесс, "ВедущаяЗадача");
		
		Результат = ПраваПоПроцессу.Изменение И Не ЗначениеЗаполнено(ВедущаяЗадачаПроцесса);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помечает/снимает пометку удаления с бизнес-процессов. В случае если у пользователя нет прав, то
// генерируется исключение.
//
// Параметры:
//	 - СсылкаНаОбъект - БизнесПроцессСсылка
//
Процедура ПометитьНаУдалениеБизнесПроцесс(СсылкаНаОбъект) Экспорт
	
	СписокТиповБизнесПроцессов = Новый СписокЗначений;
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		СписокТиповБизнесПроцессов.Добавить(
			Тип("БизнесПроцессСсылка." + БизнесПроцесс.Имя));
	КонецЦикла;
	
	Если СписокТиповБизнесПроцессов.НайтиПоЗначению(ТипЗнч(СсылкаНаОбъект)) <> Неопределено
		И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		ПраваПоПроцессу = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СсылкаНаОбъект);
		Если ПраваПоПроцессу.Изменение = Ложь Тогда
			ВызватьИсключение НСтр("ru = 'У вас не достаточно прав для установки/снятия пометки удаления.'");
		КонецЕсли;
		
		ВедущаяЗадачаПроцесса = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				СсылкаНаОбъект, "ВедущаяЗадача");
		Если ЗначениеЗаполнено(ВедущаяЗадачаПроцесса) Тогда
			ВызватьИсключение НСтр("ru = 'Изменение пометки удаления подпроцессов входящих в комплексный или составной процесс запрещено.'");
		КонецЕсли;
		
		Попытка
			БизнесПроцессОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НЕ БизнесПроцессОбъект.ПометкаУдаления);
		Исключение
			
			ОписаниеОшибки = "При установке/снятии пометки удаления произошла ошибка.";
			
			ВызватьИсключение ОписаниеОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует и записывает рабочую группу
// Используется в обработке ПередЗаписью процесса
Процедура СформироватьРабочуюГруппу(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Участники = Новый Массив;
	
	// Участники родительских процессов
	// 	только для новых объектов - для ранее записанных эти пользователи уже входят в рабочую группу
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьМассивУчастниковРодительскихПроцессов(Объект, Участники);
	КонецЕсли;
	
	// Удаленные участники процесса - бывший автор и т.п.
	Если Объект.ДополнительныеСвойства.Свойство("УчастникиПроцесса") Тогда
		ТаблицаУчастниковПроцесса = Объект.ДополнительныеСвойства.УчастникиПроцесса;
	Иначе
		ТаблицаУчастниковПроцесса = 
			ПраваДоступаНаБизнесПроцессы.ПолучитьТаблицуУчастниковПроцесса(Объект);
		Объект.ДополнительныеСвойства.Вставить("УчастникиПроцесса", ТаблицаУчастниковПроцесса);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника из ТаблицаУчастниковПроцесса Цикл
		Если СтрокаУчастника.СодержитсяВСтаройВерсии И Не СтрокаУчастника.СодержитсяВНовойВерсии
			И СтрокаУчастника.ВлияетНаДоступКПодчиненнымОбъектам Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник");
			ЗаполнитьЗначенияСвойств(ДанныеУчастника, СтрокаУчастника);
			
			Участники.Добавить(ДанныеУчастника);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Участники.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СсылкаОбъекта = Объект.Ссылка;
		Иначе
			СсылкаНового = Объект.ПолучитьСсылкуНового();
			Если Не ЗначениеЗаполнено(СсылкаНового) Тогда
				ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
				СсылкаНового = БизнесПроцессы[ТипБизнесПроцесса.Имя].ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(СсылкаНового);
			КонецЕсли;
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
		
		РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
		Для каждого Эл Из Участники Цикл
			
			Если ЗначениеЗаполнено(Эл) Тогда
				
				Строка = РабочаяГруппа.Добавить();
				
				Если ТипЗнч(Эл) = Тип("СправочникСсылка.Пользователи") Тогда
					Строка.Участник = Эл;
				Иначе	
					Строка.Участник = Эл.Участник;
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		// Запись итоговой рабочей группы
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			СсылкаОбъекта,
			РабочаяГруппа,
			Ложь); //ОбновитьПраваДоступа
		
		// Установка необходимости обновления прав доступа
		Объект.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьМассивУчастниковРодительскихПроцессов(Объект, Участники)
		
	// Пользователи от бизнес-процесса ведущей задачи
	Если ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда
		
		ВедущийБизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВедущаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все ведущие бизнес-процессы выше по иерархии
		ЗаполнитьМассивУчастниковРодительскихПроцессов(ВедущийБизнесПроцесс, Участники);
		
		ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ВедущийБизнесПроцесс));
		Попытка
			
			ПользователиВедущегоБизнесПроцесса = 
				БизнесПроцессы[ТипБизнесПроцесса.Имя].УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(ВедущийБизнесПроцесс);
				
			Для каждого Эл Из ПользователиВедущегоБизнесПроцесса Цикл
				Участники.Добавить(Эл);
			КонецЦикла;
			
		Исключение
			// Функция "ПользователиВедущегоБизнесПроцесса" может отсутствовать у бизнес-процесса 
			// данного типа
		КонецПопытки;	
		
	КонецЕсли;	
	
	// Пользователи от бизнес-процесса главной задачи
	Если ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
		
		ГлавныйБизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГлавнаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все главные бизнес-процессы выше по иерархии
		ЗаполнитьМассивУчастниковРодительскихПроцессов(ГлавныйБизнесПроцесс, Участники);
		
		ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ГлавныйБизнесПроцесс));
		Попытка
			
			ПользователиГлавногоБизнесПроцесса = 
				БизнесПроцессы[ТипБизнесПроцесса.Имя].УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(ГлавныйБизнесПроцесс);
				
			Для каждого Эл Из ПользователиГлавногоБизнесПроцесса Цикл
				Участники.Добавить(Эл);
			КонецЦикла;
			
		Исключение
			// Функция "ПользователиВедущегоБизнесПроцесса" может отсутствовать у бизнес-процесса 
			// данного типа
		КонецПопытки;	
		
	КонецЕсли;			
	
КонецПроцедуры

Функция ПроверитьПередЗаписью(Объект) Экспорт
	
	// Проверка на зацикливание главной задачи
	Если Объект.ЭтоНовый() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ГлавнаяЗадача.БизнесПроцесс = Объект.Ссылка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

// Получает всех пользователей, имеющих доступ к процессу.
// Этот список будет скопирован в список доступа "На чтение" к задачам этого процесса
Функция ПолучитьВсехУчастниковПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ПроцессСсылка) Тогда
		Возврат ВсеУчастники;
	КонецЕсли;	
	
	// Обработка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(ПроцессСсылка);
		
	Для Каждого УчастникРабочейГруппы Из РабочаяГруппа Цикл
		
		Если Не ЗначениеЗаполнено(УчастникРабочейГруппы.Участник) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", УчастникРабочейГруппы.Участник);
		
		Ключ = Строка(УчастникРабочейГруппы.Участник.УникальныйИдентификатор());
		
		Если ВсеУчастники.Получить(Ключ) = Неопределено Тогда
			ВсеУчастники.Вставить(Ключ, ДанныеУчастника);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка участников процесса
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроцессСсылка);
	УчастникиПроцесса = МенеджерПроцесса.ВсеУчастникиПроцесса(ПроцессСсылка);
	
	Для Каждого ДанныеУчастника Из УчастникиПроцесса Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеУчастника.Участник) Тогда 
			Продолжить;
		КонецЕсли;
		
		Ключ = Строка(ДанныеУчастника.Участник.УникальныйИдентификатор());
		
		Если ВсеУчастники.Получить(Ключ) = Неопределено Тогда
			ВсеУчастники.Вставить(Ключ, ДанныеУчастника);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка проекта
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессСсылка, "Проект");
	Если ЗначениеЗаполнено(Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда 
		
			ДанныеУчастника = Новый Структура;
			ДанныеУчастника.Вставить("Участник", РуководительПроекта);
		
			Ключ = Строка(РуководительПроекта.УникальныйИдентификатор());
		
			ВсеУчастники.Вставить(Ключ, ДанныеУчастника);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВсеУчастники;
	
КонецФункции

// Возвращает Истина если указанный процесс является дочерним
Функция ЭтоДочернийПроцесс(ПроцессОбъект) Экспорт
	
	// Проверка ведущей задачи
	Если ЗначениеЗаполнено(ПроцессОбъект.ВедущаяЗадача) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка главной задачи
	Попытка
		Если ЗначениеЗаполнено(ПроцессОбъект.ГлавнаяЗадача) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		// У процесса может не быть свойства "ГлавнаяЗадача"
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции

// Получает суммарные трудозатраты всех участников процесса
// Параметры:
//	ПроцессОбъект - объект типа БизнесПроцессОбъект.(...)
Функция ПолучитьСуммарныеПлановыеТрудозатратыПроцесса(ПроцессОбъект) Экспорт
	
	МетаданныеПроцесса = ПроцессОбъект.Метаданные();
	Сумма = 0;
	Если МетаданныеПроцесса.Реквизиты.Найти("Исполнитель") <> Неопределено 
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланИсполнителя") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Исполнитель) Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланИсполнителя;
	ИначеЕсли МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено
		И МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("ТрудозатратыПланИсполнителя") <> Неопределено Тогда
		Для Каждого Строка Из ПроцессОбъект.Исполнители Цикл
			Сумма = Сумма + Строка.ТрудозатратыПланИсполнителя;  
		КонецЦикла;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти("Проверяющий") <> Неопределено
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланПроверяющего") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланПроверяющего;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти("Контролер") <> Неопределено
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланКонтролера") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Контролер) <> Неопределено Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти("Автор") <> Неопределено
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланАвтора") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Автор) <> Неопределено Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланАвтора;
	КонецЕсли;
		
	Возврат Сумма;
	
КонецФункции

Процедура ПроверитьСоответствиеПроцессаПроектнойЗадаче(ПроцессОбъект, Отказ) Экспорт
	
	МетаданныеПроцесса = ПроцессОбъект.Метаданные();
	
	Проект = ПроцессОбъект.Проект;
	ПроектнаяЗадача = ПроцессОбъект.ПроектнаяЗадача;
	
	Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		ПроектнаяЗадачаИсполнители = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Исполнители").Выгрузить();
		
		Если ПроектнаяЗадачаИсполнители.Количество() = 0 Тогда
			ТекущийПланТрудозатраты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача,
				"ТекущийПланТрудозатраты");
				
			Если ТекущийПланТрудозатраты = 0 Тогда
				// В проектной задаче ничего не указано - ни исполнителей, ни общих трудозатрат.
				// Никаких дополнительных проверок не проводится.
			Иначе
				// В проектной задаче не указаны исполнители, но указаны общие трудозатраты.
				// Проверяем соответствие общих трудозатрат по процессу и общих трудозатрат проектной задачи.
				СуммарныеТрудозатратыПроцесса = РаботаСБизнесПроцессамиВызовСервера.ПолучитьСуммарныеПлановыеТрудозатратыПроцесса(ПроцессОбъект);
				Если СуммарныеТрудозатратыПроцесса > ТекущийПланТрудозатраты Тогда
					
					СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Общие трудозатраты процесса превышают плановые трудозатраты проектной задачи ""%1""'"),
						Строка(ПроектнаяЗадача));
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СообщениеПользователю, 
						ПроцессОбъект,
						"ПроектЗадача",
						,
						Отказ);
				КонецЕсли;	
					
			КонецЕсли;
			
		Иначе
			
			Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
				Для Каждого ИсполнительПроцесса Из ПроцессОбъект.Исполнители Цикл
					ИндексИсполнителя = ПроцессОбъект.Исполнители.Индекс(ИсполнительПроцесса);
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ИсполнительПроцесса.Исполнитель);
					
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Исполнитель ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ИсполнительПроцесса.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнители[" + Строка(ИндексИсполнителя) + "].Исполнитель",, 
								Отказ);
							
					ИначеЕсли МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("ТрудозатратыПланИсполнителя") <> Неопределено
						И Трудозатраты > 0 И Трудозатраты < ИсполнительПроцесса.ТрудозатратыПланИсполнителя Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты исполнителя ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ИсполнительПроцесса.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнители[" + Строка(ИндексИсполнителя) + "].ТрудозатратыПланИсполнителя",, 
								Отказ);						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли МетаданныеПроцесса.Реквизиты.Найти("Исполнитель") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПроцессОбъект.Исполнитель) Тогда
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ПроцессОбъект.Исполнитель);
							
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Исполнитель ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ПроцессОбъект.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнитель",, 
								Отказ);
								
					ИначеЕсли Трудозатраты > 0 И Трудозатраты < ПроцессОбъект.ТрудозатратыПланИсполнителя Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты исполнителя ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ПроцессОбъект.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"ТрудозатратыПланИсполнителя",, 
								Отказ);	
								
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если МетаданныеПроцесса.Реквизиты.Найти("Проверяющий") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ПроцессОбъект.Проверяющий);
							
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Проверяющий ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ПроцессОбъект.Проверяющий),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Проверяющий",, 
								Отказ);
								
					ИначеЕсли Трудозатраты > 0 И Трудозатраты < ПроцессОбъект.ТрудозатратыПланПроверяющего Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты проверяющего ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ПроцессОбъект.Проверяющий),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"ТрудозатратыПланПроверяющего",, 
								Отказ);	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если МетаданныеПроцесса.Реквизиты.Найти("Контролер") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПроцессОбъект.Контролер) Тогда
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ПроцессОбъект.Контролер);
							
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Контролер ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ПроцессОбъект.Контролер),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Контролер",, 
								Отказ);
						
					ИначеЕсли Трудозатраты > 0 И Трудозатраты < ПроцессОбъект.ТрудозатратыПланКонтролера Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты контролера ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ПроцессОбъект.Контролер),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"ТрудозатратыПланКонтролера",, 
								Отказ);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
		
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "СписыватьЗатратыНаПроект") Тогда 
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проекта ""%1"" запрещено отнесение трудозатрат на проект в целом'"),
				Строка(Проект));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Сообщение,,
				"ПроектЗадача",, 
				Отказ);
		КонецЕсли;
		
		ПроектнаяКоманда = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ПроектнаяКоманда").Выгрузить();
		
		Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
			Для Каждого ИсполнительПроцесса Из ПроцессОбъект.Исполнители Цикл
				
				ИндексИсполнителя = ПроцессОбъект.Исполнители.Индекс(ИсполнительПроцесса);
				Если ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ИсполнительПроцесса.Исполнитель);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Исполнитель ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
								Строка(ИсполнительПроцесса.Исполнитель),
								Строка(Проект));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнители[" + Строка(ИндексИсполнителя) + "].Исполнитель",, 
								Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МетаданныеПроцесса.Реквизиты.Найти("Исполнитель") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПроцессОбъект.Исполнитель) Тогда
				Если ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ПроцессОбъект.Исполнитель);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исполнитель ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
							Строка(ПроцессОбъект.Исполнитель),
							Строка(Проект));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Сообщение,
							ПроцессОбъект,,
							"Исполнитель",
							Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Если МетаданныеПроцесса.Реквизиты.Найти("Проверяющий") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
				Если ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ПроцессОбъект.Проверяющий);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Проверяющий ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
							Строка(ПроцессОбъект.Проверяющий),
							Строка(Проект));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Сообщение,
							ПроцессОбъект,,
							"Проверяющий",
							Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		
		Если МетаданныеПроцесса.Реквизиты.Найти("Контролер") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПроцессОбъект.Контролер) Тогда
				Если ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ПроцессОбъект.Контролер);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролер ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
						Строка(ПроцессОбъект.Контролер),
						Строка(Проект));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Сообщение,
							ПроцессОбъект,,
							"Контролер",
							Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		
	КонецЕсли;	
		
КонецПроцедуры

Функция ПолучитьФактическиеТрудозатратыПоЗадаче(Задача) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Трудозатраты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ФактическиеТрудозатраты.Длительность), 0) КАК Длительность
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	ФактическиеТрудозатраты.Источник = &Источник И Не Удалена";
	Запрос.УстановитьПараметр("Источник", Задача);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Трудозатраты;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, 
		"ПроектнаяЗадача, ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат, Проект, Проект.ЕдиницаТрудозатратЗадач");
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ПроектнаяЗадача) Тогда 
		ЕдиницаТрудозатрат = РеквизитыЗадачи.ПроектнаяЗадачаТекущийПланЕдиницаТрудозатрат;
		ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроектнойЗадачи(РеквизитыЗадачи.ПроектнаяЗадача);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.Проект) Тогда 
		ЕдиницаТрудозатрат = РеквизитыЗадачи.ПроектЕдиницаТрудозатратЗадач;
		ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроекта(РеквизитыЗадачи.Проект);
	Иначе
		ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
		ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
	КонецЕсли;
	
	Трудозатраты = РаботаСПроектами.ПересчитатьТрудозатраты(
		Выборка.Длительность / 60, 
		Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута, 
		ЕдиницаТрудозатрат,
		ГрафикРаботы);
	
	Возврат Трудозатраты;
	
КонецФункции	

Функция ПолучитьПлановыеТрудозатратыПоЗадаче(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	ПлановыеТрудозатраты = 0;
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцесс);
	
	Возврат МенеджерПроцесса.ПлановыеТрудозатратыИсполнителяЗадачи(
		БизнесПроцесс, Задача, ТочкаМаршрута);
	
КонецФункции

Функция ПолучитьСуммарныеТрудозатратыПроцессаЧас(БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах") Тогда
		Возврат 0;
	КонецЕсли;	
	
	ПлановыеТрудозатраты = РаботаСБизнесПроцессамиВызовСервера.ПолучитьСуммарныеПлановыеТрудозатратыПроцесса(БизнесПроцесс);
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс, 
			"Проект, Проект.ЕдиницаТрудозатратЗадач, ПроектнаяЗадача, ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат");
		Проект = РеквизитыПроцесса.Проект;
		ПроектнаяЗадача = РеквизитыПроцесса.ПроектнаяЗадача;
		
		Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = РеквизитыПроцесса.ПроектнаяЗадачаТекущийПланЕдиницаТрудозатрат;
			ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача);
		ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
			ЕдиницаТрудозатрат = РеквизитыПроцесса.ПроектЕдиницаТрудозатратЗадач;
			ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроекта(Проект);
		КонецЕсли;
	КонецЕсли;
	
	ПлановыеТрудозатратыЧас = РаботаСПроектами.ПересчитатьТрудозатраты(
		ПлановыеТрудозатраты, 
		ЕдиницаТрудозатрат,
		Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас,
		ГрафикРаботы);
	
	Возврат ПлановыеТрудозатратыЧас; 
	
КонецФункции	

// Проверяет условия выполнения задач. В случае проблем - возвращает текст ошибки.
//
// Параметры:
//  Задача - ЗадачаСсылка - Ссылка на выполняемую задачу.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки.
//
Функция ПроверитьУсловияЗапретаВыполнения(Задача) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПроверитьУсловияЗапретаВыполнения(Задача);
	
КонецФункции

// Отключает проверку возможности изменения состояния процесса при записи.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект
//
Процедура ОтключитьПроверкуВозможностиИзмененияСостоянияПроцесса(Процесс) Экспорт
	
	Процесс.ДополнительныеСвойства.Вставить("ОтключитьПроверкуВозможностиИзмененияСостояния", Истина);
	
КонецПроцедуры

// Определяет необходимость проверки возможности изменения состояния процесса при записи.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект
//
// Возвращаемое значение:
//  Булево - Принимает значение Истина, если необходимо выполнить проверку.
//
Функция ПроверятьВозможностьИзмененияСостоянияПроцесса(Процесс) Экспорт
	
	Если Процесс.ДополнительныеСвойства.Свойство("ОтключитьПроверкуВозможностиИзмененияСостояния")
		И Процесс.ДополнительныеСвойства.ОтключитьПроверкуВозможностиИзмененияСостояния Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////
// Общие функции и процедуры для механизма бизнес-процесса "Исполнение"
//////////// 

// Загружает список исполнителей из временного хранилища в список исполнителей
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища, РеквизитТаблица) Экспорт
	
	Исполнители = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// Добавление появившихся строк.
	Для Каждого Строка Из Исполнители Цикл
		
		ПараметрыОтбора = Новый Структура("Исполнитель", 
			Строка.Исполнитель);
		
		Если РеквизитТаблица.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РеквизитТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ИндексСтроки = РеквизитТаблица.Индекс(НоваяСтрока);
		Если ИндексСтроки > 0 Тогда 
			НоваяСтрока.ПорядокИсполнения = РеквизитТаблица[ИндексСтроки-1].ПорядокИсполнения;
		Иначе
			НоваяСтрока.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление пропавших строк.
	КоличествоСтрок = РеквизитТаблица.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Строка = РеквизитТаблица[КоличествоСтрок - Инд];
		ПараметрыОтбора = Новый Структура("Исполнитель", 
			Строка.Исполнитель);
		
		Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитТаблица.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает процессы по предмету, которые может прервать текущий пользователь.
//
Функция ПроцессыПоПредметуКоторыеМожетПрерватьТекущийПользователь(Предмет) Экспорт
	
	ПроцессыКПрерыванию = Новый Массив;
	
	ПроцессыПоПредмету = ПроцессыПоПредмету(Предмет);
	ГоловныеПроцессы = ГоловныеПроцессы(ПроцессыПоПредмету.ВсеПроцессы);
	
	Для Каждого Процесс Из ГоловныеПроцессы Цикл
		РеквизитыПроцесса = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "Завершен, Стартован, ВедущаяЗадача, Состояние");
		Если РеквизитыПроцесса.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Прерван")
			Или РеквизитыПроцесса.Завершен
			Или НЕ РеквизитыПроцесса.Стартован
			Или ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Процесс);
		Если ПраваПоОбъекту.Изменение Тогда
			ПроцессыКПрерыванию.Добавить(Процесс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроцессыКПрерыванию;
	
КонецФункции

// Прерывает указанные процессы.
//
Процедура ПрерватьПроцессы(Процессы, ПричинаПрерывания) Экспорт
	
	Для Каждого Процесс Из Процессы Цикл
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(Процесс, ПричинаПрерывания);
		ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(Процесс);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДоступностьКомандДереваПриложений(Форма) Экспорт
	
	ФормаЗадачиИсполнителяУстановитьДоступностьКомандыУстановитьПредмет(Форма);
	
КонецПроцедуры	

Процедура ЗаполнитьДеревоПриложений(Форма) Экспорт
	
	ЗаполнитьДеревоПриложенийПоПредметам(Форма, Форма.Объект.Предметы);
			
КонецПроцедуры

Процедура ЗаполнитьДеревоПриложенийПоПредметам(Форма, Предметы,
	ВызовИзЗадачиМне = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Форма.Элементы.Найти("ДеревоПриложений") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоПриложений");
	Дерево.Строки.Очистить();
	
	ОтображатьУдаленныеПриложения = Форма.ОтображатьУдаленныеПриложения;
	
	Если НЕ ОтображатьУдаленныеПриложения Тогда
		
		КоличествоПредметов = 0;
		
		Для Каждого СтрПредмет ИЗ Предметы Цикл
			Если НЕ ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			ИначеЕсли НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПредмет.Предмет, "ПометкаУдаления") Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоПредметов = Предметы.Количество();
	КонецЕсли;
	
	Если КоличествоПредметов = 0 Тогда
		ЗначениеВДанныеФормы(Дерево, Форма.ДеревоПриложений);
		Если Форма.Элементы.Найти("ДеревоПриложений") <> Неопределено И Не ВызовИзЗадачиМне Тогда
			Форма.Элементы.ДеревоПриложений.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	Иначе
		Если Форма.Элементы.Найти("ДеревоПриложений") <> Неопределено И Не ВызовИзЗадачиМне Тогда
			Форма.Элементы.ДеревоПриложений.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
	
		Если СтрокаПредмета.Предмет <> Неопределено И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Если Не ОтображатьУдаленныеПриложения И СтрокаПредмета.Предмет.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Строка = Дерево.Строки.Добавить();
		Строка.Наименование = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		Строка.Ссылка = СтрокаПредмета.Предмет;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, 
					"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, ПодписанЭП, ТекущаяВерсияРасширение");
					
				Строка.ТипФайла = РеквизитыФайла.ИндексКартинки;
				Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
					Строка.ТипФайла = Строка.ТипФайла + 1;
				КонецЕсли;
				
				Строка.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
				Строка.Редактирует = РеквизитыФайла.Редактирует;
				Если Не Строка.Редактирует.Пустая() Тогда
					Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						Строка.РедактируетТекущийПользователь = Истина;
					Иначе	
						Строка.РедактируетДругойПользователь = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Строка.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
				
				Строка.Расширение = РеквизитыФайла.ТекущаяВерсияРасширение;
				
				Попытка
					Строка.ПолноеИмяФайлаВРабочемКаталоге = "";
					
					Если Строка.РедактируетТекущийПользователь = Истина 
							И ЗначениеЗаполнено(Строка.Ссылка) Тогда
							
						ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
							Строка.Ссылка);
						Строка.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
						Строка.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
					КонецЕсли;
					
				Исключение
				КонецПопытки;
				
				
			Иначе
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строка.ИмяПредмета) Тогда
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			Иначе
				Если СтрокаПредмета.Предмет <> Неопределено Тогда
					Строка.ТипФайла = ?(СтрокаПредмета.Предмет.ПометкаУдаления, 11, 10); // Простое изображение листа
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		ДобавитьФайлыВДеревоПриложений(Строка, СтрокаПредмета.Предмет, ОтображатьУдаленныеПриложения);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВДанныеФормы(Дерево, Форма.ДеревоПриложений);
	
	Форма.Элементы.ДеревоПриложений.Отображение = ОтображениеТаблицы.Дерево;
	Форма.Элементы.ДеревоПриложений.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	
КонецПроцедуры

Процедура ДобавитьФайлыВДеревоПриложений(СтрокаПредмета, Предмет, ОтображатьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Описание КАК Описание,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВладелецФайла", Предмет);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = СтрокаПредмета.Строки.Добавить();
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Описание) Тогда
			Строка.Наименование = Строка.Наименование + ", " + ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		Строка.ТипФайла = ВыборкаДетальныеЗаписи.ИндексКартинки;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Строка.ТипФайла = Строка.ТипФайла + 1;
		КонецЕсли;	
		
		Строка.ХранитьВерсии = ВыборкаДетальныеЗаписи.ХранитьВерсии;
		Строка.Редактирует = ВыборкаДетальныеЗаписи.Редактирует;
		Если Не Строка.Редактирует.Пустая() Тогда
			Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
				Строка.РедактируетТекущийПользователь = Истина;
			Иначе	
				Строка.РедактируетДругойПользователь = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Строка.ПодписанЭП = ВыборкаДетальныеЗаписи.ПодписанЭП;
		Строка.Расширение = ВыборкаДетальныеЗаписи.Расширение;
		
		Попытка
			Строка.ПолноеИмяФайлаВРабочемКаталоге = "";
			
			Если Строка.РедактируетТекущийПользователь = Истина 
					И ЗначениеЗаполнено(Строка.Ссылка) Тогда
					
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
					Строка.Ссылка);
				Строка.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
				Строка.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает представление предмета в карточке задачи.
// Если предмет задан, то он отображается в виде гиперссылки,
// если не задан, то в виде надписи Предмет не задан.
//
Процедура ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда	
		ПредметыЗадачи = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Форма.Объект);
		Если ПредметыЗадачи.Количество() > 0 Тогда
			Если Форма.Элементы.Найти("ПредметГиперссылка") <> Неопределено Тогда
				Форма.Элементы.ПредметГиперссылка.Видимость = Истина;
				Форма.Элементы.ПредметГиперссылка.Гиперссылка = Истина;
			КонецЕсли;
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				Форма.ПредметСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Форма.Объект.Предметы);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				// реквизита может не быть
			КонецПопытки;
		Иначе
			Если Форма.Элементы.Найти("ПредметГиперссылка") <> Неопределено Тогда
				Форма.Элементы.ПредметГиперссылка.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (Форма.Элементы.Найти("УстановитьПредмет") <> Неопределено)
		Или (Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюГруппаДобавитьУдалить") <> Неопределено)
		Или (Форма.Элементы.Найти("ГруппаПредметыИФайлы") <> Неопределено) Тогда
		
		ФормаЗадачиИсполнителяУстановитьДоступностьКомандыУстановитьПредмет(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает реквизит формы ТипПредмета и заполняет список выбора.
//
Процедура ФормаБизнесПроцессаУстановитьТипПредмета(Форма) Экспорт
	ИмяТипаПредмета = "";
	Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
		ИмяТипаПредмета = Строка(ТипЗнч(Форма.Объект.Предмет));
	КонецЕсли;
	СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(Форма.Объект.Ссылка.Метаданные().Реквизиты.Предмет.Тип.Типы());
	Форма.ТипПредмета = "";
	Форма.Элементы.ТипПредмета.СписокВыбора.Очистить();
	Для Каждого Запись Из СписокТипов Цикл
		Форма.Элементы.ТипПредмета.СписокВыбора.Добавить(Запись.Значение, Запись.Представление);
		Если ИмяТипаПредмета = Запись.Представление Тогда
			Форма.ТипПредмета = Запись.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Устанавливает видимость команды УстановитьПредмет в карточке задачи в зависимости от ее состояния
//
Процедура ФормаЗадачиИсполнителяУстановитьДоступностьКомандыУстановитьПредмет(Форма) Экспорт
	Доступность = Не Форма.Объект.Выполнена;
	Если Форма.Элементы.Найти("УстановитьПредмет") <> Неопределено Тогда
		Форма.Элементы.УстановитьПредмет.Видимость = Доступность;
	КонецЕсли;
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюГруппаДобавитьУдалить") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюГруппаДобавитьУдалить.Видимость = Доступность;
	КонецЕсли;
	Если Форма.Элементы.Найти("ГруппаПредметыИФайлы") <> Неопределено Тогда
		Форма.Элементы.ГруппаПредметыИФайлы.Видимость = Доступность;
	КонецЕсли;
КонецПроцедуры

// Устанавливает видимость команды ИзменитьПредмет в карточке бизнес-процесса в зависимости от его состояния
//
Процедура ФормаБизнесПроцессаУстановитьДоступностьКомандыИзменитьПредмет(Форма) Экспорт
	
	Форма.Элементы.ИзменитьПредмет.Видимость = Форма.Объект.Стартован 
		И Не Форма.Объект.Завершен
		И Форма.Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван;	
	
КонецПроцедуры

// Включает/выключает отображение файлов, помеченных на удаление
//
Процедура ФормаБизнесПроцессаОтображатьУдаленныеФайлы(Форма) Экспорт
	
	Файлы = Форма.Файлы;
	Элементы = Форма.Элементы;
	
	ОтображатьУдаленныеФайлы = Не Файлы.Параметры.Элементы.Найти("ОтображатьУдаленные").Значение;
	Файлы.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеФайлы);
	
	Элементы.ФайлыКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленныеФайлы;
	Элементы.Файлы.Обновить();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		Форма.ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		ОтображатьУдаленныеФайлы);
	
КонецПроцедуры

Процедура ОтобразитьНаФормеПричинуПрерывания(Форма) Экспорт
	
	ПричинаПрерывания = Форма.Объект.ПричинаПрерывания;
	Если ПустаяСтрока(ПричинаПрерывания) Тогда
		Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Прерван'");	
	Иначе			
		ЗаголовокДекорации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Прерван: %1'"),
			ПричинаПрерывания);
		Форма.Элементы.ДекорацияОписание.Заголовок = ЗаголовокДекорации;	
	КонецЕсли;				
	
КонецПроцедуры

Функция ЗначенияДополнительныхРеквизитовИзменились(ПерваяТабличнаяЧасть, ВтораяТабличнаяЧасть)
	
	Результат = Ложь;
	
	Если ПерваяТабличнаяЧасть.Количество() <> ВтораяТабличнаяЧасть.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	Для Каждого СтрокаПервойТабличнойЧасти Из ПерваяТабличнаяЧасть Цикл
		НайденнаяСтрока = ВтораяТабличнаяЧасть.Найти(СтрокаПервойТабличнойЧасти.Свойство, "Свойство");
		Если НайденнаяСтрока = Неопределено
			ИЛИ НайденнаяСтрока <> Неопределено
			И НайденнаяСтрока.Значение <> СтрокаПервойТабличнойЧасти.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Выполняет копирование значений доп.реквизитов источника на форму бизнес-процесса. 
//Копируются значения совпадающих доп.реквизитов.
//
//Параметры:
//				ИсточникСсылка - ссылка на объект, значения доп.реквизитов которого копируются на форму
//				ФормаПроцесса - форма, на которую выполняется копирование значений доп.реквизитов
Процедура СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(ИсточникСсылка, ФормаПроцесса, КопироватьВсеРеквизиты = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(ИсточникСсылка) 
		ИЛИ ИсточникСсылка.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено 
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из ИсточникСсылка.ДополнительныеРеквизиты Цикл
		СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
		МассивСтрок = ФормаПроцесса.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ОписаниеДопРеквизитаНаФорме = МассивСтрок[0];
			Если ФормаПроцесса.Элементы[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение].ТолькоПросмотр И КопироватьВсеРеквизиты
				ИЛИ НЕ ФормаПроцесса.Элементы[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение].ТолькоПросмотр Тогда
				ФормаПроцесса[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение] = Реквизит.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Выполняет копирование значений доп.реквизитов из объекта-источника в объект-приемник
//Копируются значения совпадающих доп.реквизитов.
Процедура СкопироватьЗначенияДопРеквизитов(ИсточникОбъект, ПриемникОбъект) Экспорт
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ИсточникОбъект, ПриемникОбъект);
	
КонецПроцедуры

//Устанавливает режим ТолькоПросмотр у наследованных доп.реквизитов
Процедура ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, ИсточникКопирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИсточникКопирования = Неопределено 
		ИЛИ ИсточникКопирования.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено 
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеДопРеквизитаНаФорме Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		ДопРеквизитЕстьВИсточникеКопирования = Ложь;
		ЗначениеДопРеквизитаВИсточникеКопирования = Неопределено;
		Для каждого ДопРеквизитИсточника Из ИсточникКопирования.ДополнительныеРеквизиты Цикл
			Если ДопРеквизитИсточника.Свойство = ОписаниеДопРеквизитаНаФорме.Свойство Тогда
				ДопРеквизитЕстьВИсточникеКопирования = Истина;
				ЗначениеДопРеквизитаВИсточникеКопирования = ДопРеквизитИсточника.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Элементы[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение].ТолькоПросмотр = ДопРеквизитЕстьВИсточникеКопирования 
			И ЗначениеДопРеквизитаВИсточникеКопирования = Форма[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение];
			
	КонецЦикла;
	
	//для задач дополнительно обрабатывается предмет бизнес-процесса
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И  БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИсточникКопирования.Ссылка)) Тогда
		Для каждого СтрокаПредмета из ИсточникКопирования.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, СтрокаПредмета.Предмет);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НаборыДопРеквизитовПересекаются(Объект1, Объект2)
	
	ДоступныеНаборыСвойств1 = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект1);	
	ДоступныеНаборыСвойств2 = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект2);
	
	Для Каждого ДоступныйНабор1 Из ДоступныеНаборыСвойств1 Цикл
		Для Каждого СтрокаТабЧасти1 ИЗ ДоступныйНабор1.Набор.ДополнительныеРеквизиты Цикл
			
			Для Каждого ДоступныйНабор2 Из ДоступныеНаборыСвойств2 Цикл
				Для Каждого СтрокаТабЧасти2 ИЗ ДоступныйНабор2.Набор.ДополнительныеРеквизиты Цикл
					Если СтрокаТабЧасти1.Свойство = СтрокаТабЧасти2.Свойство Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//обработчик записи предмета бизнес-процесса
Процедура ПредметБизнесПроцессаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ДопРеквизитыИзменились = ЗначенияДополнительныхРеквизитовИзменились(Источник.ДополнительныеСвойства.ДополнительныеРеквизиты, Источник.ДополнительныеРеквизиты);
	Если Не ДопРеквизитыИзменились Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		ТекстЗапроса = "";
		Для Каждого ОбъектМетаданных Из Метаданные.БизнесПроцессы Цикл
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	Предметы.Ссылка
			|ИЗ
			|	БизнесПроцесс.%Таблица%.Предметы КАК Предметы
			|ГДЕ
			|	Предметы.Предмет = &Предмет И Предметы.РольПредмета = &Основной";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", ОбъектМетаданных.Имя);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Предмет", Источник.Ссылка);
		Запрос.УстановитьПараметр("Основной", Перечисления.РолиПредметов.Основной);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			БизнесПроцессыПоПредмету = Результат.Выбрать();
			Пока БизнесПроцессыПоПредмету.Следующий() Цикл
				БизнесПроцессОбъект = БизнесПроцессыПоПредмету.Ссылка.ПолучитьОбъект();
				Если НаборыДопРеквизитовПересекаются(Источник, БизнесПроцессОбъект) Тогда
					ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
					СкопироватьЗначенияДопРеквизитов(Источник, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
				ОбновитьДопРеквизитыУЗадачБизнесПроцесса(БизнесПроцессОбъект, Источник);
			КонецЦикла;
		КонецЕсли;
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Источник.Метаданные(),
			Источник.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДопРеквизитыУЗадачБизнесПроцесса(ОбъектБизнесПроцесс, Предмет)
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка
		МассивЗадачБизнесПроцесса = РаботаСБизнесПроцессами.ПолучитьМассивЗадачПоБизнесПроцессу(ОбъектБизнесПроцесс.Ссылка, Истина);
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Задача Из МассивЗадачБизнесПроцесса Цикл

			ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
			Если НаборыДопРеквизитовПересекаются(ОбъектБизнесПроцесс, Задача.Ссылка) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				СкопироватьЗначенияДопРеквизитов(ОбъектБизнесПроцесс, ЗадачаОбъект);
				ЗадачаОбъект.Записать();
			КонецЕсли;
			Если НаборыДопРеквизитовПересекаются(Предмет, Задача.Ссылка) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				СкопироватьЗначенияДопРеквизитов(Предмет, ЗадачаОбъект);
				ЗадачаОбъект.Записать();
			КонецЕсли;
			ОбновитьДопРеквизитыУБизнесПроцессовЗадачи(ЗадачаОбъект, Предмет);
		КонецЦикла;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Задача.Ссылка.Метаданные(),
			Задача.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьДопРеквизитыУБизнесПроцессовЗадачи(ОбъектЗадача, Предмет)
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		МассивБизнесПроцессовВедущаяЗадача = РаботаСБизнесПроцессами.ПолучитьПодчиненныеЗадачеБизнесПроцессы(ОбъектЗадача.Ссылка, "ВедущаяЗадача", Истина);
		Для Каждого БизнесПроцессСтрока Из МассивБизнесПроцессовВедущаяЗадача Цикл		
			БизнесПроцессОбъект = БизнесПроцессСтрока.Ссылка.ПолучитьОбъект();
			Если НаборыДопРеквизитовПересекаются(ОбъектЗадача, БизнесПроцессОбъект) Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				СкопироватьЗначенияДопРеквизитов(ОбъектЗадача, БизнесПроцессОбъект);
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
			Если НаборыДопРеквизитовПересекаются(Предмет, БизнесПроцессОбъект) Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				СкопироватьЗначенияДопРеквизитов(Предмет, БизнесПроцессОбъект);
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
		КонецЦикла;

		Если Метаданные.БизнесПроцессы.Исполнение.Реквизиты.Найти("ГлавнаяЗадача") <> Неопределено Тогда
			МассивБизнесПроцессовГлавнаяЗадача = РаботаСБизнесПроцессами.ПолучитьПодчиненныеЗадачеБизнесПроцессы(ОбъектЗадача.Ссылка, "ГлавнаяЗадача", Истина);
			Для Каждого БизнесПроцессСтрока Из МассивБизнесПроцессовГлавнаяЗадача Цикл
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				БизнесПроцессОбъект = БизнесПроцессСтрока.Ссылка.ПолучитьОбъект();
				Если НаборыДопРеквизитовПересекаются(ОбъектЗадача, БизнесПроцессОбъект) Тогда
					СкопироватьЗначенияДопРеквизитов(ОбъектЗадача, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
				Если НаборыДопРеквизитовПересекаются(Предмет, БизнесПроцессОбъект) Тогда
					СкопироватьЗначенияДопРеквизитов(Предмет, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			БизнесПроцессОбъект.Метаданные(),
			БизнесПроцессОбъект.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПредметБизнесПроцессаПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить(
			"ДополнительныеРеквизиты", 
			Источник.Ссылка.ДополнительныеРеквизиты);
			
КонецПроцедуры

Процедура УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормы(Предмет, Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписыватьВсеРеквизиты = (Форма.Объект.Ссылка.Метаданные().Реквизиты.Найти("ГлавнаяЗадача") = Неопределено) 
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.ГлавнаяЗадача);
	
	//копирование доп.реквизитов предмета бизнес-процесса в процесс
	СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Предмет, Форма, ЗаписыватьВсеРеквизиты);
	
	//скопированные элементы редактирования устанавливаются в доступ "на чтение"
	ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, Предмет);

КонецПроцедуры

Процедура РезультатыВыполненияПередЗаписьюБизнесПроцесса(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") 
		И Источник.ДополнительныеСвойства.ВидЗаписи <> "ЗаписьСОбновлениемРезультатаВыполнения"
		И Источник.ДополнительныеСвойства.ВидЗаписи <> 
			"ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей" Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Если Источник.Завершен И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Завершен") Тогда
			Источник.ДополнительныеСвойства.Вставить("ОбработатьЗавершениеБизнесПроцесса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеРезультата(БизнесПроцесс) Экспорт 
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "РезультатУтверждения");
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "РезультатСогласования");
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "РезультатРегистрации");
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "РезультатПриглашения");
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ПередЗаписьюБизнесПроцессаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеБизнесПроцесса(Источник, Отказ);
	
	ЭтоНовый = Источник.ЭтоНовый();
	Если Не ЭтоНовый Тогда
		РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.
			ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				Источник.Ссылка,
				"ВедущаяЗадача, ГлавнаяЗадача, Стартован, ПометкаУдаления, Состояние");
	КонецЕсли;
	
	// Обновление сведений о дочерних процессах
	Источник.ДополнительныеСвойства.Вставить("ПредыдущаяВедущаяЗадача");
	Источник.ДополнительныеСвойства.Вставить("ПредыдущаяГлавнаяЗадача");
	Если Не ЭтоНовый Тогда
		Источник.ДополнительныеСвойства.ПредыдущаяВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
		Источник.ДополнительныеСвойства.ПредыдущаяГлавнаяЗадача = РеквизитыПроцесса.ГлавнаяЗадача;
	КонецЕсли;
	
	Если Не Источник.ОбменДанными.Загрузка Тогда 
		
		// Заполнение реквизита УзелОбмена и проверка
		// соответствия УзелОбмена текущему узлу.
		ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
		
		Если ЭтоНовый Тогда
			СтартПроцесса = Источник.Стартован;
			Источник.УзелОбмена = ЭтотУзел;
		Иначе
			СтартованПоСсылке = РеквизитыПроцесса.Стартован;
			СтартПроцесса = Источник.Стартован И Не СтартованПоСсылке;
		КонецЕсли;
		
		Если СтартПроцесса
			И Источник.УзелОбмена <> ЭтотУзел Тогда
			
			ТекстИсключения = НСтр("ru = 'Процесс можно стартовать только в узле РИБ: ""%1""'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, Источник.УзелОбмена);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		// Очистка очередей запуска процессов и маршрутизации комплексных процессов
		Если Не ЭтоНовый Тогда
			Источник.ДополнительныеСвойства.Вставить(
				"ПредыдущаяПометкаУдаления", РеквизитыПроцесса.ПометкаУдаления);
			Источник.ДополнительныеСвойства.Вставить(
				"ПредыдущееСостояние", РеквизитыПроцесса.Состояние);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура БизнесПроцессПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("РеорганизацияРолейСОбъектамиАдресации") Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбновитьДопРеквизитыПроцессаИРабочиеГруппыРодительскихПроцессов = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбновитьДопРеквизитыПроцессаИРабочиеГруппыРодительскихПроцессов = 
			(Источник.ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбновитьДопРеквизитыПроцессаИРабочиеГруппыРодительскихПроцессов Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбычнаяЗапись Тогда
	
		// Запись результата выполнения процесса
		Если Источник.ДополнительныеСвойства.Свойство("ОбработатьЗавершениеБизнесПроцесса") Тогда
			
			РезультатВыполнения = Неопределено;
			
			МетаданныеИсточника = Источник.Метаданные();
			МенеджерПроцесса = БизнесПроцессы[МетаданныеИсточника.Имя];
			
			ЕстьМетодРезультатВыполненияПроцесса = Ложь;
			Попытка
				ЕстьМетодРезультатВыполненияПроцесса = МенеджерПроцесса.ЕстьМетодРезультатВыполненияПроцесса();
			Исключение
				// В модуле менеджера процесса может не быть метода ЕстьМетодРезультатВыполненияПроцесса
			КонецПопытки;
			
			Если ЕстьМетодРезультатВыполненияПроцесса Тогда
				РезультатВыполнения = МенеджерПроцесса.РезультатВыполненияПроцесса(Источник.Ссылка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.ЗаписатьРезультатПоОбъекту(Источник.Ссылка, РезультатВыполнения);
			КонецЕсли;
			
		КонецЕсли;
		
		// Обновление сведений о дочерних процессах.
		// Обновляем только в мастер-узле.
		Если Источник.ДополнительныеСвойства.ПредыдущаяВедущаяЗадача <> Источник.ВедущаяЗадача
			Или Источник.ДополнительныеСвойства.ПредыдущаяГлавнаяЗадача <> Источник.ГлавнаяЗадача Тогда
			
			ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
			
			Если Источник.УзелОбмена = ЭтотУзел Тогда
				РегистрыСведений.ДочерниеБизнесПроцессы.Удалить(Источник.Ссылка);
				РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Источник.Ссылка, Источник.ВедущаяЗадача);
				РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Источник.Ссылка, Источник.ГлавнаяЗадача);
			КонецЕсли;
		КонецЕсли;
		
		// Очистка очередей запуска процессов и маршрутизации комплексных процессов
		ПроцессПомеченНаУдаление = Источник.ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления")
			И Источник.ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> Источник.ПометкаУдаления
			И Источник.ПометкаУдаления = Истина;
			
		ПроцессПрерван = Источник.ДополнительныеСвойства.Свойство("ПредыдущееСостояние")
			И Источник.ДополнительныеСвойства.ПредыдущееСостояние <> Источник.Состояние
			И Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
		
		Если ПроцессПомеченНаУдаление Тогда
			РегистрыСведений.ПроцессыДляЗапуска.УдалитьПроцессИзОчередиДляЗапуска(Источник.Ссылка);
		КонецЕсли;
		
		Если ПроцессПрерван Тогда
			РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.УдалитьПроцесс(Источник.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбновитьДопРеквизитыПроцессаИРабочиеГруппыРодительскихПроцессов Тогда
	
		// Обновление рабочей группы родительских процессов
		Если ЭтоДочернийПроцесс(Источник) Тогда
			
			ТаблицаУчастников = Новый Массив;
			ВсеУчастники = ПолучитьВсехУчастниковПроцесса(Источник.Ссылка);
			Для каждого Эл Из ВсеУчастники Цикл
				Ст = Новый Структура;
				Ст.Вставить("Участник", Эл.Значение.Участник);
				ТаблицаУчастников.Добавить(Ст);
			КонецЦикла;
			
			РаботаСРабочимиГруппами.ОбновитьРабочиеГруппыРодительскихПроцессов(
				Источник.Ссылка, ТаблицаУчастников);
			
		КонецЕсли;
		
		// Обновление дополнительных реквизитов
		Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеРеквизиты") Тогда
			
			ДопРеквизитыИзменились = ЗначенияДополнительныхРеквизитовИзменились(Источник.ДополнительныеСвойства.ДополнительныеРеквизиты, Источник.ДополнительныеРеквизиты);
			Если Не ДопРеквизитыИзменились Тогда
				Возврат;
			КонецЕсли;
			
			Попытка
				ВнешняяТранзакция = ТранзакцияАктивна();
				Если Не ВнешняяТранзакция Тогда
					НачатьТранзакцию();
				КонецЕсли;
				Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Источник,, Истина);
				Для Каждого Предмет Из Предметы Цикл
					ОбновитьДопРеквизитыУЗадачБизнесПроцесса(Источник, Предмет);
				КонецЦикла;
				Если Не ВнешняяТранзакция Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			Исключение 
				Инфо = ИнформацияОбОшибке();
				Если Не ВнешняяТранзакция Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Источник.Метаданные(),
					Источник.Ссылка,
					ПодробноеПредставлениеОшибки(Инфо));
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость элемента управления ОтменитьВыполнение
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи
//
Процедура УстановитьВидимостьКомандыОтменитьВыполнениеЗадачи(Форма) Экспорт
	
	ЗадачуМожноОтменить = БизнесПроцессыИЗадачиВызовСервера.ЗадачуМожноОтменить(Форма.Объект.Ссылка);
	Форма.Элементы.ОтменитьВыполнение.Видимость = НЕ ЗадачуМожноОтменить.Отказ;
	
КонецПроцедуры

// Обновляет отображение элементов формы после отмены выполнения задачи
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи
//   Объект - ДанныеФормыСтруктура (ЗадачаОбъект.ЗадачаИсполнителя) - основной объект формы.
//
Процедура ФормаЗадачиОбновитьОтображениеЭлементовПослеОтменыВыполнения(Форма, Объект) Экспорт
	
	Форма.Прочитать();
	
	Форма.НачальныйПризнакВыполнения = Объект.Выполнена;
	
	Форма.ТолькоПросмотр = Объект.Выполнена;
	
	Если Форма.Элементы.Найти("ДеревоПриложений") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложений.ИзменятьСоставСтрок = Истина;
	КонецЕсли;
	
	Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	
	ВидимостьКомандВыполненияЗадачи = Не Объект.Выполнена;
	Для Каждого ПодчиненныйЭлемент Из Форма.Элементы.ГруппаКомандыВыполнения.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ВидимостьКомандВыполненияЗадачи;
	КонецЦикла;
	
	Форма.ПредставлениеHTML = ОбзорЗадачВызовСервера.ПолучитьОбзорЗадачи(Объект);
	
	ОбновитьДоступностьКомандДереваПриложений(Форма);
	
	Форма.Элементы.ОтменитьВыполнение.Видимость = Ложь;
	
КонецПроцедуры

Функция КоличествоБизнесПроцессовПоШаблону(Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КритерийОтбораБизнесПроцессыПоШаблону.Ссылка
		|ИЗ
		|	КритерийОтбора.БизнесПроцессыПоШаблону(&ЗначениеОтбора) КАК КритерийОтбораБизнесПроцессыПоШаблону";
	Запрос.Параметры.Вставить("ЗначениеОтбора", Шаблон);
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

Функция УстановитьЗаголовокКомандыБизнесПроцессыПоШаблону(Шаблон)
	
	Если Не Шаблон.Пустая() Тогда
		
		КоличествоПроцессов = КоличествоБизнесПроцессовПоШаблону(Шаблон);
		
		Если КоличествоПроцессов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По шаблону %1'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					КоличествоПроцессов,
					НСтр("ru = 'процесс,процесса,процессов'")));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НСтр("ru = 'Нет процессов по шаблону'");
	
КонецФункции

Функция УстановитьЗаголовокКомандыОткрытьФормуДляШаблона(Шаблон)
	
	Если Не Шаблон.Пустая() Тогда
		
		КоличествоНастроек = 
			РегистрыСведений.КоличествоНастроекШаблоновПроцессов.КоличествоНастроекПоШаблону(Шаблон);
		
		Если КоличествоНастроек > 0 Тогда
			
			Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 назначение;;%1 назначения;%1 назначений;%1 назначений'"),
				КоличествоНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НСтр("ru = 'Никому не назначен'");
	
КонецФункции

// Устанавливает заголовки команд "Процессы по шаблону" и "Назначен видам документов".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма шаблона процесса
//
Процедура УстановитьЗаголовкиКомандШаблонаБизнесПроцесса(Форма) Экспорт
	
	Если Форма.Элементы.Найти("КритерийОтбораБизнесПроцессыПоШаблонуБизнесПроцессыПоШаблону") <> Неопределено Тогда
		Форма.Элементы.КритерийОтбораБизнесПроцессыПоШаблонуБизнесПроцессыПоШаблону.Заголовок =
			УстановитьЗаголовокКомандыБизнесПроцессыПоШаблону(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Если Форма.Элементы.Найти("РегистрСведенийНастройкаШаблоновБизнесПроцессовОткрытьФормуДляШаблона") <> Неопределено Тогда
		Форма.Элементы.РегистрСведенийНастройкаШаблоновБизнесПроцессовОткрытьФормуДляШаблона.Заголовок =
			УстановитьЗаголовокКомандыОткрытьФормуДляШаблона(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ПравилаЭскалацииЗадачПоШаблону") <> Неопределено Тогда
		Форма.Элементы.ПравилаЭскалацииЗадачПоШаблону.Заголовок =
		ЭскалацияЗадач.ЗаголовокКомандыПравилаЭскалацииЗадачПоШаблону(Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюБизнесПроцесса.
//
Процедура ОбновитьСостояниеБизнесПроцесса(Источник, Отказ)
	
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("Состояние") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		Возврат;
	КонецЕсли;
	
	НовоеСостояние = Источник.Состояние;
	СтароеСостояние = ПолучитьСостояниеБизнесПроцесса(Источник);
	
	Если НовоеСостояние = СтароеСостояние Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ИзменениеСостоянияВложенногоПроцесса")
		И ПроверятьВозможностьИзмененияСостоянияПроцесса(Источник) Тогда
	
		Если НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			
			Если ЗначениеЗаполнено(Источник.ВедущаяЗадача) Тогда
				
				ВызватьИсключение
					НСтр("ru = 'Нельзя останавливать процессы являющийся частью комплексного или составного процесса.'");
				
			КонецЕсли;
			
			Если Источник.Завершен = Истина Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя останавливать завершенные процессы.'");
			КонецЕсли;
			
			Если Источник.Стартован <> Истина Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя останавливать не стартовавшие процессы.'");
			КонецЕсли;
			
			Если СтароеСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
				ВызватьИсключение НСтр("ru = 'Процесс уже остановлен.'");
			КонецЕсли;
			
			Если СтароеСостояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя останавливать прерванные процессы.'");
			КонецЕсли;
			
			Если Не БизнесПроцессыИЗадачиВызовСервера.ЕстьПраваНаОстановкуБизнесПроцесса(
					Источник.Ссылка) Тогда
					
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вашего уровня доступа недостаточно для остановки процесса ""%1"".'"),
				Строка(Источник.Ссылка));
				ВызватьИсключение ТекстСообщения;
				
			КонецЕсли;
			
		ИначеЕсли НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			Если ЗначениеЗаполнено(Источник.ВедущаяЗадача) Тогда
				
				ВызватьИсключение 
					НСтр("ru = 'Нельзя сделать активными процессы являющийся частью комплексного или составного процесса.'");
				
			КонецЕсли;
			
			Если СтароеСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
				ВызватьИсключение НСтр("ru = 'Процесс уже активен.'");
			КонецЕсли;
			
			Если Источник.Завершен Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно сделать активными завершенные процессы.'");
			КонецЕсли;
			
			Если Не Источник.Стартован Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно сделать активными не стартовавшие процессы.'");
			КонецЕсли;
			
			Если СтароеСостояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда		
				ВызватьИсключение НСтр("ru = 'Нельзя активировать прерванные процессы.'");
			КонецЕсли;
			
			Если Не БизнесПроцессыИЗадачиВызовСервера.ЕстьПраваНаОстановкуБизнесПроцесса(Источник.Ссылка) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вашего уровня доступа недостаточно для того, чтобы сделать активным процесс ""%1"".'"),
				Строка(Источник.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	БизнесПроцессыИЗадачиСервер.ПриИзмененииСостоянияБизнесПроцесса(Источник, СтароеСостояние, НовоеСостояние);
	
КонецПроцедуры

Функция ПолучитьСостояниеБизнесПроцесса(БизнесПроцесс)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс.Ссылка, "Состояние");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормаБизнесПроцесса

// Общий обработчик перед записью всех процессов из формы.
//
// Параметры:
//   Отказ - Булево
//   ТекущийОбъект - БизнесПроцессОбъект
//   ПараметрыЗаписи - Структура
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесс
//
Процедура ПередЗаписьюНаСервереФормаБизнесПроцесса(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	
	// Проверка заполнения наименования
	Если ТекущийОбъект.Стартован
		И НЕ ЗначениеЗаполнено(ТекущийОбъект.Наименование) Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru = 'Поле ""Наименование"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Форма.Объект.Ссылка,
			"Объект.Наименование");
		
	КонецЕсли;
	
	// Установим состояние записываемому процессу.
	РаботаСБизнесПроцессами.УстановитьСостояниеПроцессуПередЗаписьюИзФормыОбъекта(
		ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Форма.Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Форма.Объект);
	УстановитьПривилегированныйРежим(Ложь);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Устанавливает доступность элементов формы процесса в зависимости от состояния процесса
//
// Параметры:
//  Форма - Управляемая форма бизнес-процесса
//  УчитыватьСостояниеОстановлен - Булево - признак определяющий необходимость учета значения
//                                 состояния процесса Остановлен.
//
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(
	Форма, УчитыватьСостояниеОстановлен = Истина) Экспорт
	
	Форма.ТолькоПросмотр =
		Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
		Или Форма.Объект.Завершен
		Или Форма.Объект.ПометкаУдаления;
	
	Если УчитыватьСостояниеОстановлен Тогда
		Форма.ТолькоПросмотр = 
			Форма.ТолькоПросмотр
			Или Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
	КонецЕсли;
	
	// Вычисление признака отложенного старта
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НастройкаСтарта", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	НастройкаСтарта = СтруктураПоиска.НастройкаСтарта;;
	
	ПроцессСтартованОтложенно = Ложь;
	Если ЗначениеЗаполнено(НастройкаСтарта) Тогда
		ПроцессСтартованОтложенно = 
			ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта)
			И (НастройкаСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту
				Или НастройкаСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.Стартован);
	КонецЕсли;
	
	ПроцессСтартованФоново = Ложь;
	Если ЗначениеЗаполнено(НастройкаСтарта) Тогда
		ПроцессСтартованФоново = 
			Не ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта)
			И НастройкаСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту;
	КонецЕсли;
	
	// Заполнение группы ГруппаСостояниеПроцесса
	Форма.Элементы.ДекорацияСостояния.Видимость = Ложь;
	Форма.Элементы.ДекорацияОписание.Гиперссылка = Ложь;
	Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Ложь;
	
	Если Не Форма.ЭтоНовый И Форма.Объект.Завершен Тогда
		Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	РезультатыВыполненияПроцессовИЗадач.Результат
			|ИЗ
			|	РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|ГДЕ
			|	РезультатыВыполненияПроцессовИЗадач.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", Форма.Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Положительный;
				
			Форма.Элементы.ДекорацияОписание.Заголовок = Форма.ПредставлениеРезультата();
			Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли Выборка.Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Отрицательный;
			Форма.Элементы.ДекорацияОписание.Заголовок = Форма.ПредставлениеРезультата();
			Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		ИначеЕсли Выборка.Результат = Перечисления.
			ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_ПоложительныйСЗамечаниями;
				
			Форма.Элементы.ДекорацияОписание.Заголовок = Форма.ПредставлениеРезультата();
			Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
			
			ПредставлениеРезультата = НСтр("ru = 'Завершен %1'");
				
			ПредставлениеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРезультата, Формат(Форма.Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
			
			Форма.Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата;
			
		КонецЕсли;
	ИначеЕсли Не Форма.ЭтоНовый И Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
		
		Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Остановлен'");
	ИначеЕсли Не Форма.ЭтоНовый И Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПрерванПроцесс;
		
		ОтобразитьНаФормеПричинуПрерывания(Форма);
		Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;
		Форма.Элементы.ДекорацияОписание.Гиперссылка = Истина;
	ИначеЕсли Не Форма.ЭтоНовый И Форма.Объект.Стартован Тогда
		Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		
		Форма.Элементы.ДекорацияОписание.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется с %1'"), Формат(Форма.Объект.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"));
		
	ИначеЕсли ЗначениеЗаполнено(НастройкаСтарта)
		И ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
		
		Если Не ЗначениеЗаполнено(НастройкаСтарта.Состояние) Тогда
			
			Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
			Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЧасыПроцессОтложен;
			
			ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
			ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд ММММ гггг, ЧЧ:мм'", "ДФ='дд ММММ гггг'");
			
			ТекстыДекорации = Новый Массив;
			
			ТекстДатаОтсчета = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Дата старта: '"),, ЦветаСтиля.ИнформационнаяНадпись);
			ТекстыДекорации.Добавить(ТекстДатаОтсчета);
			
			СсылкаНаДатуОтложенногоСтарта = Новый ФорматированнаяСтрока(
				Формат(НастройкаСтарта.ДатаОтложенногоСтарта, ФорматДаты),,
				ЦветаСтиля.ИнформационнаяНадпись,,
				"ВыбратьДатуОтложенногоСтарта");
			ТекстыДекорации.Добавить(СсылкаНаДатуОтложенногоСтарта);
			
			ТекстыДекорации.Добавить("  ");
			
			КартинкаУдаленияНастройки = Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.УдалитьНастройкуОтложенногоСтарта,,,, "ОчиститьДатуОтложенногоСтарта");
			ТекстыДекорации.Добавить(КартинкаУдаленияНастройки);
			
			Форма.Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(ТекстыДекорации);
			
		ИначеЕсли НастройкаСтарта.Состояние =
			Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту Тогда
			
			Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
			Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЧасыПроцессОтложен;
			
			ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
			ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд ММММ гггг, ЧЧ:мм'", "ДФ='дд ММММ гггг'");
			
			ТекстыДекорации = Новый Массив;
			
			ТекстСтартОтложенДо = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Старт отложен до '"),, ЦветаСтиля.ИнформационнаяНадпись);
			ТекстыДекорации.Добавить(ТекстСтартОтложенДо);
			
			ПредставлениеДатыОтложенногоСтарта = Новый ФорматированнаяСтрока(
				Формат(НастройкаСтарта.ДатаОтложенногоСтарта, ФорматДаты),,
				ЦветаСтиля.ИнформационнаяНадпись,,);
			ТекстыДекорации.Добавить(ПредставлениеДатыОтложенногоСтарта);
			
			ТекстыДекорации.Добавить("  ");
			
			КартинкаУдаленияНастройки = Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.УдалитьНастройкуОтложенногоСтарта,,,, "УдалитьНастройкуОтложенногоСтарта");
			ТекстыДекорации.Добавить(КартинкаУдаленияНастройки);
			
			Форма.Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(ТекстыДекорации);
			
		ИначеЕсли НастройкаСтарта.Состояние = 
			Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен Тогда
			
			Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
			Форма.Элементы.ДекорацияСостояния.Картинка =
				БиблиотекаКартинок.ЧасыСВосклицательнымЗнакомПроцессОтложен;
			
			Форма.Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(
				НастройкаСтарта.ПричинаОтменыСтарта,,
				ЦветаСтиля.ПоясняющийОшибкуТекст,,
				"ОткрытьОписаниеОшибкиОтложенногоСтарта");
			
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НастройкаСтарта)
		И ЗначениеЗаполнено(НастройкаСтарта.Состояние)
		И Не ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
		
		Если НастройкаСтарта.Состояние =
			Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту Тогда
			
			Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Форма.Элементы.ДекорацияОписание.Заголовок = 
				НСтр("ru = 'Процесс находится в очереди для запуска. Его старт произойдет автоматически в ближайшее время.'");
			Форма.Элементы.ДекорацияОписание.Гиперссылка = Ложь;
			
		ИначеЕсли НастройкаСтарта.Состояние = 
			Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен Тогда
			
			Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Форма.Элементы.ДекорацияОписание.Заголовок =
				НастройкаСтарта.ПричинаОтменыСтарта;
			Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Форма.Элементы.ДекорацияОписание.Гиперссылка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Не Форма.ЭтоНовый Тогда
		Форма.Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Не стартован'");
		Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	Если Форма.Объект.Стартован
		И ЗначениеЗаполнено(НастройкаСтарта)
		И НастройкаСтарта.Состояние = 
			Перечисления.СостоянияПроцессовДляЗапуска.Стартован Тогда
		
		Форма.Элементы.Начато.Заголовок = НСтр("ru = 'Стартован отложенно'");
	КонецЕсли;
	
	Если Не Форма.Объект.Стартован
		И ЗначениеЗаполнено(НастройкаСтарта)
		И ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта)
		И НастройкаСтарта.Состояние = 
			Перечисления.СостоянияПроцессовДляЗапуска.ПустаяСсылка() Тогда
		
		Форма.Элементы.ФормаСтартИЗакрыть.Заголовок = НСтр("ru = 'Отложить старт и закрыть'");
	Иначе
		Форма.Элементы.ФормаСтартИЗакрыть.Заголовок = НСтр("ru = 'Стартовать и закрыть'");
	КонецЕсли;
	
	// Установка видимости кнопок ФормаСтартИЗакрыть и ФормаЗаписатьИЗакрыть
	Если Форма.Объект.ПометкаУдаления
		Или Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		Форма.Элементы.ФормаГруппаКомандыСтарта.Видимость = Ложь;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
		
	ИначеЕсли Форма.Объект.Стартован Или ПроцессСтартованОтложенно Или ПроцессСтартованФоново Тогда
		Форма.Элементы.ФормаГруппаКомандыСтарта.Видимость = Ложь;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	Иначе
		Форма.Элементы.ФормаГруппаКомандыСтарта.Видимость = Истина;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = 
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость;
		
	Форма.Элементы.ФормаСтартИЗакрыть.КнопкаПоУмолчанию = 
		Форма.Элементы.ФормаГруппаКомандыСтарта.Видимость;
		
	// Установка видимости группы задач
	Форма.Элементы.ГруппаЗадачи.Видимость = Форма.Объект.Стартован;
	
	// Получение права на изменение процесса
	ПравоНаИзменениеБизнесПроцесса = Ложь;
	Если НЕ Форма.Объект.Ссылка.Пустая() Тогда
		ПравоНаИзменениеБизнесПроцесса = 
			ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Форма.Объект.Ссылка).Изменение;
	КонецЕсли;
	
	// Доступность команды ФормаУстановитьДатуОтложенногоСтарта.
	Если Форма.Элементы.Найти("ФормаУстановитьДатуОтложенногоСтарта") <> Неопределено Тогда
		Форма.Элементы.ФормаУстановитьДатуОтложенногоСтарта.Доступность = 
			Форма.Элементы.ФормаУстановитьДатуОтложенногоСтарта.Доступность
			И (ПравоНаИзменениеБизнесПроцесса
				Или Форма.Объект.Ссылка.Пустая())
			И Не ПроцессСтартованФоново;
	КонецЕсли;
	
	// Видимость команды Остановить
	Форма.Элементы.ФормаОстановить.Видимость = Форма.Объект.Стартован
		И ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И НЕ Форма.Объект.Завершен
		И НЕ ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача)
		И ПравоНаИзменениеБизнесПроцесса
		И Форма.Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван
		И Форма.Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен;
		
	// Видимость команды Продолжить
	Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Форма.Объект.Стартован
		И ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И НЕ Форма.Объект.Завершен
		И НЕ ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача)
		И ПравоНаИзменениеБизнесПроцесса
		И Форма.Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван
		И Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
	
	// Видимость команды Прервать
	Форма.Элементы.ФормаПрервать.Видимость = Форма.Объект.Стартован
		И ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И НЕ Форма.Объект.Завершен
		И НЕ ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача)
		И ПравоНаИзменениеБизнесПроцесса
		И Форма.Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Задачи

Функция КонтролерыЗадачи(Задача, ТолькоАктивные = Ложь) Экспорт
	
	ПредметыКонтроля = Новый Массив;
	ПредметыКонтроля.Добавить(Задача.Ссылка);
	ПредметыКонтроля.Добавить(Задача.БизнесПроцесс);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контроль.Контролер
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет В (&ПредметыКонтроля)
		|	И Контроль.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("ПредметыКонтроля", ПредметыКонтроля);
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "	И Контроль.СнятСКонтроля = ЛОЖЬ";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контролер");
	
КонецФункции

Функция ИзменитьДатуВыполненияЗадачи(Задача, НоваяДатаВыполнения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задача);
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		ПредыдущаяДатаВыполнения = ЗадачаОбъект.ДатаИсполнения;
		
		ЗадачаОбъект.ДатаИсполнения = НоваяДатаВыполнения;
		ЗадачаОбъект.Записать();
		
		Комментарий = НСтр("ru = 'Предыдущая дата выполнения: %1
			|Новая дата выполнения: %2'");
		ИсторияСобытийЗадач.ЗаписатьСобытие(
			ЗадачаОбъект.Ссылка,
			Перечисления.ВидыСобытийЗадач.ИзмененаДатаВыполнения,
			СтрШаблон(Комментарий, ПредыдущаяДатаВыполнения, НоваяДатаВыполнения));
		
		РазблокироватьДанныеДляРедактирования(Задача);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция КонтролерыПроцесса(Процесс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контроль.Контролер,
		|	Контроль.СнятСКонтроля
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Процесс
		|	И Контроль.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормаЗадачиПроцесса

// Общий обработчик события ПриСозданииНаСервере для карточек задач
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма карточки задачи.
//   Объект - ДанныеФормыСтруктура - основной объект в форме задачи
//
Процедура ФормаЗадачиПриСозданииНаСервере(Форма, Объект) Экспорт
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	Форма.НачальныйПризнакВыполнения = Объект.Выполнена;
	Форма.ТолькоПросмотр = Объект.Выполнена;
	
	Если Объект.Выполнена И Форма.Элементы.Найти("ДеревоПриложений") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложений.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
	СостояниеВыполненияЗадачи = РегистрыСведений.ЗадачиДляВыполнения.СостояниеВыполненияЗадачи(Форма.Объект.Ссылка);
	Форма.СостояниеВыполнения = СостояниеВыполненияЗадачи.СостояниеВыполнения;
	Форма.ПричинаОтменыВыполнения = СостояниеВыполненияЗадачи.ПричинаОтменыВыполнения;
	
	Если Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван
		Или Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или Форма.СостояниеВыполнения = Перечисления.СостоянияЗадачДляВыполнения.ГотоваКВыполнению Тогда
		
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не Объект.Выполнена Тогда
		Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Форма.ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(Форма);
	
	ЭлементОтображатьУдаленныеПриложения = Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюОтображатьУдаленные");
	Если ЭлементОтображатьУдаленныеПриложения <> Неопределено Тогда
		Форма.ОтображатьУдаленныеПриложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			Форма.ИмяФормы,
			"ОтображатьУдаленныеПриложения",
			Ложь);
		ЭлементОтображатьУдаленныеПриложения.Пометка = Форма.ОтображатьУдаленныеПриложения;
	КонецЕсли;
	
	ЭлементОтображатьУдаленныеФайлы = Форма.Элементы.Найти("ФайлыКонтекстноеМенюОтображатьУдаленные");
	Если ЭлементОтображатьУдаленныеФайлы <> Неопределено Тогда
		ОтображатьУдаленныеФайлы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			Форма.ИмяФормы,
			"ОтображатьУдаленныеФайлы",
			Ложь);
		ЭлементОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
		Форма.Файлы.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеФайлы);
	КонецЕсли;
	
	Форма.Элементы.ИзменитьДатуВыполнения.Видимость = 
		ИзменятьЗаданияЗаднимЧислом();
	
	ВидимостьКомандВыполненияЗадачи = Не Форма.ТолькоПросмотр;
		
	Для Каждого ПодчиненныйЭлемент Из Форма.Элементы.ГруппаКомандыВыполнения.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ВидимостьКомандВыполненияЗадачи;
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ФормаПринятьКИсполнению") <> Неопределено Тогда
		Если Форма.Объект.ПринятаКИсполнению = Истина Тогда
			Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
			Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Истина;
		Иначе	
			Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Истина;
			Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(Форма.Объект.СрокИсполнения) И Форма.Объект.СрокИсполнения < ТекущаяДатаСеанса() Тогда
			Форма.ЗадачаПросрочена = Истина;
		КонецЕсли;	
	Исключение	
		// У формы может не быть реквизита ЗадачаПросрочена
	КонецПопытки;
	
	ЗаполнитьДеревоПриложений(Форма);
	ОбновитьДоступностьКомандДереваПриложений(Форма);
	Мультипредметность.УстановитьОформлениеПредметовЗадачи(Форма.УсловноеОформление);
	
	// Обработчик подсистемы "Свойства"
	ИмяГруппыДопРеквизитов = "ГруппаДополнительныеРеквизиты";
	Если Форма.Элементы.Найти("ГруппаДополнительныеРеквизиты") = Неопределено Тогда
		ИмяГруппыДопРеквизитов = Неопределено;
	КонецЕсли;	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ИмяГруппыДопРеквизитов);
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
	РаботаСБизнесПроцессамиВызовСервера.ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, Объект.БизнесПроцесс);
	
	Если Форма.Элементы.Найти("СформироватьУведомлениеДляИсполненияЗадачиПоПочте") <> Неопределено Тогда
		Форма.Элементы.СформироватьУведомлениеДляИсполненияЗадачиПоПочте.Доступность =
			ВыполнениеЗадачПоПочтеСервер.ПроверитьДоступностьФормированияУведомлений(Объект.Ссылка);
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ЗадатьВопрос") <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыВыполненияЗадач") Тогда
			БизнесПроцессыИЗадачиКлиентСервер.ЗаполнитьЗаголовокКомандыЗадатьВопрос(Форма);
		Иначе
			Форма.Элементы.ЗадатьВопрос.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ПредставлениеHTML") <> Неопределено Тогда
		Форма.ПредставлениеHTML = ОбзорЗадачВызовСервера.ПолучитьОбзорЗадачи(Объект);
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ЗадачаЗадачаИсполнителяСогласоватьПереносСрока") <> Неопределено Тогда
		Форма.Элементы.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Видимость = 
			Не Форма.Объект.Выполнена
			И ЗначениеЗаполнено(Форма.Объект.СрокИсполнения);
	КонецЕсли;
	
	Форма.ФактическийИсполнительЗадач = Константы.ФактическийИсполнительЗадач.Получить();
	
	Форма.ИспользоватьФоновоеВыполнениеЗадач = ВыполнениеЗадачСервер.ИспользоватьФоновоеВыполнениеЗадач();
	
	УзелОбменаПроцесса = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Форма.Объект.БизнесПроцесс, "УзелОбмена");
	ЭтотУзелОбмена = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	Форма.ЭтоУзелВыполненияПроцесса = (УзелОбменаПроцесса = ЭтотУзелОбмена);
	
	Форма.ЕстьУсловияЗапретаВыполнения =
		БизнесПроцессыИЗадачиСервер.УсловияЗапретаВыполнения(Форма.Объект.Ссылка).Количество() <> 0;
	
КонецПроцедуры

// Возвращает структуру полей подзадачи
Функция СтруктураПодзадачи() Экспорт
	
	СтруктураЗадачи = Новый Структура(
		"Задача, Наименование, Выполнена, БизнесПроцесс, Срок, ДатаСоздания, Участник, ЭтоЗадачаМне");
	
	СтруктураЗадачи.Выполнена = Ложь;
	СтруктураЗадачи.ЭтоЗадачаМне = Ложь;
	
	Возврат СтруктураЗадачи;	
	
КонецФункции	

// Возвращает текст запроса задач в СУБД
Функция ТекстЗапросаЗадачДляПодзадач() Экспорт
	
	Возврат "ВЫБРАТЬ
	        |	ЗадачаИсполнителя.Ссылка КАК Задача,
	        |	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	        |	ЗадачаИсполнителя.СрокИсполнения КАК Срок,
	        |	ЗадачаИсполнителя.Дата КАК ДатаСоздания,
	        |	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	        |	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
	        |	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
	        |	ЗадачаИсполнителя.ТекущийИсполнитель КАК ТекущийИсполнитель,
	        |	ЗадачаИсполнителя.Наименование КАК Наименование,
	        |	ВЫБОР
	        |		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL
	        |			ТОГДА ЗадачаИсполнителя.Выполнена
	        |		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК Выполнена
	        |ИЗ
	        |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
	        |		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
	        |ГДЕ
	        |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	        |	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ";
	
КонецФункции

Функция ПолучитьМассивПроцессовПодзадач(МассивЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК ДочернийПроцесс
	   |ИЗ
	   |	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
	   |		ПО ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
	   |ГДЕ
	   |	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
	   |	И ДочерниеБизнесПроцессы.СвязующаяЗадача В(&МассивЗадач)";
	 
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	МассивПроцессовПолный = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДочернийПроцесс");
	
	МассивПроцессов = Новый Массив;
	Для Каждого ПроцессСсылка Из МассивПроцессовПолный Цикл
		
		МассивПроцессов.Добавить(ПроцессСсылка);
		
	КонецЦикла;	
	
	Возврат МассивПроцессов;
	
КонецФункции	

// Читает массив подзадач для указанной задачи
//
// Параметры:
//   Задача - ЗадачаССылка.ЗадачаИсполнителя
//
// Возвращаемое значение -массив структур(Задача, Выполнена, БизнесПроцесс, СрокИсполнения, ДатаСоздания, Участник, ЭтоЗадачаМне)
//
Функция СформироватьПодзадачи(Задача) Экспорт
	
	МассивЗадач = Новый Массив;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	МассивПроцессов = ПолучитьМассивПроцессовПодзадач(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача));
	
	Если МассивПроцессов.Количество() = 0 Тогда
		Возврат МассивЗадач;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель,
		|	МИНИМУМ(ИсполнителиРолейИДелегаты.НастройкаДелегирования) КАК НастройкаДелегирования
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнителиРолейИДелегаты.РольПользователь";
	 
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	МассивДелегаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	ВсеРолиДелегаты = Новый Соответствие;
	Для Каждого РольДелегат Из МассивДелегаты Цикл
		ВсеРолиДелегаты.Вставить(РольДелегат, 1);
	КонецЦикла;	
	
	Для Каждого ПроцессСсылка Из МассивПроцессов Цикл
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроцессСсылка);
		МассивТекЗадач = МенеджерПроцесса.ПодзадачиПроцесса(ПроцессСсылка);
		
		Для Каждого Стр Из МассивТекЗадач Цикл
			
			СтруктураЗадачи = СтруктураПодзадачи();
			ЗаполнитьЗначенияСвойств(СтруктураЗадачи, Стр);
			
			// вычислим ЭтоЗадачаМне
			НайденнаяРольДелегат = ВсеРолиДелегаты.Получить(Стр.Участник);
			СтруктураЗадачи.ЭтоЗадачаМне = (НайденнаяРольДелегат <> Неопределено);
			
			МассивЗадач.Добавить(СтруктураЗадачи);
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат МассивЗадач;
	
КонецФункции

// Заполняет таблицу подзадач для карточек задач
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма карточки задачи.
//   Объект - ДанныеФормыСтруктура - основной объект в форме задачи
//
Процедура ЗаполнитьПодзадачи(Форма, Объект) Экспорт
	
	Подзадачи = Форма.РеквизитФормыВЗначение("Подзадачи");
	Подзадачи.Очистить();
	
	МассивПодзадач = СформироватьПодзадачи(Объект.Ссылка);
	Для Каждого Стр Из МассивПодзадач Цикл
		НовСтр = Подзадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;	
	
	Подзадачи.Сортировать("ДатаСоздания");
	ЗначениеВДанныеФормы(Подзадачи, Форма.Подзадачи);
	
	Форма.Элементы.Подзадачи.Видимость = (МассивПодзадач.Количество() <> 0);
	
КонецПроцедуры

// Есть ли активные подзадачи для указанной задачи
//
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение - Булево
//
Функция ЕстьАктивныеПодзадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК ПроцессСсылка
	   |ИЗ
	   |	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
	   |		ПО ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
	   |ГДЕ
	   |	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
	   |	И ДочерниеБизнесПроцессы.СвязующаяЗадача = &Задача
	   |	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ";
	 
	Запрос.УстановитьПараметр("Задача", Задача);
	МассивПроцессовПолный = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПроцессСсылка");
	
	МассивПроцессов = Новый Массив;
	Для Каждого ПроцессСсылка Из МассивПроцессовПолный Цикл
		
		ПраваПоПроцессу = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ПроцессСсылка);
		
		Если Не ПраваПоПроцессу.Чтение Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПроцессов.Добавить(ПроцессСсылка);
		
	КонецЦикла;	
	
	Возврат (МассивПроцессов.Количество() <> 0);
	
КонецФункции

Функция ЕстьЗадачиСПодзадачами(МассивЗадач) Экспорт
	
	МассивПроцессов = ПолучитьМассивПроцессовПодзадач(МассивЗадач);
	Возврат (МассивПроцессов.Количество() <> 0);
	
КонецФункции	

// Заполняет условное оформление списка подзадач для карточек задач
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма карточки задачи.
//   Объект - ДанныеФормыСтруктура - основной объект в форме задачи
Процедура ЗаполнитьУсловноеОФормлениеПодзадачи(Форма, Объект) Экспорт
	
	// условное оформление
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Выполнена (подзадачи)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ЗавершенныйБизнесПроцесс;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиЗадача");
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиСрок");
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиУчастник");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Срок истек (подзадачи)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.Срок");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиСрок");
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокФормат = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy HH:mm'", "ДФ='dd.MM.yy'");
	Форма.Элементы.ПодзадачиСрок.Формат = СрокФормат;
	
КонецПроцедуры

// Заполняет условное оформление списка подзадач для карточек задач
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма карточки задачи.
//   Объект - ДанныеФормыСтруктура - основной объект в форме задачи
Процедура ЗаполнитьУсловноеОФормлениеПодзадачиОписание(Форма, Объект) Экспорт
	
	// условное оформление
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Выполнена (подзадачи, описание)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ЗавершенныйБизнесПроцесс;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиЗадачаОписание");
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиСрокОписание");
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиУчастникОписание");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Срок истек (подзадачи, описание)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.Срок");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПодзадачиСрокОписание");
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокФормат = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy HH:mm'", "ДФ='dd.MM.yy'");
	Форма.Элементы.ПодзадачиСрокОписание.Формат = СрокФормат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПроцессовИЗадач

// Процедура инициализации дерева процессов и задач, списка активных задач.
//   Форма - ФормаКлиентскогоПриложения - форма с деревом задач, списком активных задач.
//   Объект - ссылка на предмет
//   ЗаполнитьДерево - Булево - указывает необходимость заполнения дерева процессов и задач.
//   ОтображатьСписокАктивныхЗадач - Булево - указывает на необходимость отображения списка активных задач.
//
Процедура ДеревоПроцессовИЗадач_ПриСозданииНаСервере(
	Форма, Объект, ЗаполнитьДерево = Ложь, ОтображатьСписокАктивныхЗадач = Истина) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Форма.Элементы.ДеревоЗадачСрокИсполнения.Формат = ФорматДаты;
	Форма.Элементы.ДеревоЗадачДатаВыполнения.Формат = ФорматДаты;
	Форма.Элементы.СписокАктивныхЗадачСрокИсполнения.Формат = ФорматДаты;
	
	ЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	
	// Условное оформление в дереве задач
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Принята к исполнению (дерево задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = ЖирныйШрифт;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачНаименование");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
	Форма.УсловноеОформление, НСтр("ru = 'Просрочена (дерево задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачСрокИсполнения");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Выполнена (дерево задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ВыполненнаяЗадача;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачНаименование");
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачИсполнитель");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Помечен(а) на удаление (дерево задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадач");
	
	// Условное оформление в списке активных задач
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Принята к исполнению (список активных задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадач.ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = ЖирныйШрифт;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадачНаименование");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
	Форма.УсловноеОформление, НСтр("ru = 'Просрочена (список активных задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадач.Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадачСрокИсполнения");
	
	// Заполнение дерева задач
	Если ЗаполнитьДерево Тогда
		Форма.ЗаполнитьДеревоПроцессовИЗадач();
	КонецЕсли;
	
	Форма.Элементы.СписокАктивныхЗадач.Видимость = ОтображатьСписокАктивныхЗадач;
	Форма.Элементы.ВсеЗадачи.ОтображатьЗаголовок = ОтображатьСписокАктивныхЗадач;
	
	// Команда ПерейтиКТекущемуОбъекту
	Форма.Элементы.СписокАктивныхЗадачПерейтиКТекущемуОбъекту.Видимость = Ложь;
	Форма.Элементы.ДеревоЗадачПерейтиКТекущемуОбъекту.Видимость = Ложь;
	Если ЗначениеЗаполнено(Объект) Тогда
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		ЗаголовокКоманды = НСтр("ru = 'Перейти к текущему объекту'");
		
		Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ЗаголовокКоманды = НСтр("ru = 'Перейти к текущей задаче'");
			Форма.Элементы.СписокАктивныхЗадачПерейтиКТекущемуОбъекту.Видимость = Истина;
			Форма.Элементы.ДеревоЗадачПерейтиКТекущемуОбъекту.Видимость = Истина;
		ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
			Форма.Элементы.ДеревоЗадачПерейтиКТекущемуОбъекту.Видимость = Истина;
			ЗаголовокКоманды = НСтр("ru = 'Перейти к текущему процессу'");
		КонецЕсли;
		
		Форма.Команды["ПерейтиКТекущемуОбъекту"].Заголовок = ЗаголовокКоманды;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево процессов и задач, список активных задач (задачи в работе) в форме предмета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма с деревом задач, списком активных задач.
//   Предмет - ссылка на предмет
//
Процедура ЗаполнитьПроцессыИЗадачиПоПредмету(Форма, Предмет) Экспорт
	
	Дерево = ДанныеФормыВЗначение(Форма.ДеревоЗадач, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Список = ДанныеФормыВЗначение(Форма.СписокАктивныхЗадач, Тип("ТаблицаЗначений"));
	Список.Очистить();
	
	ПроцессыПоПредмету = ПроцессыПоПредмету(Предмет);
	
	ГоловныеПроцессы = ГоловныеПроцессы(ПроцессыПоПредмету.ВсеПроцессы);
	
	ТипПредмета = ТипЗнч(Предмет);
	
	ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач = 
		ТипПредмета = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипПредмета = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		Или ТипПредмета = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
		Или ТипПредмета = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента");
		
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	Если Форма.Элементы.СписокАктивныхЗадач.Видимость
		И ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач Тогда
		
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ГоловныеПроцессы,
			ПроцессыПоПредмету.ВспомогательныеПроцессы,ИспользоватьДатуИВремяВСрокахЗадач, Список);
	Иначе
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ГоловныеПроцессы,
			ПроцессыПоПредмету.ВспомогательныеПроцессы, ИспользоватьДатуИВремяВСрокахЗадач);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Дерево, Форма.ДеревоЗадач);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(Форма.ДеревоЗадач.ПолучитьЭлементы(), Форма);
	
	Если Форма.Элементы.СписокАктивныхЗадач.Видимость
		И Не ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач Тогда
		
		ЗаполнитьСписокАктивныхЗадачПоПредмету(Предмет, Список);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Список, Форма.СписокАктивныхЗадач);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтрокуВСпискеАктивныхЗадач(Форма);
	
КонецПроцедуры

// Получает все процессы по предмету.
// Если в качестве предмета передается задача,
// тогда возвращается ее процесс, если передается процесс -
// он же возвращается в массиве, если передается предмет, тогда
// возвращаются его процессы.
//
// Параметры:
//   Предмет - ссылка на предмет, процесс, задачу.
//
// Возвращаемое значение:
//   Массив процессов
//
Функция ПроцессыПоПредмету(Предмет)
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеПроцессы", Новый Массив);
	Результат.Вставить("ВспомогательныеПроцессы", Новый Массив);
	
	Предметы = Новый Массив;
	Проекты = Новый Массив;
	ПроектныеЗадачи = Новый Массив;
	
	ТипОбъекта = ТипЗнч(Предмет);
	
	Если ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "БизнесПроцесс");
		Результат.ВсеПроцессы.Добавить(ПроцессЗадачи);
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		Результат.ВсеПроцессы.Добавить(Предмет);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Предметы.Добавить(Предмет);
		
		// Для мероприятия следует отображать задачи по программе и по протоколу
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Предмет, "МатериалПрограмма, МатериалПротокол");
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПрограмма) Тогда 
			Предметы.Добавить(РеквизитыМероприятия.МатериалПрограмма);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПротокол) Тогда 
			Предметы.Добавить(РеквизитыМероприятия.МатериалПротокол);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		Предметы.Добавить(Предмет);
		
		// Для темы обсуждения следует отображать задачи по всем сообщениям данной темы
		СообщенияТемы = РаботаСОбсуждениями.ПолучитьСписокСообщенийТемы(Предмет);
		Для Каждого Сообщение Из СообщенияТемы Цикл
			Предметы.Добавить(Сообщение);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		Предметы.Добавить(Предмет);
		Проекты.Добавить(Предмет);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Проект";
			
		Запрос.УстановитьПараметр("Проект", Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Предметы.Добавить(Выборка.Ссылка);
			ПроектныеЗадачи.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		Предметы.Добавить(Предмет);
		ПроектныеЗадачи.Добавить(Предмет);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Предметы.Добавить(Предмет);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВходящиеДокументы.Ссылка
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|ГДЕ
			|	ВходящиеДокументы.Отправитель = &Предмет
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВнутренниеДокументыКонтрагенты.Ссылка
			|ИЗ
			|	Справочник.ВнутренниеДокументы.Контрагенты КАК ВнутренниеДокументыКонтрагенты
			|ГДЕ
			|	ВнутренниеДокументыКонтрагенты.Контрагент = &Предмет
			|
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИсходящиеДокументыПолучатели.Ссылка
			|ИЗ
			|	Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
			|ГДЕ
			|	ИсходящиеДокументыПолучатели.Получатель = &Предмет
			|");
			
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Предметы.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	Иначе // все остальные типы
		
		Предметы.Добавить(Предмет);
		
	КонецЕсли;
	
	ЕстьПредметы = Предметы.Количество() > 0;
	ЕстьПроектыИПроектныеЗадачиПроцессов = 
		Проекты.Количество() > 0 Или ПроектныеЗадачи.Количество() > 0;
	
	Если ЕстьПредметы Или ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
		
		ТекстЗапросаДляПроцессовПоПредметам = "";
		ТекстЗапросаДляПроцессовПоПроектам = "";
		РазделительЗапросовДляПредметов = "";
		РазделительЗапросовДляПроектов = "";
		МетаданныеБизнесПроцессы = Метаданные.БизнесПроцессы;
		
		Для Каждого МетаданныеБП Из МетаданныеБизнесПроцессы Цикл
			
			Если ЕстьПредметы Тогда
				
				ТекстЗапросаДляТекущегоПроцесса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПредметыПроцесса.Ссылка,
					|	ПредметыПроцесса.РольПредмета,
					|	ПредметыПроцесса.Предмет
					|ИЗ
					|	БизнесПроцесс.%ИмяПроцесса%.Предметы КАК ПредметыПроцесса
					|ГДЕ
					|	ПредметыПроцесса.Предмет В (&Предметы)";
					
				ТекстЗапросаДляТекущегоПроцесса = СтрЗаменить(
					ТекстЗапросаДляТекущегоПроцесса, "%ИмяПроцесса%", МетаданныеБП.Имя);
					
				Если ЗначениеЗаполнено(ТекстЗапросаДляПроцессовПоПредметам) Тогда
					ТекстЗапросаДляТекущегоПроцесса =
						СтрЗаменить(ТекстЗапросаДляТекущегоПроцесса, " РАЗРЕШЕННЫЕ", "");
				КонецЕсли;
					
				ТекстЗапросаДляПроцессовПоПредметам = ТекстЗапросаДляПроцессовПоПредметам
					+ РазделительЗапросовДляПредметов
					+ ТекстЗапросаДляТекущегоПроцесса;
					
				РазделительЗапросовДляПредметов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Если ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
				
				ТекстЗапросаДляТекущегоПроцесса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Процессы.Ссылка
					|ИЗ
					|	БизнесПроцесс.%ИмяПроцесса% КАК Процессы
					|ГДЕ
					|	(Процессы.Проект В (&Проекты)
					|			ИЛИ Процессы.ПроектнаяЗадача В (&ПроектныеЗадачи))";
					
				ТекстЗапросаДляТекущегоПроцесса = СтрЗаменить(
					ТекстЗапросаДляТекущегоПроцесса, "%ИмяПроцесса%", МетаданныеБП.Имя);
					
				Если ЗначениеЗаполнено(ТекстЗапросаДляПроцессовПоПроектам) Тогда
					ТекстЗапросаДляТекущегоПроцесса =
						СтрЗаменить(ТекстЗапросаДляТекущегоПроцесса, " РАЗРЕШЕННЫЕ", "");
				КонецЕсли;
				
				ТекстЗапросаДляПроцессовПоПроектам = ТекстЗапросаДляПроцессовПоПроектам
					+ РазделительЗапросовДляПроектов
					+ ТекстЗапросаДляТекущегоПроцесса;
				
				РазделительЗапросовДляПроектов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		
		Если ЕстьПредметы Тогда
			Запрос.Текст = ТекстЗапросаДляПроцессовПоПредметам;
			Запрос.УстановитьПараметр("Предметы", Предметы);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТипСпрПроекты = Тип("СправочникСсылка.Проекты");
			ТипСпрПроектныеЗадачи = Тип("СправочникСсылка.ПроектныеЗадачи");
			
			Пока Выборка.Следующий() Цикл
				Если Результат.ВсеПроцессы.Найти(Выборка.Ссылка) = Неопределено Тогда
					Результат.ВсеПроцессы.Добавить(Выборка.Ссылка);
					
					ЭтоВспомогательныйПредмет = Ложь;
					ТипПредмета = ТипЗнч(Выборка.Предмет);
					Если ТипПредмета = ТипСпрПроекты
						Или ТипПредмета = ТипСпрПроектныеЗадачи Тогда
						
						ЭтоВспомогательныйПредмет = Истина;
					ИначеЕсли Выборка.РольПредмета <> Перечисления.РолиПредметов.Основной Тогда
						ЭтоВспомогательныйПредмет = Истина;
					КонецЕсли;
					
					Если ЭтоВспомогательныйПредмет Тогда
						Результат.ВспомогательныеПроцессы.Добавить(Выборка.Ссылка);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
			Запрос.Текст = ТекстЗапросаДляПроцессовПоПроектам;
			Запрос.УстановитьПараметр("Проекты", Проекты);
			Запрос.УстановитьПараметр("ПроектныеЗадачи", ПроектныеЗадачи);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Результат.ВсеПроцессы.Найти(Выборка.Ссылка) = Неопределено Тогда
					Результат.ВсеПроцессы.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вычисляет головные процессы для переданного массива процессов
//
// Параметры
//   Процессы - массив - процессы, для которых следует определить головные процессы
//
// Возвращаемые параметры:
//   Массив
//     Ссылка на процесс
//
Функция ГоловныеПроцессы(Процессы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ГоловныеПроцессы = Новый Массив;
	
	Для Каждого Процесс Из Процессы Цикл
		
		ГоловнойПроцесс = ГоловнойПроцесс(Процесс);
		
		Если ГоловныеПроцессы.Найти(ГоловнойПроцесс) = Неопределено Тогда
			
			ПраваПоПроцессу = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
				ГоловнойПроцесс, ТекущийПользователь);
				
			Если ПраваПоПроцессу.Чтение Тогда
				ГоловныеПроцессы.Добавить(ГоловнойПроцесс);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГоловныеПроцессы;
	
КонецФункции

// Вычисляет головной процесс по главной/ведущей задаче текущего переданного процесса.
//
// Параметры:
//   Процесс - БизнесПроцессСсылка
//
Функция ГоловнойПроцесс(Процесс)
	
	ГоловнойПроцесс = Неопределено;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"ВедущаяЗадача, ВедущаяЗадача.БизнесПроцесс, ГлавнаяЗадача, ГлавнаяЗадача.БизнесПроцесс");
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
		ГоловнойПроцесс = ГоловнойПроцесс(РеквизитыПроцесса.ВедущаяЗадачаБизнесПроцесс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ГлавнаяЗадача) Тогда
		ГоловнойПроцесс = ГоловнойПроцесс(РеквизитыПроцесса.ГлавнаяЗадачаБизнесПроцесс);
	КонецЕсли;
	
	Если ГоловнойПроцесс = Неопределено Тогда
		ГоловнойПроцесс = Процесс;
	КонецЕсли;
	
	Возврат ГоловнойПроцесс;
	
КонецФункции

// Рекурсивная процедура, добавляет подчиненные процессы и задачи в дерево и список активных задач.
//
// Параметры:
//   Дерево - ДеревоЗначений - иерархия процессов и задач.
//   Процессы - Массив - массив ссылок на процессы текущего уровня. Первоначально передаются процессы находящиеся в корне дерева.
//   ВспомогательныеПроцессы - Массив - массив ссылок на вспомогательные процессы. Вспомогательным процессам имеют Тип = 2.
//   Список - ТаблицаЗначений - список активных задач (задачи в работе). Если список активных задач не задан, то он не заполняется.
//
Процедура ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, Процессы, ВспомогательныеПроцессы,
	ИспользоватьДатуИВремяВСрокахЗадач, Список = Неопределено, СтрокиСВедущимиЗадачами = Неопределено)
	
	// Инициализируем список ведущих задач
	Если СтрокиСВедущимиЗадачами = Неопределено Тогда
		СтрокиСВедущимиЗадачами = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(Процессы) = Тип("Массив") Тогда
		ТаблицаПроцессов = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Ознакомление"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Поручение"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Приглашение"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Регистрация"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
		
		ТаблицаПроцессов.Колонки.Добавить("Процесс", Новый ОписаниеТипов(МассивТипов));
		
		Для Каждого СтрПроцесс Из Процессы Цикл
			СтрТаб = ТаблицаПроцессов.Добавить();
			СтрТаб.Процесс = СтрПроцесс;
		КонецЦикла;
	Иначе
		ТаблицаПроцессов = Процессы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Процессы.Процесс
		|ПОМЕСТИТЬ ТаблицаПроцессов
		|ИЗ
		|	&Процессы КАК Процессы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Наименование,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.Дата,
		|	ДанныеБизнесПроцессов.Важность,
		|	ДанныеБизнесПроцессов.Состояние,
		|	ДанныеБизнесПроцессов.Стартован,
		|	ДанныеБизнесПроцессов.ПометкаУдаления
		|ПОМЕСТИТЬ Процессы
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ТаблицаПроцессов.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.ТекущийИсполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.ПометкаУдаления
		|ПОМЕСТИТЬ ЗадачиПроцессов
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО Процессы.БизнесПроцесс = ЗадачаИсполнителя.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Процессы.ГлавнаяЗадача,
		|	Процессы.ВедущаяЗадача,
		|	Процессы.БизнесПроцесс КАК Ссылка,
		|	Процессы.Наименование,
		|	Процессы.Завершен КАК Выполнена,
		|	Процессы.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		КОГДА НЕ Процессы.Стартован
		|				И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 2
		|		КОГДА НЕ Процессы.Стартован
		|				И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 3
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА Процессы.Завершен = ИСТИНА
		|			ТОГДА 4
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	Процессы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Процессы КАК Процессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		|		ПО Процессы.БизнесПроцесс = ПроцессыДляЗапуска.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО Процессы.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО Процессы.БизнесПроцесс = КешИнформацииОбОбъектах.Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПроцессов.Ссылка,
		|	ЗадачиПроцессов.Наименование,
		|	ЗадачиПроцессов.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачиПроцессов.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена
		|			ТОГДА ЗадачиПроцессов.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаВыполнения,
		|	ЗадачиПроцессов.Выполнена,
		|	ЗадачиПроцессов.РезультатВыполнения,
		|	ЗадачиПроцессов.ПринятаКИсполнению,
		|	ЗадачиПроцессов.Автор,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
		|			ТОГДА 9
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|			ТОГДА 8
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачиПроцессов.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	ЗадачиПроцессов.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачиПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачиПроцессов.Дата КАК Дата,
		|	ЗадачиПроцессов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ЗадачиПроцессов КАК ЗадачиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачиПроцессов.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиПроцессов.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачиПроцессов.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачиПроцессов.Ссылка = ЗадачиДляВыполнения.Задача
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ ПО
		|	БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК Процесс
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО Процессы.БизнесПроцесс = ДочерниеБизнесПроцессы.РодительскийПроцесс";
		
	Запрос.УстановитьПараметр("Процессы", ТаблицаПроцессов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	
	// Заполнение процессами
	ВыборкаПроцессовКДобавлению = РезультатыЗапрос[3].Выбрать();
	Пока ВыборкаПроцессовКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Неопределено;
		
		Если ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ГлавнаяЗадача) Тогда
			СтрокаРодитель = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ГлавнаяЗадача, "Ссылка", Истина);
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ВедущаяЗадача) Тогда
			// Заменяем ведущую строку ведомым процессом
			СтрокаПроцесс = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ВедущаяЗадача, "Ссылка", Истина);
			
			// Удаляем ведущую задачу из списка
			СтрокиСВедущимиЗадачами.Удалить(ВыборкаПроцессовКДобавлению.ВедущаяЗадача);
		КонецЕсли;
		
		Если СтрокаПроцесс = Неопределено Тогда
			СтрокаПроцесс = Дерево.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПроцесс, ВыборкаПроцессовКДобавлению);
		Если ЗначениеЗаполнено(СтрокаПроцесс.Родитель)
			И ЗначениеЗаполнено(СтрокаПроцесс.Родитель.Родитель)
			И СтрокаПроцесс.Родитель.Родитель.Тип = 2 Тогда
			
			СтрокаПроцесс.Тип = 2;
		ИначеЕсли ВспомогательныеПроцессы.Найти(СтрокаПроцесс.Ссылка) <> Неопределено Тогда
			СтрокаПроцесс.Тип = 2;
		Иначе
			СтрокаПроцесс.Тип = 0;
		КонецЕсли;
		
		СтрокаПроцесс.ПринятаКИсполнению = Истина;
		
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Заполнение задачами процессов
	ВыборкаЗадачКДобавлению = РезультатыЗапрос[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗадачКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Дерево.Строки.Найти(
			ВыборкаЗадачКДобавлению.БизнесПроцесс, "Ссылка", Истина);
		
		ВыборкаЗадачДетальныеЗаписи = ВыборкаЗадачКДобавлению.
			Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадачДетальныеЗаписи.Следующий() Цикл
			СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
			Если ВыборкаЗадачДетальныеЗаписи.Выполнена
				Или ВыборкаЗадачДетальныеЗаписи.СрокИсполнения = Дата(1,1,1) Тогда
				
				СтрокаЗадача.Просрочена = Ложь;
				
			ИначеЕсли ИспользоватьДатуИВремяВСрокахЗадач Тогда
				Если ВыборкаЗадачДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			Иначе
				Если КонецДня(ВыборкаЗадачДетальныеЗаписи.СрокИсполнения) < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаЗадачДетальныеЗаписи.Исполнитель) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи);
				// Добавление задачи в список активных
				Если Список <> Неопределено
					И Не ВыборкаЗадачДетальныеЗаписи.Выполнена
					И Не ВыборкаЗадачДетальныеЗаписи.ПометкаУдаления
					И ВыборкаЗадачДетальныеЗаписи.СостояниеБизнесПроцесса = 
						Перечисления.СостоянияБизнесПроцессов.Активен Тогда
					
					СтрокаАктивнаяЗадача = Список.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаАктивнаяЗадача, СтрокаЗадача);
				КонецЕсли;
			Иначе // Для ведущих задач. У ведущих задач нет исполнителя.
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи, "Ссылка, Наименование");
				СтрокиСВедущимиЗадачами.Вставить(СтрокаЗадача.Ссылка, СтрокаЗадача);
			КонецЕсли;
			СтрокаЗадача.Тип = 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ПодчиненныеПроцессы = РезультатыЗапрос[5].Выгрузить();
	
	Если ПодчиненныеПроцессы.Количество() > 0 Тогда
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ПодчиненныеПроцессы, ВспомогательныеПроцессы,
			ИспользоватьДатуИВремяВСрокахЗадач, Список, СтрокиСВедущимиЗадачами);
	Иначе
		//Удаление из дерева ведущих задач
		Для Каждого СтрЗадача Из СтрокиСВедущимиЗадачами Цикл
			КоллекцияСтрок = СтрЗадача.Значение.Родитель.Строки;
			КоллекцияСтрок.Удалить(СтрЗадача.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список активных задач по предмету.
//   Предмет - ссылка на предмет.
//   Список - ТаблицаЗначений - список активных задач (задачи в работе).
//
Процедура ЗаполнитьСписокАктивныхЗадачПоПредмету(Предмет, Список)
	
	УсловиеПоТипуПредмета = "";
	ВнутреннееСоединение = "";
	ТипПредмета = ТипЗнч(Предмет);
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.БизнесПроцесс = &Предмет";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Проекты") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.Проект = &Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.ПроектнаяЗадача = &Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	Иначе
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.Предметы.Предмет = &Предмет";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Автор,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|			ТОГДА ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|		КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|			ТОГДА КОНЕЦПЕРИОДА(ЗадачаИсполнителя.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|	КОНЕЦ КАК Просрочена,
		|	ВЫБОР
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
		|			ТОГДА 9
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|			ТОГДА 8
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачаИсполнителя.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачаИсполнителя.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачаИсполнителя.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И %УсловиеПоТипуПредмета%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоТипуПредмета%", УсловиеПоТипуПредмета);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВнутреннееСоединение%", ВнутреннееСоединение);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьДатуИВремяВСрокахЗадач", ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСписка = Список.Добавить();
		ЗаполнитьЗначенияСвойств(СтрСписка, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество активных задач по предмету.
//   Предмет - ссылка на предмет.
//
Функция КоличествоАктивныхЗадачПоПредмету(Предмет) Экспорт
	
	УсловиеПоТипуПредмета = "";
	ВнутреннееСоединение = "";
	ТипПредмета = ТипЗнч(Предмет);
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.БизнесПроцесс = &Предмет";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Проекты") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.Проект = &Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.ПроектнаяЗадача.Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	Иначе
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.Предметы.Предмет = &Предмет";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И %УсловиеПоТипуПредмета%";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоТипуПредмета%", УсловиеПоТипуПредмета);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

// Возвращает значение настройки ИзменятьЗаданияЗаднимЧислом
//
Функция ИзменятьЗаданияЗаднимЧислом() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
КонецФункции

#КонецОбласти