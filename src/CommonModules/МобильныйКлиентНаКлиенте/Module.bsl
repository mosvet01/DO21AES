
#Область ПрограммныйИнтерфейс

// Выполняет получение мультимедиа данных от устройства.
//
// Параметры:
//  ТипДанных - Строка- Идентификатор данных: "Фото", "Видео", "Аудио", "Файл".
//  ОписаниеОповещения - ОписаниеОповещения - Опо
// 
//
Процедура НачатьПолучениеМультимедиаДанных(ТипДанных, ОписаниеОповещения) Экспорт
	
	МультимедиаДанные = Неопределено;
#Если МобильныйКлиент Тогда
	Если ТипДанных = "Фото" 
		И СредстваМультимедиа.ПоддерживаетсяФотоснимок() Тогда
		
		КачествоФото = 75;
		МультимедиаДанные = СредстваМультимедиа.СделатьФотоснимок(, , КачествоФото);
		
	ИначеЕсли ТипДанных = "Видео" 
		И СредстваМультимедиа.ПоддерживаетсяВидеозапись() Тогда
		
		МультимедиаДанные = СредстваМультимедиа.СделатьВидеозапись();
		
	ИначеЕсли ТипДанных = "Аудио" 
		И СредстваМультимедиа.ПоддерживаетсяАудиозапись() Тогда
		
		МультимедиаДанные = СредстваМультимедиа.СделатьАудиозапись();

	ИначеЕсли ТипДанных = "Файл" Тогда
		
		ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения);
		
	КонецЕсли;
#Иначе
	ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения);
#КонецЕсли
	
	Если МультимедиаДанные <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, МультимедиаДанные);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру описание файла мультимедиа.
//
// Параметры:
//  Мультимедиа - ДанныеМультимедиа, Строка - Сведения о файле.
// 
// Возвращаемое значение:
//  Структура - Описание параметров файла мультимедиа:
//   * Ссылка               - УникальныйИдентификатор - Идентификатор нового файла;
//   * АдресВременногоФайла - Строка - Путь к файлу на диске;
//   * Расширение           - Строка - Тип файла (расширение);
//   * Размер               - Строка - Представление размера файла;
//   * Представление        - Строка - Представление файла (имя).
//   * Ошибка               - Строка - Текстовое описание ошибки.
//
Функция ИнформацияОМультимедиаФайле(Мультимедиа) Экспорт
	
	Если Мультимедиа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	Возврат Неопределено;
#Иначе
	ПредставлениеФайла = Неопределено;
	Расширение = Неопределено;
	ИмяВременногоФайла = Неопределено;
	ФайлДляКопирования = Неопределено;
	РазмерДанных = Неопределено;
	
	Если ТипЗнч(Мультимедиа) = Тип("Строка") Тогда
		
		//Мультимедиа - это адрес текущего файла
		Файл = Новый Файл(Мультимедиа);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		РазмерДанных = Файл.Размер();
		Расширение = Файл.Расширение;
		ПредставлениеФайла = Файл.Имя;
		
		// Если расширение пустое, тогда надо получить его другим путем.
		Если СтрНачинаетсяС(Файл.ПолноеИмя, "content") И ПустаяСтрока(Расширение) Тогда
			ПредставлениеФайла = Файл.ПолучитьПредставлениеФайлаБиблиотекиМобильногоУстройства();
			
			ПоложениеТочки = СтрНайти(ПредставлениеФайла, ".", НаправлениеПоиска.СКонца);
			Если ПоложениеТочки > 0 Тогда
				Расширение = Сред(ПредставлениеФайла, ПоложениеТочки + 1);
			КонецЕсли;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ФайлДляКопирования = Мультимедиа;
		
	Иначе
		Расширение = Мультимедиа.РасширениеФайла;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ФайлДляКопирования = Мультимедиа.ПолучитьДвоичныеДанные();
		РазмерДанных = ФайлДляКопирования.Размер();
		
	КонецЕсли;
	
	Ошибка = Неопределено;
	
	Если Ошибка = Неопределено Тогда
		Если ТипЗнч(ФайлДляКопирования) = Тип("Строка") Тогда
			КопироватьФайл(ФайлДляКопирования, ИмяВременногоФайла);
		Иначе
			ФайлДляКопирования.Записать(ИмяВременногоФайла);
			Файл = Новый Файл(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	ФайлДляКопирования = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПредставлениеФайла) Тогда
		ПредставлениеФайла = Файл.Имя;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Представление", ПредставлениеФайла);
	ВозвращаемоеЗначение.Вставить("Расширение", Расширение);
	ВозвращаемоеЗначение.Вставить("Размер", РазмерДанных);
	ВозвращаемоеЗначение.Вставить("АдресВременногоФайла", ИмяВременногоФайла);
	ВозвращаемоеЗначение.Вставить("Ошибка", Ошибка);
	
	Возврат ВозвращаемоеЗначение;
#КонецЕсли

КонецФункции

// Возвращает пустую структуру, необходимую для записи в регистр сведений информации о мобильном клиенте.
// 
// Возвращаемое значение:
//  Структура - Структура - Пустая структура информации о мобильном клиенте:
//   * ИдентификаторПодписчикаУведомления 	- ИдентификаторПодписчикаДоставляемыхУведомлений
//   * ДатаПоследнегоВхода 				  	- Дата - Дата последнего входа пользователя на МК;
//   * ОперативнаяПамять           		  	- Число - Размер оперативной памяти;
//   * ТипПлатформы               		  	- ТипПлатформы - Тип платформы, в рамках которой осуществляется работа;
//   * ИдентификаторКлиента        		  	- УникальныйИдентификатор - Уникальный идентификатор клиента.
//   * Пользователь               		  	- СправочникССылка - Пользователь МК.
//   * ВерсияПриложения               	  	- Строка - Содержит версию используемого 1С:Предприятия 8.
//   * ВерсияОС               			  	- Строка - Версия операционной системы.
//
Функция НовыйСведенияОМобильномКлиенте() Экспорт

	Результат = Новый Структура;
	
	// Структура с данными о мобильном клиенте.
	Результат.Вставить("ВерсияОС");
	Результат.Вставить("ВерсияПриложения");
	Результат.Вставить("Пользователь");
	Результат.Вставить("ИдентификаторКлиента");
	Результат.Вставить("ТипПлатформы");
	Результат.Вставить("ОперативнаяПамять");
	Результат.Вставить("ДатаПоследнегоВхода");
	Результат.Вставить("ИдентификаторПодписчикаУведомления");

	Возврат Результат;

КонецФункции

// Обработчик локальных и push-уведомлений.
//
// Параметры:
//  Уведомление  - ЛокальноеУведомление - Обрабатываемое локальное или push-уведомление;
//  Локальное    - Булево - признак того, что уведомление локальное, Ложь - push-уведомление;
//  Показано     - Булево - признак того, что уведомление показано;
//  ДопПараметры - Произвольный - дополнительные параметры обработчика.
//
Процедура Подключаемый_ОбработчикУведомлений(Уведомление, Локальное, Показано, ДопПараметры) Экспорт

#Если МобильныйКлиент Тогда	

	СсылкаСтрокой = Уведомление.Данные;
	Если ЗначениеЗаполнено(СсылкаСтрокой) Тогда
		Ссылка = МобильныйКлиентВызовСервера.ЗначенияСтрокиВнутрВСсылку(СсылкаСтрокой);
	КонецЕсли;
	
	Попытка
		ОбработатьПоказУведомления(Ссылка, Уведомление.Текст);		
	Исключение
		
		Если Не Показано Тогда
			МобильныйКлиентВызовСервера.ЗаписьЖурналаРегистрацииСервер(
				НСтр("ru = 'Ошибка в обработчике push на МК'") + ОписаниеОшибки());
		КонецЕсли;
		
	КонецПопытки;
	
#КонецЕсли

КонецПроцедуры

// Обновляет заголовки закладок миникарточки документа в списках на мобильном
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Входящих, Исходящих или Документов предприятия, 
//   в котором обновляются заголовки
//
Процедура ВывестиЗаголовкиЗакладокМК(Форма) Экспорт
	
	// Для страницы "Содержание"
	Форма.ЗаголовокСодержаниеФайлы = НСтр("ru = 'Описание'");
	
	// Для страницы "Файлы"
	Если Форма.КоличествоФайлов > 0 Тогда 
		Форма.ЗаголовокФайлыМК = СтрШаблон(НСтр("ru = 'Файлы (%1)'"), Форма.КоличествоФайлов);
	Иначе
		Форма.ЗаголовокФайлыМК = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
	// Для страницы "Задачи"
	Если Форма.КоличествоЗадач > 0 Тогда 
		Форма.ЗаголовокЗадачиСвязи = СтрШаблон(НСтр("ru = 'Задачи (%1)'"), Форма.КоличествоЗадач);
	Иначе
		Форма.ЗаголовокЗадачиСвязи = НСтр("ru = 'Задачи'");
	КонецЕсли;
	
	// Для страницы "Связи"
	Если Форма.КоличествоСвязей > 0 Тогда 
		Форма.ЗаголовокСвязиМК = СтрШаблон(НСтр("ru = 'Связи (%1)'"), Форма.КоличествоСвязей);
	Иначе
		Форма.ЗаголовокСвязиМК = НСтр("ru = 'Связи'");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения)
	
	ЗаголовокДиалога = НСтр("ru = 'Выберите файл'");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = ЗаголовокДиалога;
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// Показывает вопрос пользователю о показе уведомления
//
// Параметры:
//  НавсСсылка - Строка - Навигационная ссылка на объект уведомления;
//  ТекстУведомления - Строка - Текст уведомления
//
Процедура ОбработатьПоказУведомления(Ссылка, ТекстУведомления)
	
	ОбработкаРешения = Новый ОписаниеОповещения(
		"ОбработкаРешенияПоказатьОбъектУведомления", ЭтотОбъект, Ссылка);

	КнопкиДиалога = Новый СписокЗначений();
	
	Если ЗначениеЗаполнено(Ссылка) И Ссылка <> ПользователиКлиент.ТекущийПользователь() Тогда
		КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК , НСтр("ru = 'Просмотреть'"));
	КонецЕсли;	
	
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопрос(ОбработкаРешения, ТекстУведомления, КнопкиДиалога);
	
КонецПроцедуры

// Обрабатывает решение пользователя об обработке уведомления
//
// Параметры:
//  Решение - Строка - Решение пользователя;
//  Ссылка - ЛюбаяСсылка - Ссылка для показа.
//
Процедура ОбработкаРешенияПоказатьОбъектУведомления(Решение, Ссылка) Экспорт
	
	Если Решение = КодВозвратаДиалога.ОК Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

