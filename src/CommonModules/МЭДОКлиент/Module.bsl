
#Область СлужебныйПрограммныйИнтерфейс

// Стандартная структура-контруктор простого ответа без файла, для передачи на клиент.
// 
// Возвращаемое значение:
//  Структура - Новый легкий ответ:
//   * Успех - Булево
//   * СообщениеОбОшибке - Строка 
Функция НовыйЛегкийОтвет() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Успех", Истина);
	Данные.Вставить("СообщениеОбОшибке", "");
	
	Возврат Данные;
	
КонецФункции

// Процедура - Начинает подписание и отправку исходящих документов, вызывая описание оповещения при
// завершении и фиксируя состояние отправки.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - Организация.
//   ИсходящиеДокументы - Массив из ОпределяемыйТип.ПредметМЭДО - Массив ссылок на исходящие документы.
//   Форма - ФормаКлиентскогоПриложения - форма, откуда вызывается отправка.
//   ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при завершении, с параметром:
//     Соответствие из Структура, где ключ - документ, а значение - Структура, см. МЭДОСтруктурыДанных.НовыйЛегкийОтвет.
//
Процедура НачатьОтправкуИсходящихДокументов(Организация, ИсходящиеДокументы, Форма, ОписаниеОповещения) Экспорт
	
	ОчиститьСообщения();
	
	Настройки = МЭДОВызовСервера.ПолучитьНастройкиОрганизации(
		Организация, "Организация, КаталогОтправки, РазмерПорции");
	Если Настройки = Неопределено Тогда
		ПоказатьПредупреждение( , 
			НСтр("ru = 'Отменено. В настройках организации не указан каталог для помещения файлов отправки'"));
		Возврат;
	КонецЕсли;
	
	Путь = Настройки.КаталогОтправки;
	
	
	ОписаниеДанных = Новый Структура();
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание для отправки по МЭДО'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Исходящие документы'"));
	ОписаниеДанных.Вставить("ПредставлениеНабора", 
		СтрШаблон(НСтр("ru = 'Исходящие документы (%1)'"), ИсходящиеДокументы.Количество()));
	
	АдресДанныхДокументов = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	НаборДанных = МЭДОВызовСервера.НаборДанныхИсходящихДокументовДляПодписания(ИсходящиеДокументы, АдресДанныхДокументов);
	ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
	
	ПараметрыОповещения = Новый Структура(
		"Путь, АдресДанныхДокументов, ОписаниеОповещения",
		Путь, АдресДанныхДокументов, ОписаниеОповещения);
	ОбработкаРезультата = Новый ОписаниеОповещения(
		"ПослеПодписанияКонтейнеровИсходящихДокументов", ЭтотОбъект, ПараметрыОповещения);
	
	РезультатБезПодписания = Новый Структура(
		"Успех, НаборДанных",
		Истина, Новый Массив());
	ВыполнитьОбработкуОповещения(ОбработкаРезультата, РезультатБезПодписания);

КонецПроцедуры

// Процедура - Вызывается после подписания контейнеров и продолжает отправку исходящих документов.
//
// Параметры:
//   ОписаниеДанных - Структура - Структура со свойствами:
//     * Успех - Булево - Истина, если подписание завершено успешно.
//     * НаборДанных - Массив из Структура - массив структур со свойством СвойствоПодписи (см. ЭлектроннаяПодписьКлиент.Подписать).
//   ПараметрыОповещения - Структура - Со свойствами:
//     * Путь - Строка - путь выгрузки.
//     * АдресДанныхДокументов - Строка - адрес данных документов во временном хранилище.
//     * ОписаниеОповещения - ОписаниеОповещения - оповещение, вызваемое при успехе.
//
Процедура ПослеПодписанияКонтейнеровИсходящихДокументов(ОписаниеДанных, ПараметрыОповещения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		МЭДОВызовСервера.УдалитьВременныеФайлы(ПараметрыОповещения.АдресДанныхДокументов);
		Возврат;
	КонецЕсли;
	
	Подписи = Новый Соответствие;
	Для Каждого ЭлементНабора Из ОписаниеДанных.НаборДанных Цикл
		Подписи[ЭлементНабора.СвойстваПодписи.Объект] = ЭлементНабора.СвойстваПодписи.Подпись;
	КонецЦикла;
	
	Результат = МЭДОВызовСервера.ЗаписатьСообщенияПоИсходящимДокументамПослеПодписания(
		ПараметрыОповещения.Путь, ПараметрыОповещения.АдресДанныхДокументов, Подписи);
	
	Если ТипЗнч(ПараметрыОповещения.ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры


// Создать ответное уведомление на входящий документ. Сначала дает выбрать тип уведомления, потом открывает форму
// документа - "Уведомление МЭДО".
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма-владелец, вызвавшая процедуру
Процедура СоздатьОтветноеУведомление(Документ, ФормаВладелец) Экспорт
	
	Фраза = СтрШаблон(
		НСтр("ru = 'Укажите тип ответного уведомления на документ %1
		|Будет создано ответное уведомление для последующей отправки.'"),
		Документ);
	ТипУведомления = Неопределено;
	ДопПараметры = Новый Структура("Документ, ФормаВладелец", Документ, ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВводаТипаУведомления", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(
		ОписаниеОповещения, ТипУведомления, Фраза, Тип("ПеречислениеСсылка.ТипыУведомленийМЭДО"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗавершениеВводаТипаУведомления(ТипУведомления, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОткрытиеИзФормы", Истина);
	ПараметрыФормы.Вставить("ЭтоСоздание", Истина);
	ПараметрыФормы.Вставить("ТипУведомления", ТипУведомления);
	ПараметрыФормы.Вставить("Документ", ДопПараметры.Документ);
	ОткрытьФорму("Документ.УведомлениеМЭДО.Форма.ФормаДокумента", ПараметрыФормы, ДопПараметры.ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти
