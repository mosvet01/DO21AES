////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемыДокументооборота.ОбщийОбработчикОжидания

// Инициализирует переменные общего обработчика ожидания.
//
Процедура ИнициализироватьПеременныеОбщегоОбработчикаОжидания() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	ПараметрыПриложения["Уведомления.ПроверятьУведомления"] = ПараметрыРаботыКлиента.ИспользоватьУведомленияПользователя;
	ПараметрыПриложения["Уведомления.ТекущиеУведомленияВОтдельномОкне"] = Новый Массив;
	ПараметрыПриложения["Уведомления.ПоказанныеУведомления"] = Новый Массив;
	ПараметрыПриложения["Уведомления.ОбработанныеУведомления"] = Новый Массив;
	
	// Для работы механизма уведомлений. Значение устанавливается на 1 минут
	// раньше текущей даты для того что бы проверка уведомлений была запущена сразу после начала работы.
	ПараметрыПриложения["Уведомления.ДатаПроверкиУведомлений"] =
		?(ПараметрыРаботыКлиента.ИспользоватьУведомленияПользователя,
			ТекущаяДата() - 60,
			Дата(1, 1, 1));
	
КонецПроцедуры

// Проверяет готовые к запуску общие обработчики ожидания.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения общего обработчика ожидания.
//
Процедура ОбщиеОбработчикиОжиданияКЗапуску(ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.Вставить("ПроверитьУведомления", Ложь);
	ПараметрыВыполнения.Вставить("ПоказанныеУведомления", Новый Массив);
	Если ПараметрыПриложения["Уведомления.ПроверятьУведомления"]
		И ТекущаяДата() - ПараметрыПриложения["Уведомления.ДатаПроверкиУведомлений"] >= 60 Тогда
		ПараметрыВыполнения.ПроверитьУведомления = Истина;
		ПараметрыВыполнения.ПоказанныеУведомления =
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				ПараметрыПриложения["Уведомления.ПоказанныеУведомления"]);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ОтметитьОбработкуУведомлений", Ложь);
	ПараметрыВыполнения.Вставить("ОбработанныеУведомления", Новый Массив);
	Если ПараметрыПриложения["Уведомления.ОбработанныеУведомления"].Количество() > 0 Тогда
		ПараметрыВыполнения.ОтметитьОбработкуУведомлений = Истина;
		ПараметрыВыполнения.ОбработанныеУведомления =
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				ПараметрыПриложения["Уведомления.ОбработанныеУведомления"]);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действие общего обработчика ожидания на клиенте.
//
// Параметры:
//  РезультатыВыполнения - Структура - Результаты выполнения общего обработчика ожидания на сервере.
//
Процедура ВыполнитьДействиеОбщегоОбработчикаОжидания(РезультатыВыполнения) Экспорт
	
	Если РезультатыВыполнения.ПровереныУведомления Тогда
		
		ПараметрыПриложения["Уведомления.ПоказанныеУведомления"].Очистить();
		ПараметрыПриложения["Уведомления.ДатаПроверкиУведомлений"] = ТекущаяДата();
		
		НастройкаУведомленияОкномПоказыватьВЦентреОповещений 
			= РезультатыВыполнения.НастройкаУведомленияОкномПоказыватьВЦентреОповещений;
			
		Если НастройкаУведомленияОкномПоказыватьВЦентреОповещений = Истина Тогда // новый режим
			
			Для Каждого ДанныеУведомления Из РезультатыВыполнения.ДанныеУведомлений Цикл
				
				ПоказатьУведомление(
					ДанныеУведомления.Уведомление,
					ДанныеУведомления.ВидУведомления,
					ДанныеУведомления.Предмет,
					ДанныеУведомления.ТекстОповещения,
					ДанныеУведомления.ПояснениеОповещения);
				
				ПараметрыПриложения["Уведомления.ПоказанныеУведомления"].Добавить(ДанныеУведомления.Уведомление);
				
			КонецЦикла;
			
		Иначе
			
			ПоказатьУведомленияВОтдельномОкне(РезультатыВыполнения.ДанныеУведомлений);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если РезультатыВыполнения.ОтмеченаОбработкаУведомлений Тогда
		
		ПараметрыПриложения["Уведомления.ОбработанныеУведомления"].Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает уведомление в центре оповещений.
//
// Параметры:
//  Уведомление         - СправочникСсылка.УведомленияПрограммы       - Уведомление.
//  ВидУведомления      - ПеречислениеСсылка.ВидыУведомленийПрограммы - Вид уведомления.
//  Предмет             - ОпределяемыйТип.ОбъектУведомления           - Ссылка на предмет уведомления.
//  ТекстОповещения     - Строка                                      - Текст уведомления.
//  ПояснениеОповещения - Строка                                      - Пояснение уведомления.
//
Процедура ПоказатьУведомление(Уведомление, ВидУведомления, Предмет, ТекстОповещения, ПояснениеОповещения)
	
	ДействиеПриНажатии = СсылкаСтандартнойОбработкиУведомления(Уведомление, ВидУведомления, Предмет);
	
	КартинкаОповещения = 
		?(ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийПрограммы.Ошибка"),
			БиблиотекаКартинок.ВидУведомленияОшибка,
			БиблиотекаКартинок.ВидУведомленияИнформация);
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ДействиеПриНажатии,
		ПояснениеОповещения,
		КартинкаОповещения,
		СтатусОповещенияПользователя.Важное);
	
КонецПроцедуры

// Показывает уведомления в отдельном окне.
// 
// Параметры:
//  ДанныеУведомлений - Массив - Данные уведомлений.
//
Процедура ПоказатьУведомленияВОтдельномОкне(ДанныеУведомлений)
	
	// Если данных уведомлений нет, то показывать нечего.
	Если ДанныеУведомлений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если новых уведомлений нет - то не преследуем пользователя показом уведомлений.
	УведомленияДляПоказа = Новый Массив;
	Для Каждого ДанныеУведомления Из ДанныеУведомлений Цикл
		УведомленияДляПоказа.Добавить(ДанныеУведомления.Уведомление);
	КонецЦикла;
	
	НовыеУведомления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		УведомленияДляПоказа,
		ПараметрыПриложения["Уведомления.ТекущиеУведомленияВОтдельномОкне"]);
	Если НовыеУведомления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Покажем уведомления - сначала закроем уже открытое окно показа уведомлений, а затем откроем новое, на текущей странице.
	Оповестить("ЗакрытьПоказУведомлений");
	
	// Если несколько - список, если 1 - просто его карточку.
	Если ДанныеУведомлений.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("РежимРаботы", "ПоказУведомлений");
		ОткрытьФорму("Справочник.УведомленияПрограммы.ФормаСписка",
			ПараметрыФормы,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Для Каждого ДанныеУведомления Из ДанныеУведомлений Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("РежимРаботы", "ПоказУведомлений");
			ПараметрыФормы.Вставить("Ключ", ДанныеУведомления.Уведомление);
			ОткрытьФорму("Справочник.УведомленияПрограммы.ФормаОбъекта", ПараметрыФормы);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыПриложения["Уведомления.ТекущиеУведомленияВОтдельномОкне"] = УведомленияДляПоказа;
	
КонецПроцедуры

// Формирует ссылку стандартной обработки уведомления.
//
// Параметры:
//  Уведомление    - СправочникСсылка.УведомленияПрограммы       - Уведомление.
//  ВидУведомления - ПеречислениеСсылка.ВидыУведомленийПрограммы - Вид уведомления.
//  Предмет        - ОпределяемыйТип.ОбъектУведомления           - Ссылка на предмет уведомления.
//
// Возвращаемое значение:
//  Строка - Ссылка стандартной обработки уведомления.
//
Функция СсылкаСтандартнойОбработкиУведомления(Уведомление, ВидУведомления, Предмет) Экспорт
	
	Если ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийПрограммы.Ошибка") Тогда
		СсылкаСтандартнойОбработки = ПолучитьНавигационнуюСсылку(Уведомление);
	ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда
		СсылкаСтандартнойОбработки = ПолучитьНавигационнуюСсылку(Предмет);
	Иначе
		СсылкаСтандартнойОбработки = ПолучитьНавигационнуюСсылку(Уведомление);
	КонецЕсли;
	
	Возврат СсылкаСтандартнойОбработки;
	
КонецФункции

#КонецОбласти