////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с обсуждениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает идентификатор пользователя системы взаимодействия, работающего в данной информационной базе.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  ИдентификаторПользователяСистемыВзаимодействия - Идентификатор пользователя системы взаимодействия.
//
Функция ИдентификаторПользователяСВ(Пользователь, СоздаватьЕслиНеНайден = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователяСВ = Неопределено;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат ИдентификаторПользователяСВ;
	КонецЕсли;
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Пользователь, "ИдентификаторПользователяИБ");
	
	Возврат ИдентификаторПользователяСВПоИдПользователяИБ(
		ИдентификаторПользователяИБ, СоздаватьЕслиНеНайден);
	
КонецФункции

// Возвращает идентификатор пользователя системы взаимодействия, работающего в данной информационной базе.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  ИдентификаторПользователяСистемыВзаимодействия - Идентификатор пользователя системы взаимодействия.
//
Функция ИдентификаторПользователяСВПоИдПользователяИБ(
			ИдентификаторПользователяИБ, СоздаватьЕслиНеНайден = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователяСВ = Неопределено;
	Если Не ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Возврат ИдентификаторПользователяСВ;
	КонецЕсли;
	
	Попытка
		ИдентификаторПользователяСВ = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(
			ИдентификаторПользователяИБ);
	Исключение
		Если СоздаватьЕслиНеНайден Тогда
			// Регистрация пользователя в системе взаимодействия.
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);
				ПользовательСВ.Записать();
				ИдентификаторПользователяСВ = ПользовательСВ.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
	Возврат ИдентификаторПользователяСВ;
	
КонецФункции

// Отправляет личное сообщение через систему взаимодействия от имени пользователя.
//
// Параметры:
//  ОтКого   - СправочникСсылка.Пользователи - От кого следует отправить сообщение.
//  Кому     - СправочникСсылка.Пользователи - Кому следует отправить сообщение.
//  Текст    - Строка                        - Текст сообщения.
//  Вложения - Массив из Структура           - Вложения сообщения. См. РаботаСЧатБотом.ВложениеЧатБота().
//  Действия - СписокЗначений                - Действия сообщения.
//
// Возвращаемое значение:
//  Структура - Результат отправки личного сообщения через систему взаимодействия.
//   * Отправлено  - Булево - Сообщение было отправлено.
//   * ТекстОшибки - Строка - Текст ошибки, почему сообщение не было отправлено.
//
Функция ОтправитьЛичноеСообщение(
	ОтКого, Кому, Текст = Неопределено, Вложения = Неопределено, Действия = Неопределено) Экспорт
	
	РезультатОтправки = Новый Структура();
	РезультатОтправки.Вставить("Отправлено", Ложь);
	РезультатОтправки.Вставить("ТекстОшибки", "");
	
	Если Не ЗначениеЗаполнено(ОтКого) Тогда
		РезультатОтправки.ТекстОшибки = НСтр("ru = 'Не указано, от чьего имени следует отправить сообщение.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Кому) Тогда
		РезультатОтправки.ТекстОшибки = НСтр("ru = 'Не указано, кому следует отправить сообщение.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) 
		И Не ЗначениеЗаполнено(Вложения) 
		И Не ЗначениеЗаполнено(Действия) Тогда
		
		РезультатОтправки.ТекстОшибки = НСтр("ru = 'Не заданы данные сообщения.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Попытка
		
		ОтКогоИдентификаторСВ = ИдентификаторПользователяСВ(ОтКого);
		Если ОтКогоИдентификаторСВ = Неопределено Тогда
			РезультатОтправки.ТекстОшибки =
				НСтр("ru = 'Не удалось определить идентификатор системы взаимодействия пользователя,
					| от чьего имени следует отправить сообщение.'");
			Возврат РезультатОтправки;
		КонецЕсли;
		
		КомуИдентификаторСВ = ИдентификаторПользователяСВ(Кому);
		Если КомуИдентификаторСВ = Неопределено Тогда
			РезультатОтправки.ТекстОшибки =
				НСтр("ru = 'Не удалось определить идентификатор системы взаимодействия пользователя, кому следует отправить сообщение.'");
			Возврат РезультатОтправки;
		КонецЕсли;
		
		ЛичноеОбсуждениеПользователей = ЛичноеОбсуждениеПользователей(ОтКогоИдентификаторСВ, КомуИдентификаторСВ);
		
		ОтправитьСообщение(
			ЛичноеОбсуждениеПользователей.Идентификатор,
			ОтКогоИдентификаторСВ,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КомуИдентификаторСВ),
			Текст,
			Вложения,
			Действия);
		
		РезультатОтправки.Отправлено = Истина;
		
	Исключение
		
		РезультатОтправки.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатОтправки;
		
	КонецПопытки;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Формирует пустую структуру вложения, которое умеет отправлять система взаимодействия.
// 
// Возвращаемое значение:
//  Структура - Вложение, которое умеет отправлять чат-бот.
//   * ИмяФайла    - Строка         - Наименование вложения.
//   * ДанныеФайла - ДвоичныеДанные - Двоичные данные, из которых будет создано вложение.
//
Функция ВложениеСВ(ИмяФайла, ДанныеФайла) Экспорт
	
	Возврат Новый Структура("ИмяФайла, ДанныеФайла", ИмяФайла, ДанныеФайла);
	
КонецФункции

// Возвращает ссылку на личное обсуждение пользователей.
//
// Параметры:
//  ИдентификаторПользователяСВ1 - ИдентификаторПользователяСистемыВзаимодействия - Первый пользователь.
//  ИдентификаторПользователяСВ2 - ИдентификаторПользователяСистемыВзаимодействия - Второй пользователь.
// 
// Возвращаемое значение:
//  ОбсуждениеСистемыВзаимодействия - Личное обсуждение пользователей.
//
Функция ЛичноеОбсуждениеПользователей(ИдентификаторПользователяСВ1, ИдентификаторПользователяСВ2) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЛичноеОбсуждениеПользователей = СистемаВзаимодействия.СоздатьОбсуждение();
	ЛичноеОбсуждениеПользователей.Групповое = Ложь;
	ЛичноеОбсуждениеПользователей.Участники.Добавить(ИдентификаторПользователяСВ1);
	ЛичноеОбсуждениеПользователей.Участники.Добавить(ИдентификаторПользователяСВ2);
	ЛичноеОбсуждениеПользователей.Записать();
	
	Возврат ЛичноеОбсуждениеПользователей;
	
КонецФункции

// Пересылает сообщение указанным пользователям через личное сообщение от автора.
//
// Параметры:
//  ИдентификаторСообщения - Идентификатор пересылаемого сообщения.
//  ПользователиПолучатели - Массив - ссылки на пользователей или идентификаторы пользователей ИБ.
//  ПользовательАвтор - СправочникСсылка.Пользователи - пользователь,
//  	от имени которого будут отправлены личные сообщения - копии оригинала.
//  	Если не указан, в качестве автора будет автор оригинального сообщения.
//  ДобавлятьИмяАвтораОригиналаВТекст - Булево - если Истина, в конец текста сообщения
//  	будет добавлено имя автора оригинала.
//
// Возвращаемое значение:
//  Структура
//   * Доставлено - количество получателей, которым сообщение переслано успешно.
//   * НеДоставлено - количество получателей, которым сообщение не удалось переслать из-за ошибки.
// 
Функция ПереслатьСообщениеПользователя(
			ИдентификаторСообщения,
			Знач ПользователиПолучатели,
			Знач ПользовательАвтор = Неопределено,
			Знач ДобавлятьИмяАвтораОригинала = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Доставлено, НеДоставлено", 0, 0);
	
	Если ПользователиПолучатели.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СообщениеОригинал = СистемаВзаимодействия.ПолучитьСообщение(ИдентификаторСообщения);
	Если СообщениеОригинал = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторСВАвтора = СообщениеОригинал.Автор;
	Если ЗначениеЗаполнено(ПользовательАвтор) Тогда
		ИдентификаторСВАвтора = ИдентификаторПользователяСВ(ПользовательАвтор);
	КонецЕсли;
	
	ИмяАвтораОригинала = "";
	Если ДобавлятьИмяАвтораОригинала И ИдентификаторСВАвтора <> СообщениеОригинал.Автор Тогда
		АвторОригиналаПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(СообщениеОригинал.Автор);
		ИмяАвтораОригинала = АвторОригиналаПользовательСВ.ПолноеИмя;
	Иначе
		ДобавлятьИмяАвтораОригинала = Ложь;
	КонецЕсли;
	
	ИдентификаторыИБПолучателей = ПользователиПолучатели;
	Если ТипЗнч(ПользователиПолучатели[0]) = Тип("СправочникСсылка.Пользователи") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Ссылка В(&ПользователиПолучатели)");
		Запрос.УстановитьПараметр("ПользователиПолучатели", ПользователиПолучатели);
		ИдентификаторыИБПолучателей =
			Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	КонецЕсли;
	
	ДанныеОФайлахВложений = Новый Массив;
	Для Каждого Вложение Из СообщениеОригинал.Вложения Цикл
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ЧтениеДанных = Новый ЧтениеДанных(Вложение.ОткрытьПотокДляЧтения());
		ЗаписьДанных = Новый ЗаписьДанных(ИмяВременногоФайла);
		ЧтениеДанных.КопироватьВ(ЗаписьДанных);
		ЗаписьДанных.Закрыть();
		ДанныеОФайлахВложений.Добавить(Новый Структура("ИмяВложения, ИмяФайла",
			Вложение.Наименование, ИмяВременногоФайла));
	КонецЦикла;
	
	Для Каждого ИдентификаторИБПолучателя Из ИдентификаторыИБПолучателей Цикл
		
		Попытка
			
			ИдентификаторСВПолучателя = ИдентификаторПользователяСВПоИдПользователяИБ(ИдентификаторИБПолучателя);
			ПолучательПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторСВПолучателя);
			Если ПолучательПользовательСВ.Заблокирован Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИдентификаторСВПолучателя = ИдентификаторСВАвтора Тогда
				Продолжить;
			КонецЕсли;
			
			Обсуждение = ЛичноеОбсуждениеПользователей(ИдентификаторСВАвтора, ИдентификаторСВПолучателя);
			Сообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
			Сообщение.Автор = ИдентификаторСВАвтора;
			Сообщение.Текст = СообщениеОригинал.Текст;
			
			Если ДобавлятьИмяАвтораОригинала Тогда
				ЧастиСтроки = Новый Массив;
				ЧастиСтроки.Добавить(Сообщение.Текст);
				ЧастиСтроки.Добавить(Символы.ПС);
				ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(
					СтрШаблон(НСтр("ru = '(от пользователя %1)'"), ИмяАвтораОригинала),
					Новый Шрифт(,,, Истина), ЦветаСтиля.ЦветСлужебнойНадписиОбсуждений));
				Сообщение.Текст = Новый ФорматированнаяСтрока(ЧастиСтроки);
			КонецЕсли;
			
			Для Каждого ДанныеОФайле Из ДанныеОФайлахВложений Цикл
				ДвоичныеДанные = Новый ДвоичныеДанные(ДанныеОФайле.ИмяФайла);
				Сообщение.Вложения.Добавить(ДвоичныеДанные.ОткрытьПотокДляЧтения(), ДанныеОФайле.ИмяВложения);
			КонецЦикла;
			
			Сообщение.Записать();
			Результат.Доставлено = Результат.Доставлено + 1;
			
		Исключение
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при пересылке сообщения пользователю.
					|Сообщение: %1;
					|Обсуждение: %2;
					|Пользователь: %3(%4);
					|Текст ошибки: %5.'"),
				ИдентификаторСообщения,
				СообщениеОригинал.Обсуждение,
				ПолучательПользовательСВ.Имя,
				ИдентификаторСВПолучателя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
			Результат.НеДоставлено = Результат.НеДоставлено + 1;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого ДанныеОФайле Из ДанныеОФайлахВложений Цикл
		ФайловаяСистема.УдалитьВременныйФайл(ДанныеОФайле.ИмяФайла);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает навигационную ссылку на автообновляемое по переданному контейнеру обсуждение.
// Если обсуждение не найдено по ключу, создается новое.
//
// Параметры:
//  КонтейнерСсылка - СправочникСсылка - ссылка на контейнер.
//  СНижестоящими - Булево - уточняет состав обсуждения.
//
// Возвращаемое значение:
//  Строка, Неопределено - навигационная ссылка на обсуждение, либо код ошибки.
//
Функция АвтообноновляемоеОбсуждение(КонтейнерСсылка, СНижестоящими) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат "НеПодключено";
	КонецЕсли;
	
	КлючОбсуждения = КлючАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими);
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
	Если Обсуждение = Неопределено Тогда
		// Создание нового обсуждения.
		ЗаголовокОбсуждения = ЗаголовокАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими);
		УчастникиОбсуждения = УчастникиАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими);
		
		Лимит = Константы.ЛимитРазмераАвточатов.Получить();
		Если Лимит > 0 И УчастникиОбсуждения.Количество() > Лимит Тогда
			Возврат "ПревышенЛимит";
		КонецЕсли;
		
	 	Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		Обсуждение.Ключ = КлючОбсуждения;
		Обсуждение.Заголовок = ЗаголовокОбсуждения;
		Для Каждого Участник Из УчастникиОбсуждения Цикл
			Обсуждение.Участники.Добавить(Участник);
		КонецЦикла;
		Обсуждение.Записать();
	КонецЕсли;
	
	Возврат ПолучитьНавигационнуюСсылку(Обсуждение.Идентификатор);
	
КонецФункции

// Возвращает ключ автообновляемого обсуждения для переданного контейнера
// 
// Параметры:
//  КонтейнерСсылка - СправочникСсылка
//  СНижестоящими - Булево - уточняет состав обсуждения.
//
// Возвращаемое значение:
//  Строка - Ключ обсуждения.
//
Функция КлючАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими) Экспорт
	
	Ключ = "";
	Если СНижестоящими Тогда
		Ключ = СтрШаблон("%1;%2;Auto;AllLevels",
			КонтейнерСсылка.УникальныйИдентификатор(), КонтейнерСсылка.Метаданные().ПолноеИмя());
	Иначе
		Ключ = СтрШаблон("%1;%2;Auto",
			КонтейнерСсылка.УникальныйИдентификатор(), КонтейнерСсылка.Метаданные().ПолноеИмя());
	КонецЕсли;
		
	Возврат Ключ;
	
КонецФункции

// Возвращает ключ автообновляемого обсуждения для переданного контейнера
// 
// Параметры:
//  КонтейнерСсылка - СправочникСсылка
//  СНижестоящими - Булево - уточняет состав обсуждения.
//
// Возвращаемое значение:
//  Строка - Ключ обсуждения.
//
Функция ЗаголовокАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими) Экспорт
	
	Возврат ЗаголовокАвтообновляемогоОбсужденияПоПредставлению(
				Строка(КонтейнерСсылка), КонтейнерСсылка.Метаданные(), СНижестоящими);
	
КонецФункции

Функция ЗаголовокАвтообновляемогоОбсужденияПоПредставлению(
			ПредставлениеКонтейнера, МетаданныеКонтейнера, СНижестоящими) Экспорт
	
	Заголовок = "";
	Если СНижестоящими Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (%2, с нижестоящими)'"),
			ПредставлениеКонтейнера, НРег(МетаданныеКонтейнера.ПредставлениеОбъекта));
	Иначе
		Заголовок = СтрШаблон("%1 (%2)",
			ПредставлениеКонтейнера, НРег(МетаданныеКонтейнера.ПредставлениеОбъекта));
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Обработчик регламентного задания.
// 
Процедура ОбработатьОчередьОбновленияОбсуждений() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеОбсуждений, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	КолОбработанныхЭлементов = РегистрыСведений.ОчередьОбновленияОбсуждений.ОбработатьОчередь();
	Если КолОбработанныхЭлементов = 0 Тогда
		РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(
			Метаданные.РегламентныеЗадания.ОбновлениеОбсуждений);
		Если РеглЗадание.Использование Тогда
			РеглЗадание.Использование = Ложь;
			РеглЗадание.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания.
// 
Процедура АктуализироватьСоставАвтообсужденийОбработчик() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.АктуализироватьСоставАвтообсуждений, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	АктуализироватьСоставАвтообсуждений();
	
КонецПроцедуры

// Обработчик подписки на событие.
// 
Процедура АвтообновлениеОбсужденийПередЗаписьюОбъекта(Источник, Отказ) Экспорт
	
	АвтообновлениеОбсужденийПередЗаписью(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подписки на событие.
// 
Процедура АвтообновлениеОбсужденийПриЗаписиОбъекта(Источник, Отказ) Экспорт
	
	АвтообновлениеОбсужденийПриЗаписи(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подписки на событие.
// 
Процедура АвтообновлениеОбсужденийПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	АвтообновлениеОбсужденийПередЗаписью(Источник, Отказ, Замещение);
	
КонецПроцедуры

// Обработчик подписки на событие.
// 
Процедура АвтообновлениеОбсужденийПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	АвтообновлениеОбсужденийПриЗаписи(Источник, Отказ, Замещение);
	
КонецПроцедуры

// Регулирует видимость кнопки обсуждения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента-контейнера.
//
Процедура ОбновитьВидимостьОбсужденийВАвтообновляемомЧате(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	КнопкаОбсуждениеБезНижестоящих = Форма.Элементы.ОбсуждениеВАвточатеБезНижестоящих;
	КнопкаОбсуждениеСНижестоящими = Форма.Элементы.Найти("ОбсуждениеВАвточатеСНижестоящими");
	ПодменюОбсуждения = Форма.Элементы.Найти("ОбсудитьСУчастникамиГруппа");
	
	// По умолчанию.
	КнопкаОбсуждениеБезНижестоящих.Видимость = Ложь;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ЭтоИерархическийСправочник =
		МетаданныеОбъекта = Метаданные.Справочники.СтруктураПредприятия
		Или МетаданныеОбъекта = Метаданные.Справочники.РабочиеГруппы;
	Если ЭтоИерархическийСправочник Тогда
		КнопкаОбсуждениеСНижестоящими.Видимость = Ложь;
		ПодменюОбсуждения.Видимость = Ложь;
	КонецЕсли;
	
	ВходитВСоставКонтейнераСНижестоящими = Ложь;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	СоставКонтейнераСНижестоящими = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СоставКонтейнераСНижестоящими = СоставВладельцаАвтообновляемогоЧата(Объект.Ссылка, Истина);
	КонецЕсли;
	ВходитВСоставКонтейнераСНижестоящими =
		СоставКонтейнераСНижестоящими.Найти(ТекущийПользователь) <> Неопределено;
		
	Если Не ВходитВСоставКонтейнераСНижестоящими Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		КнопкаОбсуждениеБезНижестоящих.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоИерархическийСправочник Тогда
		КнопкаОбсуждениеБезНижестоящих.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	// Для иерархических может быть кнопка или подменю.
	ЕстьНижестоящие = Ложь;
	ВходитВСоставКонтейнераБезНижестоящих = Ложь;
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ %1 ГДЕ Родитель = &Ссылка И НЕ ПометкаУдаления",
		МетаданныеОбъекта.ПолноеИмя()));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ЕстьНижестоящие = Не Запрос.Выполнить().Пустой();
	
	Если Не ЕстьНижестоящие Тогда
		КнопкаОбсуждениеБезНижестоящих.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	СоставВладельцаБезНижестоящих = СоставВладельцаАвтообновляемогоЧата(Объект.Ссылка, Ложь);
	ВходитВСоставКонтейнераБезНижестоящих =
		СоставВладельцаБезНижестоящих.Найти(ТекущийПользователь) <> Неопределено;
		
	ВидимостьПодменю = ВходитВСоставКонтейнераБезНижестоящих;
	ПодменюОбсуждения.Видимость = ВидимостьПодменю;
	КнопкаОбсуждениеСНижестоящими.Видимость = Не ВидимостьПодменю;
	
	Если ВидимостьПодменю Тогда // Вычисление заголовков кнопок.
		
		ПунктМенюОбсуждениеСНижестоящими = Форма.Элементы.ОбсуждениеВАвточатеСНижестоящимиВПодменю;
		ПунктМенюОбсуждениеБезНижестоящих = Форма.Элементы.ОбсуждениеВАвточатеБезНижестоящихВПодменю;
		
		КлючОбсужденияСНижестоящими = КлючАвтообновляемогоОбсуждения(Объект.Ссылка, Истина);
		КлючОбсужденияБезНижестоящих = КлючАвтообновляемогоОбсуждения(Объект.Ссылка, Ложь);
		
		Попытка
			ОбсуждениеСНижестоящими = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсужденияСНижестоящими);
			ОбсуждениеБезНижестоящих = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсужденияБезНижестоящих);
			Если ОбсуждениеСНижестоящими = Неопределено Тогда
				ПунктМенюОбсуждениеСНижестоящими.Заголовок = ЗаголовокАвтообновляемогоОбсуждения(Объект.Ссылка, Истина);
			Иначе
				ПунктМенюОбсуждениеСНижестоящими.Заголовок = ОбсуждениеСНижестоящими.Заголовок;
			КонецЕсли;
			Если ОбсуждениеБезНижестоящих = Неопределено Тогда
				ПунктМенюОбсуждениеБезНижестоящих.Заголовок = ЗаголовокАвтообновляемогоОбсуждения(Объект.Ссылка, Ложь);
			Иначе
				ПунктМенюОбсуждениеБезНижестоящих.Заголовок = ОбсуждениеБезНижестоящих.Заголовок;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пользователей, входящих в состав переданного владельца.
//
// Параметры:
//  ВладелецСсылка - СправочникСсылка - подразделение, рабочая группа, проект, мероприятие.
//  СНижестоящими - Булево - уточняет состав обсуждения.
//
// Возвращаемое значение:
//  Массив - пользователи, входящие в состав.
//
Функция СоставВладельцаАвтообновляемогоЧата(ВладелецСсылка, СНижестоящими) Экспорт
	
	Состав = Новый Массив;
	
	ТипКонтейнера = ТипЗнч(ВладелецСсылка);
	Если ТипКонтейнера = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Если СНижестоящими Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ИсточникДанных.Пользователь КАК Пользователь
				|ИЗ
				|	РегистрСведений.СведенияОПользователяхДокументооборот КАК ИсточникДанных
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ПО ИсточникДанных.Подразделение = ПодчиненностьПодразделений.Подчиненное
				|ГДЕ
				|	ПодчиненностьПодразделений.Вышестоящее = &ВладелецСсылка
				|	И НЕ ИсточникДанных.Подразделение.ПометкаУдаления
				|	И НЕ ИсточникДанных.Пользователь.ПометкаУдаления
				|	И НЕ ИсточникДанных.Пользователь.Недействителен
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	СтруктураПредприятия.Руководитель
				|ИЗ
				|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|		ПО ПодчиненностьПодразделений.Подчиненное = СтруктураПредприятия.Ссылка
				|ГДЕ
				|	ПодчиненностьПодразделений.Вышестоящее = &ВладелецСсылка
				|	И НЕ СтруктураПредприятия.ПометкаУдаления
				|	И НЕ СтруктураПредприятия.Руководитель.ПометкаУдаления
				|	И НЕ СтруктураПредприятия.Руководитель.Недействителен");
		Иначе
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ИсточникДанных.Пользователь КАК Пользователь
				|ИЗ
				|	РегистрСведений.СведенияОПользователяхДокументооборот КАК ИсточникДанных
				|ГДЕ
				|	ИсточникДанных.Подразделение = &ВладелецСсылка
				|	И НЕ ИсточникДанных.Подразделение.ПометкаУдаления
				|	И НЕ ИсточникДанных.Пользователь.ПометкаУдаления
				|	И НЕ ИсточникДанных.Пользователь.Недействителен
				|	
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	СтруктураПредприятия.Руководитель
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|ГДЕ
				|	СтруктураПредприятия.Ссылка = &ВладелецСсылка
				|	И НЕ СтруктураПредприятия.ПометкаУдаления
				|	И НЕ СтруктураПредприятия.Руководитель.ПометкаУдаления
				|	И НЕ СтруктураПредприятия.Руководитель.Недействителен");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВладелецСсылка", ВладелецСсылка);
		Состав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	ИначеЕсли ТипКонтейнера = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		
		Если ВладелецСсылка = Справочники.РабочиеГруппы.ВсеПользователи Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Ссылка КАК Пользователь
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	НЕ Пользователи.ПометкаУдаления
				|	И НЕ Пользователи.Недействителен");
		ИначеЕсли СНижестоящими Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РабочиеГруппы.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ВсеГруппы
				|ИЗ
				|	Справочник.РабочиеГруппы КАК РабочиеГруппы
				|ГДЕ
				|	РабочиеГруппы.Ссылка В ИЕРАРХИИ(&ВладелецСсылка)
				|	И НЕ РабочиеГруппы.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	РабочиеГруппыСостав.Пользователь КАК Пользователь
				|ИЗ
				|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеГруппы КАК ВсеГруппы
				|		ПО РабочиеГруппыСостав.Ссылка = ВсеГруппы.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				|		ПО РабочиеГруппыСостав.Пользователь = Пользователи.Ссылка
				|ГДЕ
				|	НЕ Пользователи.ПометкаУдаления
				|	И НЕ Пользователи.Недействителен");
		Иначе
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	РабочиеГруппыСостав.Пользователь КАК Пользователь
				|ИЗ
				|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				|		ПО РабочиеГруппыСостав.Пользователь = Пользователи.Ссылка
				|ГДЕ
				|	РабочиеГруппыСостав.Ссылка = &ВладелецСсылка
				|	И НЕ РабочиеГруппыСостав.Ссылка.ПометкаУдаления
				|	И НЕ Пользователи.ПометкаУдаления
				|	И НЕ Пользователи.Недействителен");
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ВладелецСсылка", ВладелецСсылка);
		Состав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	ИначеЕсли ТипКонтейнера = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	УчастникиМероприятия.Исполнитель КАК Исполнитель
			|ИЗ
			|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
			|ГДЕ
			|	УчастникиМероприятия.Мероприятие = &Мероприятие
			|	И (УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.Пользователи
			|			ИЛИ УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.ПолныеРоли)");
		Запрос.УстановитьПараметр("Мероприятие", ВладелецСсылка);
		ПользователиИРоли = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецСсылка, "Председатель, Секретарь, Куратор, Организатор, Подготовил");
		Для Каждого КлючИЗначение Из РеквизитыМероприятия Цикл
			ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
			Если ТипЗначения = Тип("СправочникСсылка.Пользователи")
					Или ТипЗначения = Тип("СправочникСсылка.ПолныеРоли") Тогда
				ПользователиИРоли.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиВКонтейнерах.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
			|ГДЕ
			|	ПользователиВКонтейнерах.Контейнер В(&ПользователиИРоли)
			|	И НЕ ПользователиВКонтейнерах.Пользователь.ПометкаУдаления
			|	И НЕ ПользователиВКонтейнерах.Пользователь.Недействителен";
		Запрос.УстановитьПараметр("ПользователиИРоли", ПользователиИРоли);
		Состав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	ИначеЕсли ТипКонтейнера = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПроектыПроектнаяКоманда.Исполнитель КАК Участник
			|ПОМЕСТИТЬ УчастникиПроекта
			|ИЗ
			|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
			|ГДЕ
			|	ПроектыПроектнаяКоманда.Ссылка = &Проект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Проекты.Руководитель
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.Ссылка = &Проект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиВКонтейнерах.Пользователь КАК Пользователь
			|ИЗ
			|	УчастникиПроекта КАК УчастникиПроекта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
			|		ПО УчастникиПроекта.Участник = ПользователиВКонтейнерах.Контейнер
			|ГДЕ
			|	НЕ ПользователиВКонтейнерах.Пользователь.ПометкаУдаления
			|	И НЕ ПользователиВКонтейнерах.Пользователь.Недействителен");
		Запрос.УстановитьПараметр("Проект", ВладелецСсылка);
		Состав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	КонецЕсли;
	
	Возврат Состав;
	
КонецФункции

// Устанавливает/снимает блокировку для пользователя системы взаимодействия.
// 
// Параметры:
//  ПользовательСсылка - СправочникСсылка.Пользователи - пользователь.
//
Процедура ОбновитьПользователя(ПользовательСсылка, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ПользовательСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Немедленно <> Истина Тогда
		РегистрыСведений.ОчередьОбновленияОбсуждений.Добавить(ПользовательСсылка, 15);
		Возврат;
	КонецЕсли;
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПользовательСсылка, "ИдентификаторПользователяИБ, ПометкаУдаления, Недействителен");
	ИдентификаторПользователяСВ = ИдентификаторПользователяСВПоИдПользователяИБ(
		РеквизитыПользователя.ИдентификаторПользователяИБ, Ложь);
	
	Если ИдентификаторПользователяСВ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторПользователяСВ);
	ПользовательСВ.Заблокирован =
		РеквизитыПользователя.ПометкаУдаления Или РеквизитыПользователя.Недействителен;
	
	ДанныеПользователяИБ = Пользователи.СвойстваПользователяИБ(
		РеквизитыПользователя.ИдентификаторПользователяИБ);
	ПользовательСВ.Имя = ДанныеПользователяИБ.Имя;
	ПользовательСВ.ПолноеИмя = ДанныеПользователяИБ.ПолноеИмя;
	
	ДвоичныеДанныеФото = РаботаСФотографиями.ПолучитьДвоичныеДанныеФото(ПользовательСсылка);
	Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда	
		ПользовательСВ.Картинка = Новый Картинка(ДвоичныеДанныеФото);
	КонецЕсли;
	
	ПользовательСВ.Записать();
	
КонецПроцедуры

// Возвращает ссылку на объект, определяющий состав участников обсуждения.
// 
// Параметры:
//  Ключ - Строка - ключ обсуждения.
//
// Возвращаемое значение:
//  СправочникСсылка - ссылка на объект.
//
Функция КонтейнерПоКлючуОбсуждения(Ключ) Экспорт
	
	ЧастиКлюча = СтрРазделить(Ключ, ";");
	Если ЧастиКлюча.Количество() < 3 Или ЧастиКлюча[2] <> "Auto" Тогда
		// Это не автоматически обновляемое обсуждение.
		Возврат Неопределено;
	КонецЕсли;
	
	УУИД = Новый УникальныйИдентификатор(ЧастиКлюча[0]);
	ПолноеИмяМетаданных = ЧастиКлюча[1];
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	Контейнер = Менеджер.ПолучитьСсылку(УУИД);
	СсылкаДляПроверки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "Ссылка");
	Если Не ЗначениеЗаполнено(СсылкаДляПроверки) Тогда
		Контейнер = Неопределено;
	КонецЕсли;
	
	Возврат Контейнер;
	
КонецФункции

// Отправляет служебное оповещение клиентов с сервера.
//
// Параметры:
//  Событие - Строка - имя события.
//  Пользователь - СправочникСсылка, Неопределено - Пользователь, которого нужно оповестить.
//  	Если Неопределено, то всех пользователей.
//  Параметры - Произвольный - произвольные параметры, которые будут переданы в сообщение.
//  	См. ограничения, предусмотренные платформой для СообщениеСистемыВзаимодействия.Данные.
//
Процедура ОтправитьСлужебноеОповещение(Событие, Пользователь = Неопределено, Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИДПользователяСВ = Неопределено;
	Если Пользователь = Неопределено Тогда
		ИДПользователяСВ = СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения;
	Иначе
		ИДПользователяСВ = ИдентификаторПользователяСВ(Пользователь, Ложь);
	КонецЕсли;
	
	Если ИДПользователяСВ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обсуждение = ОбсуждениеДляСлужебныхОповещений(ИДПользователяСВ);
	НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
	НовоеСообщение.Данные = Новый Структура("Событие, Параметры", Событие, Параметры);
	НовоеСообщение.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура АвтообновлениеОбсужденийПередЗаписью(Источник, Отказ, Замещение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();
	ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника);
	Если ЭтоСправочник Тогда
		ЭтоНовый = Источник.ЭтоНовый();
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
		Если ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтейнерыДляПроверки = Новый Массив;
	ТипИсточника = ТипЗнч(Источник);
	
	Если ЭтоСправочник Тогда
		
		// Состав контейнеров.
		КонтейнерыДляПроверки.Добавить(Источник.Ссылка);
		Если МетаданныеИсточника.Иерархический Тогда
			СтарыйРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Родитель");
			Если СтарыйРодитель <> Источник.Родитель Тогда
				
				ЗапросПоПодчиненным = Новый Запрос(
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА КАК ЕстьЗаписи
					|ИЗ
					|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
					|ГДЕ
					|	НЕ СтруктураПредприятия.ПометкаУдаления
					|	И СтруктураПредприятия.Родитель = &Родитель
					|	И СтруктураПредприятия.Ссылка <> &ИсточникСсылка");
				ЗапросПоПодчиненным.УстановитьПараметр("ИсточникСсылка", Источник.Ссылка);
				
				Если ЗначениеЗаполнено(СтарыйРодитель) Тогда
					КонтейнерыДляПроверки.Добавить(СтарыйРодитель);
					// Если не осталось других подчиненных, нужно обновить участников обсуждения с нижестоящими,
					// даже если состав контейнера не изменился.
					ЗапросПоПодчиненным.УстановитьПараметр("Родитель", СтарыйРодитель);
					ЕстьПодчиненные = Не ЗапросПоПодчиненным.Выполнить().Пустой();
					Если Не ЕстьПодчиненные Тогда
						ОбновитьОбсужденияПоКонтейнеру(СтарыйРодитель);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Источник.Родитель) Тогда
					КонтейнерыДляПроверки.Добавить(Источник.Родитель);
					// Если не было других подчиненных, нужно обновить участников обсуждения с нижестоящими,
					// даже если состав контейнера не изменился.
					ЗапросПоПодчиненным.УстановитьПараметр("Родитель", Источник.Родитель);
					ЕстьПодчиненные = Не ЗапросПоПодчиненным.Выполнить().Пустой();
					Если Не ЕстьПодчиненные Тогда
						ОбновитьОбсужденияПоКонтейнеру(Источник.Родитель);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Представление элемента.
		СтароеПредставление = Строка(Источник.Ссылка);
		НовоеПредставление = Строка(Источник);
		Если СтароеПредставление <> НовоеПредставление Тогда
			ОбновитьЗаголовкиАвточатов(Источник.Ссылка, СтароеПредставление);
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("РегистрСведенийНаборЗаписей.ИсполнителиЗадач") Тогда
		
		// Программное изменение без отбора по роли не обрабатывается.
		КонтейнерыДляПроверки.Добавить(Источник.Отбор.РольИсполнителя.Значение);
		
	ИначеЕсли ТипИсточника = Тип("РегистрСведенийНаборЗаписей.УчастникиМероприятия") Тогда
		
		// Программное изменение без отбора по мероприятию не обрабатывается.
		КонтейнерыДляПроверки.Добавить(Источник.Отбор.Мероприятие.Значение);
		
	ИначеЕсли ТипИсточника = Тип("РегистрСведенийНаборЗаписей.СведенияОПользователяхДокументооборот") Тогда
		
		// Программное изменение без отбора по пользователю не обрабатывается.
		Пользователь = Источник.Отбор.Пользователь.Значение;
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат;
		КонецЕсли;
		Если Источник.Количество() > 0 Тогда
			КонтейнерыДляПроверки.Добавить(Источник[0].Подразделение);
		КонецЕсли;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
			|ГДЕ
			|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь");
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КонтейнерыДляПроверки.Добавить(Выборка.Подразделение);
		КонецЕсли;
		
	КонецЕсли;
	
	НаличиеПодчиненныхДоИзменения = Новый Соответствие;
	
	СоставыКонтейнеровДоИзменения = Новый ТаблицаЗначений;
	СоставыКонтейнеровДоИзменения.Колонки.Добавить("Контейнер");
	СоставыКонтейнеровДоИзменения.Колонки.Добавить("СоставБезНижестоящих");
	СоставыКонтейнеровДоИзменения.Колонки.Добавить("СоставСНижестоящими");
	Для Каждого КонтейнерДляПроверки Из КонтейнерыДляПроверки Цикл
		Если ЗначениеЗаполнено(КонтейнерДляПроверки) Тогда
			НоваяСтрока = СоставыКонтейнеровДоИзменения.Добавить();
			НоваяСтрока.Контейнер = КонтейнерДляПроверки;
			НоваяСтрока.СоставБезНижестоящих = СоставВладельцаАвтообновляемогоЧата(КонтейнерДляПроверки, Ложь);
			НоваяСтрока.СоставСНижестоящими = СоставВладельцаАвтообновляемогоЧата(КонтейнерДляПроверки, Истина);
		КонецЕсли;
	КонецЦикла;
	Источник.ДополнительныеСвойства.Вставить("СоставыКонтейнеровУчастниковОбсужденийДоИзменения",
		СоставыКонтейнеровДоИзменения);
	
КонецПроцедуры

Процедура АвтообновлениеОбсужденийПриЗаписи(Источник, Отказ, Замещение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();
	Если МетаданныеИсточника = Метаданные.Справочники.Пользователи Тогда
		Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			ОбновитьОбсужденияПоКонтейнеру(Справочники.РабочиеГруппы.ВсеПользователи);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника);
	Если ЭтоСправочник И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		Если МетаданныеИсточника = Метаданные.Справочники.СтруктураПредприятия
			И Константы.СоздаватьАвточатыДляПодразделений.Получить() = Истина Тогда
			// Обсуждение для нового подразделения.
			НовоеОбсуждение = АвтообноновляемоеОбсуждение(Источник.Ссылка, Ложь);
			// Обсуждения для всех родителей.
			ВсеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Источник.Ссылка);
			Для Каждого Родитель Из ВсеРодители Цикл
				НовоеОбсуждение = АвтообноновляемоеОбсуждение(Источник.Ссылка, Истина);
			КонецЦикла;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СоставыКонтейнеровУчастниковОбсужденийДоИзменения = Новый Соответствие;
	Если Не Источник.ДополнительныеСвойства.Свойство("СоставыКонтейнеровУчастниковОбсужденийДоИзменения",
			СоставыКонтейнеровУчастниковОбсужденийДоИзменения) Тогда
		Возврат;
	КонецЕсли;
	
	КонтейнерыКОбновлению = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СоставыКонтейнеровУчастниковОбсужденийДоИзменения Цикл
		
		КонтейнерДляПроверки = СтрокаТаблицы.Контейнер;
		СтарыйСостав = СтрокаТаблицы.СоставБезНижестоящих;
		НовыйСостав = СоставВладельцаАвтообновляемогоЧата(КонтейнерДляПроверки, Ложь);
		УдаленныеПользователи = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыйСостав, НовыйСостав);
		ЕстьОтличия = СтарыйСостав.Количество() <> НовыйСостав.Количество()
			Или УдаленныеПользователи.Количество() > 0;
			
		Если Не ЕстьОтличия Тогда
			СтарыйСостав = СтрокаТаблицы.СоставСНижестоящими;
			НовыйСостав = СоставВладельцаАвтообновляемогоЧата(КонтейнерДляПроверки, Истина);
			УдаленныеПользователи = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыйСостав, НовыйСостав);
			ЕстьОтличия = СтарыйСостав.Количество() <> НовыйСостав.Количество()
				Или УдаленныеПользователи.Количество() > 0;
		КонецЕсли;
			
		Если ЕстьОтличия Тогда
			ДополнительныеПараметры = Новый Структура("УдаленныеПользователи", УдаленныеПользователи);
			ОбновитьОбсужденияПоКонтейнеру(КонтейнерДляПроверки, ДополнительныеПараметры);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция УчастникиАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими)
	
	УчастникиСВ = Новый Массив;
	
	УчастникиПользователи = СоставВладельцаАвтообновляемогоЧата(КонтейнерСсылка, СНижестоящими);
	ИдентификаторыУчастников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		УчастникиПользователи, "ИдентификаторПользователяИБ");
	Для Каждого УчастникПользователь Из УчастникиПользователи Цикл
		ИдентификаторПользователяИБ = ИдентификаторыУчастников[УчастникПользователь];
		ИдентификаторПользователяСВ = ИдентификаторПользователяСВПоИдПользователяИБ(
			ИдентификаторПользователяИБ);
		Если ИдентификаторПользователяСВ <> Неопределено Тогда
			УчастникиСВ.Добавить(ИдентификаторПользователяСВ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат УчастникиСВ;
	
КонецФункции

// Актуализирует состав участников автообновляемых обсуждений.
// 
// Параметры:
//  КонтейнерПользователей - СправочникСсылка - контейнер участников обсуждения.
//  ДополнительныеПараметры - Структура, Неопределено - Неопределено или структура с полями:
//   * УдаленныеПользователи - Массив - удаленные из контейнера пользователи.
//   	Если указаны, то из обсуждений удаляются только они,
//   	даже если в обсуждении есть другие участники, не входящие в контейнер.
//  Немедленно - Булево - если ложь, то только записывает задание на обновление в очередь.
//
Процедура ОбновитьОбсужденияПоКонтейнеру(
			КонтейнерПользователей,
			ДополнительныеПараметры = Неопределено,
			Немедленно = Ложь,
			НизкийПриоритет = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Немедленно <> Истина Тогда
		ПриоритетЗадания = ?(НизкийПриоритет = Истина, 5, Неопределено);
		РегистрыСведений.ОчередьОбновленияОбсуждений.Добавить(
			КонтейнерПользователей, ПриоритетЗадания, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	КонтейнерыУчастниковОбсуждений = Новый Массив;
	Если ТипЗнч(КонтейнерПользователей) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
		КонтейнерыУчастниковОбсуждений.Добавить(КонтейнерПользователей);
		// Элементы-родители.
		Если КонтейнерПользователей.Метаданные().Иерархический Тогда
			ВсеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(КонтейнерПользователей);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтейнерыУчастниковОбсуждений, ВсеРодители);
		КонецЕсли;
	Иначе
		// Поиск мероприятий и проектов, в которых участвует роль.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Мероприятия.Ссылка КАК КонтейнерУчастников
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.Секретарь = &ИзмененнаяРоль
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Мероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.Председатель = &ИзмененнаяРоль
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УчастникиМероприятия.Мероприятие
			|ИЗ
			|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
			|ГДЕ
			|	УчастникиМероприятия.Исполнитель = &ИзмененнаяРоль
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПроектыПроектнаяКоманда.Ссылка
			|ИЗ
			|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
			|ГДЕ
			|	ПроектыПроектнаяКоманда.Исполнитель = &ИзмененнаяРоль");
		Запрос.УстановитьПараметр("ИзмененнаяРоль", КонтейнерПользователей);
		КонтейнерыУчастниковОбсуждений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КонтейнерУчастников");
	КонецЕсли;
	
	ВариантыВключенияНижестоящих = Новый Массив;
	ВариантыВключенияНижестоящих.Добавить(Ложь);
	ВариантыВключенияНижестоящих.Добавить(Истина);
	
	ПометкиУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		КонтейнерыУчастниковОбсуждений, "ПометкаУдаления");
	
	Для Каждого КонтейнерУчастников Из КонтейнерыУчастниковОбсуждений Цикл
			
		Если ПометкиУдаления[КонтейнерУчастников] = Истина Тогда
			// Для помеченных контейнеров оставляем обсуждения как есть.
			Продолжить;
		КонецЕсли;
		
		Для Каждого СНижестоящими Из ВариантыВключенияНижестоящих Цикл
			
			Отбор = Новый ОтборОбсужденийСистемыВзаимодействия();
			Отбор.Ключ = КлючАвтообновляемогоОбсуждения(КонтейнерУчастников, СНижестоящими);
			НайденныеОбсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(Отбор);
			Если НайденныеОбсуждения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Обсуждение = НайденныеОбсуждения[0];
			
			// Из неактуальных обсуждений удаляются все участники.
			Если СНижестоящими Тогда
				ЕстьНижестоящие = Ложь;
				МетаданныеКонтейнера = КонтейнерУчастников.Метаданные();
				Если МетаданныеКонтейнера.Иерархический Тогда
					Запрос = Новый Запрос(СтрШаблон(
						"ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ %1 ГДЕ Родитель = &КонтейнерУчастников И НЕ ПометкаУдаления",
						МетаданныеКонтейнера.ПолноеИмя()));
					Запрос.УстановитьПараметр("КонтейнерУчастников", КонтейнерУчастников);
					ЕстьНижестоящие = Не Запрос.Выполнить().Пустой();
				КонецЕсли;
				Если Не ЕстьНижестоящие Тогда
					Обсуждение.Участники.Очистить();
					Обсуждение.Записать();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Обновление участников.
			АктуальныеУчастникиОбсуждения = УчастникиАвтообновляемогоОбсуждения(КонтейнерУчастников, СНижестоящими);
			
			// Добавление недостающих.
			ЕстьИзменения = Ложь;
			Для Каждого АктуальныйУчастник Из АктуальныеУчастникиОбсуждения Цикл
				Если Не Обсуждение.Участники.Содержит(АктуальныйУчастник) Тогда
					ЕстьИзменения = Истина;
					Обсуждение.Участники.Добавить(АктуальныйУчастник);
				КонецЕсли;
			КонецЦикла;
			
			// Удаление неактуальных.
			АктуальныеУчастникиДляПоиска = Новый Соответствие;
			Для Каждого АктуальныйУчастник Из АктуальныеУчастникиОбсуждения Цикл
				АктуальныеУчастникиДляПоиска[АктуальныйУчастник] = Истина;
			КонецЦикла;
			Если ДополнительныеПараметры <> Неопределено Тогда
				// Массив пользователей для удаления передан в явном виде.
				УдаленныеПользователи = ДополнительныеПараметры.УдаленныеПользователи;
				ИдентификаторыУдаленных = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
					УдаленныеПользователи, "ИдентификаторПользователяИБ");
				Для Каждого УдаленныйПользователь Из УдаленныеПользователи Цикл
					ИдентификаторПользователяИБ = ИдентификаторыУдаленных[УдаленныйПользователь];
					УдаляемыйЭлемент = ИдентификаторПользователяСВПоИдПользователяИБ(
						ИдентификаторПользователяИБ, Ложь);
					Если УдаляемыйЭлемент <> Неопределено
						И АктуальныеУчастникиДляПоиска[УдаляемыйЭлемент] = Неопределено Тогда
						ЕстьИзменения = Истина;
						Обсуждение.Участники.Удалить(УдаляемыйЭлемент);
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Удаляются все неактуальные.
				ЭлементыКУдалению = Новый Массив;
				Для Каждого Участник Из Обсуждение.Участники Цикл
					Если АктуальныеУчастникиДляПоиска[Участник] = Неопределено Тогда
						ЭлементыКУдалению.Добавить(Участник);
					КонецЕсли;
				КонецЦикла;
				Для Каждого УдаляемыйЭлемент Из ЭлементыКУдалению Цикл
					ЕстьИзменения = Истина;
					Обсуждение.Участники.Удалить(УдаляемыйЭлемент);
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьИзменения Тогда
				Обсуждение.Записать();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Отправляет сообщение в систему взаимодействия.
//
// Параметры:
//  ИдентификаторОбсужденияСВ  - ИдентификаторОбсужденияСистемыВзаимодействия   - Идентификатор обсуждения.
//  ОтКогоИдентификаторСВ      - ИдентификаторПользователяСистемыВзаимодействия - От кого следует отправить сообщение.
//  ПолучателиИдентификаторыСВ - Массив                                         - Кому следует отправить сообщение.
//  Текст                      - Строка                                         - Текст сообщения.
//  Вложения                   - Массив из Структура           - Вложения сообщения. См. функцию ВложениеСВ().
//  Действия                   - СписокЗначений                - Действия сообщения.
// 
// Возвращаемое значение:
//  СообщениеСистемыВзаимодействия - Сообщение системы взаимодействия.
//
Функция ОтправитьСообщение(ИдентификаторОбсужденияСВ, ОтКогоИдентификаторСВ, ПолучателиИдентификаторыСВ, Текст, Вложения, Действия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеСВ = СистемаВзаимодействия.СоздатьСообщение(ИдентификаторОбсужденияСВ);
	СообщениеСВ.Автор = ОтКогоИдентификаторСВ;
	СообщениеСВ.Текст = Текст;
	Для Каждого ПолучательИдентификаторСВ Из ПолучателиИдентификаторыСВ Цикл
		СообщениеСВ.Получатели.Добавить(ПолучательИдентификаторСВ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Вложения) Тогда
	
		Для Каждого ВложениеСВ Из Вложения Цикл
			
			СообщениеСВ.Вложения.Добавить(
			ВложениеСВ.ДанныеФайла.ОткрытьПотокДляЧтения(),
			ВложениеСВ.ИмяФайла);
			
		КонецЦикла;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Действия) Тогда
		
		Для Каждого Действие Из Действия Цикл
		
			СообщениеСВ.Действия.Добавить(Действие.Значение, Действие.Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СообщениеСВ.Записать();
	
	Возврат СообщениеСВ;
	
КонецФункции

Процедура АктуализироватьСоставАвтообсуждений(Немедленно = Ложь) Экспорт
	
	Если Немедленно <> Истина Тогда
		// Добавление записи с низким приоритетом.
		РегистрыСведений.ОчередьОбновленияОбсуждений.Добавить(
			Перечисления.ЗаданияОчередиОбновленияОбсуждений.ДобавитьНедостающихУчастниковВАвтоОбсуждения, 5);
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъектовДляОбработки = Новый Массив;
	МетаданныеОбъектовДляОбработки.Добавить(Метаданные.Справочники.СтруктураПредприятия);
	МетаданныеОбъектовДляОбработки.Добавить(Метаданные.Справочники.РабочиеГруппы);
	МетаданныеОбъектовДляОбработки.Добавить(Метаданные.Справочники.Мероприятия);
	МетаданныеОбъектовДляОбработки.Добавить(Метаданные.Справочники.Проекты);
	
	Для Каждого ЭлементМетаданных Из МетаданныеОбъектовДляОбработки Цикл
		
		Запрос = Новый Запрос;
		
		Если ЭлементМетаданных = Метаданные.Справочники.СтруктураПредприятия Тогда
			
			// Элементы-родители не берем, они обработаются при обновлении подчиненных элементов.
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СтруктураПредприятия.Родитель КАК Ссылка
				|ПОМЕСТИТЬ Родители
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|ГДЕ
				|	НЕ СтруктураПредприятия.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СтруктураПредприятия.Ссылка КАК Объект
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|		ЛЕВОЕ СОЕДИНЕНИЕ Родители КАК Родители
				|		ПО СтруктураПредприятия.Ссылка = Родители.Ссылка
				|ГДЕ
				|	НЕ СтруктураПредприятия.ПометкаУдаления
				|	И Родители.Ссылка ЕСТЬ NULL";
			
		ИначеЕсли ЭлементМетаданных = Метаданные.Справочники.РабочиеГруппы Тогда
			
			// Элементы-родители не берем, они обработаются при обновлении подчиненных элементов.
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РабочиеГруппы.Родитель КАК Ссылка
				|ПОМЕСТИТЬ Родители
				|ИЗ
				|	Справочник.РабочиеГруппы КАК РабочиеГруппы
				|ГДЕ
				|	НЕ РабочиеГруппы.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	РабочиеГруппы.Ссылка КАК Объект
				|ИЗ
				|	Справочник.РабочиеГруппы КАК РабочиеГруппы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Родители КАК Родители
				|		ПО РабочиеГруппы.Ссылка = Родители.Ссылка
				|ГДЕ
				|	НЕ РабочиеГруппы.ПометкаУдаления
				|	И Родители.Ссылка ЕСТЬ NULL";
			
		ИначеЕсли ЭлементМетаданных = Метаданные.Справочники.Проекты Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Проекты.Ссылка КАК Объект
				|ИЗ
				|	Справочник.Проекты КАК Проекты
				|ГДЕ
				|	НЕ Проекты.ПометкаУдаления
				|	И Проекты.Состояние <> Значение(Перечисление.СостоянияПроектов.Завершен)";
			
		ИначеЕсли ЭлементМетаданных = Метаданные.Справочники.Мероприятия Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Мероприятия.Ссылка КАК Объект
				|ИЗ
				|	Справочник.Мероприятия КАК Мероприятия
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
				|		ПО Мероприятия.Ссылка = СостоянияМероприятий.Мероприятие
				|ГДЕ
				|	НЕ Мероприятия.ПометкаУдаления
				|	И НЕ СостоянияМероприятий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено), ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено))";
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДополнительныеПараметры = Новый Структура("УдаленныеПользователи", Новый Массив);
			ОбновитьОбсужденияПоКонтейнеру(Выборка.Объект, ДополнительныеПараметры,, Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗаголовкиАвточатов(КонтейнерСсылка, СтароеПредставление, Немедленно = Ложь) Экспорт
	
	Если Немедленно <> Истина Тогда
		ДополнительныеПараметры = Новый Структура(
			"Операция, СтароеПредставление", "ОбновитьЗаголовкиАвточатов", СтароеПредставление);
		РегистрыСведений.ОчередьОбновленияОбсуждений.Добавить(КонтейнерСсылка,, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ВариантыВключенияНижестоящих = Новый Массив;
	ВариантыВключенияНижестоящих.Добавить(Ложь);
	ВариантыВключенияНижестоящих.Добавить(Истина);
	Для Каждого СНижестоящими Из ВариантыВключенияНижестоящих Цикл
		
		КлючОбсуждения = КлючАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими);
		НайденноеОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
		Если НайденноеОбсуждение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйАвтоЗаголовок = ЗаголовокАвтообновляемогоОбсуждения(КонтейнерСсылка, СНижестоящими);
		СтарыйАвтоЗаголовок = ЗаголовокАвтообновляемогоОбсужденияПоПредставлению(
			СтароеПредставление, КонтейнерСсылка.Метаданные(), СНижестоящими);
			
		Если НайденноеОбсуждение.Заголовок = СтарыйАвтоЗаголовок
			И СтарыйАвтоЗаголовок <> НовыйАвтоЗаголовок Тогда
			НайденноеОбсуждение.Заголовок = НовыйАвтоЗаголовок;
			НайденноеОбсуждение.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Имя события для записи в журнал регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обсуждения'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает неотображаемое служебное обсуждение,
// 	предназначенное для оповещения клиентов в сервера.
//
// Параметры:
//  ИДПользователяСВ - ИдентификаторПользователяСистемыВзаимодействия, Неопределено
//  	- ИД пользователя. Если Неопределено, то берется ИД текущего.
//
// Возвращаемое значение:
//  ОбсуждениеСистемыВзаимодействия - обсуждение.
//
Функция ИДОбсужденийДляСлужебныхОповещенийТекущегоПользователя() Экспорт
	
	ОбсуждениеПерсональное = ОбсуждениеДляСлужебныхОповещений(
		СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
	ОбсуждениеОбщее = ОбсуждениеДляСлужебныхОповещений(
		СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения);
	
	ИДОбсуждений = Новый Массив;
	ИДОбсуждений.Добавить(ОбсуждениеПерсональное.Идентификатор);
	ИДОбсуждений.Добавить(ОбсуждениеОбщее.Идентификатор);
	
	Возврат ИДОбсуждений;
	
КонецФункции

// Возвращает неотображаемое служебное обсуждение,
// 	предназначенное для оповещения клиентов в сервера.
//
// Параметры:
//  ИДПользователяСВ - ИдентификаторПользователяСистемыВзаимодействия - ИД пользователя.
//
// Возвращаемое значение:
//  ОбсуждениеСистемыВзаимодействия - обсуждение.
//
Функция ОбсуждениеДляСлужебныхОповещений(ИДПользователяСВ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ИДПользователяСВ) <> Тип("ИдентификаторПользователяСистемыВзаимодействия") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючОбсуждения = "SystemNotification_" + Строка(ИДПользователяСВ);
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
	Если Обсуждение = Неопределено Тогда
		Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		Обсуждение.Ключ = КлючОбсуждения;
		Обсуждение.Отображаемое = Ложь;
		Обсуждение.Участники.Добавить(ИДПользователяСВ);
		Обсуждение.Записать();
	КонецЕсли;
	
	Возврат Обсуждение;
	
КонецФункции

Процедура ПриИзмененииСостоянияПодключения(Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбсужденияПодключены = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Константы.ОбсужденияПодключены.Установить(ОбсужденияПодключены);
	
	Если Не ОбсужденияПодключены Тогда
		Возврат;
	КонецЕсли;
	
	Если Немедленно <> Истина Тогда
		РегистрыСведений.ОчередьОбновленияОбсуждений.Добавить(
			Перечисления.ЗаданияОчередиОбновленияОбсуждений.ОбработатьПодключениеОбсуждений);
		Возврат;
	КонецЕсли;
	
	// Создание личных обсуждений с каналом.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПользователиКаналы.ИдентификаторПользователяИБ КАК ИдентификаторИБКанала,
		|	ПользователиУчастники.ИдентификаторПользователяИБ КАК ИдентификаторИБУчастника
		|ИЗ
		|	Справочник.КаналыОбсуждений.Участники КАК КаналыОбсужденийУчастники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаналыОбсуждений КАК КаналыОбсуждений
		|		ПО КаналыОбсужденийУчастники.Ссылка = КаналыОбсуждений.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
		|		ПО КаналыОбсужденийУчастники.Участник = ПользователиВКонтейнерах.Контейнер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиУчастники
		|		ПО (ПользователиВКонтейнерах.Пользователь = ПользователиУчастники.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиКаналы
		|		ПО (КаналыОбсуждений.ПользовательДляСВ = ПользователиКаналы.Ссылка)
		|ГДЕ
		|	НЕ КаналыОбсуждений.ПометкаУдаления
		|	И КаналыОбсужденийУчастники.Роль В (ЗНАЧЕНИЕ(Перечисление.РолиУчастниковКаналовОбсуждений.Автор),
		|		ЗНАЧЕНИЕ(Перечисление.РолиУчастниковКаналовОбсуждений.Администратор))");
	
	НайденныеИдентификаторыСВ = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ИдентификаторСВКанала = НайденныеИдентификаторыСВ[Выборка.ИдентификаторИБКанала];
			Если ИдентификаторСВКанала = Неопределено Тогда
				ИдентификаторСВКанала = ИдентификаторПользователяСВПоИдПользователяИБ(
					Выборка.ИдентификаторИБКанала);
				НайденныеИдентификаторыСВ[Выборка.ИдентификаторИБКанала] = ИдентификаторСВКанала;
			КонецЕсли;
			ИдентификаторСВУчастника = НайденныеИдентификаторыСВ[Выборка.ИдентификаторИБУчастника];
			Если ИдентификаторСВУчастника = Неопределено Тогда
				ИдентификаторСВУчастника = ИдентификаторПользователяСВПоИдПользователяИБ(
					Выборка.ИдентификаторИБУчастника);
				НайденныеИдентификаторыСВ[Выборка.ИдентификаторИБУчастника] = ИдентификаторСВУчастника;
			КонецЕсли;
			Обсуждение = ЛичноеОбсуждениеПользователей(ИдентификаторСВКанала, ИдентификаторСВУчастника);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
