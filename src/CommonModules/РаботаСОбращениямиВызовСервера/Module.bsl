#Область ПрограммныйИнтерфейс

// Формирует строковое представление кода вопроса.
//
// Параметры:
//    Раздел - СправочникСсылка.Разделы - ссылка на раздел.
//    Тематика - СправочникСсылка.Тематики - ссылка на тематику.
//    Тема - СправочникСсылка.Темы - ссылка на тему.
//    Вопрос - СправочникСсылка.Вопросы - ссылка на вопрос.
//
Функция СформироватьКодВопроса(Раздел, Тематика, Тема, Вопрос) Экспорт 
	
	КодВопроса = "";
	
	Если ЗначениеЗаполнено(Раздел) Тогда 
		КодВопроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Раздел, "Код") + ".";
	Иначе 
		КодВопроса = "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тематика) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тематика, "Код") + ".";
	Иначе 
		КодВопроса = КодВопроса + "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тема) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тема, "Код") + ".";
	Иначе 
		КодВопроса = КодВопроса + "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Вопрос) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вопрос, "Код");
	Иначе 
		КодВопроса = КодВопроса + "0000";
	КонецЕсли;
	
	Возврат КодВопроса;
	
КонецФункции

// Заполняет вопросы обращения по документу
//
Процедура ЗаполнитьВопросыДокумента(Документ, ТаблицаВопросов) Экспорт 
	
	Документ.ВопросыОбращения.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаВопросов Цикл 
		НоваяСтрока = Документ.ВопросыОбращения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру данных сопроводительного документа.
//
// Параметры:
//    Документ - СправочникСсылка.ИсходящиеДокументы - ссылка на документ.
//
// Возвращаемое значение:
//    Результат - Структура - данные документа.
//
Функция ДанныеСопроводительногоДокумента(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеДокументы.Заголовок,
		|	ИсходящиеДокументы.ДатаРегистрации,
		|	ИсходящиеДокументы.РегистрационныйНомер,
		|	ИсходящиеДокументы.Проект,
		|	ИсходящиеДокументы.ВопросДеятельности,
		|	ИсходящиеДокументы.Получатели.(
		|		Получатель,
		|		Адресат
		|	) КАК Получатели
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.Ссылка = &Документ";
		
	Запрос.Параметры.Вставить("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Если Выборка.Следующий() Тогда 
		Результат.Вставить("Заголовок", Выборка.Заголовок);
		Результат.Вставить("ДатаРегистрации", Выборка.ДатаРегистрации);
		Результат.Вставить("РегистрационныйНомер", Выборка.РегистрационныйНомер);
		Результат.Вставить("Проект", Выборка.Проект);
		Результат.Вставить("ВопросДеятельности", Выборка.ВопросДеятельности);
		
		Получатели = Выборка.Получатели.Выгрузить();
		Для Каждого Получатель Из Получатели Цикл 
			Результат.Вставить("Получатель", Получатель.Получатель);
			Результат.Вставить("Адресат", Получатель.Адресат);
			Прервать;
		КонецЦикла;
	Иначе 
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
			"РегистрационныйНомер, ДатаРегистрации, Заголовок, ВопросДеятельности, Проект");
		Результат.Вставить("Получатель", Неопределено);
		Результат.Вставить("Адресат", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу сопроводительных документов по всем вопросам обращения.
//
// Параметры:
//    Документ - СправочникСсылка.ВходящиеДокументы - ссылка на обращение.
//    Таблица  - ТаблицаЗначений - таблица, содержащая код вопроса и ссылку на сопроводительный документ.
//
Процедура ЗаполнитьСвязанныеДокументы(Документ, Таблица) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица.Очистить();
	
	СвязанныеДокументы = СвязиДокументов.ПолучитьВсеСвязиДокумента(
		Документ, Ложь);
	Для Каждого СвязанныйДокумент Из СвязанныеДокументы Цикл 
		Если СвязанныйДокумент.ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.СопроводительныйДокумент = СвязанныйДокумент.СвязанныйДокумент;
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.СопроводительныйДокумент,
			"РегистрационныйНомер, ДатаРегистрации, Заголовок");
			Если ЗначениеЗаполнено(ДанныеДокумента.РегистрационныйНомер) И ЗначениеЗаполнено(ДанныеДокумента.ДатаРегистрации) Тогда
				НоваяСтрока.СопроводительныйДокументСтрока = СтрШаблон(
					НСтр("ru = '№ %1 от %2'"), ДанныеДокумента.РегистрационныйНомер,
					Формат(ДанныеДокумента.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				НоваяСтрока.СопроводительныйДокументСтрока = ДанныеДокумента.Заголовок;
			КонецЕсли;
			
			НоваяСтрока.ДатаРегистрации = ДанныеДокумента.ДатаРегистрации;
			НоваяСтрока.РегистрационныйНомер = ДанныеДокумента.РегистрационныйНомер;
			
		ИначеЕсли СвязанныйДокумент.ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ОтветныйДокумент = СвязанныйДокумент.СвязанныйДокумент;
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.ОтветныйДокумент,
				"РегистрационныйНомер, ДатаРегистрации, Заголовок");
			Если ЗначениеЗаполнено(ДанныеДокумента.РегистрационныйНомер) И ЗначениеЗаполнено(ДанныеДокумента.ДатаРегистрации) Тогда
				НоваяСтрока.ОтветныйДокументСтрока = СтрШаблон(
					НСтр("ru = '№ %1 от %2'"), ДанныеДокумента.РегистрационныйНомер,
					Формат(ДанныеДокумента.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				НоваяСтрока.ОтветныйДокументСтрока = ДанныеДокумента.Заголовок;
			КонецЕсли;
			
			НоваяСтрока.ОтветныйДатаРегистрации = ДанныеДокумента.ДатаРегистрации;
			НоваяСтрока.ОтветныйРегистрационныйНомер = ДанныеДокумента.РегистрационныйНомер;
		Иначе 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Вопрос = СвязанныйДокумент.ДополнительныйОбъектСвязи;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список исходящих документов по вводу по строке.
//
// Параметры:
//    СтрокаПоиска - Строка - введенный текст.
//    Отправитель  - СправочникСсылка.Контрагенты - ссылка на отправителя.
//
// Возвращаемое значение:
//    ДанныеВыбора - СписокЗначений - список документов, удовлетворяющих поиску.
//
Функция НайтиИсходящиеДокументы(СтрокаПоиска, Отправитель = Неопределено) Экспорт 
	
	ДанныеВыбора = Новый СписокЗначений;

	Если Лев(СтрокаПоиска, 1) = "№" Тогда
		СтрокаПоиска = СокрЛП(Сред(СтрокаПоиска, 2));
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Отправитель) И Не ЗначениеЗаполнено(СтрокаПоиска)Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
		
	// Поиск по номеру или наименованию
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИсходящиеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	ИсходящиеДокументы.РегистрационныйНомер ПОДОБНО &СтрокаПоиска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	ИсходящиеДокументы.Заголовок ПОДОБНО &СтрокаПоиска";
	
	Запрос.Параметры.Вставить("СтрокаПоиска", СтрокаПоиска + "%");
	
	Если ЗначениеЗаполнено(Отправитель) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И ИсходящиеДокументы.Получатели.Получатель = &Получатель";
		Запрос.Параметры.Вставить("Получатель", Отправитель);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает значение константы "Актуализировать классификатор". 
//
// Возвращаемое значение:
//   Истина - Булево - если требуется обновить классификатор обращений граждан.
//
Функция АктуализироватьКлассификаторОбращенийГраждан() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.АктуализироватьКлассификаторОбращенийГраждан.Получить();
	
КонецФункции

#КонецОбласти