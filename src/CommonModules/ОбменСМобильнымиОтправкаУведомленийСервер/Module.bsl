#Область ПрограммныйИнтерфейс

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания ОтправкаPushУведомлений
Процедура ОтправкаPushУведомлений() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаPushУведомлений, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") = Ложь Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОтправкуPushУведомленийМобильнымУстройствам();

КонецПроцедуры

// Обработчик регламентного задания СозданиеСообщенийPushУведомленийОНовыхПисьмах
//
Процедура СозданиеPushУведомленийОНовыхПисьмах() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеPushУведомленийОНовыхПисьмах, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") = Ложь Тогда
		Возврат;
	КонецЕсли;

	СоздатьPushУведомленияОНовыхПисьмах();

КонецПроцедуры

#КонецОбласти

// Процедура - Записать сообщение в регистр PushУведомления
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя для которого формируется сообщение
//  Объект - СправочникСсылка - Ссылка на объект уведомления
//  Дата - Дата - Планируемая дата отправки уведомления
//  Сообщение - Строка - Текст сообщения
//
Процедура ЗаписатьСообщениеВРегистрPushУведомления(Пользователь, Объект, Дата, Сообщение) Экспорт

	Запись = РегистрыСведений.СообщенияPushУведомлений.СоздатьМенеджерЗаписи();

	Запись.Пользователь = Пользователь;
	Запись.ОбъектУведомления = Объект;
	Запись.ДатаОтправки = Дата;
	Запись.Сообщение = Сообщение;

	Запись.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создание сообщений push уведомлений о новых письмах
Процедура СоздатьPushУведомленияОНовыхПисьмах()

	// Читаем данные одним запросом.
	УстановитьПривилегированныйРежим(Истина);

	// Выбираем всех пользователей у которых есть узлы мобильных с установленным флагом 
	// идентификатора Push. Выбираем все учетные записи по пользователям.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиМобильногоПриложения.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ СписокПользователей
		|ИЗ
		|	Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиМобильногоПриложения.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	НЕ ПользователиМобильногоПриложения.ПометкаУдаления
		|	И ПользователиМобильногоПриложения.ИдентификаторУстановлен
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
		|	ЛОЖЬ КАК Уведомлять,
		|	ЕСТЬNULL(ОбработкаНовыхПисемДляОтправкиPushУведомлений.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПроверки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработкаНовыхПисемДляОтправкиPushУведомлений КАК ОбработкаНовыхПисемДляОтправкиPushУведомлений
		|		ПО УчетныеЗаписиЭлектроннойПочты.Пользователь = ОбработкаНовыхПисемДляОтправкиPushУведомлений.Пользователь
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.Ссылка.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.Пользователь В
		|			(ВЫБРАТЬ
		|				СписокПользователей.Пользователь
		|			ИЗ
		|				СписокПользователей КАК СписокПользователей)";

	ТаблицаДанных = Запрос.Выполнить().Выгрузить();

	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МинимальнаяДата = ТекущаяДатаСеанса() - 86400;

	// Обходим всех пользователей и проверяем есть ли у них настройка отправки Push уведомлений
	// о письмах. Устанавливаем дату с которой нужно уведомлять о новых письмах для каждой
	// учетной записи.
	Для каждого СтрокаТЧ Из ТаблицаДанных Цикл

		СтрокаТЧ.ДатаПроверки = Макс(МинимальнаяДата, СтрокаТЧ.ДатаПроверки);
		СтрокаТЧ.Уведомлять = 
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ВстроеннаяПочта/ОтправлятьОповещениеОПриходеПисьмаИспользуяPush",
				Строка(СтрокаТЧ.УчетнаяЗапись), Ложь, ,Строка(СтрокаТЧ.Пользователь));

	КонецЦикла;

	// Проверка входящих писем.
	ЗапросПисьма = Новый Запрос;
	ЗапросПисьма.УстановитьПараметр("Дата", МинимальнаяДата);
	ЗапросПисьма.УстановитьПараметр("Пользователи", ТаблицаДанных.ВыгрузитьКолонку("Пользователь"));
	ЗапросПисьма.УстановитьПараметр("ТаблицаЗаписей", ТаблицаДанных);
	ЗапросПисьма.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Пользователь КАК Пользователь,
		|	ТаблицаЗаписей.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ТаблицаЗаписей.Уведомлять,
		|	ТаблицаЗаписей.ДатаПроверки
		|ПОМЕСТИТЬ ТаблицаЗаписей
		|ИЗ
		|	&ТаблицаЗаписей КАК ТаблицаЗаписей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь,
		|	УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Пользователь,
		|	ТаблицаЗаписей.УчетнаяЗапись,
		|	ТаблицаЗаписей.Уведомлять,
		|	ТаблицаЗаписей.ДатаПроверки
		|ИЗ
		|	ТаблицаЗаписей КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Уведомлять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь,
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Папка
		|ПОМЕСТИТЬ СинхронизируемыеПапки
		|ИЗ
		|	РегистрСведений.СинхронизацияПапокПисемСМобильнымКлиентом 
		|		КАК СинхронизацияПапокПисемСМобильнымКлиентом
		|ГДЕ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь В(&Пользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВходящееПисьмо.Дата КАК Дата,
		|	ВходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВходящееПисьмо.Тема КАК Тема,
		|	ВходящееПисьмо.ОтправительАдресат КАК ОтправительАдресат,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтено,
		|	ВЫБОР
		|		КОГДА ВходящееПисьмо.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПисем.Высокая)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Важное,
		|	ТаблицаЗаписей.Пользователь,
		|	ПисьмаВПапках.Папка
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (СведенияОПрочтении.Объект = ВходящееПисьмо.Ссылка)
		|			И (СведенияОПрочтении.Пользователь В
		|				(ВЫБРАТЬ
		|					ТаблицаЗаписей.Пользователь
		|				ИЗ
		|					ТаблицаЗаписей КАК ТаблицаЗаписей))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаписей КАК ТаблицаЗаписей
		|		ПО ВходящееПисьмо.УчетнаяЗапись = ТаблицаЗаписей.УчетнаяЗапись
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВПапках КАК ПисьмаВПапках
		|		ПО ВходящееПисьмо.Ссылка = ПисьмаВПапках.Письмо
		|ГДЕ
		|	ВходящееПисьмо.Дата > &Дата
		|	И НЕ ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ)
		|	И ВходящееПисьмо.УчетнаяЗапись В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаписей.УчетнаяЗапись
		|			ИЗ
		|				ТаблицаЗаписей КАК ТаблицаЗаписей)
		|	И НЕ ВходящееПисьмо.ПометкаУдаления
		|	И ПисьмаВПапках.Папка В
		|			(ВЫБРАТЬ
		|				СинхронизируемыеПапки.Папка
		|			ИЗ
		|				СинхронизируемыеПапки КАК СинхронизируемыеПапки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Выборка = ЗапросПисьма.Выполнить().Выбрать();
	
	ДатаСеанса = ТекущаяДатаСеанса();

	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Пользователь, УчетнаяЗапись", 
			Выборка.Пользователь, Выборка.УчетнаяЗапись);

		Строки = ТаблицаДанных.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Выборка.Дата <= Строки[0].ДатаПроверки Тогда
			Продолжить;
		КонецЕсли;

		Сообщение = СтрШаблон("%1 от %2, %3",
			?(Выборка.Важное, НСтр("ru = 'Важное письмо'"), Нстр("ru = 'Письмо'")),
			Выборка.ОтправительАдресат, Выборка.Тема);

		ЗаписатьСообщениеВРегистрPushУведомления(Выборка.Пользователь, 
			Выборка.Ссылка, ТекущаяДата() + 10, Сообщение);

	КонецЦикла;

	ТаблицаДанных.Свернуть("Пользователь");
	Для каждого СтрокаТЧ Из ТаблицаДанных Цикл

		МенеджерЗаписи = 
			РегистрыСведений.ОбработкаНовыхПисемДляОтправкиPushУведомлений.СоздатьМенеджерЗаписи();

		МенеджерЗаписи.Пользователь = СтрокаТЧ.Пользователь;
		МенеджерЗаписи.Дата = ДатаСеанса;

		МенеджерЗаписи.Записать();

	КонецЦикла;

КонецПроцедуры

// Отправляет Push уведомления мобильным устройствам
Процедура ВыполнитьОтправкуPushУведомленийМобильнымУстройствам()

	ИспользоватьPushУведомления = Константы.ВариантИспользованияPushУведомлений.Получить();
	ИспользоватьМобильныеПриложения = Константы.ИспользоватьМобильныеКлиенты.Получить();
	
	// Массив записей протокола. Объеденится в строку перед записью в РС.
	Протокол = Новый Массив;
	
	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Использовать push-уведомления: %1'"), ИспользоватьPushУведомления));
	
	 ИмяСобытия = МобильныйКлиентКлиентСервер.ИмяСобытияPushУведомления();

		Если Не ЗначениеЗаполнено(ИспользоватьPushУведомления) Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
				, , НСтр("ru = 'Отправка push-уведомлений невозможна т.к. не задан способ отправки.'"));
			Возврат;
		КонецЕсли;
	
		Если ИспользоватьPushУведомления = Перечисления.ВариантыPushУведомлений.НеИспользовать Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
				, , НСтр("ru = 'Отправка push-уведомлений невозможна т.к. установленый способ отправки: ''Не ипользовать'''"));
			Возврат;
		КонецЕсли;

	// Получаем дату последней отправки уведомлений.
	ДатаПоследнейОтправки = Константы.ДатаПоследнейОтправкиPushУведомлений.Получить();
	ТекущаяДата = ТекущаяДатаСеанса();
	ПакетЗапросов = ДанныеДляУдаленияИОтправки(ДатаПоследнейОтправки, ТекущаяДата);

	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Дата последней отправки: %1'", ДатаПоследнейОтправки)));
	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Текущая дата: %1'", ТекущаяДата)));

	// Обрабатываем сообщения.
	ДанныеОтправки = ОтправитьСообщенияИспользуяPushУведомления(
		ПакетЗапросов[1], ИспользоватьPushУведомления, Протокол, ИспользоватьМобильныеПриложения);
		
	ДанныеУдаления = УдалитьНеактуальныеСообщенияPushУведомлений(
		ПакетЗапросов[0], Протокол);

	// Обновляем дату последней отправки.
	Константы.ДатаПоследнейОтправкиPushУведомлений.Установить(ТекущаяДата);

	СообщениеОбОшибкеОтправкеPush(ДанныеОтправки);
	
	ЗаписатьСтатистикуОтправкиPush(ТекущаяДата,
		ДанныеУдаления.Удалено, ДанныеОтправки.Отправлено, ДанныеОтправки.Ошибок, Протокол);

КонецПроцедуры

// Получает данные аутентификации для отправки Push-уведомления
//
// Параметры:
//  Использовать1С   - Булево - Ипользовать для отправки сервис 1С
//  ИспользоватьAPNS - Булево - Ипользовать для отправки сервис Apple
//  ИспользоватьFCM  - Булево - Ипользовать для отправки сервис Google
// 
// Возвращаемое значение:
//  - Строка
//  - Соответствие
Функция ДанныеАутентификацииДляОтправкиPushУведомленияМП(
	Использовать1С, ИспользоватьAPNS, ИспользоватьFCM)

	// По умолчанию никаких данных нет
	ДанныеАутентификации = Неопределено;

	Если Использовать1С = Истина Тогда
		ДанныеАутентификации = СокрЛП(Константы.ЛогинСервисаПередачиУведомлений1С.Получить());
	Иначе

		Если ИспользоватьFCM Тогда
					
			ДанныеАутентификации = Новый Соответствие();		
			КлючСервераОтправки = СокрЛП(Константы.КлючCервераОтправителяFCM.Получить());			
			ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.FCM] = КлючСервераОтправки;
						
		КонецЕсли;

		Если ИспользоватьAPNS Тогда

			Если ДанныеАутентификации = Неопределено Тогда
				ДанныеАутентификации = Новый Соответствие();
			КонецЕсли;

			ДанныеСертификата = Константы.СертификатМобильногоПриложенияДляiOS.Получить().Получить();

			Если ТипЗнч(ДанныеСертификата) = Тип("Структура") Тогда

				Сертификат = ДанныеСертификата.Сертификат;

				Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
					ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS] = Сертификат;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеАутентификации;

КонецФункции

// Получает данные аутентификации для отправки Push-уведомления на мобильном клиенте
//
// Возвращаемое значение:
//  - Строка
//  - Соответствие
Функция ДанныеАутентификацииДляОтправкиPushУведомленияМК()

	ДанныеАутентификации = Константы.КодОтправителяСервисаПередачиУведомлений1СМК.Получить();
	
	Если Не ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		ДанныеАутентификации = Неопределено;
	КонецЕсли;	
	
	Возврат ДанныеАутентификации;

КонецФункции

// Получает пакет результатов запроса с данными уведомлений для удаления и отправки
//
// Параметры:
//  ДатаПоследнейОтправки - Дата - ДатаПоследнего сеанса отправки уведомлений
//  ТекущаяДата			  - Дата - Дата начала текущего сеанса отправки
// 
// Возвращаемое значение:
//  Массив - Массив содержащший пакет запросов с данными
//
Функция ДанныеДляУдаленияИОтправки(ДатаПоследнейОтправки, ТекущаяДата)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаПоследнейОтправки", ДатаПоследнейОтправки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТипПриложенияМобильноеПриложение", ТипПриложенияМобильноеПриложение());
	Запрос.УстановитьПараметр("ТипПриложенияМобильныйКлиент", ТипПриложенияМобильныйКлиент());
	
	Запрос.Текст = "ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь КАК Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления КАК ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки КАК ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение КАК Сообщение
		|ИЗ
		|	РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки <= &ДатаПоследнейОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь КАК Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления КАК ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки КАК ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение КАК Сообщение,
		|	ВЫРАЗИТЬ(СведенияОМобильныхКлиентах.МобильныйКлиент КАК
		|		Справочник.ПользователиМобильногоПриложения).ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	СведенияОМобильныхКлиентах.Описание КАК ОписаниеПользователяМП,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторКлиентаМК,
		|	&ТипПриложенияМобильноеПриложение КАК ТипПриложения
		|ИЗ
		|	РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОМобильныхКлиентах КАК СведенияОМобильныхКлиентах
		|		ПО СообщенияPushУведомлений.Пользователь = СведенияОМобильныхКлиентах.МобильныйКлиент.Пользователь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО СообщенияPushУведомлений.ОбъектУведомления = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки > &ДатаПоследнейОтправки
		|	И СообщенияPushУведомлений.ДатаОтправки <= &ТекущаяДата
		|	И СведенияОМобильныхКлиентах.МобильныйКлиент.ИдентификаторУстановлен
		|	И НЕ СведенияОМобильныхКлиентах.МобильныйКлиент.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение,
		|	СведенияОМобильныхОнлайнКлиентах.ИдентификаторПодписчикаУведомления,
		|	СведенияОМобильныхОнлайнКлиентах.СведенияОКлиенте,
		|	СведенияОМобильныхОнлайнКлиентах.ИдентификаторКлиента,
		|	&ТипПриложенияМобильныйКлиент
		|ИЗ
		|	РегистрСведений.СведенияОМобильныхОнлайнКлиентах КАК СведенияОМобильныхОнлайнКлиентах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|		ПО СведенияОМобильныхОнлайнКлиентах.Пользователь = СообщенияPushУведомлений.Пользователь
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки > &ДатаПоследнейОтправки
		|	И СообщенияPushУведомлений.ДатаОтправки <= &ТекущаяДата
		|	И СведенияОМобильныхОнлайнКлиентах.ИдентификаторПодписчикаУстановлен
		|	И НЕ СведенияОМобильныхОнлайнКлиентах.Пользователь.Недействителен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтправки
		|ИТОГИ
		|	МАКСИМУМ(ДатаОтправки)
		|ПО
		|	ОбъектУведомления,
		|	ТипПриложения,
		|	Сообщение";
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции

// Удаляет неактуальные сообщения Push-уведомлений
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - выборка по неактуальным сообщениям
//
Функция УдалитьНеактуальныеСообщенияPushУведомлений(РезультатЗапроса, Протокол)

	ВыборкаУдаляемых = РезультатЗапроса.Выбрать();

	ВозвращаемоеЗначение = Новый Структура("Всего, Удалено", 0,0);
	ВозвращаемоеЗначение.Всего = ВыборкаУдаляемых.Количество();
	
	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Записей к удалению: %1'", ВозвращаемоеЗначение.Всего)));

	Пока ВыборкаУдаляемых.Следующий() Цикл

		Набор = РегистрыСведений.СообщенияPushУведомлений.СоздатьНаборЗаписей();

		Набор.Отбор.Пользователь.Установить(ВыборкаУдаляемых.Пользователь);
		Набор.Отбор.ОбъектУведомления.Установить(ВыборкаУдаляемых.ОбъектУведомления);

		// Если ошибка - переходим к следующей записи, эту удалим в следующий раз
		Попытка
			Набор.Записать(Истина);
			ВозвращаемоеЗначение.Удалено = ВозвращаемоеЗначение.Удалено + 1;
		Исключение
		КонецПопытки;

	КонецЦикла;

	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Записей удалено: %1'", ВозвращаемоеЗначение.Удалено)));

	Возврат ВозвращаемоеЗначение

КонецФункции

// Удаляет идентификаторы получателей уведомлений у устройств для которых не возможна доставка
//
// Параметры:
//  Токены - Массив - Массив идентификаторов получаетелей уведомлений
//
Процедура УдалитьИдентификаторыДляНеАктивныхУстройствМП(Токены)

	Если Токены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиМобильногоПриложения.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	ПользователиМобильногоПриложения.Ссылка КАК МобильноеПриложение
		|ИЗ
		|	Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
		|ГДЕ
		|	ПользователиМобильногоПриложения.ИдентификаторУстановлен = ИСТИНА
		|	И НЕ ПользователиМобильногоПриложения.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ИдентификаторКлиента = Выборка.ИдентификаторКлиента.Получить();
		
		МобильноеПриложение = Выборка.МобильноеПриложение; // СправочникСсылка.ПользователиМобильногоПриложения
		
		Если Не ИдентификаторКлиента = Неопределено
			И Токены.Найти(ИдентификаторКлиента.ИдентификаторУстройства) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;

		НачатьТранзакцию();
		
		Попытка
		
			// Ответственное чтение с изменением.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПользователиМобильногоПриложения");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", МобильноеПриложение);
			Блокировка.Заблокировать();
			
			МобильноеПриложениеОбъект = МобильноеПриложение.ПолучитьОбъект();
			МобильноеПриложениеОбъект.Заблокировать();
			МобильноеПриложениеОбъект.ИдентификаторКлиента = Неопределено;
			МобильноеПриложениеОбъект.ИдентификаторУстановлен = Ложь;
			МобильноеПриложениеОбъект.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = МобильныйКлиентКлиентСервер.ИмяСобытияPushУведомления();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
				НСтр("ru = 'Не удалось удалить идентификаторы неактивных устройств МП.'"));
				
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Удаляет идентификаторы получателей уведомлений у устройств для которых не возможна доставка
//
// Параметры:
//  Токены - Массив - Массив идентификаторов получаетелей уведомлений
//
Процедура УдалитьИдентификаторыДляНеАктивныхУстройствМК(Токены)

	Если Токены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОМобильныхОнлайнКлиентах.Пользователь КАК ПользовательМобильногоОнлайнКлиента,
		|	СведенияОМобильныхОнлайнКлиентах.ИдентификаторПодписчикаУведомления КАК ИдентификаторПодписчикаУведомления
		|ИЗ
		|	РегистрСведений.СведенияОМобильныхОнлайнКлиентах КАК СведенияОМобильныхОнлайнКлиентах
		|ГДЕ
		|	СведенияОМобильныхОнлайнКлиентах.ИдентификаторПодписчикаУстановлен = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ИдентификаторПодписчикаУведомления = Выборка.ИдентификаторПодписчикаУведомления.Получить();
		
		ПользовательМобильногоОнлайнКлиента = Выборка.ПользовательМобильногоОнлайнКлиента;
		
		Если Не ИдентификаторПодписчикаУведомления = Неопределено
			И Токены.Найти(ИдентификаторПодписчикаУведомления.ИдентификаторУстройства) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;

		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОМобильныхОнлайнКлиентах");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			МобильныйОнлайнКлиентОбъект = ПользовательМобильногоОнлайнКлиента.ПолучитьОбъект();
			МобильныйОнлайнКлиентОбъект.ИдентификаторПодписчикаУведомления = Неопределено;
			МобильныйОнлайнКлиентОбъект.ИдентификаторПодписчикаУстановлен = Ложь;
			МобильныйОнлайнКлиентОбъект.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = МобильныйКлиентКлиентСервер.ИмяСобытияPushУведомления();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
				НСтр("ru = 'Не удалось удалить идентификаторы неактивных устройств МК.'"));
				
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Отправляет сообщения через сервис Push-уведомлений
//
// Параметры:
//  Сообщения - РезультатЗапроса - выборка по сообщениям для отправки
//  ИспользоватьPushУведомления - ПеречислениеСсылка.ВариантыPushУведомлений - Вид используемого сервиса отправки
//  Протокол - Массив из Строка - Протокол работы процедры
//  ИспользоватьМобильныеПриложения - Булево - Показывает что включены push уведомления на мобильные приложения
//
Функция ОтправитьСообщенияИспользуяPushУведомления(
	Сообщения, ИспользоватьPushУведомления, Протокол, ИспользоватьМобильныеПриложения)

	ВозвращаемоеЗначение = 
		Новый Структура("Всего, Отправлено, Ошибок, ОписанияОшибок", 0, 0, 0, Новый Массив);
	
	// Имя события для записи в ЖР.	
	ИмяСобытия = МобильныйКлиентКлиентСервер.ИмяСобытияPushУведомления();

	//Получаем параметры отправки 
	ИспользоватьAPNS = Константы.ИспользоватьAPNS.Получить();
	ИспользоватьFCM = Константы.ИспользоватьFCM.Получить();
	Использовать1С = ИспользоватьPushУведомления =
		Перечисления.ВариантыPushУведомлений.ИспользоватьВспомогательныйСервис1С;
		
	ТипПриложенияМобильноеПриложение = ТипПриложенияМобильноеПриложение();
	ТипПриложенияМобильныйКлиент = ТипПриложенияМобильныйКлиент();
		
	ДанныеАутентификацииМП = Неопределено;
	ДанныеАутентификацииМК = ДанныеАутентификацииДляОтправкиPushУведомленияМК();
	
	Если ИспользоватьМобильныеПриложения = Истина Тогда	
		ДанныеАутентификацииМП = ДанныеАутентификацииДляОтправкиPushУведомленияМП(
			Использовать1С, ИспользоватьAPNS, ИспользоватьFCM);
	КонецЕсли;
	
	Если ДанныеАутентификацииМК = Неопределено И ДанныеАутентификацииМП = Неопределено Тогда 
		ТекстОшибки =
			НСтр("ru = 'Отправка push-уведомлений невозможна т.к. не определены данные аутентификации МК и МП'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Протокол.Добавить(
		СтрШаблон(НСтр("ru = 'Данные аутентификации получены: Мобильный клиент (%1), Мобильное приложение (%2)'"),
			ДанныеАутентификацииМК <> Неопределено, ДанныеАутентификацииМП <> Неопределено));
	
	// Получаем заголовок Push-уведомления
	Заголовок = Константы.ЗаголовокСистемы.Получить();
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = '1С:Документооборот'");
	КонецЕсли;

	// Перебираем все доступные сообщения
	ВыборкаОбъектов = Сообщения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		ОбъектУведомления = ВыборкаОбъектов.ОбъектУведомления;
		
		Протокол.Добавить(
			СтрШаблон(НСтр("ru = 'Объект уведомления: %1'"), ВыборкаОбъектов.ОбъектУведомления));
		
		// Перебираем типы приложения	
		ВыборкаТипПриложения = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТипПриложения.Следующий() Цикл
			
			Если ВыборкаТипПриложения.ТипПриложения  = ТипПриложенияМобильноеПриложение Тогда
				СвойстваУведомления = Новый Массив;
				СвойстваУведомления.Добавить(МП_СлужебныйПовтИсп.ТипПоСсылке(ОбъектУведомления));
				СвойстваУведомления.Добавить(XMLСтрока(ОбъектУведомления));
				СвойстваУведомления.Добавить(XMLСтрока(ТекущаяДатаСеанса()));
				
				ДанныеJS = Новый ЗаписьJSON;
				ДанныеJS.УстановитьСтроку();
				ЗаписатьJSON(ДанныеJS, СвойстваУведомления);
				ПредставлениеДанных = ДанныеJS.Закрыть();		
				
			Иначе
				ПредставлениеДанных = ЗначениеВСтрокуВнутр(ОбъектУведомления);	
			КонецЕсли;
			
			Протокол.Добавить(
					СтрШаблон(НСтр("ru = 'Данные уведомления: %1'"), ПредставлениеДанных));
			
			Если ВыборкаТипПриложения.ТипПриложения = ТипПриложенияМобильноеПриложение
				И ДанныеАутентификацииМП = Неопределено Тогда
				Протокол.Добавить(
					НСтр("ru = 'Невозможно отправить уведомление для МП: не определены данные аутентификации.'"));
				Продолжить;
			ИначеЕсли ВыборкаТипПриложения.ТипПриложения = ТипПриложенияМобильныйКлиент
				И ДанныеАутентификацииМК = Неопределено Тогда
				Протокол.Добавить(
					НСтр("ru = 'Невозможно отправить уведомление для МК: не определены данные аутентификации.'"));
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаТипПриложения.ТипПриложения = ТипПриложенияМобильноеПриложение Тогда
				// Проверяем - можем ли мы отправить объект в мобильное приложение.
				ТипСсылки = ТипЗнч(ОбъектУведомления);
				Если МП_СлужебныйПовтИсп.ТипыДанныхPUSH().Найти(ТипСсылки) = Неопределено Тогда
					Протокол.Добавить(НСтр("ru = 'Не поддерживается мобильным приложением'"));
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			// Получаем сообщения по типу приложения.
			ВыборкаСообщений = ВыборкаТипПриложения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
			ИдентификаторыПолучателейFCM = Новый Массив;
			
			Пока ВыборкаСообщений.Следующий() Цикл
				
				Уведомление = Новый ДоставляемоеУведомление();
				Уведомление.Заголовок = Заголовок;
				Уведомление.Текст = ВыборкаСообщений.Сообщение;
				Если Не ПустаяСтрока(ПредставлениеДанных) Тогда
					Уведомление.Данные = ПредставлениеДанных;
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаСообщений.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Протокол.Добавить(
						СтрШаблон(НСтр("ru = 'Пользователь %1'"), ВыборкаДетальныеЗаписи.Пользователь));
					Протокол.Добавить(
						СтрШаблон(
							НСтр("ru = 'Описание приложения: %1'"),
							ВыборкаДетальныеЗаписи.ОписаниеПользователяМП));
					Протокол.Добавить(
						СтрШаблон(
							НСтр("ru = 'Тип Приложения (0 - МП, 1 - МК): %1'"),
							ВыборкаТипПриложения.ТипПриложения));
					
					// Флаг отправки может быть поднят, но идентификатор не установлен.
					Идентификатор = ВыборкаДетальныеЗаписи.ИдентификаторКлиента.Получить();
					
					// Если ошибка идентификатора, то пропускаем и взводим в РС ОшибкуОтправкиУведомлений.
					Если ВыборкаДетальныеЗаписи.ТипПриложения = ТипПриложенияМобильныйКлиент
						И Идентификатор = Неопределено Тогда
							
						РегистрыСведений.СведенияОМобильныхОнлайнКлиентах.УстановитьОшибкуОтправкиУведомлений(
							ВыборкаДетальныеЗаписи.Пользователь, ВыборкаДетальныеЗаписи.ИдентификаторКлиентаМК);
							
						ТекстОшибки =
							СтрШаблон(
								НСтр("ru = 'Идентификатор не определен, ошибка отправки на МК.
									|Пользователь: %1, идентификатор клиента: %2'"),
								ВыборкаДетальныеЗаписи.Пользователь, ВыборкаДетальныеЗаписи.ИдентификаторКлиентаМК);
							
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
						Протокол.Добавить(ТекстОшибки);
						
						Продолжить;
					КонецЕсли;

					Уведомление.Получатели.Добавить(Идентификатор);
					
					// Сервис Google.
					Если ИспользоватьFCM
						И ВыборкаТипПриложения.ТипПриложения = ТипПриложенияМобильноеПриложение  
						И Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.FCM Тогда	 
							ИдентификаторыПолучателейFCM.Добавить(Идентификатор);
					КонецЕсли;

				КонецЦикла;
				
				// Если нет получателей выходим.
				Если Уведомление.Получатели.Количество() = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				// Отправляем полученные сообщения на Мобильное приложение.
				Если ВыборкаТипПриложения.ТипПриложения = ТипПриложенияМобильноеПриложение Тогда
					Если ДанныеАутентификацииМП = Неопределено Тогда
						Протокол.Добавить(
							НСтр("ru = 'Пропускаем отправку. Нет настроек отправки для мобильного приложения'"));
					Иначе
						РезультатОтправки = ВыполнитьОтправкуСообщения(Уведомление, 
							ДанныеАутентификацииМП, Использовать1С, ИдентификаторыПолучателейFCM, Протокол);
						УдалитьИдентификаторыДляНеАктивныхУстройствМП(РезультатОтправки.УдаленныеТокены);
					КонецЕсли;
					
				// Отправляем полученные сообщения на Мобильный Клиент.
				ИначеЕсли ВыборкаТипПриложения.ТипПриложения = ТипПриложенияМобильныйКлиент Тогда
					Если ДанныеАутентификацииМК = Неопределено Тогда
						Протокол.Добавить(
							НСтр("ru = 'Пропускаем отправку. Нет настроек отправки для мобильного клиента'"));
					Иначе
						РезультатОтправки = ВыполнитьОтправкуСообщения(Уведомление, 
							ДанныеАутентификацииМК, Истина, ИдентификаторыПолучателейFCM, Протокол);
						УдалитьИдентификаторыДляНеАктивныхУстройствМК(РезультатОтправки.УдаленныеТокены);
					КонецЕсли;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				// Добавим сведения о результатах отправки в общие сведения.
				ВозвращаемоеЗначение.Отправлено = ВозвращаемоеЗначение.Отправлено + РезультатОтправки.Отправлено;
				ВозвращаемоеЗначение.Ошибок = ВозвращаемоеЗначение.Ошибок + РезультатОтправки.Ошибок;
				ВозвращаемоеЗначение.Всего = ВозвращаемоеЗначение.Всего + Уведомление.Получатели.Количество();
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ВозвращаемоеЗначение.ОписанияОшибок, РезультатОтправки.ОписанияОшибок);
				
				Протокол.Добавить(
					СтрШаблон(НСтр("ru = 'ВозвращаемоеЗначение.Всего %1'"), ВозвращаемоеЗначение.Всего));
				
			КонецЦикла;

		КонецЦикла;
		
	КонецЦикла;
		
	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ВыполнитьОтправкуСообщения(Уведомление, ДанныеАутентификации, ИспользоватьПромежуточныйСервис, 
	ИдентификаторыПолучателейFCM, Протокол)
	
	ВозвращаемоеЗначение = Новый Структура("Отправлено, Ошибок, ОписанияОшибок, УдаленныеТокены",
		0, 0, Новый Массив, Новый Массив);
	
	Попытка
		
		ИнформацияОПроблемахОтправки = Новый Массив;
		
		// Отправляем полученные сообщения.
		ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,
			ВозвращаемоеЗначение.УдаленныеТокены, ИспользоватьПромежуточныйСервис, ИнформацияОПроблемахОтправки);
		
		// Обход ошибки отправки для Android из-за превышения размера сообщения.
		Если ИдентификаторыПолучателейFCM.Количество() > 0 И ИнформацияОПроблемахОтправки.Количество() > 0 Тогда
			
			ОтправитьПоАдресно = Ложь;
			
			Для Каждого ЭлементИнформацииОПроблеме Из ИнформацияОПроблемахОтправки Цикл	
				Если СтрНайти(ЭлементИнформацииОПроблеме.Описание, 
					"Уведомление превысило максимальные размеры") > 0 Тогда
					 
					ОтправитьПоАдресно = Истина;
					
					// Обнуляем информацию о проблемах отправки.
					ИнформацияОПроблемахОтправки = Новый Массив;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОтправитьПоАдресно Тогда
				Для Каждого ИдентификаторПолучателяFCM Из ИдентификаторыПолучателейFCM Цикл
					УведомлениеПоАдресно = Новый ДоставляемоеУведомление;
					ЗаполнитьЗначенияСвойств(УведомлениеПоАдресно, Уведомление);
					УведомлениеПоАдресно.Получатели.Очистить();
					
					// Только 1 получатель
					УведомлениеПоАдресно.Получатели.Добавить(ИдентификаторПолучателяFCM);
					
					УдаленныеТокены = Новый Массив;
					ОтправкаДоставляемыхУведомлений.Отправить(УведомлениеПоАдресно, ДанныеАутентификации,
						УдаленныеТокены, ИспользоватьПромежуточныйСервис, ИнформацияОПроблемахОтправки);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВозвращаемоеЗначение.УдаленныеТокены, УдаленныеТокены);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИнформацияОПроблемахОтправки.Количество() > 0 Тогда
			
			ИнформацияОПроблемах = Новый Массив;
							
			Для Каждого ЭлементИнформацииОПроблеме Из ИнформацияОПроблемахОтправки Цикл
				ИнформацияОПроблемах.Добавить(ЭлементИнформацииОПроблеме.Описание);
				ВозвращаемоеЗначение.Ошибок = ВозвращаемоеЗначение.Ошибок + 1;
			КонецЦикла;

			ИнформацияОПроблемахСтрокой = СтрСоединить(ИнформацияОПроблемах, Символы.ПС);
			ИнформацияОПроблемах = Неопределено;
						
			ВозвращаемоеЗначение.ОписанияОшибок.Добавить(ИнформацияОПроблемахСтрокой);			
			Протокол.Добавить(СтрШаблон("%1 %2 %3", Протокол, Символы.ПС, ИнформацияОПроблемахСтрокой));
			Протокол.Добавить(ИнформацияОПроблемахСтрокой);
			Протокол.Добавить(НСтр("ru = 'Сообщение отправлено: Нет'"));
								
		Иначе
			
			Протокол.Добавить(НСтр("ru = 'Сообщение отправлено: Да'"));
			ВозвращаемоеЗначение.Отправлено = ВозвращаемоеЗначение.Отправлено + 1;
			
		КонецЕсли;
		
	Исключение
		
		ВозвращаемоеЗначение.Ошибок = ВозвращаемоеЗначение.Ошибок + Уведомление.Получатели.Количество();			
		Инфо = Строка(ОписаниеОшибки());
					
		Если ВозвращаемоеЗначение.ОписанияОшибок.Найти(Инфо) = Неопределено Тогда
			ВозвращаемоеЗначение.ОписанияОшибок.Добавить(Инфо);
		КонецЕсли;
		
		Протокол.Добавить(НСтр("ru = 'Сообщение отправлено: Нет'") + Инфо);

	КонецПопытки;

	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Всего получателей: %1'"), Уведомление.Получатели.Количество()));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура СообщениеОбОшибкеОтправкеPush(ДанныеОтправки)
	
	Если ДанныеОтправки.Ошибок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователей = РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ОбменСМобильными);
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОписания = Новый Массив();
	СтрокиОписания.Добавить(
		СтрШаблон(
			НСтр("ru ='При отправке push-уведомлений произошли ошибки (%1)'"),
			ДанныеОтправки.Количество()));
	
	СтрокиОписания.Добавить(Символы.ПС);
	СтрокиОписания.Добавить(Символы.ПС);
	
	Для каждого Ошибка Из ДанныеОтправки.ОписанияОшибок Цикл
		
		СтрокиОписания.Добавить(Символы.ПС);
		СтрокиОписания.Добавить(Ошибка);
		
	КонецЦикла;
	
	Описание = СтрСоединить(СтрокиОписания, "");
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
			Описание,
			Пользователь);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьСтатистикуОтправкиPush(Дата, Удалено, Отправлено, Ошибок, Протокол);
	
	// Запишем массив протокола в строку.
	РезультатПротокола = СтрСоединить(Протокол, Символы.ПС);
	
	Если Удалено = 0
		И Отправлено = 0
		И Ошибок = 0 Тогда
		Возврат;
	КонецЕсли;

	Запись = РегистрыСведений.СтатистикаОтправкаPushУведомлений.СоздатьМенеджерЗаписи();
	
	Запись.Период = Дата;
	Запись.Окончание = ТекущаяДата();
	Запись.Удалено = Удалено;
	Запись.Отправлено = Отправлено;
	Запись.Ошибок = Ошибок;
	Запись.ПротоколОтправки = РезультатПротокола;
	Запись.Записать(Истина);

КонецПроцедуры

Функция ТипПриложенияМобильноеПриложение()
	Возврат 0;	
КонецФункции

Функция ТипПриложенияМобильныйКлиент()
	Возврат 1;	
КонецФункции

#КонецОбласти
