////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, документы
// Реализует функционал веб-сервиса DMService в части операций с документами
// и основными справочниками
////////////////////////////////////////////////////////////////////////////////

#Область ВнутреннийДокумент

// Получает заполненный объект XDTO, соответствующий внутреннему документу
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий документ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument или DMError
//
Функция ПолучитьВнутреннийДокумент(ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Документ = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		ПолучитьДанныеВнутреннегоДокумента(Документ, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при получении внутреннего документа %1'"),
			ПолучитьНавигационнуюСсылку(Ссылка));
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает новый внутренний документ по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument или DMError
//
Функция СоздатьВнутреннийДокумент(Сообщение) Экспорт
	
	Попытка
		
		Документ = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Документ, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВнутреннегоДокумента(Документ, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Документ.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
			РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Документ.Шаблон);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьВнутреннийДокумент(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании внутреннего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает внутренний документ по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMInternalDocument.
//   ВозвращатьДанныеЗаписанногоОбъекта - Булево - Истина, если после записи требуется вернуть
//     данные записанного объекта, и Ложь в противном случае.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument, заново заполненный, или DMError
//
Функция ИзменитьВнутреннийДокумент(Объект, ВозвращатьДанныеЗаписанногоОбъекта = Истина) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не (ЗначениеЗаполнено(Ссылка) И СокрЛП(Ссылка.ВерсияДанных) <> "")
				И Не ВозвращатьДанныеЗаписанногоОбъекта Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НужноОбновитьПодписи = ОбработкаЗапросовXDTO.СвойствоУстановлено(Объект, "updateSignatures")
			И Объект.updateSignatures;
		ПереданаИнформацияОПодписях = ОбработкаЗапросовXDTO.СвойствоУстановлено(Объект, "signatures");
		Если ПереданаИнформацияОПодписях Или НужноОбновитьПодписи Тогда
			ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка);
			ЧислоПодписейПосле = Объект.signatures.Количество();
			Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
				ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВнутреннегоДокумента(Документ, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если ПереданаИнформацияОПодписях Или НужноОбновитьПодписи Тогда
			Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
				ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ВозвращатьДанныеЗаписанногоОбъекта Тогда
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
			Возврат ПолучитьВнутреннийДокумент(ОбъектИд);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при изменении внутреннего документа %1'"),
			ПолучитьНавигационнуюСсылку(Ссылка));
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового внутреннего документа
//
// Параметры:
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//   ДанныеЗаполнения - СправочникСсылка.ШаблоныВнутреннихДокументов или Неопределено.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocument или DMError
//
Функция ПолучитьНовыйВнутреннийДокумент(НаборКолонок, ДанныеЗаполнения) Экспорт
	
	Попытка
		
		Документ = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		
		// Заполним документ по шаблону, если необходимо.
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ДанныеЗаполнения, "DMInternalDocumentTemplate") Тогда
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ДанныеЗаполнения.objectId);
			Если ЗначениеЗаполнено(Шаблон) Тогда
				Документ.Шаблон = Шаблон;
				ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ);
			КонецЕсли;
		КонецЕсли;
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		ПолучитьДанныеВнутреннегоДокумента(Документ, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового внутреннего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Документ - СправочникОбъект.ВнутренниеДокументы
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocument
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
Процедура ПолучитьДанныеВнутреннегоДокумента(Документ, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт
	
	ДанныеДокумента = Новый Структура;
	
	ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ);
	
	ДанныеДокумента.Вставить("folder", Документ.Папка);
	ДанныеДокумента.Вставить("beginDate", Документ.ДатаНачалаДействия);
	ДанныеДокумента.Вставить("endDate", Документ.ДатаОкончанияДействия);
	ДанныеДокумента.Вставить("openEnded", Документ.Бессрочный);
	ДанныеДокумента.Вставить("correspondent", Документ.Контрагент);
	ДанныеДокумента.Вставить("contactPerson", Документ.КонтактноеЛицо);
	ДанныеДокумента.Вставить("author", Документ.Подготовил);
	ДанныеДокумента.Вставить("addressee", Документ.Адресат);
	ДанныеДокумента.Вставить("prolongationProcedure", Документ.ПорядокПродления);
	ДанныеДокумента.Вставить("VAT", Документ.СуммаНДС);
	
	Если ЗначениеЗаполнено(Документ.ВидДокумента)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента, "ИспользоватьПодписание") Тогда
		ДанныеДокумента.Вставить("signer", Документ.Подписал);
	Иначе
		Если Документ.ГрифыУтверждения.Количество() = 1
				И Документ.ГрифыУтверждения[0].Результат = Перечисления.РезультатыУтверждения.Утверждено Тогда
			ДанныеДокумента.Вставить("signer", Документ.ГрифыУтверждения[0].АвторУтверждения);
		Иначе
			ДанныеДокумента.Вставить("signer", Документ.Утвердил);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним состояние документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		СостояниеДокумента = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		
		ИменаСостояний = Новый Структура("Согласование, Утверждение, Подписание, Регистрация, Рассмотрение, Исполнение");
		
		ИменСвойствПоСостояниям = Новый Соответствие;
		ИменСвойствПоСостояниям.Вставить("Согласование", "statusApproval");
		ИменСвойствПоСостояниям.Вставить("Утверждение", "statusConfirmation");
		ИменСвойствПоСостояниям.Вставить("Подписание", "statusSigning");
		ИменСвойствПоСостояниям.Вставить("Регистрация", "statusRegistration");
		ИменСвойствПоСостояниям.Вставить("Рассмотрение", "statusConsideration");
		ИменСвойствПоСостояниям.Вставить("Исполнение", "statusPerformance");
		
		Для Каждого Строка Из ИменаСостояний Цикл
			ИмяСостояния = Строка.Ключ;
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(
				Документ.Ссылка,
				"Состояние" + ИмяСостояния);
			ДанныеДокумента.Вставить(ИменСвойствПоСостояниям.Получить(ИмяСостояния), СтруктураСостояния.Состояние);
		КонецЦикла;
		
	Иначе // пустой
		
		СостояниеДокумента = Перечисления.СостоянияДокументов.Проект;
		ДанныеДокумента.Вставить("statusRegistration", Перечисления.СостоянияДокументов.Проект);
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("status", СостояниеДокумента);
	
	// Настройки.
	ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	ДанныеДокумента.Вставить("documentTypeEnabled", Константы.ИспользоватьВидыВнутреннихДокументов.Получить());
	ДанныеДокумента.Вставить("filesEnabled", Истина);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты документа.
	Для Каждого Реквизит Из ДанныеДокумента Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты вида документа.
	Если ОбъектXDTO.Установлено("documentType") Тогда
		
		ПолучитьДанныеВидаДокумента(ОбъектXDTO.documentType, ДанныеДокумента.documentType);
		
		// Заполним суммы по статьям ДДС.
		Если ЗначениеЗаполнено(Документ.Ссылка)
				И ОбъектXDTO.documentType.Установлено("cashFlowDetailsEnabled")
				И ОбъектXDTO.documentType.cashFlowDetailsEnabled = Истина
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("cashFlowRows")) <> Неопределено) Тогда
			
			ОбъектXDTO.cashFlowRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowRows");
			СтатьиДвиженияДенежныхСредств = Новый ТаблицаЗначений;
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("Сумма");
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СуммаНДС");
			
			Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
				
				РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
					Документ.Ссылка, СтатьиДвиженияДенежныхСредств);
				
			ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
				
				ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(
					Документ.Шаблон,
					СтатьиДвиженияДенежныхСредств);
				
			КонецЕсли;
			
			Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
				
				СтатьяXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
				СтатьяXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Строка.СтатьяДвиженияДенежныхСредств);
				СтатьяXDTO.name = Строка(Строка.СтатьяДвиженияДенежныхСредств);
				
				СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowRow");
				СтрокаXDTO.item = СтатьяXDTO;
				СтрокаXDTO.total = Строка.Сумма;
				СтрокаXDTO.VAT = Строка.СуммаНДС;
				
				ОбъектXDTO.cashFlowRows.rows.Добавить(СтрокаXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполним товары и услуги.
		Если ЗначениеЗаполнено(Документ.Ссылка)
				И ОбъектXDTO.documentType.Установлено("productRowsEnabled")
				И ОбъектXDTO.documentType.productRowsEnabled = Истина
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("productRows")) <> Неопределено) Тогда
			
			ОбъектXDTO.productRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProductRows");
			
			Для Каждого Строка Из Документ.Товары Цикл
				
				СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProductRow");
				
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "product", Строка.Номенклатура);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "quantity", Строка.Количество);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO,
					"measurementUnit", Строка.ЕдиницаИзмерения);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "price", Строка.Цена);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "VATRate", Строка.СтавкаНДС);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "VAT", Строка.СуммаНДС);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "total", Строка.Сумма);
				
				ОбъектXDTO.productRows.rows.Добавить(СтрокаXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполним таблицу Контрагенты.
		Если ЗначениеЗаполнено(Документ.Ссылка)
				И ОбъектXDTO.documentType.Установлено("correspondentEnabled")
				И ОбъектXDTO.documentType.correspondentEnabled = Истина
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("correspondentRows")) <> Неопределено) Тогда
			
			ОбъектXDTO.correspondentRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondentRows");
			
			Для Каждого Строка Из Документ.Контрагенты Цикл
				
				СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondentRow");
				
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "correspondent", Строка.Контрагент);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "contact", Строка.КонтактноеЛицо);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO,
					"signedFromTheCorrespondent", Строка.ПодписалОтКонтрагента);
				
				ОбъектXDTO.correspondentRows.rows.Добавить(СтрокаXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполним таблицу Стороны.
		Если ЗначениеЗаполнено(Документ.Ссылка)
				И ОбъектXDTO.documentType.Установлено("partiesEnabled")
				И ОбъектXDTO.documentType.partiesEnabled = Истина
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("partyRows")) <> Неопределено) Тогда
			
			ОбъектXDTO.partyRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRows");
			
			Для Каждого Строка Из Документ.Стороны Цикл
				
				СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRow");
				
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "signatureDate", Строка.ДатаПодписи);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "comment", Строка.Комментарий);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "signed", Строка.Подписан);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "setBy", Строка.Установил);
				
				Если ЗначениеЗаполнено(Строка.Наименование) Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "description", Строка.Наименование);
					СтрокаXDTO.description.predefinedName = Справочники.НаименованияСторон.ПолучитьИмяПредопределенного(
						Строка.Наименование);
				КонецЕсли;
				
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "party", Строка.Сторона);
				Если ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
						СтрокаXDTO.party, "correspondent", Строка.Сторона);
					
				ИначеЕсли ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Организации") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
						СтрокаXDTO.party, "organization", Строка.Сторона);
					
				ИначеЕсли ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Пользователи") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
						СтрокаXDTO.party, "user", Строка.Сторона);
					
				КонецЕсли;
				
				Если ТипЗнч(Строка.КонтактноеЛицо) = Тип("Строка") Тогда
					СтрокаXDTO.contact = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRowContact");
					СтрокаXDTO.contact.name = Строка.КонтактноеЛицо;
					СтрокаXDTO.contact.objectID = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
					СтрокаXDTO.contact.objectID.id = "";
					СтрокаXDTO.contact.objectID.type = "";
					СтрокаXDTO.contact.contactName = Строка.КонтактноеЛицо;
					
				Иначе
					
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "contact", Строка.КонтактноеЛицо);
					Если ТипЗнч(Строка.КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
						ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
							СтрокаXDTO.contact, "contactPerson", Строка.КонтактноеЛицо);
					ИначеЕсли ТипЗнч(Строка.КонтактноеЛицо) = Тип("СправочникСсылка.Пользователи") Тогда
						ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
							СтрокаXDTO.contact, "user", Строка.КонтактноеЛицо);
					КонецЕсли;
					
				КонецЕсли;
				
				
				Если ТипЗнч(Строка.Подписал) = Тип("Строка") Тогда
					СтрокаXDTO.signedBy = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRowContact");
					СтрокаXDTO.signedBy.name = Строка.Подписал;
					СтрокаXDTO.signedBy.objectID = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
					СтрокаXDTO.signedBy.objectID.id = "";
					СтрокаXDTO.signedBy.objectID.type = "";
					СтрокаXDTO.signedBy.contactName = Строка.Подписал;
					
				Иначе
					
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "signedBy", Строка.Подписал);
					Если ТипЗнч(Строка.Подписал) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
						ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
							СтрокаXDTO.signedBy, "contactPerson", Строка.Подписал);
					ИначеЕсли ТипЗнч(Строка.Подписал) = Тип("СправочникСсылка.Пользователи") Тогда
						ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
							СтрокаXDTO.signedBy, "user", Строка.Подписал);
					КонецЕсли;
					
				КонецЕсли;
				
				ОбъектXDTO.partyRows.rows.Добавить(СтрокаXDTO);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним реквизиты вида организации.
	Если ОбъектXDTO.Установлено("organization") Тогда
		ПолучитьДанныеОрганизации(ДанныеДокумента.organization, ОбъектXDTO.organization);
	КонецЕсли;
	
	// Заполним реквизиты шаблона документа.
	Если ОбъектXDTO.Установлено("template") Тогда
		ПолучитьДанныеШаблонаВнутреннегоДокумента(
			ДанныеДокумента.template,
			ОбъектXDTO.template,,
			Истина);
	КонецЕсли;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Документ.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
		
		ФайлыШаблона = Новый ТаблицаЗначений;
		ФайлыШаблона.Колонки.Добавить("Наименование");
		ФайлыШаблона.Колонки.Добавить("ПолныйПуть");
		ФайлыШаблона.Колонки.Добавить("Расширение");
		ФайлыШаблона.Колонки.Добавить("ШаблонОснованиеДляСоздания");
		ФайлыШаблона.Колонки.Добавить("ДобавленИзШаблона");
		
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(Документ.Шаблон, ФайлыШаблона, Ложь);
		
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона);
		
	КонецЕсли;
	
	// Заполним подписи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда
			МассивПодписей = ЗаполнитьСписокПодписей(Документ.Ссылка);
			ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним слепок документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда
			ОбъектXDTO.KeyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним связи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.Relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним доступные и недоступные поля.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ);
		Если ДоступныеПоля <> "" Тогда
			Для Каждого Строка Из ДоступныеПоля Цикл
				ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним ссылку на внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Документ.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним параметры хронометража.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("chronometrationSettings")) <> Неопределено Тогда
		ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним признак "Содержит оригиналы".
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
		ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним визы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("visas")) <> Неопределено Тогда
		ЗаполнитьВизыДокумента(ОбъектXDTO, Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	// Заполним резолюции.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("resolutions")) <> Неопределено Тогда
		ЗаполнитьРезолюцииДокумента(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним номенклатуру дел.
	Если ОбъектXDTO.Установлено("caseFilesCatalog") Тогда
		ПолучитьДанныеНоменклатурыДел(ДанныеДокумента.caseFilesCatalog, ОбъектXDTO.caseFilesCatalog);
	КонецЕсли;
	
	// Заполним дела хранения документов.
	Если ОбъектXDTO.Установлено("caseFileDossier") Тогда
		ПолучитьДанныеДелаХраненияДокументов(ДанныеДокумента.caseFileDossier, ОбъектXDTO.caseFileDossier);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
	ОбъектXDTO.name = Строка(Документ.Ссылка);
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Документ - СправочникОбъект.ВнутренниеДокументы - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocument - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВнутреннегоДокумента(Документ, ОбъектXDTO, Ошибка)
	
	НачальныйРегистрационныйНомер = Документ.РегистрационныйНомер;
	
	Блокировать = ЗначениеЗаполнено(Документ.Ссылка);
	Если Блокировать Тогда
		Документ.Заблокировать();
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Шаблон, ОбъектXDTO, "template");
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка)
		И ЗначениеЗаполнено(Документ.Шаблон);
	Если ЗаполнятьПоШаблону Тогда
		Документ.НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон, "НоменклатураДел");
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ВидДокумента, ОбъектXDTO, "documentType");
	РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ВидДокумента,
		"ВестиУчетСторон, ВестиУчетПоКонтрагентам, ВестиУчетТоваровИУслуг, ИспользоватьПодписание");
	
	ЗаполнитьДанныеВнутреннегоДокумента(Документ, ОбъектXDTO, РеквизитыВидаДокумента);
	
	// проверка заполнения
	ПроверятьСвязи = (ОбъектXDTO.Свойства().Получить("checkRelations") <> Неопределено)
		И ОбъектXDTO.Установлено("checkRelations") И ОбъектXDTO.checkRelations;
	ТекстСообщения = "";
	ЕстьОшибки = Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения);
	ПроверитьЗаполнениеВнутреннегоДокумента(
		Документ, РеквизитыВидаДокумента, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи внутреннего документа'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	// проверка заполнения статей ДДС
	ТекстСообщения = "";
	Если Не ПроверитьЗаполнениеСтатейДДС(Документ, ОбъектXDTO, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи внутреннего документа'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	// изменение полей по состоянию
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		ТекущееСостояние = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		НедоступныеПоля = Новый Структура;
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, НедоступныеПоля);
		
		Если ДоступныеПоля <> "" Тогда
			
			ТекущиеДанные = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ПолучитьДанныеВнутреннегоДокумента(Документ.Ссылка.ПолучитьОбъект(), ТекущиеДанные);
			
			Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
				
				Если Свойство.Имя = "status" Тогда // свойства проверяются только в разрезе их типов
					Продолжить;
				КонецЕсли;
				
				Если НедоступныеПоля.Свойство(Свойство.Имя)
						И Не ДоступныеПоля.Свойство(Свойство.Имя)
						И Не СвойстваРавны(ТекущиеДанные, ОбъектXDTO, Свойство) Тогда
					Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
					Ошибка.subject = НСтр("ru = 'Ошибка при записи внутреннего документа'");
					Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'"),
							Свойство.Имя,
							ТекущееСостояние);
					ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
		СообщениеОбОшибке = "";
		Если Не ПроверитьВозможностьРегистрации(Документ, СообщениеОбОшибке) Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Ошибка.description = СообщениеОбОшибке;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = ТекущийПользователь;
	КонецЕсли;

	СрокДействияИзменен = Ложь;
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		СрокДействияИзменен = СрокДействияИзменен(Документ);
	КонецЕсли;
	Документ.ДополнительныеСвойства.Вставить("СрокДействияИзменен", СрокДействияИзменен);
	
	НачатьТранзакцию();
	
	Попытка
		Документ.Записать();
		
		// Статьи ДДС.
		ЗаписатьСтатьиДДСДокумента(Документ, ОбъектXDTO);
		
		// Заполним визы и рабочую группу.
		Если ЗаполнятьПоШаблону Тогда
			ЗаписатьВизыСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
			ЗаписатьРабочуюГруппуСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
		КонецЕсли;
		
		// состояние
		ЗаполнитьСостоянияДокумента(Документ, ОбъектXDTO, ТекущаяДата, ТекущийПользователь);
		
		// регистрация
		Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
			СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
			
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Документ.Ссылка,
				ТекущаяДата(),
				СостояниеДокумента,
				ТекущийПользователь);
		КонецЕсли;
		
		// срок действия
		Если (Документ.ДополнительныеСвойства.ЭтоНовый И СрокДействияЗаполнен(Документ))
				Или Документ.ДополнительныеСвойства.СрокДействияИзменен Тогда
			
			Запись = Новый Структура;
			Запись.Вставить("Документ", Документ.Ссылка);
			Запись.Вставить("ДатаНачалаДействия", Документ.ДатаНачалаДействия);
			Запись.Вставить("ДатаОкончанияДействия", Документ.ДатаОкончанияДействия);
			Запись.Вставить("Бессрочный", Документ.Бессрочный);
			Запись.Вставить("ПорядокПродления", Документ.ПорядокПродления);
			Запись.Вставить("ДокументИсточникИзменения", Неопределено);
			Запись.Вставить("Комментарий", Неопределено);
			РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(Запись);
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка // в отсутствие подходящего нумератора будет выброшено исключение
		Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
	Исключение
		Нумератор = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Нумератор) Тогда
		// изменен автоматический номер
		Если Документ.РегистрационныйНомер <> НачальныйРегистрационныйНомер Тогда
			Документ.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
			Документ.ЧисловойНомер = -1;
			Документ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Блокировать Тогда
		Документ.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВнутренниеДокументы - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocument - источник данных заполнения
//   РеквизитыВидаДокумента - Структура:
//     * ВестиУчетСторон - Булево
//     * ВестиУчетПоКонтрагентам - Булево
//     * ВестиУчетТоваровИУслуг - Булево
//
Процедура ЗаполнитьДанныеВнутреннегоДокумента(ДокументОбъект, ОбъектXDTO, РеквизитыВидаДокумента)
	
	ЗаполнитьОбщиеДанныеДокумента(ДокументОбъект, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Папка, ОбъектXDTO, "folder");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ДатаНачалаДействия, ОбъектXDTO, "beginDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ДатаОкончанияДействия, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Бессрочный, ОбъектXDTO, "openEnded");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ПорядокПродления, ОбъектXDTO, "prolongationProcedure");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Подготовил, ОбъектXDTO, "author");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Адресат, ОбъектXDTO, "addressee");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Контрагент, ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.КонтактноеЛицо, ОбъектXDTO, "contactPerson");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.СуммаНДС, ОбъектXDTO, "VAT");
	
	Если РеквизитыВидаДокумента.ИспользоватьПодписание Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Подписал, ОбъектXDTO, "signer");
	Иначе
		Если ДокументОбъект.ГрифыУтверждения.Количество() = 1
				И ДокументОбъект.ГрифыУтверждения[0].Результат = Перечисления.РезультатыУтверждения.Утверждено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
				ДокументОбъект.ГрифыУтверждения[0].АвторУтверждения, ОбъектXDTO, "signer");
		Иначе
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Утвердил, ОбъектXDTO, "signer");
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыВидаДокумента.ВестиУчетСторон = Истина Тогда
		ЗаполнитьСтороныДокумента(ДокументОбъект, ОбъектXDTO);
	КонецЕсли;
	
	Если РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам = Истина Тогда
		ЗаполнитьКонтрагентовДокумента(ДокументОбъект, ОбъектXDTO);
	КонецЕсли;
	
	Если РеквизитыВидаДокумента.ВестиУчетТоваровИУслуг = Истина Тогда
		ЗаполнитьТоварыДокумента(ДокументОбъект, ОбъектXDTO);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(ДокументОбъект, ОбъектXDTO);
	
	ЗаписатьДанныеФайлов(ДокументОбъект, ОбъектXDTO.files);
	
КонецПроцедуры

// Проверяет заполнение внутреннего документа.
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВнутренниеДокументы - заполняемый объект.
//   РеквизитыВидаДокумента - Структура:
//     * ВестиУчетСторон - Булево
//     * ВестиУчетПоКонтрагентам - Булево
//     * ВестиУчетТоваровИУслуг - Булево
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ПроверятьСвязи - Булево - требуется ли проверять связи документа.
//   ЕстьОшибки - Булево - неявно возвращаемое значение, признак наличия ошибок проверки заполнения.
//
Процедура ПроверитьЗаполнениеВнутреннегоДокумента(ДокументОбъект, РеквизитыВидаДокумента,
		ТекстСообщения, ПроверятьСвязи, ЕстьОшибки) Экспорт
	
	СообщенияОбОшибках = Новый Массив;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
				И ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям",
					Новый Структура("ВидВнутреннегоДокумента", ДокументОбъект.ВидДокумента))
				И Не РеквизитыВидаДокумента.ВестиУчетСторон
				И Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			СообщенияОбОшибках.Добавить(НСтр("ru = 'Не выбрана организация'"));
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не РеквизитыВидаДокумента.ВестиУчетСторон
				И ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам",
					Новый Структура("ВидВнутреннегоДокумента", ДокументОбъект.ВидДокумента))
				И (ДокументОбъект.Контрагенты.Количество() <= 1)
				И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			СообщенияОбОшибках.Добавить(НСтр("ru = 'Поле ""Контрагент"" не заполнено'"));
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если РеквизитыВидаДокумента.ВестиУчетСторон Тогда
			Для Каждого Строка Из ДокументОбъект.Стороны Цикл
				Если Строка.Подписан И Не ЗначениеЗаполнено(Строка.Подписал) Тогда
					Если ЗначениеЗаполнено(Строка.Сторона) И ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты")
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Сторона, "ЮрФизЛицо") =
								Перечисления.ЮрФизЛицо.ФизЛицо Тогда
						Продолжить;
					Иначе
						НомерСтроки = ДокументОбъект.Стороны.Индекс(Строка);
						СообщенияОбОшибках.Добавить(
							СтрШаблон(НСтр("ru = 'В строке %1 для стороны ""%2"" не указан подписант'"),
								НомерСтроки,
								Строка.Сторона));
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + СтрСоединить(СообщенияОбОшибках, Символы.ПС);
		
		Если ПроверятьСвязи Тогда
			ПроверитьОбязательныеСвязи(ДокументОбъект, ТекстСообщения, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает массив вложенных папок
//
// Параметры:
//   ИдентификаторКорневойПапки - Строка - идентификатор папки-родителя
//
// Возвращаемое значение:
//   Массив - массив структур, описывающих вложенные папки следующего уровня:
//     * УникальныйИдентификатор - Строка - идентификатор вложенной папки
//     * Наименование - Строка - наименование вложенной папки
//
Функция ПолучитьСписокПапок(ИдентификаторКорневойПапки) Экспорт
	
	СсылкаПапки = Справочники.ПапкиВнутреннихДокументов.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИдентификаторКорневойПапки) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторКорневойПапки);
		СсылкаПапки = Справочники.ПапкиВнутреннихДокументов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиВнутреннихДокументов.Ссылка КАК Ссылка,
		|	ПапкиВнутреннихДокументов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПапкиВнутреннихДокументов КАК ПапкиВнутреннихДокументов
		|ГДЕ
		|	ПапкиВнутреннихДокументов.Родитель = &Ссылка
		|	И ПапкиВнутреннихДокументов.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	МассивПапок = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПапки = Новый Структура("УникальныйИдентификатор, Наименование", 
			Выборка.Ссылка.УникальныйИдентификатор(), Выборка.Наименование);
		МассивПапок.Добавить(СтруктураПапки);
	КонецЦикла;
	
	Возврат МассивПапок;
	
КонецФункции

#КонецОбласти

#Область ВходящийДокумент

// Получает заполненный объект XDTO, соответствующий входящему документу
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий документ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument или DMError
//
Функция ПолучитьВходящийДокумент(ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Документ = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ПолучитьДанныеВходящегоДокумента(Документ, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при получении входящего документа %1'"),
			ПолучитьНавигационнуюСсылку(Ссылка));
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает новый входящий документ по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument или DMError
//
Функция СоздатьВходящийДокумент(Сообщение) Экспорт
	
	Попытка
		
		Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Документ, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВходящегоДокумента(Документ, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Документ.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
			РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Документ.Шаблон);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьВходящийДокумент(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании входящего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает входящий документ по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMIncomingDocument.
//   ВозвращатьДанныеЗаписанногоОбъекта - Булево - Истина, если после записи требуется вернуть
//     данные записанного объекта, и Ложь в противном случае.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument, заново заполненный, или DMError
//
Функция ИзменитьВходящийДокумент(Объект, ВозвращатьДанныеЗаписанногоОбъекта = Истина) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не (ЗначениеЗаполнено(Ссылка) И СокрЛП(Ссылка.ВерсияДанных) <> "")
				И Не ВозвращатьДанныеЗаписанногоОбъекта Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НужноОбновитьПодписи = ОбработкаЗапросовXDTO.СвойствоУстановлено(Объект, "updateSignatures")
			И Объект.updateSignatures;
		ПереданаИнформацияОПодписях = ОбработкаЗапросовXDTO.СвойствоУстановлено(Объект, "signatures");
		Если ПереданаИнформацияОПодписях Или НужноОбновитьПодписи Тогда
			ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка);
			ЧислоПодписейПосле = Объект.signatures.Количество();
			Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
				ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВходящегоДокумента(Документ, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если ПереданаИнформацияОПодписях Или НужноОбновитьПодписи Тогда
			Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
				ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ВозвращатьДанныеЗаписанногоОбъекта Тогда
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
			Возврат ПолучитьВходящийДокумент(ОбъектИд);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при изменении входящего документа %1'"),
			ПолучитьНавигационнуюСсылку(Ссылка));
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового входящего документа
//
// Параметры:
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//   ДанныеЗаполнения - СправочникСсылка.ШаблоныВходящихДокументов или Неопределено.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocument или DMError
//
Функция ПолучитьНовыйВходящийДокумент(НаборКолонок, ДанныеЗаполнения) Экспорт
	
	Попытка
		
		Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		
		// Заполним документ по шаблону, если необходимо.
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ДанныеЗаполнения, "DMIncomingDocumentTemplate") Тогда
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ДанныеЗаполнения.objectId);
			Если ЗначениеЗаполнено(Шаблон) Тогда
				Документ.Шаблон = Шаблон;
				ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ);
			КонецЕсли;
		КонецЕсли;
	
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ПолучитьДанныеВходящегоДокумента(Документ, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового входящего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Документ - СправочникОбъект.ВходящиеДокументы
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocument
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
Процедура ПолучитьДанныеВходящегоДокумента(Документ, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь)
	
	ДанныеДокумента = Новый Структура;
	
	ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ);
	
	ДанныеДокумента.Вставить("externalNumber", 	Документ.ИсходящийНомер);
	ДанныеДокумента.Вставить("externalDate", 	Документ.ИсходящаяДата);
	ДанныеДокумента.Вставить("correspondent", 	Документ.Отправитель);
	ДанныеДокумента.Вставить("signer", 			Документ.Подписал);
	ДанныеДокумента.Вставить("addressee", 		Документ.Адресат);
	ДанныеДокумента.Вставить("deliveryMethod", 	Документ.СпособПолучения);
	
	// Заполним состояние документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		СостояниеДокумента = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		
		ИменаСостояний = Новый Структура("Согласование, Утверждение, Регистрация, Рассмотрение, Исполнение");
		
		ИменСвойствПоСостояниям = Новый Соответствие;
		ИменСвойствПоСостояниям.Вставить("Согласование", "statusApproval");
		ИменСвойствПоСостояниям.Вставить("Утверждение", "statusConfirmation");
		ИменСвойствПоСостояниям.Вставить("Регистрация", "statusRegistration");
		ИменСвойствПоСостояниям.Вставить("Рассмотрение", "statusConsideration");
		ИменСвойствПоСостояниям.Вставить("Исполнение", "statusPerformance");
		
		Для Каждого Строка Из ИменаСостояний Цикл
			ИмяСостояния = Строка.Ключ;
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
			ДанныеДокумента.Вставить(ИменСвойствПоСостояниям.Получить(ИмяСостояния), СтруктураСостояния.Состояние);
		КонецЦикла;
		
	Иначе // пустой
		
		СостояниеДокумента = Перечисления.СостоянияДокументов.НаРегистрации;
		ДанныеДокумента.Вставить("statusRegistration", Перечисления.СостоянияДокументов.НаРегистрации);
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("status", СостояниеДокумента);
	
	// Настройки.
	ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	ДанныеДокумента.Вставить("documentTypeEnabled", 
		Константы.ИспользоватьВидыВходящихДокументов.Получить());
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл 
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеДокумента Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты вида документа.
	Если ОбъектXDTO.Установлено("documentType") Тогда
		ПолучитьДанныеВидаДокумента(ОбъектXDTO.documentType, ДанныеДокумента.documentType);
	КонецЕсли;
	
	// Заполним реквизиты шаблона документа.
	Если ОбъектXDTO.Установлено("template") Тогда
		ПолучитьДанныеШаблонаВходящегоДокумента(
			ДанныеДокумента.template,
			ОбъектXDTO.template,,
			Истина);
	КонецЕсли;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Документ.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним подписи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда
			МассивПодписей = ЗаполнитьСписокПодписей(Документ.Ссылка);
			ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним слепок.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда
			ОбъектXDTO.keyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним связи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Определим доступные поля.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ);
		
		Если ДоступныеПоля <> "" Тогда
			Для Каждого Строка Из ДоступныеПоля Цикл
				ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним ссылку на внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Документ.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним параметры хронометража.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("chronometrationSettings")) <> Неопределено Тогда
		ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним признак "Содержит оригиналы".
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
		ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним резолюции.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("resolutions")) <> Неопределено Тогда
		ЗаполнитьРезолюцииДокумента(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним номенклатуру дел.
	Если ОбъектXDTO.Установлено("caseFilesCatalog") Тогда
		ПолучитьДанныеНоменклатурыДел(ДанныеДокумента.caseFilesCatalog, ОбъектXDTO.caseFilesCatalog);
	КонецЕсли;
	
	// Заполним дела хранения документов.
	Если ОбъектXDTO.Установлено("caseFileDossier") Тогда
		ПолучитьДанныеДелаХраненияДокументов(ДанныеДокумента.caseFileDossier, ОбъектXDTO.caseFileDossier);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
	ОбъектXDTO.name = Строка(Документ.Ссылка);
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Документ - СправочникОбъект.ВходящиеДокументы - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocument - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВходящегоДокумента(Документ, ОбъектXDTO, Ошибка)
	
	НачальныйРегистрационныйНомер = Документ.РегистрационныйНомер;
	
	Блокировать = ЗначениеЗаполнено(Документ.Ссылка);
	Если Блокировать Тогда
		Документ.Заблокировать();
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Шаблон, ОбъектXDTO, "template");
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка) И ЗначениеЗаполнено(Документ.Шаблон);
	Если ЗаполнятьПоШаблону Тогда
		Документ.НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон, "НоменклатураДел");
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ВидДокумента, ОбъектXDTO, "documentType");
	
	ЗаполнитьДанныеВходящегоДокумента(Документ, ОбъектXDTO);
	
	// проверка заполнения
	ПроверятьСвязи = (ОбъектXDTO.Свойства().Получить("checkRelations") <> Неопределено)
		И ОбъектXDTO.Установлено("checkRelations") И ОбъектXDTO.checkRelations;
	ТекстСообщения = "";
	ЕстьОшибки = Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения);
	ПроверитьЗаполнениеВходящегоДокумента(Документ, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи входящего документа'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	// изменение полей по состоянию
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		ТекущееСостояние = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		НедоступныеПоля = Новый Структура;
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, НедоступныеПоля);
		
		Если ДоступныеПоля <> "" Тогда
			
			ТекущиеДанные = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
			ПолучитьДанныеВходящегоДокумента(Документ.Ссылка.ПолучитьОбъект(), ТекущиеДанные);
			
			Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
				
				Если Свойство.Имя = "status" Тогда // свойства проверяются только в разрезе их типов
					Продолжить;
				КонецЕсли;
				
				Если НедоступныеПоля.Свойство(Свойство.Имя)
						И Не ДоступныеПоля.Свойство(Свойство.Имя)
						И Не СвойстваРавны(ТекущиеДанные, ОбъектXDTO, Свойство) Тогда
					Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
					Ошибка.subject = НСтр("ru = 'Ошибка при записи входящего документа'");
					Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'"),
							Свойство.Имя,
							ТекущееСостояние);
					ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
		СообщениеОбОшибке = "";
		Если Не ПроверитьВозможностьРегистрации(Документ, СообщениеОбОшибке) Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Ошибка.description = СообщениеОбОшибке;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = ТекущийПользователь
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Документ.Записать();
		
		// Заполним рабочую группу.
		Если ЗаполнятьПоШаблону Тогда
			ЗаписатьРабочуюГруппуСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
		КонецЕсли;
		
		// состояние
		ЗаполнитьСостоянияДокумента(Документ, ОбъектXDTO, ТекущаяДата, ТекущийПользователь);
		
		// регистрация
		Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
			СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
			
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Документ.Ссылка,
				ТекущаяДата(),
				СостояниеДокумента,
				ТекущийПользователь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка // в отсутствие подходящего нумератора будет выброшено исключение
		Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
	Исключение
		Нумератор = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Нумератор) Тогда
		// изменен автоматический номер
		Если Документ.РегистрационныйНомер <> НачальныйРегистрационныйНомер Тогда
			Документ.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
			Документ.ЧисловойНомер = -1;
			Документ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Блокировать Тогда
		Документ.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВходящиеДокументы - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocument - источник данных заполнения
//
Процедура ЗаполнитьДанныеВходящегоДокумента(ДокументОбъект, ОбъектXDTO)
	
	ЗаполнитьОбщиеДанныеДокумента(ДокументОбъект, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ИсходящийНомер, ОбъектXDTO, "externalNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ИсходящаяДата, ОбъектXDTO, "externalDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Отправитель, ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Подписал, ОбъектXDTO, "signer");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Адресат, ОбъектXDTO, "addressee");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.СпособПолучения, ОбъектXDTO, "deliveryMethod");
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(ДокументОбъект, ОбъектXDTO);
	ЗаписатьДанныеФайлов(ДокументОбъект, ОбъектXDTO.files);
	
КонецПроцедуры

// Проверяет заполнение входящего документа.
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВходящиеДокументы - заполняемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ПроверятьСвязи - Булево - требуется ли проверять связи документа.
//   ЕстьОшибки - Булево - неявно возвращаемое значение, признак наличия ошибок проверки заполнения.
//
Процедура ПроверитьЗаполнениеВходящегоДокумента(ДокументОбъект, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		
		Если ПроверятьСвязи Тогда
			ПроверитьОбязательныеСвязи(ДокументОбъект, ТекстСообщения, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящийДокумент

// Получает заполненный объект XDTO, соответствующий исходящему документу
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий документ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument или DMError
//
Функция ПолучитьИсходящийДокумент(ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Документ = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ПолучитьДанныеИсходящегоДокумента(Документ, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при получении исходящего документа %1'"),
			ПолучитьНавигационнуюСсылку(Ссылка));
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает новый исходящий документ по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument или DMError
//
Функция СоздатьИсходящийДокумент(Сообщение) Экспорт
	
	Попытка
		
		Документ = Справочники.ИсходящиеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Документ, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеИсходящегоДокумента(Документ, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Документ.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
			РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Документ.Шаблон);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьИсходящийДокумент(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании исходящего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает исходящий документ по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMOutgoingDocument.
//   ВозвращатьДанныеЗаписанногоОбъекта - Булево - Истина, если после записи требуется вернуть
//     данные записанного объекта, и Ложь в противном случае.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument, заново заполненный, или DMError
//
Функция ИзменитьИсходящийДокумент(Объект, ВозвращатьДанныеЗаписанногоОбъекта = Истина) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не (ЗначениеЗаполнено(Ссылка) И СокрЛП(Ссылка.ВерсияДанных) <> "")
				И Не ВозвращатьДанныеЗаписанногоОбъекта Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НужноОбновитьПодписи = ОбработкаЗапросовXDTO.СвойствоУстановлено(Объект, "updateSignatures")
			И Объект.updateSignatures;
		ПереданаИнформацияОПодписях = ОбработкаЗапросовXDTO.СвойствоУстановлено(Объект, "signatures");
		Если ПереданаИнформацияОПодписях Или НужноОбновитьПодписи Тогда
			ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(Ссылка);
			ЧислоПодписейПосле = Объект.signatures.Количество();
			Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
				ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеИсходящегоДокумента(Документ, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если ПереданаИнформацияОПодписях Или НужноОбновитьПодписи Тогда
			Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
				ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(Объект.signatures, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ВозвращатьДанныеЗаписанногоОбъекта Тогда
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
			Возврат ПолучитьИсходящийДокумент(ОбъектИд);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при изменении исходящего документа %1'"),
			ПолучитьНавигационнуюСсылку(Ссылка));
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового исходящего документа
//
// Параметры:
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//   ДанныеЗаполнения - СправочникСсылка.ШаблоныИсходящихДокументов или Неопределено.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocument или DMError
//
Функция ПолучитьНовыйИсходящийДокумент(НаборКолонок, ДанныеЗаполнения) Экспорт
	
	Попытка
		
		Документ = Справочники.ИсходящиеДокументы.СоздатьЭлемент();
		Документ.ОбработкаЗаполнения(Неопределено, Истина);
		
		// Заполним документ по шаблону, если необходимо.
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ДанныеЗаполнения, "DMOutgoingDocumentTemplate") Тогда
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ДанныеЗаполнения.objectId);
			Если ЗначениеЗаполнено(Шаблон) Тогда
				Документ.Шаблон = Шаблон;
				ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ);
			КонецЕсли;
		КонецЕсли;
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ПолучитьДанныеИсходящегоДокумента(Документ, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового исходящего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Документ - СправочникОбъект.ИсходящиеДокументы
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocument
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//   ДляОбмена - Булево - Истина, если данные выбираются для фонового обмена с ИС.
//
Процедура ПолучитьДанныеИсходящегоДокумента(Документ, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь)
	
	ДанныеДокумента = Новый Структура;
	
	ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ);
	
	ДанныеДокумента.Вставить("signer", 			Документ.Подписал);
	ДанныеДокумента.Вставить("author", 			Документ.Подготовил);
	
	// Заполним получателя данными первой строки табличной части.
	Если Документ.Получатели.Количество() > 0 Тогда 
		ПерваяСтрока = Документ.Получатели[0];
		ДанныеДокумента.Вставить("externalNumber", 	ПерваяСтрока.ВходящийНомер);
		ДанныеДокумента.Вставить("externalDate", 	ПерваяСтрока.ВходящаяДата);
		ДанныеДокумента.Вставить("correspondent", 	ПерваяСтрока.Получатель);
		ДанныеДокумента.Вставить("addressee", 		ПерваяСтрока.Адресат);
		ДанныеДокумента.Вставить("deliveryMethod", 	ПерваяСтрока.СпособОтправки);
		ДанныеДокумента.Вставить("sent", 			ПерваяСтрока.Отправлен);
		ДанныеДокумента.Вставить("sendDate", 		ПерваяСтрока.ДатаОтправки);
	КонецЕсли;
	
	// Заполним состояние.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		СостояниеДокумента = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		
		ИменаСостояний = Новый Структура("Согласование, Утверждение, Регистрация, Рассмотрение, Исполнение");
		
		ИменСвойствПоСостояниям = Новый Соответствие;
		ИменСвойствПоСостояниям.Вставить("Согласование", "statusApproval");
		ИменСвойствПоСостояниям.Вставить("Утверждение", "statusConfirmation");
		ИменСвойствПоСостояниям.Вставить("Регистрация", "statusRegistration");
		ИменСвойствПоСостояниям.Вставить("Рассмотрение", "statusConsideration");
		ИменСвойствПоСостояниям.Вставить("Исполнение", "statusPerformance");
		
		Для Каждого Строка Из ИменаСостояний Цикл
			ИмяСостояния = Строка.Ключ;
			СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
			ДанныеДокумента.Вставить(ИменСвойствПоСостояниям.Получить(ИмяСостояния), СтруктураСостояния.Состояние);
		КонецЦикла;
		
	Иначе // пустой
		
		СостояниеДокумента = Перечисления.СостоянияДокументов.Проект;
		ДанныеДокумента.Вставить("statusRegistration", Перечисления.СостоянияДокументов.Проект);
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("status", СостояниеДокумента);
	
	// Заполним настройки вида документа.
	ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	ДанныеДокумента.Вставить("documentTypeEnabled", Константы.ИспользоватьВидыИсходящихДокументов.Получить());
	
	// Разберем набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	Для Каждого Реквизит Из ДанныеДокумента Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты вида документа.
	Если ОбъектXDTO.Установлено("documentType") Тогда
		ПолучитьДанныеВидаДокумента(ОбъектXDTO.documentType, ДанныеДокумента.documentType);
	КонецЕсли;
	
	// Заполним реквизиты шаблона документа.
	Если ОбъектXDTO.Установлено("template") Тогда
		ПолучитьДанныеШаблонаИсходящегоДокумента(
			ДанныеДокумента.template,
			ОбъектXDTO.template,,
			Истина);
	КонецЕсли;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда 
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Документ.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
		
		ФайлыШаблона = Новый ТаблицаЗначений;
		ФайлыШаблона.Колонки.Добавить("Наименование");
		ФайлыШаблона.Колонки.Добавить("ПолныйПуть");
		ФайлыШаблона.Колонки.Добавить("Расширение");
		ФайлыШаблона.Колонки.Добавить("ШаблонОснованиеДляСоздания");
		ФайлыШаблона.Колонки.Добавить("ДобавленИзШаблона");
		
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(Документ.Шаблон, ФайлыШаблона, Ложь);
		
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона);
		
	КонецЕсли;
	
	// Заполним подписи.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда 
			МассивПодписей = ЗаполнитьСписокПодписей(Документ.Ссылка);
			ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним слепок документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда 
			ОбъектXDTO.keyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним связи документа.
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда 
		Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда 
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним доступные и недоступные поля.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда 
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ);
		Если ДоступныеПоля <> "" Тогда 
			Для Каждого Строка Из ДоступныеПоля Цикл
				ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним ссылку на внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(
			Документ.Ссылка,
			ОбъектXDTO);
	КонецЕсли;
	
	// Заполним параметры хронометража.
	Если (ПолучатьВсеКолонки И Не ДляОбмена) Или Колонки.Найти(НРег("chronometrationSettings")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним признак "Содержит оригиналы".
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
		ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ.Ссылка);
	КонецЕсли;
	
	// Заполним визы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("visas")) <> Неопределено Тогда
		ЗаполнитьВизыДокумента(ОбъектXDTO, Документ.Ссылка, Документ.Шаблон);
	КонецЕсли;
	
	// Заполним номенклатуру дел.
	Если ОбъектXDTO.Установлено("caseFilesCatalog") Тогда
		ПолучитьДанныеНоменклатурыДел(ДанныеДокумента.caseFilesCatalog, ОбъектXDTO.caseFilesCatalog);
	КонецЕсли;
	
	// Заполним дела хранения документов.
	Если ОбъектXDTO.Установлено("caseFileDossier") Тогда
		ПолучитьДанныеДелаХраненияДокументов(ДанныеДокумента.caseFileDossier, ОбъектXDTO.caseFileDossier);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
	ОбъектXDTO.name = Строка(Документ.Ссылка);
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Документ - СправочникОбъект.ИсходящиеДокументы - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocument - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеИсходящегоДокумента(Документ, ОбъектXDTO, Ошибка)
	
	НачальныйРегистрационныйНомер = Документ.РегистрационныйНомер;
	
	Блокировать = ЗначениеЗаполнено(Документ.Ссылка);
	Если Блокировать Тогда
		Документ.Заблокировать();
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Шаблон, ОбъектXDTO, "template");
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка)
		И ЗначениеЗаполнено(Документ.Шаблон);
	Если ЗаполнятьПоШаблону Тогда
		Документ.НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон, "НоменклатураДел");
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ВидДокумента, ОбъектXDTO, "documentType");
	
	ЗаполнитьДанныеИсходящегоДокумента(Документ, ОбъектXDTO);
	
	// проверка заполнения
	ПроверятьСвязи = (ОбъектXDTO.Свойства().Получить("checkRelations") <> Неопределено)
		И ОбъектXDTO.Установлено("checkRelations") И ОбъектXDTO.checkRelations;
	ТекстСообщения = "";
	ЕстьОшибки = Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения);
	ПроверитьЗаполнениеИсходящегоДокумента(Документ, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи исходящего документа'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	// изменение полей по состоянию
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		ТекущееСостояние = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеДокумента(Документ.Ссылка);
		НедоступныеПоля = Новый Структура;
		ДоступныеПоля = ПолучитьДоступностьПолейПоСостоянию(Документ, НедоступныеПоля);
		
		Если ДоступныеПоля <> "" Тогда
			
			ТекущиеДанные = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
			ПолучитьДанныеИсходящегоДокумента(Документ.Ссылка.ПолучитьОбъект(), ТекущиеДанные);
			
			Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
				
				Если Свойство.Имя = "status" Тогда // свойства проверяются только в разрезе их типов
					Продолжить;
				КонецЕсли;
				
				Если НедоступныеПоля.Свойство(Свойство.Имя)
						И Не ДоступныеПоля.Свойство(Свойство.Имя)
						И Не СвойстваРавны(ТекущиеДанные, ОбъектXDTO, Свойство) Тогда
					Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
					Ошибка.subject = НСтр("ru = 'Ошибка при записи исходящего документа'");
					Ошибка.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'"),
							Свойство.Имя,
							ТекущееСостояние);
					ДобавитьНавигационнуюСсылку(Ошибка.description, Документ, ОбъектXDTO);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
		СообщениеОбОшибке = "";
		Если Не ПроверитьВозможностьРегистрации(Документ, СообщениеОбОшибке) Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Ошибка.description = СообщениеОбОшибке;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = ТекущийПользователь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Документ.Записать();
		
		// Заполним визы и рабочую группу.
		Если ЗаполнятьПоШаблону Тогда
			ЗаписатьВизыСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
			ЗаписатьРабочуюГруппуСогласноШаблону(Документ.Ссылка, Документ.Шаблон);
		КонецЕсли;
		
		// состояние
		ЗаполнитьСостоянияДокумента(Документ, ОбъектXDTO, ТекущаяДата, ТекущийПользователь);
		
		// регистрация
		Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
			СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
			
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Документ.Ссылка,
				ТекущаяДата(),
				СостояниеДокумента,
				ТекущийПользователь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка // в отсутствие подходящего нумератора будет выброшено исключение
		Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
	Исключение
		Нумератор = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Нумератор) Тогда
		// изменен автоматический номер
		Если Документ.РегистрационныйНомер <> НачальныйРегистрационныйНомер Тогда
			Документ.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
			Документ.ЧисловойНомер = -1;
			Документ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Блокировать Тогда
		Документ.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ИсходящиеДокументы - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocument - источник данных заполнения
//
Процедура ЗаполнитьДанныеИсходящегоДокумента(ДокументОбъект, ОбъектXDTO)
	
	ЗаполнитьОбщиеДанныеДокумента(ДокументОбъект, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Подписал, ОбъектXDTO, "signer");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Подготовил, ОбъектXDTO, "author");
	
	Получатель = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Получатель, ОбъектXDTO, "correspondent");
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		Если ДокументОбъект.Получатели.Количество() = 0 Тогда
			ДокументОбъект.Получатели.Добавить();
		КонецЕсли;
		
		ДокументОбъект.Получатели[0].Получатель = Получатель;
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Получатели[0].ВходящийНомер, ОбъектXDTO, "externalNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Получатели[0].ВходящаяДата, ОбъектXDTO, "externalDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Получатели[0].Адресат, ОбъектXDTO, "addressee");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Получатели[0].Отправлен, ОбъектXDTO, "sent");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Получатели[0].ДатаОтправки, ОбъектXDTO, "sendDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Получатели[0].СпособОтправки, ОбъектXDTO, "deliveryMethod");
	Иначе
		ДокументОбъект.Получатели.Очистить();
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(ДокументОбъект, ОбъектXDTO);
	ЗаписатьДанныеФайлов(ДокументОбъект, ОбъектXDTO.files);
	
КонецПроцедуры

// Проверяет заполнение исходящего документа.
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ИсходящиеДокументы - заполняемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ПроверятьСвязи - Булево - требуется ли проверять связи документа.
//   ЕстьОшибки - Булево - неявно возвращаемое значение, признак наличия ошибок проверки заполнения.
//
Процедура ПроверитьЗаполнениеИсходящегоДокумента(ДокументОбъект, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки) Экспорт
	
	Если ДокументОбъект.Получатели.Количество() = 0 Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Поле ""Получатель"" не заполнено'") + Символы.ПС;
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Получатели Цикл
		Если Не ЗначениеЗаполнено(Строка.Получатель) Тогда
			ТекстСообщения = ТекстСообщения
				+ СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""Получатели""'"), Строка.НомерСтроки)
				+ Символы.ПС;
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		
		Если ПроверятьСвязи Тогда
			ПроверитьОбязательныеСвязи(ДокументОбъект, ТекстСообщения, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблонВнутреннегоДокумента

// Получает заполненный объект XDTO, соответствующий шаблону внутреннего документа.
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий шаблон.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentTemplate или DMError.
//
Функция ПолучитьШаблонВнутреннегоДокумента(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Шаблон = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocumentTemplate");
		ПолучитьДанныеШаблонаВнутреннегоДокумента(Шаблон, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении шаблона внутреннего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Шаблон - СправочникОбъект.ШаблоныВнутреннихДокументов, СправочникСсылка.ШаблоныВнутреннихДокументов.
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentTemplate.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//   ИгнорируяПрава - Булево - Истина, если данные следует получить в привилегированном режиме.
//
Процедура ПолучитьДанныеШаблонаВнутреннегоДокумента(Шаблон, ОбъектXDTO,
	НаборКолонок = Неопределено, ИгнорируяПрава = Ложь)
	
	Если ИгнорируяПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, ШаблонОбъект);
	
	ДанныеШаблона.Вставить("folder", 			ШаблонОбъект.Папка);
	ДанныеШаблона.Вставить("correspondent", 	ШаблонОбъект.Контрагент);
	ДанныеШаблона.Вставить("contactPerson", 	ШаблонОбъект.КонтактноеЛицо);
	ДанныеШаблона.Вставить("cashFlowItem", 		ШаблонОбъект.СтатьяДвиженияДенежныхСредств);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеШаблона Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ШаблонОбъект.Ссылка);
	ОбъектXDTO.name = ШаблонОбъект.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблонВходящегоДокумента

// Получает заполненный объект XDTO, соответствующий шаблону входящего документа.
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий шаблон.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMIncomingDocumentTemplate или DMError.
//
Функция ПолучитьШаблонВходящегоДокумента(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Шаблон = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocumentTemplate");
		ПолучитьДанныеШаблонаВходящегоДокумента(Шаблон, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении шаблона входящего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Шаблон - СправочникОбъект.ШаблоныВходящихДокументов, СправочникСсылка.ШаблоныВходящихДокументов.
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocumentTemplate.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//   ИгнорируяПрава - Булево - Истина, если данные следует получить в привилегированном режиме.
//
Процедура ПолучитьДанныеШаблонаВходящегоДокумента(Шаблон, ОбъектXDTO,
	НаборКолонок = Неопределено, ИгнорируяПрава = Ложь)
	
	Если ИгнорируяПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныВходящихДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, ШаблонОбъект);
	
	ДанныеШаблона.Вставить("correspondent", 	ШаблонОбъект.Отправитель);
	ДанныеШаблона.Вставить("signer", 			ШаблонОбъект.Подписал);
	ДанныеШаблона.Вставить("addressee", 		ШаблонОбъект.Адресат);
	ДанныеШаблона.Вставить("deliveryMethod", 	ШаблонОбъект.СпособПолучения);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл 
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеШаблона Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ШаблонОбъект.Ссылка);
	ОбъектXDTO.name = ШаблонОбъект.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблонИсходящегоДокумента

// Получает заполненный объект XDTO, соответствующий шаблону исходящего документа.
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий шаблон.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOutgoingDocumentTemplate или DMError.
//
Функция ПолучитьШаблонИсходящегоДокумента(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Шаблон = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocumentTemplate");
		ПолучитьДанныеШаблонаИсходящегоДокумента(Шаблон, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении шаблона исходящего документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Шаблон - СправочникОбъект.ШаблоныИсходящихДокументов, СправочникСсылка.ШаблоныИсходящихДокументов.
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocumentTemplate.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//   ИгнорируяПрава - Булево - Истина, если данные следует получить в привилегированном режиме.
//
Процедура ПолучитьДанныеШаблонаИсходящегоДокумента(Шаблон, ОбъектXDTO,
	НаборКолонок = Неопределено, ИгнорируяПрава = Ложь)
	
	Если ИгнорируяПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, ШаблонОбъект);
	
	ДанныеШаблона.Вставить("signer", ШаблонОбъект.Подписал);
	
	// Данные табличной части "Получатели".
	Если ШаблонОбъект.Получатели.Количество() > 0 Тогда 
		ПерваяСтрока = ШаблонОбъект.Получатели[0];
		ДанныеШаблона.Вставить("correspondent", 	ПерваяСтрока.Получатель);
		ДанныеШаблона.Вставить("addressee", 		ПерваяСтрока.Адресат);
		ДанныеШаблона.Вставить("deliveryMethod", 	ПерваяСтрока.СпособОтправки);
	КонецЕсли;
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним простые реквизиты.
	Для Каждого Реквизит Из ДанныеШаблона Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ШаблонОбъект.Ссылка);
	ОбъектXDTO.name = ШаблонОбъект.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область Контрагент

// Получает заполненный объект XDTO, соответствующий контрагенту
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующего контрагента
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent или DMError
//
Функция ПолучитьКонтрагента(ОбъектИд, НаборКолонок = Неопределено, ДляОбмена = Ложь) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Контрагент = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
		ПолучитьДанныеКонтрагента(Контрагент, Объект, НаборКолонок, ДляОбмена);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении контрагента'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает нового контрагента по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent или DMError
//
Функция СоздатьКонтрагента(Сообщение) Экспорт
	
	Попытка
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Заполнить(Неопределено);
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Контрагент, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтрагента(Контрагент, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Контрагент.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент.Ссылка);
		Возврат ПолучитьКонтрагента(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании контрагента'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает контрагента по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMCorrespondent.
//   ВозвращатьДанныеЗаписанногоОбъекта - Булево - Истина, если после записи требуется вернуть
//     данные записанного объекта, и Ложь в противном случае.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent, заново заполненный, или DMError
//
Функция ИзменитьКонтрагента(Объект, ВозвращатьДанныеЗаписанногоОбъекта = Истина) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Если Не (ЗначениеЗаполнено(Ссылка) И СокрЛП(Ссылка.ВерсияДанных) <> "")
				И Не ВозвращатьДанныеЗаписанногоОбъекта Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Контрагент = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтрагента(Контрагент, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если ВозвращатьДанныеЗаписанногоОбъекта Тогда
			ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент.Ссылка);
			Возврат ПолучитьКонтрагента(ОбъектИд);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении контрагента'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового контрагента
//
// Параметры:
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCorrespondent или DMError
//
Функция ПолучитьНовогоКонтрагента(НаборКолонок) Экспорт
	
	Попытка
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Заполнить(Неопределено);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
		ПолучитьДанныеКонтрагента(Контрагент, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового контрагента'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Контрагент - СправочникОбъект.Контрагенты
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеКонтрагента(Контрагент, ОбъектXDTO, НаборКолонок = Неопределено, ДляОбмена = Ложь)
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("deletionMark", Контрагент.ПометкаУдаления);
	
	ДанныеКонтрагента.Вставить("inn", Контрагент.ИНН);
	ДанныеКонтрагента.Вставить("kpp", Контрагент.КПП);
	ДанныеКонтрагента.Вставить("okpo", Контрагент.КодПоОКПО);
	ДанныеКонтрагента.Вставить("registrationNumber", Контрагент.РегистрационныйНомер);
	ДанныеКонтрагента.Вставить("fullName", Контрагент.НаименованиеПолное);
	ДанныеКонтрагента.Вставить("comment", Контрагент.Комментарий);
	
	ДанныеКонтрагента.Вставить("privatePerson", Контрагент.ФизЛицо);
	ДанныеКонтрагента.Вставить("legalPrivatePerson", Контрагент.ЮрФизЛицо);
	ДанныеКонтрагента.Вставить("responsible", Контрагент.Ответственный);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	Для Каждого Реквизит Из ДанныеКонтрагента Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним файлы.
	Если ЗначениеЗаполнено(Контрагент.Ссылка) Тогда 
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено Тогда
			
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена);
			
			ВключатьПомеченныеНаУдаление = 
				(Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				Контрагент.Ссылка, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, НаборКолонокФайлов);
			
		КонецЕсли;
	КонецЕсли;
	
	// Контактная информация.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("contactInformation")) <> Неопределено Тогда
		ПолучитьКонтактнуюИнформациюОбъектаДО(Контрагент, ОбъектXDTO);
	КонецЕсли;
	
	// Дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Контрагент, ОбъектXDTO);
	КонецЕсли;
	
	// Внешний объект.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Контрагент.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент.Ссылка);
	ОбъектXDTO.name = Контрагент.Наименование;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Контрагент - СправочникОбъект.Контрагенты - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеКонтрагента(Контрагент, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Контрагент.Ссылка);
	Если Блокировать Тогда
		Контрагент.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеКонтрагента(Контрагент, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Контрагент, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи контрагента'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Контрагент, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	Контрагент.Записать();
	
	Если Блокировать Тогда
		Контрагент.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Контрагент - СправочникОбъект.Контрагенты - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent - источник данных заполнения
//
Процедура ЗаполнитьДанныеКонтрагента(Контрагент, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ПометкаУдаления, ОбъектXDTO, "deletionMark");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.КодПоОКПО, ОбъектXDTO, "okpo");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.РегистрационныйНомер, ОбъектXDTO,
		"registrationNumber");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.НаименованиеПолное, ОбъектXDTO, "fullName");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.Комментарий,  ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ФизЛицо, ОбъектXDTO, "privatePerson");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.Ответственный, ОбъектXDTO, "responsible");
	
	Если ОбъектXDTO.Установлено("legalPrivatePerson") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ЮрФизЛицо, ОбъектXDTO, "legalPrivatePerson");
	Иначе
		Если Не ЗначениеЗаполнено(Контрагент.ЮрФизЛицо) Тогда
			Если ЗначениеЗаполнено(Контрагент.ИНН) Тогда
				Если СтрДлина(Контрагент.ИНН) = 12 Тогда
					Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				Иначе
					Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			Иначе
				Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(Контрагент, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Контрагент, ОбъектXDTO);
	
КонецПроцедуры

// Находит подходящего или создает нового контрагента по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагенты - найденный или созданный контрагент
//
Функция НайтиСоздатьКонтрагента(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Контрагенты.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
			ОбъектДО = Справочники.Контрагенты.СоздатьЭлемент();
			ОбъектДО.Заполнить(Неопределено);
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "Контрагенты");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеКонтрагента(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеКонтрагента(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		
		Возврат ОбъектДО.Ссылка;
		
	КонецЕсли;
	
	// стандартный поиск
	Наименование = "";
	ИНН = "";
	КПП = "";
	РегистрационныйНомер = "";
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РегистрационныйНомер, ОбъектXDTO, "registrationNumber");
	
	Если Наименование = "" Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено наименование контрагента.'");
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН <> """"
		|	И &КПП <> """"
		|	И Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	1
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН = """"
		|	И &РегистрационныйНомер <> """"
		|	И Контрагенты.РегистрационныйНомер = &РегистрационныйНомер
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН <> """"
		|	И (&КПП = """"
		|			ИЛИ Контрагенты.КПП = """")
		|	И Контрагенты.ИНН = &ИНН
		|	И Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	3
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&КПП <> """"
		|	И (&ИНН = """"
		|			ИЛИ Контрагенты.ИНН = """")
		|	И Контрагенты.КПП = &КПП
		|	И Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	4
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН <> """"
		|	И (&КПП = """"
		|			ИЛИ Контрагенты.КПП = """")
		|	И Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	5
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(&ИНН = """"
		|			ИЛИ Контрагенты.ИНН = """")
		|	И (&КПП = """"
		|			ИЛИ Контрагенты.КПП = """")
		|	И Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбъектДО = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.Контрагенты.СоздатьЭлемент();
		ОбъектДО.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеКонтрагента(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Организация

// Получает заполненный объект XDTO, соответствующий организации
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую организацию
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOrganization или DMError
//
Функция ПолучитьОрганизацию(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Организация = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOrganization");
		ПолучитьДанныеОрганизации(Организация, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = РедакцииКонфигурацииКлиентСервер.ОшибкаПолученияОрганизации();
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Организация - СправочникОбъект.Организации
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеОрганизации(Организация, ОбъектXDTO, НаборКолонок = Неопределено)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("inn", Организация.ИНН);
	ДанныеОрганизации.Вставить("kpp", Организация.КПП);
	ДанныеОрганизации.Вставить("okpo", Организация.КодПоОКПО);
	ДанныеОрганизации.Вставить("fullName", Организация.НаименованиеПолное);
	ДанныеОрганизации.Вставить("comment", Организация.Комментарий);
	ДанныеОрганизации.Вставить("prefix", Организация.Префикс);
	ДанныеОрганизации.Вставить("legalPrivatePerson", Организация.ЮрФизЛицо);
	ДанныеОрганизации.Вставить("VATpayer", Организация.ПлательщикНДС);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеОрганизации Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация.Ссылка);
	ОбъектXDTO.name = Организация.Наименование;
	
КонецПроцедуры

// Создает новую организацию по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOrganization или DMError
//
Функция СоздатьОрганизацию(Сообщение) Экспорт
	
	Попытка
		
		Организация = Справочники.Организации.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Организация, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеОрганизации(Организация, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Организация.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация.Ссылка);
		Возврат ПолучитьОрганизацию(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = РедакцииКонфигурацииКлиентСервер.ОшибкаСозданияОрганизации();
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает организацию по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMOrganization 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMOrganization, заново заполненный, или DMError
//
Функция ИзменитьОрганизацию(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Организация = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеОрганизации(Организация, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация.Ссылка);
		Возврат ПолучитьОрганизацию(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = РедакцииКонфигурацииКлиентСервер.ОшибкаИзмененияОрганизации();
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Организация - СправочникОбъект.Организации - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеОрганизации(Организация, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Организация.Ссылка);
	Если Блокировать Тогда
		Организация.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеОрганизации(Организация, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Организация, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = РедакцииКонфигурацииКлиентСервер.ОшибкаЗаписиОрганизации();
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Организация.Записать();
	
	Если Блокировать Тогда
		Организация.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Организация - СправочникОбъект.Организации - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization - источник данных заполнения
//
Процедура ЗаполнитьДанныеОрганизации(Организация, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.КодПоОКПО, ОбъектXDTO, "okpo");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.Префикс, ОбъектXDTO, "prefix");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.ПлательщикНДС, ОбъектXDTO, "VATpayer");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.НаименованиеПолное, ОбъектXDTO, "fullName");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.Комментарий, ОбъектXDTO, "comment");
	
	Если ОбъектXDTO.Установлено("legalPrivatePerson") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.ЮрФизЛицо, ОбъектXDTO, "legalPrivatePerson");
	Иначе
		Если Не ЗначениеЗаполнено(Организация.ЮрФизЛицо) Тогда
			Если ЗначениеЗаполнено(Организация.ИНН) Тогда
				Если СтрДлина(Организация.ИНН) = 12 Тогда
					Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				Иначе
					Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			Иначе
				Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит подходящую или создает новую организацию по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - найденная или созданная организация
//
Функция НайтиСоздатьОрганизацию(ОбъектXDTO) Экспорт
	
	ВнешнийID = ОбъектXDTO.externalObject.id;
	ВнешнийТип = ОбъектXDTO.externalObject.type;
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ВнешнийID) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Организации.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
			ОбъектДО = Справочники.Организации.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	// синхронизация по ID
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СсылкаНаОбъектДО
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Организации)
		|	И ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта И (ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта ИЛИ ТипВнешнегоОбъекта = """")";
	
	Запрос.УстановитьПараметр("ИДВнешнегоОбъекта", ВнешнийID);
	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ВнешнийТип);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаДО = Выборка.СсылкаНаОбъектДО;
		
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеОрганизации(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		
		Возврат ОбъектДО.Ссылка;
		
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеОрганизации(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		
		Возврат ОбъектДО.Ссылка;
		
	КонецЕсли;
	
	// стандартный поиск
	Наименование = "";
	ИНН = "";
	КПП = "";
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КПП, ОбъектXDTO, "kpp");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатПустой = Истина;
	Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
		Запрос.Текст = ТекстЗапроса + " ГДЕ ИНН = &ИНН И КПП = &КПП ";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой И ЗначениеЗаполнено(ИНН) Тогда
		Запрос.Текст = ТекстЗапроса + " ГДЕ ИНН = &ИНН И Наименование = &Наименование ";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой Тогда
		Запрос.Текст = ТекстЗапроса + " ГДЕ Наименование = &Наименование ";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	Если РезультатПустой Тогда
		ОбъектДО = Справочники.Организации.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбъектДО = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеОрганизации(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ФизическоеЛицо

// Получает заполненный объект XDTO, соответствующий физическому лицу
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее физлицо
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPrivatePerson или DMError
//
Функция ПолучитьФизическоеЛицо(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ФизЛицо = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPrivatePerson");
		ПолучитьДанныеФизическогоЛица(ФизЛицо, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении физического лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   ФизЛицо - СправочникОбъект.ФизическиеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMPrivatePerson
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO, НаборКолонок = Неопределено)
	
	ДанныеФизЛица = Новый Структура;
	ДанныеФизЛица.Вставить("birthDay", ФизЛицо.ДатаРождения);
	ДанныеФизЛица.Вставить("comment",  ФизЛицо.Комментарий);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеФизЛица Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФизЛицо.Ссылка);
	ОбъектXDTO.name = ФизЛицо.Наименование;
	
КонецПроцедуры

// Создает новое физическое лицо по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPrivatePerson или DMError
//
Функция СоздатьФизическоеЛицо(Сообщение) Экспорт
	
	Попытка
		
		ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ФизЛицо, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеФизическогоЛица(ФизЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, ФизЛицо.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФизЛицо.Ссылка);
		Возврат ПолучитьФизическоеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании физического лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает физическое лицо по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMPrivatePerson 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMPrivatePerson, заново заполненный, или DMError
//
Функция ИзменитьФизическоеЛицо(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		ФизЛицо = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеФизическогоЛица(ФизЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ФизЛицо.Ссылка);
		Возврат ПолучитьФизическоеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении физического лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ФизЛицо - СправочникОбъект.ФизическиеЛица - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMPrivatePerson - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO, Ошибка)
	
	ФизЛицо.Заблокировать();
	ЗаполнитьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ФизЛицо, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи физического лица'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, ФизЛицо, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	ФизЛицо.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ФизЛицо - СправочникОбъект.ФизическиеЛица - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMPrivatePerson - источник данных заполнения
//
Процедура ЗаполнитьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.ДатаРождения, ОбъектXDTO, "birthDay");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.Комментарий,  ОбъектXDTO, "comment");
	
КонецПроцедуры

// Находит подходящее или создает новое физическое лицо по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMOrganization
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - найденное или созданное физическое лицо
//
Функция НайтиСоздатьФизическоеЛицо(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
			ОбъектДО = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ФизическиеЛица");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеФизическогоЛица(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеФизическогоЛица(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область КонтактноеЛицо

// Получает заполненный объект XDTO, соответствующий контактному лицу
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее контактное лицо
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson или DMError
//
Функция ПолучитьКонтактноеЛицо(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		КонтактноеЛицо = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactPerson");
		ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении контактного лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает новое контактное лицо по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson или DMError
//
Функция СоздатьКонтактноеЛицо(Сообщение) Экспорт
	
	Попытка
		
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Заполнить(Неопределено);
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(КонтактноеЛицо, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтактногоЛица(КонтактноеЛицо, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, КонтактноеЛицо.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(КонтактноеЛицо.Ссылка);
		Возврат ПолучитьКонтактноеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании контактного лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает контактное лицо по объекту XDTO
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMContactPerson 
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson, заново заполненный, или DMError
//
Функция ИзменитьКонтактноеЛицо(Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		КонтактноеЛицо = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеКонтактногоЛица(КонтактноеЛицо, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(КонтактноеЛицо.Ссылка);
		Возврат ПолучитьКонтактноеЛицо(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении контактного лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Получает объект XDTO для нового контактного лица
// 
// Параметры:
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactPerson или DMError
//
Функция ПолучитьНовоеКонтактноеЛицо(НаборКолонок) Экспорт
	
	Попытка
		
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Заполнить(Неопределено);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactPerson");
		ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового контактного лица'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеКонтактногоЛица = Новый Структура;
	ДанныеКонтактногоЛица.Вставить("correspondent", КонтактноеЛицо.Владелец);
	ДанныеКонтактногоЛица.Вставить("position", 		КонтактноеЛицо.Должность);
	ДанныеКонтактногоЛица.Вставить("comment",  		КонтактноеЛицо.Комментарий);
	ДанныеКонтактногоЛица.Вставить("privatePerson", КонтактноеЛицо.ФизЛицо);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеКонтактногоЛица Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// контактная информация
	Если НаборКолонок = Неопределено Или Колонки.Найти(НРег("contactInformation")) <> Неопределено Тогда 
		ПолучитьКонтактнуюИнформациюОбъектаДО(КонтактноеЛицо, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(КонтактноеЛицо.Ссылка);
	ОбъектXDTO.name = КонтактноеЛицо.Наименование;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO, Ошибка) 
	
	Если Не КонтактноеЛицо.ЭтоНовый() Тогда
		КонтактноеЛицо.Заблокировать();
	КонецЕсли;
	ЗаполнитьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(КонтактноеЛицо, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи контактного лица'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, КонтактноеЛицо, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	КонтактноеЛицо.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson - источник данных заполнения
//
Процедура ЗаполнитьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Владелец, ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Должность, ОбъектXDTO, "position");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.ФизЛицо, ОбъектXDTO, "privatePerson");
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(КонтактноеЛицо, ОбъектXDTO);
	
КонецПроцедуры

// Находит подходящее или создает новое контактное лицо по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMContactPerson
//
// Возвращаемое значение:
//   СправочникСсылка.КонтактныеЛица - найденное или созданное контактное лицо
//
Функция НайтиСоздатьКонтактноеЛицо(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.КонтактныеЛица.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.КонтактныеЛица.СоздатьЭлемент();
			ОбъектДО.Заполнить(Неопределено);
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "КонтактныеЛица");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеКонтактногоЛица(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.КонтактныеЛица.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.КонтактныеЛица.СоздатьЭлемент();
		ОбъектДО.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеКонтактногоЛица(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Пользователь

// Получает заполненный объект XDTO, соответствующий пользователю
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующего пользователя
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser или DMError
//
Функция ПолучитьПользователя(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Пользователь = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
		ПолучитьДанныеПользователя(Пользователь, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении пользователя'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Пользователь - СправочникОбъект.Пользователи
//   ОбъектXDTO - ОбъектXDTO типа DMUser
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеПользователя(Пользователь, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("privatePerson", Пользователь.ФизЛицо);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеПользователя Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Пользователь.Ссылка);
	ОбъектXDTO.name = Пользователь.Наименование;
	
КонецПроцедуры

// Создает нового пользователя по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser или DMError
//
Функция СоздатьПользователя(Сообщение) Экспорт
	
	Попытка
		
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Пользователь, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПользователя(Пользователь, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ПользователиСлужебный.ОбновитьСоставыГруппПользователей(Справочники.РабочиеГруппы.ВсеПользователи);
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Пользователь.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Пользователь.Ссылка);
		Возврат ПолучитьПользователя(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании пользователя'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает пользователя по объекту XDTO
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMUser
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser, заново заполненный, или DMError
//
Функция ИзменитьПользователя(Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Пользователь = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПользователя(Пользователь, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Пользователь.Ссылка);
		Возврат ПолучитьПользователя(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении пользователя'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Пользователь - СправочникОбъект.Пользователи - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMUser - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеПользователя(Пользователь, ОбъектXDTO, Ошибка) 
	
	Пользователь.Заблокировать();
	ЗаполнитьДанныеПользователя(Пользователь, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Пользователь, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи пользователя'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Пользователь, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	Пользователь.Записать();
	
	СвязатьПользователяСПодразделением(Пользователь, ОбъектXDTO);
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Пользователь - СправочникОбъект.Пользователи - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMUser - источник данных заполнения
//
Процедура ЗаполнитьДанныеПользователя(Пользователь, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Пользователь.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Пользователь.ФизЛицо, ОбъектXDTO, "privatePerson");
	
КонецПроцедуры

// Находит подходящего или создает нового пользователя по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMUser
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи - найденный или созданный пользователь
//
Функция НайтиСоздатьПользователя(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Пользователи.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
			ОбъектДО = Справочники.Пользователи.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ОбъектДО.ФизЛицо, ОбъектXDTO, "privatePerson");
			ОбъектДО.Записать();
			СвязатьПользователяСПодразделением(ОбъектДО, ОбъектXDTO);
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "Пользователи");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПользователя(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Пользователи.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.Пользователи.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПользователя(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	ОбъектДО.Разблокировать();
	
	СвязатьПользователяСПодразделением(ОбъектДО, ОбъектXDTO);
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Связывает пользователя с подразделением, указанным в свойствах объекта XDTO
//
// Параметры:
//   ОбъектДО - СправочникСсылка.Пользователи, СправочникОбъект.Пользователи
//   ОбъектXDTO - ОбъектXDTO типа DMUser
//
Процедура СвязатьПользователяСПодразделением(ОбъектДО, ОбъектXDTO)
	
	Подразделение = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Подразделение, ОбъектXDTO, "subdivision");
	Если ЗначениеЗаполнено(Подразделение) Тогда
		МенеджерЗаписи = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = ОбъектДО.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Пользователь = ОбъектДО.Ссылка;
		МенеджерЗаписи.Подразделение = Подразделение;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Валюта

// Получает заполненный объект XDTO, соответствующий валюте
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую валюту
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCurrency или DMError
//
Функция ПолучитьВалюту(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Валюта = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCurrency");
		ПолучитьДанныеВалюты(Валюта, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении валюты'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеВалюты(Валюта, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеВалюты = Новый Структура;
	ДанныеВалюты.Вставить("code", 	  Валюта.Код);
	ДанныеВалюты.Вставить("fullName", Валюта.НаименованиеПолное);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеВалюты Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Валюта.Ссылка);
	ОбъектXDTO.name = Валюта.Наименование;
	
КонецПроцедуры

// Создает новую валюту по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCurrency или DMError
//
Функция СоздатьВалюту(Сообщение) Экспорт 
	
	Попытка 
		
		Валюта = Справочники.Валюты.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Валюта, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВалюты(Валюта, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Валюта.Ссылка);
		КонецЕсли;
		
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Валюта.Ссылка);
		Возврат ПолучитьВалюту(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании валюты'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает валюту по объекту XDTO
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMCurrency
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCurrency, заново заполненный, или DMError
//
Функция ИзменитьВалюту(Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Валюта = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВалюты(Валюта, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Валюта.Ссылка);
		Возврат ПолучитьВалюту(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении валюты'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВалюты(Валюта, ОбъектXDTO, Ошибка) 
	
	Валюта.Заблокировать();
	ЗаполнитьДанныеВалюты(Валюта, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Валюта, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи валюты'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Валюта, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	Валюта.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency - источник данных заполнения
//
Процедура ЗаполнитьДанныеВалюты(Валюта, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Валюта.Код, ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Валюта.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Валюта.НаименованиеПолное, ОбъектXDTO, "fullName");
	
КонецПроцедуры

// Находит подходящую или создает новую валюту по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCurrency
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - найденная или созданная валюта
//
Функция НайтиСоздатьВалюту(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Валюты.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.Валюты.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "Валюты");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВалюты(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.Валюты.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.Валюты.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВалюты(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Банк

// Получает заполненный объект XDTO, соответствующий банку.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий банк
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBank или DMError
//
Функция ПолучитьБанк(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Банк = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBank");
		ПолучитьДанныеБанка(Банк, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении банка'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Банк - СправочникОбъект.КлассификаторБанков
//   ОбъектXDTO - ОбъектXDTO типа DMBank
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеБанка(Банк, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеБанка = Новый Структура;
	ДанныеБанка.Вставить("BIC", Банк.Код);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеБанка Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Банк.Ссылка);
	ОбъектXDTO.name = Банк.Наименование;
	
КонецПроцедуры

// Создает новый банк по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBank или DMError
//
Функция СоздатьБанк(Сообщение) Экспорт
	
	Попытка
		
		Банк = Справочники.КлассификаторБанков.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Банк, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеБанка(Банк, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Банк.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Банк.Ссылка);
		Возврат ПолучитьБанк(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании банка'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает банк по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBank
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBank, заново заполненный, или DMError
//
Функция ИзменитьБанк(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Банк = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеБанка(Банк, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Банк.Ссылка);
		Возврат ПолучитьБанк(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении банка'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Банк - СправочникОбъект.КлассификаторБанков - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMBank - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеБанка(Банк, ОбъектXDTO, Ошибка)
	
	Банк.Заблокировать();
	ЗаполнитьДанныеБанка(Банк, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Банк, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи банка'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Банк, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	Банк.Записать();
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Банк - СправочникОбъект.КлассификаторБанков - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMBank - источник данных заполнения
//
Процедура ЗаполнитьДанныеБанка(Банк, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк.Код, ОбъектXDTO, "BIC");
	
КонецПроцедуры

// Находит подходящий или создает новый банк по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMBank
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторБанков - найденный или созданный банк
//
Функция НайтиСоздатьБанк(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Код = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Код, ОбъектXDTO, "BIC");
		Если ЗначениеЗаполнено(Код) Тогда
			СсылкаДО = Справочники.КлассификаторБанков.НайтиПоКоду(Код, Истина);
			Если ЗначениеЗаполнено(СсылкаДО) Тогда
				Возврат СсылкаДО;
			КонецЕсли;
		КонецЕсли;
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.КлассификаторБанков.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.КлассификаторБанков.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Код = Код;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
		
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "КлассификаторБанков");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеБанка(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Код = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Код, ОбъектXDTO, "BIC");
		Если ЗначениеЗаполнено(Код) Тогда
			СсылкаДО = Справочники.КлассификаторБанков.НайтиПоКоду(Код, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
			Наименование = "";
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
			СсылкаДО = Справочники.КлассификаторБанков.НайтиПоНаименованию(Наименование, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.КлассификаторБанков.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеБанка(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область БанковскийСчет

// Получает заполненный объект XDTO, соответствующий банковскому счету.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий банковский счет.
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBankAccount или DMError
//
Функция ПолучитьБанковскийСчет(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		БанковскийСчет = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBankAccount");
		ПолучитьДанныеБанковскогоСчета(БанковскийСчет, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении банковского счета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   БанковскийСчет - СправочникОбъект.БанковскиеСчета
//   ОбъектXDTO - ОбъектXDTO типа DMBankAccount
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеБанковскогоСчета(БанковскийСчет, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеБанковскогоСчета = Новый Структура;
	ДанныеБанковскогоСчета.Вставить("number", БанковскийСчет.НомерСчета);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеБанковскогоСчета Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(БанковскийСчет.Ссылка);
	ОбъектXDTO.name = БанковскийСчет.Наименование;
	
КонецПроцедуры

// Создает новый банковский счет по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBankAccount или DMError
//
Функция СоздатьБанковскийСчет(Сообщение) Экспорт
	
	Попытка
		
		БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(БанковскийСчет, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеБанковскогоСчета(БанковскийСчет, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, БанковскийСчет.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(БанковскийСчет.Ссылка);
		Возврат ПолучитьБанковскийСчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании банковского счета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает банк по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBankAccount
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBankAccount, заново заполненный, или DMError
//
Функция ИзменитьБанковскийСчет(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		БанковскийСчет = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеБанковскогоСчета(БанковскийСчет, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(БанковскийСчет.Ссылка);
		Возврат ПолучитьБанковскийСчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении банковского счета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   БанковскийСчет - СправочникОбъект.БанковскиеСчета - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMBankAccount - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеБанковскогоСчета(БанковскийСчет, ОбъектXDTO, Ошибка)
	
	БанковскийСчет.Заблокировать();
	ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(БанковскийСчет, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи банковского счета'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, БанковскийСчет, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	БанковскийСчет.Записать();
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   БанковскийСчет - СправочникОбъект.БанковскиеСчета - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMBankAccount - источник данных заполнения
//
Процедура ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.НомерСчета, ОбъектXDTO, "number");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.Владелец, ОбъектXDTO, "owner");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.Банк, ОбъектXDTO, "bank");
	
КонецПроцедуры

// Находит подходящий или создает новый банк по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMBankAccount
//
// Возвращаемое значение:
//   СправочникСсылка.БанковскиеСчета - найденный или созданный банк
//
Функция НайтиСоздатьБанковскийСчет(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Владелец = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Владелец, ОбъектXDTO, "owner");
		
		Банк = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк, ОбъектXDTO, "bank");
		
		НомерСчета = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НомерСчета, ОбъектXDTO, "number");
		
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	БанковскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.НомерСчета = &НомерСчета");
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			Если ЗначениеЗаполнено(Банк) Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И БанковскиеСчета.Банк = &Банк";
				Запрос.УстановитьПараметр("Банк", Банк);
			КонецЕсли;
			Если ЗначениеЗаполнено(Владелец) Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И БанковскиеСчета.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец", Владелец);
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СсылкаДО = Выборка.Ссылка;
				Возврат СсылкаДО;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "БанковскиеСчета");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеБанковскогоСчета(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Владелец = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Владелец, ОбъектXDTO, "owner");
		
		Банк = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк, ОбъектXDTO, "bank");
		
		НомерСчета = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НомерСчета, ОбъектXDTO, "number");
		
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	БанковскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.НомерСчета = &НомерСчета");
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			Если ЗначениеЗаполнено(Банк) Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И БанковскиеСчета.Банк = &Банк";
				Запрос.УстановитьПараметр("Банк", Банк);
			КонецЕсли;
			Если ЗначениеЗаполнено(Владелец) Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И БанковскиеСчета.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец", Владелец);
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СсылкаДО = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.БанковскиеСчета.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеБанковскогоСчета(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Подразделение

// Получает заполненный объект XDTO, соответствующий подразделению 
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее подразделение
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSubdivision или DMError
//
Функция ПолучитьПодразделение(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Подразделение = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSubdivision");
		ПолучитьДанныеПодразделения(Подразделение, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении подразделения'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Подразделение - СправочникОбъект.СтруктураПредприятия
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеПодразделения(Подразделение, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт 
	
	ДанныеПодразделения = Новый Структура;
	ДанныеПодразделения.Вставить("head", Подразделение.Руководитель);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеПодразделения Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подразделение.Ссылка);
	ОбъектXDTO.name = Подразделение.Наименование;
	
КонецПроцедуры

// Создает новое подразделение по объекту XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSubdivision или DMError
//
Функция СоздатьПодразделение(Сообщение) Экспорт 
	
	Попытка 
		
		Подразделение = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Подразделение, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПодразделения(Подразделение, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Подразделение.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подразделение.Ссылка);
		Возврат ПолучитьПодразделение(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании подразделения'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает подразделение по объекту XDTO
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMSubdivision
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSubdivision, заново заполненный, или DMError
//
Функция ИзменитьПодразделение(Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Подразделение = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПодразделения(Подразделение, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подразделение.Ссылка);
		Возврат ПолучитьПодразделение(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении подразделения'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Подразделение - СправочникОбъект.Подразделения - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеПодразделения(Подразделение, ОбъектXDTO, Ошибка)
	
	Подразделение.Заблокировать();
	ЗаполнитьДанныеПодразделения(Подразделение, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Подразделение, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи подразделения'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Подразделение, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	Подразделение.Записать();
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Подразделение - СправочникОбъект.Подразделения - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision - источник данных заполнения
//
Процедура ЗаполнитьДанныеПодразделения(Подразделение, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Подразделение.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Подразделение.Руководитель, ОбъектXDTO, "head");
	
КонецПроцедуры

// Находит подходящее или создает новое подразделение по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMSubdivision
//
// Возвращаемое значение:
//   СправочникСсылка.Подразделения - найденная или созданная подразделение
//
Функция НайтиСоздатьПодразделение(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "СтруктураПредприятия");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПодразделения(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПодразделения(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ЕдиницаИзмерения

// Получает заполненный объект XDTO, соответствующий единице измерения.
// 
// Параметры:
//   ObjectId - ОбъектXDTO типа ObjectId, описывающий существующую единицу измерения.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeasurementUnit или DMError.
//
Функция ПолучитьЕдиницуИзмерения(ObjectId, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Объект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ObjectId).ПолучитьОбъект();
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeasurementUnit");
		ПолучитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO, НаборКолонок);
		
	Исключение
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		ОбъектXDTO.subject = НСтр("ru = 'Ошибка при получении единицы измерения'");
		ОбъектXDTO.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ОбъектXDTO;
		
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Объект - СправочникОбъект.КлассификаторЕдиницИзмерения.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO, 
	НаборКолонок = Неопределено) Экспорт 
	
	Данные = Новый Структура;
	Данные.Вставить("fullName", Объект.НаименованиеПолное);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из Данные Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
	ОбъектXDTO.name = Объект.Наименование;
	
КонецПроцедуры

// Создает новую единицу измерения по объекту XDTO.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeasurementUnit или DMError.
//
Функция СоздатьЕдиницуИзмерения(Сообщение) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка
		
		ОбъектXDTO = Сообщение.object;
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
		
		Если Не ЗаписатьДанныеЕдиницыИзмерения(
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			
			Возврат Ошибка;
			
		КонецЕсли;
		
		Если ОбъектXDTO.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				ОбъектXDTO.externalObject.id, 
				ОбъектXDTO.externalObject.type,
				Объект.Ссылка);
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕдиницуИзмерения(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при создании единицы измерения'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает единицу измерения по объекту XDTO.
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMMeasurementUnit, заново заполненный, или DMError.
//
Функция ИзменитьЕдиницуИзмерения(ОбъектXDTO) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Не ЗаписатьДанныеЕдиницыИзмерения(
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕдиницуИзмерения(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении единицы измерения'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает единицу измерения Документооборота по данным объекта XDTO.
//
// Параметры:
//   Объект - СправочникОбъект.КлассификаторЕдиницИзмерения - заполняемый и записываемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit - объект-источник данных.
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки.
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO, Ошибка)
	
	Объект.Заблокировать();
	ЗаполнитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO);
	
	// Проверим заполнение.
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи единицы измерения'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Объект, ОбъектXDTO);
		Возврат Ложь;
	Иначе
		Объект.Записать();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Заполняет единицу измерения Документооборота по данным объекта XDTO.
//
// Параметры:
//   Объект - СправочникОбъект.КлассификаторЕдиницИзмерения - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit - объект-источник данных.
//
Процедура ЗаполнитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.НаименованиеПолное, ОбъектXDTO, "fullName");
	
КонецПроцедуры

// Находит подходящую или создает новую единицу измерения по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторЕдиницИзмерения - найденная или созданная единица измерения.
//
Функция НайтиСоздатьЕдиницуИзмерения(ОбъектXDTO) Экспорт
	
	Ссылка = Неопределено;
	
	// Синхронизация по наименованию.
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			Объект.Наименование = Наименование;
			Объект.Записать();
			Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Синхронизация по идентификатору объекта ИС.
	Ссылка = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "КлассификаторЕдиницИзмерения");
	Если Ссылка <> Неопределено Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		ЗаполнитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO);
		Если Объект.Модифицированность() Тогда
			Объект.Записать();
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Переопределяемый поиск.
	Ссылка = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// Стандартный поиск.
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
	КонецЕсли;
	
	Объект.Заблокировать();
	ЗаполнитьДанныеЕдиницыИзмерения(Объект, ОбъектXDTO);
	
	Если Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

// Получает заполненный объект XDTO, соответствующий номенклатуре.
// 
// Параметры:
//   ObjectId - ОбъектXDTO типа ObjectId, описывающий существующую номенклатуру.
//   НаборКолонок - Массив - массив имен реквизитов к получению, или
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMProduct или DMError.
//
Функция ПолучитьНоменклатуру(ObjectId, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Объект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ObjectId).ПолучитьОбъект();
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProduct");
		ПолучитьДанныеНоменклатуры(Объект, ОбъектXDTO, НаборКолонок);
		
	Исключение
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		ОбъектXDTO.subject = НСтр("ru = 'Ошибка при получении номенклатуры'");
		ОбъектXDTO.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ОбъектXDTO;
		
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Объект - СправочникОбъект.Номенклатура.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеНоменклатуры(Объект, ОбъектXDTO, 
	НаборКолонок = Неопределено) Экспорт 
	
	Данные = Новый Структура;
	Данные.Вставить("isFolder", Объект.ЭтоГруппа);
	Данные.Вставить("parent", Объект.Родитель);
	Если Не Объект.ЭтоГруппа Тогда
		Данные.Вставить("code", Объект.Код);
		Данные.Вставить("price", Объект.Цена);
		Данные.Вставить("measurementUnit", Объект.ЕдиницаИзмерения);
		Данные.Вставить("VATRate", Объект.СтавкаНДС);
		Данные.Вставить("article", Объект.Артикул);
	КонецЕсли;
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из Данные Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
	ОбъектXDTO.name = Объект.Наименование;
	
КонецПроцедуры

// Создает новую номенклатуру по объекту XDTO.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMProduct.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMProduct или DMError.
//
Функция СоздатьНоменклатуру(Сообщение) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка
		
		ОбъектXDTO = Сообщение.object;
		
		Если ОбъектXDTO.isFolder = Истина Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
		
		Если Не ЗаписатьДанныеНоменклатуры(
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			
			Возврат Ошибка;
			
		КонецЕсли;
		
		Если ОбъектXDTO.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				ОбъектXDTO.externalObject.id, 
				ОбъектXDTO.externalObject.type,
				Объект.Ссылка);
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьНоменклатуру(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при создании номенклатуры'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает номенклатуру по объекту XDTO.
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMProduct.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMProduct, заново заполненный, или DMError.
//
Функция ИзменитьНоменклатуру(ОбъектXDTO) Экспорт 
	
	Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Не ЗаписатьДанныеНоменклатуры(
			Объект,
			ОбъектXDTO,
			Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьНоменклатуру(ObjectID);
		
	Исключение
		
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении номенклатуры'");
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает номенклатуру Документооборота по данным объекта XDTO.
//
// Параметры:
//   Объект - СправочникОбъект.Номенклатура - заполняемый и записываемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct - объект-источник данных.
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки.
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеНоменклатуры(Объект, ОбъектXDTO, Ошибка)
	
	Объект.Заблокировать();
	ЗаполнитьДанныеНоменклатуры(Объект, ОбъектXDTO);
	
	// Проверим заполнение.
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи номенклатуры'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Объект, ОбъектXDTO);
		Возврат Ложь;
	Иначе
		Объект.Записать();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Заполняет номенклатуру Документооборота по данным объекта XDTO.
//
// Параметры:
//   Объект - СправочникОбъект.Номенклатура - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO типа DMProduct - объект-источник данных.
//
Процедура ЗаполнитьДанныеНоменклатуры(Объект, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Родитель, ОбъектXDTO, "parent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Код, ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Наименование, ОбъектXDTO, "name");
	
	Если Не Объект.ЭтоГруппа Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Цена, ОбъектXDTO, "price");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ЕдиницаИзмерения, ОбъектXDTO, "measurementUnit");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СтавкаНДС, ОбъектXDTO, "VATRate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Артикул, ОбъектXDTO, "article");
	КонецЕсли;
	
КонецПроцедуры

// Находит подходящую или создает новую номенклатуру по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMProduct.
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура - найденная или созданная номенклатура.
//
Функция НайтиСоздатьНоменклатуру(ОбъектXDTO) Экспорт
	
	Ссылка = Неопределено;
	
	// Синхронизация по наименованию.
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
			Объект.Наименование = Наименование;
			Объект.Записать();
			Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Синхронизация по идентификатору объекта ИС.
	Ссылка = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "Номенклатура");
	Если Ссылка <> Неопределено Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		ЗаполнитьДанныеНоменклатуры(Объект, ОбъектXDTO);
		Если Объект.Модифицированность() Тогда
			Объект.Записать();
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	// Переопределяемый поиск.
	Ссылка = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// Стандартный поиск.
	
	Если Не ЗначениеЗаполнено(Ссылка)
		И ОбъектXDTO.isFolder <> Истина Тогда 
		Артикул = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Артикул, ОбъектXDTO, "article");
		Если ЗначениеЗаполнено(Артикул) Тогда
			Ссылка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Ссылка = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Если ОбъектXDTO.isFolder = Истина Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Объект, ОбъектXDTO);
	КонецЕсли;
	
	Объект.Заблокировать();
	ЗаполнитьДанныеНоменклатуры(Объект, ОбъектXDTO);
	
	Если Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Получает заполненный объект XDTO, соответствующий виду контактной информации 
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий вид КИ
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMContactInformationKind или DMError
//
Функция ПолучитьВидКонтактнойИнформации(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Валюта = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformationKind");
		ПолучитьДанныеВидаКонтактнойИнформации(Валюта, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении вида контактной информации'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   ВидКонтактнойИнформации - СправочникОбъект.ВидыКонтактнойИнформации
//   ОбъектXDTO - ОбъектXDTO типа DMContactInformationKind
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеВидаКонтактнойИнформации(ВидКонтактнойИнформации, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеВидаКИ = Новый Структура;
	ДанныеВидаКИ.Вставить("type", 	  ВидКонтактнойИнформации.Тип);
	ДанныеВидаКИ.Вставить("mandatory", ВидКонтактнойИнформации.ОбязательноеЗаполнение);
	ДанныеВидаКИ.Вставить("parent", ВидКонтактнойИнформации.Родитель);
	ДанныеВидаКИ.Вставить("predefinedName", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВидКонтактнойИнформации.Ссылка, "ИмяПредопределенныхДанных"));
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеВидаКИ Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ВидКонтактнойИнформации.Ссылка);
	ОбъектXDTO.name = ВидКонтактнойИнформации.Наименование;
	
КонецПроцедуры

// Дополняет объект XDTO данными табличной части Контактная информация объекта ДО
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Контрагенты, СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent, DMContactPerson 
//
Процедура ПолучитьКонтактнуюИнформациюОбъектаДО(ОбъектДО, ОбъектXDTO) Экспорт
	
	ОбъектXDTO.contactInformation = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformation");
		
	Для каждого СтрокаКонтактнаяИнформация из ОбъектДО.КонтактнаяИнформация Цикл
		
		ОбъектКИ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformationItem");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектКИ, "type", СтрокаКонтактнаяИнформация.Тип);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектКИ, "kind", СтрокаКонтактнаяИнформация.Вид);
		Если ЗначениеЗаполнено(СтрокаКонтактнаяИнформация.Вид) Тогда
			ПолучитьДанныеВидаКонтактнойИнформации(СтрокаКонтактнаяИнформация.Вид, ОбъектКИ.kind);
		КонецЕсли;
		
		ОбъектКИ.description = СтрокаКонтактнаяИнформация.Представление;
		ОбъектКИ.fieldValues = СтрокаКонтактнаяИнформация.ЗначенияПолей;
		ОбъектКИ.country = СтрокаКонтактнаяИнформация.Страна;
		ОбъектКИ.territory = СтрокаКонтактнаяИнформация.Регион;
		ОбъектКИ.city = СтрокаКонтактнаяИнформация.Город;
		ОбъектКИ.email = СтрокаКонтактнаяИнформация.АдресЭП;
		ОбъектКИ.serverDomainName = СтрокаКонтактнаяИнформация.ДоменноеИмяСервера;
		ОбъектКИ.phoneNumber = СтрокаКонтактнаяИнформация.НомерТелефона;
		ОбъектКИ.localPhoneNumber = СтрокаКонтактнаяИнформация.НомерТелефонаБезКодов;
		
		ОбъектXDTO.contactInformation.items.Добавить(ОбъектКИ);
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит в табличную часть Контактная информация данные из свойства contactInformation объекта XDTO
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Контрагенты, СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO типа DMCorrespondent, DMContactPerson 
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектаДО(ОбъектДО, ОбъектXDTO) Экспорт
	
	Если Не ОбъектXDTO.Установлено("contactInformation") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДО.КонтактнаяИнформация.Очистить();
	
	Для каждого contactInformationItem из ОбъектXDTO.contactInformation.items Цикл
		
		СтрокаКИ = ОбъектДО.КонтактнаяИнформация.Добавить();
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.Тип, contactInformationItem, "type");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.Вид, contactInformationItem, "kind");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.Представление, contactInformationItem, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.ЗначенияПолей, contactInformationItem, "fieldValues");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.Страна, contactInformationItem, "country");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.Регион, contactInformationItem, "territory");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.Город, contactInformationItem, "city");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.АдресЭП, contactInformationItem, "email");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.ДоменноеИмяСервера, contactInformationItem, "serverDomainName");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.НомерТелефона, contactInformationItem, "phoneNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаКИ.НомерТелефонаБезКодов, contactInformationItem, "localPhoneNumber");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВидДокумента

// Создает новый вид документа по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DM<...>DocumentType или DMError
//
Функция СоздатьВидДокумента(Сообщение) Экспорт
	
	Попытка
		
		Объект = Сообщение.object;
		ТипОбъекта = Объект.objectId.type;
		Если ТипОбъекта = "DMInternalDocumentType" Тогда
			ВидСправочника = "ВидыВнутреннихДокументов";
		ИначеЕсли ТипОбъекта = "DMIncomingDocumentType" Тогда
			ВидСправочника = "ВидыВходящихДокументов";
		Иначе
			ВидСправочника = "ВидыИсходящихДокументов";
		КонецЕсли;
		ВидДокумента = Справочники[ВидСправочника].СоздатьЭлемент();
		ВидДокумента.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ВидДокумента, Объект);
		
		Если ТипОбъекта = "DMInternalDocumentType" Тогда
			ВидДокумента.ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
			ВидДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеВидаДокумента(ВидДокумента, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.automaticNumeration = Истина Тогда // запишем настройки автонумерации
			ЗаписьНастроекНумерации = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			Если ТипОбъекта = "DMInternalDocumentType" Тогда
				ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
				ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
			ИначеЕсли ТипОбъекта = "DMIncomingDocumentType" Тогда
				ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
				ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
			Иначе
				ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
				ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
			КонецЕсли;
			ЗаписьНастроекНумерации.ВидДокумента = ВидДокумента.Ссылка;
			ЗаписьНастроекНумерации.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			ЗаписьНастроекНумерации.Нумеровать = Нумерация.СформироватьПолеНумеровать(
				ЗаписьНастроекНумерации.СпособНумерации, ЗаписьНастроекНумерации.Нумератор);
			ЗаписьНастроекНумерации.Записать();
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, ВидДокумента.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ВидДокумента.Ссылка);
		Возврат ПолучитьВидДокумента(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании вида документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий виду документа
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий вид документа
//
// Возвращаемое значение:
//   ОбъектXDTO типа DM<>DocumentType
//
Функция ПолучитьВидДокумента(ОбъектИд) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка);
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект(ИмяТипа);
		Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		ПолучитьДанныеВидаДокумента(Объект, Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении вида документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DM<...>DocumentType.
//   ВидДокумента - СправочникСсылка.Виды<...>Документов, СправочникОбъект.Виды<...>Документов.
//
Процедура ПолучитьДанныеВидаДокумента(ОбъектXDTO, ВидДокумента)
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		ВидДокументаОбъект = ВидДокумента.ПолучитьОбъект();
	Иначе
		ВидДокументаОбъект = ВидДокумента;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"performanceDateEnabled", ВидДокументаОбъект.ИспользоватьСрокИсполнения);
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"sumEnabled", ВидДокументаОбъект.УчитыватьСуммуДокумента);
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"templateRequired", ВидДокументаОбъект.ЗапретитьСозданиеДокументовНеПоШаблону);
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"accountingForCaseFilesEnabled", ВидДокументаОбъект.ВключенУчетПоНоменклатуреДел);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиНумерации.СпособНумерации
		|ИЗ
		|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
		|ГДЕ
		|	НастройкиНумерации.ВидДокумента = &ВидДокумента";
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		АвтоНумерация = Ложь;
	Иначе
		АвтоНумерация = Результат.Выгрузить()[0].СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "automaticNumeration", АвтоНумерация);
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMIncomingDocumentType") Тогда
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMOutgoingDocumentType") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"externalNumberEnabled", ВидДокументаОбъект.УчитыватьВходящийНомерИДатуПолучателя);
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMInternalDocumentType") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"addresseeEnabled", ВидДокументаОбъект.ВестиУчетПоАдресатам);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"cashFlowDetailsEnabled", ВидДокументаОбъект.ВестиУчетПоСтатьямДДС);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"correspondentEnabled", ВидДокументаОбъект.ВестиУчетПоКонтрагентам);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"durationEnabled", ВидДокументаОбъект.УчитыватьСрокДействия);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"isAPaymentRequest", ВидДокументаОбъект.ЯвляетсяЗаявкойНаОплату);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"organizationEnabled", ВидДокументаОбъект.ВестиУчетПоОрганизациям);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"partiesEnabled", ВидДокументаОбъект.ВестиУчетСторон);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"productRowsEnabled", ВидДокументаОбъект.ВестиУчетТоваровИУслуг);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"signatureOption", ВидДокументаОбъект.ВариантПодписания);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"useConfirmation", ВидДокументаОбъект.ИспользоватьУтверждение);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"useSigningByManager", ВидДокументаОбъект.ИспользоватьПодписание);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ВидДокумента - СправочникОбъект.Виды<...>Документов - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DM<...>DocumentType - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеВидаДокумента(ВидДокумента, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(ВидДокумента.Ссылка);
	Если Блокировать Тогда
		ВидДокумента.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеВидаДокумента(ВидДокумента, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ВидДокумента, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи вида документа'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, ВидДокумента, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	ВидДокумента.Записать();
	
	Если Блокировать Тогда
		ВидДокумента.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ВидДокумента - СправочникОбъект.Виды<...>Документов - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DM<...>DocumentType - источник данных заполнения
//
Процедура ЗаполнитьДанныеВидаДокумента(ВидДокумента, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.Наименование, ОбъектXDTO, "name");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.УчитыватьСуммуДокумента, ОбъектXDTO, "sumEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ИспользоватьСрокИсполнения, ОбъектXDTO, "performanceDateEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ЗапретитьСозданиеДокументовНеПоШаблону, ОбъектXDTO, "templateRequired");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВключенУчетПоНоменклатуреДел, ОбъектXDTO, "accountingForCaseFilesEnabled");
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMInternalDocumentType") Тогда
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ВестиУчетПоСтатьямДДС, ОбъектXDTO, "cashFlowDetailsEnabled");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ВестиУчетПоКонтрагентам, ОбъектXDTO, "correspondentEnabled");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.УчитыватьСрокДействия, ОбъектXDTO, "durationEnabled");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ЯвляетсяЗаявкойНаОплату, ОбъектXDTO, "isAPaymentRequest");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ВестиУчетПоОрганизациям, ОбъектXDTO, "organizationEnabled");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ВестиУчетСторон, ОбъектXDTO, "partiesEnabled");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ВестиУчетТоваровИУслуг, ОбъектXDTO, "productRowsEnabled");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ВариантПодписания, ОбъектXDTO, "signatureOption");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ИспользоватьУтверждение, ОбъектXDTO, "useConfirmation");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ВидДокумента.ИспользоватьПодписание, ОбъектXDTO, "useSigningByManager");
		
	КонецЕсли;
	
КонецПроцедуры

// Находит подходящий или создает новый вид входящего документа по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMIncomingDocumentType
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыВходящихДокументов - найденный или созданный вид входящего документа
//
Функция НайтиСоздатьВидВходящегоДокумента(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВходящихДокументов.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
			ОбъектДО = Справочники.ВидыВходящихДокументов.СоздатьЭлемент();
			ОбъектДО.Заполнить(Неопределено);
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ВидыВходящихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВходящихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.ВидыВходящихДокументов.СоздатьЭлемент();
		ОбъектДО.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый вид исходящего документа по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMOutgoingDocumentType
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыИсходящихДокументов - найденный или созданный вид исходящего документа
//
Функция НайтиСоздатьВидИсходящегоДокумента(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыИсходящихДокументов.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВидыИсходящихДокументов.СоздатьЭлемент();
			ОбъектДО.Заполнить(Неопределено);
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ВидыИсходящихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыИсходящихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.ВидыИсходящихДокументов.СоздатьЭлемент();
		ОбъектДО.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый вид внутреннего документа по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentType
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыВнутреннихДокументов - найденный или созданный вид внутреннего документа
//
Функция НайтиСоздатьВидВнутреннегоДокумента(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВидыВнутреннихДокументов.СоздатьЭлемент();
			ОбъектДО.Заполнить(Неопределено);
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ВидыВнутреннихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.ВидыВнутреннихДокументов.СоздатьЭлемент();
		ОбъектДО.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПапкаВнутреннихДокументов

// Создает новую папку внутренних документов по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentFolder или DMError
//
Функция СоздатьПапкуВнутреннихДокументов(Сообщение) Экспорт
	
	Попытка
		
		Папка = Справочники.ПапкиВнутреннихДокументов.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(Папка, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПапкиВнутреннихДокументов(Папка, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда 
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, Папка.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Папка.Ссылка);
		Возврат ПолучитьПапкуВнутреннихДокументов(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании папки внутренних документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий папке внутренних документов
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую папку
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentFolder или DMError
//
Функция ПолучитьПапкуВнутреннихДокументов(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		Папка = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocumentFolder");
		ПолучитьДанныеПапкиВнутреннихДокументов(Папка, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении папки внутренних документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   Папка - СправочникОбъект.ПапкиВнутреннихДокументов
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеПапкиВнутреннихДокументов(Папка, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	ДанныеПапки = Новый Структура;
	ДанныеПапки.Вставить("description", 	  Папка.Описание);
	ДанныеПапки.Вставить("responsible", 	  Папка.Ответственный);
	ДанныеПапки.Вставить("creationDate", 	  Папка.ДатаСоздания);
	
	ДанныеПапки.Вставить("parent", Папка.Родитель);
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда 
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	Для Каждого Реквизит Из ДанныеПапки Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда 
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// внешний объект
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(Папка.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Папка.Ссылка);
	ОбъектXDTO.name = Папка.Наименование;
	
КонецПроцедуры

// Изменяет и записывает папку внутренних документов по объекту XDTO.
// 
// Параметры:
//   Объект - ОбъектXDTO типа DMInternalDocumentFolder.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMInternalDocumentFolder, заново заполненный, или DMError.
//
Функция ИзменитьПапкуВнутреннихДокументов(Объект) Экспорт 
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		Папка = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеПапкиВнутреннихДокументов(Папка, Объект, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Папка.Ссылка);
		Возврат ПолучитьПапкуВнутреннихДокументов(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении папки внутренних документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Папка - СправочникОбъект.ПапкиВнутреннихДокументов - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеПапкиВнутреннихДокументов(Папка, ОбъектXDTO, Ошибка) 
	
	Блокировать = ЗначениеЗаполнено(Папка.Ссылка);
	Если Блокировать Тогда 
		Папка.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеПапкиВнутреннихДокументов(Папка, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Папка, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи папки внутренних документов'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, Папка, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	
	Папка.Записать();
	
	Если Блокировать Тогда 
		Папка.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   Папка - СправочникОбъект.ПапкиВнутреннихДокументов - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder - источник данных заполнения
//
Процедура ЗаполнитьДанныеПапкиВнутреннихДокументов(Папка, ОбъектXDTO) 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Описание, ОбъектXDTO, "description");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Ответственный, ОбъектXDTO, "responsible");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.ДатаСоздания, ОбъектXDTO, "creationDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Родитель, ОбъектXDTO, "parent");
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыДокумента

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ГрифДоступа - СправочникОбъект.ГрифыДоступа - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMAccessLevel - источник данных заполнения
//
Процедура ЗаполнитьДанныеГрифаДоступа(ГрифаДоступа, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ГрифаДоступа.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ВопросДеятельности - СправочникОбъект.ВидыДеятельности - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMActivityMatter - источник данных заполнения
//
Процедура ЗаполнитьДанныеВопросаДеятельности(ВопросДеятельности, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ВопросДеятельности.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   СпособДоставки - СправочникОбъект.СпособыДоставки - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMDeliveryMethod - источник данных заполнения
//
Процедура ЗаполнитьДанныеСпособаДоставки(СпособДоставки, ОбъектXDTO) Экспорт 
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СпособДоставки.Наименование, ОбъектXDTO, "name");
	
КонецПроцедуры

// Находит подходящий или создает новый гриф доступа по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMAccessLevel
//
// Возвращаемое значение:
//   СправочникСсылка.ГрифыДоступа - найденный или созданный элемент справочника
//
Функция НайтиСоздатьГрифДоступа(ОбъектXDTO) Экспорт 
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ГрифыДоступа.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ГрифыДоступа.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ГрифыДоступа");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеГрифаДоступа(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ГрифыДоступа.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ГрифыДоступа.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеГрифаДоступа(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый вопрос деятельности по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMActivityMatter
//
// Возвращаемое значение:
//   СправочникСсылка.ВопросыДеятельности - найденный или созданный элемент справочника
//
Функция НайтиСоздатьВопросДеятельности(ОбъектXDTO) Экспорт 
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ВопросыДеятельности.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ВопросыДеятельности.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ВопросыДеятельности");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеВопросаДеятельности(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "Name");
		СсылкаДО = Справочники.ВопросыДеятельности.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ВопросыДеятельности.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	
	ЗаполнитьДанныеВопросаДеятельности(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящий или создает новый способ доставки по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMDeliveryMethod
//
// Возвращаемое значение:
//   СправочникСсылка.СпособыДоставки - найденный или созданный элемент справочника
//
Функция НайтиСоздатьСпособДоставки(ОбъектXDTO) Экспорт 
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СпособыДоставки.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.СпособыДоставки.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "СпособыДоставки");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеСпособаДоставки(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
		
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.СпособыДоставки.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.СпособыДоставки.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеСпособаДоставки(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Находит подходящую или создает новую папку внутренних документов по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMInternalDocumentFolder
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиВнутреннихДокументов - найденный или созданный элемент справочника
//
Функция НайтиСоздатьПапкуВнутреннихДокументов(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	// синхронизация по наименованию
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда 
		
		Наименование = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ПапкиВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина); 
		Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
			ОбъектДО = Справочники.ПапкиВнутреннихДокументов.СоздатьЭлемент();
			ОбъектДО.Наименование = Наименование;
			ОбъектДО.Записать();
			СсылкаДО = ОбъектДО.Ссылка;
		КонецЕсли;
		
		Возврат СсылкаДО;
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ПапкиВнутреннихДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеПапкиВнутреннихДокументов(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда 
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		СсылкаДО = Справочники.ПапкиВнутреннихДокументов.НайтиПоНаименованию(Наименование, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда 
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе	
		ОбъектДО = Справочники.ПапкиВнутреннихДокументов.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеПапкиВнутреннихДокументов(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СвязиДокументов

// Создает связь документов по переданному сообщению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddDocumentRelationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddDocumentRelationResponse или DMError
//
Функция СоздатьСвязьДокументов(Сообщение) Экспорт
	
	Попытка
		
		Документ = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.document.objectId);
		СвязанныйДокумент = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relatedDocument.objectId);
		
		Если Сообщение.relation.Установлено("relationType") Тогда
			
			ТипСвязи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relationType.objectId);
			
		Иначе // тип связи не указан, выберем однозначно настроенную или, в отсутствие таковой, предопределенную
			
			НастройкиСвязи = СвязиДокументов.ПолучитьНастройкиСвязи(Документ, СвязанныйДокумент);
			СтруктураПоиска = Новый Структура("Предопределенная", Ложь);
			Непредопределенные = НастройкиСвязи.НайтиСтроки(СтруктураПоиска);
			
			Если Непредопределенные.Количество() = 1 Тогда
				ТипСвязи = Непредопределенные[0].ТипСвязи;
			Иначе
				ТипСвязи = Справочники.ТипыСвязей.СодержитСсылкуНаИнтегрированныйОбъект;
			КонецЕсли;
			
		КонецЕсли;
		
		СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи);
		
		Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddDocumentRelationResponse");
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании связи документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Удаляет связь документов по переданному сообщению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRemoveDocumentRelationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMRemoveDocumentRelationResponse или DMError
//
Функция УдалитьСвязьДокументов(Сообщение) Экспорт 
	
	Попытка
		
		Документ = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.document.objectId);
		ТипСвязи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relationType.objectId);
		СвязанныйДокумент = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.relation.relatedDocument.objectId);
		
		СвязиДокументов.УдалитьСвязь(Документ, СвязанныйДокумент, ТипСвязи);
		
		Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMRemoveDocumentRelationResponse");
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при удалении связи документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Проверяет наличие обязательных связей документа.
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВнутренниеДокументы,
//                    СправочникОбъект.ВходящиеДокументы,
//                    СправочникОбъект.ИсходящиеДокументы - проверяемый документ.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ЕстьОшибки - Булево - неявно возвращаемое значение, признак наличия ошибок проверки заполнения.
//
Процедура ПроверитьОбязательныеСвязи(ДокументОбъект, ТекстСообщения, ЕстьОшибки)
	
	ОбязательныеТипыСвязей = ОбязательныеТипыСвязей(ДокументОбъект);
	ОбязательныеСвязи = ОбязательныеСвязи(ДокументОбъект, ОбязательныеТипыСвязей);
	
	Если ОбязательныеТипыСвязей.Количество() > ОбязательныеСвязи.Количество() Тогда
		
		ОбязательныеСвязиПредставление = Новый Массив;
		Для Каждого ОбязательныйТипСвязи Из ОбязательныеТипыСвязей Цикл
			НайденныеСтроки = ОбязательныеСвязи.НайтиСтроки(
				Новый Структура("СсылкаНа, ТипСвязи", ОбязательныйТипСвязи.СсылкаНа, ОбязательныйТипСвязи.ТипСвязи));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбязательныйТипСвязи.СсылкаНа) Тогда
				СсылкаНа = Строка(ОбязательныйТипСвязи.СсылкаНа);
			Иначе
				СсылкаНа = Строка(ТипЗнч(ОбязательныйТипСвязи.СсылкаНа));
			КонецЕсли;
			ОбязательныеСвязиПредставление.Добавить(СтрШаблон(НСтр("ru = 'тип связи ""%1"", ссылка на %2 ""%3""'"),
				Строка(ОбязательныйТипСвязи.ТипСвязи),
				НРег(ТипЗнч(ОбязательныйТипСвязи.СсылкаНа)),
				СсылкаНа));
		КонецЦикла;
		
		Если ОбязательныеСвязиПредставление.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения
				+ СтрШаблон(НСтр("ru = 'Не указаны обязательные связи:
										|%1'"), СтрСоединить(ОбязательныеСвязиПредставление, ";" + Символы.ПС))
				+ Символы.ПС;
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает обязательные типы связей документа.
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВнутренниеДокументы,
//                    СправочникОбъект.ВходящиеДокументы,
//                    СправочникОбъект.ИсходящиеДокументы - проверяемый документ.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ТипСвязи - СправочникСсылка.ТипыСвязей - тип связи.
//     * СсылкаНа - СправочникСсылка.Проекты,
//                  ДокументСсылка.ВходящееСообщениеСВД,
//                  ДокументСсылка.ИсходящееСообщениеСВД,
//                  ДокументСсылка.ВходящееПисьмо,
//                  ДокументСсылка.ИсходящееПисьмо,
//                  СправочникСсылка.ВидыВнутреннихДокументов,
//                  СправочникСсылка.Файлы,
//                  СправочникСсылка.ВходящиеДокументы,
//                  СправочникСсылка.ВнутренниеДокументы,
//                  СправочникСсылка.ВидыВходящихДокументов,
//                  СправочникСсылка.ИсходящиеДокументы,
//                  СправочникСсылка.Мероприятия,
//                  СправочникСсылка.ВидыИсходящихДокументов - ссылка на связанный объект.
//
Функция ОбязательныеТипыСвязей(ДокументОбъект)
	
	ОбязательныеТипыСвязей = Новый ТаблицаЗначений;
	ОбязательныеТипыСвязей.Колонки.Добавить("ТипСвязи", Новый ОписаниеТипов("СправочникСсылка.ТипыСвязей"));
	ОбязательныеТипыСвязей.Колонки.Добавить("СсылкаНа", Новый ОписаниеТипов(
		"СправочникСсылка.Проекты,
		|ДокументСсылка.ВходящееСообщениеСВД,
		|ДокументСсылка.ИсходящееСообщениеСВД,
		|ДокументСсылка.ВходящееПисьмо,
		|ДокументСсылка.ИсходящееПисьмо,
		|СправочникСсылка.ВидыВнутреннихДокументов,
		|СправочникСсылка.Файлы,
		|СправочникСсылка.ВходящиеДокументы,
		|СправочникСсылка.ВнутренниеДокументы,
		|СправочникСсылка.ВидыВходящихДокументов,
		|СправочникСсылка.ИсходящиеДокументы,
		|СправочникСсылка.Мероприятия,
		|СправочникСсылка.ВидыИсходящихДокументов"));
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(
			Неопределено,
			ОбязательныеТипыСвязей,
			ДокументОбъект.Ссылка,
			ДокументОбъект.ВидДокумента);
	КонецЕсли;
	
	Возврат ОбязательныеТипыСвязей;
	
КонецФункции

// Возвращает обязательные связи документа.
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.ВнутренниеДокументы,
//                    СправочникОбъект.ВходящиеДокументы,
//                    СправочникОбъект.ИсходящиеДокументы - проверяемый документ.
//   ОбязательныеТипыСвязей - см. ОбработкаЗапросовXDTOДокументы.ОбязательныеТипыСвязей
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ТипСвязи - СправочникСсылка.ТипыСвязей - тип связи.
//     * СвязанныйДокумент - Строка,
//                  СправочникСсылка.Проекты,
//                  ДокументСсылка.ВходящееПисьмо,
//                  ДокументСсылка.ИсходящееПисьмо,
//                  СправочникСсылка.Файлы,
//                  СправочникСсылка.ВходящиеДокументы,
//                  СправочникСсылка.ВнутренниеДокументы,
//                  СправочникСсылка.ИсходящиеДокументы,
//                  СправочникСсылка.Мероприятия - связанный документ.
//     * НужноЗаписать - Булево - признак необходимости записи.
//     * СсылкаНа - СправочникСсылка.Проекты,
//                  ДокументСсылка.ВходящееСообщениеСВД,
//                  ДокументСсылка.ИсходящееСообщениеСВД,
//                  ДокументСсылка.ВходящееПисьмо,
//                  ДокументСсылка.ИсходящееПисьмо,
//                  СправочникСсылка.ВидыВнутреннихДокументов,
//                  СправочникСсылка.Файлы,
//                  СправочникСсылка.ВходящиеДокументы,
//                  СправочникСсылка.ВнутренниеДокументы,
//                  СправочникСсылка.ВидыВходящихДокументов,
//                  СправочникСсылка.ИсходящиеДокументы,
//                  СправочникСсылка.Мероприятия,
//                  СправочникСсылка.ВидыИсходящихДокументов - ссылка на связанный объект.
//
Функция ОбязательныеСвязи(ДокументОбъект, ОбязательныеТипыСвязей)
	
	ОбязательныеСвязи = Новый ТаблицаЗначений;
	ОбязательныеСвязи.Колонки.Добавить("ТипСвязи", Новый ОписаниеТипов("СправочникСсылка.ТипыСвязей"));
	ОбязательныеСвязи.Колонки.Добавить("СвязанныйДокумент", Новый ОписаниеТипов(
		"СправочникСсылка.Проекты,
		|ДокументСсылка.ВходящееПисьмо,
		|ДокументСсылка.ИсходящееПисьмо,
		|СправочникСсылка.Файлы,
		|СправочникСсылка.ВходящиеДокументы,
		|Строка,
		|СправочникСсылка.ВнутренниеДокументы,
		|СправочникСсылка.ИсходящиеДокументы,
		|СправочникСсылка.Мероприятия"));
	ОбязательныеСвязи.Колонки.Добавить("НужноЗаписать", Новый ОписаниеТипов("Булево"));
	ОбязательныеСвязи.Колонки.Добавить("СсылкаНа", Новый ОписаниеТипов(
		"СправочникСсылка.Проекты,
		|ДокументСсылка.ВходящееСообщениеСВД,
		|ДокументСсылка.ИсходящееСообщениеСВД,
		|ДокументСсылка.ВходящееПисьмо,
		|ДокументСсылка.ИсходящееПисьмо,
		|СправочникСсылка.ВидыВнутреннихДокументов,
		|СправочникСсылка.Файлы,
		|СправочникСсылка.ВходящиеДокументы,
		|СправочникСсылка.ВнутренниеДокументы,
		|СправочникСсылка.ВидыВходящихДокументов,
		|СправочникСсылка.ИсходящиеДокументы,
		|СправочникСсылка.Мероприятия,
		|СправочникСсылка.ВидыИсходящихДокументов"));
	ОбязательныеСвязи.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(ДокументОбъект.Ссылка, ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;
	
	Возврат ОбязательныеСвязи;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедуры

// Возвращает значения реквизитов, назначаемых по умолчанию видом документа
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetDefaultValuesByDocumentTypeRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetDefaultValuesByDocumentTypeResponse или DMError
//
Функция ЗначенияРеквизитовПоУмолчанию(Сообщение) Экспорт
	
	Попытка 
		
		ВидДокумента = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.documentTypeId);
		
		Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			ЗначенияПоУмолчанию = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ИмяОбъекта = "ВнутренниеДокументы";
			ХранитсяВПапках = Истина;
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			ЗначенияПоУмолчанию = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
			ИмяОбъекта = "ВходящиеДокументы";
			ХранитсяВПапках = Ложь;
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			ЗначенияПоУмолчанию = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ИмяОбъекта = "ИсходящиеДокументы";
			ХранитсяВПапках = Ложь;
		КонецЕсли;
		
		Объект = Справочники[ИмяОбъекта].СоздатьЭлемент();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|" + ?(ХранитсяВПапках, "	Папка,", "") + "
			|	ГрифДоступа,
			|	ВопросДеятельности,
			|	Проект,
			|	1 КАК Количество
			|ИЗ
			|	Справочник.%1 КАК Документы
			|ГДЕ
			|	ВидДокумента = &ВидДокумента
			|	И ПометкаУдаления = Ложь");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяОбъекта);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда
			Для Каждого Колонка Из Результат.Колонки Цикл
				Если Колонка.Имя <> "Количество" Тогда
					ЗначенияРеквизита = Результат.Скопировать(,Колонка.Имя + ", Количество");
					ЗначенияРеквизита.Свернуть(Колонка.Имя, "Количество");
					ЗначенияРеквизита.Сортировать("Количество УБЫВ");
					Объект[Колонка.Имя] = ЗначенияРеквизита[0][Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа")
			И Не ЗначениеЗаполнено(Объект.ГрифДоступа) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	Ссылка
				|ИЗ
				|	Справочник.ГрифыДоступа
				|ГДЕ
				|	НЕ ПометкаУдаления");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Объект.ГрифДоступа = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности")
			И Не ЗначениеЗаполнено(Объект.ВопросДеятельности) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	Ссылка
				|ИЗ
				|	Справочник.ВопросыДеятельности
				|ГДЕ
				|	НЕ ПометкаУдаления");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Объект.ВопросДеятельности = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			ПолучитьДанныеВнутреннегоДокумента(Объект, ЗначенияПоУмолчанию);
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			ПолучитьДанныеВходящегоДокумента(Объект, ЗначенияПоУмолчанию);
		ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			ПолучитьДанныеИсходящегоДокумента(Объект, ЗначенияПоУмолчанию);
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetDefaultValuesByDocumentTypeResponse");
		Ответ.object = ЗначенияПоУмолчанию;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Регистрирует документ согласно сообщению
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMDocumentRegistrationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDocumentRegistrationResponse или DMError
//
Функция ЗарегистрироватьДокумент(Сообщение) Экспорт
	
	Попытка
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.document.objectId);
		Документ = Ссылка.ПолучитьОбъект();
		
		Если РольДоступна("ПолныеПрава") Тогда
			ЭтоДелопроизводитель = Истина;
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ЭтоДелопроизводитель = РольДоступна("РегистрацияВходящихДокументов");
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ЭтоДелопроизводитель = РольДоступна("РегистрацияИсходящихДокументов");
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ЭтоДелопроизводитель = РольДоступна("РегистрацияВнутреннихДокументов");
		КонецЕсли;
		
		Если Не ЭтоДелопроизводитель Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Инфо = ИнформацияОбОшибке();
			Ошибка.description = НСтр("ru = 'У вас нет прав на регистрацию документа'");
			Возврат Ошибка;
		КонецЕсли;
		
		ВидДокумента = Документ.ВидДокумента;
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Инфо = ИнформацияОбОшибке();
			Ошибка.description = НСтр("ru = 'Поле ""Вид документа"" не заполнено'");
			Возврат Ошибка;
		КонецЕсли;
		
		Попытка // в отсутствие подходящего нумератора будет выброшено исключение
			Нумератор = Нумерация.ПолучитьНумераторДокумента(Документ);
		Исключение
			Нумератор = Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Нумератор) Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Инфо = ИнформацияОбОшибке();
			Ошибка.description = НСтр("ru = 'Документ регистрируется вручную. Укажите номер и запишите документ.'");
			Возврат Ошибка;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		Если Не ПроверитьВозможностьРегистрации(Документ, СообщениеОбОшибке) Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Ошибка.description = СообщениеОбОшибке;
			Возврат Ошибка;
		КонецЕсли;
		
		Документ.Заблокировать();
		
		Если МиграцияДанныхИзВнешнихСистемСервер.РегистрацияВ1СДО30() Тогда
		
			СообщениеОбОшибке = "";
			РегДанные = МиграцияДанныхИзВнешнихСистемСервер.РегистрационныеДанныеИзДО30(
				Документ, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
				Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
				Ошибка.description = СообщениеОбОшибке;
			   Возврат Ошибка;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Документ, РегДанные);	
		
		Иначе
			Документ.ДатаРегистрации = ТекущаяДатаСеанса();
			Документ.Зарегистрировал = Пользователи.ТекущийПользователь();
			
			// числовой номер
			СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Документ);
			Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, Документ.ЧисловойНомер);
			
			// строковый номер
			ОписанияОшибок = Новый СписокЗначений;
			СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Документ);
			Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, Документ.РегистрационныйНомер, ОписанияОшибок);
		КонецЕсли;
		
		// проверим заполнение
		ТекстСообщения = "";
		Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Документ, ТекстСообщения) Тогда
			Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
			Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
			Ошибка.description = ТекстСообщения;
			Возврат Ошибка;
		КонецЕсли;
		
		Документ.Записать();
		
		// состояние
		СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка,
			Документ.ДатаРегистрации,
			СостояниеДокумента,
			Документ.Зарегистрировал);
		
		НаборКолонок = Новый Массив;
		НаборКолонок.Добавить("regDate");
		НаборКолонок.Добавить("regNumber");
		НаборКолонок.Добавить("status");
		НаборКолонок.Добавить("statusApproval");
		НаборКолонок.Добавить("statusConfirmation");
		НаборКолонок.Добавить("statusSigning");
		НаборКолонок.Добавить("statusRegistration");
		НаборКолонок.Добавить("statusConsideration");
		НаборКолонок.Добавить("statusPerformance");
		НаборКолонок.Добавить("enabledProperties");
		
		Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
			ПолучитьДанныеВходящегоДокумента(Документ, Результат, НаборКолонок);
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
			ПолучитьДанныеИсходящегоДокумента(Документ, Результат, НаборКолонок);
		ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
			ПолучитьДанныеВнутреннегоДокумента(Документ, Результат, НаборКолонок);
		КонецЕсли;
		
		Результат.registrationAvailable = ДоступнаРегистрация(Документ);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocumentRegistrationResponse");
		Ответ.document = Результат;
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при регистрации документа'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает заполненные объекты XDTO по списку
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetDocumentListRequest 
//
// Возвращаемое значение:
//    ОбъектXDTO типа DMGetDocumentListResponse или DMError
//
Функция ПолучитьДокументы(Сообщение) Экспорт 
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetDocumentListResponse");
		
		Узел = ОбработкаЗапросовXDTOКорп.УзелИнтегрированнойСистемыПоСообщению(Сообщение);
			
		Если Сообщение.externalObjects.Количество() = 1 Тогда 
			ВнешнийОбъект = Сообщение.externalObjects.Получить(0);
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СсылкаНаОбъектДО,
			|	УзелИнтегрированнойСистемы,
			|	ТипВнешнегоОбъекта,
			|	ИСТИНА КАК СвязиОбъектовИнтегрированныхСистем
			|ИЗ
			|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
			|ГДЕ
			|	СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы В(&УзлыИнтегрируемойСистемы)
			|	И ИДВнешнегоОбъекта = &ИДВнешнегоОбъекта
			|	И (ТипВнешнегоОбъекта = &ТипВнешнегоОбъекта
			|			ИЛИ СвязиОбъектовИнтегрированныхСистем.ТипВнешнегоОбъекта = """")
			|	И (ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.ВходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.ИсходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.ВнутренниеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Контрагенты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Организации)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.Валюты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(СсылкаНаОбъектДО) = ТИП(Справочник.СтруктураПредприятия)
			|	)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.ВходящиеДокументы.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.ИсходящиеДокументы.ПустаяСсылка)
			|	И СсылкаНаОбъектДО <> ЗНАЧЕНИЕ(Справочник.ВнутренниеДокументы.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	УникальныйИдентификаторИсточника,
			|	Неопределено,
			|	ТипПриемника,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
			|ГДЕ
			|	УникальныйИдентификаторПриемника = &ИДВнешнегоОбъекта
			|	И (ТипПриемника = &ТипПриемника)
			|	И (ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.ВходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.ИсходящиеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.ВнутренниеДокументы)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.Контрагенты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.Организации)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.Валюты)
			|			ИЛИ ТИПЗНАЧЕНИЯ(УникальныйИдентификаторИсточника) = ТИП(Справочник.СтруктураПредприятия)
			|	)
			|";
			
			Узлы = Новый Массив;
			Узлы.Добавить(Узел);
			Узлы.Добавить(ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка());
			Запрос.УстановитьПараметр("УзлыИнтегрируемойСистемы", Узлы);
			
			Запрос.УстановитьПараметр("ИДВнешнегоОбъекта", ВнешнийОбъект.ID);
			Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ВнешнийОбъект.type);
			// Пока в интеграции участвуют только документы и справочники.
			ТипПриемника = ВнешнийОбъект.type;
			ТипПриемника = СтрЗаменить(ТипПриемника, "Документ.", "ДокументСсылка.");
			ТипПриемника = СтрЗаменить(ТипПриемника, "Справочник.", "СправочникСсылка.");
			Запрос.УстановитьПараметр("ТипПриемника", ТипПриемника);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда 
				СсылкаНаОбъектДО = Выборка.СсылкаНаОбъектДО;
				
				Если (Не ЗначениеЗаполнено(Выборка.УзелИнтегрированнойСистемы) 
					Или Не ЗначениеЗаполнено(Выборка.ТипВнешнегоОбъекта))
					и Выборка.СвязиОбъектовИнтегрированныхСистем Тогда
					РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ИсправитьЗаписьСвязиОбъектов(
						СсылкаНаОбъектДО,
						Выборка.УзелИнтегрированнойСистемы,
						Выборка.ТипВнешнегоОбъекта,
						Узел,
						ВнешнийОбъект.type,
						ВнешнийОбъект.ID);
				КонецЕсли;
				
				Если ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Контрагенты") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Организации") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOrganization");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Валюты") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCurrency");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSubdivision");
					
				ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда 	
					Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
					
				КонецЕсли;
				
				МетаданныеОбъектаДО = СсылкаНаОбъектДО.Метаданные();
				Если Не ПравоДоступа("Чтение", МетаданныеОбъектаДО) Тогда 
					Объект.name = НСтр("ru = '<нет прав доступа для просмотра объекта>'");
					Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаОбъектДО);
					
				Иначе
					
					ЗапросДоступности = Новый Запрос;
					ЗапросДоступности.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|	Ссылка 
					|ИЗ
					|	" + МетаданныеОбъектаДО.ПолноеИмя() + " 
					|ГДЕ 
					|	Ссылка = &Ссылка";
					ЗапросДоступности.УстановитьПараметр("Ссылка", СсылкаНаОбъектДО);
					
					Если ЗапросДоступности.Выполнить().Пустой() Тогда 
						Объект.name = НСтр("ru = '<нет прав доступа для просмотра документа>'");
						Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаОбъектДО);
					Иначе	
						
						ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
						Если ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
							
							ПолучитьДанныеВходящегоДокумента(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
							
							ПолучитьДанныеИсходящегоДокумента(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
							
							ПолучитьДанныеВнутреннегоДокумента(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Контрагенты") Тогда 
							
							ПолучитьДанныеКонтрагента(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Организации") Тогда 
							
							ПолучитьДанныеОрганизации(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Валюты") Тогда 
							
							ПолучитьДанныеВалюты(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
							
							ПолучитьДанныеПодразделения(ОбъектДО, Объект, Сообщение.columnSet);
							
						ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда 
							
							ОбработкаЗапросовXDTOКорп.ПолучитьДанныеСтатьиДвиженияДенежныхСредств(ОбъектДО, Объект, Сообщение.columnSet);
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Ответ.documents.Добавить(Объект);
				
			КонецЕсли;
			
		Иначе
			Для Каждого ВнешнийОбъект Из Сообщение.ExternalObjects Цикл
				
				ОбъектыДО = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
					Узел, ВнешнийОбъект.ID,ВнешнийОбъект.type);
					
				Для Каждого ОбъектДО Из ОбъектыДО Цикл
					
					Если Не ЗначениеЗаполнено(ОбъектДО) Тогда 
						Продолжить;
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
						ПолучитьДанныеВходящегоДокумента(ОбъектДО, Объект, Сообщение.columnSet);
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
						ПолучитьДанныеИсходящегоДокумента(ОбъектДО, Объект, Сообщение.columnSet);
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
						ПолучитьДанныеВнутреннегоДокумента(ОбъектДО, Объект, Сообщение.columnSet);
						
					ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.Контрагенты") Тогда 
						
						Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
						ПолучитьДанныеКонтрагента(ОбъектДО, Объект, Сообщение.columnSet);
					Иначе	
						Продолжить;
					КонецЕсли;
					
					Ответ.documents.Добавить(Объект);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка объектов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции	

// Получает массив связей документа
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - документ, чьи связи нужно определить
//
// Возвращаемое значение:
//    Массив - массив объектов DMDocumentRelation, описывающих связь
//
Функция ПолучитьСвязанныеДокументы(Ссылка) Экспорт 
	
	СвязиXDTO = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Неопределено КАК ТипСвязи,
		|	Неопределено КАК ТипСвязиПредставление,
		|	ТекущийДокумент.Ссылка КАК Документ,
		|	ТекущийДокумент.Представление КАК ДокументПредставление,
		|	ТекущийДокумент.Заголовок КАК ДокументЗаголовок,
		|	ТекущийДокумент.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
		|	ТекущийДокумент.ДатаРегистрации КАК ДокументДатаРегистрации
		|ИЗ
		|	&ТекущийДокумент КАК ТекущийДокумент
		|ГДЕ
		|	ТекущийДокумент.Ссылка = &Ссылка
		|");
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВнутренниеДокументы) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
			|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК СвязанныеДокументы
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ПО
			|	СвязанныеДокументы.Ссылка = СвязиДокументов.СвязанныйДокумент
			|	И СвязиДокументов.Документ = &Ссылка
			|	И НЕ СвязанныеДокументы.ПометкаУдаления
			|";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
			|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК СвязанныеДокументы
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ПО
			|	СвязанныеДокументы.Ссылка = СвязиДокументов.СвязанныйДокумент
			|	И СвязиДокументов.Документ = &Ссылка
			|	И НЕ СвязанныеДокументы.ПометкаУдаления
			|";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
			|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК СвязанныеДокументы
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ПО
			|	СвязанныеДокументы.Ссылка = СвязиДокументов.СвязанныйДокумент
			|	И СвязиДокументов.Документ = &Ссылка
			|	И НЕ СвязанныеДокументы.ПометкаУдаления
			|
			|";
	КонецЕсли;
		
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		ТекущийДокумент = "Справочник.ВходящиеДокументы";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		ТекущийДокумент = "Справочник.ИсходящиеДокументы";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		ТекущийДокумент = "Справочник.ВнутренниеДокументы";
	Иначе
		Возврат СвязиXDTO;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущийДокумент", ТекущийДокумент);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	СтрокаТекущего = Результат[0];
	
	Для НСтроки = 1 По Результат.Количество() - 1 Цикл
		
		СтрокаСвязанного = Результат[НСтроки];
		
		СвязьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocumentRelation");
		
		// Заполним сам документ.
		
		Если ТипЗнч(СтрокаТекущего.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ИначеЕсли ТипЗнч(СтрокаТекущего.Документ) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ИначеЕсли ТипЗнч(СтрокаТекущего.Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		КонецЕсли;
		
		ДокументXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаТекущего.Документ);
		ДокументXDTO.name = СтрокаТекущего.ДокументПредставление;
		
		ДокументXDTO.title = СтрокаТекущего.ДокументЗаголовок;
		ДокументXDTO.regNumber = СтрокаТекущего.ДокументРегистрационныйНомер;
		ДокументXDTO.regDate = СтрокаТекущего.ДокументДатаРегистрации;
			
		СвязьXDTO.document = ДокументXDTO;
		
		// Заполним тип связи.
		
		ТипСвязиXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRelationType");
		ТипСвязиXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаСвязанного.ТипСвязи);
		ТипСвязиXDTO.name = СтрокаСвязанного.ТипСвязиПредставление;
		ТипСвязиXDTO.predefinedName = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(СтрокаСвязанного.ТипСвязи);
		
		СвязьXDTO.relationType = ТипСвязиXDTO;
		
		// Заполним связанный документ.
		
		Если ТипЗнч(СтрокаСвязанного.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingDocument");
		ИначеЕсли ТипЗнч(СтрокаСвязанного.Документ) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOutgoingDocument");
		ИначеЕсли ТипЗнч(СтрокаСвязанного.Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInternalDocument");
		КонецЕсли;
		СвязанныйДокументXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаСвязанного.Документ);
		СвязанныйДокументXDTO.name = СтрокаСвязанного.ДокументПредставление;
		
		СвязанныйДокументXDTO.title = СтрокаСвязанного.ДокументЗаголовок;
		СвязанныйДокументXDTO.regNumber = СтрокаСвязанного.ДокументРегистрационныйНомер;
		СвязанныйДокументXDTO.regDate = СтрокаСвязанного.ДокументДатаРегистрации;
		
		СвязьXDTO.relatedDocument = СвязанныйДокументXDTO;
		
		СвязиXDTO.Добавить(СвязьXDTO);
		
	КонецЦикла;
	
	Возврат СвязиXDTO;
	
КонецФункции

// Получает структуру полей, доступных к изменению в указанном состоянии.
//
// Параметры:
//   Документ - СправочникОбъект.ВнутренниеДокументы,
//              СправочникОбъект.ВходящиеДокументы,
//              СправочникОбъект.ИсходящиеДокументы
//   НедоступныеПоля - Структура - неявно возвращаемое значение. Ключами являются имена неизменяемых реквизитов.
//
// Возвращаемое значение:
//   Структура - ключами являются имена изменяемых реквизитов.
//
Функция ПолучитьДоступностьПолейПоСостоянию(Документ, НедоступныеПоля = Неопределено)
	
	ДоступныеПоля = "";
	
	Если Не Константы.ИспользоватьСостоянияДокументов.Получить() Тогда
		Возврат ДоступныеПоля;
	КонецЕсли;
	
	Если Не Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить() Тогда
		Возврат ДоступныеПоля;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат ДоступныеПоля;
	КонецЕсли;
	
	ДоступныеПоля = Новый Структура;
	
	ДоступныеПоля.Вставить("openFile");
	ДоступныеПоля.Вставить("externalObject");
	
	Если Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Получить()
			Или Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		ДоступныеПоля.Вставить("status");
	КонецЕсли;
	
	ДоступныеПоля.Вставить("statusApproval");
	ДоступныеПоля.Вставить("statusConfirmation");
	ДоступныеПоля.Вставить("statusSigning");
	ДоступныеПоля.Вставить("statusRegistration");
	ДоступныеПоля.Вставить("statusConsideration");
	ДоступныеПоля.Вставить("statusPerformance");
	
	ИменаДоступныхПолей = Новый Массив;
	ИменаНедоступныхПолей = Новый Массив;
	Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
		Документ, ИменаДоступныхПолей, ИменаНедоступныхПолей);
	
	Если ТипЗнч(Документ) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда
		ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда
		ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
	КонецЕсли;
	
	ИменаПолейИКоманд = Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности(ТипДокумента);
	
	ДоступныеПоля.Вставить("register");
	ДоступныеПоля.Вставить("addFile");
	ДоступныеПоля.Вставить("editFile");
	ДоступныеПоля.Вставить("additionalProperties");
	
	Для Каждого ИмяПоля Из ИменаНедоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураИмен = Новый Структура(НайденнаяСтрока.ИменаDMService);
			Для Каждого Элемент Из СтруктураИмен Цикл
				ДоступныеПоля.Удалить(Элемент.Ключ);
				Если НедоступныеПоля <> Неопределено Тогда
					НедоступныеПоля.Вставить(Элемент.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ИменаДоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураИмен = Новый Структура(НайденнаяСтрока.ИменаDMService);
			Для Каждого Элемент Из СтруктураИмен Цикл
				ДоступныеПоля.Вставить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеПоля;
	
КонецФункции

// Устарела, подлежит удалению.
//
Функция СоответствиеСвойствXDTOиПолейБазыДанных() Экспорт
	
	СоответствиеРеквизитов = Новый Структура;

	СоответствиеРеквизитов.Вставить("Заголовок", "title");
	СоответствиеРеквизитов.Вставить("Содержание", "summary");
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции	

// Помещает в базу изменения файлов по запросу DMUpdateFilesRequest и возвращает ответ.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMUpdateFilesRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUpdateFilesResponse
//
Функция ЗаписатьИзмененияФайлов(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUpdateFilesResponse");
		Ответ.dataBaseId = Сообщение.dataBaseId;
		
		Для Каждого Объект Из Сообщение.objects Цикл
			
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, Заголовок");
			ЗаписатьДанныеФайлов(ДанныеДокумента, Объект.files);
			
		КонецЦикла;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = СтрШаблон(
			НСтр("ru = 'Ошибка при обновлении файлов документа %1'"),
			Объект.name);
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Заполняет набор имен колонок, описывающих файлы документа.
//
// Параметры:
//   НаборКолонокФайлов - Массив - неявно возвращаемое значение, заполняемый массив.
//   ДляОбмена - Булево - Истина, если нужен сокращенный набор колонок для обмена.
//
Процедура ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов, ДляОбмена)
	
	НаборКолонокФайлов.Добавить("objectId");
	НаборКолонокФайлов.Добавить("scannedOriginal");
	НаборКолонокФайлов.Добавить("deletionMark");
	
	Если ДляОбмена Тогда
		Возврат;
	КонецЕсли;
	
	НаборКолонокФайлов.Добавить("signed");
	НаборКолонокФайлов.Добавить("name");
	НаборКолонокФайлов.Добавить("size");
	НаборКолонокФайлов.Добавить("creationDate");
	НаборКолонокФайлов.Добавить("modificationDateUniversal");
	НаборКолонокФайлов.Добавить("author");
	НаборКолонокФайлов.Добавить("extension");
	НаборКолонокФайлов.Добавить("description");
	НаборКолонокФайлов.Добавить("editing");
	НаборКолонокФайлов.Добавить("encrypted");
	
	НаборКолонокФайлов.Добавить("signatures.author");
	НаборКолонокФайлов.Добавить("signatures.date");
	НаборКолонокФайлов.Добавить("signatures.comment");
	НаборКолонокФайлов.Добавить("signatures.signature");
	НаборКолонокФайлов.Добавить("signatures.thumbprint");
	НаборКолонокФайлов.Добавить("signatures.signer");
	НаборКолонокФайлов.Добавить("signatures.certificate");
	НаборКолонокФайлов.Добавить("signatures.signatureFileName");
	
КонецПроцедуры

// Записывает файлы документа, обновляя их согласно переданному списку
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.<...>Документ
//   ФайлыXDTO - СписокXDTO объектов типа DMFile
//
Процедура ЗаписатьДанныеФайлов(ДокументОбъект, ФайлыXDTO)
	
	Если ФайлыXDTO.Количество() <> 0 Тогда
	
		МассивПодчиненныхФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ДокументОбъект.Ссылка);
		
		Для Каждого ФайлXDTO Из ФайлыXDTO Цикл
			
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ФайлXDTO.objectId);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Если МассивПодчиненныхФайлов.Найти(Ссылка) = Неопределено Тогда // файл не найден
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
						НСтр("ru = 'Файл ""%1"" не входит в число файлов документа'") +  """%2""", 
						ФайлXDTO.name, ДокументОбъект.Заголовок);
					
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				ОбработкаЗапросовXDTOФайлы.ИзменитьФайл(ФайлXDTO);
			Иначе
				
				ФайлОбновлен = Ложь;
				Для каждого Файл Из МассивПодчиненныхФайлов Цикл
					Если Строка(Файл) = ФайлXDTO.name Тогда
						
						СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
						СведенияОФайле.АдресВременногоХранилищаФайла = 
							ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
						Если ФайлXDTO.Установлено("text") Тогда
							СведенияОФайле.АдресВременногоХранилищаТекста = 
								Новый ХранилищеЗначения(ФайлXDTO.Text);
						КонецЕсли;
						СведенияОФайле.ВремяИзменения = ФайлXDTO.modificationDate;
						СведенияОФайле.ВремяИзмененияУниверсальное = ФайлXDTO.modificationDateUniversal;
						СведенияОФайле.Размер = ФайлXDTO.size;
						СведенияОФайле.ИмяБезРасширения = ФайлXDTO.name;
						СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
						
						РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(Файл, СведенияОФайле);
						
						ФайлОбновлен = Истина;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
				Если Не ФайлОбновлен Тогда
					
					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.АдресВременногоХранилищаФайла = 
						ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
					Если ФайлXDTO.Установлено("text") Тогда
						СведенияОФайле.АдресВременногоХранилищаТекста = 
							Новый ХранилищеЗначения(ФайлXDTO.Text);
					КонецЕсли;
					СведенияОФайле.ВремяИзменения = ФайлXDTO.modificationDate;
					СведенияОФайле.ВремяИзмененияУниверсальное = ФайлXDTO.modificationDateUniversal;
					СведенияОФайле.Размер = ФайлXDTO.size;
					СведенияОФайле.ИмяБезРасширения = ФайлXDTO.name;
					СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
					
					ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ДокументОбъект.Ссылка, СведенияОФайле);
					
					Если ФайлXDTO.signatures.Количество() > 0 Тогда
						ОбработкаЗапросовXDTOФайлы.ЗанестиИнформациюОПодписяхОбъекта(ФайлXDTO.signatures, ФайлСсылка);
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

// Возвращает массив подписей документа
//
// Параметры:
//   ДокументСсылка - СправочникСсылка.<...>Документ
//
// Возвращаемое значение:
//   Массив - массив структур, описывающих подписи документа:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.<...>Документ - ДокументСсылка
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Функция ЗаполнитьСписокПодписей(ДокументСсылка)
	
	МассивПодписей = Новый Массив;
	
	ЗаполнитьСписокПодписейДокумента(ДокументСсылка, МассивПодписей);
	
	Возврат МассивПодписей;
	
КонецФункции	

// Заполняет список подписей файла по объекту Документооборота
//
// Параметры:
//   ТекущийОбъект - СправочникСсылка.Файлы
//   МассивПодписей - Массив - неявно возвращаемый массив структур, описывающих подписи файла:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.Файлы - ТекущийОбъект
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Процедура ЗаполнитьСписокПодписейФайла(ТекущийОбъект, МассивПодписей) Экспорт
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
			|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
			|	ЭлектронныеПодписи.Подпись КАК Подпись,
			|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
			|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
			|	ЭлектронныеПодписи.Сертификат КАК Сертификат
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|ГДЕ
			|	ЭлектронныеПодписи.Объект = &ОбъектСсылка";
				   
		Запрос.Параметры.Вставить("ОбъектСсылка", ТекущийОбъект);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("КомуВыданСертификат, ДатаПодписи, Комментарий, Объект, Отпечаток, УстановившийПодпись, Подпись, Сертификат, ИмяФайлаПодписи");
			
			НоваяСтрока.КомуВыданСертификат = ВыборкаЗапроса.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			НоваяСтрока.Комментарий = ВыборкаЗапроса.Комментарий;
			НоваяСтрока.Объект = ТекущийОбъект;
			НоваяСтрока.Отпечаток = ВыборкаЗапроса.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			НоваяСтрока.ИмяФайлаПодписи = ВыборкаЗапроса.ИмяФайлаПодписи;
			
			НоваяСтрока.Подпись = ВыборкаЗапроса.Подпись.Получить();
			НоваяСтрока.Сертификат = ВыборкаЗапроса.Сертификат.Получить();
			
			МассивПодписей.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей файла в объекте XDTO по переданному списку
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMDocument, чьи подписи нужно заполнить
//   МассивПодписей - Массив - структуры, описывающие подписи документа к переносу в XDTO:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.<...>Документ, СправочникСсылка.Файлы - владелец подписи
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Процедура ЗаполнитьXDTOСписокПодписей(ОбъектXDTO, МассивПодписей)
	
	Для Каждого Подпись Из МассивПодписей Цикл
		
		ПодписьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSignature");
		
		Объект = Подпись.Объект;
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда	
			Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подпись.Объект, "Владелец");
		КонецЕсли;
		
		Для Каждого КлючИЗначениеПодписи Из Подпись Цикл
			
			Если КлючИЗначениеПодписи.Ключ = "КомуВыданСертификат" Тогда
				ПодписьXDTO.author = Подпись.КомуВыданСертификат;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "ДатаПодписи" Тогда
				ПодписьXDTO.date = Подпись.ДатаПодписи;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Комментарий" Тогда
				ПодписьXDTO.comment = Подпись.Комментарий;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Подпись" Тогда
				ПодписьXDTO.signature = Подпись.Подпись;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Отпечаток" Тогда
				ПодписьXDTO.thumbprint = Подпись.Отпечаток;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "Сертификат" Тогда
				ПодписьXDTO.certificate = Подпись.Сертификат;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "ИмяФайлаПодписи" Тогда
				ПодписьXDTO.signatureFileName = Подпись.ИмяФайлаПодписи;
			КонецЕсли;
			
			Если КлючИЗначениеПодписи.Ключ = "УстановившийПодпись" Тогда
				ПодписьXDTO.signer = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
				ПодписьXDTO.signer.name = Строка(Подпись.УстановившийПодпись); 
				ПодписьXDTO.signer.objectId = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
				ПодписьXDTO.signer.objectId.id = Строка(Подпись.УстановившийПодпись.УникальныйИдентификатор()); 
				ПодписьXDTO.signer.objectId.type = "DMUser";
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектXDTO.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список подписей документа по данным Документооборота
//
// Параметры:
//   ТекущийОбъект - СправочникСсылка.<...>Документ
//   МассивПодписей - Массив - неявно возвращаемый массив структур, описывающих подписи документа:
//     * КомуВыданСертификат - Строка - владелец сертификата
//     * ДатаПодписи - Дата - дата ЭП
//     * Комментарий - Строка - комментарий к подписи
//     * Объект - СправочникСсылка.<...>Документ - ТекущийОбъект
//     * Отпечаток - Строка - отпечаток ЭП
//     * УстановившийПодпись - СправочникСсылка.Пользователи - подписавший
//     * Подпись - ДвоичныеДанные - данные подписи
//     * Сертификат - ДвоичныеДанные - данные сертификата
//     * ИмяФайлаПодписи - Строка - имя исходного файла ЭП
//
Процедура ЗаполнитьСписокПодписейДокумента(ТекущийОбъект, МассивПодписей) Экспорт
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект);
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("КомуВыданСертификат, ДатаПодписи, Комментарий, Объект, Отпечаток, УстановившийПодпись, Подпись, Сертификат, ИмяФайлаПодписи");
			
			НоваяСтрока.КомуВыданСертификат = ВыборкаЗапроса.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			НоваяСтрока.Комментарий = ВыборкаЗапроса.Комментарий;
			НоваяСтрока.Объект = ТекущийОбъект;
			НоваяСтрока.Отпечаток = ВыборкаЗапроса.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			НоваяСтрока.ИмяФайлаПодписи = ВыборкаЗапроса.ИмяФайлаПодписи;
			
			НоваяСтрока.Подпись = ВыборкаЗапроса.Подпись.Получить();
			НоваяСтрока.Сертификат = ВыборкаЗапроса.Сертификат.Получить();
			
			МассивПодписей.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделНоменклатурыДел

// Получает заполненный объект XDTO, соответствующий разделу номенклатуры дел.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующий раздел номенклатуры дел
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesListSections или DMError
//
Функция ПолучитьРазделНоменклатурыДел(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		РазделНоменклатурыДел = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesListSections");
		ПолучитьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении раздела номенклатуры дел'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   РазделНоменклатурыДел - СправочникОбъект.РазделыНоменклатурыДел, СправочникСсылка.РазделыНоменклатурыДел
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesListSections
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеРазделаНоменклатурыДел = Новый Структура;
	РеквизитыРазделаНоменклатурыДел = Новый Структура;
	
	Если ТипЗнч(РазделНоменклатурыДел) = Тип("СправочникОбъект.РазделыНоменклатурыДел")
			Или ТипЗнч(РазделНоменклатурыДел) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДанныеРазделаНоменклатурыДел.Вставить("year", РазделНоменклатурыДел.Год);
		ДанныеРазделаНоменклатурыДел.Вставить("index", РазделНоменклатурыДел.Индекс);
		ДанныеРазделаНоменклатурыДел.Вставить("company", РазделНоменклатурыДел.Организация);
		ДанныеРазделаНоменклатурыДел.Вставить("department", РазделНоменклатурыДел.Подразделение);
		РеквизитыРазделаНоменклатурыДел.Вставить("Ссылка", РазделНоменклатурыДел.Ссылка);
		РеквизитыРазделаНоменклатурыДел.Вставить("Наименование", РазделНоменклатурыДел.Наименование);
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РазделНоменклатурыДел,
			"Год,
			|Индекс,
			|Организация,
			|Подразделение,
			|Наименование");
		ДанныеРазделаНоменклатурыДел.Вставить("year", Данные.Год);
		ДанныеРазделаНоменклатурыДел.Вставить("index", Данные.Индекс);
		ДанныеРазделаНоменклатурыДел.Вставить("company", Данные.Организация);
		ДанныеРазделаНоменклатурыДел.Вставить("department", Данные.Подразделение);
		РеквизитыРазделаНоменклатурыДел.Вставить("Ссылка", РазделНоменклатурыДел);
		РеквизитыРазделаНоменклатурыДел.Вставить("Наименование", Данные.Наименование);
	КонецЕсли;
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеРазделаНоменклатурыДел Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(РеквизитыРазделаНоменклатурыДел.Ссылка);
	ОбъектXDTO.name = Строка(РеквизитыРазделаНоменклатурыДел.Ссылка);
	
КонецПроцедуры

// Создает новый раздел номенклатуры дел по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesListSections или DMError
//
Функция СоздатьРазделНоменклатурыДел(Сообщение) Экспорт
	
	Попытка
		
		РазделНоменклатурыДел = Справочники.РазделыНоменклатурыДел.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(РазделНоменклатурыДел, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, РазделНоменклатурыДел.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(РазделНоменклатурыДел.Ссылка);
		Возврат ПолучитьРазделНоменклатурыДел(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании раздела номенклатуры дел'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает раздел номенклатуры дел по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMCaseFilesListSections
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesListSections, заново заполненный, или DMError
//
Функция ИзменитьРазделНоменклатурыДел(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		РазделНоменклатурыДел = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(РазделНоменклатурыДел.Ссылка);
		Возврат ПолучитьРазделНоменклатурыДел(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении раздела номенклатуры дел'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   РазделНоменклатурыДел - СправочникОбъект.РазделыНоменклатурыДел - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesListSections - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, ОбъектXDTO, Ошибка)
	
	РазделНоменклатурыДел.Заблокировать();
	ЗаполнитьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(РазделНоменклатурыДел, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи раздела номенклатуры дел'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, РазделНоменклатурыДел, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	РазделНоменклатурыДел.Записать();
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   РазделНоменклатурыДел - СправочникОбъект.РазделыНоменклатурыДел - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesListSections - источник данных заполнения
//
Процедура ЗаполнитьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Год, ОбъектXDTO, "year");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Индекс, ОбъектXDTO, "index");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Организация, ОбъектXDTO, "company");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Подразделение, ОбъектXDTO, "department");
	
КонецПроцедуры

// Ищет подходящий раздел номенклатуры дел по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesListSections
//
// Возвращаемое значение:
//   СправочникСсылка.РазделыНоменклатурыДел, Неопределено - найденный раздел номенклатуры дел
//
Функция НайтиРазделНоменклатурыДел(ОбъектXDTO) Экспорт
	
	Год = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Год, ОбъектXDTO, "year");
	Индекс = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Индекс, ОбъектXDTO, "index");
	Организация = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация, ОбъектXDTO, "company");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РазделыНоменклатурыДел.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
		|ГДЕ
		|	РазделыНоменклатурыДел.Год = &Год
		|	И РазделыНоменклатурыДел.Индекс = &Индекс
		|	И РазделыНоменклатурыДел.Организация = &Организация";
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Находит подходящий или создает новый раздел номенклатуры дел по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesListSections
//
// Возвращаемое значение:
//   СправочникСсылка.РазделыНоменклатурыДел - найденный или созданный раздел номенклатуры дел
//
Функция НайтиСоздатьРазделНоменклатурыДел(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		СсылкаДО = НайтиРазделНоменклатурыДел(ОбъектXDTO);
		Если ЗначениеЗаполнено(СсылкаДО) Тогда
			Возврат СсылкаДО;
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "РазделыНоменклатурыДел");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеРазделаНоменклатурыДел(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		СсылкаДО = НайтиРазделНоменклатурыДел(ОбъектXDTO);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.РазделыНоменклатурыДел.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеРазделаНоменклатурыДел(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Получает дерево разделов номенклатуры дел, удовлетворяющих условиям отбора
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetCaseFilesListSectionsTreeRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetCaseFilesListSectionsTreeResponse
//
Функция ПолучитьДеревоРазделовНоменклатурыДел(Сообщение) Экспорт
	
	Организация = Неопределено;
	Если Сообщение.Установлено("company") Тогда
		Организация = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.company.objectID);
	КонецЕсли;
	
	МассивПодразделений = Неопределено;
	Если Сообщение.Установлено("department") Тогда
		Подразделение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.department.objectID);
		Если ЗначениеЗаполнено(Подразделение) Тогда
			МассивПодразделений = Делопроизводство.ПолучитьПодразделениеИРодителей(Подразделение, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникРазделыНоменклатурыДел.Ссылка КАК Ссылка,
		|	СправочникРазделыНоменклатурыДел.Индекс + "" "" + СправочникРазделыНоменклатурыДел.Наименование КАК Наименование
		|ИЗ
		|	Справочник.РазделыНоменклатурыДел КАК СправочникРазделыНоменклатурыДел
		|ГДЕ
		|	(СправочникРазделыНоменклатурыДел.Год = &Год
		|			ИЛИ &Год = 0)
		|	И &УсловиеОрганизация
		|	И &УсловиеПодразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Год", ?(Сообщение.Установлено("year"), Сообщение.year, 0));
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация",
			"СправочникРазделыНоменклатурыДел.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивПодразделений) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение",
			"СправочникРазделыНоменклатурыДел.Подразделение В (&МассивПодразделений)");
		Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", "Истина");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetCaseFilesListSectionsTreeResponse");
	
	ЗаполнитьДеревоРазделовНоменклатурыДел(РезультатЗапроса, Ответ.caseFilesListSectionsTree);
	
	Возврат Ответ;
	
КонецФункции

Процедура ЗаполнитьДеревоРазделовНоменклатурыДел(Дерево, caseFilesListSectionsTree)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		ЭлементДерева = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesListSectionsTreeElement");
		ЭлементДерева.caseFilesListSection = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesListSections");
		ЭлементДерева.caseFilesListSection.name = Строка(Строка.Ссылка);
		ЭлементДерева.caseFilesListSection.ObjectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Строка.Ссылка);
		
		ЗаполнитьДеревоРазделовНоменклатурыДел(Строка, ЭлементДерева.caseFilesListSectionsTree);
		
		caseFilesListSectionsTree.Добавить(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НоменклатураДел

// Получает заполненный объект XDTO, соответствующий номенклатуре дел.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующую номенклатуру дел
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesCatalog или DMError
//
Функция ПолучитьНоменклатуруДел(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		НоменклатураДел = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesCatalog");
		ПолучитьДанныеНоменклатурыДел(НоменклатураДел, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении номенклатуры дел'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   НоменклатураДел - СправочникОбъект.НоменклатураДел, СправочникСсылка.НоменклатураДел
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesCatalog
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеНоменклатурыДел(НоменклатураДел, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеНоменклатурыДел = Новый Структура;
	РеквизитыНоменклатурыДел = Новый Структура;
	
	Если ТипЗнч(НоменклатураДел) = Тип("СправочникОбъект.НоменклатураДел")
			Или ТипЗнч(НоменклатураДел) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДанныеНоменклатурыДел.Вставить("year", НоменклатураДел.Год);
		ДанныеНоменклатурыДел.Вставить("longDescription", НоменклатураДел.ПолноеНаименование);
		ДанныеНоменклатурыДел.Вставить("index", НоменклатураДел.Индекс);
		ДанныеНоменклатурыДел.Вставить("section", НоменклатураДел.Раздел);
		ДанныеНоменклатурыДел.Вставить("company", НоменклатураДел.Организация);
		ДанныеНоменклатурыДел.Вставить("retentionPeriod", НоменклатураДел.СрокХранения);
		ДанныеНоменклатурыДел.Вставить("articleNumbers", НоменклатураДел.НомераСтатей);
		ДанныеНоменклатурыДел.Вставить("expertsCommissionMark", НоменклатураДел.ОтметкаЭПК);
		ДанныеНоменклатурыДел.Вставить("comment", НоменклатураДел.Примечание);
		ДанныеНоменклатурыДел.Вставить("documentTypesFilledIn", НоменклатураДел.ВидыДокументовЗаполнены);
		ДанныеНоменклатурыДел.Вставить("correspondentsFilledIn", НоменклатураДел.КонтрагентыЗаполнены);
		ДанныеНоменклатурыДел.Вставить("activityTypesFilledIn", НоменклатураДел.ВопросыДеятельностиЗаполнены);
		РеквизитыНоменклатурыДел.Вставить("Ссылка", НоменклатураДел.Ссылка);
		РеквизитыНоменклатурыДел.Вставить("Наименование", НоменклатураДел.Наименование);
		РеквизитыНоменклатурыДел.Вставить("КатегорияДела", НоменклатураДел.КатегорияДела);
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоменклатураДел,
			"Год,
			|ПолноеНаименование,
			|Индекс,
			|Раздел,
			|Организация,
			|СрокХранения,
			|НомераСтатей,
			|ОтметкаЭПК,
			|Примечание,
			|ВидыДокументовЗаполнены,
			|КонтрагентыЗаполнены,
			|ВопросыДеятельностиЗаполнены,
			|Наименование,
			|КатегорияДела");
		ДанныеНоменклатурыДел.Вставить("year", Данные.Год);
		ДанныеНоменклатурыДел.Вставить("longDescription", Данные.ПолноеНаименование);
		ДанныеНоменклатурыДел.Вставить("index", Данные.Индекс);
		ДанныеНоменклатурыДел.Вставить("section", Данные.Раздел);
		ДанныеНоменклатурыДел.Вставить("company", Данные.Организация);
		ДанныеНоменклатурыДел.Вставить("retentionPeriod", Данные.СрокХранения);
		ДанныеНоменклатурыДел.Вставить("articleNumbers", Данные.НомераСтатей);
		ДанныеНоменклатурыДел.Вставить("expertsCommissionMark", Данные.ОтметкаЭПК);
		ДанныеНоменклатурыДел.Вставить("comment", Данные.Примечание);
		ДанныеНоменклатурыДел.Вставить("documentTypesFilledIn", Данные.ВидыДокументовЗаполнены);
		ДанныеНоменклатурыДел.Вставить("correspondentsFilledIn", Данные.КонтрагентыЗаполнены);
		ДанныеНоменклатурыДел.Вставить("activityTypesFilledIn", Данные.ВопросыДеятельностиЗаполнены);
		РеквизитыНоменклатурыДел.Вставить("Ссылка", НоменклатураДел);
		РеквизитыНоменклатурыДел.Вставить("Наименование", Данные.Наименование);
		РеквизитыНоменклатурыДел.Вставить("КатегорияДела", Данные.КатегорияДела);
	КонецЕсли;
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеНоменклатурыДел Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(РеквизитыНоменклатурыДел.Ссылка);
	ОбъектXDTO.name = Строка(РеквизитыНоменклатурыДел.Ссылка);
	Если РеквизитыНоменклатурыДел.КатегорияДела = Перечисления.КатегорииДел.ВременноеДо10 Тогда
		ОбъектXDTO.caseCategory = "temporaryUpTo10years";
	ИначеЕсли РеквизитыНоменклатурыДел.КатегорияДела = Перечисления.КатегорииДел.ВременноеСвыше10 Тогда
		ОбъектXDTO.caseCategory = "temporaryOver10years";
	ИначеЕсли РеквизитыНоменклатурыДел.КатегорияДела = Перечисления.КатегорииДел.Постоянное Тогда
		ОбъектXDTO.caseCategory = "permanent";
	КонецЕсли;
	
	// Заполним Раздел.
	Если ОбъектXDTO.Установлено("section") Тогда
		ПолучитьДанныеРазделаНоменклатурыДел(ДанныеНоменклатурыДел.section, ОбъектXDTO.section);
	КонецЕсли;
	
КонецПроцедуры

// Создает новую номенклатуру дел по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesCatalog или DMError
//
Функция СоздатьНоменклатуруДел(Сообщение) Экспорт
	
	Попытка
		
		НоменклатураДел = Справочники.НоменклатураДел.СоздатьЭлемент();
		НоменклатураДел.Заполнить(Неопределено);
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(НоменклатураДел, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеНоменклатурыДел(НоменклатураДел, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, НоменклатураДел.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(НоменклатураДел.Ссылка);
		Возврат ПолучитьНоменклатуруДел(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании номенклатуры дел'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает номенклатуру дел по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMCaseFilesCatalog
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesCatalog, заново заполненный, или DMError
//
Функция ИзменитьНоменклатуруДел(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		НоменклатураДел = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеНоменклатурыДел(НоменклатураДел, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(НоменклатураДел.Ссылка);
		Возврат ПолучитьНоменклатуруДел(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении номенклатуры дел'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   НоменклатураДел - СправочникОбъект.НоменклатураДел - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesCatalog - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеНоменклатурыДел(НоменклатураДел, ОбъектXDTO, Ошибка)
	
	НоменклатураДел.Заблокировать();
	ЗаполнитьДанныеНоменклатурыДел(НоменклатураДел, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(НоменклатураДел, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи номенклатуры дел'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, НоменклатураДел, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	НоменклатураДел.Записать();
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   НоменклатураДел - СправочникОбъект.НоменклатураДел - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesCatalog - источник данных заполнения
//
Процедура ЗаполнитьДанныеНоменклатурыДел(НоменклатураДел, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.Год, ОбъектXDTO, "year");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.ПолноеНаименование, ОбъектXDTO, "longDescription");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.Индекс, ОбъектXDTO, "index");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.Раздел, ОбъектXDTO, "section");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.Организация, ОбъектXDTO, "company");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.СрокХранения, ОбъектXDTO, "retentionPeriod");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.НомераСтатей, ОбъектXDTO, "articleNumbers");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.ОтметкаЭПК, ОбъектXDTO, "expertsCommissionMark");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.Примечание, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.ВидыДокументовЗаполнены, ОбъектXDTO, "documentTypesFilledIn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.КонтрагентыЗаполнены, ОбъектXDTO, "correspondentsFilledIn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел.ВопросыДеятельностиЗаполнены, ОбъектXDTO, "activityTypesFilledIn");
	
	Если ВРег(ОбъектXDTO.caseCategory) = ВРег("temporaryUpTo10years") Тогда
		НоменклатураДел.КатегорияДела = Перечисления.КатегорииДел.ВременноеДо10;
	ИначеЕсли ВРег(ОбъектXDTO.caseCategory) = ВРег("temporaryOver10years") Тогда
		НоменклатураДел.КатегорияДела = Перечисления.КатегорииДел.ВременноеСвыше10;
	ИначеЕсли ВРег(ОбъектXDTO.caseCategory) = ВРег("permanent") Тогда
		НоменклатураДел.КатегорияДела = Перечисления.КатегорииДел.Постоянное;
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящую номенклатуру дел по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesCatalog
//
// Возвращаемое значение:
//   СправочникСсылка.НоменклатураДел, Неопределено - найденная номенклатура дел
//
Функция НайтиНоменклатуруДел(ОбъектXDTO) Экспорт
	
	Год = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Год, ОбъектXDTO, "year");
	Индекс = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Индекс, ОбъектXDTO, "index");
	Организация = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация, ОбъектXDTO, "company");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураДел.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	НоменклатураДел.Год = &Год
		|	И НоменклатураДел.Индекс = &Индекс
		|	И НоменклатураДел.Организация = &Организация";
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Находит подходящую или создает новую номенклатуру дел по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesCatalog
//
// Возвращаемое значение:
//   СправочникСсылка.НоменклатураДел - найденная или созданная номенклатура дел
//
Функция НайтиСоздатьНоменклатуруДел(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		СсылкаДО = НайтиНоменклатуруДел(ОбъектXDTO);
		Если ЗначениеЗаполнено(СсылкаДО) Тогда
			Возврат СсылкаДО;
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "НоменклатураДел");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеНоменклатурыДел(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		СсылкаДО = НайтиНоменклатуруДел(ОбъектXDTO);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.НоменклатураДел.СоздатьЭлемент();
		ОбъектДО.Заполнить(Неопределено);
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеНоменклатурыДел(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Получает список номенклатуры дел, удовлетворяющих условиям отбора
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetCaseFilesCatalogRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetCaseFilesCatalogResponse
//
Функция ПолучитьСписокНоменклатурыДел(Сообщение) Экспорт
	
	Параметры = Новый Структура(
		"Год,
		|Организация,
		|Подразделение,
		|ВидДокумента,
		|Контрагент,
		|ВопросДеятельности");
	
	Если Сообщение.Установлено("year") Тогда
		Параметры.Год = Сообщение.year;
	КонецЕсли;
	
	Если Сообщение.Установлено("company") Тогда
		Параметры.Организация = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.company.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("department") Тогда
		Параметры.Подразделение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.department.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("documentType") Тогда
		Параметры.ВидДокумента = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.documentType.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("correspondent") Тогда
		Параметры.Контрагент = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.correspondent.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("activityMatter") Тогда
		Параметры.ВопросДеятельности = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.activityMatter.objectID);
	КонецЕсли;
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetCaseFilesCatalogResponse");
	
	Запрос = ЗапросСпискаНоменклатурыДел(Параметры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		сaseFilesCatalog = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesCatalog");
		ПолучитьДанныеНоменклатурыДел(Выборка, сaseFilesCatalog);
		Ответ.caseFilesCatalogs.Добавить(сaseFilesCatalog);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ДелаХраненияДокументов

// Получает заполненный объект XDTO, соответствующий делу хранения документов.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее дело хранения документов
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesDossiers или DMError
//
Функция ПолучитьДелоХраненияДокументов(ОбъектИд, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
		ДелоХраненияДокументов = Ссылка.ПолучитьОбъект();
		
		Объект = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesDossiers");
		ПолучитьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, Объект, НаборКолонок);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении дела хранения документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота
//
// Параметры:
//   ДелоХраненияДокументов - СправочникОбъект.ДелаХраненияДокументов, СправочникСсылка.ДелаХраненияДокументов
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesDossiers
//   НаборКолонок - Массив - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеДелаХраненияДокументов = Новый Структура;
	РеквизитыДелаХраненияДокументов = Новый Структура;
	
	Если ТипЗнч(ДелоХраненияДокументов) = Тип("СправочникОбъект.ДелаХраненияДокументов")
			Или ТипЗнч(ДелоХраненияДокументов) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДанныеДелаХраненияДокументов.Вставить("startDate", ДелоХраненияДокументов.ДатаНачала);
		ДанныеДелаХраненияДокументов.Вставить("endDate", ДелоХраненияДокументов.ДатаОкончания);
		ДанныеДелаХраненияДокументов.Вставить("caseClosed", ДелоХраненияДокументов.ДелоЗакрыто);
		ДанныеДелаХраненияДокументов.Вставить("numberOfSheets", ДелоХраненияДокументов.КоличествоЛистов);
		ДанныеДелаХраненияДокументов.Вставить("comment", ДелоХраненияДокументов.Комментарий);
		ДанныеДелаХраненияДокументов.Вставить("caseFilesCatalog", ДелоХраненияДокументов.НоменклатураДел);
		ДанныеДелаХраненияДокументов.Вставить("dossierNumber", ДелоХраненияДокументов.НомерТома);
		ДанныеДелаХраненияДокументов.Вставить("company", ДелоХраненияДокументов.Организация);
		ДанныеДелаХраненияДокументов.Вставить("department", ДелоХраненияДокументов.Подразделение);
		РеквизитыДелаХраненияДокументов.Вставить("Ссылка", ДелоХраненияДокументов.Ссылка);
		РеквизитыДелаХраненияДокументов.Вставить("Наименование", ДелоХраненияДокументов.Наименование);
		Индекс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДелоХраненияДокументов.НоменклатураДел, "Индекс");
		РеквизитыДелаХраненияДокументов.Вставить("Представление", СокрЛП(Индекс + " " + ДелоХраненияДокументов.Наименование));
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДелоХраненияДокументов,
			"ДатаНачала,
			|ДатаОкончания,
			|ДелоЗакрыто,
			|КоличествоЛистов,
			|Комментарий,
			|НоменклатураДел,
			|НомерТома,
			|Организация,
			|Подразделение,
			|Наименование");
		ДанныеДелаХраненияДокументов.Вставить("startDate", Данные.ДатаНачала);
		ДанныеДелаХраненияДокументов.Вставить("endDate", Данные.ДатаОкончания);
		ДанныеДелаХраненияДокументов.Вставить("caseClosed", Данные.ДелоЗакрыто);
		ДанныеДелаХраненияДокументов.Вставить("numberOfSheets", Данные.КоличествоЛистов);
		ДанныеДелаХраненияДокументов.Вставить("comment", Данные.Комментарий);
		ДанныеДелаХраненияДокументов.Вставить("caseFilesCatalog", Данные.НоменклатураДел);
		ДанныеДелаХраненияДокументов.Вставить("dossierNumber", Данные.НомерТома);
		ДанныеДелаХраненияДокументов.Вставить("company", Данные.Организация);
		ДанныеДелаХраненияДокументов.Вставить("department", Данные.Подразделение);
		РеквизитыДелаХраненияДокументов.Вставить("Ссылка", ДелоХраненияДокументов);
		РеквизитыДелаХраненияДокументов.Вставить("Наименование", Данные.Наименование);
		Индекс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.НоменклатураДел, "Индекс");
		РеквизитыДелаХраненияДокументов.Вставить("Представление", СокрЛП(Индекс + " " + Данные.Наименование));
	КонецЕсли;
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеДелаХраненияДокументов Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(РеквизитыДелаХраненияДокументов.Ссылка);
	ОбъектXDTO.name = Строка(РеквизитыДелаХраненияДокументов.Ссылка);
	ОбъектXDTO.objectID.presentation = РеквизитыДелаХраненияДокументов.Представление;
	
	// Заполним номенклатуру дел.
	Если ОбъектXDTO.Установлено("caseFilesCatalog") Тогда
		ПолучитьДанныеНоменклатурыДел(ДанныеДелаХраненияДокументов.caseFilesCatalog, ОбъектXDTO.caseFilesCatalog);
	КонецЕсли;
	
КонецПроцедуры

// Создает новое дело хранения документов по объекту XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesDossiers или DMError
//
Функция СоздатьДелоХраненияДокументов(Сообщение) Экспорт
	
	Попытка
		
		ДелоХраненияДокументов = Справочники.ДелаХраненияДокументов.СоздатьЭлемент();
		Объект = Сообщение.object;
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ДелоХраненияДокументов, Объект);
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		Если Объект.Установлено("externalObject") Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				Объект.externalObject.id, Объект.externalObject.type, ДелоХраненияДокументов.Ссылка);
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ДелоХраненияДокументов.Ссылка);
		Возврат ПолучитьДелоХраненияДокументов(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании дела хранения документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает дело хранения документов по объекту XDTO
//
// Параметры:
//   Объект - ОбъектXDTO типа DMCaseFilesDossiers
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCaseFilesDossiers, заново заполненный, или DMError
//
Функция ИзменитьДелоХраненияДокументов(Объект) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
		ДелоХраненияДокументов = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, Объект, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ДелоХраненияДокументов.Ссылка);
		Возврат ПолучитьДелоХраненияДокументов(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении дела хранения документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет и записывает объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ДелоХраненияДокументов - СправочникОбъект.ДелаХраненияДокументов - записываемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesDossiers - источник данных
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, ОбъектXDTO, Ошибка)
	
	ДелоХраненияДокументов.Заблокировать();
	ЗаполнитьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, ОбъектXDTO);
	
	// проверка заполнения
	ТекстСообщения = "";
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ДелоХраненияДокументов, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи дела хранения документов'");
		Ошибка.description = ТекстСообщения;
		ДобавитьНавигационнуюСсылку(Ошибка.description, ДелоХраненияДокументов, ОбъектXDTO);
		Возврат Ложь;
	КонецЕсли;
	ДелоХраненияДокументов.Записать();
	
	Возврат Истина;
	
КонецФункции

// Заполняет объект Документооборота по данным объекта XDTO
//
// Параметры:
//   ДелоХраненияДокументов - СправочникОбъект.ДелаХраненияДокументов - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesDossiers - источник данных заполнения
//
Процедура ЗаполнитьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.ДатаНачала, ОбъектXDTO, "startDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.ДатаОкончания, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.ДелоЗакрыто, ОбъектXDTO, "caseClosed");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.КоличествоЛистов, ОбъектXDTO, "numberOfSheets");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.НоменклатураДел, ОбъектXDTO, "caseFilesCatalog");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.НомерТома, ОбъектXDTO, "dossierNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.Организация, ОбъектXDTO, "company");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДелоХраненияДокументов.Подразделение, ОбъектXDTO, "department");
	
КонецПроцедуры

// Ищет подходящее дело хранения документов по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesDossiers
//
// Возвращаемое значение:
//   СправочникСсылка.ДелаХраненияДокументов, Неопределено - найденное дело хранения документов
//
Функция НайтиДелоХраненияДокументов(ОбъектXDTO) Экспорт
	
	НоменклатураДел = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоменклатураДел, ОбъектXDTO, "caseFilesCatalog");
	НомерТома = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НомерТома, ОбъектXDTO, "dossierNumber");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДелаХраненияДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|ГДЕ
		|	ДелаХраненияДокументов.НоменклатураДел = &НоменклатураДел
		|	И ДелаХраненияДокументов.НомерТома = &НомерТома";
	Запрос.УстановитьПараметр("НоменклатураДел", НоменклатураДел);
	Запрос.УстановитьПараметр("НомерТома", НомерТома);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Находит подходящее или создает новое дело хранения документов по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа DMCaseFilesDossiers
//
// Возвращаемое значение:
//   СправочникСсылка.ДелаХраненияДокументов - найденное или созданное дело хранения документов
//
Функция НайтиСоздатьДелоХраненияДокументов(ОбъектXDTO) Экспорт
	
	СсылкаДО = Неопределено;
	
	Если Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.id) Тогда
		
		СсылкаДО = НайтиДелоХраненияДокументов(ОбъектXDTO);
		Если ЗначениеЗаполнено(СсылкаДО) Тогда
			Возврат СсылкаДО;
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаДО = ОбработкаЗапросовXDTO.СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, "ДелаХраненияДокументов");
	Если СсылкаДО <> Неопределено Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
		ОбъектДО.Заблокировать();
		ЗаполнитьДанныеДелаХраненияДокументов(ОбъектДО, ОбъектXDTO);
		Если ОбъектДО.Модифицированность() Тогда
			ОбъектДО.Записать();
		КонецЕсли;
		Возврат СсылкаДО;
	КонецЕсли;
	
	// переопределяемый поиск
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоответствиеДляВнешнегоОбъекта(ОбъектXDTO);
	
	// стандартный поиск
	Если Не ЗначениеЗаполнено(СсылкаДО) Тогда
		СсылкаДО = НайтиДелоХраненияДокументов(ОбъектXDTO);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДО) Тогда
		ОбъектДО = СсылкаДО.ПолучитьОбъект();
	Иначе
		ОбъектДО = Справочники.ДелаХраненияДокументов.СоздатьЭлемент();
		ОбработкаЗапросовXDTO.УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ОбъектXDTO);
	КонецЕсли;
	ОбъектДО.Заблокировать();
	ЗаполнитьДанныеДелаХраненияДокументов(ОбъектДО, ОбъектXDTO);
	Если ОбъектДО.Модифицированность() Тогда
		ОбъектДО.Записать();
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

// Получает список дел хранения документов, удовлетворяющих условиям отбора
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetCaseFilesDossiersRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetCaseFilesDossiersResponse
//
Функция ПолучитьСписокДелХраненияДокументов(Сообщение) Экспорт
	
	Параметры = Новый Структура(
		"Организация,
		|Подразделение,
		|ДатаРегистрации,
		|НоменклатураДел,
		|ВидДокумента,
		|Контрагент,
		|ВопросДеятельности");
	
	Если Сообщение.Установлено("company") Тогда
		Параметры.Организация = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.company.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("department") Тогда
		Параметры.Подразделение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.department.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("regDate") Тогда
		Параметры.ДатаРегистрации = Сообщение.regDate;
	КонецЕсли;
	
	Если Сообщение.Установлено("caseFilesCatalog") Тогда
		Параметры.НоменклатураДел = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.caseFilesCatalog.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("documentType") Тогда
		Параметры.ВидДокумента = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.documentType.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("correspondent") Тогда
		Параметры.Контрагент = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.correspondent.objectID);
	КонецЕсли;
	
	Если Сообщение.Установлено("activityMatter") Тогда
		Параметры.ВопросДеятельности = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.activityMatter.objectID);
	КонецЕсли;
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetCaseFilesDossiersResponse");
	
	Запрос = ЗапросСпискаДелХраненияДокументов(Параметры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		сaseFilesDossier = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCaseFilesDossiers");
		ПолучитьДанныеДелаХраненияДокументов(Выборка, сaseFilesDossier);
		Ответ.caseFilesDossiers.Добавить(сaseFilesDossier);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет данными документа структуру реквизитов, общих для всех типов документов
//
// Параметры:
//   ДанныеДокумента - Структура, неявно возвращаемое значение
//   Документ - СправочникОбъект.<...>Документ - источник данных заполнения
//
Процедура ПолучитьОбщиеДанныеДокумента(ДанныеДокумента, Документ)
	
	ДанныеДокумента.Вставить("documentType", Документ.ВидДокумента);
	ДанныеДокумента.Вставить("title", Документ.Заголовок);
	ДанныеДокумента.Вставить("summary", Документ.Содержание);
	ДанныеДокумента.Вставить("comment", Документ.Комментарий);
	ДанныеДокумента.Вставить("regNumber", Документ.РегистрационныйНомер);
	ДанныеДокумента.Вставить("regDate", Документ.ДатаРегистрации);
	ДанныеДокумента.Вставить("sum", Документ.Сумма);
	ДанныеДокумента.Вставить("currency", Документ.Валюта);
	ДанныеДокумента.Вставить("organization", Документ.Организация);
	ДанныеДокумента.Вставить("subdivision", Документ.Подразделение);
	ДанныеДокумента.Вставить("accessLevel", Документ.ГрифДоступа);
	ДанныеДокумента.Вставить("performanceDate", Документ.СрокИсполнения);
	ДанныеДокумента.Вставить("activityMatter",Документ.ВопросДеятельности);
	ДанныеДокумента.Вставить("responsible", Документ.Ответственный);
	ДанныеДокумента.Вставить("project", Документ.Проект);
	ДанныеДокумента.Вставить("template", Документ.Шаблон);
	ДанныеДокумента.Вставить("deletionMark", Документ.ПометкаУдаления);
	ДанныеДокумента.Вставить("numberOfSheets", Документ.КоличествоЛистов);
	ДанныеДокумента.Вставить("numberOfAnnexes", Документ.КоличествоПриложений);
	ДанныеДокумента.Вставить("sheetsInAnnexes", Документ.ЛистовВПриложениях);
	ДанныеДокумента.Вставить("numberOfCopies", Документ.КоличествоЭкземпляров);
	ДанныеДокумента.Вставить("caseFilesCatalog", Документ.НоменклатураДел);
	ДанныеДокумента.Вставить("caseFileDossier", Документ.Дело);
	
КонецПроцедуры

// Заполняет структуру общих настроек, относящихся к документам
//
Процедура ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ)
	
	ДанныеДокумента.Вставить("organizationEnabled", Константы.ИспользоватьУчетПоОрганизациям.Получить());
	
	Если ТипЗнч(Документ) = Тип("СправочникОбъект.ВнутренниеДокументы")
		И ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		
		ВестиУчетПоОрганизациям = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента,
			"ВестиУчетПоОрганизациям");
			
		ДанныеДокумента.organizationEnabled = ДанныеДокумента.organizationEnabled
			И ВестиУчетПоОрганизациям;
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("activityMatterEnabled", Константы.ИспользоватьВопросыДеятельности.Получить());
	ДанныеДокумента.Вставить("accessLevelEnabled", Константы.ИспользоватьГрифыДоступа.Получить());
	ДанныеДокумента.Вставить("filesEnabled", Константы.ИспользоватьФайлыУВходящихДокументов.Получить());
	ДанныеДокумента.Вставить("statusEnabled", Константы.ИспользоватьСостоянияДокументов.Получить());
	ДанныеДокумента.Вставить("statusChangeEnabled", РольДоступна("ПолныеПрава")
		Или Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Получить());
	ДанныеДокумента.Вставить("limitPropertiesAvailability", Не РольДоступна("ПолныеПрава")
		И Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить());
	ДанныеДокумента.Вставить("projectsEnabled", Константы.ВестиУчетПоПроектам.Получить());
	ДанныеДокумента.Вставить("contentAvailable", Константы.ИспользоватьСоставДокументов.Получить());
	ДанныеДокумента.Вставить("useCaseFiles", Константы.ИспользоватьНоменклатуруДел.Получить());
	
	Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗаполнениеНаименованияПоШаблону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Шаблон,
			"ЗаполнениеНаименованияПоШаблону");
		ДанныеДокумента.Вставить("titleBlockedByTemplate", ЗаполнениеНаименованияПоШаблону);
	Иначе
		ДанныеДокумента.Вставить("titleBlockedByTemplate", Ложь);
	КонецЕсли;
	
	ДанныеДокумента.Вставить("registrationAvailable", ДоступнаРегистрация(Документ));
	
КонецПроцедуры

// Заполняет данными шаблона документа структуру реквизитов, общих для всех типов.
//
// Параметры:
//   ДанныеШаблона - Структура, неявно возвращаемое значение.
//   Шаблон - СправочникОбъект.Шаблон<...>Документа - источник данных заполнения.
//
Процедура ПолучитьОбщиеДанныеШаблонаДокумента(ДанныеШаблона, Шаблон)
	
	ДанныеШаблона.Вставить("documentType", 		Шаблон.ВидДокумента);
	ДанныеШаблона.Вставить("title", 			Шаблон.Заголовок);
	ДанныеШаблона.Вставить("summary", 			Шаблон.Содержание);
	ДанныеШаблона.Вставить("comment", 			Шаблон.КомментарийКДокументу);
	ДанныеШаблона.Вставить("organization", 		Шаблон.Организация);
	ДанныеШаблона.Вставить("subdivision", 		Шаблон.Подразделение);
	ДанныеШаблона.Вставить("accessLevel", 		Шаблон.ГрифДоступа);
	ДанныеШаблона.Вставить("performanceTerm", 	Шаблон.ДлительностьИсполнения);
	ДанныеШаблона.Вставить("activityMatter", 	Шаблон.ВопросДеятельности);
	ДанныеШаблона.Вставить("responsible", 		Шаблон.Ответственный);
	ДанныеШаблона.Вставить("project",			Шаблон.Проект);
	ДанныеШаблона.Вставить("blockDerivedDocuments",
		Шаблон.ЗапретитьИзменятьРеквизитыИзШаблона);
	
КонецПроцедуры

Функция ДоступнаРегистрация(Документ)
	
	Доступность = Ложь;
	
	Если ТипЗнч(Документ) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		ИспользоватьВидыДокументов = Делопроизводство.ИспользоватьВидыВнутреннихДокументов();
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда
		ИспользоватьВидыДокументов = Делопроизводство.ИспользоватьВидыВходящихДокументов();
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда
		ИспользоватьВидыДокументов = Делопроизводство.ИспользоватьВидыИсходящихДокументов();
	Иначе
		Возврат Доступность;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда
		ЭтоДелопроизводитель = Истина;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		ЭтоДелопроизводитель = РольДоступна("РегистрацияВходящихДокументов");
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		ЭтоДелопроизводитель = РольДоступна("РегистрацияИсходящихДокументов");
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ЭтоДелопроизводитель = РольДоступна("РегистрацияВнутреннихДокументов");
	КонецЕсли;
	
	Если ЭтоДелопроизводитель Тогда
		
		Доступность = Истина;
		
		Если (ЗначениеЗаполнено(Документ.ВидДокумента) Или (Не ИспользоватьВидыДокументов))
				И ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
			// документ зарегистрирован
			Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Доступность;
	
КонецФункции

// Заполняет документ значениями свойство объекта XDTO, общими для всех типов документов
//
// Параметры:
//   ДокументОбъект - СправочникОбъект.<...>Документ - заполняемый документ
//   ОбъектXDTO - ОбъектXDTO - источник данных для заполнения
//
Процедура ЗаполнитьОбщиеДанныеДокумента(ДокументОбъект, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Заголовок, ОбъектXDTO, "title");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Содержание, ОбъектXDTO, "summary");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.СрокИсполнения, ОбъектXDTO, "performanceDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.РегистрационныйНомер, ОбъектXDTO, "regNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ДатаРегистрации, ОбъектXDTO, "regDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Сумма, ОбъектXDTO, "sum");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Валюта, ОбъектXDTO, "currency");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Организация, ОбъектXDTO, "organization");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Подразделение, ОбъектXDTO, "subdivision");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ГрифДоступа, ОбъектXDTO, "accessLevel");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Ответственный, ОбъектXDTO, "responsible");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ВопросДеятельности, ОбъектXDTO, "activityMatter");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Проект, ОбъектXDTO, "project");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Шаблон, ОбъектXDTO, "template");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ПометкаУдаления, ОбъектXDTO, "deletionMark");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.КоличествоЛистов, ОбъектXDTO, "numberOfSheets");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.КоличествоПриложений, ОбъектXDTO, "numberOfAnnexes");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ЛистовВПриложениях, ОбъектXDTO, "sheetsInAnnexes");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.КоличествоЭкземпляров, ОбъектXDTO, "numberOfCopies");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.НоменклатураДел, ОбъектXDTO, "caseFilesCatalog");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Дело, ОбъектXDTO, "caseFileDossier");
	
КонецПроцедуры

// Заполняет и записывает состояние документа по данным объекта XDTO.
//
// Параметры:
//   Документ - СправочникОбъект.ВнутренниеДокументы,
//              СправочникОбъект.ВходящиеДокументы,
//              СправочникОбъект.ИсходящиеДокументы
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMDocument.
//   ТекущаяДата - Дата - Текущая дата.
//   ТекущийПользователь - СправочникСсылка.Пользователи - Текущий пользователь.
//
Процедура ЗаполнитьСостоянияДокумента(Документ, ОбъектXDTO, ТекущаяДата, ТекущийПользователь)
	
	МассивСостояний = Делопроизводство.ПолучитьВсеСостоянияДокумента(Документ.Ссылка).ВыгрузитьКолонку("Состояние");
	КоличествоИзмененныхСостояний = 0;
	
	Если ОбъектXDTO.Установлено("status") Тогда
		СостояниеДокумента = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СостояниеДокумента, ОбъектXDTO, "status");
		Если Не ЗначениеЗаполнено(СостояниеДокумента) Тогда 
			СостояниеДокумента = Перечисления.СостоянияДокументов.НаРегистрации;
		КонецЕсли;
		
		Если МассивСостояний.Найти(СостояниеДокумента) = Неопределено Тогда
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Документ.Ссылка,
				ТекущаяДата + КоличествоИзмененныхСостояний,
				СостояниеДокумента,
				ТекущийПользователь);
			КоличествоИзмененныхСостояний = КоличествоИзмененныхСостояний + 1;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСостояний = Новый Соответствие;
	СоответствиеСостояний.Вставить("Согласование",	"statusApproval");
	СоответствиеСостояний.Вставить("Утверждение",	"statusConfirmation");
	СоответствиеСостояний.Вставить("Подписание",	"statusSigning");
	СоответствиеСостояний.Вставить("Регистрация",	"statusRegistration");
	СоответствиеСостояний.Вставить("Рассмотрение",	"statusConsideration");
	СоответствиеСостояний.Вставить("Исполнение",	"statusPerformance");
	
	Для Каждого Строка Из СоответствиеСостояний Цикл
		ИмяСостояния = Строка.Ключ;
		ИмяСвойства = Строка.Значение;
		ТекущееСостояние = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(Документ.Ссылка, "Состояние" + ИмяСостояния);
		Если ОбъектXDTO.Установлено(ИмяСвойства) Тогда
			НовоеСостояние = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO[ИмяСвойства].objectId);
			Если НовоеСостояние = Неопределено Тогда
				НовоеСостояние = ОбработкаЗапросовXDTO.ЗначениеПеречисленияПоИмениИлиСинониму(
					"СостоянияДокументов",
					ОбъектXDTO[ИмяСвойства].name);
			КонецЕсли;
			Если ТекущееСостояние.Состояние <> НовоеСостояние Тогда
				Если Не ЗначениеЗаполнено(НовоеСостояние) Тогда
					Делопроизводство.ОчиститьСостояниеДокумента(Документ.Ссылка, ТекущееСостояние.Состояние)
				Иначе
					Делопроизводство.ЗаписатьСостояниеДокумента(
						Документ.Ссылка,
						ТекущаяДата + КоличествоИзмененныхСостояний,
						НовоеСостояние,
						ТекущийПользователь);
					КоличествоИзмененныхСостояний = КоличествоИзмененныхСостояний + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтороныДокумента(ДокументОбъект, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "partyRows") Тогда
		
		ДокументОбъект.Стороны.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.partyRows.rows Цикл
			Строка = ДокументОбъект.Стороны.Добавить();
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ДатаПодписи, СтрокаXDTO, "signatureDate");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Комментарий, СтрокаXDTO, "comment");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Наименование, СтрокаXDTO, "description");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Подписан, СтрокаXDTO, "signed");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Установил, СтрокаXDTO, "setBy");
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "party") Тогда
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.party, "correspondent") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Сторона, СтрокаXDTO.party, "correspondent");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.party, "user") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Сторона, СтрокаXDTO.party, "user");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.party, "organization") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Сторона, СтрокаXDTO.party, "organization");
				Иначе
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Сторона, СтрокаXDTO, "party");
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "contact") Тогда
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.contact, "contactName") Тогда
					Строка.КонтактноеЛицо = СтрокаXDTO.contact.contactName;
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.contact, "user") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.КонтактноеЛицо, СтрокаXDTO.contact, "user");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.contact, "contactPerson") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.КонтактноеЛицо, СтрокаXDTO.contact, "contactPerson");
				Иначе
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.КонтактноеЛицо, СтрокаXDTO, "contact");
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "signedBy") Тогда
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.signedBy, "contactName") Тогда
					Строка.Подписал = СтрокаXDTO.signedBy.contactName;
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.signedBy, "user") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Подписал, СтрокаXDTO.signedBy, "user");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.signedBy, "contactPerson") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Подписал, СтрокаXDTO.signedBy, "contactPerson");
				Иначе
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Подписал, СтрокаXDTO, "signedBy");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			Если ДокументОбъект.Стороны.Количество() = 0 Тогда
				СторонаОрганизация = ДокументОбъект.Стороны.Добавить();
			ИначеЕсли ТипЗнч(ДокументОбъект.Стороны[0].Сторона) <> Тип("СправочникСсылка.Организации") Тогда
				СторонаОрганизация = ДокументОбъект.Стороны.Вставить(0);
			Иначе
				Для Каждого СтрСторона Из ДокументОбъект.Стороны Цикл
					Если ТипЗнч(СтрСторона.Сторона) = Тип("СправочникСсылка.Организации") Тогда
						СторонаОрганизация = СтрСторона;
						Если СтрСторона.Сторона = ДокументОбъект.Организация Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СторонаОрганизация.Сторона = ДокументОбъект.Организация;
			СторонаОрганизация.КонтактноеЛицо = ДокументОбъект.Утвердил;
			СторонаОрганизация.Подписал = ДокументОбъект.Утвердил;
		Иначе
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				МассивДляУдаления = Новый Массив;
				Для Каждого СтрСторона Из ДокументОбъект.Стороны Цикл
					Если ТипЗнч(СтрСторона.Сторона) = Тип("СправочникСсылка.Организации") Тогда
						МассивДляУдаления.Добавить(СтрСторона);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрСторона Из МассивДляУдаления Цикл
					ДокументОбъект.Стороны.Удалить(СтрСторона);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ДокументОбъект.Стороны.Количество() = 0 Тогда
				СторонаКонтрагент = ДокументОбъект.Стороны.Добавить();
			Иначе
				СторонаКонтрагент = Неопределено;
				Для Каждого СтрСторона Из ДокументОбъект.Стороны Цикл
					Если ТипЗнч(СтрСторона.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
						СторонаКонтрагент = СтрСторона;
						Если СтрСторона.Сторона = ДокументОбъект.Контрагент Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если СторонаКонтрагент = Неопределено Тогда
					СторонаКонтрагент = ДокументОбъект.Стороны.Добавить();
				КонецЕсли;
			КонецЕсли;
			СторонаКонтрагент.Сторона = ДокументОбъект.Контрагент;
			СторонаКонтрагент.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
			СторонаКонтрагент.Подписал = ДокументОбъект.КонтактноеЛицо;
		Иначе
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				МассивДляУдаления = Новый Массив;
				Для Каждого СтрСторона Из ДокументОбъект.Стороны Цикл
					Если ТипЗнч(СтрСторона.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
						МассивДляУдаления.Добавить(СтрСторона);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрСторона Из МассивДляУдаления Цикл
					ДокументОбъект.Стороны.Удалить(СтрСторона);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентовДокумента(ДокументОбъект, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "correspondentRows") Тогда
		
		ДокументОбъект.Контрагенты.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.correspondentRows.rows Цикл
			Строка = ДокументОбъект.Контрагенты.Добавить();
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Контрагент, СтрокаXDTO, "correspondent");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.КонтактноеЛицо, СтрокаXDTO, "contact");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
				Строка.ПодписалОтКонтрагента, СтрокаXDTO, "signedFromTheCorrespondent");
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ДокументОбъект.Контрагенты.Количество() <= 1 Тогда
				ДокументОбъект.Контрагенты.Очистить();
				СтрокаКонтрагента = ДокументОбъект.Контрагенты.Добавить();
			Иначе
				СтрокаКонтрагента = ДокументОбъект.Контрагенты[0];
			КонецЕсли;
			СтрокаКонтрагента.Контрагент = ДокументОбъект.Контрагент;
			СтрокаКонтрагента.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
		Иначе
			ДокументОбъект.Контрагенты.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыДокумента(ДокументОбъект, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "productRows") Тогда
		ДокументОбъект.Товары.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.productRows.rows Цикл
			
			Строка = ДокументОбъект.Товары.Добавить();
			Строка.Номер = Строка.НомерСтроки;
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Номенклатура, СтрокаXDTO, "product");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Количество, СтрокаXDTO, "quantity");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ЕдиницаИзмерения,
				СтрокаXDTO, "measurementUnit");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Цена, СтрокаXDTO, "price");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СтавкаНДС, СтрокаXDTO, "VATRate");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СуммаНДС, СтрокаXDTO, "VAT");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Сумма, СтрокаXDTO, "total");
			
			// Заполнение по умолчанию.
			Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Строка.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Строка.Номенклатура, "ЕдиницаИзмерения");
			КонецЕсли;
			
			Если Строка.Цена = 0 И Строка.Сумма <> 0 И Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			Если Строка.Сумма = 0 И Строка.Цена <> 0 И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Цена * Строка.Количество;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак "Содержит оригиналы" для указанного документа
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, заполняемый документ
//   Документ - СправочникСсылка.<...>Документ, ссылка на источник данных
//
Процедура ЗаполнитьПризнакСодержитОригиналы(ОбъектXDTO, Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СодержитОригинал
		|ИЗ
		|	РегистрСведений.ОбщиеРеквизитыДокументов
		|ГДЕ
		|	Документ = &Документ
		|");
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектXDTO.containsScannedOriginals = Выборка.СодержитОригинал;
	Иначе
		ОбъектXDTO.containsScannedOriginals = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет коллекцию виз для указанного документа.
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, заполняемый документ.
//   Документ - СправочникСсылка.<...>Документ, ссылка на источник данных.
//   Шаблон - СправочникСсылка.Шаблоны<...>Документов, ссылка на шаблон документа.
//
Процедура ЗаполнитьВизыДокумента(ОбъектXDTO, Документ, Шаблон)
	
	Если ЗначениеЗаполнено(Документ) Тогда // существующие визы
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВизыСогласования.Ссылка КАК Ссылка,
			|	ВизыСогласования.Наименование КАК Наименование,
			|	ВЫБОР
			|		КОГДА ВизыСогласования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ВизыСогласования.РольИсполнителя.Владелец
			|		КОГДА ВизыСогласования.Исполнитель = Неопределено
			|			ТОГДА ВизыСогласования.РольИсполнителя.Владелец
			|		КОГДА  ВизыСогласования.Исполнитель ССЫЛКА Справочник.ПолныеРоли
			|			ТОГДА ВизыСогласования.Исполнитель.Владелец
			|		ИНАЧЕ
			|			ВизыСогласования.Исполнитель
			|	КОНЕЦ КАК Исполнитель,
			|	ВЫБОР
			|		КОГДА ВизыСогласования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВизыСогласования.РольИсполнителя)
			|		КОГДА ВизыСогласования.Исполнитель = Неопределено
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВизыСогласования.РольИсполнителя)
			|		ИНАЧЕ
			|			ПРЕДСТАВЛЕНИЕ(ВизыСогласования.Исполнитель)
			|	КОНЕЦ КАК ПредставлениеИсполнителя,
			|	ВизыСогласования.УстановилРезультат КАК УстановилРезультат,
			|	ВизыСогласования.ДатаИсполнения КАК Дата,
			|	ВизыСогласования.Подписана КАК Подписана,
			|	ЕСТЬNULL(Подписи.ДатаПроверкиПодписи, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПодписьПроверена,
			|	ЕСТЬNULL(Подписи.ПодписьВерна, ЛОЖЬ) КАК ПодписьВерна,
			|	ВизыСогласования.РезультатСогласования КАК Результат,
			|	ВизыСогласования.Комментарий КАК Комментарий
			|ИЗ
			|	Справочник.ВизыСогласования КАК ВизыСогласования
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК Подписи
			|		ПО (Подписи.Объект = ВизыСогласования.Ссылка)
			|ГДЕ
			|	ВизыСогласования.Документ = &Документ
			|	И НЕ ВизыСогласования.ПометкаУдаления
			|	И НЕ ВизыСогласования.Удалена
			|	И НЕ ВизыСогласования.ПомещенаВИсторию");
			
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВизаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMVisa");
			ВизаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
			ВизаXDTO.name = Выборка.Наименование;
			
			Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", Выборка.Исполнитель);
				ВизаXDTO.reviewer.name = Выборка.ПредставлениеИсполнителя;
			КонецЕсли;
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
				"addedBy", Выборка.УстановилРезультат);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
				"result", Выборка.Результат);
			
			ВизаXDTO.date = Выборка.Дата;
			ВизаXDTO.signed = Выборка.Подписана;
			ВизаXDTO.signatureChecked = Выборка.ПодписьПроверена;
			ВизаXDTO.signatureValid = Выборка.ПодписьВерна;
			ВизаXDTO.comment = Выборка.Комментарий;
			
			ОбъектXDTO.visas.Добавить(ВизаXDTO);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(Шаблон) Тогда
		
		ВизыШаблона = Новый ТаблицаЗначений;
		ВизыШаблона.Колонки.Добавить("Исполнитель");
		ВизыШаблона.Колонки.Добавить("РольИсполнителя");
		ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(Шаблон, ВизыШаблона);
		
		Для Каждого ВизаШаблона Из ВизыШаблона Цикл
			
			ПустаяСсылка = Справочники.ВизыСогласования.ПустаяСсылка();
			
			ВизаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMVisa");
			ВизаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ПустаяСсылка);
			ВизаXDTO.name = НСтр("ru = 'Виза согласования шаблона документа'");
			
			Если ТипЗнч(ВизаШаблона.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВизаШаблона.Исполнитель,
					"Владелец");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", РольИсполнителя);
			ИначеЕсли Не ЗначениеЗаполнено(ВизаШаблона.Исполнитель)
				И ЗначениеЗаполнено(ВизаШаблона.РольИсполнителя) Тогда
				РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВизаШаблона.РольИсполнителя,
					"Владелец");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", РольИсполнителя);
			Иначе
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO,
					"reviewer", ВизаШаблона.Исполнитель);
			КонецЕсли;
			
			ВизаXDTO.date = Дата(1, 1, 1);
			ВизаXDTO.signed = Ложь;
			ВизаXDTO.signatureChecked = Ложь;
			ВизаXDTO.signatureValid = Ложь;
			ВизаXDTO.comment = "";
			
			ОбъектXDTO.visas.Добавить(ВизаXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Заполняет коллекцию резолюций для указанного документа.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - заполняемый документ.
//   Документ - СправочникСсылка.ВнутреннийДокумент, СправочникСсылка.ВходящийДокумент,
//     СправочникСсылка.ИсходящийДокумент - ссылка на источник данных.
//
Процедура ЗаполнитьРезолюцииДокумента(ОбъектXDTO, Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Ссылка КАК Ссылка,
		|	Резолюции.Наименование КАК Наименование,
		|	ВЫБОР КОГДА Резолюции.АвторРезолюции ССЫЛКА Справочник.ПолныеРоли
		|		ТОГДА Резолюции.АвторРезолюции.Владелец
		|		ИНАЧЕ Резолюции.АвторРезолюции
		|	КОНЕЦ КАК АвторРезолюции,
		|	Резолюции.ВнесРезолюцию КАК ВнесРезолюцию,
		|	Резолюции.ДатаРезолюции КАК Дата,
		|	Резолюции.Подписана КАК Подписана,
		|	ЕСТЬNULL(Подписи.ДатаПроверкиПодписи, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПодписьПроверена,
		|	ЕСТЬNULL(Подписи.ПодписьВерна, ЛОЖЬ) КАК ПодписьВерна,
		|	Резолюции.ТекстРезолюции КАК Текст
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК Подписи
		|		ПО (Подписи.Объект = Резолюции.Ссылка)
		|ГДЕ
		|	Резолюции.Документ = &Документ
		|	И НЕ Резолюции.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РезолюцияXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMResolution");
		РезолюцияXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		РезолюцияXDTO.name = Выборка.Наименование;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(РезолюцияXDTO, 
			"reviewer", Выборка.АвторРезолюции);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(РезолюцияXDTO, 
			"addedBy", Выборка.ВнесРезолюцию);
		РезолюцияXDTO.date = Выборка.Дата;
		РезолюцияXDTO.signed = Выборка.Подписана;
		РезолюцияXDTO.signatureChecked = Выборка.ПодписьПроверена;
		РезолюцияXDTO.signatureValid = Выборка.ПодписьВерна;
		РезолюцияXDTO.text = Выборка.Текст;
		
		ОбъектXDTO.resolutions.Добавить(РезолюцияXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает и записывает визы согласования согласно шаблону документа.
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы,
//              СправочникСсылка.ИсходящиеДокументы - документ, созданный по шаблону.
//   Шаблон -  СправочникСсылка.ШаблоныВнутреннихДокументов,
//             СправочникСсылка.ШаблоныИсходящихДокументов - исходный шаблон.
//
Процедура ЗаписатьВизыСогласноШаблону(Документ, Шаблон)
	
	Если Не ЗначениеЗаполнено(Документ)
		Или Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ВизыШаблона = Новый ТаблицаЗначений;
	ВизыШаблона.Колонки.Добавить("Исполнитель");
	ВизыШаблона.Колонки.Добавить("РольИсполнителя");
	ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(Шаблон, ВизыШаблона);
	
	Порядок = 0;
	
	Для Каждого ВизаШаблона Из ВизыШаблона Цикл
		
		Порядок = Порядок + 1;
		
		НоваяВиза = Справочники.ВизыСогласования.СоздатьЭлемент();
		НоваяВиза.Наименование = РаботаСВизамиСогласования.ПолучитьНаименованиеВизы(Документ);
		НоваяВиза.Документ = Документ;
		НоваяВиза.Исполнитель = ВизаШаблона.Исполнитель;
		НоваяВиза.РольИсполнителя = ВизаШаблона.РольИсполнителя;
		НоваяВиза.Автор = Пользователи.ТекущийПользователь();
		НоваяВиза.Порядок = Порядок;
		НоваяВиза.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает участников рабочей группы шаблону документа.
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы,
//              СправочникСсылка.ВходящиеДокументы,
//              СправочникСсылка.ИсходящиеДокументы - документ, созданный по шаблону.
//   Шаблон -  СправочникСсылка.ШаблоныВнутреннихДокументов,
//             СправочникСсылка.ШаблоныВходящихДокументов,
//             СправочникСсылка.ШаблоныИсходящихДокументов - исходный шаблон.
//
Процедура ЗаписатьРабочуюГруппуСогласноШаблону(Документ, Шаблон)
	
	Если Не ЗначениеЗаполнено(Документ) Или Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	РабочаяГруппаШаблона = Шаблон.РабочаяГруппаДокумента.Выгрузить();
	
	Для Каждого РабочаяГруппаСтрока Из РабочаяГруппаШаблона Цикл
		
		Если Не ЗначениеЗаполнено(РабочаяГруппаСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("Строка") Тогда
			
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				РабочаяГруппаСтрока.Участник,
				Документ);
				
			Если ЗначениеАвтоподстановки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи")
					Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.СтруктураПредприятия")
					Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.РабочиеГруппы")
					Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников,
					ЗначениеАвтоподстановки,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
				
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников,
					ЗначениеАвтоподстановки.РольИсполнителя,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					
					Если ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.Пользователи")
							Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.СтруктураПредприятия")
							Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.РабочиеГруппы")
							Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент,
							РабочаяГруппаСтрока.Изменение);
						
					ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура") Тогда
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
							РабочаяГруппаСтрока.Изменение);
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
				Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
				Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'В шаблоне некорректно задан участник рабочей группы.'");
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
		Документ,
		ТаблицаУчастников,
		Истина);
	
КонецПроцедуры

// Записывает расшифровку суммы документа по статьям ДДС.
//
Процедура ЗаписатьСтатьиДДСДокумента(ДокументОбъект, ОбъектXDTO)
	
	// Заполним статьи ДДС.
	ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументОбъект.ВидДокумента, "ВестиУчетПоСтатьямДДС");
	Если ВестиУчетПоСтатьямДДС = Истина И ОбъектXDTO.Установлено("cashFlowRows") Тогда
		
		СтатьиДвиженияДенежныхСредств = Новый ТаблицаЗначений;
		СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
		СтатьиДвиженияДенежныхСредств.Колонки.Добавить("Сумма");
		СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СуммаНДС");
		
		Для Каждого СтрокаXDTO из ОбъектXDTO.cashFlowRows.rows Цикл
			Строка = СтатьиДвиженияДенежныхСредств.Добавить();
			Если Не ЗначениеЗаполнено(СтрокаXDTO.item.objectId.id) 
				И СтрокаXDTO.item.Установлено("ExternalObject") Тогда 
				Строка.СтатьяДвиженияДенежныхСредств 
					= ОбработкаЗапросовXDTOКорп.НайтиСоздатьСтатьюДвиженияДенежныхСредств(СтрокаXDTO.item);
			Иначе
				Строка.СтатьяДвиженияДенежныхСредств 
					= ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(СтрокаXDTO.item.objectId);
				КонецЕсли;
				Строка.Сумма = СтрокаXDTO.total;
				Строка.СуммаНДС = СтрокаXDTO.VAT;
		КонецЦикла;
			
		РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ЗаписатьСтатьиДокумента(
			ДокументОбъект.Ссылка, СтатьиДвиженияДенежныхСредств)
			
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает свойство двух объектов XDTO.
//
Функция СвойстваРавны(ОбъектXDTO1, ОбъектXDTO2, Свойство)
	
	Если Не ОбъектXDTO1.Установлено(Свойство)
		Или Не ОбъектXDTO2.Установлено(Свойство) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеСвойства1 = ОбъектXDTO1[Свойство.Имя];
	ЗначениеСвойства2 = ОбъектXDTO2[Свойство.Имя];
	ТипСвойства1 = ТипЗнч(ЗначениеСвойства1);
	ТипСвойства2 = ТипЗнч(ЗначениеСвойства2);
	
	Если ТипСвойства1 <> ТипСвойства2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипСвойства1 = Тип("Неопределено") Тогда
		Возврат Истина;
	ИначеЕсли ТипСвойства1 = Тип("ОбъектXDTO") Тогда
		Возврат ОбъектыXDTOРавны(ЗначениеСвойства1, ЗначениеСвойства2);
	ИначеЕсли ТипСвойства1 = Тип("СписокXDTO") Тогда
		Возврат СпискиXDTOРавны(ЗначениеСвойства1, ЗначениеСвойства2);
	Иначе
		Если Не ЗначениеЗаполнено(ЗначениеСвойства1) И Не ЗначениеЗаполнено(ЗначениеСвойства2) Тогда
			Возврат Истина;
		КонецЕсли;
		Возврат ЗначениеСвойства1 = ЗначениеСвойства2;
	КонецЕсли;
	
КонецФункции

// Сравнивает два списка XDTO.
//
Функция СпискиXDTOРавны(СписокXDTO1, СписокXDTO2)
	
	КоличествоОбъектовВСпискеXDTO1 = СписокXDTO1.Количество();
	КоличествоОбъектовВСпискеXDTO2 = СписокXDTO2.Количество();
	
	Если КоличествоОбъектовВСпискеXDTO1 <> КоличествоОбъектовВСпискеXDTO2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Номер = 0 По (КоличествоОбъектовВСпискеXDTO1 - 1) Цикл
		Если Не ОбъектыXDTOРавны(СписокXDTO1[Номер], СписокXDTO2[Номер]) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Сравнивает два объекта XDTO.
//
Функция ОбъектыXDTOРавны(ОбъектXDTO1, ОбъектXDTO2)
	
	КоллекцияСвойствОбъектаXDTO1 = ОбъектXDTO1.Свойства();
	КоллекцияСвойствОбъектаXDTO2 = ОбъектXDTO2.Свойства();
	
	Если КоллекцияСвойствОбъектаXDTO1.Количество() <> КоллекцияСвойствОбъектаXDTO2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СвойствоОбъектаXDTO1 Из КоллекцияСвойствОбъектаXDTO1 Цикл
		Если КоллекцияСвойствОбъектаXDTO2.Получить(СвойствоОбъектаXDTO1.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Не СвойстваРавны(ОбъектXDTO1, ОбъектXDTO2, СвойствоОбъектаXDTO1) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьЗаполнениеСтатейДДС(Документ, ОбъектXDTO, ТекстСообщения)
	
	ТекстСообщения = "";
	ЕстьОшибки = Ложь;
	
	Если ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		
		ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента,
			"ВестиУчетПоСтатьямДДС");
		
		Если ВестиУчетПоСтатьямДДС И ОбъектXDTO.Установлено("cashFlowRows") Тогда
			СтатьиДвиженияДенежныхСредств = Новый ТаблицаЗначений;
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
			СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
			
			ИтогСумма = 0;
			Для Каждого Строка Из ОбъектXDTO.cashFlowRows.rows Цикл
				НоваяСтрока = СтатьиДвиженияДенежныхСредств.Добавить();
				НоваяСтрока.Сумма = Строка.total;
				НоваяСтрока.СуммаНДС = Строка.VAT;
				ИтогСумма = ИтогСумма + Строка.total;
			КонецЦикла;
			
			Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не выбрана статья движения денежных средств'") + Символы.ПС;
				ЕстьОшибки = Истина;
			Иначе
				Если Документ.Сумма <> ИтогСумма Тогда
					ТекстСообщения = ТекстСообщения
						+ НСтр("ru = 'Сумма не соответствует ее расшифровке по статьям движения денежных средств'")
						+ Символы.ПС;
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция ЗапросСпискаДелХраненияДокументов(Параметры)
	
	ЗапросРезультат = Новый Запрос;
	ЗапросРезультат.Текст =
		"ВЫБРАТЬ
		|	СправочникДела.Ссылка КАК Ссылка,
		|	СправочникДела.Наименование КАК Наименование,
		|	СправочникДела.ДатаНачала КАК ДатаНачала,
		|	СправочникДела.ДатаОкончания КАК ДатаОкончания,
		|	СправочникДела.ДелоЗакрыто КАК ДелоЗакрыто,
		|	СправочникДела.КоличествоЛистов КАК КоличествоЛистов,
		|	СправочникДела.Комментарий КАК Комментарий,
		|	СправочникДела.НоменклатураДел КАК НоменклатураДел,
		|	СправочникДела.НомерТома КАК НомерТома,
		|	СправочникДела.Организация КАК Организация,
		|	СправочникДела.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК СправочникДела
		|ГДЕ
		|	&УсловиеОрганизация
		|	И &УсловиеПодразделение
		|	И &УсловиеНоменклатураДел
		|	И НЕ СправочникДела.ДелоЗакрыто
		|	И НЕ СправочникДела.ПометкаУдаления
		|	И (&ДатаРегистрации >= НАЧАЛОПЕРИОДА(СправочникДела.ДатаНачала, ДЕНЬ)
		|			ИЛИ СправочникДела.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
		|	И (&ДатаРегистрации <= КОНЕЦПЕРИОДА(СправочникДела.ДатаОкончания, ДЕНЬ)
		|			ИЛИ СправочникДела.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеОрганизация",
			"СправочникДела.Организация = &Организация");
		ЗапросРезультат.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеОрганизация", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ДатаРегистрации) Тогда
		ДатаРегистрации = Параметры.ДатаРегистрации;
	Иначе
		ДатаРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;
	ЗапросРезультат.УстановитьПараметр("ДатаРегистрации", ДатаРегистрации);
	
	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		ПустоеИПодразделение = Делопроизводство.ПолучитьПодразделениеИПустуюСсылку(Параметры.Подразделение);
		
		// если для текущего подразделения нет дел, то даем списывать в родительское
		МассивЧастейЗапроса = Новый Массив;
		Для Индекс = 0 По Параметры.Подразделение.Уровень() Цикл
			Шаблон =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЕстьДело,
				|	СтруктураПредприятия.Ссылка.Родитель КАК Подразделение
				|ИЗ
				|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|		ПО ДелаХраненияДокументов.Подразделение = СтруктураПредприятия.Ссылка.Родитель
				|		И НЕ СтруктураПредприятия.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|ГДЕ
				|	СтруктураПредприятия.Ссылка = &Подразделение
				|	И (&ДатаРегистрации >= НАЧАЛОПЕРИОДА(ДелаХраненияДокументов.ДатаНачала, ДЕНЬ)
				|			ИЛИ ДелаХраненияДокументов.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
				|	И (&ДатаРегистрации <= КОНЕЦПЕРИОДА(ДелаХраненияДокументов.ДатаОкончания, ДЕНЬ)
				|			ИЛИ ДелаХраненияДокументов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";
			Если Индекс = 0 Тогда
				Шаблон = СтрЗаменить(Шаблон, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
				Шаблон = СтрЗаменить(Шаблон, ".Родитель", "");
			КонецЕсли;
			Если Индекс > 1 Тогда
				СтрРодитель = "";
				Для Номер = 1 По Индекс Цикл
					СтрРодитель = СтрРодитель + ".Родитель";
				КонецЦикла;
				Шаблон = СтрЗаменить(Шаблон, ".Родитель", СтрРодитель);
			КонецЕсли;
			МассивЧастейЗапроса.Добавить(Шаблон);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(МассивЧастейЗапроса,
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
		Запрос.УстановитьПараметр("ДатаРегистрации", ДатаРегистрации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ПустоеИПодразделение.Найти(Выборка.Подразделение) = Неопределено Тогда
			ПустоеИПодразделение.Добавить(Выборка.Подразделение);
		КонецЕсли;
		
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПодразделение",
			"СправочникДела.Подразделение В (&МассивПодразделений)");
		ЗапросРезультат.УстановитьПараметр("МассивПодразделений", ПустоеИПодразделение);
	Иначе
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПодразделение", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НоменклатураДел) Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеНоменклатураДел",
			"СправочникДела.ОтноситсяКНоменклатуреДел.НоменклатураДел = &НоменклатураДел
			|	И СправочникДела.НоменклатураДел = &НоменклатураДел");
		ЗапросРезультат.УстановитьПараметр("НоменклатураДел", Параметры.НоменклатураДел);
	Иначе
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеНоменклатураДел", "Истина");
		
		Запрос = Новый Запрос;
		
		ПереданВидДокумента = Ложь;
		Если ЗначениеЗаполнено(Параметры.ВидДокумента) Тогда
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ДелаХраненияДокументов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураДел.ВидыДокументов КАК НоменклатураДелВидыДокументов
				|		ПО (НоменклатураДелВидыДокументов.Ссылка = ДелаХраненияДокументов.НоменклатураДел)
				|			И (НоменклатураДелВидыДокументов.ВидДокумента В ИЕРАРХИИ (&ВидДокумента))
				|ГДЕ
				|	НЕ ДелаХраненияДокументов.ПометкаУдаления
				|	И НЕ ДелаХраненияДокументов.ДелоЗакрыто";
			Запрос.Текст = Запрос.Текст + ";";
			Запрос.УстановитьПараметр("ВидДокумента", Параметры.ВидДокумента);
			
			ПереданВидДокумента = Истина;
		КонецЕсли;
		
		ПереданКонтрагент = Ложь;
		Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
			
			Запрос.Текст = Запрос.Текст +
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ДелаХраненияДокументов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураДел.Контрагенты КАК НоменклатураДелКонтрагенты
				|		ПО (НоменклатураДелКонтрагенты.Ссылка = ДелаХраненияДокументов.НоменклатураДел)
				|			И (НоменклатураДелКонтрагенты.Контрагент В ИЕРАРХИИ (&Контрагент))
				|ГДЕ
				|	НЕ ДелаХраненияДокументов.ПометкаУдаления
				|	И НЕ ДелаХраненияДокументов.ДелоЗакрыто";
			Запрос.Текст = Запрос.Текст + ";";
			Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
			
			ПереданКонтрагент = Истина;
		КонецЕсли;
		
		ПереданВопросДеятельности = Ложь;
		Если ЗначениеЗаполнено(Параметры.ВопросДеятельности) Тогда
			Запрос.Текст = Запрос.Текст +
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ДелаХраненияДокументов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураДел.ВопросыДеятельности КАК НоменклатураДелВопросыДеятельности
				|		ПО (НоменклатураДелВопросыДеятельности.Ссылка = ДелаХраненияДокументов.НоменклатураДел)
				|			И (НоменклатураДелВопросыДеятельности.ВопросДеятельности В ИЕРАРХИИ (&ВопросДеятельности))
				|ГДЕ
				|	НЕ ДелаХраненияДокументов.ПометкаУдаления
				|	И НЕ ДелаХраненияДокументов.ДелоЗакрыто";
			Запрос.Текст = Запрос.Текст + ";";
			Запрос.УстановитьПараметр("ВопросДеятельности", Параметры.ВопросДеятельности);
			
			ПереданВопросДеятельности = Истина;
		КонецЕсли;
		
		Если Запрос.Текст <> "" Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Параметры.Организация) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"НЕ ДелаХраненияДокументов.ПометкаУдаления",
					"НЕ ДелаХраненияДокументов.ПометкаУдаления И (Организация = &Организация) ");
				Запрос.УстановитьПараметр("Организация", Параметры.Организация);
			КонецЕсли;
			
			Результаты = Запрос.ВыполнитьПакет();
			
			ДелаДляВыбораПоВидуДок = Неопределено;
			Если ПереданВидДокумента Тогда
				ДелаДляВыбораПоВидуДок = Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
			КонецЕсли;
			
			ДелаДляВыбораПоКорр = Неопределено;
			Если ПереданКонтрагент Тогда 
				Если ПереданВидДокумента Тогда 
					ДелаДляВыбораПоКорр = Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
				Иначе
					ДелаДляВыбораПоКорр = Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
				КонецЕсли;
			КонецЕсли;
			
			ДелаДляВыбораПоВопрДеят = Неопределено;
			Если ПереданВопросДеятельности Тогда
				Если ПереданВидДокумента И ПереданКонтрагент Тогда
					ДелаДляВыбораПоВопрДеят = Результаты[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
				ИначеЕсли ПереданВидДокумента  Тогда
					ДелаДляВыбораПоВопрДеят = Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
				ИначеЕсли ПереданКонтрагент Тогда
					ДелаДляВыбораПоВопрДеят = Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
				Иначе
					ДелаДляВыбораПоВопрДеят = Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДелаДляВыбораПоВидуДок = Неопределено
				И ДелаДляВыбораПоКорр = Неопределено
				И ДелаДляВыбораПоВопрДеят = Неопределено Тогда
			Возврат ЗапросРезультат;
		КонецЕсли;
		
		Если ДелаДляВыбораПоВидуДок = Неопределено Тогда
			ДелаДляВыбораПоВидуДок = Новый Массив;
		КонецЕсли;
		
		Если ДелаДляВыбораПоКорр = Неопределено Тогда
			ДелаДляВыбораПоКорр = Новый Массив;
		КонецЕсли;
		
		Если ДелаДляВыбораПоВопрДеят = Неопределено Тогда
			ДелаДляВыбораПоВопрДеят = Новый Массив;
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДелаХраненияДокументов.Ссылка КАК Ссылка,
			|	1 КАК Номер
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	ДелаХраненияДокументов.Ссылка В(&ДелаДляВыбораПоВидуДок)
			|	И ДелаХраненияДокументов.Ссылка В(&ДелаДляВыбораПоКорр)
			|	И ДелаХраненияДокументов.Ссылка В(&ДелаДляВыбораПоВопрДеят)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДелаХраненияДокументов.Ссылка,
			|	2
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	(ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоВидуДок)
			|				И ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоКорр)
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.ВопросыДеятельностиЗаполнены
			|			ИЛИ ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоВидуДок)
			|				И ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоВопрДеят)
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.КонтрагентыЗаполнены
			|			ИЛИ ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоКорр)
			|				И ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоВопрДеят)
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.ВидыДокументовЗаполнены)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДелаХраненияДокументов.Ссылка,
			|	3
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	(ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоВидуДок)
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.КонтрагентыЗаполнены
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.ВопросыДеятельностиЗаполнены
			|			ИЛИ ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоКорр)
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.ВидыДокументовЗаполнены
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.ВопросыДеятельностиЗаполнены
			|			ИЛИ ДелаХраненияДокументов.Ссылка В (&ДелаДляВыбораПоВопрДеят)
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.ВидыДокументовЗаполнены
			|				И НЕ ДелаХраненияДокументов.НоменклатураДел.КонтрагентыЗаполнены)";
		Запрос.УстановитьПараметр("ДелаДляВыбораПоВопрДеят", ДелаДляВыбораПоВопрДеят);
		Запрос.УстановитьПараметр("ДелаДляВыбораПоВидуДок", ДелаДляВыбораПоВидуДок);
		Запрос.УстановитьПараметр("ДелаДляВыбораПоКорр", ДелаДляВыбораПоКорр);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Найти(1, "Номер") <> Неопределено Тогда
			ЕстьНомер = 1;
		ИначеЕсли Результат.Найти(2, "Номер") <> Неопределено Тогда
			ЕстьНомер = 2;
		ИначеЕсли Результат.Найти(3, "Номер") <> Неопределено Тогда
			ЕстьНомер = 3;
		Иначе
			ЕстьНомер = 0;
		КонецЕсли;
		
		Если ЕстьНомер > 0 Тогда
			ДелаДляВыбора = Новый Массив;
			Для Каждого Строка Из Результат Цикл
				Если Строка.Номер = ЕстьНомер Тогда
					ДелаДляВыбора.Добавить(Строка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			ЗапросРезультат.Текст = ЗапросРезультат.Текст + " И СправочникДела.Ссылка В (&ДелаДляВыбора) ";
			ЗапросРезультат.УстановитьПараметр("ДелаДляВыбора", ДелаДляВыбора);
		Иначе
			ЗапросРезультат.Текст = ЗапросРезультат.Текст +
				"	И НЕ СправочникДела.НоменклатураДел.ВидыДокументовЗаполнены
				|	И НЕ СправочникДела.НоменклатураДел.КонтрагентыЗаполнены
				|	И НЕ СправочникДела.НоменклатураДел.ВопросыДеятельностиЗаполнены";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗапросРезультат;
	
КонецФункции

Функция ЗапросСпискаНоменклатурыДел(Параметры)
	
	ЗапросРезультат = Новый Запрос;
	ЗапросРезультат.Текст =
		"ВЫБРАТЬ
		|	НоменклатураДел.Ссылка КАК Ссылка,
		|	НоменклатураДел.Наименование КАК Наименование,
		|	НоменклатураДел.Год КАК Год,
		|	НоменклатураДел.ПолноеНаименование КАК ПолноеНаименование,
		|	НоменклатураДел.Индекс КАК Индекс,
		|	НоменклатураДел.Раздел КАК Раздел,
		|	НоменклатураДел.Организация КАК Организация,
		|	НоменклатураДел.СрокХранения КАК СрокХранения,
		|	НоменклатураДел.НомераСтатей КАК НомераСтатей,
		|	НоменклатураДел.ОтметкаЭПК КАК ОтметкаЭПК,
		|	НоменклатураДел.Примечание КАК Примечание,
		|	НоменклатураДел.ВидыДокументовЗаполнены КАК ВидыДокументовЗаполнены,
		|	НоменклатураДел.КонтрагентыЗаполнены КАК КонтрагентыЗаполнены,
		|	НоменклатураДел.ВопросыДеятельностиЗаполнены КАК ВопросыДеятельностиЗаполнены,
		|	НоменклатураДел.КатегорияДела КАК КатегорияДела
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	&УсловиеОрганизация
		|	И &УсловиеПодразделение
		|	И НЕ НоменклатураДел.ПометкаУдаления
		|	И (НоменклатураДел.Год = &Год
		|			ИЛИ &Год = 0)";
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеОрганизация",
			"НоменклатураДел.Организация = &Организация");
		ЗапросРезультат.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеОрганизация", "Истина");
	КонецЕсли;
	
	ЗапросРезультат.УстановитьПараметр("Год", Параметры.Год);
	
	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		ПустоеИПодразделение = Делопроизводство.ПолучитьПодразделениеИПустуюСсылку(Параметры.Подразделение);
		
		// если для текущего подразделения нет дел, то даем списывать в родительское
		МассивЧастейЗапроса = Новый Массив;
		Для Индекс = 0 По Параметры.Подразделение.Уровень() Цикл
			Шаблон =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЕстьДело,
				|	СтруктураПредприятия.Ссылка.Родитель КАК Подразделение
				|ИЗ
				|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|		ПО РазделыНоменклатурыДел.Подразделение = СтруктураПредприятия.Ссылка.Родитель
				|		И НЕ СтруктураПредприятия.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|ГДЕ
				|	СтруктураПредприятия.Ссылка = &Подразделение
				|	И РазделыНоменклатурыДел.Год = &Год";
			Если Индекс = 0 Тогда
				Шаблон = СтрЗаменить(Шаблон, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
				Шаблон = СтрЗаменить(Шаблон, ".Родитель", "");
			КонецЕсли;
			Если Индекс > 1 Тогда
				СтрРодитель = "";
				Для Номер = 1 По Индекс Цикл
					СтрРодитель = СтрРодитель + ".Родитель";
				КонецЦикла;
				Шаблон = СтрЗаменить(Шаблон, ".Родитель", СтрРодитель);
			КонецЕсли;
			МассивЧастейЗапроса.Добавить(Шаблон);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(МассивЧастейЗапроса,
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
		Запрос.УстановитьПараметр("Год", Параметры.Год);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ПустоеИПодразделение.Найти(Выборка.Подразделение) = Неопределено Тогда
			ПустоеИПодразделение.Добавить(Выборка.Подразделение);
		КонецЕсли;
		
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПодразделение",
			"НоменклатураДел.Раздел.Подразделение В (&МассивПодразделений)");
		ЗапросРезультат.УстановитьПараметр("МассивПодразделений", ПустоеИПодразделение);
	Иначе
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПодразделение", "Истина");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ПереданВидДокумента = Ложь;
	Если ЗначениеЗаполнено(Параметры.ВидДокумента) Тогда
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатураДел.ВидыДокументов
			|ГДЕ
			|	ВидДокумента В ИЕРАРХИИ(&ВидДокумента)
			|	И НЕ Ссылка.ПометкаУдаления";
		Запрос.Текст = Запрос.Текст + ";";
		Запрос.УстановитьПараметр("ВидДокумента", Параметры.ВидДокумента);
		
		ПереданВидДокумента = Истина;
	КонецЕсли;
	
	ПереданКонтрагент = Ложь;
	Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатураДел.Контрагенты
			|ГДЕ
			|	Контрагент В ИЕРАРХИИ(&Контрагент)
			|	И НЕ Ссылка.ПометкаУдаления";
		Запрос.Текст = Запрос.Текст + ";";
		Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
		
		ПереданКонтрагент = Истина;
	КонецЕсли;
	
	ПереданВопросДеятельности = Ложь;
	Если ЗначениеЗаполнено(Параметры.ВопросДеятельности) Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатураДел.ВопросыДеятельности
			|ГДЕ
			|	ВопросДеятельности В ИЕРАРХИИ(&ВопросДеятельности)
			|	И НЕ Ссылка.ПометкаУдаления";
		Запрос.Текст = Запрос.Текст + ";";
		Запрос.УстановитьПараметр("ВопросДеятельности", Параметры.ВопросДеятельности);
		
		ПереданВопросДеятельности = Истина;
	КонецЕсли;
	
	Если Запрос.Текст <> "" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
				И ЗначениеЗаполнено(Параметры.Организация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ Ссылка.ПометкаУдаления",
				"НЕ Ссылка.ПометкаУдаления И (Ссылка.Организация = &Организация)");
			Запрос.УстановитьПараметр("Организация", Параметры.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Год) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ Ссылка.ПометкаУдаления",
				"НЕ Ссылка.ПометкаУдаления И (Ссылка.Год = &Год)");
			Запрос.УстановитьПараметр("Год", Параметры.Год);
		КонецЕсли;
		
		Результаты = Запрос.ВыполнитьПакет();
		
		НДДляВыбораПоВидуДок = Неопределено;
		Если ПереданВидДокумента Тогда
			НДДляВыбораПоВидуДок = Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		НДДляВыбораПоКорр = Неопределено;
		Если ПереданКонтрагент Тогда
			Если ПереданВидДокумента Тогда
				НДДляВыбораПоКорр = Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
			Иначе
				НДДляВыбораПоКорр = Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
			КонецЕсли;
		КонецЕсли;
		
		НДДляВыбораПоВопрДеят = Неопределено;
		Если ПереданВопросДеятельности Тогда
			Если ПереданВидДокумента И ПереданКонтрагент Тогда
				НДДляВыбораПоВопрДеят = Результаты[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
			ИначеЕсли ПереданВидДокумента  Тогда 
				НДДляВыбораПоВопрДеят = Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
			ИначеЕсли ПереданКонтрагент Тогда 
				НДДляВыбораПоВопрДеят = Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
			Иначе
				НДДляВыбораПоВопрДеят = Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НДДляВыбораПоВидуДок = Неопределено
			И НДДляВыбораПоКорр = Неопределено
			И НДДляВыбораПоВопрДеят = Неопределено Тогда
		Возврат ЗапросРезультат;
	КонецЕсли;
	
	Если НДДляВыбораПоВидуДок = Неопределено Тогда
		НДДляВыбораПоВидуДок = Новый Массив;
	КонецЕсли;
	
	Если НДДляВыбораПоКорр = Неопределено Тогда
		НДДляВыбораПоКорр = Новый Массив;
	КонецЕсли;
	
	Если НДДляВыбораПоВопрДеят = Неопределено Тогда
		НДДляВыбораПоВопрДеят = Новый Массив;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Номер
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	НоменклатураДел.Ссылка В(&НДДляВыбораПоВидуДок)
		|	И НоменклатураДел.Ссылка В(&НДДляВыбораПоКорр)
		|	И НоменклатураДел.Ссылка В(&НДДляВыбораПоВопрДеят)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	2
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	(НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
		|				И НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
		|				И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены
		|			ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
		|				И НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят)
		|				И НЕ НоменклатураДел.КонтрагентыЗаполнены
		|			ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
		|				И НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят)
		|				И НЕ НоменклатураДел.ВидыДокументовЗаполнены)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	3
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	(НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
		|				И НЕ НоменклатураДел.КонтрагентыЗаполнены
		|				И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены
		|			ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
		|				И НЕ НоменклатураДел.ВидыДокументовЗаполнены
		|				И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены
		|			ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят)
		|				И НЕ НоменклатураДел.ВидыДокументовЗаполнены
		|				И НЕ НоменклатураДел.КонтрагентыЗаполнены)";
	Запрос.УстановитьПараметр("НДДляВыбораПоВопрДеят", НДДляВыбораПоВопрДеят);
	Запрос.УстановитьПараметр("НДДляВыбораПоВидуДок", НДДляВыбораПоВидуДок);
	Запрос.УстановитьПараметр("НДДляВыбораПоКорр", НДДляВыбораПоКорр);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
	Если Результат.Найти(1) <> Неопределено Тогда
		ЗапросРезультат.Текст = ЗапросРезультат.Текст +
			"	И НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
			|	И НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
			|	И НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят) ";
		
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоВопрДеят", НДДляВыбораПоВопрДеят);
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоВидуДок", НДДляВыбораПоВидуДок);
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоКорр", НДДляВыбораПоКорр);
		
	ИначеЕсли Результат.Найти(2) <> Неопределено Тогда
		ЗапросРезультат.Текст = ЗапросРезультат.Текст +
			"	И (НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
			|			И НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
			|			И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены
			|		ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
			|			И НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят)
			|			И НЕ НоменклатураДел.КонтрагентыЗаполнены
			|		ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
			|			И НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят)
			|			И НЕ НоменклатураДел.ВидыДокументовЗаполнены) ";
		
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоВопрДеят", НДДляВыбораПоВопрДеят);
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоВидуДок", НДДляВыбораПоВидуДок);
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоКорр", НДДляВыбораПоКорр);
		
	ИначеЕсли Результат.Найти(3) <> Неопределено Тогда
		ЗапросРезультат.Текст = ЗапросРезультат.Текст +
			"	И (НоменклатураДел.Ссылка В (&НДДляВыбораПоВидуДок)
			|				И НЕ НоменклатураДел.КонтрагентыЗаполнены
			|				И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены
			|			ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоКорр)
			|				И НЕ НоменклатураДел.ВидыДокументовЗаполнены
			|				И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены
			|			ИЛИ НоменклатураДел.Ссылка В (&НДДляВыбораПоВопрДеят)
			|				И НЕ НоменклатураДел.ВидыДокументовЗаполнены
			|				И НЕ НоменклатураДел.КонтрагентыЗаполнены) ";
		
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоВопрДеят", НДДляВыбораПоВопрДеят);
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоВидуДок", НДДляВыбораПоВидуДок);
		ЗапросРезультат.УстановитьПараметр("НДДляВыбораПоКорр", НДДляВыбораПоКорр);
		
	Иначе
		ЗапросРезультат.Текст = ЗапросРезультат.Текст +
			"	И НЕ НоменклатураДел.ВидыДокументовЗаполнены
			|	И НЕ НоменклатураДел.КонтрагентыЗаполнены
			|	И НЕ НоменклатураДел.ВопросыДеятельностиЗаполнены ";
		
	КонецЕсли;
	
	Возврат ЗапросРезультат;
	
КонецФункции

Функция ПроверитьВозможностьРегистрации(ДокументОбъект, СообщениеОбОшибке)
	
	Результат = Истина;
	МассивОшибок = Новый Массив;
	
	Если ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		ПроверитьВозможностьРегистрацииВнутреннегоДокумента(ДокументОбъект, Результат, МассивОшибок);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда
		ПроверитьВозможностьРегистрацииВходящегоДокумента(ДокументОбъект, Результат, МассивОшибок);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда
		ПроверитьВозможностьРегистрацииИсходящегоДокумента(ДокументОбъект, Результат, МассивОшибок);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Регистрация объекта неизвестного типа.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Поля документа не заполнены.'"));
		Результат = Ложь;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ДокументОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.РегистрационныйНомер) Тогда
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ДокументОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", ДокументОбъект.РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.РегистрационныйНомерУникален(ОбъектСтруктура) Тогда
				МассивОшибок.Добавить(НСтр("ru = 'Указанный регистрационный номер не уникален!'"));
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ДокументОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"));
		Результат = Ложь;
	КонецЕсли;
	
	СообщениеОбОшибке = СтрСоединить(МассивОшибок, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьВозможностьРегистрацииВнутреннегоДокумента(ДокументОбъект, Результат, МассивОшибок)
	
	// Проверка заполненности срока действия документа
	Если ЗначениеЗаполнено(ДокументОбъект.ВидДокумента)
			И ДокументОбъект.ВидДокумента.УчитыватьСрокДействия Тогда
		Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента",
				Новый Структура("ВидВнутреннегоДокумента", ДокументОбъект.ВидДокумента)) Тогда
			Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаДействия) Тогда
				МассивОшибок.Добавить(НСтр("ru = 'Не заполнена дата начала действия'"));
				Результат = Ложь;
			КонецЕсли;
			Если Не ДокументОбъект.Бессрочный Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияДействия) Тогда
					МассивОшибок.Добавить(НСтр("ru = 'Не заполнена дата окончания действия'"));
					Результат = Ложь;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ДокументОбъект.ПорядокПродления)Тогда
					МассивОшибок.Добавить(НСтр("ru = 'Не заполнен порядок продления'"));
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних",
			Новый Структура("ВидВнутреннегоДокумента", ДокументОбъект.ВидДокумента)) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.НоменклатураДел) Тогда
			МассивОшибок.Добавить(НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"));
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьРегистрацииВходящегоДокумента(ДокументОбъект, Результат, МассивОшибок)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВходящих",
			Новый Структура("ВидВходящегоДокумента", ДокументОбъект.ВидДокумента)) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.НоменклатураДел) Тогда
			МассивОшибок.Добавить(НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"));
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьРегистрацииИсходящегоДокумента(ДокументОбъект, Результат, МассивОшибок)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВИсходящих",
			Новый Структура("ВидИсходящегоДокумента", ДокументОбъект.ВидДокумента)) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.НоменклатураДел) Тогда
			МассивОшибок.Добавить(НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"));
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНавигационнуюСсылку(ТекстОшибки, Объект, ОбъектXDTO)
	
	ПолноеСообщение = Новый Массив;
	ПолноеСообщение.Добавить(ТекстОшибки);
	ПолноеСообщение.Добавить(СтрШаблон("Ссылка на объект в ДО: %1", ПолучитьНавигационнуюСсылку(Объект)));
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "externalObject")
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO.externalObject, "id")
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO.externalObject, "type") Тогда
		ПолноеСообщение.Добавить(СтрШаблон("Ссылка на объект в ИС: e1cib/data/%1?ref=%2%3%4%5%6",
			ОбъектXDTO.externalObject.type,
			Сред(ОбъектXDTO.externalObject.id, 20, 4),
			Сред(ОбъектXDTO.externalObject.id, 25, 12),
			Сред(ОбъектXDTO.externalObject.id, 15, 4),
			Сред(ОбъектXDTO.externalObject.id, 10, 4),
			Сред(ОбъектXDTO.externalObject.id, 1, 8)));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПолноеСообщение, Символы.ПС);
	
КонецПроцедуры

Функция СрокДействияЗаполнен(Документ)
	
	Возврат Документ.Бессрочный
		Или ЗначениеЗаполнено(Документ.ДатаНачалаДействия)
		Или ЗначениеЗаполнено(Документ.ДатаОкончанияДействия)
		Или ЗначениеЗаполнено(Документ.ПорядокПродления);
	
КонецФункции

Функция СрокДействияИзменен(Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Бессрочный КАК Бессрочный,
		|	ВнутренниеДокументы.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ВнутренниеДокументы.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ВнутренниеДокументы.ПорядокПродления КАК ПорядокПродления
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Документ.Бессрочный <> Выборка.Бессрочный
		Или Документ.ДатаНачалаДействия <> Выборка.ДатаНачалаДействия
		Или Документ.ДатаОкончанияДействия <> Выборка.ДатаОкончанияДействия
		Или Документ.ПорядокПродления <> Выборка.ПорядокПродления;
	
КонецФункции

#КонецОбласти
