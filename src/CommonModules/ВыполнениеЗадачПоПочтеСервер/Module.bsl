////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для работы механизма выполнения задач по почте
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает настройки в значения по умолчанию.
//
Процедура УстановитьНастройкиПоУмолчанию() Экспорт
	
	ВключитьИспользованиеВыполненияЗадачПоПочтеПоУмолчанию();
	УстановитьДлинуТемыОтветногоПисьмаПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(10);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(7);
	
КонецПроцедуры

// Включает использование выполнения задач по почте по умолчанию.
//
Процедура ВключитьИспользованиеВыполненияЗадачПоПочтеПоУмолчанию() Экспорт
	
	Константы.ИспользоватьВыполнениеЗадачПоПочте.Установить(Истина);
	
КонецПроцедуры

// Устанавливает длину темы ответного письма по умолчанию.
//
Процедура УстановитьДлинуТемыОтветногоПисьмаПоУмолчанию() Экспорт
	
	Константы.ДлинаТемыОтветногоПисьма.Установить(200);
	
КонецПроцедуры

// Проверяет возможность выполнения задачи по почте.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаИсполнителя - задача процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПоПочте(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизтыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса, "БизнесПроцесс, ТочкаМаршрута, Ссылка");
	
	МекнеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
		РеквизтыЗадачиПроцесса.БизнесПроцесс);
	
	Возврат МекнеджерПроцесса.ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизтыЗадачиПроцесса);
	
КонецФункции

// Формирует тему уведомления по задаче.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  ПолучательУведомления - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
		ЗадачаСсылка,
		ПолучательУведомления) Экспорт
		
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1: %2", НСтр("ru = 'Задача'", КодЯзыкаПолучателя), ЗадачаСсылка);
	
	Возврат Результат;
	
КонецФункции

// Формирует текст уведомления по задаче, текст включает всю необходимую информацию
// для возможности выполнения задачи при ответе на уведомление.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  ПолучательУведомления - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
	ЗадачаСсылка,
	ПолучательУведомления) Экспорт
	
	// Получение файлов предметов задачи
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачаСсылка);
	
	ДоступныеПредметы = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
				Предмет, ПолучательУведомления).Чтение Тогда
				
			ДоступныеПредметы.Добавить(Предмет);
		КонецЕсли;
	КонецЦикла;
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	ФайлыНеПопавшиеВУведомления = " ";
	
	Если ЗначениеЗаполнено(ДоступныеПредметы) Тогда
		МаксимальныйРазмерВложений = 
			Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Получить() * 1024 * 1024;
			
		ТекущийРазмерВложений = 0;
		
		ТаблицаФайлов = ПолучитьФайлыПредметов(ДоступныеПредметы);
		
		Если ЗначениеЗаполнено(ТаблицаФайлов) Тогда
			Для каждого СтрокаФайла из ТаблицаФайлов Цикл
				ТекущийРазмерВложений = ТекущийРазмерВложений + СтрокаФайла.ТекущаяВерсияРазмер;
			
				Если ТекущийРазмерВложений > МаксимальныйРазмерВложений Тогда
					Если ЗначениеЗаполнено(ФайлыНеПопавшиеВУведомления) Тогда
						ФайлыНеПопавшиеВУведомления = ФайлыНеПопавшиеВУведомления + Символы.ПС;
					КонецЕсли;
					ФайлыНеПопавшиеВУведомления = ФайлыНеПопавшиеВУведомления + " - " 
						+ СтрокаФайла.ИмяФайла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлыНеПопавшиеВУведомления) Тогда
			ФайлыНеПопавшиеВУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
					|Общий размер вложений превысил допустимый максимум.
					|Список файлов, которые не попали в уведомление:
					|%1
					|'", КодЯзыкаПолучателя),
				ФайлыНеПопавшиеВУведомления);
		КонецЕсли;
	КонецЕсли;
	
	СсылкиОтветов = ПолучитьОтветыВВидеСсылокMailto(ЗадачаСсылка, ПолучательУведомления);
	
	Если СсылкиОтветов.КоличествоОтветов > 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на одну из ссылок.'",
				КодЯзыкаПолучателя);
	ИначеЕсли СсылкиОтветов.КоличествоОтветов = 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на ссылку.'",
			КодЯзыкаПолучателя);
	КонецЕсли;
	
	ПредставлениеЗадачи = РаботаСУведомлениямиПереопределяемый.СформироватьПредставлениеЗадачи(
		ЗадачаСсылка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		ПолучательУведомления,
		"");
		
	ПерваяСтрокаПредставления = СтрПолучитьСтроку(ПредставлениеЗадачи,1);
	
	ОстальнаяЧастьПредставления = СтрЗаменить(
		ПредставлениеЗадачи,
		ПерваяСтрокаПредставления + "
			|",
		"");
	
	Результат = "%1
		|%2
		|
		|%3
		|
		|%4
		|
		|<B>%5</B>";
		
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Результат,
		ПерваяСтрокаПредставления,
		ОстальнаяЧастьПредставления,
		ФайлыНеПопавшиеВУведомления,
		Комментарий,
		СсылкиОтветов.Текст);
		
	Возврат Результат;
		
КонецФункции

// Формирует файлы уведомления по задаче.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  ПолучательУведомления - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  Массив - массив структур с полями:
//   * Ссылка - ссылка на файл
//   * ИмяФайла - строка
//
Функция СформироватьФайлыУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
	ЗадачаСсылка,
	ПолучательУведомления) Экспорт
	
	Файлы = Новый Массив;
	
	// Получение файлов предметов задачи
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачаСсылка);
	
	ДоступныеПредметы = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
				Предмет, ПолучательУведомления).Чтение Тогда
				
			ДоступныеПредметы.Добавить(Предмет);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДоступныеПредметы) Тогда
		
		МаксимальныйРазмерВложений = 
			Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Получить() * 1024 * 1024;
		
		ТекущийРазмерВложений = 0;
		
		ТаблицаФайлов = ПолучитьФайлыПредметов(ДоступныеПредметы);
		
		Если ЗначениеЗаполнено(ТаблицаФайлов) Тогда
			Для Каждого СтрокаФайла из ТаблицаФайлов Цикл
				ТекущийРазмерВложений = ТекущийРазмерВложений + СтрокаФайла.ТекущаяВерсияРазмер;
				Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
					СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
					ЗаполнитьЗначенияСвойств(СтруктураФайла, СтрокаФайла);
					Файлы.Добавить(СтруктураФайла);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Формирует текст ссылок MailTo для ответов на задачу.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  Получатель - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьОтветыВВидеСсылокMailto(ЗадачаСсылка, Получатель) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("КоличествоОтветов", 0);
	
	ВариантыОтветовДляВыполненияЗадачи = ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка);
	
	ВозможныеВариантыВыполнения = ВариантыОтветовДляВыполненияЗадачи.СписокВариантовОтветов;
	
	Результат.КоличествоОтветов = ВозможныеВариантыВыполнения.Количество();
		
	АдресЭлектроннойПочты =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
			"АдресЭлектроннойПочты");
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(Получатель);
	
	ТекстОтвета = "";
	Если ВариантыОтветовДляВыполненияЗадачи.ИспользоватьКомментарий Тогда
		ТекстОтвета = ТекстСообщенияДляСсылкиMailTo(КодЯзыкаПолучателя);
	КонецЕсли;
	
	Разделитель = "";
	
	Для Каждого ВариантОтвета Из ВозможныеВариантыВыполнения Цикл
		
		ТемаПисьма = ТемаСообщенияДляССылкиMailTo(
			ЗадачаСсылка, ВариантОтвета.Значение, ВариантОтвета.Представление);
		ТекстОтветаДляРезультата = ТекстОтвета;
		
		СсылкаНаОтвет = ВстроеннаяПочтаКлиентСервер.СформироватьСсылкуMailto(
			АдресЭлектроннойПочты,,,
			ТемаПисьма,
			ТекстОтветаДляРезультата,
			ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"),
			ВариантОтвета.Представление + "...");
			
		Результат.Текст = Результат.Текст + Разделитель + СсылкаНаОтвет;
		
		Разделитель = " / ";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует уведомление и помещает его в очередь на отправку по задаче.
// Возвращает Истину, если доступно формирование уведомления и уведомление сформировано.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//
// Возвращаемое значение:
//  Булево
//
Функция СформироватьУведомлениеПоЗадаче(Задача) Экспорт
	
	Результат = Ложь;
	
	Если ПроверитьДоступностьФормированияУведомлений(Задача) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
			Задача,
			Задача);
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет доступность исполнения процедуры СформироватьУведомлениеПоЗадаче
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//
// Возвращаемое значение:
//  Булево - Истина, если доступно формирование уведомления по задаче.
//
Функция ПроверитьДоступностьФормированияУведомлений(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача,
		"БизнесПроцесс, ТочкаМаршрута, Ссылка, Выполнена, ТекущийИсполнитель");
		
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
		РеквизитыЗадачи.БизнесПроцесс);
		
	Если Не МенеджерПроцесса.ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.ТекущийИсполнитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь = &РольПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")";
		
	Запрос.УстановитьПараметр("РольПользователь", РеквизитыЗадачи.ТекущийИсполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УИсполнителяВключеноВыполнениеЗадачПоПочте = Ложь;
	
	Пока Выборка.Следующий() Цикл
		УИсполнителяВключеноВыполнениеЗадачПоПочте = 
			РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				Выборка.Исполнитель,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			
		Если УИсполнителяВключеноВыполнениеЗадачПоПочте Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УИсполнителяВключеноВыполнениеЗадачПоПочте;
	
КонецФункции

// Обработчик регламентного задания ВыполнениеЗадачПоПочте.
// Предназначен для обработки писем пришедших в качестве ответов на уведомление
// о новой задаче на адрес системной учетной записи.
//
Процедура ВыполнитьЗадачиПоПочте() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыполнениеЗадачПоПочте, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ОчиститьРегистрОтУстаревшихЗаписей();
	
	Попытка
		
		ПараметрыЗагрузкиПочтовыхСообщений = ПараметрыЗагрузкиПочтовыхСообщений();
		Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Сообщения = ЛегкаяПочтаСервер.ПолучитьИнтернетПочта(ПараметрыЗагрузкиПочтовыхСообщений);
		
		МассивСообщенийКУдалению = Новый Массив;
		
		Для каждого Сообщение Из Сообщения Цикл
			Если ОбработатьСообщениеОВыполненииЗадачи(Сообщение) Тогда
				МассивСообщенийКУдалению.Добавить(Сообщение.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСообщенийКУдалению.Количество() > 0 Тогда
			ЛегкаяПочтаСервер.УдалитьСообщенияИнтернетПочта(
				Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
				ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Пароль,
				МассивСообщенийКУдалению);
		КонецЕсли;
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает имя события для журнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияДляЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Выполнение задач по почте'");
	
КонецФункции

// Возвращает таблицу значений с файлами указанных предметов
//
// Параметры:
//  Предметы - Массив - предметы задачи.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ИмяФайла - Строка - имя файла.
//   * ТекущаяВерсияРазмер - Число - размер файла.
//   * Ссылка - СправочникСсылка.Файлы - ссылка на файл.
//
Функция ПолучитьФайлыПредметов(Предметы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение КАК ИмяФайла,
		|	Файлы.ТекущаяВерсияРазмер,
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла В (&ВладелецФайла)
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение,
		|	Файлы.ТекущаяВерсияРазмер,
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В (&ВладелецФайла)
		|	И НЕ Файлы.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВладелецФайла", Предметы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции

// Возвращает список вариантов выполнения для задачи.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//
// Возвращаемое значение:
//  Структура
//   * СписокВариантовОтветов - СписокЗначений - список значений типа
//                              ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//                              с заполненным представлением; в нем содержатся варианты
//                              ответов.
//   * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//                               ввод комментария обязателен.
//
Функция ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаСсылка, "БизнесПроцесс, ТочкаМаршрута");
		
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
		СтруктураРеквизитов.БизнесПроцесс);
	
	ВозможныеВариантыВыполнения =
		МенеджерПроцесса.ВариантыОтветовДляВыполненияЗадачиПоПочте(
			ЗадачаСсылка,
			СтруктураРеквизитов.БизнесПроцесс,
			СтруктураРеквизитов.ТочкаМаршрута);
		
	Возврат ВозможныеВариантыВыполнения;
	
КонецФункции

// Возвращает текст сообщения для ссылки mailto.
//
// Параметры:
//  КодЯзыка - Строка - код языка, на котором формируется текст сообщения.
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстСообщенияДляСсылкиMailTo(КодЯзыка)
	
	Возврат НСтр("ru = '1. Приложите файлы, если нужно.
		|2. Впишите ваш комментарий по выполнению задачи.
		|
		|Комментарий:'", КодЯзыка);
	
КонецФункции

// Возвращает тему сообщения для ссылки mailto по задаче и варианту выполнения.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач - ссылка на вариант выполнения.
//  ПредставлениеВариантаВыполнения - Строка - представление варианта выполнения.
//
// Возвращаемое значение:
//  Строка
//
Функция ТемаСообщенияДляССылкиMailTo(Задача, ВариантВыполнения, ПредставлениеВариантаВыполнения)
	
	ДлинаТемыОтветногоПисьма = ВыполнениеЗадачПоПочтеПовтИсп.ДлинаТемыОтветногоПисьма();
	
	// Фоомируем служебную информацию.
	СлужебнаяИнформация = "#" + ВыполнениеЗадачПоПочтеПовтИсп.ИдентификаторЗадачи(Задача)
		+ "#" + ЧисловойИдентификаторВариантаВыполнения(ВариантВыполнения);
	
	// Формируем тему.
	ТемаПисьма = ПредставлениеВариантаВыполнения + ": " + Строка(Задача);
	ДлиннаТемы = СтрДлина(ТемаПисьма);
	
	// Если длинна темы + служебной информации больше допустимой длины темы ответного письма,
	// то укорачиваем тему.
	Если ДлиннаТемы + ДлинаСлужебнойИнформации() > ДлинаТемыОтветногоПисьма Тогда
		ТемаПисьма = Лев(ТемаПисьма, ДлинаТемыОтветногоПисьма - ДлинаСлужебнойИнформации())
	КонецЕсли;
	
	Возврат ТемаПисьма + СлужебнаяИнформация;
	
КонецФункции

// Возвращает длину служебной информации.
//
// Возвращаемое значение:
//  Число
//
Функция ДлинаСлужебнойИнформации()
	
	Возврат 39;
	
КонецФункции

// Возвращает параметры для загрузки почтовых сообщений.
//
// Возвращаемое значение:
//  Структура - см. ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений
//
Функция ПараметрыЗагрузкиПочтовыхСообщений()
	
	ПараметрыЗагрузкиПочтовыхСообщений = 
		ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений();
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
		"НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
		"УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	ДоступныеПрофили = 
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили;
		
	ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено;
	
	СистемнаяУчетнаяЗапись = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Для Каждого СтруктураПрофиля Из ДоступныеПрофили Цикл
		Если СтруктураПрофиля.Профиль = СистемнаяУчетнаяЗапись Тогда
			
			ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = 
				СтруктураПрофиля;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыЗагрузкиПочтовыхСообщений;
	
КонецФункции

// Обрабатывает сообщение о выполнении задачи.
// При успешной обработке возвращает истину. В случае возникновения ошибки
// во время обработки возвращает ложь. 
// В тексте сообщения производит поиск ответа для выполнения задачи.
// При обнаружении ответа, выполняет задачу с указанным ответом.
// Результат обработки записывает в регистр сведений ПротоколВыполненияЗадачПоПочте.
//
// Параметры:
//  Сообщение - Структура - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьСообщениеОВыполненииЗадачи(Сообщение)
	
	НачатьТранзакцию();
	
	ЗадачаСсылка = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
	
	Попытка
		
		// Определяем исполнителя задачи по отправителю сообщения.
		
		ПараметрыОтправителя = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Сообщение.Отправитель);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ НайденныеПользователиПоАдресу
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.АдресЭП = &АдресЭП
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СпособыУведомленияПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
			|ГДЕ
			|	СпособыУведомленияПользователей.ДанныеСпособа = &АдресЭП
			|	И СпособыУведомленияПользователей.СпособУведомления = ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.ПоПочте)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НайденныеПользователиПоАдресу.Пользователь
			|ИЗ
			|	НайденныеПользователиПоАдресу КАК НайденныеПользователиПоАдресу
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО НайденныеПользователиПоАдресу.Пользователь = Пользователи.Ссылка
			|ГДЕ
			|	Пользователи.ПометкаУдаления = ЛОЖЬ
			|	И Пользователи.Служебный = ЛОЖЬ
			|	И Пользователи.Недействителен = ЛОЖЬ";
			
		Запрос.УстановитьПараметр("АдресЭП", ПараметрыОтправителя.Адрес);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИсполнительЗадачиПоЭлАдресу = Выборка.Пользователь;
			КодЯзыкаИсполнителя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ИсполнительЗадачиПоЭлАдресу);
		Иначе
			ИсполнительЗадачиПоЭлАдресу = Неопределено;
			КодЯзыкаИсполнителя = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		КонецЕсли;
		
		Если Выборка.Количество() > 1 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		ИначеЕсли Выборка.Количество() = 0 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		// Определяем задачу и вариант ее исполнения по теме и тексту сообщения.
		
		ЗадачаИВариантВыполнения = ЗадачаИВариантВыполненияПоТемеСообщения(
			Сообщение.Тема, КодЯзыкаИсполнителя);
		
		Если Не ЗначениеЗаполнено(ЗадачаИВариантВыполнения.Задача)
			И Не ЗначениеЗаполнено(ЗадачаИВариантВыполнения.ВариантВыполнения) Тогда 
			
			ЗадачаИВариантВыполнения = ЗадачаИВариантВыполненияПоТекстуСообщения(
				Сообщение.Текст, КодЯзыкаИсполнителя);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗадачаИВариантВыполнения.Задача) Тогда
		
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторЗадачи,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторЗадачи,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
				
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ЗадачаИВариантВыполнения.Задача) Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если ЗадачаИВариантВыполнения.ВариантВыполнения = Неопределено Тогда
				
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ЗадачаСсылка = ЗадачаИВариантВыполнения.Задача;
		ВариантВыполненияЗадачи = ЗадачаИВариантВыполнения.ВариантВыполнения;
		
		// Проверяем соответствие результата выполнения и задачи.
		
		Если Не ПроверитьСоответсвиеРезультатВыполненияИЗадачи(
			ЗадачаСсылка,
			ВариантВыполненияЗадачи) Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачеНеСоответствуетЗначениеОтвета,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачеНеСоответствуетЗначениеОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		// Получаем реквизиты задачи в базе.
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка,
				"ТекущийИсполнитель,
				|Выполнена,
				|СостояниеБизнесПроцесса,
				|ПометкаУдаления,
				|БизнесПроцесс,
				|ТочкаМаршрута,
				|Ссылка");
		
		// Проверяем возможность выполнения задачи по почте.
			
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			РеквизитыЗадачи.БизнесПроцесс);
		
		Если Не МенеджерПроцесса.ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Тогда
			
			ТекстПредупреждения = НСтр(
				"ru = 'Задача не может быть выполнена по почте.
				|Войдите в программу и выполните задачу из ее карточки или списка ""Задачи мне.""'",
				КодЯзыкаИсполнителя);
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
				ЗадачаСсылка,
				ТекстПредупреждения);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя,
				ТекстПредупреждения);
			
			ЗафиксироватьТранзакцию();
			
			Возврат Истина;
			
		КонецЕсли;
	
		// Проверяем соответствие исполнителя задачи в базе и исполнителя определенному по отправителю сообщения.
		
		ИсполнительЗадачи = РеквизитыЗадачи.ТекущийИсполнитель;
		ФактическийИсполнительЗадачи = Справочники.Пользователи.ПустаяСсылка();
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь = &РольПользователь
			|	И ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ИсполнительЗадачи
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")";
			
		Запрос.УстановитьПараметр("РольПользователь", РеквизитыЗадачи.ТекущийИсполнитель);
		
		Запрос.УстановитьПараметр("ИсполнительЗадачи", ИсполнительЗадачиПоЭлАдресу);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
				
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		КонецЕсли;
		
		// Уточняем исполнетля задачи в соотвествии с настройкой ФактическийИсполнительЗадач.
		
		Если ТипЗнч(РеквизитыЗадачи.ТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ФактическийИсполнительЗадач = Константы.ФактическийИсполнительЗадач.Получить();
			Если ФактическийИсполнительЗадач = Перечисления.ФактическийИсполнительЗадач.ТекущийПользователь
				Или ФактическийИсполнительЗадач = Перечисления.ФактическийИсполнительЗадач.ВыборПриИсполненииЗадачи Тогда
				
				ФактическийИсполнительЗадачи = ИсполнительЗадачиПоЭлАдресу;
			КонецЕсли;
			
		Иначе
			
			ИсполнительЗадачи = ИсполнительЗадачиПоЭлАдресу;
			
		КонецЕсли;
		
		// Выполняем задачу, если она не выполнена..
		
		Если РеквизитыЗадачи.Выполнена = Истина
			Или РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
			Или РеквизитыЗадачи.ПометкаУдаления Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеАктивна,
				ЗадачаСсылка);
			
		Иначе
			
			КомментарийВСообщении = КомментарийПоТекстуСообщения(Сообщение.Текст, КодЯзыкаИсполнителя);
			
			Параметры = Новый Структура;
			Параметры.Вставить("ВариантВыполнения", ВариантВыполненияЗадачи);
			Параметры.Вставить("Комментарий", КомментарийВСообщении);
			Параметры.Вставить("ИсполнительЗадачиПоПочте", ИсполнительЗадачи);
			Параметры.Вставить("ПользовательИсполнитель", ИсполнительЗадачиПоЭлАдресу);
			
			Если ЗначениеЗаполнено(ФактическийИсполнительЗадачи) Тогда
				Параметры.Вставить("ФактическийИсполнительЗадачи", ФактическийИсполнительЗадачи);
			КонецЕсли;
			
			ОбработатьВложенияВСообщении(ЗадачаСсылка, Сообщение);
			
			РезультатПроверки = БизнесПроцессыИЗадачиСервер.ПроверитьУсловияЗапретаВыполнения(ЗадачаСсылка, Параметры);
			Если РезультатПроверки.ЗапретВыполнения Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					РезультатПроверки.ТекстПредупреждения);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя,
					РезультатПроверки.ТекстПредупреждения);
				
				ЗафиксироватьТранзакцию();
				
				Возврат Истина;
				
			КонецЕсли;
			
			ВыполнениеЗадачСервер.ВыполнитьЗадачуПоПочте(ЗадачаСсылка, Параметры);
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, 
				Перечисления.РезультатВыполненияЗадачиПоПочте.Выполнена,
				ЗадачаСсылка,
				Строка(ВариантВыполненияЗадачи) + ". " + КомментарийВСообщении);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Возврат Истина;
		
	Исключение
		ОтменитьТранзакцию();
		РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение, 
			Перечисления.РезультатВыполненияЗадачиПоПочте.Ошибка,
			ЗадачаСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Отправляем уведомление об ошибке, возникшей при обработке сообщения.
//
// Параметры:
//  Сообщение - Структура - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//  РезультатВыполненияЗадачиПоПочте - ПеречислениеСсылка.РезультатВыполненияЗадачиПоПочте - результат обработки сообщения.
//  КодЯзыка - Строка - код языки для формирования текстов уведомления.
//  Описание - Строка - дополнительное описание ошибки.
//
Процедура ОтправитьУведомлениеОбОшибке(Сообщение,
	РезультатВыполненияЗадачиПоПочте,
	Задача,
	КодЯзыка,
	Описание = "")
	
	Если ТипЗнч(РезультатВыполненияЗадачиПоПочте) <>
		Тип("ПеречислениеСсылка.РезультатВыполненияЗадачиПоПочте") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Сообщение) <> Тип("Структура")
		ИЛИ НЕ Сообщение.Свойство("Отправитель") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;
	КонецЕсли;
	
	ТемаУведомления = НСтр("ru = 'Ошибка исполнения задачи по почте: '", КодЯзыка);
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ТемаУведомления = ТемаУведомления + Строка(Задача);
	КонецЕсли;
	
	Если РезультатВыполненияЗадачиПоПочте =
		Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Не найдена задача в базе данных.
			|Обратитесь к автору задачи или администратору.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей
		ИЛИ РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|По вашему адресу не удалось определить исполнителя задачи.
			|Обратитесь к администратору.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель Тогда
			
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Для задачи определен другой исполнитель.
			|Обратитесь к автору задачи.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения Тогда
			
		ТекстУведомления =
			НСтр("ru = 'Письмо об исполнении задачи не было обработано.'", КодЯзыка)
			+ Символы.ПС
			+ Описание;
			
	Иначе
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Возможно в вашем письме (ответе) отсутствовал текст служебной информации
			|или ответное письмо было сформировано не по ссылкам в уведомлении.
			|Попробуйте исполнить задачу еще раз.'", КодЯзыка);
		
	КонецЕсли;
	
	ПоляЗаголовка = Новый Массив;
	
	Для Каждого Заголовок ИЗ Сообщение.ПоляЗаголовка Цикл
		Если Заголовок.Имя = "Message-Id" Тогда
			ЗаголовокInReplyTo = Почта.СформироватьСтруктуруПоляЗаголовка(
				"In-Reply-To",
				Заголовок.Значение,
				СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
			ПоляЗаголовка.Добавить(ЗаголовокInReplyTo);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаУведомления);
	ПараметрыПисьма.Вставить("Текст", ТекстУведомления);
	ПараметрыПисьма.Вставить("Кому", Сообщение.Отправитель);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст);
	ПараметрыПисьма.Вставить("ПоляЗаголовка", ПоляЗаголовка);
	
	ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма);
	
КонецПроцедуры

// Возвращает вариант выполнения по числовому идентификатору.
//
// Параметры:
//  ИдентификаторОтвета - Число
//
// Возвращаемое значение:
//  ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
Функция ВариантВыполненияПоПоЧисловомуИдентификатору(ИдентификаторОтвета)
	
	Если ИдентификаторОтвета = "" Тогда
		ВариантВыполнения = Неопределено;
	ИначеЕсли ИдентификаторОтвета = "1" Тогда
		ВариантВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	ИначеЕсли ИдентификаторОтвета = "2" Тогда
		ВариантВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	ИначеЕсли ИдентификаторОтвета = "3" Тогда
		ВариантВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
	Иначе
		ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВариантВыполнения;
	
КонецФункции

// Возвращает числовой идентификатор варианта выполнения.
//
// Параметры:
//  ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
// Возвращаемое значение:
//  Число
//
Функция ЧисловойИдентификаторВариантаВыполнения(ВариантВыполнения)
	
	ЧисловойИдентификатор = "0";
	
	Если ВариантВыполнения =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
		
		ЧисловойИдентификатор = "1";
		
	ИначеЕсли ВариантВыполнения =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
		
		ЧисловойИдентификатор = "2";
		
	ИначеЕсли ВариантВыполнения =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
		
		ЧисловойИдентификатор = "3";
		
	КонецЕсли;
	
	Возврат ЧисловойИдентификатор;
	
КонецФункции

// Возвращает задачу и вариант выполнения по теме сообщения.
//
// Параметры:
//  ТемаСообщения - Строка - тема сообщения.
//
// Возвращаемое значение:
//  Струкутра:
//   * Задача - ЗадачаСсылка.ЗадачаИсполнителя
//   * ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
Функция ЗадачаИВариантВыполненияПоТемеСообщения(ТемаСообщения, КодЯзыкаИсполнителя)
	
	Результат = Новый Структура("Задача, ВариантВыполнения");
	
	Если Не ЗначениеЗаполнено(ТемаСообщения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СлужебнаяИнформацияСтрокой = Прав(ТемаСообщения, ДлинаСлужебнойИнформации());
	
	СлужебнаяИнформация = СтрРазделить(СлужебнаяИнформацияСтрокой, "#", Ложь);
	
	КоличествоСлужебнойИнформации = СлужебнаяИнформация.Количество();
	Если КоличествоСлужебнойИнформации <> 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторЗадачиСтрокой = СлужебнаяИнформация[0];
	НомерОтвета = СлужебнаяИнформация[1];
	
	ИдентификаторЗадачи = Неопределено;
	Попытка
		ИдентификаторЗадачи = Новый УникальныйИдентификатор(ИдентификаторЗадачиСтрокой);
	Исключение
		// Ничего не делаем.
		// Считаем, что не удалось определить ссылку на задачу по теме сообщения.
		// При необходимости этот факт будет зафиксирован отдельно в протоколе
		// выполнения задач по почте в вызывающем коде.
	КонецПопытки;
	Если ЗначениеЗаполнено(ИдентификаторЗадачи) Тогда
		Результат.Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИдентификаторЗадачи);
	КонецЕсли;
	
	Результат.ВариантВыполнения = ВариантВыполненияПоПоЧисловомуИдентификатору(НомерОтвета);
	
	Возврат Результат;
	
КонецФункции

// Возвращает задачу и вариант выполнения по тексту сообщения.
//
// Параметры:
//  ТекстСообщения - текст сообщения.
//  КодЯзыкаИсполнителя - строка.
//
// Возвращаемое значение:
//  Струкутра:
//   * Задача - ЗадачаСсылка.ЗадачаИсполнителя
//   * ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
Функция ЗадачаИВариантВыполненияПоТекстуСообщения(ТекстСообщения, КодЯзыкаИсполнителя)
	
	Результат = Новый Структура("Задача, ВариантВыполнения");
	
	ИдентификаторыЗадачи = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(
		ТекстСообщения,
		НСтр( "ru = '*Задача:'", КодЯзыкаИсполнителя),
		36);
	
	Если ИдентификаторыЗадачи.Количество() > 0 Тогда
		ИдентификаторЗадачи = Неопределено;
		Попытка
			ИдентификаторЗадачи = Новый УникальныйИдентификатор(ИдентификаторыЗадачи[0]);
		Исключение
			// Ничего не делаем.
			// Считаем, что не удалось определить ссылку на задачу по тексту сообщения.
			// При необходимости этот факт будет зафиксирован отдельно в протоколе
			// выполнения задач по почте в вызывающем коде.
		КонецПопытки;
		Если ЗначениеЗаполнено(ИдентификаторЗадачи) Тогда
			Результат.Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИдентификаторЗадачи);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторыОтвета = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(
		ТекстСообщения,
		НСтр( "ru = '*Ответ:'", КодЯзыкаИсполнителя),
		1);
	
	Если ИдентификаторыОтвета.Количество() > 0 Тогда
		Результат.ВариантВыполнения =
			ВариантВыполненияПоПоЧисловомуИдентификатору(ИдентификаторыОтвета[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку в тексте сообщения после строки ЗаголовокПоля.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения.
//  ЗаголовокПоля - Строка - заголовок с которого начинается строка.
//  ДлинаСтроки - Число - длинна возвращаемой строки, после заголовка.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьСтрокиСообщенияПоЗаголовкуПоля(ТекстСообщения, ЗаголовокПоля, ДлинаСтроки)
	
	Результат = Новый Массив;
	
	НомерВхождения = 1;
	
	Пока НомерВхождения > 0 Цикл
		
		Позиция = СтрНайти(ТекстСообщения, ЗаголовокПоля,,, НомерВхождения);
		
		Если Позиция <> 0 Тогда
			Результат.Добавить(Сред(ТекстСообщения, Позиция + СтрДлина(ЗаголовокПоля), ДлинаСтроки));
			НомерВхождения = НомерВхождения + 1;
		Иначе
			НомерВхождения = -1; // Прекращение поиска - выход из цикла.
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие результата выполнения и задачи.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  РезультатВыполнения - ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач - результат выполнения задачи.
//
// Возвращаемое значение:
//  Булево:
//   * Истина - если результат допустим для задачи.
//   * Ложь - если результат не допустим.
//
Функция ПроверитьСоответсвиеРезультатВыполненияИЗадачи(ЗадачаСсылка, РезультатВыполнения)
	
	Результат = Истина;
	
	ВозможныеВариантыВыполнения = ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка);
	
	Если ВозможныеВариантыВыполнения.СписокВариантовОтветов.НайтиПоЗначению(
			РезультатВыполнения) = Неопределено Тогда
			
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает комментарий по тексту сообщения.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения.
//  КодЯзыка - Строка - код языка, на котором формируется текст сообщения.
//
// Возвращаемое значение:
//  Строка
//
Функция КомментарийПоТекстуСообщения(Знач ТекстСообщения, КодЯзыка) Экспорт
	
	СлужебныйТекст = СтрРазделить(ТекстСообщенияДляСсылкиMailTo(КодЯзыка), Символы.ПС, Ложь);
	Для Каждого СтрокаСлужебногоТекста Из СлужебныйТекст Цикл
		Если Не СтрНачинаетсяС(ТекстСообщения, СтрокаСлужебногоТекста) Тогда
			Прервать;
		КонецЕсли;
		ТекстСообщения = СокрЛ(Прав(ТекстСообщения, СтрДлина(ТекстСообщения) - СтрДлина(СтрокаСлужебногоТекста)));
	КонецЦикла;
	
	ТекстОкончанияКомментария = 
		НСтр("ru = '________________________________________________'", КодЯзыка);
	КонечнаяПозицияКомментария = СтрНайти(ТекстСообщения, ТекстОкончанияКомментария);
	
	Если КонечнаяПозицияКомментария > 0 Тогда
		КомментарийВСообщении = СокрЛП(Лев(ТекстСообщения, КонечнаяПозицияКомментария - 1));
	Иначе
		КомментарийВСообщении = ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомментарийВСообщении) Тогда
		КомментарийВСообщении = КомментарийВСообщении
			+ Символы.ПС + НСтр("ru = 'Задача исполнена по почте.'", КодЯзыка);
	КонецЕсли;
	
	Возврат КомментарийВСообщении;
	
КонецФункции

// Обрабатывает вложения в сообщении.
// Если вложения в сообщении отличаются от файлов предмета задачи, 
// то прикрепляет вложения к бизнес-процессу задачи как вспомогательные 
// предметы.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  Сообщение - Структура - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//
Процедура ОбработатьВложенияВСообщении(ЗадачаСсылка, Сообщение)
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Вложения) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ЗадачаСсылка, "БизнесПроцесс");
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(Вложение.ИмяФайла);
		
		ВремяИзменения = ТекущаяДатаСеанса();
		ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(
		ВремяИзменения);
		
		Комментарий = "Файл получен при исполнении задачи по почте.
			|Задача: " + ЗадачаСсылка + "
			|Адрес отправителя: " + Сообщение.Отправитель;
			
		// Создадим карточку Файла в БД
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = Вложение.Адрес;
		СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
		СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
		СведенияОФайле.Размер = Вложение.Размер;
		СведенияОФайле.ВремяИзменения = ВремяИзменения;
		СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		СведенияОФайле.Комментарий = Комментарий;
		
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(РеквизитыЗадачи.БизнесПроцесс, СведенияОФайле);
			
		ТекущиеИменаПредметов =
		МультипредметностьВызовСервера.ПолучитьМассивИменПредметовПоСсылкеНаПроцесс(
		РеквизитыЗадачи.БизнесПроцесс);
		ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
		ФайлСсылка, ТекущиеИменаПредметов);
		
		Мультипредметность.ЗаписатьПредметБизнесПроцесса(
		РеквизитыЗадачи.БизнесПроцесс, 
		ИмяПредмета,
		ФайлСсылка);
		
		РазблокироватьДанныеДляРедактирования(РеквизитыЗадачи.БизнесПроцесс);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти