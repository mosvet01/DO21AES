///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроверкаКонтрагентовВДокументах

// Формирование описания расположения счета-фактуры в документе.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа-основания, для которого необходимо получить описание счета-фактуры.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание счета-фактуры.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале Тогда
		
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				СчетФактура, 
				Форма.Элементы.СчетФактура,
				Неопределено,
				Форма.Элементы.ГруппаСчетФактура);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания расположения контрагента, находящегося в шапке документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание расположения контрагента.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание) Экспорт
	
	Если Не Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке Тогда
		Возврат;
	КонецЕсли;
		
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка, 
			Форма.Элементы.Отправитель,
			ДокументОбъект.Отправитель,
			Форма.Элементы.ГруппаТолькоОтправитель);
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка, 
			Форма.Элементы.Получатель,
			Форма.Получатель,
			Форма.Элементы.ГруппаТолькоПолучатель);
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка, 
			Форма.Элементы.Контрагент,
			ДокументОбъект.Контрагент,
			Форма.Элементы.ГруппаТолькоКонтрагент);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания  расположения контрагентов, находящихся в табличной части документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
//				Структура колонок указана в функции ШаблонТаблицыОписанияТабличныхЧастей модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСТабличнымиЧастями(Форма, Описание) Экспорт
	
	Если Не ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Получатели", "ПолучателиПолучатель", "");
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Контрагенты", "КонтрагентыКонтрагент", "");
		ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
			Форма, Описание, "Стороны", "СтороныСторона", "");
		
	КонецЕсли;
		
КонецПроцедуры

// Формирование описания расположения контрагентов в счете-фактуре.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма счета-фактуры, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеСчетовФактур(Форма, Описание) Экспорт
	
	Если Не Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Контрагент.
	ПроверкаКонтрагентов.ДополнитьОписание(
		Описание,
		ДокументСсылка,
		Форма.Элементы.Контрагент,
		ДокументОбъект.Контрагент,
		Форма.Элементы.ГруппаКонтрагент);
		
	// Комитент/
	ПроверкаКонтрагентов.ДополнитьОписание(
		Описание,
		ДокументСсылка,
		Форма.Элементы.Комитент,
		ДокументОбъект.Комитент,
		Форма.Элементы.ГруппаКомитент);
			
	// Продавец.
	ПроверкаКонтрагентов.ДополнитьОписание(
		Описание,  
		ДокументСсылка,
		Форма.Элементы.Продавец,
		ДокументОбъект.Продавец,
		Форма.Элементы.ГруппаПродавец);
		
КонецПроцедуры

// Возвращает массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
// Параметры:
//  Тип	 			- Тип - Тип счета-фактуры, для которой необходимо получить описание.
//  ИменаРеквизитов	- Массив из Строка - массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
//@skip-warning
Процедура ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитов) Экспорт
	

КонецПроцедуры

// Получение даты документа, в котором используется проверка контрагентов.
// 		Проверка контрагентов будет выполняться по состоянию на эту дату. 
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - Документ, в котором используется проверка контрагентов.
//  Дата			 - Дата - Результат получения даты документа.
//
//@skip-warning
Процедура ОпределитьДатуВДокументе(ДокументОбъект, Дата) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаРегистрации) Тогда 
		Дата = НачалоДня(ДокументОбъект.ДатаРегистрации);
	Иначе
		Дата = НачалоДня(ДокументОбъект.ДатаСоздания);
	КонецЕсли;
	
КонецПроцедуры

// Определение даты в счете-фактуре.
//
// Параметры:
//  СчетФактураОбъект	 - ДанныеФормыСтруктура, ДокументОбъект - Счет-фактура, чью дату необходимо получить.
//  Дата				 - Дата - Результат, дата счета-фактуры.
//
//@skip-warning
Процедура ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата) Экспорт
	
	Дата = НачалоДня(СчетФактураОбъект.Дата);
	
КонецПроцедуры

// Возможность переопределить стандартное заполнение данных о контрагентах в счет-фактурах, созданных на основании документа.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДокументОбъект       - Произвольный - данные содержащие информацию о счет-фактурах.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СтандартнаяОбработка, ДокументОбъект, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность переопределить стандартное сохранение результатов проверки контрагентов счет-фактур, выписанных на основании
//             документа основания в форме документа основания. 
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура ЗапомнитьРезультатПроверкиКонтрагентовСчетФактурыВДокументе(СтандартнаяОбработка, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов при создании в форме документа.
//
// Параметры:
//   Форма          - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//   НовыеРеквизиты - Структура - сформированная структура дополнительных реквизитов документа, которая может быть дополнена.
//
//@skip-warning
Процедура ДополнитьРеквизитыФормыДокумент(Форма, НовыеРеквизиты) Экспорт

	Если Форма.ИмяФормы = "Справочник.ВходящиеДокументы.Форма.ФормаЭлемента" Тогда
		НовыеРеквизиты.Вставить("ИмяРеквизитаКонтрагентВШапке", "Отправитель");
	ИначеЕсли Форма.ИмяФормы = "Справочник.ИсходящиеДокументы.Форма.ФормаЭлемента" Тогда
		НовыеРеквизиты.Вставить("ИмяРеквизитаКонтрагентВШапке", "Получатель");
		НовыеРеквизиты.Вставить("КонтрагентРеквизитФормы", Истина);
	КонецЕсли;

КонецПроцедуры

// Возможность переопределить сохраняемые результаты проверки контрагентов в документе.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  СохраняемоеЗначение  - Соответствие - сохраняемые данные.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура СохраняемыеРезультатыПроверкиСчетФактурыВДокументе(СтандартнаяОбработка, СохраняемоеЗначение, Форма) Экспорт
	
	
	
КонецПроцедуры

// Отображения результата проверки контрагента в документе.
//
// Параметры:
//  Форма	 				- ФормаКлиентскогоПриложения - Форма документа, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура) формы документа.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыДокумент ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
//
//@skip-warning
Процедура ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Прорисовать состояния контрагентов в документе.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СостояниеПроверки		 - Перечисления.СостоянияПроверкиКонтрагентов	 - Указывает, в каком состояние проверка:
//  	завершилась, не завершилась, выполняется или отсутствует доступ к веб-сервису.
//  ДополнительныеПараметры	 - Неопределено, Структура - Параметры, показывающие в каком элементе формы произошло
//  												изменение и это изменение вызвало запуск проверки контрагента. Описание структуры см в
//  												ПроверкаКонтрагентовКлиентСервер.ПараметрыФоновогоЗадания.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//  										процедуре.
//  										Пример см в ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе.
//
//@skip-warning
Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка документов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка документов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеСпискаДокументов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Установка условного оформления в табличной части документа.
//
// Параметры:
//  Форма				 	 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Добавление колонки с результатом проверки контрагента в таблицу формы документа.
//
// Параметры:
//  Форма				 	 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Добавление строки с данными проверяемого контрагента при проверке контрагентов в документе.
//
// Параметры:
//	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//		Значение по умолчанию - Истина;
//	Ссылка - ДокументСсылка - ссылка на документ, в котором выполняется проверка контрагентов;
//	ДанныеКонтрагентов - ТаблицаЗначений - содержит данные проверяемых контрагентов.
//		Структуру колонок таблицы см. в функции ШаблонТаблицыДанныеКонтрагента;
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - проверяемый контрагент, ссылка на
//		элемент справочника контрагентов;
//	Дата - Дата - дата, на которую выполняется проверка;
//	Состояние - ПеречислениеСсылка.СостоянияПроверкиКонтрагентов - текущее состояние
//		проверки существования контрагента.
//
//@skip-warning
Процедура ДобавитьСтрокуВДанныеКонтрагентовВДокументе(
	СтандартнаяОбработка,
	Ссылка,
	ДанныеКонтрагентов,
	Контрагент,
	Дата,
	Состояние = Неопределено) Экспорт
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Выделение контрагента с ошибкой в строке отчета.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - Табличный документ отчета, в котором выделяется строка с некорректным
//                                           контрагентом.
//  НомерСтроки			 - Число - Номер строки табличного документа, в которой находится некорректный контрагент.
//
//@skip-warning
Процедура ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, НомерСтроки) Экспорт
	
	Область = ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, ТабличныйДокумент.ШиринаТаблицы);
	Область.ЦветФона = Новый Цвет(251, 212, 212);
	
КонецПроцедуры

// Предназначена для формирования отчета, в котором используется проверка контрагентов, из общего модуля.
//
// Параметры:
//  ПараметрыФормированияОтчета	 - Структура - Параметры, с которыми необходимо сформировать отчет.
//  Отчет						 - ТабличныйДокумент - результат формирования отчета.
//
//@skip-warning
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, Отчет = Неопределено) Экспорт
	
	
КонецПроцедуры 

// Вывод результата проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - ФормаКлиентскогоПриложения - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
//
//@skip-warning
Процедура ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вывод раздела отчета с проверкой контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - ФормаКлиентскогоПриложения - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  НомерРаздела	 			 - Число - Номер раздела отчета.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
//
//@skip-warning
Процедура ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела, СтандартнаяОбработка) Экспорт

	

КонецПроцедуры

// Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
// 	Пример см. в ПроверкаКонтрагентов.ВыводитьСтрокуОтчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент				- СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН						- Строка - ИНН контрагента.
//  КПП						- Строка - ИНН контрагента.
//  Дата					- Дата - Дата, на которую необходимо выполнять проверку контрагента.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//  Результат				- Булево - Определяет, нужно ли выводить строку.
//
//@skip-warning
Процедура ОпределитьНужноЛиВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата, Результат, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определяет, нужно ли проверять контрагентов в разделе отчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НомерРаздела			- Число - Номер раздела отчета.
//  ДополнительныеПараметры	- Произвольный - Дополнительная информация, связанная с разделом.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//
//@skip-warning
Процедура ОпределитьНужноЛиПроверятьКонтрагентовВРазделеОтчета(СтруктураПараметров, НомерРаздела, ДополнительныеПараметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Отображения результата проверки контрагента в отчете.
//
// Параметры:
//  Форма	 				- ФормаКлиентскогоПриложения - Форма отчета, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура),
//		ПроверкаКонтрагентовНедействующиеКонтрагенты формы отчета.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыОтчета ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
//
//@skip-warning
Процедура ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка справочника контрагентов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка справочника контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеСпискаКонтрагентов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Важно: заполнение реализации метода обязательно.
// Определяет свойства справочников контрагентов.
// Параметры:
//	СвойстваСправочников - ТаблицаЗначений - в таблице заполняется список
//		справочников контрагентов и их свойства. Колонки таблицы:
//		* Имя - Строка - имя справочника;
//		* Иерархический - Булево - справочник является иерархическим;
//		* РеквизитИНН - Строка- имя реквизита ИНН;
//		* РеквизитКПП - Строка- имя реквизита КПП;
//		* ОтключитьСозданиеИзДосьеКонтрагента - Булево - если Истина,
//			тогда не будет предлагаться создание элемента справочника из
//			отчета "Досье контрагента".
//
//@skip-warning
Процедура ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников) Экспорт
	
	НоваяСтрока = СвойстваСправочников.Добавить();
	НоваяСтрока.Имя = "Контрагенты";
	НоваяСтрока.Иерархический = Истина;
	НоваяСтрока.РеквизитИНН = "ИНН";
	НоваяСтрока.РеквизитКПП = "КПП";
	НоваяСтрока.ОтключитьСозданиеИзДосьеКонтрагента = Ложь;
	
КонецПроцедуры

// Определяет, является ли контрагент физическим или юридическим лицом.
//
// Параметры:
//  СтандартнаяОбработка  - Булево - если стандартный механизм переопределяется, то должно быть установлено значение "Ложь".
//  ЭтоЮрЛицо             - Булево - Истина, если юридическое лицо, и Ложь, если физическое.
//  ДанныеКонтрагента     - Структура - структура, которая содержит данные обрабатываемого контрагента.
//
//@skip-warning
Процедура ПриОпределенииВидаКонтрагента(СтандартнаяОбработка, ЭтоЮрЛицо, ДанныеКонтрагента) Экспорт

	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("ЭтоЮридическоеЛицо") Тогда
		ЭтоЮрЛицо = ДанныеКонтрагента.ДополнительныеПараметры.ЭтоЮридическоеЛицо;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяется, является ли контрагент иностранным.
//
// Параметры:
//  ДанныеКонтрагента   - СтрокаТаблицыЗначений - Содержит информацию о контрагенте. 
//      Подробнее о колонках таблицы можно узнать в описании к процедуре ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента().
//  ЯвляетсяИностранным - Булево - Результат проверки.
//
//@skip-warning
Процедура ПриОпределенииКонтрагентЯвляетсяИностранным(ДанныеКонтрагента, ЯвляетсяИностранным) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеКонтрагента.Контрагент)) Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента.Контрагент, "ЮрФизЛицо");
	Иначе
		ЮрФизЛицо = ДанныеКонтрагента.Контрагент.ЮрФизЛицо;
	КонецЕсли;
	ЯвляетсяИностранным = 
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	
КонецПроцедуры

// Определяется, необходимо ли отключить проверку состояния контрагента в базе ФНС.
//
// Параметры:
//  ДанныеКонтрагента - СтрокаТаблицыЗначений:
//    * Контрагент - Произвольный - ссылки на все справочники, описанные в методе
//        см. РаботаСКонтрагентами.СвойстваСправочниковКонтрагентов.
//    * ИНН - Строка
//    * КПП - Строка
//    * ЭтоЮридическоеЛицо - Неопределено, Булево
//    * ЭтоИностранныйКонтрагент - Неопределено, Булево
//    * ОтключитьПроверкуФНС - Неопределено, Булево
//    * ПричинаОтключенияПроверкиФНС - Строка
//    * Дата - Дата - дата актуальности состояния.
//    * ДополнительныеПараметры - Структура - дополнительные сведения о контрагенте.
//    * Состояние - ПеречислениеСсылка.СостоянияСуществованияКонтрагента
//    * ОбластьДанныхВспомогательныеДанные - Число - добавляется если внедрена подсистема РаботаВМоделиСервиса.
//  ОтключитьПроверкуФНС - Булево, Неопределено - результат проверки состояния контрагента. Если установить Истина, то
//    проверка состояния контрагента в базе ФНС выполняться не будет.
//  ПричинаОтключения - Строка - краткое описание причины отключения проверки контрагента. Установленный текст будет
//    отображаться в окне подсказки поля контрагента, если параметр ОтключитьПроверкуФНС будет установлен в значение
//    Истина.
//
//@skip-warning
Процедура ПриОпределенииСтатусаПроверкиКонтрагентаВБазеФНС(
	ДанныеКонтрагента,
	ОтключитьПроверкуФНС,
	ПричинаОтключения) Экспорт
	
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов для формы справочника. 
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой дополняется структура РеквизитыПроверкиКонтрагентов.
//  НовыеРеквизиты  - Структура - структура, которая транслируется в реквизит формы РеквизитыПроверкиКонтрагентов.
//
//@skip-warning
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты) Экспорт
	
	НовыеРеквизиты.Вставить("НеИспользоватьКэш", Ложь);

	Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
		НовыеРеквизиты.ЭтоИностранныйКонтрагент =
			Форма.Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		НовыеРеквизиты.ЭтоЮридическоеЛицо =
			Форма.Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИнформацииДляДосьеКонтрагента

// Определение состава и порядка вывода в отчет "Досье контрагента" данных из информационной базы.
//
// Параметры:
//  ТаблицаОписания - ТаблицаЗначений - описание см. Отчеты.ДосьеКонтрагента.НоваяТаблицаОписаниеДанныхПрограммы.
//
//@skip-warning
Процедура ЗаполнитьОписаниеДанныхПрограммы(ТаблицаОписания) Экспорт

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "Наименование";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок = НСтр("ru = 'Наименование'");
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "Реквизиты";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок = НСтр("ru = 'Реквизиты'");
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "ЮридическийАдрес";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок = НСтр("ru = 'Юридический адрес'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "КонтактныеЛица";
	НоваяСтрока.ЭтоТаблица = Истина;
	НоваяСтрока.Заголовок = НСтр("ru = 'Контактные лица'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "БанковскиеСчета";
	НоваяСтрока.ЭтоТаблица = Истина;
	НоваяСтрока.Заголовок = НСтр("ru = 'Банковские счета'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "Email";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок = НСтр("ru = 'Email'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных = "Родитель";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок = НСтр("ru = 'Входит в группу'");
	
КонецПроцедуры

// Заполнение информации о контрагенте по данным информационной базы для отчета "Досье контрагента".
//
// Параметры:
//  ИнформацияОСвязях  - Структура - описание см. РаботаСКонтрагентами.НоваяИнформацияОСвязяхЮридическогоЛица
//                 и РаботаСКонтрагентами.НоваяИнформацияОСвязяхПредпринимателя.
//                 При заполнении в структуру ИнформацияОСвязях.ДанныеПрограммы добавляются данные о контрагенте.
//                 Ключи структуры должны соответствовать полям ИмяДанных таблицы, заполненной 
//                 в процедуре ЗаполнитьОписаниеДанныхПрограммы.
//  Контрагент  - ОпределяемыйТип.КонтрагентБИП - ссылка на контрагента в информационной базе.
//                 Если при вызове процедуры ссылка пустая, необходимо найти контрагента до данным,
//                 содержащимся в структуре ИнформацияОСвязях.
//
//@skip-warning
Процедура ДополнитьИнформациюДаннымиПрограммы(ИнформацияОСвязях, Контрагент) Экспорт
	
	
#Область ЗаполнениеСсылкиНаКонтрагента
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос = Новый Запрос;
		Если ИнформацияОСвязях.Свойство("КПП") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = """"";
			Запрос.УстановитьПараметр("КПП", ИнформацияОСвязях.КПП);
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН";
		КонецЕсли;
		Запрос.УстановитьПараметр("ИНН", ИнформацияОСвязях.ИНН);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Контрагент = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
#КонецОбласти

#Область ЗаполнениеРеквизитовКонтрагента
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, 
		"Ссылка,Наименование,НаименованиеПолное,ИНН,КПП,ЮрФизЛицо,Родитель");
	
	СтруктураНаименование = Отчеты.ДосьеКонтрагента.НовыеДанныеПрограммы();
	СтруктураНаименование.Ссылка        = Реквизиты.Ссылка;
	СтруктураНаименование.Представление = Реквизиты.Наименование;
	СтруктураНаименование.Описание      = Реквизиты.НаименованиеПолное;
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Наименование", СтруктураНаименование);
	
	СтруктураРеквизиты = Отчеты.ДосьеКонтрагента.НовыеДанныеПрограммы();
	СтруктураРеквизиты.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН %1'"), Реквизиты.ИНН);
	
	Если Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураРеквизиты.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КПП %1'"), Реквизиты.КПП);
		// Показываем расхождение КПП по данным программы с КПП по ЕГРЮЛ.
		ВывестиПримечание = ЗначениеЗаполнено(ИнформацияОСвязях.КПП) 
			И Реквизиты.КПП <> ИнформацияОСвязях.КПП;
		Если ВывестиПримечание Тогда
			СтруктураРеквизиты.ПримечаниеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По данным ЕГРЮЛ: 
				|КПП %1'"),
				ИнформацияОСвязях.КПП);
		КонецЕсли;
	КонецЕсли;
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Реквизиты", СтруктураРеквизиты);
	
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Родитель", Реквизиты.Родитель);
	
#КонецОбласти

#Область ЗаполнениеБанковскихСчетовКонтрагента
	
	БанковскиеСчета = Отчеты.ДосьеКонтрагента.НоваяТаблицаДанныеПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Код КАК Код,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Представление КАК Банк,
	|	БанковскиеСчета.Банк.Код КАК БИК,
	|	БанковскиеСчета.Банк.КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		
		НоваяСтрока = БанковскиеСчета.Добавить();
		Если ЗначениеЗаполнено(СтрокаТаблицы.КоррСчет) Тогда
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='р/с %1, БИК %2, корр. счет %3'"),
				СтрокаТаблицы.НомерСчета,
				СтрокаТаблицы.БИК,
				СтрокаТаблицы.КоррСчет);
		Иначе
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='р/с %1, БИК %2'"),
				СтрокаТаблицы.НомерСчета,
				СтрокаТаблицы.БИК);
		КонецЕсли;
		НоваяСтрока.Представление = Представление;
		НоваяСтрока.Описание      = СтрокаТаблицы.Банк;
		НоваяСтрока.Ссылка        = СтрокаТаблицы.Ссылка;
		
	КонецЦикла;
	
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("БанковскиеСчета", БанковскиеСчета);
	
#КонецОбласти

#Область ЗаполнениеКонтактныхЛицКонтрагента
	
	КонтактныеЛица = Отчеты.ДосьеКонтрагента.НоваяТаблицаДанныеПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	КонтактныеЛица.Наименование КАК Представление
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Контрагент
	|	И НЕ КонтактныеЛица.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		МассивЛиц = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
		ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивЛиц,,,
			ТекущаяДатаСеанса());
		Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
			
			НоваяСтрока = КонтактныеЛица.Добавить();
			НоваяСтрока.Ссылка        = СтрокаТаблицы.Ссылка;
			НоваяСтрока.Представление = СтрокаТаблицы.Представление;
			СтрокиКИ = ТаблицаКИ.Скопировать(Новый Структура("Объект", НоваяСтрока.Ссылка), "Представление,Тип");
			СтрокиКИ.Сортировать("Тип УБЫВ");
			Для каждого СтрокаКИ Из СтрокиКИ Цикл
				Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
					НоваяСтрока.Представление = НоваяСтрока.Представление + ", " + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

	ИнформацияОСвязях.ДанныеПрограммы.Вставить("КонтактныеЛица", КонтактныеЛица);

#КонецОбласти

#Область ЗаполнениеАдресаEMailКонтрагента
	
	СтруктураЮридическийАдрес = Отчеты.ДосьеКонтрагента.НовыеДанныеПрограммы();
	АдресПоДаннымПрограммы    = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента,,
		ТекущаяДатаСеанса());
	СтруктураЮридическийАдрес.Представление = АдресПоДаннымПрограммы;
	// Показываем расхождение адреса по данным программы с адресом по ЕГРЮЛ.
	Если ИнформацияОСвязях.Свойство("ЮридическийАдрес") 
		И ЗначениеЗаполнено(ИнформацияОСвязях.ЮридическийАдрес.Представление) Тогда
		ВывестиПримечание = ЗначениеЗаполнено(АдресПоДаннымПрограммы)
			И АдресПоДаннымПрограммы <> ИнформацияОСвязях.ЮридическийАдрес.Представление;
		Если ВывестиПримечание Тогда
			СтруктураЮридическийАдрес.ПримечаниеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По данным ЕГРЮЛ:
				|%1'"),
				ИнформацияОСвязях.ЮридическийАдрес.Представление);
		КонецЕсли;
	КонецЕсли;
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("ЮридическийАдрес", СтруктураЮридическийАдрес);
	
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Email", 
		УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Контрагент,
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,,
			ТекущаяДатаСеанса()));
	
#КонецОбласти

КонецПроцедуры 

// Заполнение идентификатора конфигурации для статистики переходов по ссылкам сервиса 1С:Контрагент.
//
// Параметры:
//  ИдентификаторКонфигурации  - Строка - идентификатор. 
//                 Рекомендуется использовать латинские строчные буквы и цифры.
//
//@skip-warning
Процедура ЗаполнитьИдентификаторКонфигурации(ИдентификаторКонфигурации) Экспорт

	ИдентификаторКонфигурации = РедакцииКонфигурацииКлиентСервер.ИдентификаторКонфигурации();

КонецПроцедуры

#КонецОбласти 

#Область ПрочиеПроцедуры

// Определение цветов выделения результатов проверки контрагентов.
// 		Для примера см. функцию ЦветаРезультатовПроверки ОМ ПроверкаКонтрагентовКлиентСервер.
//
// Параметры:
//  Цвета	 - Структура - Имена ключей - это названия цветов, которые необходимо определить.
// 		Список ключей см ПроверкаКонтрагентовВызовСервера.ЦветаРезультатовПроверки().
//
//@skip-warning
Процедура ПриОпределенииЦветовРезультатовПроверки(Цвета) Экспорт
	
КонецПроцедуры

// Заполнение значений колонок ЭтоЮридическоеЛицо, ЭтоИностранныйКонтрагент, ОтключитьПроверкуФНС и
// ПричинаОтключенияПроверкиФНС в таблице с данными контрагента.
//
// Параметры:
//   ДанныеКонтрагентов - ТаблицаЗначений - таблица с данными контрагентов
//     см. ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента.
//   СтандартнаяОбработка - Булево - если Истина, то заполнение будет выполнено стандартным образом путем перебора
//     каждой строки таблицы.
//
//@skip-warning
Процедура ДополнитьДанныеКонтрагентов(ДанныеКонтрагентов, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// При определении реквизитов ЭтоЮридическоеЛицо и ЭтоИностранныйКонтрагент есть ветки,
		// когда соответствующий элемент справочника может отсутствовать (ДанныеКонтрагентов.Ссылка IS NULL).
		// Такое может возникнуть, когда 
		// - проверяется объект (ссылки еще нет)
		// - в Досье контрагента, когда при проверке используется только ИНН и КПП, с самой
		// ссылки нет.
		// - при использовании функций ПроверитьКонтрагента и СостояниеКонтрагента ОМ
		// ПроверкаКонтрагентов извне как API без указания ссылки в параметре запуска.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо,
			|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ВЫБОР
			|		КОГДА ДанныеКонтрагентов.ЭтоЮридическоеЛицо = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА Контрагенты.ЮрФизЛицо ЕСТЬ NULL
			|					ТОГДА ВЫБОР
			|						КОГДА ПОДСТРОКА(ДанныеКонтрагентов.ИНН, 12, 1) <> """"
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|					КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|			КОНЕЦ
			|		ИНАЧЕ ДанныеКонтрагентов.ЭтоЮридическоеЛицо
			|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
			|	ВЫБОР
			|		КОГДА Контрагенты.ЮрФизЛицо ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ВЫБОР
			|			КОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент = НЕОПРЕДЕЛЕНО
			|				ТОГДА ВЫБОР
			|					КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|			ИНАЧЕ ДанныеКонтрагентов.ЭтоИностранныйКонтрагент
			|		КОНЕЦ
			|	КОНЕЦ КАК ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние,
			|	ВЫБОР
			|		КОГДА СостоянияКонтрагентов.ПричинаОтключения = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ОтключитьПроверкуФНС,
			|	СостоянияКонтрагентов.ПричинаОтключения КАК ПричинаОтключенияПроверкиФНС
			|ИЗ
			|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ДанныеКонтрагентов.Контрагент = Контрагенты.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
			|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентов.Контрагент";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
