////////////////////////////////////////////////////////////////////////////////
// Учет самочувствия сотрудников (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ближайшую дату учета самочувствия.
//
// Параметры:
//  ДатаРасчета - Дата - Дата, относительно которой нужно выполнить расчета.
// 
// Возвращаемое значение:
//  Дата - Ближайшая дата учета самочувствия.
//
Функция БлижайшаяДатаУчетаСамочувствия(Знач ДатаРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачалоДня = НачалоДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГрафикУчетаСамочувствияСотрудников.ВремяЗамера КАК Время
		|ИЗ
		|	Справочник.ГрафикУчетаСамочувствияСотрудников КАК ГрафикУчетаСамочувствияСотрудников
		|ГДЕ
		|	ГрафикУчетаСамочувствияСотрудников.Недействительная = ЛОЖЬ
		|	И ГрафикУчетаСамочувствияСотрудников.ВремяЗамера >= &Время
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяЗамера";
	
	Запрос.УстановитьПараметр("Время", Дата(1,1,1) + (ДатаРасчета - НачалоДня));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Дата(
			Год(НачалоДня),
			Месяц(НачалоДня),
			День(НачалоДня),
			Час(Выборка.Время),
			Минута(Выборка.Время),
			0);
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

// Возвращает предыдущую дату учета самочувствия.
//
// Параметры:
//  ДатаРасчета - Дата - Дата, относительно которой нужно выполнить расчета.
// 
// Возвращаемое значение:
//  Дата - Предыдущую дата учета самочувствия.
//
Функция ПредыдущаяДатаУчетаСамочувствия(Знач ДатаРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачалоДня = НачалоДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГрафикУчетаСамочувствияСотрудников.ВремяЗамера КАК Время
		|ИЗ
		|	Справочник.ГрафикУчетаСамочувствияСотрудников КАК ГрафикУчетаСамочувствияСотрудников
		|ГДЕ
		|	ГрафикУчетаСамочувствияСотрудников.Недействительная = ЛОЖЬ
		|	И ГрафикУчетаСамочувствияСотрудников.ВремяЗамера < &Время
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяЗамера УБЫВ";
	
	Запрос.УстановитьПараметр("Время", Дата(1,1,1) + (ДатаРасчета - НачалоДня));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Дата(
			Год(НачалоДня),
			Месяц(НачалоДня),
			День(НачалоДня),
			Час(Выборка.Время),
			Минута(Выборка.Время),
			0);
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

// Возвращает предыдущую точку учета самочувствия.
//
// Параметры:
//  ДатаРасчета - Дата - Дата, относительно которой нужно выполнить расчета.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГрафикУчетаСамочувствияСотрудников - Предыдущую точка учета самочувствия.
//
Функция ПредыдущаяТочкаУчетаСамочувствия(Знач ДатаРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачалоДня = НачалоДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГрафикУчетаСамочувствияСотрудников.Ссылка КАК ТочкаУчета
		|ИЗ
		|	Справочник.ГрафикУчетаСамочувствияСотрудников КАК ГрафикУчетаСамочувствияСотрудников
		|ГДЕ
		|	ГрафикУчетаСамочувствияСотрудников.Недействительная = ЛОЖЬ
		|	И ГрафикУчетаСамочувствияСотрудников.ВремяЗамера < &Время
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяЗамера УБЫВ";
	
	Запрос.УстановитьПараметр("Время", Дата(1,1,1) + (ДатаРасчета - НачалоДня));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТочкаУчета;
	Иначе
		Возврат Справочники.ГрафикУчетаСамочувствияСотрудников.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Определяет ответственных за учет самочувствия сотрудников.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи - Ответственные за учет самочувствия сотрудников.
//
Функция ОтветственныеЗаУчетСамочувствияСотрудников() Экспорт
	
	ОтветственныеЗаУчетСамочувствияСотрудников = Новый Массив;
	Для Каждого Пользователь Из РаботаСПользователями.ПолучитьВсехПользователей() Цикл
		
		Если Не ЭтоОтветственныйЗаУчетСамочувствияСотрудников(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтветственныеЗаУчетСамочувствияСотрудников.Добавить(Пользователь);
		
	КонецЦикла;
	
	Возврат ОтветственныеЗаУчетСамочувствияСотрудников;
	
КонецФункции

// Определяет самочувствия сотрудников с повышенной температурой за период.
//
// Параметры:
//  ДатаНачала - Дата - Дата начала периода.
//  ДатаОкончания - Дата - Дата окочнчания периода.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.СамочувствиеСотрудника - Самочувствия сотрудников с повышенной температурой за период.
//
Функция СамочувствияСотрудниковСПовышеннойТемпературой(ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СамочувствиеСотрудника.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СамочувствиеСотрудника КАК СамочувствиеСотрудника
		|ГДЕ
		|	СамочувствиеСотрудника.Проведен
		|	И СамочувствиеСотрудника.ДатаЗамера >= &ДатаНачала 
		|	И СамочувствиеСотрудника.ДатаЗамера <= &ДатаОкончания
		|	И СамочувствиеСотрудника.ПовышеннаяТемпература";
	Запрос.Параметры.Вставить("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.Параметры.Вставить("ДатаОкончания", КонецДня(ДатаОкончания));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает сотрудников для которых следует учесть самочувствие на дату.
//
// Параметры:
//  ДатаУчета - Дата и время
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Пользователи
//
Функция СотрудникиПодлежащиеУчетуСамочувствия(ДатаУчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СотрудникиПодлежащиеУчетуСамочувствия = Новый Массив;
	Если Не ПолучитьФункциональнуюОпцию("УчетСамочувствияСотрудников") Тогда
		Возврат СотрудникиПодлежащиеУчетуСамочувствия;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	УчетСамочувствияСотрудниковСерверПереопределяемый.ПриОпределенииСотрудниковПодлежащихУчетуСамочувствия(
		ДатаУчета, СотрудникиПодлежащиеУчетуСамочувствия, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат СотрудникиПодлежащиеУчетуСамочувствия;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиДляКонтроляСамочувствия.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиДляКонтроляСамочувствия КАК СотрудникиДляКонтроляСамочувствия");
	
	СотрудникиПодлежащиеУчетуСамочувствия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"); 
	
	// Исключим удаленных, недействительных и служебных пользователей.
	РеквизитыСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		СотрудникиПодлежащиеУчетуСамочувствия,
		"ПометкаУдаления, Служебный, Недействителен");
	КоличествоЭлементов = СотрудникиПодлежащиеУчетуСамочувствия.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Сотрудник = СотрудникиПодлежащиеУчетуСамочувствия[ОбратныйИндекс];
		
		РеквизитыСотрудника = РеквизитыСотрудников[Сотрудник];
		
		// Если не это действительный пользователь - считаем что он подлежит учету.
		Если Не РеквизитыСотрудника.ПометкаУдаления
			И Не РеквизитыСотрудника.Служебный
			И Не РеквизитыСотрудника.Недействителен Тогда
			Продолжить;
		КонецЕсли;
		
		// Если это не действительный, удаленный или служебный пользователь - исключаем сотрудника из учета.
		СотрудникиПодлежащиеУчетуСамочувствия.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	Возврат СотрудникиПодлежащиеУчетуСамочувствия;
	
КонецФункции

// Формирует данные отчета о замерах температуры за сегодня.
// 
// Возвращаемое значение:
//  Структура - Данные отчета о замерах температуры. См. УчетСамочувствияСотрудниковСервер.ДанныеОтчетаОЗамерахТемпературы().
//
Функция СформироватьОтчетЗаДень() Экспорт
	
	ДанныеОтчетОЗамерахТемпературы = Новый Структура(
		"КоличествоОтчитались, КоличествоНеОтчитались, КоличествоПлохоеСамочувствие,
		|НеОтчитались, ПлохоеСамочувствие");
	ДанныеОтчетОЗамерахТемпературы.КоличествоОтчитались = 0;
	ДанныеОтчетОЗамерахТемпературы.КоличествоНеОтчитались = 0;
	ДанныеОтчетОЗамерахТемпературы.КоличествоПлохоеСамочувствие = 0;
	ДанныеОтчетОЗамерахТемпературы.НеОтчитались = Новый Массив;
	ДанныеОтчетОЗамерахТемпературы.ПлохоеСамочувствие = Новый Массив;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаЗамера = НачалоДня(ТекущаяДата);
	ПредыдущаяДатаУчетаСамочувствия = ПредыдущаяДатаУчетаСамочувствия(ТекущаяДата);
	ТочкаЗамера = ПредыдущаяТочкаУчетаСамочувствия(ТекущаяДата);
	СотрудникиПодлежащиеУчетуСамочувствия = СотрудникиПодлежащиеУчетуСамочувствия(ПредыдущаяДатаУчетаСамочувствия);
	
	Если Не ЗначениеЗаполнено(ПредыдущаяДатаУчетаСамочувствия)
		Или Не ЗначениеЗаполнено(ТочкаЗамера)
		Или СотрудникиПодлежащиеУчетуСамочувствия.Количество() = 0 Тогда
		
		Возврат ДанныеОтчетОЗамерахТемпературы;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СамочувствиеСотрудника.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СамочувствиеСотрудника.ПовышеннаяТемпература) КАК ПовышеннаяТемпература
		|ИЗ
		|	Документ.СамочувствиеСотрудника КАК СамочувствиеСотрудника
		|ГДЕ
		|	СамочувствиеСотрудника.Проведен
		|	И СамочувствиеСотрудника.ДатаЗамера = &ДатаЗамера
		|	И СамочувствиеСотрудника.ТочкаЗамера = &ТочкаЗамера
		|	И СамочувствиеСотрудника.Сотрудник В(&СотрудникиПодлежащиеУчетуСамочувствия)
		|
		|СГРУППИРОВАТЬ ПО
		|	СамочувствиеСотрудника.Сотрудник");
	
	Запрос.УстановитьПараметр("ДатаЗамера", ДатаЗамера);
	Запрос.УстановитьПараметр("ТочкаЗамера", ТочкаЗамера);
	Запрос.УстановитьПараметр("СотрудникиПодлежащиеУчетуСамочувствия", СотрудникиПодлежащиеУчетуСамочувствия);
	
	ДанныеСамочувствияСотрудников = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Сотрудник Из СотрудникиПодлежащиеУчетуСамочувствия Цикл
		
		ДанныеСамочувствияСотрудника = ДанныеСамочувствияСотрудников.Найти(Сотрудник, "Сотрудник");
		Если ДанныеСамочувствияСотрудника = Неопределено Тогда
			
			ДанныеОтчетОЗамерахТемпературы.КоличествоНеОтчитались =
				ДанныеОтчетОЗамерахТемпературы.КоличествоНеОтчитались + 1;
			
			ДанныеОтчетОЗамерахТемпературы.НеОтчитались.Добавить(Сотрудник);
			
		ИначеЕсли ДанныеСамочувствияСотрудника.ПовышеннаяТемпература Тогда
			
			ДанныеОтчетОЗамерахТемпературы.КоличествоОтчитались =
				ДанныеОтчетОЗамерахТемпературы.КоличествоОтчитались + 1;
			ДанныеОтчетОЗамерахТемпературы.КоличествоПлохоеСамочувствие =
				ДанныеОтчетОЗамерахТемпературы.КоличествоПлохоеСамочувствие + 1;
			
			ДанныеОтчетОЗамерахТемпературы.ПлохоеСамочувствие.Добавить(Сотрудник);
			
		Иначе
			
			ДанныеОтчетОЗамерахТемпературы.КоличествоОтчитались =
				ДанныеОтчетОЗамерахТемпературы.КоличествоОтчитались + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеОтчетОЗамерахТемпературы;
	
КонецФункции

// Определяет, что пользователь является ответственным за учет самочувствия сотрудников.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  Булево - Это ответственный за учет самочувствия сотрудников.
//
Функция ЭтоОтветственныйЗаУчетСамочувствияСотрудников(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СвойстваПользователяИБ.ПользовательИБ.Роли.Содержит(
		Метаданные.Роли.КонтрольСамочувствияСотрудников);
	
КонецФункции

// Возвращает точку замера для сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - Пользователь.
//  Дата - Дата - дата на которую выполняется получение точки.
//
// Возвращаемое значение:
//  СправочникСсылка.ГрафикУчетаСамочувствияСотрудников
//
Функция ТочкаЗамераДляСотрудникаНаДату(Сотрудник, Дата) Экспорт
	
	ТочкаЗамера = Справочники.ГрафикУчетаСамочувствияСотрудников.ПустаяСсылка();
	СтандартнаяОбработка = Истина;
	УчетСамочувствияСотрудниковСерверПереопределяемый.ПриПолученииТочкиЗамераДляСотрудникаНаДату(
		Сотрудник, Дата, ТочкаЗамера, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ТочкаЗамера;
	КонецЕсли;
	
	ТочкиИДатыЗамера = Новый ТаблицаЗначений;
	ТочкиИДатыЗамера.Колонки.Добавить("ТочкаЗамера");
	ТочкиИДатыЗамера.Колонки.Добавить("ДатаЗамера");
	
	Для Каждого СтрокаТочки Из Справочники.ГрафикУчетаСамочувствияСотрудников.ДействительныеТочкиЗамеров() Цикл
		
		ДатаЗамера = Дата(
			Год(Дата),
			Месяц(Дата),
			День(Дата),
			Час(СтрокаТочки.ВремяЗамера),
			Минута(СтрокаТочки.ВремяЗамера),
			0);
			
		Если ДатаЗамера < Дата Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТочкиИДатыЗамера.Добавить();
		СтрокаТаблицы.ТочкаЗамера = СтрокаТочки.ТочкаЗамера;
		СтрокаТаблицы.ДатаЗамера = ДатаЗамера;
		
	КонецЦикла;
	
	Если ТочкиИДатыЗамера.Количество() = 0 Тогда
		Возврат Справочники.ГрафикУчетаСамочувствияСотрудников.ПустаяСсылка();
	Иначе
		Возврат ТочкиИДатыЗамера[0].ТочкаЗамера;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура КонтрольСамочувствияСотрудников() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольСамочувствияСотрудников);
	
	РаботаСУведомлениями.КонтрольСамочувствияСотрудников();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти