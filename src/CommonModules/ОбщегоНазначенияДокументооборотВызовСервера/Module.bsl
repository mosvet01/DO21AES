
// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//
// Возвращаемое значение:
//   Строка 
// 
Функция ПредметСтрокой(СсылкаНаПредмет, ИмяПредмета = Неопределено) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	ИначеЕсли СсылкаНаПредмет = Неопределено или СсылкаНаПредмет.Пустая() Тогда
		Если ИмяПредмета = Неопределено Тогда
			Результат = НСтр("ru = 'не введен'");
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (не введен)'"),Строка(ИмяПредмета));
		КонецЕсли;
	Иначе
		МетаданныеПредмета = СсылкаНаПредмет.Метаданные();
		Если ИмяПредмета = Неопределено Тогда
			ПредставлениеОбъекта = МетаданныеПредмета.ПредставлениеОбъекта;
			Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
				ПредставлениеОбъекта = МетаданныеПредмета.Представление();
			КонецЕсли;
		Иначе
			ПредставлениеОбъекта = Строка(ИмяПредмета);
		КонецЕсли;
		
		ПредставлениеСсылки = Строка(СсылкаНаПредмет);
		
		Если МетаданныеПредмета.Имя = "Файлы" Тогда
			ОписаниеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПредмет, "Описание");
			Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
				ПредставлениеСсылки = ПредставлениеСсылки + ", " + ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", ПредставлениеСсылки, ПредставлениеОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	
КонецФункции

Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита);
	
КонецФункции

Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСсылка(Тип);
	
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по текущую версию включительно.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию() Экспорт
	
	ВывестиОписаниеИзмененийДляАдминистратора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ",
		"ВывестиОписаниеИзмененийДляАдминистратора",,,
		ИмяПользователя());
	Если ВывестиОписаниеИзмененийДляАдминистратора = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
			"ОбновлениеИБ",
			"ВывестиОписаниеИзмененийДляАдминистратора",
			ИмяПользователя());
	КонецЕсли;
	
КонецПроцедуры

// Определяет параметры установки пометки удаления.
//
// Параметры:
//  ОбъектыКУдалению - Массив из ЛюбаяСсылка - Объекты к удалению. Все объекты должны быть одного типа.
// 
// Возвращаемое значение:
//  Структура - Параметры установки пометки удаления.
//   * ТекстВопроса - Строка - Текст вопроса пользователю.
//   * ПометкаУдаления - Булево - Устанавливаемая пометка удаления.
//   * ИмяСобытия - Строка - Имя события оповещения.
//
Функция ПараметрыУстановкиПометкиУдаления(Знач ОбъектыКУдалению) Экспорт
	
	КоличествоОбъектов = ОбъектыКУдалению.Количество();
	
	ПараметрыПометки = Новый Структура("ТекстВопроса, ПометкаУдаления, ИмяСобытия");
	ПараметрыПометки.ТекстВопроса = "";
	ПараметрыПометки.ПометкаУдаления = Ложь;
	ПараметрыПометки.ИмяСобытия = "";
	Если КоличествоОбъектов = 0 Тогда
		Возврат ПараметрыПометки;
	КонецЕсли;
	
	ТипОбъектов = ТипЗнч(ОбъектыКУдалению[0]);
	Для Каждого ОбъектКУдалению Из ОбъектыКУдалению Цикл
		
		Если ТипЗнч(ОбъектКУдалению) <> ТипОбъектов Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректный тип элемента %1. Все объекты должны быть одного типа %2.'"),
				ТипЗнч(ОбъектКУдалению),
				ТипОбъектов);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяПометкаУдаления = Ложь;
	ПометкиУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбъектыКУдалению, "ПометкаУдаления");
	Для Каждого КлючИЗначения Из ПометкиУдаления Цикл
		
		Если КлючИЗначения.Значение = Истина Тогда
			ОбщаяПометкаУдаления = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПометки.ПометкаУдаления = Не ОбщаяПометкаУдаления;
	
	Если КоличествоОбъектов = 1 И ПараметрыПометки.ПометкаУдаления = Истина Тогда
		
		ПараметрыПометки.ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			Строка(ОбъектыКУдалению[0]));
		
	ИначеЕсли КоличествоОбъектов = 1 И ПараметрыПометки.ПометкаУдаления = Ложь Тогда
		
		ПараметрыПометки.ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			Строка(ОбъектыКУдалению[0]));
			
	ИначеЕсли КоличествоОбъектов > 1 И ПараметрыПометки.ПометкаУдаления = Истина Тогда
		
		ПараметрыПометки.ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		
	ИначеЕсли КоличествоОбъектов > 1 И ПараметрыПометки.ПометкаУдаления = Ложь Тогда
		
		ПараметрыПометки.ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку удаления?'");
		
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОбъектов);
	Если ОбъектМетаданных <> Неопределено Тогда
		ПараметрыПометки.ИмяСобытия = "Запись_" + ОбъектМетаданных.Имя;
	КонецЕсли;
	
	Возврат ПараметрыПометки;
	
КонецФункции

// Устанавливает пометку удаления для указанных объектов.
//
// Параметры:
//  ОбъектыКУдалению - Массив из ЛюбаяСсылка - Объекты к удалению.
//  ПометкаУдаления	 - Булево - Пометка удаления, которую необходимо установить.
//
Процедура УстановитьПометкуУдаления(Знач ОбъектыКУдалению, Знач ПометкаУдаления) Экспорт
	
	Для Каждого Ссылка Из ОбъектыКУдалению Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Ссылка);
		
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект.ПометкаУдаления = ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.УстановитьПометкуУдаления(ПометкаУдаления);
		
	КонецЦикла;
	
КонецПроцедуры