///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений:
//     * Имя           - Строка - имя набора свойств. Формируется из полного имени объекта
//          метаданных заменой символа "." на "_".
//          Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - уникальный идентификатор предопределенного набора свойств.
//          Не должен повторяться в других наборах свойств.
//          Формат идентификатора Random UUID (Version 4).
//          Чтобы получить идентификатор, нужно в режиме 1С:Предприятие вычислить значение
//          конструктора платформы "Новый УникальныйИдентификатор" или воспользоваться online-генератором,
//          например, https://www.uuidgenerator.net/version4.
//     * Используется  - Неопределено
//                     - Булево - признак того, что набор свойств используется.
//          Например, можно использовать для скрытия набора по функциональным опциям.
//          Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	
	
КонецПроцедуры

// Получает наименования наборов свойств второго уровня на разных языках.
//
// Параметры:
//  Наименования - Соответствие из КлючИЗначение - представление набора на переданном языке:
//     * Ключ     - Строка - имя набора свойств. Например, "Справочник_Партнеры_Общие".
//     * Значение - Строка - наименование набора для переданного кода языка.
//  КодЯзыка - Строка - код языка. Например, "en".
//
// Пример:
//  Наименования["Справочник_Партнеры_Общие"] = НСтр("ru='Общие'; en='General';", КодЯзыка);
//
Процедура ПриПолученииНаименованийНаборовСвойств(Наименования, КодЯзыка) Экспорт
	
	
	
КонецПроцедуры

// Заполняет наборы свойств объекта. Обычно требуется, если наборов более одного.
//
// Параметры:
//  Объект       - ЛюбаяСсылка      - ссылка на объект со свойствами.
//               - ФормаКлиентскогоПриложения - форма объекта, к которому подключены свойства.
//               - ДанныеФормыСтруктура - описание объекта, к которому подключены свойства.
//
//  ТипСсылки    - Тип - тип ссылки владельца свойств.
//
//  НаборыСвойств - ТаблицаЗначений:
//     * Набор - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
//     * ОбщийНабор - Булево - Истина, если набор свойств содержит свойства,
//                             общие для всех объектов.
//    // Далее свойства элемента формы типа ГруппаФормы вида обычная группа
//    // или страница, которая создается, если наборов больше одного без учета
//    // пустого набора, который описывает свойства группы удаленных реквизитов.
//
//    // Если значение Неопределено, значит, использовать значение по умолчанию.
//
//    // Для любой группы управляемой формы.
//     * Высота                   - Число
//     * Заголовок                - Строка
//     * Подсказка                - Строка
//     * РастягиватьПоВертикали   - Булево
//     * РастягиватьПоГоризонтали - Булево
//     * ТолькоПросмотр           - Булево
//     * ЦветТекстаЗаголовка      - Цвет
//     * Ширина                   - Число
//     * ШрифтЗаголовка           - Шрифт
//                    
//    // Для обычной группы и страницы.
//     * Группировка              - ГруппировкаПодчиненныхЭлементовФормы
//
//    // Для обычной группы.
//     * Отображение              - ОтображениеОбычнойГруппы
//
//    // Для страницы.
//     * Картинка                 - Картинка
//     * ОтображатьЗаголовок      - Булево
//
//  СтандартнаяОбработка - Булево - начальное значение Истина. Указывает, получать ли
//                         основной набор, когда НаборыСвойств.Количество() равно нулю.
//
//  КлючНазначения   - Неопределено - (начальное значение) - указывает вычислить
//                      ключ назначения автоматически и добавить к значениям свойств
//                      формы КлючНазначенияИспользования и КлючСохраненияПоложенияОкна,
//                      чтобы изменения формы (настройки, положение и размер) сохранялись
//                      отдельно для разного состава наборов.
//                      Например, для каждого вида номенклатуры - свой состав наборов.
//
//                   - Строка - (не более 32 символа) - использовать указанный ключ
//                      назначения для добавления к значениям свойств формы.
//                      Пустая строка - не изменять свойства ключей формы, т.к. они
//                      устанавливается в форме и уже учитывают различия состава наборов.
//
//                    Добавка имеет формат "КлючНаборовСвойств<КлючНазначения>",
//                    чтобы <КлючНазначения> можно было обновлять без повторной добавки.
//                    При автоматическом вычислении <КлючНазначения> содержит хеш
//                    идентификаторов ссылок упорядоченных наборов свойств.
//
Процедура ЗаполнитьНаборыСвойствОбъекта(Знач Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения) Экспорт
	
	Если ТипСсылки = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ЗаполнитьНаборыСвойствПоВидуВнутреннегоДокумента(Объект.ВидДокумента, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		ЗаполнитьНаборыСвойствПоВидуВходящегоДокумента(Объект.ВидДокумента, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		ЗаполнитьНаборыСвойствПоВидуИсходящегоДокумента(Объект.ВидДокумента, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда	
		ЗаполнитьНаборыСвойствПоВидуКонтрагента(Объект.ЮрФизЛицо, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.БанковскиеСчета") Тогда 
		ЗаполнитьНаборыСвойствБанковскогоСчета(Объект.Владелец, НаборыСвойств);
		
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(Метаданные.НайтиПоТипу(ТипСсылки)) Тогда
		ЗаполнитьДоступныеНаборыСвойствБизнесПроцесса(Объект.Ссылка, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗаполнитьДоступныеНаборыСвойствЗадачи(Объект, НаборыСвойств);
	
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Мероприятия") Тогда
		ЗаполнитьНаборыСвойствПоВидуМероприятия(Объект.ВидМероприятия, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Проекты") Тогда 
		ЗаполнитьНаборыСвойствПроекта(Объект.ВидПроекта, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		ЗаполнитьНаборыСвойствПроектнойЗадачи(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ВидПроекта"),
			НаборыСвойств);
	
	ИначеЕсли ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Объект.Ссылка) Тогда
		ЗаполнитьДоступныеНаборыСвойствШаблонаПроцесса(Объект, НаборыСвойств);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов
// 
// Параметры:
//  Настройки - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов.Настройки
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
//
// Параметры:
//  КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//  Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//  ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов
//
// Параметры:
//  Объект                  - СправочникОбъект.РолиИсполнителей - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения объекта.
//  ДополнительныеПараметры - Структура:
//   * ПредопределенныеДанные - ТаблицаЗначений - данные заполненные в процедуре ПриНачальномЗаполненииЭлементов.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Переопределяет проверку поддержки проверки условий доп. свойств для объекта.
// Вызывается из УправлениеСвойствами.ОбъектПоддерживаетПроверкуУсловийДопСвойств
//
// Параметры:
//  ОписаниеОбъекта - Объект ссылочного типа или структура описывающая объект, с необходимыми полями (обязательное поле: Ссылка).
//  Результат - Булево - в этот параметр следует поместить результат.
//  СтандартнаяОбработка - Булево - при переопределении следует присвоить Ложь.
//
Процедура ПриОпределенииПоддержкиПроверкиУсловийДопСвойств(
	ОписаниеОбъекта, Результат, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(ОписаниеОбъекта.Ссылка) Тогда
		Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоШаблонДокумента(ОписаниеОбъекта.Ссылка) Тогда
		Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Результат = Истина;
	
КонецПроцедуры

// Переопределяет получение доп. реквизитов отбора для условий объекта с дополнительными реквизитами.
// Вызывается из УправлениеСвойствами.ДопРеквизитыОтбораДляУсловий
//
// Параметры:
//  ОписаниеОбъекта - Объект ссылочного типа или структура описывающая объект, с необходимыми полями (обязательное поле: Ссылка).
//  Результат - Структура - в этот параметр следует заполнить нужными свойствами.
//  СтандартнаяОбработка - Булево - при переопределении следует присвоить Ложь.
//
Процедура ПриОпределенииДопРеквизитовОтбораДляУсловий(ОписаниеОбъекта, Результат, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	
	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Результат.Вставить(
			РеквизитСДаннымиПроцессаВФормеЗадачи(),
			ДанныеПроцессаЗадачи(ОписаниеОбъекта));
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет получение реквизитов отбора для условий видимости/доступности/обязательности для доп. свойств набора.
// Вызывается из УправлениеСвойствами.РеквизитыОтбораДляУсловийДопСвойств
//
// Параметры:
//  НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - ссылка на набор доп. свойств.
//  РеквизитыОбъекта - ТаблицаЗначений - в эту таблицу следует поместить результат.
//                     описание колонок см. в УправлениеСвойствами.РеквизитыОтбораДляУсловийДопСвойств
//  СтандартнаяОбработка - при переопределении следует присвоить Ложь.
//
Процедура ПриФормированииРеквизитовОтбораДляУсловийДопСвойств(
	НаборСвойств, РеквизитыОбъекта, СтандартнаяОбработка) Экспорт
	
	Если Не ЭтоНаборСвойствЗадачиПроцесса(НаборСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыОбъекта = Новый ТаблицаЗначений;
	РеквизитыОбъекта.Колонки.Добавить("Реквизит");
	РеквизитыОбъекта.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	РеквизитыОбъекта.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов);
	РеквизитыОбъекта.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	РеквизитыОбъекта.Колонки.Добавить("РежимВыбора", Новый ОписаниеТипов("ИспользованиеГруппИЭлементов"));
	
	НаборДополнительныхРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НаборСвойств, "ДополнительныеРеквизиты").Выгрузить();
	
	Для Каждого ДополнительныйРеквизит Из НаборДополнительныхРеквизитов Цикл
		ДобавитьДополнительныйРеквизитНабораСвойстваВТаблицу(РеквизитыОбъекта, ДополнительныйРеквизит);
	КонецЦикла;
	
	МетаданныеЗадачи = Метаданные.Задачи.ЗадачаИсполнителя;
	Для Каждого Реквизит Из МетаданныеЗадачи.СтандартныеРеквизиты Цикл
		ДобавитьРеквизитВТаблицу(РеквизитыОбъекта, Реквизит, "", "", Истина);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеЗадачи.Реквизиты Цикл
		ДобавитьРеквизитВТаблицу(РеквизитыОбъекта, Реквизит);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеЗадачи.РеквизитыАдресации Цикл
		ДобавитьРеквизитВТаблицу(РеквизитыОбъекта, Реквизит);
	КонецЦикла;
	
	МетаданныеПроцесса = МетаданныеПроцессаПоНаборуСвойствЗадачиПроцесса(НаборСвойств);
	ПрефиксИмени = "ДопРеквизитыОтбораДляУсловий." + РеквизитСДаннымиПроцессаВФормеЗадачи();
	ПрефиксПредставления = НСтр("ru = 'Бизнес-процесс'");
	Для Каждого Реквизит Из МетаданныеПроцесса.СтандартныеРеквизиты Цикл
		ДобавитьРеквизитВТаблицу(
			РеквизитыОбъекта,
			Реквизит,
			ПрефиксИмени + "." + Реквизит.Имя,
			ПрефиксПредставления + "." + Реквизит.Представление(),
			Истина);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеПроцесса.Реквизиты Цикл
		ДобавитьРеквизитВТаблицу(
			РеквизитыОбъекта,
			Реквизит,
			ПрефиксИмени + "." + Реквизит.Имя,
			ПрефиксПредставления + "." + Реквизит.Представление());
	КонецЦикла;
	
	РеквизитыОбъекта.Сортировать("Представление Возр");
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствПоВидуВнутреннегоДокумента(ВидДокумента, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,	
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ВнутренниеДокументы_Общие);

	Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(ВидДокумента.НаборСвойств) Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	ВидДокумента.НаборСвойств);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствПоВидуВходящегоДокумента(ВидДокумента, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,	
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ВходящиеДокументы_Общие);

	Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(ВидДокумента.НаборСвойств) Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	ВидДокумента.НаборСвойств);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствПоВидуИсходящегоДокумента(ВидДокумента, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,	
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ИсходящиеДокументы_Общие);

	Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(ВидДокумента.НаборСвойств) Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	ВидДокумента.НаборСвойств);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствПоВидуКонтрагента(ЮрФизЛицо, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,	
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты_Общие);

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыЮрЛицо);
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыФизЛицо);
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда	
		ДобавитьСтрокуНабора(НаборыСвойств,	
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыИП);
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтрагентыНерезидент);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствБанковскогоСчета(Владелец, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,	
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_БанковскиеСчета_Общие);
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_БанковскиеСчетаКонтрагента);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ДобавитьСтрокуНабора(НаборыСвойств,	
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_БанковскиеСчетаОрганизации);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДоступныеНаборыСвойствБизнесПроцесса(Объект, НаборыСвойств) Экспорт
	
	ТипЗначения = ТипЗнч(Объект.Ссылка);
	Попытка
		Если ТипЗначения = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
			ИЛИ ТипЗначения = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
			ИЛИ ТипЗначения = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
	        ДобавитьСтрокуНабора(НаборыСвойств,	ПредопределенноеЗначение(
				"Справочник.НаборыДополнительныхРеквизитовИСведений.БизнесПроцесс_" + Объект.Метаданные().Имя));
		Иначе
			ДобавитьСтрокуНабора(НаборыСвойств,	ПредопределенноеЗначение(
				"Справочник.НаборыДополнительныхРеквизитовИСведений.БизнесПроцесс_" + Объект.Метаданные().Имя + "_Общие"));
		КонецЕсли;
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не выполнена настройка дополнительных реквизитов для процессов ""%1.""'"), 
			Строка(ТипЗначения));
		ВызватьИсключение Текст;
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаполнитьДоступныеНаборыСвойствШаблонаПроцесса(Объект, НаборыСвойств) Экспорт
	
	МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ИмяПроцесса = МенеджерШаблона.ИмяПроцесса(Объект);
	
	ТипЗначения = ТипЗнч(Объект.Ссылка);
	
	Попытка
		Если ТипЗначения = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
			ДобавитьСтрокуНабора(НаборыСвойств, ПредопределенноеЗначение(
				"Справочник.НаборыДополнительныхРеквизитовИСведений.БизнесПроцесс_" + ИмяПроцесса));
		Иначе
			ДобавитьСтрокуНабора(НаборыСвойств,	ПредопределенноеЗначение(
				"Справочник.НаборыДополнительныхРеквизитовИСведений.БизнесПроцесс_" + ИмяПроцесса + "_Общие"));
		КонецЕсли;
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не выполнена настройка дополнительных реквизитов для шаблона процесса ""%1.""'"), 
			Строка(ТипЗначения));
		ВызватьИсключение Текст;
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаполнитьДоступныеНаборыСвойствЗадачи(Объект, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,	
		Справочники.НаборыДополнительныхРеквизитовИСведений.Задача_ЗадачаИсполнителя);
	
	БизнесПроцесс = Объект.БизнесПроцесс;
	ТипЗначения = ТипЗнч(БизнесПроцесс);
	
	ИмяНабора = ИмяНабораПоТочкеМаршрутаЗадачи(БизнесПроцесс.Метаданные(), Объект.ТочкаМаршрута);
	Попытка
		ДобавитьСтрокуНабора(НаборыСвойств, Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяНабора]);
	Исключение
		// обработчик пустой, так как для ведущих задач доп.реквизиты не задаются
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьСтрокуНабора(НаборыСвойств, ЗначениеНабора)
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор = ЗначениеНабора;
	
КонецПроцедуры

Функция ЭтоНаборСвойствЗадачиПроцесса(НаборСвойств)
	
	НаборыСвойствЗадачПроцесса = Новый Массив;
	
	Для Каждого МетаданныеПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Для Каждого ТочкаМаршрута Из БизнесПроцессы[МетаданныеПроцесса.Имя].ТочкиМаршрута Цикл
			Если ТочкаМаршрута.Вид <> ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
				Продолжить;
			КонецЕсли;
			ИмяНабора = ИмяНабораПоТочкеМаршрутаЗадачи(МетаданныеПроцесса, ТочкаМаршрута);
			НаборыСвойствЗадачПроцесса.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяНабора]);
		КонецЦикла;
		
	КонецЦикла;
	
	Если НаборыСвойствЗадачПроцесса.Найти(НаборСвойств) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИмяНабораПоТочкеМаршрутаЗадачи(МетаданныеПроцесса, ТочкаМаршрута)
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	Если МетаданныеПроцесса = МетаданныеПроцессов.ОбработкаВнутреннегоДокумента
		Или МетаданныеПроцесса = МетаданныеПроцессов.ОбработкаВходящегоДокумента
		Или МетаданныеПроцесса = МетаданныеПроцессов.ОбработкаИсходящегоДокумента Тогда
		
		Возврат "БизнесПроцесс_" + МетаданныеПроцесса.Имя;
		
	КонецЕсли;
	
	Возврат "БизнесПроцесс_" + МетаданныеПроцесса.Имя + "_" + ТочкаМаршрута.Имя;
	
КонецФункции

Процедура ДобавитьРеквизитВТаблицу(РеквизитыОбъекта, Реквизит,
	ИмяРеквизита = "", ПредставлениеРеквизита = "", Стандартный = Ложь)
	
	СтрокаРеквизит = РеквизитыОбъекта.Добавить();
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		СтрокаРеквизит.Реквизит = ИмяРеквизита;
	Иначе
		СтрокаРеквизит.Реквизит = Реквизит.Имя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
		СтрокаРеквизит.Представление = ПредставлениеРеквизита;
	Иначе
		СтрокаРеквизит.Представление = Реквизит.Представление();
	КонецЕсли;
	
	СтрокаРеквизит.НомерКартинки  = 1;
	СтрокаРеквизит.ТипЗначения = Реквизит.Тип;
	Если Стандартный Тогда
		СтрокаРеквизит.РежимВыбора = ?(Реквизит.Имя = "Родитель", ИспользованиеГруппИЭлементов.Группы, Неопределено);
	Иначе
		СтрокаРеквизит.РежимВыбора = Реквизит.ВыборГруппИЭлементов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДополнительныйРеквизитНабораСвойстваВТаблицу(РеквизитыОбъекта, ДополнительныйРеквизит)
	
	СвойстваОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДополнительныйРеквизит.Свойство, "Наименование, ТипЗначения");
	СтрокаРеквизит = РеквизитыОбъекта.Добавить();
	СтрокаРеквизит.Реквизит = ДополнительныйРеквизит.Свойство;
	СтрокаРеквизит.Представление = СвойстваОбъекта.Наименование;
	СтрокаРеквизит.НомерКартинки  = 2;
	СтрокаРеквизит.ТипЗначения = СвойстваОбъекта.ТипЗначения;
	
КонецПроцедуры

Функция МетаданныеПроцессаПоНаборуСвойствЗадачиПроцесса(НаборСвойств)
	
	ИмяПредопределенныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НаборСвойств, "ИмяПредопределенныхДанных");
	
	ЧастиИмени = СтрРазделить(ИмяПредопределенныхДанных, "_");
	
	Возврат Метаданные.БизнесПроцессы[ЧастиИмени[1]];
	
КонецФункции

Функция РеквизитСДаннымиПроцессаВФормеЗадачи()
	
	Возврат "БизнесПроцесс";
	
КонецФункции

Функция ДанныеПроцессаЗадачи(Задача)
	
	МетаданныеПроцесса = Задача.БизнесПроцесс.Метаданные();
	
	РеквизитыПроцесса = Новый Массив;
	Для Каждого Реквизит Из МетаданныеПроцесса.СтандартныеРеквизиты Цикл
		РеквизитыПроцесса.Добавить(Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеПроцесса.Реквизиты Цикл
		РеквизитыПроцесса.Добавить(Реквизит.Имя);
	КонецЦикла;
	РеквизитыПроцесса = СтрСоединить(РеквизитыПроцесса, ", ");
	
	Возврат ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Задача.БизнесПроцесс, РеквизитыПроцесса);
	
КонецФункции

Процедура ЗаполнитьНаборыСвойствПроекта(ВидПроекта, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Проекты_Общие);
	
	Если ЗначениеЗаполнено(ВидПроекта) И ЗначениеЗаполнено(ВидПроекта.НаборСвойствПроектов) Тогда
		ДобавитьСтрокуНабора(НаборыСвойств, ВидПроекта.НаборСвойствПроектов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствПроектнойЗадачи(ВидПроекта, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ПроектныеЗадачи_Общие);
	
	Если ЗначениеЗаполнено(ВидПроекта) И ЗначениеЗаполнено(ВидПроекта.НаборСвойствПроектов) Тогда
		ДобавитьСтрокуНабора(НаборыСвойств, ВидПроекта.НаборСвойствПроектныхЗадач);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаборыСвойствПоВидуМероприятия(ВидМероприятия, НаборыСвойств) Экспорт
	
	ДобавитьСтрокуНабора(НаборыСвойств,
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Мероприятия_Общие);

	Если ЗначениеЗаполнено(ВидМероприятия) И ЗначениеЗаполнено(ВидМероприятия.НаборСвойств) Тогда
		ДобавитьСтрокуНабора(НаборыСвойств, ВидМероприятия.НаборСвойств);
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

