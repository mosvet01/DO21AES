////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, бизнес-процессы и задачи
// Реализует функционал веб-сервиса DMService в части бизнес-процессов и задач
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет основные свойства задачи
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя, ВыборкаИзРезультатаЗапроса - ЗадачаИсполнителя
//   ПравоИзменения - Булево - Истина, если разрешено изменение задачи
//                  - Неопределено, если права требуется получить самостоятельно
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов задачи
//   ПолучитьДопРеквизиты - Булево - Истина, если нужно получить набор дополнительных реквизитов задачи
//
Процедура ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Задача, ПравоИзменения = Неопределено,
		ПолучитьПредметы = Истина, ПолучитьДопРеквизиты = Истина) Экспорт
	
	ЗадачаXDTO.name = Задача.Наименование;
	ЗадачаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.Ссылка);
	
	ЗадачаXDTO.performer = ПодготовитьИсполнителя(Задача, "Исполнитель", "РольИсполнителя");
	ЗадачаXDTO.dueDate = Задача.СрокИсполнения;
	ЗадачаXDTO.executed = Задача.Выполнена;
	Если ТипЗнч(Задача) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		executionMark = Задача.РезультатЗавершения;
	Иначе
		executionMark = ПометкаВариантаВыполненияЗадачи(Задача.Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(executionMark) Тогда
		ЗадачаXDTO.executionMark = executionMark;
	КонецЕсли;
	ЗадачаXDTO.endDate = Задача.ДатаИсполнения;
	ЗадачаXDTO.beginDate = Задача.Дата;
	ЗадачаXDTO.businessProcessStep = Строка(Задача.ТочкаМаршрута);
	ЗадачаXDTO.number = Задача.Номер;
	ЗадачаXDTO.executionComment = Задача.РезультатВыполнения;
	ЗадачаXDTO.description = Задача.Описание;
	ЗадачаXDTO.parentBusinessProcess = ПолучитьОбъектXDTOБизнесПроцессаПоТипу(ТипЗнч(Задача.БизнесПроцесс));
	ЗадачаXDTO.parentBusinessProcess.name = Строка(Задача.БизнесПроцесс);
	ЗадачаXDTO.parentBusinessProcess.objectId = 
		ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.БизнесПроцесс);
	
	// Определим право на изменение задачи.
	Если ПравоИзменения <> Неопределено Тогда
		ЗадачаXDTO.changeRight = ПравоИзменения;
	Иначе
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Задача.Ссылка,
			Пользователи.ТекущийПользователь());
		ЗадачаXDTO.changeRight = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	ПередатьЗначениеАвтора(Задача, ЗадачаXDTO);
	ПередатьЗначениеВажности(Задача, ЗадачаXDTO);
	ПередатьЗначениеСостоянияВыполнения(Задача.Ссылка, ЗадачаXDTO);
	
	Если ПолучитьПредметы Тогда
		ПередатьЗначенияПредметовБизнесПроцессаЗадачи(Задача.Ссылка, ЗадачаXDTO);
	КонецЕсли;
	
	Если ПолучитьДопРеквизиты Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Задача, ЗадачаXDTO);
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Задача);
	
КонецПроцедуры

// Заполняет свойства задачи, специфичные для ее типа
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаИсполнителя
//
Процедура ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(ЗадачаXDTO, Задача) Экспорт
	
	ИмяТипа = ЗадачаXDTO.Тип().Имя;
	
	ЗадачаXDTO.objectId.type = ИмяТипа;
	
	Если ИмяТипа = "DMBusinessProcessOrderTaskCheckup" Тогда
		
		РезультатыПроверки = ОбщегоНазначения.
			ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "РезультатыПроверки").Выгрузить();
		НайденнаяСтрока = РезультатыПроверки.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаДоработку;
			ЗадачаXDTO.iterationNumber = РезультатыПроверки.Количество();
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskApproval" Тогда
		
		РезультатыСогласования = ОбщегоНазначения.
			ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "РезультатыСогласования").Выгрузить();
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
			ЗадачаXDTO.approvalResult.name = Строка(НайденнаяСтрока.РезультатСогласования);
			ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				НайденнаяСтрока.РезультатСогласования);
		ИНаче
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskCheckup" Тогда
		// номер итерации
		РезультатыОзнакомлений = ОбщегоНазначения.
			ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "РезультатыОзнакомлений").Выгрузить();
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		// результат согласования
		ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
		ЗадачаXDTO.approvalResult.name = Строка(Перечисления.РезультатыСогласования.Согласовано);
		ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			Перечисления.РезультатыСогласования.Согласовано);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача.БизнесПроцесс,
			"РезультатыСогласования, РезультатыОзнакомлений");
		
		РезультатыСогласования = РеквизитыПроцесса.РезультатыСогласования.Выгрузить();
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
				ЗадачаXDTO.approvalResult.name = Строка(Перечисления.РезультатыСогласования.НеСогласовано);
				ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Перечисления.РезультатыСогласования.НеСогласовано);
				Прервать;
			КонецЕсли;
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
				ЗадачаXDTO.approvalResult.name = Строка(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
				ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиИтерации Цикл
			СтрокаXDTO = СоздатьОбъектXDTO("DMBusinessProcessApprovalTaskCheckupApprovalResult");
			СтрокаXDTO.approvalComment = Строка.ЗадачаИсполнителя.РезультатВыполнения;
			СтрокаXDTO.approvalPerformer = ПодготовитьИсполнителя(Строка.ЗадачаИсполнителя,
				"Исполнитель",
			"РольИсполнителя");
			СтрокаXDTO.approvalDate = Строка.ЗадачаИсполнителя.ДатаИсполнения;
			СтрокаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
			СтрокаXDTO.approvalResult.name = Строка(Строка.РезультатСогласования);
			СтрокаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				Строка.РезультатСогласования);
			ЗадачаXDTO.approvalResults.Добавить(СтрокаXDTO);
		КонецЦикла;
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаПовторноеСогласование;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
		
		РезультатыУтверждения = ОбщегоНазначения.
			ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "РезультатыУтверждения").Выгрузить();
		НайденнаяСтрока = РезультатыУтверждения.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.confirmationResult = СоздатьОбъектXDTO("DMConfirmationResult");
			ЗадачаXDTO.confirmationResult.name = Строка(НайденнаяСтрока.РезультатУтверждения);
			ЗадачаXDTO.confirmationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				НайденнаяСтрока.РезультатУтверждения);
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskCheckup" Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача.БизнесПроцесс,
			"РезультатыОзнакомлений, РезультатыУтверждения"); 
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаПовторноеУтверждение;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		ЗадачаXDTO.confirmationResult = СоздатьОбъектXDTO("DMConfirmationResult");
		ЗадачаXDTO.confirmationResult.name = Строка(Перечисления.РезультатыУтверждения.Утверждено);
		ЗадачаXDTO.confirmationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			Перечисления.РезультатыУтверждения.Утверждено);
		
		РезультатыУтверждения = РеквизитыПроцесса.РезультатыУтверждения.Выгрузить();
		СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			ЗадачаXDTO.confirmationComment = Строка.ЗадачаИсполнителя.РезультатВыполнения;
			ЗадачаXDTO.confirmationPerformer = ПодготовитьИсполнителя(Строка.ЗадачаИсполнителя,
				"Исполнитель",
			"РольИсполнителя");
			ЗадачаXDTO.confirmationDate = Строка.ЗадачаИсполнителя.ДатаИсполнения;
			
			Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				ЗадачаXDTO.confirmationResult = СоздатьОбъектXDTO("DMConfirmationResult");
				ЗадачаXDTO.confirmationResult.name = Строка(Перечисления.РезультатыУтверждения.НеУтверждено);
				ЗадачаXDTO.confirmationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Перечисления.РезультатыУтверждения.НеУтверждено);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskRegistration" Тогда
		
		РезультатыРегистрации = ОбщегоНазначения.
			ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "РезультатыРегистрации").Выгрузить();
		НайденнаяСтрока = РезультатыРегистрации.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.registrationResult = СоздатьОбъектXDTO("DMRegistrationResult");
			ЗадачаXDTO.registrationResult.name = Строка(НайденнаяСтрока.РезультатРегистрации);
			ЗадачаXDTO.registrationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				НайденнаяСтрока.РезультатРегистрации);
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskCheckup" Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача.БизнесПроцесс,
			"РезультатыОзнакомлений, РезультатыРегистрации");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаПовторнуюРегистрацию;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		ЗадачаXDTO.registrationResult = СоздатьОбъектXDTO("DMRegistrationResult");
		ЗадачаXDTO.registrationResult.name = Строка(Перечисления.РезультатыРегистрации.Зарегистрировано);
		ЗадачаXDTO.registrationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			Перечисления.РезультатыРегистрации.Зарегистрировано);
		
		РезультатыРегистрации = РеквизитыПроцесса.РезультатыРегистрации.Выгрузить();
		СтрокиИтерации = РезультатыРегистрации.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
				ЗадачаXDTO.registrationResult = СоздатьОбъектXDTO("DMRegistrationResult");
				ЗадачаXDTO.registrationResult.name = Строка(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
				ЗадачаXDTO.registrationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Перечисления.РезультатыРегистрации.НеЗарегистрировано);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ИмяТипа = "DMBusinessProcessPerfomanceTaskCheckup" Тогда
		
		РезультатыПроверки = ОбщегоНазначения.
			ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "РезультатыПроверки").Выгрузить();
		НайденнаяСтрока = РезультатыПроверки.Найти(Задача.Ссылка, "ЗадачаПроверяющего");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		СтрокиИтерации = РезультатыПроверки.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка из СтрокиИтерации Цикл
			СтрокаXDTO = СоздатьОбъектXDTO("DMBusinessProcessPerfomanceTaskCheckupResult");
			СтрокаXDTO.executorTask = ПолучитьЗадачуБизнесПроцесса(ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				Строка.ЗадачаИсполнителя));
			СтрокаXDTO.returned = Строка.ОтправленоНаДоработку;
			СтрокаXDTO.checkComment = Строка.КомментарийПроверяющего;
			ЗадачаXDTO.checkResults.Добавить(СтрокаXDTO);
		КонецЦикла;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConsiderationTaskAcquaint" Тогда
		
		ЗадачаXDTO.resolution = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "Резолюция");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";	
		Запрос.УстановитьПараметр("БизнесПроцесс", 	Задача.БизнесПроцесс);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗадачаXDTO.resolutionPerformer = ПодготовитьИсполнителя(Выборка, "Исполнитель", "РольИсполнителя");
			ЗадачаXDTO.resolutionDate = Выборка.ДатаИсполнения;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskQuestion"
			Или ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача.БизнесПроцесс,
			"ЦиклыРассмотрения, Описание, ОтправитьНаУточнение, ПредметРассмотрения");
		
		ЦиклыРассмотрения = РеквизитыПроцесса.ЦиклыРассмотрения.Выгрузить();
		НайденнаяСтрока = ЦиклыРассмотрения.Найти(Задача.Ссылка, "Задача");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.Цикл;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		Если ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
			ЗадачаXDTO.returned = РеквизитыПроцесса.ОтправитьНаУточнение;
		КонецЕсли;
		
		ПредметРассмотренияXDTO = СоздатьОбъектXDTO("DMBusinessProcessTask");
		ЗаполнитьОсновныеСвойстваXDTOЗадачи(ПредметРассмотренияXDTO, РеквизитыПроцесса.ПредметРассмотрения, Ложь, Ложь);
		ЗадачаXDTO.issueTask = ПредметРассмотренияXDTO;
		
		// присоединенные файлы
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладелецФайла
			|	И НЕ Файлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВладелецФайла", Задача.БизнесПроцесс);
		МассивОбъектовДО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		НаборКолонокФайлов = Новый Массив;
		НаборКолонокФайлов.Добавить("objectId");
		НаборКолонокФайлов.Добавить("name");
		НаборКолонокФайлов.Добавить("size");
		НаборКолонокФайлов.Добавить("modificationDateUniversal");
		НаборКолонокФайлов.Добавить("extension");
		НаборКолонокФайлов.Добавить("editingUser");
		
		МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ЗадачаXDTO, МассивФайлов, НаборКолонокФайлов);
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(ЗадачаXDTO, Задача);
	
КонецПроцедуры

// Заполняет процесс на основании предмета и шаблона
// 
// Параметры:
//   БПОбъект - БизнесПроцессОбъект - процесс, требующий заполнения
//   Предмет - Произвольный - предмет процесса
//   ТипШаблона - Строка - имя вида справочника шаблонов. Устарел.
//   ШаблонБизнесПроцесса - СправочникСсылка.Шаблон<...> - шаблон процесса
//
Процедура ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, ТипШаблона, ШаблонБизнесПроцесса) Экспорт
	
	Действие = БПОбъект.Наименование;
	ДанныеЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(Предмет) Тогда
		Предметы = Новый Массив;
		СтрокаПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
		СтрокаПредмета.Предмет = Предмет;
		СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
		СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
			ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(СтрокаПредмета.Предмет, Новый Массив);
		Предметы.Добавить(СтрокаПредмета);
		ДанныеЗаполнения.Вставить("Предметы", Предметы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
		ДанныеЗаполнения.Вставить("Шаблон", ШаблонБизнесПроцесса);
	КонецЕсли;
	БПОбъект.Заполнить(ДанныеЗаполнения);
	БПОбъект.Наименование = "";
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БПОбъект.Ссылка) Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, БПОбъект);
			Если Предмет <> Неопределено Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет, Ложь, Истина);
			КонецЕсли;
			БПОбъект.ЗаполнитьДействияПоШаблону(ШаблонБизнесПроцесса);
		Иначе
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, БПОбъект);
			Если Предмет <> Неопределено Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет, Ложь, Истина);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	Иначе // шаблона нет
		Если Предмет <> Неопределено Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект) = Тип("БизнесПроцессОбъект.Согласование") Тогда
				РаботаСВизамиСогласования.ЗаполнитьИсполнителейИзАктивныхВиз(БПОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Действие <> "" И БПОбъект.Наименование = "" И БПОбъект.Предметы.Количество() <> 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(БПОбъект, Действие);
	КонецЕсли;
	
	Если ТипЗнч(БПОбъект) = Тип("БизнесПроцессОбъект.Утверждение")
			И БПОбъект.Предметы.Количество() <> 0 Тогда
		Если БПОбъект.ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
			МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(БПОбъект, "Подписать");
		Иначе
			МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(БПОбъект, "Утвердить");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает задачи по условиям отбора.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
//   Ответ - ОбъектXDTO типа DMGetObjectListResponse, неявно возвращаемое значение.
//   ИмяТипа - Строка - полное имя типа вида Задача.<...>. Устарел.
//
// Возвращаемое значение:
//   Ответ - ОбъектXDTO типа DMGetObjectListResponse или DMError.
//
Функция ПолучитьСписокЗадач(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъектXDTO("DMGetObjectListResponse");
		КонецЕсли;
		
		СвойстваИРеквизиты = ОбработкаЗапросовXDTO.СоответствиеСвойствXDTOРеквизитамПоиска(
			Сообщение.type);
		
		УсловияОтбора = Новый ТаблицаЗначений;
		УсловияОтбора.Колонки.Добавить("Поле");
		УсловияОтбора.Колонки.Добавить("ОператорСравнения");
		УсловияОтбора.Колонки.Добавить("Значение");
		
		ТипизированныеЗадачи = Ложь; // по умолчанию возвращаем абстрактные DMBusinessProcessTask
		Исполнители = Новый Массив;
		ОтборПоПроцессуВедущейЗадачи = Ложь;
		ОтборПоРезультатамВыполнения = Ложь;
		ИсключаяОтложенные = Ложь;
		
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			
			// Старые версии клиентов могут не устанавливать это свойство
			ОператорСравнения = ?(Условие.Установлено("comparisonOperator"),
				Условие.comparisonOperator, "");
			
			// По исполнителю.
			Если ВРег(Условие.property) = ВРег("byUser") Тогда
				Если Условие.value = Истина Тогда // исполнители с учетом делегирования
					Исполнители.Добавить(Пользователи.ТекущийПользователь());
				КонецЕсли;
				
			// Включать выполненные.
			ИначеЕсли ВРег(Условие.property) = ВРег("withExecuted") Тогда
				Если Условие.value = Ложь Тогда
					УсловиеОтбора = УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "Задачи.Выполнена";
					УсловиеОтбора.Значение = Ложь;
					ИсключаяОтложенные = Истина;
				КонецЕсли;
				
			// Включать остановленные.
			ИначеЕсли ВРег(Условие.property) = ВРег("withDelayed") Тогда
				Если Условие.value = Истина Тогда
					УсловиеОтбора = УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "Задачи.СостояниеБизнесПроцесса";
					УсловиеОтбора.Значение = Новый Массив;
					УсловиеОтбора.Значение.Добавить(Перечисления.СостоянияБизнесПроцессов.Активен);
					УсловиеОтбора.Значение.Добавить(Перечисления.СостоянияБизнесПроцессов.Остановлен);
				КонецЕсли;
				
			// Передавать типизированные задачи.
			ИначеЕсли ВРег(Условие.property) = ВРег("typed") Тогда // это не отбор
				ТипизированныеЗадачи = Условие.value;
				
			// По предмету.
			ИначеЕсли ВРег(Условие.property) = ВРег("target") Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "Задачи.Предметы.Предмет";
				УсловиеОтбора.Значение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
				
			// По бизнес-процессу.
			ИначеЕсли ВРег(Условие.property) = ВРег("businessProcess") Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Значение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
				ТипПроцесса = ТипЗнч(УсловиеОтбора.Значение);
				ОтборПоПроцессуВедущейЗадачи = (
					ТипПроцесса = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента")
				);
				Если ОтборПоПроцессуВедущейЗадачи Тогда
					УсловиеОтбора.Поле = "ДанныеБизнесПроцессов.ВедущаяЗадача.БизнесПроцесс";
				Иначе
					УсловиеОтбора.Поле = "Задачи.БизнесПроцесс";
				КонецЕсли;
				
			// По результату выполнения
			ИначеЕсли ВРег(Условие.property) = ВРег("executionMark") Тогда
				Если Условие.value = "ExecutedPositive"
					Или Условие.value = "ExecutedAlmostPositive"
					Или Условие.value = "ExecutedNegative" Тогда
						ОтборПоРезультатамВыполнения = Истина;
						УсловиеОтбора = УсловияОтбора.Добавить();
						УсловиеОтбора.Поле = "РезультатыВыполнения.Результат";
						Если Условие.value = "ExecutedPositive" Тогда
							УсловиеОтбора.Значение = 
								Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
						ИначеЕсли Условие.value = "ExecutedAlmostPositive" Тогда
							УсловиеОтбора.Значение = 
								Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
						Иначе // Negative
							УсловиеОтбора.Значение = 
								Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
						КонецЕсли;
				Иначе // ExecutedNeutral, NotExecuted
					УсловиеОтбора = УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "Задачи.Выполнена";
					УсловиеОтбора.Значение = (Условие.value = "ExecutedNeutral");
				КонецЕсли;
				
			// По автору.
			ИначеЕсли ВРег(Условие.property) = ВРег("author") Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "Задачи.Автор";
				Если ТипЗнч(Условие.value) = Тип("ОбъектXDTO") Тогда
					УсловиеОтбора.Значение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
				Иначе
					УсловиеОтбора.Значение = Пользователи.ТекущийПользователь();
				КонецЕсли;
				
			// По наименованию.
			ИначеЕсли ВРег(Условие.property) = ВРег("name") Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "Задачи.Наименование";
				Если ЗначениеЗаполнено(ОператорСравнения) Тогда
					УсловиеОтбора.ОператорСравнения = ОператорСравнения;
					УсловиеОтбора.Значение = Условие.value;
				Иначе
					УсловиеОтбора.ОператорСравнения = "LIKE";
					УсловиеОтбора.Значение = "%" + Условие.value + "%";
				КонецЕсли;
				
			// Прочие поддерживаемые условия поиска
			ИначеЕсли СвойстваИРеквизиты.Свойство(Условие.property) Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "Задачи." + СвойстваИРеквизиты[Условие.property];
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				Если ТипЗнч(Условие.value) = Тип("ОбъектXDTO") Тогда
					УсловиеОтбора.Значение = ОбработкаЗапросовXDTO.
						ПолучитьСсылкуПоObjectID(Условие.value);
				Иначе
					УсловиеОтбора.Значение = Условие.value;
				КонецЕсли;
				
			Иначе // неопознанное условие
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестное поле в условии отбора: %1'"), Условие.property);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Отборы по умолчанию.
		Если УсловияОтбора.Найти("Задачи.СостояниеБизнесПроцесса", "Поле") = Неопределено Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "Задачи.СостояниеБизнесПроцесса";
			УсловиеОтбора.Значение = Новый Массив;
			УсловиеОтбора.Значение.Добавить(Перечисления.СостоянияБизнесПроцессов.Активен);
		КонецЕсли;
		
		// Шаблон запроса.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	*,
			|	ВЫБОР
			|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА ""Stopped""
			|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
			|			ТОГДА ""Interrupted""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА ""ExecutedPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА ""ExecutedAlmostPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА ""ExecutedNegative""
			|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
			|			ТОГДА ""ReadyToExecute""
			|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
			|			ТОГДА ""ExecutionCanceled""
			|		ИНАЧЕ ВЫБОР
			|				КОГДА Задачи.Выполнена = ИСТИНА
			|					ТОГДА ""ExecutedNeutral""
			|				ИНАЧЕ ""NotExecuted""
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения,
			|	ЕСТЬNULL(ДанныеБизнесПроцессов.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Регистрация
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Регистрация).РезультатРегистрации
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Согласование
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Согласование).РезультатСогласования
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Утверждение
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Утверждение).РезультатУтверждения
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК РезультатВыполненияБизнесПроцесса,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Утверждение
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Утверждение).ВидПроцесса
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ВидПроцессаУтверждение,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.РешениеВопросовВыполненияЗадач
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.РешениеВопросовВыполненияЗадач).ПредметРассмотрения
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ПредметРассмотрения,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.РешениеВопросовВыполненияЗадач
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.РешениеВопросовВыполненияЗадач).ВидВопроса
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ВидВопроса,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.РешениеВопросовВыполненияЗадач
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.РешениеВопросовВыполненияЗадач).НовыйСрок
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК НовыйСрок,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Приглашение
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Приглашение).РезультатПриглашения
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК РезультатПриглашения,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Приглашение
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Приглашение).ДатаНачалаМероприятия
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ДатаНачалаМероприятия,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Приглашение
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Приглашение).ДатаОкончанияМероприятия
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ДатаОкончанияМероприятия,
			|	ВЫБОР
			|		КОГДА Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Приглашение
			|			ТОГДА ВЫРАЗИТЬ(Задачи.БизнесПроцесс КАК БизнесПроцесс.Приглашение).МестоПроведения
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК МестоПроведения
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО Задачи.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
			|		ПО Задачи.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
			|%СОЕДИНЕНИЯ%
			|%УСЛОВИЯ%
			|УПОРЯДОЧИТЬ ПО Задачи.Дата");
			
		// Соединения.
		Соединения = "";
		Если ОтборПоРезультатамВыполнения Тогда
			Соединения = Соединения + 
				"ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполнения
				|ПО Задачи.Ссылка = РезультатыВыполнения.Объект
				|";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СОЕДИНЕНИЯ%", Соединения);
		
		// Условия.
		Условия = 
			"ГДЕ
			|	НЕ Задачи.ПометкаУдаления
			|	И НЕ Задачи.ИсключенаИзПроцесса
			|";
		Для Каждого Условие из УсловияОтбора Цикл
			
			ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(Условие), "ЧГ=0");
			
			Если ЗначениеЗаполнено(Условие.ОператорСравнения) Тогда
				ОператорСравнения = Условие.ОператорСравнения;
			ИначеЕсли ТипЗнч(Условие.Значение) = Тип("Массив") Тогда
				ОператорСравнения = "IN";
			Иначе
				ОператорСравнения = "=";
			КонецЕсли;
			
			Если ОператорСравнения = "LIKE" Тогда
				Условия = Условия + " И " + Условие.Поле + " ПОДОБНО &" + ИмяПараметра + "
				|";
			ИначеЕсли ОператорСравнения = "IN" Тогда
				Условия = Условия + " И " + Условие.Поле + " В (&" + ИмяПараметра + ")
				|";
			ИначеЕсли ОператорСравнения = "IN HIERARCHY" Тогда
				Условия = Условия + " И " + Условие.Поле + " В ИЕРАРХИИ (&" + ИмяПараметра + ")
				|";
			Иначе
				Условия = Условия + " И " + Условие.Поле + " " + ОператорСравнения + " &" + ИмяПараметра + "
				|";
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяПараметра, Условие.Значение);
			
		КонецЦикла;
		
		// По исполнителю с учетом ролей и делегирования.
		Если ЗначениеЗаполнено(Исполнители) Тогда
			Условия = Условия + "
				|	И ИСТИНА В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				ИСТИНА
				|			ИЗ
				|				РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
				|			ГДЕ
				|				ИсполнителиРолейИДелегаты.РольПользователь = Задачи.ТекущийИсполнитель
				|				И ИсполнителиРолейИДелегаты.ИсполнительДелегат В (&Исполнители)
				|				И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи""))";
			Запрос.УстановитьПараметр("Исполнители", Исполнители);
		Иначе
			Условия = Условия + "
			|	И (Задачи.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|	ИЛИ Задачи.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка))";
		КонецЕсли;
		
		Если ИсключаяОтложенные Тогда
			Условия = Условия + "
			|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL
			|		ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))";
		КонецЕсли;
		
		ОбработкаЗапросовXDTOПереопределяемый.ДополнитьУсловияЗапросаПриПолученииСпискаЗадач(
			Сообщение, Условия);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УСЛОВИЯ%", Условия);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаОтвета = СоздатьОбъектXDTO("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			Если ТипизированныеЗадачи Тогда
				ТипОбъектаXDTO = ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Выборка);
				ЗадачаXDTO = СоздатьОбъектXDTO(ТипОбъектаXDTO);
				ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Выборка, Ложь,, Ложь);
				ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(ЗадачаXDTO, Выборка);
				ЗаполнитьСвойстваРодительскогоБизнесПроцесса(ЗадачаXDTO, Выборка);
			Иначе
				ЗадачаXDTO = СоздатьОбъектXDTO("DMBusinessProcessTask");
				ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Выборка, Ложь);
			КонецЕсли;
			СтрокаОтвета.object = ЗадачаXDTO;
			Ответ.items.Добавить(СтрокаОтвета);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка задач'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает бизнес-процессы по условиям отбора.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest.
//   Ответ - ОбъектXDTO типа DMGetObjectListResponse, неявно возвращаемое значение.
//   ИмяТипа - Строка - полное имя типа вида БизнесПроцесс.<...>.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError.
//
Функция ПолучитьСписокБизнесПроцессов(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъектXDTO("DMGetObjectListResponse");
		КонецЕсли;
		
		СвойстваИРеквизиты = ОбработкаЗапросовXDTO.СоответствиеСвойствXDTOРеквизитамПоиска(
			Сообщение.type);
		
		УсловияОтбора = Новый ТаблицаЗначений;
		УсловияОтбора.Колонки.Добавить("Поле");
		УсловияОтбора.Колонки.Добавить("ОператорСравнения");
		УсловияОтбора.Колонки.Добавить("Значение");
		
		ОтборПоРезультатамВыполнения = Ложь;
		
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			
			// Старые версии клиентов могут не устанавливать это свойство
			ОператорСравнения = ?(Условие.Установлено("comparisonOperator"),
				Условие.comparisonOperator, "");
			
			// По предмету.
			Если ВРег(Условие.property) = ВРег("target") Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				Если Сообщение.type = "DMBusinessProcessIssuesSolution" Тогда
					УсловиеОтбора.Поле = "БизнесПроцессы.ПредметРассмотрения";
				Иначе
					УсловиеОтбора.Поле = "БизнесПроцессы.Предметы.Предмет";
				КонецЕсли;
				УсловиеОтбора.Значение = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
				
			// По результату выполнения
			ИначеЕсли ВРег(Условие.property) = ВРег("completionMark") Тогда
				Если Условие.value = "ExecutedPositive"
					Или Условие.value = "ExecutedAlmostPositive"
					Или Условие.value = "ExecutedNegative" Тогда
						ОтборПоРезультатамВыполнения = Истина;
						УсловиеОтбора = УсловияОтбора.Добавить();
						УсловиеОтбора.Поле = "РезультатыВыполнения.Результат";
						Если Условие.value = "ExecutedPositive" Тогда
							УсловиеОтбора.Значение =
								Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
						ИначеЕсли Условие.value = "ExecutedAlmostPositive" Тогда
							УсловиеОтбора.Значение =
								Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
						Иначе // Negative
							УсловиеОтбора.Значение =
								Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
						КонецЕсли;
				Иначе // ExecutedNeutral, NotExecuted
					УсловиеОтбора = УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "БизнесПроцессы.Завершен";
					УсловиеОтбора.Значение = (Условие.value = "ExecutedNeutral");
				КонецЕсли;
				
			// Включать выполненные.
			ИначеЕсли ВРег(Условие.property) = ВРег("withExecuted") Тогда
				Если Условие.value = Ложь Тогда
					УсловиеОтбора = УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "БизнесПроцессы.Завершен";
					УсловиеОтбора.Значение = Ложь;
				КонецЕсли;
				
			// Включать остановленные.
			ИначеЕсли ВРег(Условие.property) = ВРег("withDelayed") Тогда
				Если Условие.value = Истина Тогда
					УсловиеОтбора = УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "БизнесПроцессы.Состояние";
					УсловиеОтбора.Значение = Новый Массив;
					УсловиеОтбора.Значение.Добавить(Перечисления.СостоянияБизнесПроцессов.Активен);
					УсловиеОтбора.Значение.Добавить(Перечисления.СостоянияБизнесПроцессов.Остановлен);
				КонецЕсли;
				
			// По наименованию.
			ИначеЕсли ВРег(Условие.property) = ВРег("name") Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "БизнесПроцессы.Наименование";
				Если ЗначениеЗаполнено(ОператорСравнения) Тогда
					УсловиеОтбора.ОператорСравнения = ОператорСравнения;
					УсловиеОтбора.Значение = Условие.value;
				Иначе
					УсловиеОтбора.ОператорСравнения = "LIKE";
					УсловиеОтбора.Значение = "%" + Условие.value + "%";
				КонецЕсли;
				
			// Прочие поддерживаемые условия поиска
			ИначеЕсли СвойстваИРеквизиты.Свойство(Условие.property) Тогда
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "БизнесПроцессы." + СвойстваИРеквизиты[Условие.property];
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				Если ТипЗнч(Условие.value) = Тип("ОбъектXDTO") Тогда
					УсловиеОтбора.Значение = ОбработкаЗапросовXDTO.
						ПолучитьСсылкуПоObjectID(Условие.value);
				Иначе
					УсловиеОтбора.Значение = Условие.value;
				КонецЕсли;
				
			Иначе // неопознанное условие
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестное поле в условии отбора: %1'"), Условие.property);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Отборы по умолчанию.
		Если УсловияОтбора.Найти("БизнесПроцессы.Состояние", "Поле") = Неопределено Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "БизнесПроцессы.Состояние";
			УсловиеОтбора.Значение = Новый Массив;
			УсловиеОтбора.Значение.Добавить(Перечисления.СостоянияБизнесПроцессов.Активен);
		КонецЕсли;
		
		// Шаблон запроса.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка КАК Ссылка,
			|	БизнесПроцессы.Наименование КАК Наименование
			|ИЗ %ТАБЛИЦА% КАК БизнесПроцессы
			|%СОЕДИНЕНИЯ%
			|%УСЛОВИЯ%
			|УПОРЯДОЧИТЬ ПО БизнесПроцессы.Дата");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТАБЛИЦА%", ИмяТипа);
		
		// Соединения.
		Соединения = "";
		Если ОтборПоРезультатамВыполнения Тогда
			Соединения = Соединения + 
				"ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполнения
				|ПО БизнесПроцессы.Ссылка = РезультатыВыполнения.Объект
				|";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СОЕДИНЕНИЯ%", Соединения);
		
		// Условия.
		Условия =
			"ГДЕ
			|	НЕ БизнесПроцессы.ПометкаУдаления
			|";
		
		Для Каждого Условие из УсловияОтбора Цикл
			
			ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(Условие), "ЧГ=0");
			
			Если ЗначениеЗаполнено(Условие.ОператорСравнения) Тогда
				ОператорСравнения = Условие.ОператорСравнения;
			ИначеЕсли ТипЗнч(Условие.Значение) = Тип("Массив") Тогда
				ОператорСравнения = "IN";
			Иначе
				ОператорСравнения = "=";
			КонецЕсли;
			
			Если ОператорСравнения = "LIKE" Тогда
				Условия = Условия + " И " + Условие.Поле + " ПОДОБНО &" + ИмяПараметра + "
				|";
			ИначеЕсли ОператорСравнения = "IN" Тогда
				Условия = Условия + " И " + Условие.Поле + " В (&" + ИмяПараметра + ")
				|";
			ИначеЕсли ОператорСравнения = "IN HIERARCHY" Тогда
				Условия = Условия + " И " + Условие.Поле + " В ИЕРАРХИИ (&" + ИмяПараметра + ")
				|";
			Иначе
				Условия = Условия + " И " + Условие.Поле + " " + ОператорСравнения + " &" + ИмяПараметра + "
				|";
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяПараметра, Условие.Значение);
			
		КонецЦикла;
		
		ОбработкаЗапросовXDTOПереопределяемый.ДополнитьУсловияЗапросаПриПолученииСпискаПроцессов(
			Сообщение, Условия);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УСЛОВИЯ%", Условия);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаОтвета = СоздатьОбъектXDTO("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			ПроцессXDTO = СоздатьОбъектXDTO(Сообщение.type);
			ПроцессXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(Выборка.Ссылка);
			ПроцессXDTO.name = Выборка.Наименование;
			ПередатьОбщиеРеквизитыБизнесПроцесса(Выборка.Ссылка, ПроцессXDTO);
			Если Сообщение.type = "DMBusinessProcessIssuesSolution" Тогда
				ПроцессXDTO.perfomanceHistory =
					РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(Выборка.Ссылка);
				ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБПРешениеВопросовВыполненияЗадач(ПроцессXDTO,
					Выборка.Ссылка);
				ПередатьЗначениеСостоянияБизнесПроцесса(Выборка.Ссылка, ПроцессXDTO);
			КонецЕсли;
			СтрокаОтвета.object = ПроцессXDTO;
			Ответ.items.Добавить(СтрокаОтвета);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка бизнес-процессов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает дерево бизнес-процессов и их задач по условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetTasksTreeRequest
//   Ответ - ОбъектXDTO типа DMGetTasksTreeResponse, неявно возвращаемое значение
//   ИмяТипа - Строка - полное имя типа вида БизнесПроцесс.<...>.
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetTasksTreeResponse или DMError
// 
Функция ПолучитьСписокЗадачПоОбъекту(Сообщение) Экспорт
	
	Ответ = СоздатьОбъектXDTO("DMGetTasksTreeResponse");
	
	МассивБизнесПроцессов = ПолучитьБизнесПроцессыПоЗапросу(Сообщение.query);
	Если МассивБизнесПроцессов.Количество() > 0 Тогда
		Дерево = Новый ДеревоЗначений;
		
		Дерево.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
		Дерево.Колонки.Добавить("Ссылка");
		Дерево.Колонки.Добавить("РезультатЗавершения");
		
		Для Каждого Строка Из МассивБизнесПроцессов Цикл
			БП = Строка.Ссылка;
			НоваяСтрока = Дерево.Строки.Добавить();
			НоваяСтрока.ID = Строка(БП.УникальныйИдентификатор());
			НоваяСтрока.Ссылка = БП;
			НоваяСтрока.РезультатЗавершения = Строка.РезультатЗавершения;
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БП, Неопределено); 
		КонецЦикла;	
		
		ПостроитьИзДереваDMGetTaskListResponse(Дерево.Строки, Ответ);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

// Получает HTML-представление карточки задачи
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
// Возвращаемое значение:
//   Строка - ОбъектXDTO типа DMObjectHTMLPresentation, содержащий HTML-представление задачи
//
Функция ПолучитьHTMLФормы(ОбъектИд) Экспорт
	
	СсылкаНаЗадачу = Неопределено;
	СсылкаНаЗадачу = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Ответ = СоздатьОбъектXDTO("DMObjectHTMLPresentation");
	Ответ.htmlView = "";
	Ответ.name = СсылкаНаЗадачу.Наименование;
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаЗадачу);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьФормуВыполненияЗадачи(СсылкаНаЗадачу);
	
	Представление = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаНаЗадачу, ПараметрыФормы.ИмяФормы);
	Ответ.htmlView = Представление;
	Возврат Ответ;
	
КонецФункции

// Получает заполненный объект XDTO бизнес-процесса по его ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа, наследующего DMBusinessProcess, с заполненными свойствами
//
Функция ПолучитьБизнесПроцесс(ОбъектИд, ПолучитьПредметы = Истина) Экспорт
	
	СсылкаНаБизнесПроцесс = Неопределено;
	СсылкаНаБизнесПроцесс = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаБизнесПроцесс) Или СсылкаНаБизнесПроцесс.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектБизнесПроцесс = СсылкаНаБизнесПроцесс.ПолучитьОбъект();
	
	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБизнесПроцесс(ОбъектИд, ОбъектБизнесПроцесс, ПолучитьПредметы);
	Если Ответ <> Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Если ОбъектИд.type = "DMBusinessProcessPerformance" Тогда
		Ответ = ПолучитьБПИсполнение(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessPerformance_1.2.1.11" Тогда
		Ответ = ПолучитьБПИсполнение_1_2_1_11(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessAcquaintance" Тогда
		Ответ = ПолучитьБПОзнакомление(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessOrder" Тогда
		Ответ = ПолучитьБППоручение(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessConsideration" Тогда
		Ответ = ПолучитьБПРассмотрение(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessRegistration" Тогда
		Ответ = ПолучитьБПРегистрация(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessApproval" Тогда
		Ответ = ПолучитьБПСогласование(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessApproval_1_2_1_11" Тогда
		Ответ = ПолучитьБПСогласование_1_2_1_11(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessConfirmation" Тогда
		Ответ = ПолучитьБПУтверждение(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Ответ = ПолучитьБПОбработкаВнутреннегоДокумента(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Ответ = ПолучитьБПОбработкаВходящегоДокумента(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		Ответ = ПолучитьБПОбработкаИсходящегоДокумента(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessIssuesSolution" Тогда
		Ответ = ПолучитьБПРешениеВопросовВыполненияЗадач(ОбъектБизнесПроцесс, ПолучитьПредметы);
		
	КонецЕсли;
	
	Если Не ОбъектБизнесПроцесс.Стартован
			И ОбъектБизнесПроцесс.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен") Тогда
		ПередатьЗначениеСостоянияПроцессаДляЗапуска(ОбъектБизнесПроцесс.Ссылка, Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает объект XDTO, соответствующий роли исполнителя, по его ObjectId
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessExecutorRole, заполненные данными роли
//
Функция ПолучитьРольИсполнителей(ОбъектИД) Экспорт
	
	СсылкаНаРольИсполнителя = Неопределено;
	СсылкаНаРольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessExecutorRole");
	Ответ.name = СсылкаНаРольИсполнителя.Наименование;
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаРольИсполнителя);
	
	Ответ.withoutAddressingObjects = СсылкаНаРольИсполнителя.ИспользуетсяБезОбъектовАдресации;
	Ответ.withAddressingObjects = СсылкаНаРольИсполнителя.ИспользуетсяСОбъектамиАдресации;
	
	Ответ.mainAddressingObjectName = СсылкаНаРольИсполнителя.ТипыОсновногоОбъектаАдресации.Наименование;
	Ответ.secondaryAddressingObjectName = СсылкаНаРольИсполнителя.ТипыДополнительногоОбъектаАдресации.Наименование;
	Если Ответ.withAddressingObjects Тогда
		Если СсылкаНаРольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения <> Неопределено Тогда
			Для Каждого ТипЗначения Из СсылкаНаРольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения.Типы() Цикл 
				Если Строка(ТипЗначения) = "Контрагент" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMCorrespondent";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Подразделение" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMSubdivision";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Организация" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMOrganization";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Проект" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMProject";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СсылкаНаРольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения <> Неопределено Тогда
			Для Каждого ТипЗначения Из СсылкаНаРольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения.Типы() Цикл 
				Если Строка(ТипЗначения) = "Контрагент" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMCorrespondent";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Подразделение" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMSubdivision";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Организация" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMOrganization";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Проект" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMProject";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Передает реквизиты, общие для всех процессов
//
// Параметры:
//   БизнесПроцесс - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
Процедура ПередатьОбщиеРеквизитыБизнесПроцесса(БизнесПроцесс, Объект, ПолучитьПредметы = Истина) Экспорт
	
	ПередатьЗначениеАвтора(БизнесПроцесс, Объект);
	ПередатьЗначениеВажности(БизнесПроцесс, Объект);
	Объект.beginDate = ОбработатьДату(БизнесПроцесс.ДатаНачала);
	Объект.endDate = ОбработатьДату(БизнесПроцесс.ДатаЗавершения);
	
	Если ПолучитьПредметы Тогда
		ПередатьЗначенияПредметовБизнесПроцессаЗадачи(БизнесПроцесс, Объект);
	КонецЕсли;
	
	Если НЕ (ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
			ИЛИ ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач")) Тогда 
		ПередатьЗначениеШаблонаБизнесПроцесса(БизнесПроцесс, Объект);
		Объект.blockedByTemplate = (ШаблоныБизнесПроцессов.
			ДоступностьПоШаблону(БизнесПроцесс) <> Истина);
	Иначе
		Объект.blockedByTemplate = Ложь;
	КонецЕсли;
	Объект.started = БизнесПроцесс.Стартован;
	Объект.completed = БизнесПроцесс.Завершен;
	
	РеквизитыПроцесса = БизнесПроцесс.Метаданные().Реквизиты;
	Если РеквизитыПроцесса.Найти("Описание") <> Неопределено Тогда
		Объект.description = БизнесПроцесс.Описание;
	КонецЕсли;
	Если РеквизитыПроцесса.Найти("СрокИсполненияПроцесса") <> Неопределено Тогда
		Объект.dueDate = ОбработатьДату(БизнесПроцесс.СрокИсполненияПроцесса);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.dueTimeEnabled = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	Объект.stateEnabled = Ложь;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПередатьОбщиеРеквизитыБизнесПроцесса(БизнесПроцесс, Объект);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет общие реквизиты бизнес-процесса по данным объекта XDTO.
// 
// Параметры:
//   БизнесПроцесс - БизнесПроцессОбъект - заполняемый процесс.
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcess<...> - источник данных заполнения.
// 
Процедура УстановитьШапкуБизнесПроцесса(БизнесПроцесс, ОбъектXDTO) Экспорт
	
	БизнесПроцесс.Наименование = ОбъектXDTO.name;
	
	РеквизитыПроцесса = БизнесПроцесс.Метаданные().Реквизиты;
	
	Если РеквизитыПроцесса.Найти("Описание") <> Неопределено Тогда
		БизнесПроцесс.Описание = ОбъектXDTO.description;
	КонецЕсли;
	
	// Заполним общий срок исполнения как точный срок, если он указан клиентом.
	Если РеквизитыПроцесса.Найти("СрокИсполнения") <> Неопределено Тогда
		БизнесПроцесс.СрокИсполнения = ?(ОбъектXDTO.dueDate = Неопределено, 
			Дата(1, 1, 1),
			ОбъектXDTO.dueDate);
		Если РеквизитыПроцесса.Найти("ВариантУстановкиСрокаИсполнения") <> Неопределено Тогда
			БизнесПроцесс.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЕсли;
	КонецЕсли;
	Если РеквизитыПроцесса.Найти("СрокИсполненияПроцесса") <> Неопределено Тогда
		БизнесПроцесс.СрокИсполненияПроцесса = ?(ОбъектXDTO.dueDate = Неопределено, 
			Дата(1, 1, 1),
			ОбъектXDTO.dueDate);
	КонецЕсли;
	
	Если РеквизитыПроцесса.Найти("КоличествоИтераций") <> Неопределено Тогда
		Если БизнесПроцесс.КоличествоИтераций = 0 Тогда
			БизнесПроцесс.КоличествоИтераций = 1;
		КонецЕсли;
	КонецЕсли;
		
	Если РеквизитыПроцесса.Найти("КоличествоИтерацийИсполнения") <> Неопределено Тогда
		Если БизнесПроцесс.КоличествоИтерацийИсполнения = 0 Тогда
			БизнесПроцесс.КоличествоИтерацийИсполнения = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("importance") Тогда
		БизнесПроцесс.Важность = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
			ОбъектXDTO.importance.objectId);
	КонецЕсли;
	
	// Клиент, знающий о мультипредметности, заполнит коллекцию targets.
	Если ОбъектXDTO.Установлено("targets") Тогда
		
		Предметы = Новый ТаблицаЗначений;
		Предметы.Колонки.Добавить("РольПредмета");
		Предметы.Колонки.Добавить("ИмяПредмета");
		Предметы.Колонки.Добавить("Предмет");
		
		// Подготовим предметы к передаче процессу, заполнив имена, если их не заполнил клиент.
		ИспользованныеИмена = БизнесПроцесс.Предметы.ВыгрузитьКолонку("ИмяПредмета");
		
		Для Каждого target Из ОбъектXDTO.targets.items Цикл
			
			СтрокаПредмета = Предметы.Добавить();
			СтрокаПредмета.РольПредмета = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
				target.role.objectId);
			СтрокаПредмета.Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
				target.target.objectId);
			
			Если ЗначениеЗаполнено(target.name) Тогда
				СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
					ПолучитьСсылкуНаИмяПредмета(target.name);
			Иначе // выдадим уникальное имя
				СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
					ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
						СтрокаПредмета.Предмет, ИспользованныеИмена);
			КонецЕсли;
			
			Если ИспользованныеИмена.Найти(СтрокаПредмета.ИмяПредмета) = Неопределено Тогда
				ИспользованныеИмена.Добавить(СтрокаПредмета.ИмяПредмета);
			КонецЕсли;
			
		КонецЦикла;
		
		// Передадим их процессу, обновляя этапы и предметы задач.
		БизнесПроцесс.Предметы.Очистить();
		БизнесПроцесс.ПредметыЗадач.Очистить();
		
		Если ОбъектXDTO.Установлено("businessProcessTemplate") Тогда
			УстановитьПривилегированныйРежим(Истина);
			Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
				ОбъектXDTO.businessProcessTemplate.objectId);
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцесс);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
			
		Для Каждого СтрокаПредмета Из Предметы Цикл
			
			// Найдем подходящую строку предмета, которая могла появиться из шаблона.
			СтруктураПоиска = Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
			СтрокиПриемника = БизнесПроцесс.Предметы.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиПриемника.Количество() = 0 Тогда
				ЗаполняемаяСтрока = БизнесПроцесс.Предметы.Добавить();
			Иначе
				ЗаполняемаяСтрока = СтрокиПриемника[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, СтрокаПредмета);
			
			// Заполним предметы задач.
			Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцесс) Тогда
				
				ДействияПроцесса = Мультипредметность.
					ПолучитьДействияПроцесса(БизнесПроцесс.Ссылка);
				Для Каждого СтрокаДействия Из ДействияПроцесса Цикл
					СтрокаПредметаЗадачи = БизнесПроцесс.ПредметыЗадач.Добавить();
					СтрокаПредметаЗадачи.ТочкаМаршрута = СтрокаДействия;
					ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадачи, СтрокаПредмета);
				КонецЦикла;
				
			Иначе // комплексный процесс
				
				ДействияПроцесса = Мультипредметность.
					ПолучитьДействияКомплексногоПроцесса(БизнесПроцесс.Ссылка);
				Для Каждого СтрокаДействия Из ДействияПроцесса Цикл
					СтрокаПредметаЗадачи = БизнесПроцесс.ПредметыЗадач.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадачи, СтрокаПредмета);
					ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадачи, СтрокаДействия);
				КонецЦикла;
				
				// Обновим и шаблоны всех этапов процесса.
				ШаблоныЭтапов = Новый Массив;
				Для Каждого СтрокаЭтапа Из БизнесПроцесс.Этапы Цикл
					ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
				КонецЦикла;
				Для Каждого СтрокаПредмета из БизнесПроцесс.Предметы Цикл
					МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
							БизнесПроцесс.Ссылка,
							ШаблоныЭтапов,
							БизнесПроцесс.ПредметыЗадач,
							СтрокаПредмета);
				КонецЦикла;
					
			КонецЕсли;
				
		КонецЦикла; // по предметам
		
	// Клиент старых версий, не знающий о многопредметности, заполнит только свойство target.
	ИначеЕсли ОбъектXDTO.Установлено("target") Тогда
	
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.target.objectId);
		
		Если ТипЗнч(БизнесПроцесс) <> Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач") Тогда
			Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессОбъект.КомплексныйПроцесс")
					И ОбъектXDTO.Установлено("businessProcessTemplate") Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				БизнесПроцесс.Шаблон = ОбработкаЗапросовXDTO.
					ПолучитьСсылкуПоObjectID(ОбъектXDTO.businessProcessTemplate.objectId);
				Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(
					БизнесПроцесс.Шаблон, БизнесПроцесс);
				Мультипредметность.ПередатьПредметыПроцессу(
					БизнесПроцесс, Предмет, Ложь, Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			Иначе
				
				Мультипредметность.ПередатьПредметыПроцессу(
					БизнесПроцесс, Предмет);
				
			КонецЕсли;
			
		Иначе // решение вопросов рассмотрения задач
			
			БизнесПроцесс.ПредметРассмотрения = Предмет;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("author") Тогда
		БизнесПроцесс.Автор = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
			ОбъектXDTO.author.objectId);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Дата) Тогда
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ОбъектXDTO.businessProcessTemplate <> Неопределено Тогда
		Если ТипЗнч(БизнесПроцесс) <> Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач") Тогда
			УстановитьПривилегированныйРежим(Истина);
			БизнесПроцесс.Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
				ОбъектXDTO.businessProcessTemplate.objectId);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.УстановитьШапкуБизнесПроцесса(БизнесПроцесс, ОбъектXDTO);
	
КонецПроцедуры

// Передает значение контролера процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеКонтролера(Ссылка, Объект) Экспорт
	
	Объект.controller = ПодготовитьИсполнителя(Ссылка, "Контролер", "Контролер");
		
КонецПроцедуры

// Заполняет реквизит Контролер и связанные с ним по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеКонтролера(БизнесПроцессОбъект, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.Установлено("controller") Тогда
		Если ОбъектXDTO.controller.Установлено("role") Тогда
			РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.role.objectId);
			Если ОбъектXDTO.controller.Установлено("mainAddressingObject") Тогда
				ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.mainAddressingObject.objectId);
			Иначе
				ОсновнойОбъектАдресации = Неопределено;
			КонецЕсли;
			Если ОбъектXDTO.controller.Установлено("secondaryAddressingObject") Тогда
				ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.secondaryAddressingObject.objectId);
			Иначе
				ДополнительныйОбъектАдресации = Неопределено;
			КонецЕсли;
			БизнесПроцессОбъект.Контролер = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
		ИначеЕсли ОбъектXDTO.controller.Установлено("user") Тогда
			БизнесПроцессОбъект.Контролер = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.user.objectId);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит Исполнитель в строке ТЧ Исполнители и связанные с ним реквизиты по данным объекта XDTO
// 
// Параметры:
//   СтрокаСписка - Строка табличной части "Исполнители", подлежащая заполнению
//   ИсполнительXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеИсполнителяВСпискеИсполнителей(СтрокаСписка, ИсполнительXDTO) Экспорт
	
	Если ИсполнительXDTO.Установлено("user") Тогда
		
		СтрокаСписка.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
		
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		
		РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.role.ObjectId);
		
		Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
			ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.mainAddressingObject.objectId);	
		Иначе
			ОсновнойОбъектАдресации = Неопределено;
		КонецЕсли;
		Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
			ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.secondaryAddressingObject.objectId);
		Иначе
			ДополнительныйОбъектАдресации = Неопределено;
		КонецЕсли;
		
		СтрокаСписка.Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
		
	КонецЕсли;
	
	Если ИсполнительXDTO.Установлено("dueDateSpecificationOption") Тогда
		
		ВариантXDTO = ИсполнительXDTO.dueDateSpecificationOption; 
		СтрокаСписка.ВариантУстановкиСрокаИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ВариантXDTO.objectId);
		
		СтрокаСписка.СрокИсполнения = ИсполнительXDTO.dueDate;
		СтрокаСписка.СрокИсполненияДни = ИсполнительXDTO.dueDateDays;
		СтрокаСписка.СрокИсполненияЧасы = ИсполнительXDTO.dueDateHours;
		СтрокаСписка.СрокИсполненияМинуты = ИсполнительXDTO.dueDateMinutes;
		
	Иначе
		
		СтрокаСписка.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные бизнес-процесса и возвращает повторно заполненный объект того же типа
//
// Параметры:
//   Объект - ОбъектXDTO типа, наследующего DMBusinessProcess
// Возвращаемое значение:
//   БизнесПроцессСсылка - ссылка на записанный бизнес-процесс
//
Функция ЗаписатьБизнесПроцесс(Объект, СоздатьНовый) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTOПереопределяемый.ЗаписатьБизнесПроцесс(Объект, СоздатьНовый);
		Если Ответ <> Неопределено Тогда
			Возврат Ответ;
		КонецЕсли;
		
		Если ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessPerformance") Тогда
			Ссылка = ЗаписатьБПИсполнение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessPerformance_1.2.1.11") Тогда
			Ссылка = ЗаписатьБПИсполнение_1_2_1_11(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessAcquaintance") Тогда
			Ссылка = ЗаписатьБПОзнакомление(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessOrder") Тогда
			Ссылка = ЗаписатьБППоручение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessConsideration") Тогда
			Ссылка = ЗаписатьБПРассмотрение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessRegistration") Тогда
			Ссылка = ЗаписатьБПРегистрация(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessApproval") Тогда
			Ссылка = ЗаписатьБПСогласование(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessApproval_1.2.1.11") Тогда
			Ссылка = ЗаписатьБПСогласование_1_2_1_11(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessConfirmation") Тогда
			Ссылка = ЗаписатьБПУтверждение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessIssuesSolution") Тогда
			Ссылка = ЗаписатьБПРешениеВопросовВыполненияЗадач(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInternalDocumentProcessing") Тогда
			Ссылка = ЗаписатьБПОбработкаВнутреннегоДокумента(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessIncomingDocumentProcessing") Тогда
			Ссылка = ЗаписатьБПОбработкаВходящегоДокумента(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessOutgoingDocumentProcessing") Тогда
			Ссылка = ЗаписатьБПОбработкаИсходящегоДокумента(Объект, СоздатьНовый);
			
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Ответ = ПолучитьБизнесПроцесс(ОбъектИд);
		
		Возврат Ответ;
		
	Исключение
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка сохранения процесса'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
	КонецПопытки;
	
КонецФункции

// Запускает бизнес-процесс
// 
// Параметры:
//   Объект - ОбъектXDTO типа, наследующего DMBusinessProcess
// Возвращаемое значение:
//   ОбъектXDTO типа DMLaunchBusinessProcessResponse или DMError
//
Функция СтартоватьБизнесПроцесс(Объект) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъектXDTO("DMLaunchBusinessProcessResponse");
		
		НачатьТранзакцию();
		РезультатЗаписи = ЗаписатьБизнесПроцесс(Объект, НЕ ЗначениеЗаполнено(Объект.objectID.id));
		
		Если ОбработкаЗапросовXDTO.ПроверитьТип(РезультатЗаписи, "DMError") Тогда
			Возврат РезультатЗаписи;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.objectId.id) Тогда
			ObjectIDБизнесПроцесса = РезультатЗаписи.objectId;
		Иначе
			ObjectIDБизнесПроцесса = Объект.ObjectId;
		КонецЕсли;
		
		РезультатЗапуска = ЗапуститьБизнесПроцесс(ObjectIDБизнесПроцесса);
		ЗафиксироватьТранзакцию();
		
		Ответ.businessProcess = РезультатЗапуска;
		
		Возврат Ответ;
		
	Исключение
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка запуска процесса'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает бизнес-процесс, заполненный по умолчанию либо по шаблону, если подходит единственный.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewBusinessProcessRequest
//   ТипОтвета - Строка - имя XDTO-типа желаемого ответа, обычно DMGetNewBusinessProcessResponse
//
// Возвращаемое значение:
//   ОбъектXDTO типа ТипОтвета, обычно DMGetNewBusinessProcessResponse
//
Функция ПолучитьСостояниеНовогоОбъекта(Сообщение, ТипОтвета) Экспорт
	
	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеНовогоОбъекта(Сообщение, ТипОтвета);
	
	Если Ответ <> Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Ответ = СоздатьОбъектXDTO(ТипОтвета);
	
	Тип = Сообщение.type;
	
	Предмет = Неопределено;
	Если Сообщение.Установлено("targetId") Тогда
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.targetId);
	КонецЕсли;
	
	ШаблонБизнесПроцесса = Неопределено;
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetBusinessProcessByTemplateRequest") Тогда
		ШаблонБизнесПроцесса = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTemplateId);
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(Предмет) Тогда
		Предметы = Новый Массив;
		СтрокаПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
		СтрокаПредмета.Предмет = Предмет;
		СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
		СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
			ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(СтрокаПредмета.Предмет, Новый Массив);
		Предметы.Добавить(СтрокаПредмета);
		ДанныеЗаполнения.Вставить("Предметы", Предметы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
		ДанныеЗаполнения.Вставить("Шаблон", ШаблонБизнесПроцесса);
	КонецЕсли;
	
	Если Тип = "DMBusinessProcessPerformance" Или Тип = "DMBusinessProcessPerformance_1.2.1.11" Тогда
		БПОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Исполнить'");
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныИсполнения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПИсполнение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessAcquaintance" Тогда
		БПОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Ознакомиться'");
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныОзнакомления", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПОзнакомление(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessOrder" Тогда
		БПОбъект = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Выполнить'");
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныПоручения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБППоручение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessIssuesSolution" Тогда
		БПОбъект = БизнесПроцессы.РешениеВопросовВыполненияЗадач.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет);
		Ответ.object = ПолучитьБПРешениеВопросовВыполненияЗадач(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessConsideration" Тогда
		БПОбъект = БизнесПроцессы.Рассмотрение.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Рассмотреть'");
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныРассмотрения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПРассмотрение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessRegistration" Тогда
		БПОбъект = БизнесПроцессы.Регистрация.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Зарегистрировать'");
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныРегистрации", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПРегистрация(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessApproval" Или Тип = "DMBusinessProcessApproval_1.2.1.11" Тогда
		БПОбъект = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Согласовать'");
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныСогласования", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПСогласование(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessConfirmation" Тогда
		БПОбъект = БизнесПроцессы.Утверждение.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныУтверждения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПУтверждение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		БПОбъект = БизнесПроцессы.ОбработкаВнутреннегоДокумента.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Обработка внутреннего'");
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект.Предметы[0].Предмет) <> ТипЗнч(Предмет) Тогда
				ВызватьИсключение("Невозможно создать процесс для данного типа документов - "
					+ Предмет.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.Заполнить(ДанныеЗаполнения);
		МассивШаблонов = МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(
			БПОбъект.Предметы,
			БПОбъект.Ссылка.Метаданные().Имя);
		Если МассивШаблонов.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
				ШаблонБизнесПроцесса = МассивШаблонов[0];
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
			БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
		КонецЕсли;
		Ответ.object = ПолучитьБПОбработкаВнутреннегоДокумента(БПОбъект);
	ИначеЕсли Тип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		БПОбъект = БизнесПроцессы.ОбработкаВходящегоДокумента.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Обработка входящего'");
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект.Предметы[0].Предмет) <> ТипЗнч(Предмет) Тогда
				ВызватьИсключение("Невозможно создать процесс для данного типа документов - "
					+ Предмет.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.Заполнить(ДанныеЗаполнения);
		МассивШаблонов = МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(
			БПОбъект.Предметы,
			БПОбъект.Ссылка.Метаданные().Имя);
		Если МассивШаблонов.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
				ШаблонБизнесПроцесса = МассивШаблонов[0];
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
			БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
		КонецЕсли;
		Ответ.object = ПолучитьБПОбработкаВходящегоДокумента(БПОбъект);
	ИначеЕсли Тип = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		БПОбъект = БизнесПроцессы.ОбработкаИсходящегоДокумента.СоздатьБизнесПроцесс();
		БПОбъект.Наименование = НСтр("ru = 'Обработка исходящего'");
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект.Предметы[0].Предмет) <> ТипЗнч(Предмет) Тогда
				ВызватьИсключение("Невозможно создать процесс для данного типа документов - "
					+ Предмет.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.Заполнить(ДанныеЗаполнения);
		МассивШаблонов = МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(
			БПОбъект.Предметы,
			БПОбъект.Ссылка.Метаданные().Имя);
		Если МассивШаблонов.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
				ШаблонБизнесПроцесса = МассивШаблонов[0];
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
			БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
		КонецЕсли;
		Ответ.object = ПолучитьБПОбработкаИсходящегоДокумента(БПОбъект);
	Иначе
		ВызватьИсключение("Данный тип процессов не поддерживается.");
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает список шаблонов бизнес-процессов, удовлетворяющих условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessTemplatesRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetBusinessProcessTemplatesResponse
// 
Функция ПолучитьШаблоныБизнесПроцесса(Сообщение) Экспорт
	
	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьШаблоныБизнесПроцесса(Сообщение);
	Если Ответ <> Неопределено Тогда
		Если Ответ.businessProcessTemplates.Количество() > 0 Тогда
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = СоздатьОбъектXDTO("DMGetBusinessProcessTemplatesResponse");
	
	Тип = Сообщение.businessProcessType;
	
	ПредметВид = Неопределено;
	
	Если Сообщение.Установлено("businessProcessTargetId") Тогда
		ПредметВид = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTargetId);
	КонецЕсли;
	
	МассивШаблонов = Новый Массив;
	
	Если ЗначениеЗаполнено(ПредметВид) 
		И (ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВходящихДокументов")
			Или ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыИсходящихДокументов")) Тогда
		Если ЗначениеЗаполнено(Тип) Тогда
			МассивШаблонов = ПолучитьШаблоныПоВидуДокумента(ПредметВид, Тип);
		Иначе
			МассивШаблонов = Новый Массив;
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныИсполнения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныОзнакомления");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныПоручения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныРассмотрения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныРегистрации");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныСогласования");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныУтверждения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныПриглашения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныКомплексныхБизнесПроцессов");
			
			Если ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ОбработкаВнутреннегоДокумента");
			ИначеЕсли ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ОбработкаВходящегоДокумента");
			ИначеЕсли ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ОбработкаИсходящегоДокумента");
			КонецЕсли;
		КонецЕсли;
	Иначе
				
		Если Тип = "DMBusinessProcessPerformance"
			ИЛИ Тип = "DMBusinessProcessPerformance_1.2.1.11" Тогда
			БПОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныИсполнения", Ложь);
		
		ИначеЕсли Тип = "DMBusinessProcessAcquaintance" Тогда
			БПОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныОзнакомления", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessOrder" Тогда
			БПОбъект = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныПоручения", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessConsideration" Тогда
			БПОбъект = БизнесПроцессы.Рассмотрение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныРассмотрения", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessRegistration" Тогда
			БПОбъект = БизнесПроцессы.Регистрация.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныРегистрации", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessApproval"
			ИЛИ Тип = "DMBusinessProcessApproval_1.2.1.11" Тогда
			БПОбъект = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныСогласования", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessConfirmation" Тогда
			БПОбъект = БизнесПроцессы.Утверждение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныУтверждения", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessInternalDocumentProcessing" Тогда
			БПОбъект = БизнесПроцессы.ОбработкаВнутреннегоДокумента.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ОбработкаВнутреннегоДокумента", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
			БПОбъект = БизнесПроцессы.ОбработкаВходящегоДокумента.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ОбработкаВходящегоДокумента", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
			БПОбъект = БизнесПроцессы.ОбработкаИсходящегоДокумента.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ОбработкаИсходящегоДокумента", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Шаблон Из МассивШаблонов Цикл
		ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
		ОбъектШаблонXDTO.name = Шаблон.Наименование;
		ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Шаблон.Ссылка);
		Ответ.BusinessProcessTemplates.Добавить(ОбъектШаблонXDTO);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает дерево шаблонов бизнес-процессов, удовлетворяющих условиям отбора
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeResponse 
//
Функция ПолучитьДеревоШаблоновБизнесПроцессов(Сообщение) Экспорт
	
	Ответ = СоздатьОбъектXDTO("DMGetBusinessProcessTemplatesTreeResponse");
	
	ПредметБП = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "businessProcessTargetId") Тогда
		ПредметБП = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTargetId);
	КонецЕсли;
	
	ПолучатьОписаниеШаблоновКомплексныхБП = Истина;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "getComplexBusinessProcessTemplateHint") Тогда
		ПолучатьОписаниеШаблоновКомплексныхБП = Сообщение.getComplexBusinessProcessTemplateHint;
	КонецЕсли;
	
	Объекты = Новый Массив;
	Если ЗначениеЗаполнено(ПредметБП) Тогда
		Объекты.Добавить(ПредметБП);
	КонецЕсли;
	ВариантыОтправки = ВариантыОтправки(Объекты, Ответ);
	
	ГруппаРекомендованныеШаблоны = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeGroup");
	ГруппаРекомендованныеШаблоны.name = НСтр("ru = 'Рекомендованные шаблоны'");
	ГруппаРекомендованныеШаблоны.hint =
		СформироватьСводкуПоГруппеЭлементов(ГруппаРекомендованныеШаблоны.name, Неопределено);
	ОстальныеГруппыШаблонов = Новый Массив;
	
	Для Каждого Строка Из ВариантыОтправки.Строки Цикл
		Если Строка.Недоступен = Истина Тогда
			ГруппаДругиеВарианты = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeGroup");
			ГруппаДругиеВарианты.name = Строка.Представление;
			ГруппаДругиеВарианты.hint = НСтр("ru = 'Группа шаблонов процессов.'");
			ГруппаДругиеВарианты.hintHTML = ПомощникОтправить.ОписаниеВарианта(Строка.Вариант);
			Для Каждого Подстрока Из Строка.Строки Цикл
				СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
				СтрокаШаблонов.name = Подстрока.Представление;
				Если ПолучатьОписаниеШаблоновКомплексныхБП
						Или ТипЗнч(Подстрока.Вариант) <> Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
					СтрокаШаблонов.hint = СформироватьСводкуПоШаблону(Подстрока.Вариант);
					СтрокаШаблонов.hintHTML = ПомощникОтправить.ОписаниеВарианта(Подстрока.Вариант);
				КонецЕсли;
				СтрокаШаблонов.businessProcessType = ПолучитьТипПроцессаXDTOПоШаблону(Подстрока.Вариант);
				
				ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
				ОбъектШаблонXDTO.name = Подстрока.Представление;
				ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Подстрока.Вариант);
				СтрокаШаблонов.template = ОбъектШаблонXDTO;
				
				ГруппаДругиеВарианты.elements.Добавить(СтрокаШаблонов);
			КонецЦикла;
			ОстальныеГруппыШаблонов.Добавить(ГруппаДругиеВарианты);
		ИначеЕсли ТипЗнч(Строка.Вариант) <> Тип("Строка") Тогда
			СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
			СтрокаШаблонов.name = Строка.Представление;
			Если ПолучатьОписаниеШаблоновКомплексныхБП
					Или ТипЗнч(Строка.Вариант) <> Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
				СтрокаШаблонов.hint = СформироватьСводкуПоШаблону(Строка.Вариант);
				СтрокаШаблонов.hintHTML = ПомощникОтправить.ОписаниеВарианта(Строка.Вариант);
			КонецЕсли;
			СтрокаШаблонов.businessProcessType = ПолучитьТипПроцессаXDTOПоШаблону(Строка.Вариант);
			
			ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
			ОбъектШаблонXDTO.name = Строка.Представление;
			ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Строка.Вариант);
			СтрокаШаблонов.template = ОбъектШаблонXDTO;
			
			ГруппаРекомендованныеШаблоны.elements.Добавить(СтрокаШаблонов);
		КонецЕсли;
	КонецЦикла;
	
	Ответ.businessProcessTemplatesTree.Добавить(ГруппаРекомендованныеШаблоны);
	Для Каждого Группа Из ОстальныеГруппыШаблонов Цикл
		Ответ.businessProcessTemplatesTree.Добавить(Группа);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает сводку шаблона бизнес-процесса.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetTemplateHintRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetTemplateHintResponse или DMError
// 
Функция ПолучитьСводкуШаблонаБизнесПроцесса(Сообщение) Экспорт
	
	Попытка
		
		Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.template);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetTemplateHintResponse");
		Ответ.hintHTML = ПомощникОтправить.ОписаниеВарианта(Шаблон);
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении сводки шаблона бизнес-процесса'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет и записывает задачу по объекту DMBusinessProcessTask
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
// Возвращаемое значение:
//   ОбъектXDTO того же типа, описывающий измененную задачу, или DMError
//
Функция ИзменитьЗадачу(ОбъектXDTO) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMBusinessProcessIssuesSolutionTaskAnswer")
				Или ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMBusinessProcessIssuesSolutionTaskQuestion") Тогда
			Задача = Ссылка.ПолучитьОбъект();
			ОбработатьИзменениеПредметовРешениеВопросов(Задача.БизнесПроцесс, ОбъектXDTO);
		Иначе
			ОбработатьИзменениеПредметовЗадачи(Ссылка, ОбъектXDTO);
			Задача = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбъектXDTO.executed И Не Задача.Выполнена Тогда
			
			ЗаполнитьОсновныеРеквизитыЗадачи(Задача, ОбъектXDTO);
			
			Если ОбъектXDTO.Установлено("performer") Тогда // заполним фактического исполнителя
				ИсполнительXDTO = ОбъектXDTO.performer;
				Если ИсполнительXDTO.Установлено("user") Тогда
					Задача.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
				КонецЕсли;
			КонецЕсли;
			
			ВыполнитьЗадачу(Задача, ОбъектXDTO);
			
		ИначеЕсли Не ОбъектXDTO.executed И Задача.Выполнена Тогда
			
			РезультатОтмены = БизнесПроцессыИЗадачиВызовСервера.ОтменитьВыполнениеЗадачи(Ссылка);
			
			Если РезультатОтмены.Отказ Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
				Ошибка.subject = НСтр("ru = 'Ошибка при отмене задачи'");
				Ошибка.description = РезультатОтмены.ПричинаОтказа;
				
				Возврат Ошибка;
				
			КонецЕсли;
			
		Иначе // просто запись.
			
			ЗаполнитьОсновныеРеквизитыЗадачи(Задача, ОбъектXDTO);
			
			Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
				БизнесПроцесс = Задача.БизнесПроцесс.ПолучитьОбъект();
				Исполнители = Новый ТаблицаЗначений;
				Исполнители.Колонки.Добавить("НомерИтерации");
				Исполнители.Колонки.Добавить("ЗадачаИсполнителя");
				Исполнители.Колонки.Добавить("ЗадачаПроверяющего");
				Исполнители.Колонки.Добавить("ОтправленоНаДоработку");
				Исполнители.Колонки.Добавить("КомментарийПроверяющего");
				Для Каждого СтрокаXDTO из ОбъектXDTO.checkResults Цикл
					СтрокаПроверки = Исполнители.Добавить();
					СтрокаПроверки.НомерИтерации = ОбъектXDTO.iterationNumber;
					СтрокаПроверки.ЗадачаИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(СтрокаXDTO.executorTask.objectId);
					СтрокаПроверки.ЗадачаПроверяющего = Задача.Ссылка;
					СтрокаПроверки.ОтправленоНаДоработку = СтрокаXDTO.returned;
					СтрокаПроверки.КомментарийПроверяющего = СтрокаXDTO.checkComment;
				КонецЦикла;
				БизнесПроцесс.ДополнительныеСвойства.Вставить("Исполнители", Исполнители);
				БизнесПроцесс.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача.Ссылка);
				УстановитьПривилегированныйРежим(Истина);
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс.Ссылка);
				БизнесПроцесс.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			Задача.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.Ссылка);
		Возврат ПолучитьЗадачуБизнесПроцесса(ОбъектИд);
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении задачи'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Выполняет задачу с заданным результатом
//
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//
Процедура ВыполнитьЗадачу(Задача, ОбъектXDTO) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ТекущаяЗадача", Задача.Ссылка);
	ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			ПараметрыВыполнения.Вставить("РезультатСогласования",
				ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.approvalResult.objectId));
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
			ПараметрыВыполнения.Вставить("ПовторитьСогласование", ОбъектXDTO.returned);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
			ПараметрыВыполнения.Вставить("РезультатУтверждения",
				ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.confirmationResult.objectId));
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
			ПараметрыВыполнения.Вставить("ПовторитьУтверждение", ОбъектXDTO.returned);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
			Если ОбъектXDTO.Установлено("registrationResult") Тогда
				ПараметрыВыполнения.Вставить("РезультатРегистрации",
					ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.registrationResult.objectId));
			Иначе
				ПараметрыВыполнения.Вставить("РезультатРегистрации", Перечисления.РезультатыРегистрации.Зарегистрировано);
			КонецЕсли;
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
			Если ОбъектXDTO.Установлено("returned") Тогда
				ПараметрыВыполнения.Вставить("ПовторитьРегистрацию", ОбъектXDTO.returned);
			Иначе
				ПараметрыВыполнения.Вставить("ПовторитьРегистрацию", Ложь);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
			ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", ОбъектXDTO.returned);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
			ПараметрыВыполнения.Вставить("РезультатВыполнения", ОбъектXDTO.executionComment);
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
			ПараметрыВыполнения.Вставить("РезультатВыполнения", ОбъектXDTO.resolution);
		КонецЕсли;
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ВариантРассмотрения", Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
		ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции", Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);
		ПараметрыВыполнения.Вставить("ВыполнитьЗадачу", Истина);
		ПараметрыВыполнения.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
			БизнесПроцесс = Задача.БизнесПроцесс.ПолучитьОбъект();
			БылиИзменения = Ложь;
			Исполнители = Новый ТаблицаЗначений;
			Исполнители.Колонки.Добавить("НомерИтерации");
			Исполнители.Колонки.Добавить("ЗадачаИсполнителя");
			Исполнители.Колонки.Добавить("ЗадачаПроверяющего");
			Исполнители.Колонки.Добавить("ОтправленоНаДоработку");
			Исполнители.Колонки.Добавить("КомментарийПроверяющего");
			Для Каждого СтрокаXDTO из ОбъектXDTO.checkResults Цикл
				СтрокаПроверки = Исполнители.Добавить();
				СтрокаПроверки.НомерИтерации = ОбъектXDTO.iterationNumber;
				СтрокаПроверки.ЗадачаИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
					СтрокаXDTO.executorTask.objectId);
				СтрокаПроверки.ЗадачаПроверяющего = Задача.Ссылка;
				СтрокаПроверки.ОтправленоНаДоработку = СтрокаXDTO.returned;
				СтрокаПроверки.КомментарийПроверяющего = СтрокаXDTO.checkComment;
				Если Не СтрокаПроверки.ОтправленоНаДоработку Тогда
					СтрокаИсполнителя = БизнесПроцесс.Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя);
					Если СтрокаИсполнителя <> Неопределено Тогда
						БизнесПроцесс.Исполнители.Удалить(СтрокаИсполнителя);
						БылиИзменения = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если БылиИзменения И БизнесПроцесс.Исполнители.Количество() > 0 Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс.Ссылка);
				БизнесПроцесс.Записать();
				РазблокироватьДанныеДляРедактирования(БизнесПроцесс.Ссылка);
			КонецЕсли;
			ПараметрыВыполнения.Вставить("Исполнители", Исполнители);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Если ОбъектXDTO.Установлено("executionComment") Тогда
			ПараметрыВыполнения.Вставить("РезультатВыполнения", ОбъектXDTO.executionComment);
		КонецЕсли;
		Если Задача.ТочкаМаршрута =
				БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
			ПараметрыВыполнения.Вставить("ОтправитьНаУточнение", ОбъектXDTO.returned);
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором
				И ОбъектXDTO.executionMark = "ExecutedPositive"
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Задача.БизнесПроцесс, "ВидВопроса") = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			ПараметрыВыполнения.Вставить("ПереносСрока", Истина);
			ПараметрыВыполнения.Вставить("НовыйСрок", ОбъектXDTO.parentBusinessProcess.newDueDate);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
			ПараметрыВыполнения.Вставить("РезультатПриглашения",
				ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.invitationResult.objectId));
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
			Если ОбъектXDTO.Установлено("invitationReturned") Тогда
				ПараметрыВыполнения.Вставить("ПовторитьПриглашение", ОбъектXDTO.invitationReturned);
			КонецЕсли;
			Если ОбъектXDTO.Установлено("invitationAccepted") Тогда
				ПараметрыВыполнения.Вставить("ПодтвердитьПриглашение", ОбъектXDTO.invitationAccepted);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
	Задача.ДополнительныеСвойства.Вставить("ПомещатьДублиВизВИсторию", Истина);
	
	Задача.Записать();
	
	РезультатПроверки = РаботаСБизнесПроцессамиВызовСервера.ПроверитьУсловияЗапретаВыполнения(Задача.Ссылка);
	Если РезультатПроверки.ЗапретВыполнения Тогда
		ВызватьИсключение РезультатПроверки.ТекстПредупреждения;
	КонецЕсли;
	
	Если РегистрыСведений.ЗадачиДляВыполнения.СостояниеВыполненияЗадачи(Задача.Ссылка).СостояниеВыполнения =
		Перечисления.СостоянияЗадачДляВыполнения.ВыполнениеОтменено Тогда
		
		ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами(Задача, ПараметрыВыполнения);
	Иначе
		ВыполнениеЗадачСервер.НаправитьЗадачуНаВыполнение(Задача, ПараметрыВыполнения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Перенаправляет переданные задачи указанному пользователю	
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRedirectTasksRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMOK в случае успеха или DMError в противном случае
//
Функция ПеренаправитьЗадачи(Сообщение) Экспорт
	
	Попытка
		
		Результат = Новый Структура("Исполнитель,
									|Комментарий,
									|РольИсполнителя");
		Результат.Комментарий = Сообщение.comment;
		
		ИсполнительXDTO = Сообщение.performer;
		
		Если ИсполнительXDTO.Установлено("user") Тогда
			Результат.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
		ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
			РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.role.ObjectId);
			Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
				ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.mainAddressingObject.objectId);
			Иначе
				ОсновнойОбъектАдресации = Неопределено;
			КонецЕсли;
			Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
				ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.secondaryAddressingObject.objectId);
			Иначе
				ДополнительныйОбъектАдресации = Неопределено;
			КонецЕсли;
			Результат.РольИсполнителя = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
		КонецЕсли;
		
		Для Каждого ЗадачаXDTO из Сообщение.tasks Цикл
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectId);
			БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(Ссылка, Результат);
		КонецЦикла;
		
		Ответ = СоздатьОбъектXDTO("DMOK");
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при перенаправлении задачи'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Заполняет бизнес-процесс по шаблону
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessByTemplateRequest
// Возвращаемое значение:
//   DMGetBusinessProcessByTemplateResponse
// 
Функция ЗаполнитьБизнесПроцессПоШаблону(Сообщение) Экспорт
	
	Возврат ПолучитьСостояниеНовогоОбъекта(Сообщение, "DMGetBusinessProcessByTemplateResponse");
	
КонецФункции

// Получает данные задачи бизнес-процесса
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий задачу
//   ПолучитьЗависимыеОбъекты - Булево - Истина, если нужно получить родительский процесс и предмет
//   ПолучитьHTMLПредставление - Булево - Истина, если нужно получить HTML представление задачи
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов задачи
//
// Возвращаемое значение:
//   ОбъектXDTO типа, наследующего DMBusinessProcessTask
//
Функция ПолучитьЗадачуБизнесПроцесса(ОбъектИд, ПолучитьЗависимыеОбъекты = Ложь, ПолучитьHTMLПредставление = Ложь,
		ПолучитьПредметы = Истина) Экспорт
	
	СсылкаНаЗадачу = Неопределено;
	СсылкаНаЗадачу = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	ТипОбъектаXDTO = ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(СсылкаНаЗадачу);
	
	ЗадачаXDTO = СоздатьОбъектXDTO(ТипОбъектаXDTO);
	
	ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, СсылкаНаЗадачу, ,ПолучитьПредметы);
	ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(ЗадачаXDTO, СсылкаНаЗадачу);
	Если ПолучитьHTMLПредставление Тогда
		ЗаполнитьHTMLПредставлениеЗадачи(ЗадачаXDTO, СсылкаНаЗадачу);
	КонецЕсли;
	
	Если ПолучитьЗависимыеОбъекты Тогда
		
		БизнесПроцессXDTO = ПолучитьБизнесПроцесс(ЗадачаXDTO.parentBusinessProcess.objectID, ПолучитьПредметы);
		ЗадачаXDTO.parentBusinessProcess = БизнесПроцессXDTO;
		Если СсылкаНаЗадачу.Предметы.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(СсылкаНаЗадачу.Предметы[0].Предмет) Тогда
				Запрос = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRetrieveRequest");
				Объект = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаЗадачу.Предметы[0].Предмет);
				Если Объект.type = "DMFile" Тогда
					Запрос.columnSet.Добавить("name");
					Запрос.columnSet.Добавить("objectId");
					Запрос.columnSet.Добавить("extension");
					Запрос.columnSet.Добавить("modificationDateUniversal");
					Запрос.columnSet.Добавить("size");
				КонецЕсли;
				Запрос.objectIDs.Добавить(Объект);
				Попытка
					Ответ = ОбработкаЗапросовXDTO.ПолучитьОбъекты(Запрос);
					Предмет = Ответ.objects[0];
				Исключение
					Предмет = СоздатьОбъектXDTO("DMObject");
					УстановитьПривилегированныйРежим(Истина);
					Предмет.name = Строка(СсылкаНаЗадачу.Предметы[0].Предмет);
					Предмет.ObjectID = Объект;
					УстановитьПривилегированныйРежим(Ложь);
				КонецПопытки;
				ЗадачаXDTO.target = Предмет;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ЗадачаXDTO, СсылкаНаЗадачу);
	
	Возврат ЗадачаXDTO;
	
КонецФункции

// Возвращает объект Документооборота по объекту XDTO
// 
// Параметры:
//   ИмяТипаБизнесПроцесса - краткое имя типа процесса ("Исполнение")
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcess
//   СоздатьНовый - Булево - Истина, если нужно лишь создать пустой новый объект
// Возвращаемое значение:
// 
Функция ПолучитьОбъектБизнесПроцесс(ИмяТипаБизнесПроцесса, ОбъектXDTO, СоздатьНовый) Экспорт

	Если НЕ СоздатьНовый Тогда
		СсылкаНаБП = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Если НЕ ЗначениеЗаполнено(СсылкаНаБП) Тогда
			Возврат Неопределено;
		КонецЕсли;
		БПОбъект = СсылкаНаБП.ПолучитьОбъект();
	Иначе
		БПОбъект = БизнесПроцессы[ИмяТипаБизнесПроцесса].СоздатьБизнесПроцесс();
	КонецЕсли;
	
	Возврат БПОбъект;
	
КонецФункции

// Безопасно записывает объект процесса
// 
// Параметры:
//   БПОбъект - БизнесПроцессОбъект
//
Процедура ЗаписатьБПОбъект(БПОбъект) Экспорт
	
	Если ЗначениеЗаполнено(БПОбъект.Ссылка) Тогда
		// Блокировка объекта
		БПОбъект.Заблокировать();
		
		// Запись объекта
		БПОбъект.Записать();
	
		// Разблокировка объекта
		БПОбъект.Разблокировать();

		Если БПОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(БПОбъект.Ссылка);
		КонецЕсли;
	Иначе
		// Запись объекта
		БПОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Получает лист согласования для указанного объекта.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetApprovalSheetRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetApprovalSheetResponse или DMError
//
Функция ПолучитьЛистСогласования(Сообщение) Экспорт
	
	ПредметСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object.objectId); 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Исполнитель,
		|	ДатаИсполнения,
		|	РезультатСогласования,
		|	Комментарий
		|ПОМЕСТИТЬ
		|	ВизыСогласования
		|ИЗ
		|	Справочник.ВизыСогласования
		|ГДЕ
		|	Документ = &ПредметСогласования
		|	И РезультатСогласования <> ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.ПустаяСсылка)
		|	И НЕ ПометкаУдаления
		|	И НЕ Удалена
		|	И НЕ ПомещенаВИсторию
		|
		|;///////////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Исполнители.Исполнитель
		|ПОМЕСТИТЬ
		|	ОжиданиеСогласования
		|ИЗ 
		|	БизнесПроцесс.Согласование.Исполнители КАК Исполнители
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	БизнесПроцесс.Согласование.Предметы КАК Предметы
		|ПО
		|	Исполнители.Ссылка = Предметы.Ссылка
		|	И Предметы.Предмет = &ПредметСогласования
		|ГДЕ
		|	НЕ Исполнители.Пройден
		|	И НЕ Исполнители.Ссылка.Завершен
		|	И Исполнители.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И НЕ Исполнители.Исполнитель В (ВЫБРАТЬ Исполнитель ИЗ ВизыСогласования)
		|
		|;///////////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ЛистСогласования.Исполнитель,
		|	СведенияОПользователяхДокументооборот.Должность,
		|	ЛистСогласования.ДатаИсполнения,
		|	ЛистСогласования.РезультатСогласования,
		|	ЛистСогласования.Комментарий
		|ИЗ 
		|
		|	(ВЫБРАТЬ
		|		Исполнитель,
		|		ДатаИсполнения,
		|		РезультатСогласования,
		|		Комментарий
		|	ИЗ
		|		ВизыСогласования
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Исполнитель,
		|		ДАТАВРЕМЯ(1, 1, 1),
		|		"""",
		|		""""
		|	ИЗ 
		|		ОжиданиеСогласования
		|) КАК ЛистСогласования
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ПО
		|	ЛистСогласования.Исполнитель = СведенияОПользователяхДокументооборот.Пользователь
		|";
		
	Запрос.УстановитьПараметр("ПредметСогласования", ПредметСогласования);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Ответ = СоздатьОбъектXDTO("DMGetApprovalSheetResponse");
	Пока Выборка.Следующий() Цикл
		
		Пункт = СоздатьОбъектXDTO("DMApprovalSheetItem");
		Пункт.position = Строка(Выборка.Должность);
		Пункт.name = Строка(Выборка.Исполнитель);
		Пункт.date = Выборка.ДатаИсполнения;
		Пункт.result = ?(ЗначениеЗаполнено(Выборка.РезультатСогласования),
			Строка(Выборка.РезультатСогласования),
			НСтр("ru = 'На согласовании'"));
		Пункт.comment = Выборка.Комментарий;
		
		Ответ.items.Добавить(Пункт);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает объект XDTO DMApprovalStateRecord, соответствующий переданной структуре записи.
//
// Параметры:
//   СтруктураЗаписи - Структура:
//      Документ - СправочникСсылка.<...>Документы.
//      Состояние - ПеречислениеСсылка.СостоянияДокументов или Неопределено - последнее состояние.
//      Установил - СправочникСсылка.Пользователи, БизнесПроцессСсылка.
//      ДатаУстановки - Дата - дата и время установки.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMApprovalStateRecord.
//
Функция ПолучитьЗаписьСостоянияСогласования(СтруктураЗаписи) Экспорт
	
	Ответ = СоздатьОбъектXDTO("DMApprovalStateRecord");
	
	Ответ.id = ОбработкаЗапросовXDTO.ПолучитьIDПоСсылке(СтруктураЗаписи.Документ);
	Ответ.type = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(СтруктураЗаписи.Документ);
	
	Если ЗначениеЗаполнено(СтруктураЗаписи.Состояние) Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "status", СтруктураЗаписи.Состояние);
		Ответ.name = Строка(СтруктураЗаписи.Установил);
		Ответ.date = СтруктураЗаписи.ДатаУстановки;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВариантыОтправки(Объекты, Ответ)
	
	ВариантыОтправки = Новый ДеревоЗначений;
	ВариантыОтправки.Колонки.Добавить("Вариант");
	ВариантыОтправки.Колонки.Добавить("Представление");
	ВариантыОтправки.Колонки.Добавить("Недоступен");
	
	ПомощникНаСервере = ПомощникОтправить.Помощник();
	Если Объекты.Количество() > 0 Тогда
		ПомощникОтправить.УстановитьРежимРаботы(ПомощникНаСервере, "ОтправкаОбъектов");
	Иначе
		ПомощникОтправить.УстановитьРежимРаботы(ПомощникНаСервере, "ОтправкаПроцесса");
	КонецЕсли;
	ПомощникОтправить.ЗаполнитьОбъектыОтправки(ПомощникНаСервере, Объекты);
	ПомощникОтправить.ЗаполнитьВозможныеВарианты(ПомощникНаСервере, Неопределено);
	
	ПомощникОтправить.ЗаполнитьДеревоВариантовОтправки(ПомощникНаСервере);
	Попытка
		ПомощникОтправить.ПроверитьВозможностьОтправки(ПомощникНаСервере);
	Исключение
		Возврат ВариантыОтправки;
	КонецПопытки;
	
	ЗаголовокПомощника = ПомощникОтправить.ЗаголовокПомощника(ПомощникНаСервере);
	Если ЗначениеЗаполнено(ЗаголовокПомощника) Тогда
		Ответ.formHeader = ЗаголовокПомощника;
	КонецЕсли;
	ЗаголовокКомандыВыбораВариантаПомощника =
		ПомощникОтправить.ЗаголовокКомандыВыбораВариантаПомощника(ПомощникНаСервере);
	Если ЗначениеЗаполнено(ЗаголовокКомандыВыбораВариантаПомощника) Тогда
		Ответ.commandHeader = ЗаголовокКомандыВыбораВариантаПомощника;
	КонецЕсли;
	ДеревоВариантовОтправки =	ПомощникОтправить.ДеревоВариантовОтправки(ПомощникНаСервере);
	НедоступныеВарианты =		ПомощникОтправить.НедоступныеВарианты(ПомощникНаСервере);
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоВариантовОтправки.Строки Цикл
		СтрокиКОбработке.Добавить(СтрокаДерева);
	КонецЦикла;
	
	СоотвествиеСтрокВариантов = Новый Соответствие;
	
	Пока ЗначениеЗаполнено(СтрокиКОбработке) Цикл
		
		СтрокаВДереве = СтрокиКОбработке[0];
		
		ЭлементРодитель = СоотвествиеСтрокВариантов[СтрокаВДереве.Родитель];
		Если ЭлементРодитель = Неопределено Тогда
			ЭлементРодитель = ВариантыОтправки;
		КонецЕсли;
		
		СтрокаВариантаОтправки = ЭлементРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВариантаОтправки, СтрокаВДереве);
		
		СтрокаВариантаОтправки.Недоступен = НедоступныеВарианты[СтрокаВариантаОтправки.Вариант];
		
		СоотвествиеСтрокВариантов[СтрокаВДереве] = СтрокаВариантаОтправки;
		
		Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаВДереве.Строки Цикл
			СтрокиКОбработке.Добавить(ПодчиненнаяСтрокаДерева);
		КонецЦикла;
		
		СтрокиКОбработке.Удалить(0);
		
	КонецЦикла;
	
	Возврат ВариантыОтправки;
	
КонецФункции

// Устанавливает значение исполнителя задачи по объекту DMUser 
// 
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача к заполнению
//   ИсполнительXDTO - ОбъектXDTO типа DMUser - исполнитель к заполнению в задаче
// 
Процедура УстановитьЗначениеИсполнителяЗадачи(Задача, ИсполнительXDTO)
	
	Если ИсполнительXDTO.Установлено("user") Тогда
		Задача.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.role.ObjectId);
		Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
			ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.mainAddressingObject.objectId);
		Иначе
			ОсновнойОбъектАдресации = Неопределено;
		КонецЕсли;
		Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
			ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.secondaryAddressingObject.objectId);
		Иначе
			ДополнительныйОбъектАдресации = Неопределено;
		КонецЕсли;
		Задача.РольИсполнителя = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	КонецЕсли;

КонецПроцедуры

// Проверяет, изменились ли предметы задачи, и проводит аналогичное изменение родительского процесса.
//
// Параметры:
//   ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ОбъектXDTO - ОбъектXDTO - объект-потомок DMBusinessProcessTask с измененными данными задачи.
//
Процедура ОбработатьИзменениеПредметовЗадачи(ЗадачаСсылка, ОбъектXDTO)
	
	// Клиент может не знать о мультипредметности.
	Если Не ОбъектXDTO.Установлено("targets") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "БизнесПроцесс, Предметы");
	ПредметыЗадачи = Реквизиты.Предметы.Выгрузить();
	
	// Подготовим предметы к передаче, заполнив имена, если их не заполнил клиент.
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("ИмяПредмета");
	Предметы.Колонки.Добавить("Предмет");
	ИспользованныеИмена = ПредметыЗадачи.ВыгрузитьКолонку("ИмяПредмета");
	
	Для Каждого target Из ОбъектXDTO.targets.items Цикл
		
		СтрокаПредмета = Предметы.Добавить();
		СтрокаПредмета.РольПредмета = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
			target.role.objectId);
		СтрокаПредмета.Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
			target.target.objectId);
		
		Если ЗначениеЗаполнено(target.name) Тогда // воспользуемся переданным именем
			СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
				ПолучитьСсылкуНаИмяПредмета(target.name);
		Иначе // выдадим уникальное имя
			СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
				ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
					СтрокаПредмета.Предмет,
					ИспользованныеИмена);
		КонецЕсли;
		
		Если ИспользованныеИмена.Найти(СтрокаПредмета.ИмяПредмета) = Неопределено Тогда
			ИспользованныеИмена.Добавить(СтрокаПредмета.ИмяПредмета);
		КонецЕсли;
		
	КонецЦикла;
	
	// Эти данные будут получены ниже, и лишь при необходимости.
	БизнесПроцессОбъект = Неопределено;
	ДействияПроцесса = Неопределено;
	
	// Удалим удаленные клиентом предметы, сохранив те, удаление которых явно запрещено.
	Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл
		Если СтрокаПредмета.ДоступноУдаление
				И Предметы.Найти(СтрокаПредмета.ИмяПредмета, "ИмяПредмета") = Неопределено Тогда
			УстановитьПривилегированныйРежим(Истина);
			Мультипредметность.ЗаписатьПредметБизнесПроцесса(
				Реквизиты.БизнесПроцесс, СтрокаПредмета.ИмяПредмета, СтрокаПредмета.Предмет, Реквизиты.БизнесПроцесс,, Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим, нет ли новых предметов.
	Для Каждого СтрокаПредмета Из Предметы Цикл
		
		Если ПредметыЗадачи.Найти(СтрокаПредмета.ИмяПредмета, "ИмяПредмета") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если БизнесПроцессОбъект = Неопределено Тогда
			БизнесПроцессОбъект = Реквизиты.БизнесПроцесс.ПолучитьОбъект();
		КонецЕсли;
		
		ДобавляемаяСтрокаПредмета = БизнесПроцессОбъект.Предметы.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемаяСтрокаПредмета, СтрокаПредмета);
		
		// Заполним предметы задач.
		Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
			
			Если ДействияПроцесса = Неопределено Тогда
				ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(
					БизнесПроцессОбъект.Ссылка);
			КонецЕсли;
			
			Для Каждого СтрокаДействия Из ДействияПроцесса Цикл
				СтрокаПредметаЗадачи = БизнесПроцессОбъект.ПредметыЗадач.Добавить();
				СтрокаПредметаЗадачи.ТочкаМаршрута = СтрокаДействия;
				ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадачи, СтрокаПредмета);
				СтрокаПредметаЗадачи.ДоступноУдаление = Истина;
			КонецЦикла;
			
		Иначе // комплексный процесс
			
			Если ДействияПроцесса = Неопределено Тогда
				ДействияПроцесса = Мультипредметность.ПолучитьДействияКомплексногоПроцесса(
					БизнесПроцессОбъект.Ссылка);
			КонецЕсли;
			
			Для Каждого СтрокаДействия Из ДействияПроцесса Цикл
				СтрокаПредметаЗадачи = БизнесПроцессОбъект.ПредметыЗадач.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадачи, СтрокаПредмета);
				ЗаполнитьЗначенияСвойств(СтрокаПредметаЗадачи, СтрокаДействия);
				СтрокаПредметаЗадачи.ДоступноУдаление = Истина;
			КонецЦикла;
			
			// Обновим и шаблоны всех этапов процесса.
			ШаблоныЭтапов = Новый Массив;
			Для Каждого СтрокаЭтапа Из БизнесПроцессОбъект.Этапы Цикл
				ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
			КонецЦикла;
			Для Каждого СтрокаПредмета из БизнесПроцессОбъект.Предметы Цикл
				МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
					БизнесПроцессОбъект.Ссылка,
					ШаблоныЭтапов,
					БизнесПроцессОбъект.ПредметыЗадач,
					СтрокаПредмета);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; // по предметам
	
	// Запишем изменения процесса лишь в случае необходимости.
	Если БизнесПроцессОбъект <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		БизнесПроцессОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, изменились ли предметы бизнес-процесса "Решение вопросов выполнения задач",
// и обновляет файлы.
//
// Параметры:
//   БизнесПроцесс - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - бизнес-процесс.
//   ОбъектXDTO - ОбъектXDTO - объект с измененными данными о файлах.
//
Процедура ОбработатьИзменениеПредметовРешениеВопросов(БизнесПроцесс, ОбъектXDTO)
	
	Файлы = Новый Массив;
	
	Если ОбъектXDTO.Установлено("files") Тогда
		Для Каждого file Из ОбъектXDTO.files Цикл
			Файлы.Добавить(ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(file.objectId));
		КонецЦикла;
	КонецЕсли;
	
	// присоединенные файлы
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВладелецФайла", БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Файлы.Найти(Выборка.Ссылка) = Неопределено Тогда
			УстановитьПривилегированныйРежим(Истина);
			Файл = Выборка.Ссылка.ПолучитьОбъект();
			Файл.ПометкаУдаления = Истина;
			Файл.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет основные реквизиты задачи по объекту DMBusinessProcessTask.
//
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача к заполнению.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask.
//
Процедура ЗаполнитьОсновныеРеквизитыЗадачи(Задача, ОбъектXDTO)
	
	ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
	
	Задача.Наименование =	ОбъектXDTO.name;
	Задача.Дата =			ОбъектXDTO.beginDate;
	Задача.Номер =			ОбъектXDTO.number;
	Задача.Описание =		ОбъектXDTO.description;
	Задача.СрокИсполнения = ОбъектXDTO.dueDate;
	Задача.ДатаИсполнения = ОбъектXDTO.endDate;
	Задача.Важность =		ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.importance.objectID);
	
	УстановитьЗначениеИсполнителяЗадачи(Задача, ОбъектXDTO.performer);
	
	Если ОбъектXDTO.Установлено("executionComment") Тогда
		Задача.РезультатВыполнения = ОбъектXDTO.executionComment;
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("project") Тогда
		Задача.Проект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.project.objectID);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Задача, ОбъектXDTO);
	
КонецПроцедуры

// Возвращает имя типа объекта XDTO задачи по точке маршрута задачи
//
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя
// Возвращаемое значение:
//   Строка - имя типа XDTO, соответствующего задаче конкретного процесса в конкретной точке маршрута
//
Функция ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Задача)
	
	Результат = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Задача);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
		Возврат "DMBusinessProcessOrderTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Возврат "DMBusinessProcessApprovalTaskApproval";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessApprovalTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Возврат "DMBusinessProcessConfirmationTaskConfirmation";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessConfirmationTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		Возврат "DMBusinessProcessRegistrationTaskRegistration";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessRegistrationTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		Возврат "DMBusinessProcessPerfomanceTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessConsiderationTaskAcquaint";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Возврат "DMBusinessProcessIssuesSolutionTaskQuestion";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Возврат "DMBusinessProcessIssuesSolutionTaskAnswer";
	Иначе
		Возврат "DMBusinessProcessTask";
	КонецЕсли;
	
КонецФункции

// Возвращает тип XDTO бизнес-процесса по ссылке на шаблон бизнес-процессов
// 
// Параметры:
//   ШаблонСсылка - СправочникСсылка.Шаблоны<...>
// Возвращаемое значение:
//   Строка - имя типа XDTO, наследника DMBusinessProcess
// 
Функция ПолучитьТипПроцессаXDTOПоШаблону(ШаблонСсылка)
	
	Результат = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьТипПроцессаXDTOПоШаблону(ШаблонСсылка);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		Возврат "DMBusinessProcessPerformance"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		Возврат "DMBusinessProcessAcquaintance"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		Возврат "DMBusinessProcessOrder"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		Возврат "DMBusinessProcessConsideration"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Возврат "DMBusinessProcessRegistration"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Возврат "DMBusinessProcessApproval"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Возврат "DMBusinessProcessConfirmation"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		Если ШаблонСсылка.ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
			Возврат "DMBusinessProcessInternalDocumentProcessing"
		ИначеЕсли ШаблонСсылка.ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
			Возврат "DMBusinessProcessIncomingDocumentProcessing"
		ИначеЕсли ШаблонСсылка.ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
			Возврат "DMBusinessProcessOutgoingDocumentProcessing"
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает описание для ветки дерева шаблонов бизнес-процессов
// 
// Параметры:
//   ИмяГруппы - краткое наименование ветки
//   ВидДокументаПредмета - СправочникСсылка.Виды<...>Документов
// Возвращаемое значение:
//   Строка - пользовательское представление ветки дерева шаблонов
// 
Функция СформироватьСводкуПоГруппеЭлементов(ИмяГруппы, ВидДокументаПредмета)
	
	Если ИмяГруппы = НСтр("ru = 'Рекомендованные шаблоны'") Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, привязанные к данному виду документа.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Общие шаблоны'") Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, не привязанные ни к одному из видов документов.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Новые процессы'") Тогда
		Текст = НСтр("ru = 'Ссылки на создание новых, незаполненных процессов.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Другие шаблоны'") Тогда
		Если ЗначениеЗаполнено(ВидДокументаПредмета) Тогда
			Текст = НСтр("ru = 'Шаблоны процессов, привязанные к видам документов, отличных от данного.'");
		Иначе
			Текст = НСтр("ru = 'Шаблоны процессов, привязанные к какому-либо виду документов.'");
		КонецЕсли;
	Иначе
		Текст = НСтр("ru = 'Группа шаблонов процессов.'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает описание для шаблонов бизнес-процессов дерева шаблонов XDTO
// 
// Параметры:
//   ШаблонСсылка - СправочникСсылка.Шаблоны<...>
// Возвращаемое значение:
//   Строка - пользовательское описание шаблона
// 
Функция СформироватьСводкуПоШаблону(ШаблонСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат ШаблонСсылка.ПолучитьОбъект().СформироватьСводкуПоШаблону();
	Исключение
		Возврат ШаблонСсылка.Наименование;
	КонецПопытки;
	
КонецФункции

// Заполняет HTML представление задачи.
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаИсполнителя
//
Процедура ЗаполнитьHTMLПредставлениеЗадачи(ЗадачаXDTO, СсылкаНаЗадачу)
	
	ПоддерживаемыеСсылки = Новый Массив;
	ПоддерживаемыеСсылки.Добавить("ИзменитьСрокВыполнения");
	
	htmlView = ОбзорЗадачВызовСервера.ПолучитьОбзорЗадачи(СсылкаНаЗадачу);
	htmlViewИтог = Новый Массив;
	
	Для Индекс = 1 По СтрЧислоСтрок(htmlView) Цикл
		htmlViewИтог.Добавить(УдалитьНеподдерживаемыеСсылки(СтрПолучитьСтроку(htmlView, Индекс), ПоддерживаемыеСсылки));
	КонецЦикла;
	
	ЗадачаXDTO.htmlView = СтрСоединить(htmlViewИтог, Символы.ПС);
	
КонецПроцедуры

Функция УдалитьНеподдерживаемыеСсылки(Строка, ПоддерживаемыеСсылки)
	
	МассивЗамен = Новый Массив;
	
	ПозицияКурсора = СтрНайти(Строка, "<A href=", НаправлениеПоиска.СНачала);
	Пока ПозицияКурсора > 0 Цикл
		КонецИдентификатора = СтрНайти(Строка, ">", НаправлениеПоиска.СНачала, ПозицияКурсора);
		Ссылка = Сред(Строка, ПозицияКурсора + 8, КонецИдентификатора - ПозицияКурсора - 8);
		Если ПоддерживаемыеСсылки.Найти(Ссылка) = Неопределено Тогда
			КонецСсылки = СтрНайти(Строка, "</A>", НаправлениеПоиска.СНачала, ПозицияКурсора);
			Замена = Новый Структура("ПодстрокаПоиска, ПодстрокаЗамены",
				Сред(Строка, ПозицияКурсора, КонецСсылки + 4 - ПозицияКурсора),
				Сред(Строка, КонецИдентификатора + 1, КонецСсылки - КонецИдентификатора - 1));
			МассивЗамен.Добавить(Замена);
		КонецЕсли;
		
		ПозицияКурсора = СтрНайти(
			Строка,
			"<A href=",
			НаправлениеПоиска.СНачала,
			Мин(ПозицияКурсора + 1, СтрДлина(Строка)));
	КонецЦикла;
	
	Для Каждого Замена Из МассивЗамен Цикл
		Строка = СтрЗаменить(Строка, Замена.ПодстрокаПоиска, Замена.ПодстрокаЗамены);
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ БИЗНЕС-ПРОЦЕССОВ ОТДЕЛЬНЫХ ТИПОВ

// Возвращает заполненный объект XDTO по бизнес-процессу Исполнение
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Исполнение
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessPerformance
//
Функция ПолучитьБПИсполнение(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessPerformance");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ПередатьЗначениеКонтролера(ОбъектБизнесПроцесс, Ответ);
	ПередатьЗначениеПроверяющего(ОбъектБизнесПроцесс, Ответ);
	
	Ответ.currentIteration = ОбъектБизнесПроцесс.НомерИтерации;
	Ответ.performanceType = СоздатьОбъектXDTO("DMBusinessProcessRoutingType");
	Ответ.performanceType.name = Строка(ОбъектБизнесПроцесс.ВариантИсполнения);
	Ответ.performanceType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
		ОбъектБизнесПроцесс.ВариантИсполнения);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	Для Каждого Исполнитель Из ОбъектБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessPerformanceParticipant");
		basePerformer = ПодготовитьИсполнителя(Исполнитель, "Исполнитель", "Исполнитель", "СрокИсполнения");
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
			КонецЕсли;
		КонецЦикла;
		performer.personalDueDate = ОбработатьДату(Исполнитель.СрокИсполнения);
		performer.personalDescription = Исполнитель.Описание;
		performer.personalTaskName = Исполнитель.НаименованиеЗадачи;
		performer.responsible = Исполнитель.Ответственный;
		performer.performanceOrder = СоздатьОбъектXDTO("DMTaskExecutionOrder");
		performer.performanceOrder.name = Строка(Исполнитель.ПорядокИсполнения);
		performer.performanceOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			Исполнитель.ПорядокИсполнения);
		performer.passed = Исполнитель.Пройден;
		Если ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
			performer.task = ПолучитьЗадачуБизнесПроцесса(ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				Исполнитель.ЗадачаИсполнителя));
		КонецЕсли;
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает по-старому заполненный объект XDTO по бизнес-процессу Исполнение
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Исполнение
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessPerformance_1.2.1.11
//
Функция ПолучитьБПИсполнение_1_2_1_11(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessPerformance_1.2.1.11");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ПередатьЗначениеКонтролера(ОбъектБизнесПроцесс, Ответ);
	ПередатьЗначениеПроверяющего(ОбъектБизнесПроцесс, Ответ);
	
	// особенная шапка БП Исполнение
	Ответ.performanceType = СоздатьОбъектXDTO("DMBusinessProcessRoutingType");
	Ответ.performanceType.name = Строка(ОбъектБизнесПроцесс.ВариантИсполнения);
	Ответ.performanceType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
		ОбъектБизнесПроцесс.ВариантИсполнения);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	Для Каждого Исполнитель Из ОбъектБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessPerformanceParticipant_1.2.1.11");
		basePerformer = ПодготовитьИсполнителя(Исполнитель, "Исполнитель", "Исполнитель");
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];
			КонецЕсли;
		КонецЦикла;
		performer.personalDueDate = ОбработатьДату(Исполнитель.СрокИсполнения);
		performer.personalDescription = Исполнитель.Описание;
		performer.personalTaskName = Исполнитель.НаименованиеЗадачи;
		performer.responsible = Исполнитель.Ответственный;
		performer.performanceOrder = СоздатьОбъектXDTO("DMTaskExecutionOrder");
		performer.performanceOrder.name = Строка(Исполнитель.ПорядокИсполнения);
		performer.performanceOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			Исполнитель.ПорядокИсполнения);
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Ознакомление
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Ознакомление
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessAcquaintance
//
Функция ПолучитьБПОзнакомление(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessAcquaintance");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	
	// Слишком длинную историю, типичную для ознакомлений, лучше не передавать через веб-сервис.
	История = СтрЗаменить(
		РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(ОбъектБизнесПроцесс.Ссылка),
		Символы.ПС + Символы.ПС,
		Символы.ПС);
	Предел = 10;
	Если СтрЧислоСтрок(История) > Предел Тогда
		КраткаяИстория = "";
		Для НСтроки = 1 По Предел Цикл
			КраткаяИстория = КраткаяИстория + СтрПолучитьСтроку(История, НСтроки) + Символы.ПС;
		КонецЦикла;
		История = КраткаяИстория + СтрШаблон(НСтр("ru = '(еще %1)'"), СтрЧислоСтрок(История) - Предел);
	КонецЕсли;
	Ответ.executionComment = История;
	
	Для Каждого Исполнитель Из ОбъектБизнесПроцесс.Исполнители Цикл
		performer = ПодготовитьИсполнителя(Исполнитель, "Исполнитель", "Исполнитель", "СрокИсполнения");
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Поручение
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Поручение
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessOrder
//
Функция ПолучитьБППоручение(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessOrder");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ПередатьЗначениеКонтролера(ОбъектБизнесПроцесс, Ответ);
	ПередатьЗначениеПроверяющего(ОбъектБизнесПроцесс, Ответ);
	ПередатьЗначениеОдногоИсполнителя(ОбъектБизнесПроцесс, Ответ);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Рассмотрение
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Рассмотрение
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessConsideration
//
Функция ПолучитьБПРассмотрение(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessConsideration");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	Ответ.resolution = ОбъектБизнесПроцесс.Резолюция;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	ПередатьСрокОбработкиРезультата(ОбъектБизнесПроцесс, Ответ);
	
	ПередатьЗначениеОдногоИсполнителя(ОбъектБизнесПроцесс, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Регистрация
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Регистрация
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessRegistration
//
Функция ПолучитьБПРегистрация(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessRegistration");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ПередатьСрокОбработкиРезультата(ОбъектБизнесПроцесс, Ответ);
	ПередатьЗначениеОдногоИсполнителя(ОбъектБизнесПроцесс, Ответ);
	Ответ.executionResult = СоздатьОбъектXDTO("DMRegistrationResult");
	Ответ.executionResult.name = Строка(ОбъектБизнесПроцесс.РезультатРегистрации);
	ответ.executionResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
		ОбъектБизнесПроцесс.РезультатРегистрации);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Согласование
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Согласование
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessApproval
//
Функция ПолучитьБПСогласование(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessApproval");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	
	// общая шапка бизнес-процесса
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	
	// особенная шапка Согласования
	Ответ.approvalType = СоздатьОбъектXDTO("DMApprovalType");
	Ответ.approvalType.name = Строка(ОбъектБизнесПроцесс.ВариантСогласования);
	Ответ.approvalType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(
		ОбъектБизнесПроцесс.ВариантСогласования);
	
	// результат согласования
	Ответ.executionResult = СоздатьОбъектXDTO("DMApprovalResult");
	Ответ.executionResult.name = Строка(ОбъектБизнесПроцесс.РезультатСогласования);
	Ответ.executionResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
		ОбъектБизнесПроцесс.РезультатСогласования);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	Ответ.durationDays = 0;
	Ответ.durationHours = 0;
	
	// исполнители
	Для Каждого Исполнитель Из ОбъектБизнесПроцесс.Исполнители Цикл
		
		performer = СоздатьОбъектXDTO("DMBusinessProcessApprovalParticipant");
		basePerformer = ПодготовитьИсполнителя(Исполнитель, "Исполнитель", "Исполнитель", "СрокИсполнения");
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];
			КонецЕсли;
		КонецЦикла;
		performer.ApprovalOrder = СоздатьОбъектXDTO("DMApprovalOrder");
		performer.ApprovalOrder.name = Строка(Исполнитель.ПорядокСогласования);
		performer.ApprovalOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(Исполнитель.ПорядокСогласования);
		Ответ.performers.Добавить(performer);
		
		// Укажем для старых версий клиентов общий срок процесса как максимальный из сроков отдельных исполнителей.
		Если Исполнитель.СрокИсполненияДни * 24 + Исполнитель.СрокИсполненияЧасы >
				Ответ.durationDays * 24 + Ответ.durationHours Тогда
			
			Ответ.durationDays = Исполнитель.СрокИсполненияДни;
			Ответ.durationHours = Исполнитель.СрокИсполненияЧасы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПередатьСрокОбработкиРезультата(ОбъектБизнесПроцесс, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает по-старому заполненный объект XDTO по бизнес-процессу Согласование
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Согласование
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessApproval_1
//
Функция ПолучитьБПСогласование_1_2_1_11(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessApproval_1.2.1.11");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	
	// общая шапка бизнес-процесса
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	
	// особенная шапка Согласования
	Ответ.approvalType = СоздатьОбъектXDTO("DMBusinessProcessRoutingType");
	Ответ.approvalType.name = Строка(ОбъектБизнесПроцесс.ВариантСогласования);
	Ответ.approvalType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
		ОбъектБизнесПроцесс.ВариантСогласования);
	Ответ.durationDays = ОбъектБизнесПроцесс.СрокИсполнения;
	Ответ.durationHours = ОбъектБизнесПроцесс.СрокИсполненияЧас;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	// исполнители
	Для Каждого Исполнитель Из ОбъектБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessApprovalParticipant_1.2.1.11");
		basePerformer = ПодготовитьИсполнителя(Исполнитель, "Исполнитель", "Исполнитель");
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
			КонецЕсли;
		КонецЦикла;
		performer.ApprovalOrder = СоздатьОбъектXDTO("DMTaskExecutionOrder");
		performer.ApprovalOrder.name = Строка(Исполнитель.ПорядокСогласования);
		performer.ApprovalOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Исполнитель.ПорядокСогласования);
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Утверждение
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.Утверждение
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessConfirmation
//
Функция ПолучитьБПУтверждение(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessConfirmation");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	Ответ.useDigitalSign = ОбъектБизнесПроцесс.ПодписыватьЭП;
	Ответ.executionResult = СоздатьОбъектXDTO("DMConfirmationResult");
	Ответ.executionResult.name = Строка(ОбъектБизнесПроцесс.РезультатУтверждения);
	Ответ.executionResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
		ОбъектБизнесПроцесс.РезультатУтверждения);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	Ответ.processType = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProcessConfirmationType");
	Ответ.processType.name = Строка(ОбъектБизнесПроцесс.ВидПроцесса);
	Ответ.processType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.ВидПроцесса);
	ПередатьСрокОбработкиРезультата(ОбъектБизнесПроцесс, Ответ);
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ.digitalSignEnabled = Константы.ИспользоватьЭлектронныеПодписи.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПередатьЗначениеОдногоИсполнителя(ОбъектБизнесПроцесс, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу ОбработкаВходящегоДокумента
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.ОбработкаВходящегоДокумента
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessIncomingDocumentProcessing
//
Функция ПолучитьБПОбработкаВходящегоДокумента(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessIncomingDocumentProcessing");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"considerationTemplate",
		ОбъектБизнесПроцесс.ШаблонРассмотрения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"performanceAcquaintanceTemplate",
		ОбъектБизнесПроцесс.ШаблонИсполненияОзнакомления);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"orderTemplate",
		ОбъектБизнесПроцесс.ШаблонПоручения);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу ОбработкаВнутреннегоДокумента
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessInternalDocumentProcessing
//
Функция ПолучитьБПОбработкаВнутреннегоДокумента(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessInternalDocumentProcessing");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"approvalTemplate",
		ОбъектБизнесПроцесс.ШаблонСогласования);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"confirmationTemplate",
		ОбъектБизнесПроцесс.ШаблонУтверждения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"registrationTemplate",
		ОбъектБизнесПроцесс.ШаблонРегистрации);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"considerationTemplate",
		ОбъектБизнесПроцесс.ШаблонРассмотрения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"performanceAcquaintanceTemplate",
		ОбъектБизнесПроцесс.ШаблонИсполненияОзнакомления);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"orderTemplate",
		ОбъектБизнесПроцесс.ШаблонПоручения);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу ОбработкаИсходящегоДокумента
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.ОбработкаИсходящегоДокумента
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessOutgoingDocumentProcessing
//
Функция ПолучитьБПОбработкаИсходящегоДокумента(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessOutgoingDocumentProcessing");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"approvalTemplate",
		ОбъектБизнесПроцесс.ШаблонСогласования);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"confirmationTemplate",
		ОбъектБизнесПроцесс.ШаблонУтверждения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ,
		"registrationTemplate",
		ОбъектБизнесПроцесс.ШаблонРегистрации);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу РешениеВопросовВыполненияЗадач
//
// Параметры:
//   ОбъектБизнесПроцесс - БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач
//   ПолучитьПредметы - Булево - Истина, если нужно получить значения предметов бизнес-процесса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessIssuesSolution
//
Функция ПолучитьБПРешениеВопросовВыполненияЗадач(ОбъектБизнесПроцесс, ПолучитьПредметы = Истина)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessIssuesSolution");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(ОбъектБизнесПроцесс.Ссылка);
	Ответ.name = ОбъектБизнесПроцесс.Наименование;
	
	// общая шапка бизнес-процесса
	ПередатьОбщиеРеквизитыБизнесПроцесса(ОбъектБизнесПроцесс, Ответ, ПолучитьПредметы);
	
	Ответ.initiator = СоздатьОбъектXDTO("DMUser");
	Ответ.initiator.name = Строка(ОбъектБизнесПроцесс.ИнициаторПроцесса);
	Ответ.initiator.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектБизнесПроцесс.ИнициаторПроцесса);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБПРешениеВопросовВыполненияЗадач(Ответ,
		ОбъектБизнесПроцесс,
		ПолучитьПредметы);
	
	Ответ.dueDate = ОбъектБизнесПроцесс.СрокИсполнения;
	Ответ.perfomanceHistory = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
		ОбъектБизнесПроцесс.Ссылка);
	
	// присоединенные файлы
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВладелецФайла", ОбъектБизнесПроцесс.Ссылка);
	МассивОбъектовДО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	НаборКолонокФайлов = Новый Массив;
	НаборКолонокФайлов.Добавить("objectId");
	НаборКолонокФайлов.Добавить("name");
	НаборКолонокФайлов.Добавить("size");
	НаборКолонокФайлов.Добавить("modificationDateUniversal");
	НаборКолонокФайлов.Добавить("extension");
	НаборКолонокФайлов.Добавить("editingUser");
	
	МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
	ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(Ответ, МассивФайлов, НаборКолонокФайлов);
	
	Возврат Ответ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ЗАПИСЬ БИЗНЕС-ПРОЦЕССОВ ОТДЕЛЬНЫХ ТИПОВ

// Записывает по переданному объекту XDTO процесс Исполнение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessPerformance
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Исполнение - ссылка на записанный процесс
//
Функция ЗаписатьБПИсполнение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Исполнение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	Если Объект.Установлено("performanceType") Тогда
		БПОбъект.ВариантИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.performanceType.objectId);
	Иначе
		БПОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КонецЕсли;
	
	Если СоздатьНовый Тогда
		БПОбъект.КоличествоИтераций = 1;
	КонецЕсли;
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// Старые версии клиента устанавливают только dueDate и personalDueDate.
		Если Не Исполнитель.Установлено("dueDateSpecificationOption") Тогда
			
			Если Исполнитель.Установлено("personalDueDate") Тогда
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				НоваяСтрока.СрокИсполнения = Исполнитель.personalDueDate;
			
			ИначеЕсли Объект.Установлено("dueDate") Тогда
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				НоваяСтрока.СрокИсполнения = Объект.dueDate;
			КонецЕсли;
			
		КонецЕсли;
			
		// Специфика исполнителя в Исполнении.
		НоваяСтрока.Описание = Исполнитель.personalDescription;
		НоваяСтрока.НаименованиеЗадачи = Исполнитель.personalTaskName;
		НоваяСтрока.Ответственный = Исполнитель.responsible;
		Если Исполнитель.Установлено("performanceOrder") Тогда
			НоваяСтрока.ПорядокИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.performanceOrder.objectId);
		КонецЕсли;
		Если Исполнитель.Установлено("task") Тогда
			НоваяСтрока.ЗадачаИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.task.objectId);
		КонецЕсли;
		Если Исполнитель.Установлено("passed") Тогда
			НоваяСтрока.Пройден = Исполнитель.passed;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяющий
	УстановитьЗначениеПроверяющего(БПОбъект, Объект);
	
	// Контролер
	УстановитьЗначениеКонтролера(БПОбъект, Объект);
		
	// Рассчитаем общий срок исполнения процесса.
	Если СоздатьНовый Тогда
		СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса(БПОбъект);
	Иначе
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(
			БПОбъект, БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить);
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = БПОбъект.НомерИтерации;
		СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(
			БПОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Исполнение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessPerformance_1.2.1.11
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Исполнение - ссылка на записанный процесс
//
Функция ЗаписатьБПИсполнение_1_2_1_11(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Исполнение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ВариантИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.performanceType.objectId);
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// специфика исполнителя в Исполнении
		НоваяСтрока.СрокИсполнения = ?(Исполнитель.personalDueDate = Неопределено, Дата(1, 1, 1), Исполнитель.personalDueDate);
		НоваяСтрока.Описание = Исполнитель.personalDescription;
		НоваяСтрока.НаименованиеЗадачи = Исполнитель.personalTaskName;
		НоваяСтрока.Ответственный = Исполнитель.responsible;
		НоваяСтрока.ПорядокИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.performanceOrder.objectId);

	КонецЦикла;
	
	// Проверяющий
	УстановитьЗначениеПроверяющего(БПОбъект, Объект);
	
	// Контролер
	УстановитьЗначениеКонтролера(БПОбъект, Объект);
		
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Ознакомление (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessAcquaintance
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Ознакомление - ссылка на записанный процесс
//
Функция ЗаписатьБПОзнакомление(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Ознакомление", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		Если Не Исполнитель.Установлено("dueDateSpecificationOption")
			И Объект.Установлено("dueDate") Тогда
			НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			НоваяСтрока.СрокИсполнения = Объект.dueDate;
		КонецЕсли;
		
	КонецЦикла;
				
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Поручение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessOrder
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Поручение - ссылка на записанный процесс
//
Функция ЗаписатьБППоручение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Поручение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	// Исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);	
	
	// Проверяющий
	УстановитьЗначениеПроверяющего(БПОбъект, Объект);
	
	// Контролер
	УстановитьЗначениеКонтролера(БПОбъект, Объект);
				
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Рассмотрение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessConsideration
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Рассмотрение - ссылка на записанный процесс
//
Функция ЗаписатьБПРассмотрение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Рассмотрение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.Резолюция = Объект.resolution;
	УстановитьСрокОбработкиРезультата(БПОбъект, Объект);
	
	Если СоздатьНовый Тогда
		БПОбъект.КоличествоИтерацийИсполнения = 1;
	КонецЕсли;
	
	// Исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Регистрация (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessRegistration
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Регистрация - ссылка на записанный процесс
//
Функция ЗаписатьБПРегистрация(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Регистрация", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	УстановитьСрокОбработкиРезультата(БПОбъект, Объект);
	
	Если СоздатьНовый Тогда
		БПОбъект.КоличествоИтераций = 1;
	КонецЕсли;
	
	// Исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);	
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Согласование (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessApproval
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Согласование - ссылка на записанный процесс
//
Функция ЗаписатьБПСогласование(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Согласование", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ВариантСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.approvalType.objectId);
	УстановитьСрокОбработкиРезультата(БПОбъект, Объект);
	
	Если СоздатьНовый Тогда
		БПОбъект.КоличествоИтераций = 1;
	КонецЕсли;
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// Получим срок исполнения, указанный клиентами старых версий.
		Если Не Исполнитель.Установлено("dueDateSpecificationOption")
			И (ЗначениеЗаполнено(Объект.durationDays)
				Или ЗначениеЗаполнено(Объект.durationHours)) Тогда
				
			НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
			НоваяСтрока.СрокИсполненияДни = Объект.durationDays;
			НоваяСтрока.СрокИсполненияЧасы = Объект.durationHours;
			НоваяСтрока.СрокИсполненияМинуты = 0;
			
			ПараметрыДлительности = СрокиИсполненияПроцессов.
				ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
			
			ПараметрыДлительности.Дни = Число(Объект.durationDays);
			ПараметрыДлительности.Часы = Число(Объект.durationHours);
			ПараметрыДлительности.Минуты = 0;
			
			Если СоздатьНовый Тогда
				ПараметрыДлительности.ДатаОтсчета = ТекущаяДатаСеанса();
			Иначе
				ПараметрыДлительности.ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(
					БПОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
			КонецЕсли;
				
			Если ТипЗнч(НоваяСтрока.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				ПараметрыДлительности.ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(НоваяСтрока.Исполнитель);
			КонецЕсли;
			
			НоваяСтрока.СрокИсполнения = 
				СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
			
		КонецЕсли;
		
		// специфика исполнителя в Согласовании
		НоваяСтрока.ПорядокСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.approvalOrder.objectId);
		
	КонецЦикла;
	
	// Установим срок обработки результата для случая, когда процесс создается старым клиентом.
	Если Не Объект.Установлено("resultProcessingDueDateSpecificationOption") Тогда
			
		БПОбъект.ВариантУстановкиСрокаОбработкиРезультатов = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		БПОбъект.СрокОбработкиРезультатовДни = 0;
		БПОбъект.СрокОбработкиРезультатовЧасы = 0;
		БПОбъект.СрокОбработкиРезультатовМинуты = 0;
		
		ПараметрыДлительности = СрокиИсполненияПроцессов.
			ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
			
		ПараметрыДлительности.Дни = БПОбъект.СрокОбработкиРезультатовДни;
		ПараметрыДлительности.Часы = БПОбъект.СрокОбработкиРезультатовЧасы;
		ПараметрыДлительности.Минуты = 0;
		
		Если ЗначениеЗаполнено(БПОбъект.Автор) = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыДлительности.ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(БПОбъект.Автор);
		КонецЕсли;
		
		Если СоздатьНовый Тогда
			ПараметрыДлительности.ДатаОтсчета = ТекущаяДатаСеанса();
		Иначе
			ПараметрыДлительности.ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(
				БПОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
		КонецЕсли;
		
		БПОбъект.СрокОбработкиРезультатов = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
		
	КонецЕсли;
	
	// Рассчитаем общий срок исполнения процесса.
	Если СоздатьНовый Тогда
		СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса(БПОбъект);
	Иначе
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(
			БПОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = БПОбъект.НомерИтерации;
		СрокиИсполненияПроцессов.РассчитатьСрокиСогласования(
			БПОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Согласование (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessApproval_1.2.1.11
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Согласование - ссылка на записанный процесс
//
Функция ЗаписатьБПСогласование_1_2_1_11(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Согласование", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ВариантСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.approvalType.objectId);
	БПОбъект.СрокИсполнения = Объект.durationDays;
	БПОбъект.СрокИсполненияЧас = Объект.durationHours;
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// специфика исполнителя в Согласовании
		НоваяСтрока.ПорядокСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.approvalOrder.objectId);
	КонецЦикла;
				
			
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Утверждение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessConfirmation
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Утверждение - ссылка на записанный процесс
//
Функция ЗаписатьБПУтверждение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Утверждение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ПодписыватьЭП = Объект.useDigitalSign;
	УстановитьСрокОбработкиРезультата(БПОбъект, Объект);
	Если Объект.Установлено("processType") Тогда
		БПОбъект.ВидПроцесса = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.processType.objectId);
	КонецЕсли;
	
	Если СоздатьНовый Тогда
		БПОбъект.КоличествоИтераций = 1;
	КонецЕсли;
	
	// исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс ОбработкаВнутреннегоДокумента (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessInternalDocumentProcessing
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента - ссылка на записанный процесс
//
Функция ЗаписатьБПОбработкаВнутреннегоДокумента(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("ОбработкаВнутреннегоДокумента", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
		
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонСогласования, Объект, "approvalTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонУтверждения, Объект, "confirmationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонРегистрации, Объект, "registrationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонРассмотрения, Объект, "considerationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонИсполненияОзнакомления, Объект, "performanceAcquaintanceTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонПоручения, Объект, "orderTemplate");			
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс ОбработкаВходящегоДокумента (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessIncomingDocumentProcessing
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.ОбработкаВходящегоДокумента - ссылка на записанный процесс
//
Функция ЗаписатьБПОбработкаВходящегоДокумента(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("ОбработкаВходящегоДокумента", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
		
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонРассмотрения, Объект, "considerationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонИсполненияОзнакомления, Объект, "performanceAcquaintanceTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонПоручения, Объект, "orderTemplate");		
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс ОбработкаИсходящегоДокумента (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessOutgoingDocumentProcessing
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.ОбработкаИсходящегоДокумента - ссылка на записанный процесс
//
Функция ЗаписатьБПОбработкаИсходящегоДокумента(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("ОбработкаИсходящегоДокумента", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
		
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонСогласования, Объект, "approvalTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонУтверждения, Объект, "confirmationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БПОбъект.ШаблонРегистрации, Объект, "registrationTemplate");
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
		
КонецФункции

// Записывает по переданному объекту XDTO процесс РешениеВопросовВыполненияЗадач (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessIssuesSolution
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
//
// Возвращаемое значение:
//   БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - ссылка на записанный процесс
//
Функция ЗаписатьБПРешениеВопросовВыполненияЗадач(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("РешениеВопросовВыполненияЗадач", Объект, СоздатьНовый);
	ОбработатьИзменениеПредметовРешениеВопросов(БПОбъект.Ссылка, Объект);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ПредметРассмотрения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.issueTask.ObjectID);
	Если Объект.Установлено("newDueDate") Тогда
		БПОбъект.НовыйСрок = Объект.newDueDate;
	КонецЕсли;
	БПОбъект.ИнициаторПроцесса = БПОбъект.ПредметРассмотрения.Автор;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаписатьБПРешениеВопросовВыполненияЗадач(БПОбъект, Объект, СоздатьНовый);
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ДЕЙСТВИЯ С БИЗНЕС-ПРОЦЕССАМИ

// Рекурсивно заполняет объект XDTO по строкам дерева задач
//
// Параметры:
//   СтрокиОдногоУровня - КоллекцияСтрокДереваЗначений, источник данных
//   ОдинОбъектXDTO - ОбъектXDTO типа DMGetTasksTreeResponse - заполняемый объект
//
Процедура ПостроитьИзДереваDMGetTaskListResponse(СтрокиОдногоУровня, ОдинОбъектXDTO)
	
	Для Каждого СтрокаУровня Из СтрокиОдногоУровня Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУровня.Ссылка) Или СокрЛП(СтрокаУровня.Ссылка.ВерсияДанных) = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУровня.Ссылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			БП = СоздатьОбъектXDTO("DMBusinessProcess");
			БП.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаУровня.Ссылка);
			БП.name = СтрокаУровня.Ссылка.Наименование;
			
			ПередатьЗначениеАвтора(СтрокаУровня.Ссылка, БП);
			ПередатьЗначениеВажности(СтрокаУровня.Ссылка, БП);
			
			БП.beginDate = СтрокаУровня.Ссылка.ДатаНачала;
			БП.endDate = СтрокаУровня.Ссылка.ДатаЗавершения;
			БП.started = СтрокаУровня.Ссылка.Стартован;
			БП.completed = СтрокаУровня.Ссылка.Завершен;
			БП.completionMark = СтрокаУровня.РезультатЗавершения;
			
			ПередатьЗначенияПредметовБизнесПроцессаЗадачи(СтрокаУровня.Ссылка, БП);
			
			Если СтрокаУровня.Ссылка.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
				БП.description = СтрокаУровня.Ссылка.Описание; 
			КонецЕсли;
			Если СтрокаУровня.Ссылка.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда
				Если ТипЗнч(СтрокаУровня.Ссылка.СрокИсполнения) = Тип("Число") Тогда
					БП.dueDate = СтрокаУровня.Ссылка.СрокИсполненияДатой;
				Иначе
					БП.dueDate = СтрокаУровня.Ссылка.СрокИсполнения;
				КонецЕсли;
			КонецЕсли;
			
			ПостроитьИзДереваDMGetTaskListResponse(СтрокаУровня.Строки, БП);
			ОдинОбъектXDTO.BusinessProcesses.Добавить(БП);
			
		Иначе
			
			Задача = СоздатьОбъектXDTO("DMBusinessProcessTask");
			ЗаполнитьОсновныеСвойстваXDTOЗадачи(Задача, СтрокаУровня.Ссылка, Ложь, Ложь);
			Задача.executionMark = СтрокаУровня.РезультатЗавершения;
			ПостроитьИзДереваDMGetTaskListResponse(СтрокаУровня.Строки, Задача);
			ОдинОбъектXDTO.tasks.Добавить(Задача);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно дополняет дерево бизнес-процессов задачами указанного процесса
//
// Параметры:
//   Дерево - ДеревоЗначений - дерево к заполнению
//   БизнесПроцессСсылка - БизнесПроцессСсылка - процесс, задачи которого требуется получить
//   ЗадачаСсылка - устарел
//
Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(БизнесПроцессСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСостоянияЗадач();
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&Условие",
		"Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НайденнаяВетвь = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.Ссылка, "Ссылка", Истина);
		Если НайденнаяВетвь <> Неопределено Тогда
			Дерево.Строки.Удалить(НайденнаяВетвь);
		КонецЕсли;
		
		Строка = Неопределено;
		Если Ветвь = Неопределено Тогда
			Строка = Дерево.Строки.Добавить();
		Иначе
			Строка = Ветвь.Строки.Добавить();
		КонецЕсли;
		
		Строка.ID = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
		
		ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно дополняет дерево бизнес-процессами, подчиненными указанной задаче
//
// Параметры:
//   Дерево - ДеревоЗначений - дерево к заполнению
//   ЗадачаСсылка - ЗадачаСсылка.ЗадачиИсполнителя - задача, процессы которой следует получить
//
Процедура ДобавитьПодчиненныеБизнесПроцессы(Дерево, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(ЗадачаСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	МассивТекстаЗапроса = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если МассивТекстаЗапроса.Количество() > 0 Тогда
			МассивТекстаЗапроса.Добавить("
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|");
			МассивТекстаЗапроса.Добавить("
				|ВЫБРАТЬ
				|");
		Иначе
			МассивТекстаЗапроса.Добавить(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|");
		КонецЕсли;
		МассивТекстаЗапроса.Добавить(
			"	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Дата,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА ""Stopped""
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
			|			ТОГДА ""Interrupted""
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
			|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ""ReadyToStart""
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
			|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ""StartCanceled""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА ""ExecutedPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА ""ExecutedAlmostPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА ""ExecutedNegative""
			|		ИНАЧЕ
			|			ВЫБОР
			|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
			|					ТОГДА ""ExecutedNeutral""
			|				ИНАЧЕ ""NotExecuted""
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения
			|ИЗ
			|	");
		МассивТекстаЗапроса.Добавить(МетаданныеБизнесПроцесса.ПолноеИмя());
		МассивТекстаЗапроса.Добавить(
			" КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
			|		ПО БизнесПроцессы.Ссылка = ПроцессыДляЗапуска.БизнесПроцесс
			|ГДЕ
			|	%ОтборВедущаяЗадача%
			|	И БизнесПроцессы.ПометкаУдаления = Ложь");
			
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата");
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	ОбработкаЗапросовXDTOПереопределяемый.УстановитьУсловиеОтбораВедущейЗадачи(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = Ветвь.Строки.Добавить();
		Строка.ID = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
		
		ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, ЗадачаСсылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Запускает процесс по ObjectId
//
// Параметры:
//   ObjectIDБизнесПроцесса - ОбъектXDTO типа ObjectId, описывающий бизнес-процесс
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcess, частично заполненный и соответствующий запущенному процессу
// 
Функция ЗапуститьБизнесПроцесс(ObjectIDБизнесПроцесса)
	
	СсылкаНаБП = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ObjectIDБизнесПроцесса);
	БПОбъект = СсылкаНаБП.ПолучитьОбъект();
	ПроверитьПравильностьЗаполненияБизнесПроцесса(БПОбъект);
	
	Если ТипЗнч(БПОбъект.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БПОбъект);
		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Результат = РаботаСВизамиСогласования.ПроверитьПересечениеВизИИсполнителей(Предмет, БПОбъект.Исполнители);
			Если Результат = "нестартовать" Тогда
				ТекстОшибки = НСтр("ru = 'Невозможно стартовать процесс, так как некоторые из согласующих лиц участвуют в других
					|незавершенных процессах согласования по предмету ""%1"".'");
				ВызватьИсключение СтрШаблон(ТекстОшибки, Предмет);
			ИначеЕсли Результат = "пересогласовать" Тогда 
				РаботаСВизамиСогласования.ПоместитьЗакрытиеВизыДокументаВИсторию(Предмет);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтартоватьФоново = Не ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И ПолучитьФункциональнуюОпцию("ИспользоватьФоновыйСтартПроцессов");
	Если СтартоватьФоново Тогда
		РегистрыСведений.ПроцессыДляЗапуска.ДобавитьПроцессДляФоновогоСтарта(БПОбъект.Ссылка);
	Иначе
		СтартПроцессовСервер.СтартоватьПроцесс(БПОбъект);
	КонецЕсли;
	
	Объект = СоздатьОбъектXDTO("DMBusinessProcess");
	Объект.name = СсылкаНаБП.Наименование;
	Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБП);
	
	Объект.started = Истина;
	Объект.beginDate = БПОбъект.ДатаНачала;
	
	Возврат Объект;
	
КонецФункции

// Возвращает бизнес-процессы, отобранные по заданным условиям
//
// Параметры:
//   Query - ОбъектXDTO типа DMGetTasksTreeQuery, описывающий условия отбора
// Возвращаемое значение:
//   Массив - массив структур, описывающих найденные процессы, со свойствами
//     * Ссылка - БизнесПроцессСсылка - ссылка на процесс
//     * Дата - Дата - дата процесса
//     * РезультатЗавершения - Строка - результат завершения процесса
//
Функция ПолучитьБизнесПроцессыПоЗапросу(Query)
	
	ВключатьВыполненные = Истина;
	Если Query.Установлено("withExecuted") Тогда
		ВключатьВыполненные = Query.withExecuted;
	КонецЕсли;
	ВключатьПрерванные = Истина;
	ВключатьОстановленные = Истина;
	
	МассивБизнесПроцессов = Новый Массив;
	
	МассивПредметовБизнесПроцессов = Новый Массив;
	Для Каждого ВнешнийОбъект Из Query.externalTarget Цикл
		МассивВнутреннихОбъектов = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.
			ПолучитьОбъектыДОПоВнешнемуОбъекту(ВнешнийОбъект.id, ВнешнийОбъект.type);
		Для Каждого ВнутреннийОбъект Из МассивВнутреннихОбъектов Цикл
			Если МассивПредметовБизнесПроцессов.Найти(ВнутреннийОбъект) = Неопределено 
				И ВнутреннийОбъект <> Неопределено
				И НЕ ВнутреннийОбъект.Ссылка.Пустая() Тогда
				МассивПредметовБизнесПроцессов.Добавить(ВнутреннийОбъект.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивАвторовБизнесПроцессов = Новый Массив;
	Для Каждого ПользовательАвтор Из Query.author Цикл
		Ссылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПользовательАвтор.objectId.id));
		Если НЕ Ссылка.Пустая() 
			И МассивАвторовБизнесПроцессов.Найти(Ссылка) = Неопределено Тогда
			МассивАвторовБизнесПроцессов.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Query.businessProcess.Количество() > 0 Тогда
		МассивБизнесПроцессовДляЗапроса = Новый Массив;
		ТипыПроцессов = Новый Массив;
		Для Каждого БизнесПроцесс из Query.businessProcess Цикл
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(БизнесПроцесс.Objectid);
			ИмяТипа = Ссылка.Метаданные().ПолноеИмя();
			Если ТипыПроцессов.Найти(ИмяТипа) = Неопределено Тогда
				ТипыПроцессов.Добавить(ИмяТипа);
			КонецЕсли;
			МассивБизнесПроцессовДляЗапроса.Добавить(Ссылка);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		МассивТекстаЗапроса = Новый Массив;
		
		Для Каждого ИмяТипа Из ТипыПроцессов Цикл
			
			Если МассивТекстаЗапроса.Количество() > 0 Тогда
				МассивТекстаЗапроса.Добавить("
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|");
				МассивТекстаЗапроса.Добавить("
					|ВЫБРАТЬ
					|");
			Иначе
				МассивТекстаЗапроса.Добавить(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|");
			КонецЕсли;
			МассивТекстаЗапроса.Добавить(
				"	БизнесПроцессы.Ссылка,
				|	БизнесПроцессы.Дата,
				|	ВЫБОР
				|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
				|			ТОГДА ""Stopped""
				|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
				|			ТОГДА ""Interrupted""
				|		КОГДА НЕ БизнесПроцессы.Стартован
				|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
				|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
				|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ""ReadyToStart""
				|		КОГДА НЕ БизнесПроцессы.Стартован
				|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
				|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
				|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ""StartCanceled""
				|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
				|			ТОГДА ""ExecutedPositive""
				|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
				|			ТОГДА ""ExecutedAlmostPositive""
				|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
				|			ТОГДА ""ExecutedNegative""
				|		ИНАЧЕ
				|			ВЫБОР
				|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
				|					ТОГДА ""ExecutedNeutral""
				|				ИНАЧЕ ""NotExecuted""
				|			КОНЕЦ
				|	КОНЕЦ КАК РезультатЗавершения
				|ИЗ
				|	");
			МассивТекстаЗапроса.Добавить(ИмяТипа);
			МассивТекстаЗапроса.Добавить(
				" КАК БизнесПроцессы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
				|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
				|		ПО БизнесПроцессы.Ссылка = ПроцессыДляЗапуска.БизнесПроцесс
				|ГДЕ
				|	БизнесПроцессы.Ссылка В (&БизнесПроцессы)");
				
		КонецЦикла;
		
		МассивТекстаЗапроса.Добавить("
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата");
		
		Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
		Запрос.УстановитьПараметр("БизнесПроцессы", МассивБизнесПроцессовДляЗапроса);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураПроцесса = Новый Структура("Ссылка, Дата, РезультатЗавершения");
			ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ВыборкаДетальныеЗаписи);
			
			ЭлементПрисутствует = Ложь;
			Для Каждого Элемент Из МассивБизнесПроцессов Цикл
				Если Элемент.Ссылка = ВыборкаДетальныеЗаписи.Ссылка Тогда
					ЭлементПрисутствует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЭлементПрисутствует Тогда
				МассивБизнесПроцессов.Добавить(СтруктураПроцесса);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Предмет из Query.target Цикл
		СсылкаНаСвязанный = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Предмет.Objectid);
		МассивПредметовБизнесПроцессов.Добавить(СсылкаНаСвязанный);
	КонецЦикла;
	
	Если МассивПредметовБизнесПроцессов.Количество() = 0
		И МассивАвторовБизнесПроцессов.Количество() = 0 Тогда
		Возврат МассивБизнесПроцессов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МассивТекстаЗапроса = Новый Массив;
	
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если МассивТекстаЗапроса.Количество() > 0 Тогда
			МассивТекстаЗапроса.Добавить("
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|");
			МассивТекстаЗапроса.Добавить("
				|ВЫБРАТЬ
				|");
		Иначе
			МассивТекстаЗапроса.Добавить(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|");
		КонецЕсли;
		МассивТекстаЗапроса.Добавить(
			"	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Дата,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА ""Stopped""
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
			|			ТОГДА ""Interrupted""
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
			|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ""ReadyToStart""
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
			|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ""StartCanceled""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА ""ExecutedPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА ""ExecutedAlmostPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА ""ExecutedNegative""
			|		ИНАЧЕ
			|			ВЫБОР
			|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
			|					ТОГДА ""ExecutedNeutral""
			|				ИНАЧЕ ""NotExecuted""
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения
			|ИЗ
			|	");
		МассивТекстаЗапроса.Добавить(ТипБизнесПроцесса.ПолноеИмя());
		МассивТекстаЗапроса.Добавить(
			" КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
			|		ПО БизнесПроцессы.Ссылка = ПроцессыДляЗапуска.БизнесПроцесс
			|ГДЕ
			|	НЕ БизнесПроцессы.ПометкаУдаления
			|	%Выполнен%%Прерван%%Отложен%%Предмет%%Автор%
			|	И %ОтборВедущаяЗадача%");
			
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата");
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	
	ОбработкаЗапросовXDTOПереопределяемый.УстановитьУсловиеОтбораВедущейЗадачиПоПустойСсылке(Запрос.Текст);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Выполнен%",
		?(НЕ ВключатьВыполненные,
			" И (НЕ БизнесПроцессы.Завершен)",
			""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Прерван%",
		?(НЕ ВключатьПрерванные,
			" И (НЕ БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))",
			""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Отложен%",
		?(НЕ ВключатьОстановленные,
			" И (НЕ БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен))",
			""));
	Если МассивПредметовБизнесПроцессов.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Предмет%", " И БизнесПроцессы.Предметы.Предмет В(&Предмет)");
		Запрос.УстановитьПараметр("Предмет", МассивПредметовБизнесПроцессов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Предмет%", "");
	КонецЕсли;
	Если МассивАвторовБизнесПроцессов.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Автор%", " И БизнесПроцессы.Автор В(&Автор)");
		Запрос.УстановитьПараметр("Автор", МассивАвторовБизнесПроцессов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Автор%", "");
	КонецЕсли;
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПроцесса = Новый Структура("Ссылка, Дата, РезультатЗавершения");
		ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ВыборкаДетальныеЗаписи);
		
		ЭлементПрисутствует = Ложь;
		Для Каждого Элемент Из МассивБизнесПроцессов Цикл
			Если Элемент.Ссылка = ВыборкаДетальныеЗаписи.Ссылка Тогда
				ЭлементПрисутствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭлементПрисутствует Тогда
			МассивБизнесПроцессов.Добавить(СтруктураПроцесса);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивБизнесПроцессов;
	
КонецФункции

// Возвращает XDTO объект соответствующего бизнес-процесса.
//
// Параметры:
//   ТипЗначения - Тип - тип ссылки бизнес-процесса.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcess<...>
//
Функция ПолучитьОбъектXDTOБизнесПроцессаПоТипу(ТипЗначения)
	
	Результат = Неопределено;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриПолученииОбъектаXDTOБизнесПроцессаПоТипу(ТипЗначения, Результат);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗначения = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessAcquaintance");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessApproval");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessConfirmation");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessConsideration");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessIssuesSolution");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessOrder");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessPerformance");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessRegistration");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessIncomingDocumentProcessing");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessInternalDocumentProcessing");
		
	ИначеЕсли ТипЗначения = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
		Результат = СоздатьОбъектXDTO("DMBusinessProcessOutgoingDocumentProcessing");
		
	Иначе
		Результат = СоздатьОбъектXDTO("DMBusinessProcess");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТДЕЛЬНЫХ ОБЪЕКТОВ XDTO ПО ДАННЫМ ДО

// Передает значение важности процесса или задачи
//
// Параметры:
//   Объект - БизнесПроцессОбъект, БизнесПроцессСсылка, ЗадачаОбъект, ЗадачаСсылка - источник данных
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеВажности(Объект, ОбъектXDTO) Экспорт
	
	ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Объект.Ссылка);
	Если Найти(ИмяТипа, "Task") > 0 Тогда
		ОбъектXDTO.importance = СоздатьОбъектXDTO("DMBusinessProcessTaskImportance");
	Иначе
		ОбъектXDTO.importance = СоздатьОбъектXDTO("DMBusinessProcessImportance");
	КонецЕсли;
	
	ОбъектXDTO.importance.name = ?(ЗначениеЗаполнено(Объект.Важность), Строка(Объект.Важность), "");
	ОбъектXDTO.importance.objectId = СоздатьОбъектXDTO("DMObjectID");
	Если ЗначениеЗаполнено(Объект.Важность) Тогда
		ОбъектXDTO.importance.objectId.id = ОбщегоНазначения.ИмяЗначенияПеречисления(Объект.Важность);
	Иначе
		ОбъектXDTO.importance.objectId.id = "";
	КонецЕсли;
	ОбъектXDTO.importance.objectId.type = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Объект.Важность);
	
КонецПроцедуры

// Передает значение состояния выполнения задачи
//
// Параметры:
//   Ссылка - ЗадачаСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеСостоянияВыполнения(Ссылка, Объект)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|			ТОГДА ""ReadyToExecute""
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
		|			ТОГДА ""ExecutionCanceled""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СостояниеВыполнения
		|ИЗ
		|	РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|ГДЕ
		|	ЗадачиДляВыполнения.Задача = &Задача");
	Запрос.УстановитьПараметр("Задача", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.СостояниеВыполнения <> "" Тогда
		Объект.ExecutionMark = Выборка.СостояниеВыполнения;
	КонецЕсли;
	
КонецПроцедуры

// Передает значение состояния бизнес-процесса
//
// Параметры:
//   Ссылка - БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеСостоянияБизнесПроцесса(Ссылка, Объект)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА ""Stopped""
		|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА ""Interrupted""
		|		КОГДА НЕ БизнесПроцессы.Стартован
		|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""ReadyToStart""
		|		КОГДА НЕ БизнесПроцессы.Стартован
		|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""StartCanceled""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА ""ExecutedPositive""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА ""ExecutedAlmostPositive""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА ""ExecutedNegative""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
		|					ТОГДА ""ExecutedNeutral""
		|				ИНАЧЕ ""NotExecuted""
		|			КОНЕЦ
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК БизнесПроцессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		|		ПО БизнесПроцессы.Ссылка = ПроцессыДляЗапуска.БизнесПроцесс
		|ГДЕ
		|	БизнесПроцессы.Ссылка = &БизнесПроцесс");
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Состояние <> "" Тогда
		Объект.completionMark = Выборка.Состояние;
	КонецЕсли;
	
КонецПроцедуры

// Передает значение состояния процесса для запуска
//
// Параметры:
//   Ссылка - БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеСостоянияПроцессаДляЗапуска(Ссылка, Объект)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""ReadyToStart""
		|		КОГДА ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""StartCanceled""
		|		КОГДА ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""ReadyToExecute""
		|		КОГДА ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""ExecutionCanceled""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		|ГДЕ
		|	ПроцессыДляЗапуска.БизнесПроцесс = &БизнесПроцесс");
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Состояние <> "" Тогда
		Объект.completionMark = Выборка.Состояние;
	КонецЕсли;
	
КонецПроцедуры

// Передает значение автора процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка, ЗадачаОбъект, ЗадачаСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеАвтора(Ссылка, Объект)
	
	Объект.author = СоздатьОбъектXDTO("DMUser");
	Объект.author.name = Строка(Ссылка.Автор);
	Объект.author.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка.Автор);
	
КонецПроцедуры

// Передает значение проверяющего процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеПроверяющего(Ссылка, Объект)
	
	Объект.verifier = ПодготовитьИсполнителя(Ссылка, "Проверяющий", "Проверяющий", "СрокОбработкиРезультатов");
	
КонецПроцедуры

// Передает значение одного исполнителя процесса.
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеОдногоИсполнителя(Ссылка, Объект)
	
	Объект.performer = ПодготовитьИсполнителя(Ссылка, "Исполнитель", "Исполнитель", "СрокИсполнения");
	
КонецПроцедуры

// Передает значение предмета процесса или задачи объекту XDTO.
//
// Параметры:
//   Владелец - БизнесПроцессОбъект(Ссылка), ЗадачаОбъект(Ссылка) - источник данных.
//   Объект - ОбъектXDTO - заполняемый объект типа DMBusinessProcess<...>.
//   ЗаполнятьВнешниеОбъекты - Булево - Истина, если требуется заполнить список внешних объектов предмета.
//
Процедура ПередатьЗначенияПредметовБизнесПроцессаЗадачи(Владелец, Объект,
		ЗаполнятьВнешниеОбъекты = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеВладельца = Владелец.Метаданные();
	ЭтоБизнесПроцесс = Метаданные.БизнесПроцессы.Содержит(МетаданныеВладельца);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Предметы.РольПредмета КАК РольПредмета,
		|	ПРЕДСТАВЛЕНИЕ(Предметы.ИмяПредмета) КАК ИмяПредмета,
		|	Предметы.Предмет КАК Предмет,
		|	ТИПЗНАЧЕНИЯ(Предметы.Предмет) КАК ТипПредмета,
		|	ПРЕДСТАВЛЕНИЕ(Предметы.Предмет) КАК ПредставлениеПредмета,
		|	%ДОСТУПНОУДАЛЕНИЕ%
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
		|	Файлы.Редактирует КАК Редактирует
		|ИЗ
		|	%ТАБЛИЦА% КАК Предметы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО Предметы.Предмет = Файлы.Ссылка
		|%УСЛОВИЯ%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Предметы.НомерСтроки");
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Владелец)) Тогда
		
		Если ЭтоБизнесПроцесс Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"%ТАБЛИЦА%",
				"БизнесПроцесс." + МетаданныеВладельца.Имя + ".Предметы");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"%ТАБЛИЦА%",
				"Задача.ЗадачаИсполнителя.Предметы");
		КонецЕсли;
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"%УСЛОВИЯ%",
			"ГДЕ	Предметы.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Владелец);
		
	Иначе // Объект, уже прочитанный из БД.
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Предметы.НомерСтроки,
			|	Предметы.РольПредмета,
			|	Предметы.ИмяПредмета,
			|	%ДОСТУПНОУДАЛЕНИЕ%
			|	Предметы.Предмет
			|ПОМЕСТИТЬ ТаблицаПредметов
			|ИЗ &ТаблицаПредметов КАК Предметы
			|;
			|" + Запрос.Текст;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"%ТАБЛИЦА%",
			"ТаблицаПредметов");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"%УСЛОВИЯ%",
			"");
			
		ТаблицаПредметов = Владелец.Предметы.Выгрузить();
		Запрос.УстановитьПараметр("ТаблицаПредметов", ТаблицаПредметов);
		
	КонецЕсли;
	
	Если ЭтоБизнесПроцесс Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"%ДОСТУПНОУДАЛЕНИЕ%",
			"");
		targetCollection = СоздатьОбъектXDTO("DMBusinessProcessTargetCollection");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"%ДОСТУПНОУДАЛЕНИЕ%",
			"Предметы.ДоступноУдаление КАК ДоступноУдаление,");
		targetCollection = СоздатьОбъектXDTO("DMBusinessProcessTaskTargetCollection");
	КонецЕсли;
	
	Предметы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеПредмета = СтрокаПредмета.ПредставлениеПредмета;
		
		Если Не Объект.Установлено("target") Тогда // совместимость со старыми клиентами
			Объект.target = СоздатьОбъектXDTO("DMObject");
			Объект.target.name = ПредставлениеПредмета;
			Объект.target.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				СтрокаПредмета.Предмет);
		КонецЕсли;
		
		Если ЭтоБизнесПроцесс Тогда
			target = СоздатьОбъектXDTO("DMBusinessProcessTarget");
		Иначе
			target = СоздатьОбъектXDTO("DMBusinessProcessTaskTarget");
		КонецЕсли;
		
		target.role = СоздатьОбъектXDTO("DMBusinessProcessTargetRole");
		target.role.name = Строка(СтрокаПредмета.РольПредмета);
		target.role.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			СтрокаПредмета.РольПредмета);
		
		target.name = СтрокаПредмета.ИмяПредмета;
		
		// Контекст использования предметов-файлов требует передачи дополнительных сведений.
		Если СтрокаПредмета.ТипПредмета = Тип("СправочникСсылка.Файлы") Тогда
			
			target.target = СоздатьОбъектXDTO("DMFile");
			target.target.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				СтрокаПредмета.Предмет);
			
			target.target.name = ПредставлениеПредмета;
			target.target.extension = СтрокаПредмета.Расширение;
			
			Редактирует = СтрокаПредмета.Редактирует;
			Если ЗначениеЗаполнено(Редактирует) Тогда
				editingUser = СоздатьОбъектXDTO("DMUser");
				editingUser.name = Строка(Редактирует);
				editingUser.objectId = 
					ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Редактирует);
				target.target.editingUser = editingUser;
				target.target.editing = Истина;
			Иначе
				target.target.editing = Ложь;
			КонецЕсли;
			
		Иначе // для прочих объектов достаточно абстрактного DMObject
			
			target.target = СоздатьОбъектXDTO("DMObject");
			target.target.name = ПредставлениеПредмета;
			target.target.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				СтрокаПредмета.Предмет);
			
		КонецЕсли;
		
		Если ЗаполнятьВнешниеОбъекты Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСписокВнешнихОбъектов(СтрокаПредмета.Предмет, target.target);
		КонецЕсли;
		
		Если Не ЭтоБизнесПроцесс Тогда
			target.allowDeletion = СтрокаПредмета.ДоступноУдаление;
		КонецЕсли;
		
		targetCollection.items.Добавить(target);
		
	КонецЦикла;
	
	Объект.targets = targetCollection;
	
КонецПроцедуры

// Передает значение шаблона процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеШаблонаБизнесПроцесса(Ссылка, Объект)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ЗначениеЗаполнено(Ссылка.Шаблон) Тогда
		
		ШаблонXDTO = СоздатьОбъектXDTO(ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка.Шаблон));
		ШаблонXDTO.name = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Шаблон, "Наименование");
		ШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка.Шаблон);
		Объект.businessProcessTemplate = ШаблонXDTO;
		
	КонецЕсли;
	
КонецПроцедуры 

// Передает реквизиты, связанные со сроком обработки результата, заполняя их в объекте XDTO.
//
// Параметры:
//   БизнесПроцесс - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных заполнения.
//   ОбъектXDTO - ОбъектXDTO, наследний DMBusinessProcess - заполняемый объект.
//
Процедура ПередатьСрокОбработкиРезультата(БизнесПроцесс, ОбъектXDTO) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(БизнесПроцесс)) Тогда
		ИсточникДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
			"СрокОбработкиРезультатов, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты");
	Иначе
		ИсточникДанных = БизнесПроцесс;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"resultProcessingDueDateSpecificationOption",
		ИсточникДанных.ВариантУстановкиСрокаОбработкиРезультатов);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"resultProcessingDueDate",
		ИсточникДанных.СрокОбработкиРезультатов);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"resultProcessingDueDateDays",
		ИсточникДанных.СрокОбработкиРезультатовДни);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"resultProcessingDueDateHours",
		ИсточникДанных.СрокОбработкиРезультатовЧасы);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"resultProcessingDueDateMinutes",
		ИсточникДанных.СрокОбработкиРезультатовМинуты);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТДЕЛЬНЫХ ОБЪЕКТОВ ДО ПО ДАННЫМ ОБЪЕКТОВ XDTO

// Заполняет реквизит Исполнитель и связанные с ним по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеОдногоИсполнителя(БизнесПроцессОбъект, ОбъектXDTO)
	
	Исполнитель = ОбъектXDTO.performer;
	
	Исполнитель = ОбъектXDTO.performer;
	Если Исполнитель.Установлено("user") Тогда
		БизнесПроцессОбъект.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.user.objectId);
	ИначеЕсли Исполнитель.Установлено("role") Тогда
		РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.role.ObjectId);
		Если Исполнитель.Установлено("mainAddressingObject") Тогда
			ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.mainAddressingObject.objectId);
		Иначе
			ОсновнойОбъектАдресации = Неопределено;
		КонецЕсли;
		Если Исполнитель.Установлено("secondaryAddressingObject") Тогда
			ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.secondaryAddressingObject.objectId);
		Иначе
			ДополнительныйОбъектАдресации = Неопределено;
		КонецЕсли;
		БизнесПроцессОбъект.Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	КонецЕсли;
	
	Если Исполнитель.Установлено("dueDateSpecificationOption") Тогда
		
		БизнесПроцессОбъект.ВариантУстановкиСрокаИсполнения = 
			ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.dueDateSpecificationOption.objectId);
		БизнесПроцессОбъект.СрокИсполнения = Исполнитель.dueDate;
		БизнесПроцессОбъект.СрокИсполненияДни = Исполнитель.dueDateDays;
		БизнесПроцессОбъект.СрокИсполненияЧасы = Исполнитель.dueDateHours;
		БизнесПроцессОбъект.СрокИсполненияМинуты = Исполнитель.dueDateMinutes;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит Проверяющий и связанные с ним по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеПроверяющего(БизнесПроцессОбъект, ОбъектXDTO)
	
	Если ОбъектXDTO.Установлено("verifier") Тогда
		
		Если ОбъектXDTO.verifier.Установлено("role") Тогда
			РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.role.objectId);
			Если ОбъектXDTO.verifier.Установлено("mainAddressingObject") Тогда
				ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.mainAddressingObject.objectId);
			Иначе
				ОсновнойОбъектАдресации = Неопределено;
			КонецЕсли;
			Если ОбъектXDTO.verifier.Установлено("secondaryAddressingObject") Тогда
				ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.secondaryAddressingObject.objectId);
			Иначе
				ДополнительныйОбъектАдресации = Неопределено;
			КонецЕсли;
			БизнесПроцессОбъект.Проверяющий = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
			
		ИначеЕсли ОбъектXDTO.verifier.Установлено("user") Тогда
				
			БизнесПроцессОбъект.Проверяющий = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.user.objectId);
			
		КонецЕсли;
		
		Если ОбъектXDTO.verifier.Установлено("dueDateSpecificationOption") Тогда
			
			БизнесПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
				ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.dueDateSpecificationOption.objectId);
			БизнесПроцессОбъект.СрокОбработкиРезультатов = ОбъектXDTO.verifier.dueDate;
			БизнесПроцессОбъект.СрокОбработкиРезультатовДни = ОбъектXDTO.verifier.dueDateDays;
			БизнесПроцессОбъект.СрокОбработкиРезультатовЧасы = ОбъектXDTO.verifier.dueDateHours;
			БизнесПроцессОбъект.СрокОбработкиРезультатовМинуты = ОбъектXDTO.verifier.dueDateMinutes;
			
		ИначеЕсли ОбъектXDTO.dueDate <> Неопределено Тогда
			
			БизнесПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			БизнесПроцессОбъект.СрокОбработкиРезультатов = ОбъектXDTO.dueDate;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты, связанные со сроком обработки результата по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс.
//   ОбъектXDTO - ОбъектXDTO, наследний DMBusinessProcess - источник данных для заполнения.
//
Процедура УстановитьСрокОбработкиРезультата(БизнесПроцессОбъект, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.Установлено("resultProcessingDueDateSpecificationOption") Тогда
		
		БизнесПроцессОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
			ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.resultProcessingDueDateSpecificationOption.objectId);
		БизнесПроцессОбъект.СрокОбработкиРезультатов = ОбъектXDTO.resultProcessingDueDate;
		БизнесПроцессОбъект.СрокОбработкиРезультатовДни = ОбъектXDTO.resultProcessingDueDateDays;
		БизнесПроцессОбъект.СрокОбработкиРезультатовЧасы = ОбъектXDTO.resultProcessingDueDateHours;
		БизнесПроцессОбъект.СрокОбработкиРезультатовМинуты = ОбъектXDTO.resultProcessingDueDateMinutes;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет новый процесс РешениеВопросовВыполненияЗадач по умолчанию
//
// Параметры:
//   БПОбъект - БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач - процесс к заполнению
//   Предмет - Произвольный - предмет процесса
// 
Процедура ЗаполнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет)
	
	БПОбъект.Автор = Пользователи.ТекущийПользователь();
	БПОбъект.ПредметРассмотрения = Предмет;
	БПОбъект.ГлавнаяЗадача = Предмет;
	БПОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	БПОбъект.СрокИсполнения = ТекущаяДатаСеанса() + 86400;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БПОбъект.ИнициаторПроцесса = Предмет.Автор;
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ДополнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет);
	
КонецПроцедуры

// Вызывает общую проверку правильности заполнения, бросая исключение в случае ошибки
//
Процедура ПроверитьПравильностьЗаполненияБизнесПроцесса(БизнесПроцессОбъект)
	
	ТекстСообщения = "";
	УспешнаяПроверка = ОбработкаЗапросовXDTO.ПроверитьЗаполнение(БизнесПроцессОбъект, ТекстСообщения);
	
	Если НЕ УспешнаяПроверка Тогда
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

// Дополняет массив шаблонов шаблонами, подходящими для указанного вида документа
// 
Процедура ДобавитьШаблоныПоВидуДокумента(ШаблоныПоВидуДокумента, ВидДокумента, Тип);
	
	ШаблоныПоТипуПроцесса = ПолучитьШаблоныПоВидуДокумента(ВидДокумента, Тип);
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		ШаблоныПоВидуДокумента.Добавить(Шаблон);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив шаблонов шаблонами, подходящими для указанного вида документа
// 
Функция ПолучитьШаблоныПоВидуДокумента(ВидДокумента, Тип, ТолькоНастроенные = Истина)
	
	ШаблоныПоДокументу = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
		Возврат ШаблоныПоДокументу;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыВходящихДокументов") 
		И ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыИсходящихДокументов") 
		И ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		
		Возврат ШаблоныПоДокументу;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
	
	Если Тип = "ШаблоныИсполнения" 
		Или Тип = "ШаблоныОзнакомления" 	
		Или Тип = "ШаблоныПоручения"
		Или Тип = "ШаблоныРассмотрения"
		Или Тип = "ШаблоныРегистрации"
		Или Тип = "ШаблоныСогласования"
		Или Тип = "ШаблоныПриглашения"
		Или Тип = "ШаблоныУтверждения"
		Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен В (&ВидДокумента)
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе)
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник." + Тип + ")";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен В(&ВидДокумента)
		|	И НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления
		|	И НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник.ШаблоныСоставныхБизнесПроцессов)
		|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ТипШаблона = &ТипШаблона";
		Запрос.УстановитьПараметр("ТипШаблона", Тип);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДокумента", МассивВидовДокумента);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоДокументу.Количество() = 0 Тогда
		
		Если Тип = "ШаблоныИсполнения" 
			Или Тип = "ШаблоныОзнакомления"
			Или Тип = "ШаблоныПоручения"
			Или Тип = "ШаблоныРассмотрения"
			Или Тип = "ШаблоныРегистрации"
			Или Тип = "ШаблоныСогласования"
			Или Тип = "ШаблоныПриглашения"
			Или Тип = "ШаблоныКомплексныхБизнесПроцессов"
			Или Тип = "ШаблоныУтверждения" Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник." + Тип + " КАК Шаблоны
			|ГДЕ
			|	НЕ Шаблоны.ШаблонВКомплексномПроцессе
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ШаблоныСоставныхБизнесПроцессов.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = &ТипШаблона
			|	И НЕ ШаблоныСоставныхБизнесПроцессов.ШаблонВКомплексномПроцессе
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = ШаблоныСоставныхБизнесПроцессов.Ссылка)";
			
			Запрос.УстановитьПараметр("ТипШаблона", Тип);
		КонецЕсли;
		
		Выборка =  Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблоныПоДокументу;
	
КонецФункции

// Создает и заполняет объект типа DMBusinessProcessTaskExecutor по данным задачи или процесса.
//
// Параметры:
//   ИсточникДанных - Произвольный - источник данных для заполнения.
//   ИмяИсполнителя - Строка - имя реквизита, соответствующего исполнителю.
//   ИмяРоли - Строка - имя реквизита, соответствующего роли исполнителя.
//   ИмяСрока - Строка - имя реквизита, соответствующего сроку исполнения задачи.
//
Функция ПодготовитьИсполнителя(ИсточникДанных, ИмяИсполнителя, ИмяРоли, ИмяСрока = Неопределено) Экспорт
	
	Результат = СоздатьОбъектXDTO("DMBusinessProcessTaskExecutor");
	
	Исполнитель = ИсточникДанных[ИмяИсполнителя];
	
	Если ЗначениеЗаполнено(Исполнитель)
		И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "user", Исполнитель);
		
	Иначе
		
		Роль = ИсточникДанных[ИмяРоли];
		
		Если ЗначениеЗаполнено(Роль)
			И ТипЗнч(Роль) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Роль,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "role", РеквизитыРоли.Владелец);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "mainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "secondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяСрока) Тогда
		
		Если ИмяСрока = "СрокОбработкиРезультатов" Тогда
			ИмяВарианта = "ВариантУстановкиСрокаОбработкиРезультатов";
		ИначеЕсли ИмяСрока = "СрокОбработкиРезультатовИсполнения" Тогда
			ИмяВарианта = "ВариантУстановкиСрокаОбработкиРезультатовИсполнения";
		Иначе
			ИмяВарианта = "ВариантУстановкиСрокаИсполнения";
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "dueDateSpecificationOption", ИсточникДанных[ИмяВарианта]);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "dueDate", ИсточникДанных[ИмяСрока]);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "dueDateDays", ИсточникДанных[ИмяСрока + "Дни"]);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "dueDateHours", ИсточникДанных[ИмяСрока + "Часы"]);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Результат, "dueDateMinutes", ИсточникДанных[ИмяСрока + "Минуты"]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Интерфейс к ОбработкаЗапросовXDTO.СоздатьОбъект
//
Функция СоздатьОбъектXDTO(ТипОбъекта)
	
	Возврат ОбработкаЗапросовXDTO.СоздатьОбъект(ТипОбъекта);
	
КонецФункции

// Заменяет пустую дату на Неопределено, заполненную возвращает как есть
//
Функция ОбработатьДату(ЗначениеДата)
	
	Если ЗначениеЗаполнено(ЗначениеДата) Тогда
		Возврат ЗначениеДата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает текст запроса, который выбирает ссылки на задачи, их дату и состояние, для
// заполнения executionMark.
//
// Возвращаемое значение:
//   Строка - текст запроса.
//
Функция ТекстЗапросаСостоянияЗадач()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Дата,
		|	ВЫБОР
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА ""Stopped""
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА ""Interrupted""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА ""ExecutedPositive""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА ""ExecutedAlmostPositive""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА ""ExecutedNegative""
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|			ТОГДА ""ReadyToExecute""
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
		|			ТОГДА ""ExecutionCanceled""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Задачи.Выполнена = ИСТИНА
		|					ТОГДА ""ExecutedNeutral""
		|				ИНАЧЕ ""NotExecuted""
		|			КОНЕЦ
		|	КОНЕЦ КАК РезультатЗавершения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО Задачи.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	&Условие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
	
КонецФункции

Функция ПометкаВариантаВыполненияЗадачи(Задача)
	
	Запрос = Новый Запрос(ТекстЗапросаСостоянияЗадач());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Задачи.Ссылка = &Задача");
	Запрос.УстановитьПараметр("Задача", Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РезультатЗавершения;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСвойстваРодительскогоБизнесПроцесса(ЗадачаXDTO, Выборка)
	
	Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
		ЗадачаXDTO.parentBusinessProcess.state = ОбработкаЗапросовXDTO.СоздатьОбъект(
			ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Выборка.Состояние));
		ЗадачаXDTO.parentBusinessProcess.state.name = Строка(Выборка.Состояние);
		ЗадачаXDTO.parentBusinessProcess.state.objectId =
			ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Состояние);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.РезультатВыполненияБизнесПроцесса) Тогда
		Если ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
			ЗадачаXDTO.parentBusinessProcess.executionResult = СоздатьОбъектXDTO("DMApprovalResult");
		ИначеЕсли ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			ЗадачаXDTO.parentBusinessProcess.executionResult = СоздатьОбъектXDTO("DMConfirmationResult");
		ИначеЕсли ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
			ЗадачаXDTO.parentBusinessProcess.executionResult = СоздатьОбъектXDTO("DMRegistrationResult");
		КонецЕсли;
		ЗадачаXDTO.parentBusinessProcess.executionResult.name = Строка(Выборка.РезультатВыполненияБизнесПроцесса);
		ЗадачаXDTO.parentBusinessProcess.executionResult.objectId =
			ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.РезультатВыполненияБизнесПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ВидПроцессаУтверждение) Тогда
		ЗадачаXDTO.parentBusinessProcess.processType = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProcessConfirmationType");
		ЗадачаXDTO.parentBusinessProcess.processType.name = Строка(Выборка.ВидПроцессаУтверждение);
		ЗадачаXDTO.parentBusinessProcess.processType.objectId =
			ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.ВидПроцессаУтверждение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ПредметРассмотрения) Тогда
		ЗадачаXDTO.parentBusinessProcess.issueTask = ОбработкаЗапросовXDTO.СоздатьОбъект("DMBusinessProcessTask");
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьОсновныеСвойстваXDTOЗадачи(
			ЗадачаXDTO.parentBusinessProcess.issueTask, Выборка.ПредметРассмотрения, , Ложь);
	КонецЕсли;
	
	Если Выборка.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		ЗадачаXDTO.parentBusinessProcess.newDueDate = Выборка.НовыйСрок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДатаНачалаМероприятия) Тогда
		ЗадачаXDTO.parentBusinessProcess.activityBegin = Выборка.ДатаНачалаМероприятия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДатаОкончанияМероприятия) Тогда
		ЗадачаXDTO.parentBusinessProcess.activityEnd = Выборка.ДатаОкончанияМероприятия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.МестоПроведения) Тогда
		ЗадачаXDTO.parentBusinessProcess.activityVenue = Выборка.МестоПроведения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.РезультатПриглашения) Тогда
		ЗадачаXDTO.parentBusinessProcess.invitationResult = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGeneralInvitationResult");
		ЗадачаXDTO.parentBusinessProcess.invitationResult.name = Строка(Выборка.РезультатПриглашения);
		ЗадачаXDTO.parentBusinessProcess.invitationResult.objectId =
			ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.РезультатПриглашения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
