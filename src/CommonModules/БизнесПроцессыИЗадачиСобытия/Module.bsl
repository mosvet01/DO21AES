// Обработчик подписки на событие ЗаписатьВСписокБизнесПроцессов.
//
Процедура ЗаписатьВСписокБизнесПроцессов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	Если Источник.УзелОбмена <> ЭтотУзел Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <> "ЗаписьСОбновлениемОбщегоСпискаПроцессов"
		И Источник.ДополнительныеСвойства.ВидЗаписи <> 
			"ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей"
		И Источник.ДополнительныеСвойства.ВидЗаписи <> 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам" Тогда
		
		Возврат;
	КонецЕсли;
	
	СписокПолей = "Номер,Дата,Завершен,Стартован,Автор,ДатаЗавершения,Наименование,
		|ПометкаУдаления,ВедущаяЗадача,СрокИсполненияПроцесса,Важность,
		|ГлавнаяЗадача,Состояние,НомерИтерации,ДатаНачала,УзелОбмена";
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		СписокПолей = СписокПолей + ",Проект,ПроектнаяЗадача";
	КонецЕсли;
	
	ЗначенияПолей = Новый Структура(СписокПолей);
	
	МетаданныеИсточника = Источник.Метаданные();
	
	Если МетаданныеИсточника.Реквизиты.Найти("НомерИтерации") = Неопределено Тогда
		ЗначенияПолей.Удалить("НомерИтерации");
		СписокПолей = СтрЗаменить(СписокПолей, ",НомерИтерации" , "");
	КонецЕсли;
	
	ЕстьРеквизтСрокИсполненияПроцесса = 
		МетаданныеИсточника.Реквизиты.Найти("СрокИсполненияПроцесса") <> Неопределено;
	
	Если Не ЕстьРеквизтСрокИсполненияПроцесса Тогда
		ЗначенияПолей.Удалить("СрокИсполненияПроцесса");
		СписокПолей = СтрЗаменить(СписокПолей, ",СрокИсполненияПроцесса" , "");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗначенияПолей, Источник, СписокПолей);
	
	ЗначенияПолей.Вставить("СрокИсполнения", Дата(1,1,1));
	Если ЕстьРеквизтСрокИсполненияПроцесса Тогда
		ЗначенияПолей.СрокИсполнения = ЗначенияПолей.СрокИсполненияПроцесса;
		ЗначенияПолей.Удалить("СрокИсполненияПроцесса");
	КонецЕсли;
	
	ЗначенияПолей.Вставить("ОсновнойПредмет", "");
	
	Отбор = Новый Структура;
	Отбор.Вставить("РольПредмета", Перечисления.РолиПредметов.Основной);
	НайденныеСтроки = Источник.Предметы.НайтиСтроки(Отбор);
	КоличествоОсновныхПредметов = НайденныеСтроки.Количество();
	ОбщееКоличествоПредметов = Источник.Предметы.Количество();
	
	КоличествоПредметов = 0;
	
	Если КоличествоОсновныхПредметов = 1 Тогда
		ЗначенияПолей.ОсновнойПредмет = НайденныеСтроки[0].Предмет;
		КоличествоПредметов = 1;
	ИначеЕсли КоличествоОсновныхПредметов > 0 Тогда
		КоличествоПредметов = КоличествоОсновныхПредметов;
	ИначеЕсли ОбщееКоличествоПредметов = 1 Тогда
		ЗначенияПолей.ОсновнойПредмет = Источник.Предметы[0].Предмет;
		КоличествоПредметов = 1;
	ИначеЕсли ОбщееКоличествоПредметов > 0 Тогда
		КоличествоПредметов = ОбщееКоличествоПредметов;
	КонецЕсли;
	
	Если КоличествоПредметов > 1 Тогда
		ПодписьПредмет = ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
			КоличествоПредметов,
			НСтр("ru = 'предмет'") + "," + НСтр("ru = 'предмета'") + "," + НСтр("ru = 'предметов'"));
			
		ЗначенияПолей.ОсновнойПредмет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			КоличествоПредметов,
			ПодписьПредмет);
	ИначеЕсли КоличествоПредметов = 0 Или Не ЗначениеЗаполнено(ЗначенияПолей.ОсновнойПредмет) Тогда
		ЗначенияПолей.ОсновнойПредмет = НСтр("ru = 'Нет предметов'");
	КонецЕсли;
	
	БизнесПроцессыИЗадачиВызовСервера.ЗаписатьВСписокБизнесПроцессов(Источник.Ссылка,
		ЗначенияПолей);

КонецПроцедуры

// Обработчик подписки на событие УстановитьПометкуУдаленияЗадач.
//
Процедура УстановитьПометкуУдаленияЗадач(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
        Возврат;  
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда 
        Возврат;  
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	Если Источник.ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		УстановитьПривилегированныйРежим(Истина);
		БизнесПроцессыИЗадачиСервер.УстановитьПометкуУдаленияЗадач(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗадачаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПриЗаписиЗадачиСервер(Источник);
	
КонецПроцедуры

Процедура БизнесПроцессПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
	Мультипредметность.БизнесПроцессПриКопировании(Источник);
	
КонецПроцедуры

// обработчик подписки ЗадачиСПодзадачамиПриЗаписиБизнесПроцесса
Процедура ЗадачиСПодзадачамиПриЗаписиБизнесПроцессаПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Источник.ГлавнаяЗадача) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДобавитьЗапись = Ложь;
		Если Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			ДобавитьЗапись = Истина;
			
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ГлавнаяЗадача, 
				"Исполнитель, РольИсполнителя");
			
			Если Не ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) И
				 Не ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
				 ДобавитьЗапись = Ложь;
			КонецЕсли;	 
			
		КонецЕсли;		
		
		Если Не ДобавитьЗапись И Источник.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			// запросом соберем, может есть другие процессы.
			
			Запрос = Новый Запрос;
			Запрос.Текст
			 = "ВЫБРАТЬ ПЕРВЫЕ 1
			   |	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК ДочернийПроцесс
			   |ИЗ
			   |	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
			   |		ПО ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
			   |ГДЕ
			   |	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			   |	И ДочерниеБизнесПроцессы.СвязующаяЗадача = &Задача";
			 
			Запрос.УстановитьПараметр("Задача", Источник.ГлавнаяЗадача);
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				ДобавитьЗапись = Истина;
			КонецЕсли;	
			
		КонецЕсли;		
		
		МенеджерЗаписи = РегистрыСведений.ЗадачиСПодзадачами.СоздатьМенеджерЗаписи();	 
		МенеджерЗаписи.Задача = Источник.ГлавнаяЗадача;
		
		Если ДобавитьЗапись Тогда
			МенеджерЗаписи.Записать();
		Иначе
			МенеджерЗаписи.Удалить();
		КонецЕсли;	
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры
