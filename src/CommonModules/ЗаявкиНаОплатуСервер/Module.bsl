#Область ПрограммныйИнтерфейс

// Настраивает для вида документа предопределенные типы связей.
//
Процедура НастроитьПредопределенныеТипыСвязей(ВидДокумента) Экспорт
	
	НЗ = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
	НЗ.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.ПредметОплаты);
	НЗ.Отбор.СсылкаИз.Установить(ВидДокумента);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		
		Запись = НЗ.Добавить();
		Запись.ТипСвязи = Справочники.ТипыСвязей.ПредметОплаты;
		Запись.СсылкаИз = ВидДокумента;
		Запись.СсылкаНа = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
		Запись.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
		Запись.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОплатаПоЗаявке;
		Запись.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
		
		Запись = НЗ.Добавить();
		Запись.ТипСвязи = Справочники.ТипыСвязей.ПредметОплаты;
		Запись.СсылкаИз = ВидДокумента;
		Запись.СсылкаНа = Справочники.ВидыВходящихДокументов.ПустаяСсылка();
		Запись.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
		Запись.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОплатаПоЗаявке;
		Запись.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
		
		НЗ.Записать();
		
	КонецЕсли;
	
	НЗ = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
	НЗ.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.ОплатаПоЗаявке);
	НЗ.Отбор.СсылкаНа.Установить(ВидДокумента);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
	
		Запись = НЗ.Добавить();
		Запись.ТипСвязи = Справочники.ТипыСвязей.ОплатаПоЗаявке;
		Запись.СсылкаИз = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
		Запись.СсылкаНа = ВидДокумента;
		Запись.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
		Запись.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПредметОплаты;
		Запись.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
		
		Запись = НЗ.Добавить();
		Запись.ТипСвязи = Справочники.ТипыСвязей.ОплатаПоЗаявке;
		Запись.СсылкаИз = Справочники.ВидыВходящихДокументов.ПустаяСсылка();
		Запись.СсылкаНа = ВидДокумента;
		Запись.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
		Запись.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПредметОплаты;
		Запись.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
		
		НЗ.Записать();
		
	КонецЕсли;
	
	НЗ = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
	НЗ.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.ОплаченоДокументом);
	НЗ.Отбор.СсылкаИз.Установить(ВидДокумента);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		
		Запись = НЗ.Добавить();
		Запись.ТипСвязи = Справочники.ТипыСвязей.ОплаченоДокументом;
		Запись.СсылкаИз = ВидДокумента;
		Запись.СсылкаНа = "";
		Запись.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
		
		НЗ.Записать();
		
	КонецЕсли;
	
	НЗ = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
	НЗ.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.АвансовыйОтчет);
	НЗ.Отбор.СсылкаИз.Установить(ВидДокумента);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		
		Запись = НЗ.Добавить();
		Запись.ТипСвязи = Справочники.ТипыСвязей.АвансовыйОтчет;
		Запись.СсылкаИз = ВидДокумента;
		Запись.СсылкаНа = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
		Запись.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
		
		НЗ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из РаботаСУведомлениями.ДоступныеУведомления() и дополняет
// доступные уведомления уведомлениями, относящимися к заявкам на оплату.
//
Процедура ПриПолученииДоступныхУведомлений(ДоступныеУведомления) Экспорт
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОтсутствуетАвансовыйОтчет;
	СтрокаУведомления.Представление = НСтр("ru = 'Отсутствие авансового отчета'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату;
	СтрокаУведомления.Представление = НСтр("ru = 'Приближение срока заявки на оплату'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Истина;
	
КонецПроцедуры

// Обрабатывает регламентное задание КонтрольСроковЗаявокНаОплату.
//
Процедура КонтрольСроковЗаявокНаОплату() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольСроковЗаявокНаОплату, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДокументовЗаявкаНаОплату = ВидыДокументовЗаявкаНаОплату();
	Если ВидыДокументовЗаявкаНаОплату.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	НеисполненныеЗаявкиСПодписчиками = НеисполненныеЗаявкиСПодписчиками(ТекущаяДата, ВидыДокументовЗаявкаНаОплату);
	
	ТаблицаПодписчики = НеисполненныеЗаявкиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = НастройкиУведомленийОСрокахЗаявок(МассивПодписчики);
	
	Для Каждого СтрокаНеисполненнаяЗаявка Из НеисполненныеЗаявкиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаНеисполненнаяЗаявка.Подписчик, "Пользователь");
		Если НастройкаПодписчика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СрокЗаявки = ОсталосьДней(СтрокаНеисполненнаяЗаявка.СрокИсполнения, ТекущаяДата,
			СтрокаНеисполненнаяЗаявка.Подписчик);
		
		Если СрокЗаявки > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНеисполненнаяЗаявка.ДатаОбработки <> Дата(1,1,1) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РаботаСУведомлениями.РассылатьУведомленияПользователюИзДанногоУзла(СтрокаНеисполненнаяЗаявка.Подписчик) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаНеисполненнаяЗаявка.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату,
			СтрокаНеисполненнаяЗаявка.Заявка,
			СтрокаНеисполненнаяЗаявка.Заявка);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает регламентное задание КонтрольПредоставленияАвансовыхОтчетов.
//
Процедура КонтрольПредоставленияАвансовыхОтчетов() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольПредоставленияАвансовыхОтчетов, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДокументовЗаявкаНаОплату = ВидыДокументовЗаявкаНаОплату();
	Если ВидыДокументовЗаявкаНаОплату.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	ЗаявкиБезОтчетовСПодписчиками = ЗаявкиБезОтчетовСПодписчиками(ТекущаяДата, ВидыДокументовЗаявкаНаОплату);
	
	ТаблицаПодписчики = ЗаявкиБезОтчетовСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	
	Для Каждого СтрокаЗаявкаБезОтчета Из ЗаявкиБезОтчетовСПодписчиками Цикл
		
		Если СтрокаЗаявкаБезОтчета.ДатаОбработки <> Дата(1,1,1) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаЗаявкаБезОтчета.Подписчик,
			Перечисления.СобытияУведомлений.ОтсутствуетАвансовыйОтчет,
			СтрокаЗаявкаБезОтчета.Заявка,
			СтрокаЗаявкаБезОтчета.Заявка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает виды документов, являющиеся заявками на оплату.
//
Функция ВидыДокументовЗаявкаНаОплату()
	
	ВидыДокументовЗаявкаНаОплату = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Виды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК Виды
		|ГДЕ
		|	Виды.ЯвляетсяЗаявкойНаОплату
		|	И НЕ Виды.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДокументовЗаявкаНаОплату.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ВидыДокументовЗаявкаНаОплату;
	
КонецФункции

// Выбирает заявки, не исполненные на указанную дату, с подписчиками.
//
Функция НеисполненныеЗаявкиСПодписчиками(АктивныеНаДату, ВидыДокументовЗаявкаНаОплату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РаботаСУведомлениями.ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату,
		"Документы");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Заявка,
		|	ВЫБОР
		|		КОГДА ВнутренниеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ВнутренниеДокументы.Подготовил
		|		ИНАЧЕ ВнутренниеДокументы.Ответственный
		|	КОНЕЦ КАК Подписчик,
		|	ВнутренниеДокументы.СрокИсполнения КАК СрокИсполнения
		|ПОМЕСТИТЬ АктивныеЗаявки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК СостоянияИсполнения
		|		ПО ВнутренниеДокументы.Ссылка = СостоянияИсполнения.Документ
		|			И (СостоянияИсполнения.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
		|ГДЕ
		|	ВнутренниеДокументы.ПометкаУдаления = ЛОЖЬ
		|	И ВнутренниеДокументы.НеДействует = ЛОЖЬ
		|	И ВнутренниеДокументы.СрокИсполнения > &Дата
		|	И ВнутренниеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И СостоянияИсполнения.Документ ЕСТЬ NULL
		|	И ВнутренниеДокументы.ВидДокумента В(&ВидыДокументовЗаявкаНаОплату)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗаявки.Заявка КАК Заявка,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	АктивныеЗаявки.СрокИсполнения КАК СрокИсполнения,
		|	АктивныеЗаявки.Заявка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗаявкиСПодписчиками
		|ИЗ
		|	АктивныеЗаявки КАК АктивныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО АктивныеЗаявки.Подписчик = Подписчики.Подписчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗаявкиСПодписчиками.Заявка КАК Заявка,
		|	АктивныеЗаявкиСПодписчиками.Подписчик КАК Подписчик,
		|	АктивныеЗаявкиСПодписчиками.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеЗаявкиСПодписчиками.Заявка КАК ОбъектПодписки
		|ИЗ
		|	АктивныеЗаявкиСПодписчиками КАК АктивныеЗаявкиСПодписчиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату))
		|			И АктивныеЗаявкиСПодписчиками.Заявка = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеЗаявкиСПодписчиками.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.УстановитьПараметр("ВидыДокументовЗаявкаНаОплату", ВидыДокументовЗаявкаНаОплату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	НеисполненныеЗаявкиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат НеисполненныеЗаявкиСПодписчиками;
	
КонецФункции

// Возвращает настройки уведомления о заявках пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о заявках.
//
Функция НастройкиУведомленийОСрокахЗаявок(МассивПользователей)
	
	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления",
		Новый ОписаниеТипов("Число"));
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату);
	КонецЦикла;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Получает количество дней до конца срока.
//
// Параметры:
//  СрокДата - Дата - Срок.
//  ТекущаяДата - Дата - Дата, относительно которой рассчитывается срок в днях.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, график работы которого используется.
//  ПримерныйСрок - Булево - Признак того, что срок примерный.
//  КНачалуДня - Булево - Признак того, что дату следует привести к началу дня.
//
// Возвращаемое значение:
//  Число - Срок в днях.
//
Функция ОсталосьДней(Срок, Знач ТекущаяДата = Неопределено, Пользователь = Неопределено,
		ПримерныйСрок = Ложь, КНачалуДня = Ложь)
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если КНачалуДня Тогда
		ТекущаяДата = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Иначе
		ИспользоватьГрафикиРаботы = Ложь;
	КонецЕсли;
	
	ПримерныйСрок = Ложь;
	
	Если ИспользоватьГрафикиРаботы Тогда
		
		График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
		
		Попытка
			Если Срок >= ТекущаяДата Тогда
				СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, ТекущаяДата, Срок) + 1;
			Иначе
				СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, Срок, ТекущаяДата);
			КонецЕсли;
		Исключение
			
			ТекстПредупреждения =
				НСтр("ru = 'Не удалось получить разность дат по календарю:'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстПредупреждения);
			
			ПримерныйСрок = Истина;
			СрокВДнях = ОсталосьДней(Срок, ТекущаяДата);
			
		КонецПопытки;
		
	Иначе
		
		Если Срок >= ТекущаяДата Тогда
			СрокВДнях = (КонецДня(Срок) - КонецДня(ТекущаяДата)) / 86400 + 1; // 86400 - число секунд в сутках.
		Иначе
			СрокВДнях = (КонецДня(ТекущаяДата) - КонецДня(Срок)) / 86400; // 86400 - число секунд в сутках.
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СрокВДнях;
	
КонецФункции

// Выбирает заявки, для которых к указанной дате авансовый отчет требуется, но не предоставлен.
//
Функция ЗаявкиБезОтчетовСПодписчиками(АктивныеНаДату, ВидыДокументовЗаявкаНаОплату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РаботаСУведомлениями.ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц,
		Перечисления.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату,
		"Документы");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Заявка,
		|	ВЫБОР
		|		КОГДА ВнутренниеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ВнутренниеДокументы.Подготовил
		|		ИНАЧЕ ВнутренниеДокументы.Ответственный
		|	КОНЕЦ КАК Подписчик,
		|	ОбязательстваПоАвансовымОтчетам.СрокПредоставления КАК СрокПредоставления
		|ПОМЕСТИТЬ АктивныеЗаявки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК СостоянияИсполнения
		|		ПО ВнутренниеДокументы.Ссылка = СостоянияИсполнения.Документ
		|			И (СостоянияИсполнения.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбязательстваПоАвансовымОтчетам КАК ОбязательстваПоАвансовымОтчетам
		|		ПО ВнутренниеДокументы.Ссылка = ОбязательстваПоАвансовымОтчетам.ЗаявкаНаОплату
		|			И (ОбязательстваПоАвансовымОтчетам.Требуется)
		|			И (ОбязательстваПоАвансовымОтчетам.СрокПредоставления < &Дата)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК Связи
		|		ПО ВнутренниеДокументы.Ссылка = Связи.Документ
		|			И (Связи.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.АвансовыйОтчет))
		|ГДЕ
		|	ВнутренниеДокументы.ПометкаУдаления = ЛОЖЬ
		|	И ВнутренниеДокументы.НеДействует = ЛОЖЬ
		|	И ВнутренниеДокументы.ВидДокумента В(&ВидыДокументовЗаявкаНаОплату)
		|	И НЕ ОбязательстваПоАвансовымОтчетам.Предоставлен
		|	И Связи.Документ ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗаявки.Заявка КАК Заявка,
		|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	АктивныеЗаявки.СрокПредоставления КАК СрокПредоставления,
		|	АктивныеЗаявки.Заявка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗаявкиСПодписчиками
		|ИЗ
		|	АктивныеЗаявки КАК АктивныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		|		ПО АктивныеЗаявки.Подписчик = Подписчики.Подписчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗаявкиСПодписчиками.Заявка КАК Заявка,
		|	АктивныеЗаявкиСПодписчиками.Подписчик КАК Подписчик,
		|	АктивныеЗаявкиСПодписчиками.СрокПредоставления КАК СрокПредоставления,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеЗаявкиСПодписчиками.Заявка КАК ОбъектПодписки
		|ИЗ
		|	АктивныеЗаявкиСПодписчиками КАК АктивныеЗаявкиСПодписчиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату))
		|			И АктивныеЗаявкиСПодписчиками.Заявка = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеЗаявкиСПодписчиками.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.УстановитьПараметр("ВидыДокументовЗаявкаНаОплату", ВидыДокументовЗаявкаНаОплату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗаявкиБезОтчетовСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ЗаявкиБезОтчетовСПодписчиками;
	
КонецФункции

#КонецОбласти