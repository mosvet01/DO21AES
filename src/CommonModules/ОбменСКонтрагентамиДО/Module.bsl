
#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновлений

// Обработка обновления.
// Заполняет в регистре Правила учетов видов ЭД ДО новое измерение "Организация".
Процедура ОбновитьПравилаУчетаВидовЭД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаУчетаВидовЭДДО.УдалитьВидЭД КАК УдалитьВидЭД,
		|	ПравилаУчетаВидовЭДДО.Контрагент КАК Контрагент,
		|	ПравилаУчетаВидовЭДДО.УдалитьТипЭД КАК УдалитьТипЭД,
		|	ПравилаУчетаВидовЭДДО.ВидДокумента КАК ВидДокумента,
		|	ПравилаУчетаВидовЭДДО.ВопросДеятельности КАК ВопросДеятельности,
		|	ПравилаУчетаВидовЭДДО.Ответственный КАК Ответственный,
		|	ПравилаУчетаВидовЭДДО.Папка КАК Папка,
		|	ПравилаУчетаВидовЭДДО.УдалитьТребуетсяИзвещениеОПолучении КАК УдалитьТребуетсяИзвещениеОПолучении,
		|	ПравилаУчетаВидовЭДДО.УдалитьТребуетсяОтветнаяПодпись КАК УдалитьТребуетсяОтветнаяПодпись,
		|	ПравилаУчетаВидовЭДДО.Шаблон КАК Шаблон,
		|	ПравилаУчетаВидовЭДДО.ШаблонНаименования КАК ШаблонНаименования,
		|	ПравилаУчетаВидовЭДДО.ШаблонСодержания КАК ШаблонСодержания
		|ИЗ
		|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьПрофилиНастроекЭДО.Организация КАК Организация
		|ИЗ
		|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
		|ГДЕ
		|	НЕ УдалитьПрофилиНастроекЭДО.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	УдалитьПрофилиНастроекЭДО.Организация";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПравилаЗаписанные = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ОрганизацииЭДО = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить().ВыгрузитьКолонку("Организация");
	
	НаборЗаписей = РегистрыСведений.ПравилаУчетаВидовЭДДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого Организация Из ОрганизацииЭДО Цикл
		Для Каждого ПравилоУчета Из ПравилаЗаписанные Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Организация = Организация;
			Запись.Принимать = Истина;
			
			ЗаполнитьЗначенияСвойств(Запись, ПравилоУчета);
			
		КонецЦикла;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаУчетаВидовЭДДО");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения =
			НСтр("ru = 'При обновлении правил учета видов ДО по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ПравилаУчетаВидовЭДДО, ,
			ТекстИсключения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления.
// Заполняет правила отправки документов по ЭДО на основании данных регистра Правил учета видов ЭД ДО.
Процедура ЗаполнитьПравилаОтправкиДокументовЭДО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьСоглашенияОбИспользованииЭД.Организация КАК Организация,
		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	УдалитьСоглашенияОбИспользованииЭД.Организация,
		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаУчетаВидовЭДДО.Организация КАК Организация,
		|	ПравилаУчетаВидовЭДДО.Контрагент КАК Контрагент,
		|	ПравилаУчетаВидовЭДДО.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
		|
		|СГРУППИРОВАТЬ ПО
		|	ПравилаУчетаВидовЭДДО.Организация,
		|	ПравилаУчетаВидовЭДДО.Контрагент,
		|	ПравилаУчетаВидовЭДДО.ВидДокумента";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСторонОбмена = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ПравилаУчета = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();
	
	НаборЗаписей = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Пока ВыборкаСторонОбмена.Следующий() Цикл
		
		НастройкиПоУмолчанию = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиДокументовПоЭДО(
			ВыборкаСторонОбмена.Организация, ВыборкаСторонОбмена.Контрагент);
		
		Для Каждого Настройка Из НастройкиПоУмолчанию Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, Настройка);
			Запись.Отправитель = ВыборкаСторонОбмена.Организация;
			Запись.Получатель = ВыборкаСторонОбмена.Контрагент;
			Запись.УдалитьВидЭД = Настройка.ВидЭД;
			Запись.УдалитьТипЭД = Настройка.ТипЭД;
			
			ОтборПравилУчета = Новый Структура;
			ОтборПравилУчета.Вставить("Организация", ВыборкаСторонОбмена.Организация);
			ОтборПравилУчета.Вставить("Контрагент", ВыборкаСторонОбмена.Контрагент);
			ОтборПравилУчета.Вставить("ВидДокумента", Настройка.ВидДокумента);
			
			СтрокиВПравилахУчета = ПравилаУчета.НайтиСтроки(ОтборПравилУчета);
			
			Если СтрокиВПравилахУчета.Количество() > 0 Тогда
				Запись.Отправлять = Истина;
			Иначе
				Запись.Отправлять = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтправкиДокументовПоЭДО");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения =
			НСтр("ru = 'При заполнении настроек отправки документов ПО ЭДО возникли ошибки по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.НастройкиОтправкиДокументовПоЭДО, ,
			ТекстИсключения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет очереди обработчиков обновления в ручном режиме в силу отличия версий БСП.
Процедура ОчередьОбновленияОбработчиковЭДО(ОбработчикИОчередь) Экспорт
	
	ОбработчикИОчередь.Вставить("Справочники.ТорговыеПредложения.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("Документы._ДемоОперация.ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ПодписываемыеВидыЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию", 5);
	ОбработчикИОчередь.Вставить("Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию", 3);
	ОбработчикИОчередь.Вставить("ОбменСБанками.ОбработатьРегистрПодписываемыеВидыЭД", 1);
	ОбработчикИОчередь.Вставить("ОбменСБанками.ПеренестиСтатусыЭлектронныхПодписей", 1);
	ОбработчикИОчередь.Вставить("Справочники.НастройкиОбменСБанками.ЗаполнитьВерсиюФормата", 1);
	ОбработчикИОчередь.Вставить("ОбменСБанками.ВключитьАвтоматическоеОбновлениеСпискаБанков", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СостоянияОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("ЭлектронноеВзаимодействиеОбработчикиОбновления.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("ЭлектронноеВзаимодействиеОбработчикиОбновления.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию", 5);
	ОбработчикИОчередь.Вставить("Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 7);
	ОбработчикИОчередь.Вставить("Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 6);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СостояниеПодписанияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию", 3);
	ОбработчикИОчередь.Вставить("КонвертацияЭДО.ВыполнитьЗаполнениеПравилПреобразования", 1);
	ОбработчикИОчередь.Вставить("КонвертацияЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 8);
	ОбработчикИОчередь.Вставить("НастройкиЭДОСлужебный.ВключитьИспользованиеОзнакомленийСЭД", 1);
	ОбработчикИОчередь.Вставить("НастройкиЭДОСлужебный.УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД", 1);
	ОбработчикИОчередь.Вставить("Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("НастройкиЭДОСлужебный.ВключитьУтверждениеВходящихДокументов", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию", 3);
	ОбработчикИОчередь.Вставить("РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ОбработатьДанныеДляПереходаНаНовуюВерсию", 3);
	ОбработчикИОчередь.Вставить("РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбработатьДанныеДляПереходаНаНовуюВерсию", 6);
	ОбработчикИОчередь.Вставить("Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("Документы.ТранспортныйКонтейнерЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 3);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию", 6);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СовместимостьОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СовместимостьОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.НастройкиВнутреннегоЭДО.ВключитьИспользованиеВнутреннихДокументов", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.УдалитьСоответствиеЗначенийРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.УдалитьСоответствиеРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию", 2);
	ОбработчикИОчередь.Вставить("РегистрыСведений.НоменклатураКонтрагентовБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	ОбработчикИОчередь.Вставить("РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ОбработатьДанныеДляПереходаНаНовуюВерсию", 1);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхДокументов

Функция ДанныеДокументаЭДОПоВерсииФайла(ОбъектУчета, Параметры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДвоичныеДанныеФайла", Неопределено);
	СтруктураВозврата.Вставить("ДанныеЭД", Неопределено);
	СтруктураВозврата.Вставить("ДеревоЭД", Неопределено);
	СтруктураВозврата.Вставить("ИмяФайла", "");
	СтруктураВозврата.Вставить("СвязанныеОбъектыУчета", Новый Массив);
	
	Если ТипЗнч(ОбъектУчета) <> Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВерсияФайла = ОбъектУчета;
	Файл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияФайла, "Владелец");
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		Файл,
		ВерсияФайла);
	
	Если ДанныеФайлаИДвоичныеДанные = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить двоичные данные версии файла.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	СтруктураВозврата.ДвоичныеДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	
	ДанныеЭДФайла = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные);
	
	Если ТипЗнч(ДанныеФайлаИДвоичныеДанные) <> Тип("Структура") Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось разобрать файл документа.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	СтруктураВозврата.ДанныеЭД = ДанныеЭДФайла;
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.CML208
		ИЛИ ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.CML402 Тогда
		
		Ошибки = Неопределено;
		
		ДеревоЭД = ДеревоДанныхДокументаCML(ДанныеЭДФайла, Ошибки);
		
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ВызватьИсключение СтрСоединить(Ошибки, Символы.ПС + Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		Если ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.ФНС.УПД2019.ИнформацияПродавца Тогда
			СтрокаИД = ДанныеЭДФайла.НовыйЭД.Строки.Найти("ИдентификаторДокумента", "Реквизит", Истина);
			ИмяФайла = СтрокаИД.ЗначениеРеквизита;
			
			СтруктураВозврата.ИмяФайла = СтрШаблон("%1.xml", ИмяФайла);
		КонецЕсли;
		
		ДеревоЭД = ДанныеЭДФайла.НовыйЭД.ЗначениеРеквизита;
		
	КонецЕсли;
	
	ЗаполнитьДополнительныеДанныеДерева(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета);
	
	СтруктураВозврата.ДеревоЭД = ДеревоЭД;
	
	ЗаполнитьСвязанныеОбъектыУчета(СтруктураВозврата.СвязанныеОбъектыУчета, ДанныеЭДФайла, ДеревоЭД);
	
	ЗначенияДополнительныхПолей = Новый Структура;
	ЗначенияДополнительныхПолей.Вставить("ОтключитьРассчетДополнительныхПолей", Истина);
	
	ДанныеЭДФайла.Вставить("ЗначенияДополнительныхПолей", ЗначенияДополнительныхПолей);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСвязанныеОбъектыУчета(СвязанныеОбъектыУчета, ДанныеЭДФайла, ДеревоЭД)
	
	Формат = ДанныеЭДФайла.НовыйЭД.ВерсияФормата;
	ТипДокумента = ДанныеЭДФайла.НовыйЭД.ВидЭД;
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	ТипыДокументов = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов();
	
	Если Формат = Форматы.CML208 Тогда
		
		Если ТипДокумента = ТипыДокументов.СчетНаОплату
			ИЛИ ТипДокумента = ТипыДокументов.ЗаказТовара
			ИЛИ ТипДокумента = ТипыДокументов.ОтветНаЗаказ
			ИЛИ ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара
			ИЛИ ТипДокумента = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
			
			ИнтеграцияЭДО.ЗаполнитьСвязанныеОбъектыУчетаCML(
				СвязанныеОбъектыУчета,
				ДеревоЭД);
		КонецЕсли;
		
	ИначеЕсли Формат = Форматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		
		ИнтеграцияЭДО.УПД2019_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(
			СвязанныеОбъектыУчета,
			ДеревоЭД);
		
	ИначеЕсли Формат = Форматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		
		ИнтеграцияЭДО.ПередачаТоваров_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(
			СвязанныеОбъектыУчета,
			ДеревоЭД);
		
	ИначеЕсли Формат = Форматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		
		ИнтеграцияЭДО.ПередачаУслуг_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(
			СвязанныеОбъектыУчета,
			ДеревоЭД);
		
	ИначеЕсли Формат = Форматы.ФНС.УКД.ИнформацияПродавца Тогда
		
		ИнтеграцияЭДО.УКД_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(
			СвязанныеОбъектыУчета,
			ДеревоЭД);
		
	ИначеЕсли Формат = Форматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		ИнтеграцияЭДО.УКД2020_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(
			СвязанныеОбъектыУчета,
			ДеревоЭД);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДеревоДанныхДокументаCML(ДанныеЭДФайла, Ошибки = Неопределено)
	
	Формат = ДанныеЭДФайла.НовыйЭД.ВерсияФормата;
	ТипДокумента = ДанныеЭДФайла.НовыйЭД.ВидЭД;
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	ТипыДокументов = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов();
	
	Если Формат = Форматы.CML208 Тогда
		
		Если ТипДокумента = ТипыДокументов.КаталогТоваров Тогда
			
			Результат = ДеревоДанныхКаталогТоваров(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ПрайсЛист Тогда
			
			Результат = ДеревоДанныхПрайсЛист(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
			
			Результат = ДеревоДанныхСчетНаОплату(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
			
			Результат = ДеревоДанныхЗаказТовара(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
			
			Результат = ДеревоДанныхОтветНаЗаказ(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Результат = ДеревоДанныхОтчетОПродажахКомиссионногоТовара(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Результат = ДеревоДанныхОтчетОСписанииКомиссионногоТовара(ДанныеЭДФайла, Ошибки);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.РеквизитыОрганизации Тогда
			
			СтрокаСообщенияИсключения =
				НСтр("ru = 'Отправка реквизитов организации не поддерживается.'");
			
			ДобавитьОшибкуРазбораCML(СтрокаСообщенияИсключения, Ошибки);
			Возврат Неопределено;
			
		Иначе
			
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формат ""%1"" с типом докумета ""%2"" не поддерживается.'"), Формат, ТипДокумента);
			
			ДобавитьОшибкуРазбораCML(СтрокаСообщенияИсключения, Ошибки);
			Возврат Неопределено;
		
		КонецЕсли;
		
	ИначеЕсли Формат = Форматы.CML402 Тогда
		
		Если ТипДокумента = ТипыДокументов.ПередачаТоваровМеждуОрганизациями Тогда
			
			СтрокаСообщенияИсключения =
				НСтр("ru = 'Отправка передачи товаров между организациями не поддерживается.'");
			
			ДобавитьОшибкуРазбораCML(СтрокаСообщенияИсключения, Ошибки);
			Возврат Неопределено;
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ВозвратТоваровМеждуОрганизациями Тогда
			
			СтрокаСообщенияИсключения =
				НСтр("ru = 'Отправка возврата товаров между организациями не поддерживается.'");
			
			ДобавитьОшибкуРазбораCML(СтрокаСообщенияИсключения, Ошибки);
			Возврат Неопределено;
			
		Иначе
			
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формат ""%1"" с типом докумета ""%2"" не поддерживается.'"), Формат, ТипДокумента);
			
			ДобавитьОшибкуРазбораCML(СтрокаСообщенияИсключения, Ошибки);
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДополнительныеДанныеДерева(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета)
	
	Формат = ДанныеЭДФайла.НовыйЭД.ВерсияФормата;
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если Формат = Форматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ЗаполнитьСсылкуНаСчетФактуруУПД(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета);
	ИначеЕсли Формат = Форматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ЗаполнитьСсылкуНаСчетФактуруУКД2020(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета);
	ИначеЕсли Формат = Форматы.ФНС.УКД.ИнформацияПродавца Тогда
		ЗаполнитьСсылкуНаСчетФактуруУКД(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеДереваДокумента

Функция ДеревоДанныхСчетНаОплату(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.СчетНаОплату");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Дата", ДанныеДокумента.Дата);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Номер", ДанныеДокумента.Номер);
	
	ДанныеВалюты = ДанныеВалютыПоДаннымCML(ДанныеДерева, ДанныеДокумента.Валюта, Ошибки);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Валюта", ДанныеВалюты.Код);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Курс", ДанныеДокумента.Курс);
	
	Если ДанныеДокумента.Свойство("НазначениеПлатежа") Тогда
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, "НазначениеПлатежа", ДанныеДокумента.НазначениеПлатежа);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Сумма", ДанныеДокумента.Сумма);
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеКонтрагента, "Покупатель");
	
	ДанныеОрганизации = ДанныеОрганизацииПоДаннымCML(ДанныеДерева, ДанныеДокумента.Организация, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеОрганизации, "Продавец");
	
	ТоварыКЗагрузке = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	ТоварыКЗагрузке.Колонки.Добавить("НДСУчтеноВСумме");
	
	ТоварыКЗагрузке.ЗаполнитьЗначения(ДанныеДокумента.ЦенаВключаетНДС, "НДСУчтеноВСумме");
	
	СуммаСкидки = 0;
	СуммаБезСкидки = 0;
	
	Для Каждого СтрокаТовара Из ТоварыКЗагрузке Цикл
		СуммаСкидки = СуммаСкидки + СтрокаТовара.СуммаСкидки;
		
		Если СтрокаТовара.СкидкаУчтеноВСумме Тогда
			СуммаБезСкидки = СуммаБезСкидки + СтрокаТовара.Сумма;
		Иначе
			СуммаБезСкидки = СуммаБезСкидки + СтрокаТовара.Сумма + СтрокаТовара.СуммаСкидки;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТоварыКЗагрузке, "Товары");
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.Сумма", ДанныеДокумента.СуммаИтог);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС", ДанныеДокумента.СуммаНалогаИтог);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", ДанныеДокумента.ЦенаВключаетНДС);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", СуммаСкидки);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки", СуммаБезСкидки);
	
	ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, "НазначениеПлатежа");
	ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, "ИтогоПоДокументу.Сумма");
	ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки");
	ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки");
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "СчетНаОплату");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Функция ДеревоДанныхКаталогТоваров(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.КаталогТоваров");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВладельца = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеВладельца, "Владелец");
	
	ТаблицаТоваров = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		СтрокаТовара.БазоваяЕдиницаНаименование = СтрокаТовара.СвойстваЕдиницы.Наименование;
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "КаталогТоваров");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Функция ДеревоДанныхПрайсЛист(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ПрайсЛист");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ДатаФормирования", ДанныеДокумента.ДатаФормирования);
	
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Наименование", "Прайс лист наименование");
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Описание", "Прайс лист описание");
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ДействительноС", ДанныеДокумента.Дата);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ДействительноДо", ДанныеДокумента.ДействительноПо);
	
	ДанныеВладельца = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеВладельца, "Владелец");
	
	ТаблицаТоваров = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		СтрокаТовара.БазоваяЕдиницаНаименование = СтрокаТовара.ДанныеДля1С.ЕдиницаИзмерения;
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ПрайсЛист");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Функция ДеревоДанныхЗаказТовара(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ЗаказТовара");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВалюты = ДанныеВалютыПоДаннымCML(ДанныеДерева, ДанныеДокумента.Валюта, Ошибки);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Валюта", ДанныеВалюты.Код);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Курс", ДанныеДокумента.Курс);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Сумма", ДанныеДокумента.Сумма);
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеКонтрагента, "Покупатель");
	
	ДанныеОрганизации = ДанныеОрганизацииПоДаннымCML(ДанныеДерева, ДанныеДокумента.Организация, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеОрганизации, "Продавец");
	
	ДанныеПолучателя = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Получатель, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеПолучателя, "Получатель");
	
	ТоварыКЗагрузке = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	
	ТоварыКЗагрузке.Колонки.Добавить("БазоваяЕдиницаНаименование");
	
	КолонкаВключаетНДС = ТоварыКЗагрузке.Колонки.Найти("ЦенаВключаетНДС");
	КолонкаВключаетНДС.Имя = "НДСУчтеноВСумме";
	
	СуммаСкидки = 0;
	СуммаБезСкидки = 0;
	СуммаИтог = 0;
	ЦенаВключаетНДСИтог = ТоварыКЗагрузке[0].НДСУчтеноВСумме;
	СуммаНДСИтог = 0;
	
	Для Каждого СтрокаТовара Из ТоварыКЗагрузке Цикл
		СуммаСкидки = СуммаСкидки + СтрокаТовара.СуммаСкидки;
		
		Если СтрокаТовара.СкидкаУчтеноВСумме Тогда
			СуммаБезСкидки = СуммаБезСкидки + СтрокаТовара.Сумма;
		Иначе
			СуммаБезСкидки = СуммаБезСкидки + СтрокаТовара.Сумма + СтрокаТовара.СуммаСкидки;
		КонецЕсли;
		
		Если ЦенаВключаетНДСИтог <> Неопределено И ЦенаВключаетНДСИтог <> СтрокаТовара.НДСУчтеноВСумме Тогда
			ЦенаВключаетНДСИтог = Неопределено;
		КонецЕсли;
		
		СуммаИтог = СуммаИтог + СтрокаТовара.Сумма;
		СуммаНДСИтог = СуммаНДСИтог + СтрокаТовара.СуммаНДС;
		
		СтрокаТовара.БазоваяЕдиницаНаименование = СтрокаТовара.СвойстваЕдиницы.Наименование;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТоварыКЗагрузке, "Товары");
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", СуммаИтог);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", СуммаНДСИтог);
	Если ЦенаВключаетНДСИтог <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", ЦенаВключаетНДСИтог);
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог", СуммаСкидки);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", СуммаБезСкидки);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ЗаказПоставщику");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ДополнительныеДанные.Вставить("Номер", ДанныеДокумента.Номер);
	ДополнительныеДанные.Вставить("Дата", ДанныеДокумента.Дата);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Функция ДеревоДанныхОтветНаЗаказ(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ОтветНаЗаказ");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВалюты = ДанныеВалютыПоДаннымCML(ДанныеДерева, ДанныеДокумента.Валюта, Ошибки);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Валюта", ДанныеВалюты.Код);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Курс", ДанныеДокумента.Курс);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Сумма", ДанныеДокумента.Сумма);
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеКонтрагента, "Покупатель");
	
	ДанныеОрганизации = ДанныеОрганизацииПоДаннымCML(ДанныеДерева, ДанныеДокумента.Организация, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеОрганизации, "Продавец");
	
	ДанныеПолучателя = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Получатель, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеПолучателя, "Получатель");
	
	ТоварыКЗагрузке = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	
	ТоварыКЗагрузке.Колонки.Добавить("БазоваяЕдиницаНаименование");
	
	КолонкаВключаетНДС = ТоварыКЗагрузке.Колонки.Найти("ЦенаВключаетНДС");
	КолонкаВключаетНДС.Имя = "НДСУчтеноВСумме";
	
	СуммаСкидки = 0;
	СуммаБезСкидки = 0;
	СуммаИтог = 0;
	ЦенаВключаетНДСИтог = ТоварыКЗагрузке[0].НДСУчтеноВСумме;
	СуммаНДСИтог = 0;
	
	Для Каждого СтрокаТовара Из ТоварыКЗагрузке Цикл
		СуммаСкидки = СуммаСкидки + СтрокаТовара.СуммаСкидки;
		
		Если СтрокаТовара.СкидкаУчтеноВСумме Тогда
			СуммаБезСкидки = СуммаБезСкидки + СтрокаТовара.Сумма;
		Иначе
			СуммаБезСкидки = СуммаБезСкидки + СтрокаТовара.Сумма + СтрокаТовара.СуммаСкидки;
		КонецЕсли;
		
		Если ЦенаВключаетНДСИтог <> Неопределено И ЦенаВключаетНДСИтог <> СтрокаТовара.НДСУчтеноВСумме Тогда
			ЦенаВключаетНДСИтог = Неопределено;
		КонецЕсли;
		
		СуммаИтог = СуммаИтог + СтрокаТовара.Сумма;
		СуммаНДСИтог = СуммаНДСИтог + СтрокаТовара.СуммаНДС;
		
		СтрокаТовара.БазоваяЕдиницаНаименование = СтрокаТовара.СвойстваЕдиницы.Наименование;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТоварыКЗагрузке, "Товары");
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", СуммаИтог);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", СуммаНДСИтог);
	Если ЦенаВключаетНДСИтог <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", ЦенаВключаетНДСИтог);
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог", СуммаСкидки);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", СуммаБезСкидки);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ЗаказПокупателя");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ДополнительныеДанные.Вставить("Номер", ДанныеДокумента.Номер);
	ДополнительныеДанные.Вставить("Дата", ДанныеДокумента.Дата);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Функция ДеревоДанныхОтчетОПродажахКомиссионногоТовара(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ОтчетКомиссионераОПродажах");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ДатаФормирования", ДанныеДокумента.Дата);
	
	ДанныеВалюты = ДанныеВалютыПоДаннымCML(ДанныеДерева, ДанныеДокумента.Валюта, Ошибки);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Валюта", ДанныеВалюты.Код);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Курс", ДанныеДокумента.Курс);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Сумма", ДанныеДокумента.Сумма);
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеКонтрагента, "Комитент");
	
	ДанныеОрганизации = ДанныеОрганизацииПоДаннымCML(ДанныеДерева, ДанныеДокумента.Организация, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеОрганизации, "Комиссионер");
	
	ТоварыКЗагрузке = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	
	ТоварыКЗагрузке.Колонки.Добавить("БазоваяЕдиницаНаименование");
	
	КолонкаВключаетНДС = ТоварыКЗагрузке.Колонки.Найти("ЦенаВключаетНДС");
	КолонкаВключаетНДС.Имя = "НДСУчтеноВСумме";
	
	ЦенаВключаетНДСИтог = ТоварыКЗагрузке[0].НДСУчтеноВСумме;
	
	Для Каждого СтрокаТовара Из ТоварыКЗагрузке Цикл
		
		Если ЦенаВключаетНДСИтог <> Неопределено И ЦенаВключаетНДСИтог <> СтрокаТовара.НДСУчтеноВСумме Тогда
			ЦенаВключаетНДСИтог = Неопределено;
		КонецЕсли;
		
		СтрокаТовара.БазоваяЕдиницаНаименование = СтрокаТовара.СвойстваЕдиницы.Наименование;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТоварыКЗагрузке, "Товары");
	
	Если ЦенаВключаетНДСИтог <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", ЦенаВключаетНДСИтог);
	Иначе
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", Ложь);
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ОтчетОПродажах");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ДополнительныеДанные.Вставить("Номер", ДанныеДокумента.Номер);
	ДополнительныеДанные.Вставить("Дата", ДанныеДокумента.Дата);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Функция ДеревоДанныхОтчетОСписанииКомиссионногоТовара(ДанныеЭДФайла, Ошибки = Неопределено)
	
	НовыйЭД = ДанныеЭДФайла.НовыйЭД;
	
	ДанныеДерева = ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	ДеревоДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ОтчетКомиссионераОСписании");
	
	ДанныеДокумента = ДанныеДерева.Документы.Получить(НовыйЭД.ИД);
	
	Если ДанныеДокумента = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "ДатаФормирования", ДанныеДокумента.Дата);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "НачалоПериода", ДанныеДокумента.Дата);
	
	ДанныеВалюты = ДанныеВалютыПоДаннымCML(ДанныеДерева, ДанныеДокумента.Валюта, Ошибки);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Валюта", ДанныеВалюты.Код);
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Курс", ДанныеДокумента.Курс);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Сумма", ДанныеДокумента.Сумма);
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоДаннымCML(ДанныеДерева, ДанныеДокумента.Контрагент, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеКонтрагента, "Комитент");
	
	ДанныеОрганизации = ДанныеОрганизацииПоДаннымCML(ДанныеДерева, ДанныеДокумента.Организация, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьУчастникаДокументаCML(ДеревоДокумента, ДанныеОрганизации, "Комиссионер");
	
	ТоварыКЗагрузке = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	
	ТоварыКЗагрузке.Колонки.Добавить("БазоваяЕдиницаНаименование");
	
	КолонкаВключаетНДС = ТоварыКЗагрузке.Колонки.Найти("ЦенаВключаетНДС");
	КолонкаВключаетНДС.Имя = "НДСУчтеноВСумме";
	
	Для Каждого СтрокаТовара Из ТоварыКЗагрузке Цикл
		
		СтрокаТовара.БазоваяЕдиницаНаименование = СтрокаТовара.СвойстваЕдиницы.Наименование;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента, ТоварыКЗагрузке, "Товары");
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ОтчетОСписании");
	ДополнительныеДанные.Вставить("Ид", ДанныеДокумента.ИД);
	ДополнительныеДанные.Вставить("Номер", ДанныеДокумента.Номер);
	ДополнительныеДанные.Вставить("Дата", ДанныеДокумента.Дата);
	ИнтеграцияЭДО.ДополнитьДанныеДокумента(ДеревоДокумента, ДополнительныеДанные);
	
	Возврат ДеревоДокумента;
	
КонецФункции

Процедура ЗаполнитьУчастникаДокументаCML(ДеревоДанных, ДанныеУчастника, ВидУчастника)
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
		ДанныеУчастника.ИНН);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
		ДанныеУчастника.КПП);
	
	Если ЗначениеЗаполнено(ДанныеУчастника.ПолноеНаименование) Тогда
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			ДанныеУчастника.ПолноеНаименование);
	ИначеЕсли ЗначениеЗаполнено(ДанныеУчастника.ОфициальноеНаименование) Тогда
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			ДанныеУчастника.ОфициальноеНаименование);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкуНаСчетФактуруУПД(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета)
	
	ФункцияУПД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, "Функция");
	
	Если ФункцияУПД <> "ДОП"
		И ФункцияУПД <> "СвРК"
		И ФункцияУПД <> "СвЗК" Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "СсылкаСчетаФактуры", ОбъектУчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкуНаСчетФактуруУКД2020(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета)
	
	ФункцияУКД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, "Функция");
	
	Если ФункцияУКД <> "ДИС"
		И ФункцияУКД <> "СвИСРК"
		И ФункцияУКД <> "СвИСЗК" Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "СсылкаКорректировочногоСчетаФактуры", ОбъектУчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкуНаСчетФактуруУКД(ДеревоЭД, ДанныеЭДФайла, ОбъектУчета)
	
	ФункцияУКД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, "Функция");
	
	Если ФункцияУКД <> "ДИС" Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "СсылкаКорректировочногоСчетаФактуры", ОбъектУчета);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИзДереваРазбора

Функция ДанныеДереваРазбораCML(ДеревоРазбора) Экспорт
	
	ДанныеДерева = Новый Структура;
	ДанныеДерева.Вставить("Документы", Неопределено);
	ДанныеДерева.Вставить("Валюты", Неопределено);
	ДанныеДерева.Вставить("Контрагенты", Неопределено);
	ДанныеДерева.Вставить("Организации", Неопределено);
	ДанныеДерева.Вставить("ЕдиницыИзмерения", Неопределено);
	ДанныеДерева.Вставить("Номенклатура", Неопределено);
	ДанныеДерева.Вставить("Банки", Неопределено);
	ДанныеДерева.Вставить("БанковскиеСчетаКонтрагентов", Неопределено);
	
	Для Каждого Строка Из ДеревоРазбора.Строки Цикл
		
		Если Строка.ТипОбъекта = "ОбменСКонтрагентами" Тогда
			
			СоответствиеДокументов = СоответствиеДокументовПоСтрокеДереваCML(Строка);
			ДанныеДерева.Документы = СоответствиеДокументов;
			
		ИначеЕсли Строка.ТипОбъекта = "Валюты" Тогда
			
			ТаблицаВалют = ТаблицаВалютПоСтрокеДереваCML(Строка);
			ДанныеДерева.Валюты = ТаблицаВалют;
			
		ИначеЕсли Строка.ТипОбъекта = "Контрагенты" Тогда
			
			ТаблицаКонтрагентов = ТаблицаКонтрагентовПоСтрокеДереваCML(Строка);
			ДанныеДерева.Контрагенты = ТаблицаКонтрагентов;
			
		ИначеЕсли Строка.ТипОбъекта = "Организации" Тогда
			
			ТаблицаОрганизаций = ТаблицаОрганизацийПоСтрокеДереваCML(Строка);
			ДанныеДерева.Организации = ТаблицаОрганизаций;
			
		ИначеЕсли Строка.ТипОбъекта = "ЕдиницыИзмерения" Тогда
			
			ТаблицаЕдиницИзмерения = ТаблицаЕдиницИзмеренияПоСтрокеДереваCML(Строка);
			ДанныеДерева.ЕдиницыИзмерения = ТаблицаЕдиницИзмерения;
			
		ИначеЕсли Строка.ТипОбъекта = "Номенклатура" Тогда
			
			ТаблицаНоменклатуры = ТаблицаНоменклатурыПоСтрокеДереваCML(Строка);
			ДанныеДерева.Номенклатура = ТаблицаНоменклатуры;
			
		ИначеЕсли Строка.ТипОбъекта = "Банки" Тогда
			
			ТаблицаБанков = ТаблицаБанковПоСтрокеДереваCML(Строка);
			ДанныеДерева.Банки = ТаблицаБанков;
			
		ИначеЕсли Строка.ТипОбъекта = "БанковскиеСчетаКонтрагентов" Тогда
			
			ТаблицаСчетов = ТаблицаБанковскихСчетовКонтрагентовПоСтрокеДереваCML(Строка);
			ДанныеДерева.БанковскиеСчетаКонтрагентов = ТаблицаСчетов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДерева;
	
КонецФункции

Функция СоответствиеДокументовПоСтрокеДереваCML(СтрокаОбменаСКонтрагентами)
	
	СоответствиеДокументов = Новый Соответствие;
	
	Для Каждого СтрокаДокумента Из СтрокаОбменаСКонтрагентами.Строки Цикл
		
		ДанныеДокумента = Новый Структура;
		
		ДанныеДокумента.Вставить("ВидЭД", СтрокаДокумента.ВидЭД);
		ДанныеДокумента.Вставить("Формат", СтрокаДокумента.ВерсияФормата);
		ДанныеДокумента.Вставить("ИД", СтрокаДокумента.ИД);
		ДанныеДокумента.Вставить("ТаблицаТоваров", НоваяТаблицаТоваровCML());
		
		Для Каждого СтрокаСвойств Из СтрокаДокумента.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "СтрокаТЧ" Тогда
				
				ДобавитьСтрокуТовараВТаблицуCML(ДанныеДокумента.ТаблицаТоваров, СтрокаСвойств);
				
			Иначе
				
				ДанныеДокумента.Вставить(СтрокаСвойств.Реквизит, СтрокаСвойств.ЗначениеРеквизита);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СоответствиеДокументов.Вставить(ДанныеДокумента.ИД, ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат СоответствиеДокументов;
	
КонецФункции

Функция НоваяТаблицаТоваровCML()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТипаСтруктура = Новый ОписаниеТипов("Структура");
	ОписаниеТипаСтавкиНДС = Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаТоваров.Колонки.Добавить("Артикул", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("Наименование", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("СвойстваЕдиницы", ОписаниеТипаСтруктура);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("Коэффициент", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОписаниеТипаСтавкиНДС);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("ЦенаВключаетНДС", ОписаниеТипаБулево);
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("НаименованиеСкидки", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("СкидкаУчтеноВСумме", ОписаниеТипаБулево);
	ТаблицаТоваров.Колонки.Добавить("КомментарийКСкидке", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("ЦенаПродажи", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения", ОписаниеТипаЧисло);
	ТаблицаТоваров.Колонки.Добавить("Упаковка", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", ОписаниеТипаСтрока);
	ТаблицаТоваров.Колонки.Добавить("Сопоставление", ОписаниеТипаСтруктура);
	ТаблицаТоваров.Колонки.Добавить("ДанныеДля1С", ОписаниеТипаСтруктура);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Процедура ДобавитьСтрокуТовараВТаблицуCML(ТаблицаТоваров, СтрокаТовара)
	
	СвойстваСтрокиТовара = Новый Структура;
	СвойстваДля1С = Новый Структура;
	
	ЕстьСвойстваДля1С = Ложь;
	
	Для Каждого СтрокаСвойств Из СтрокаТовара.Строки Цикл
		
		Если СтрНачинаетсяС(СтрокаСвойств.Реквизит, "Для1С_") Тогда
			
			СвойстваДля1С.Вставить(СтрЗаменить(СтрокаСвойств.Реквизит, "Для1С_", ""),
				СтрокаСвойств.ЗначениеРеквизита);
			
			ЕстьСвойстваДля1С = Истина;
			Продолжить;
			
		КонецЕсли;
		
		СвойстваСтрокиТовара.Вставить(СтрокаСвойств.Реквизит, СтрокаСвойств.ЗначениеРеквизита);
		
	КонецЦикла;
	
	НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СвойстваСтрокиТовара);
	
	Если ЕстьСвойстваДля1С Тогда
		НоваяСтрокаТовара.ДанныеДля1С = СвойстваДля1С;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаВалютПоСтрокеДереваCML(СтрокаВалют)
	
	ТаблицаВалют = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповВалюты = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	
	ТаблицаВалют.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаВалют.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	ТаблицаВалют.Колонки.Добавить("СсылкаНаОбъект", ОписаниеТиповВалюты);
	
	ТаблицаВалют.Колонки.Добавить("Код", ОписаниеТиповСтрока);
	ТаблицаВалют.Колонки.Добавить("КодМКВ", ОписаниеТиповСтрока);
	ТаблицаВалют.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	ТаблицаВалют.Колонки.Добавить("НаименованиеПолное", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаВалют.Строки Цикл
		
		НоваяВалюта = ТаблицаВалют.Добавить();
		
		НоваяВалюта.ИД = Строка.ИД;
		НоваяВалюта.ИндексСтроки = Строка.ИндексСтроки;
		НоваяВалюта.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "Код" Тогда
				НоваяВалюта.Код = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "КодМКВ" Тогда
				НоваяВалюта.КодМКВ = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Наименование" Тогда
				НоваяВалюта.Наименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "НаименованиеПолное" Тогда
				НоваяВалюта.НаименованиеПолное = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВалют;
	
КонецФункции

Функция ТаблицаКонтрагентовПоСтрокеДереваCML(СтрокаКонтрагентов)
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповСтруктура = Новый ОписаниеТипов("Структура");
	
	ТаблицаКонтрагентов.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	
	ТаблицаКонтрагентов.Колонки.Добавить("ПолноеНаименование", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("ОфициальноеНаименование", ОписаниеТиповСтрока); 
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("КПП", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("ФактическийАдрес_Представление", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("АдресСтруктурой", ОписаниеТиповСтруктура);
	ТаблицаКонтрагентов.Колонки.Добавить("Роль", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("БанковскийСчетКонтрагента", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаКонтрагентов.Строки Цикл
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Добавить();
		
		НовыйКонтрагент.ИД = Строка.ИД;
		НовыйКонтрагент.ИндексСтроки = Строка.ИндексСтроки;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "ПолноеНаименование" Тогда
				НовыйКонтрагент.ПолноеНаименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "ОфициальноеНаименование" Тогда
				НовыйКонтрагент.ОфициальноеНаименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "ИНН" Тогда
				НовыйКонтрагент.ИНН = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "КПП" Тогда
				НовыйКонтрагент.КПП = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "ФактическийАдрес_Представление" Тогда
				НовыйКонтрагент.ФактическийАдрес_Представление = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "АдресСтруктурой" Тогда
				НовыйКонтрагент.АдресСтруктурой = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Роль" Тогда
				НовыйКонтрагент.Роль = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "БанковскийСчетКонтрагента" Тогда
				НовыйКонтрагент.БанковскийСчетКонтрагента = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

Функция ТаблицаОрганизацийПоСтрокеДереваCML(СтрокаОрганизаций)
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповСтруктура = Новый ОписаниеТипов("Структура");
	
	ТаблицаОрганизаций.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаОрганизаций.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	
	ТаблицаОрганизаций.Колонки.Добавить("ПолноеНаименование", ОписаниеТиповСтрока);
	ТаблицаОрганизаций.Колонки.Добавить("ИНН", ОписаниеТиповСтрока);
	ТаблицаОрганизаций.Колонки.Добавить("КПП", ОписаниеТиповСтрока);
	ТаблицаОрганизаций.Колонки.Добавить("ФактическийАдрес_Представление", ОписаниеТиповСтрока);
	ТаблицаОрганизаций.Колонки.Добавить("АдресСтруктурой", ОписаниеТиповСтруктура);
	ТаблицаОрганизаций.Колонки.Добавить("Роль", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаОрганизаций.Строки Цикл
		
		НоваяОрганизация = ТаблицаОрганизаций.Добавить();
		
		НоваяОрганизация.ИД = Строка.ИД;
		НоваяОрганизация.ИндексСтроки = Строка.ИндексСтроки;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "ПолноеНаименование" Тогда
				НоваяОрганизация.ПолноеНаименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "ИНН" Тогда
				НоваяОрганизация.ИНН = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "КПП" Тогда
				НоваяОрганизация.КПП = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "ФактическийАдрес_Представление" Тогда
				НоваяОрганизация.ФактическийАдрес_Представление = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "АдресСтруктурой" Тогда
				НоваяОрганизация.АдресСтруктурой = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Роль" Тогда
				НоваяОрганизация.Роль = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОрганизаций;
	
КонецФункции

Функция ТаблицаЕдиницИзмеренияПоСтрокеДереваCML(СтрокаЕдиницИзмерения)
	
	ТаблицаЕдиницИзмерения = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЕдиницыИзмерения = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	
	ТаблицаЕдиницИзмерения.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаЕдиницИзмерения.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	ТаблицаЕдиницИзмерения.Колонки.Добавить("СсылкаНаОбъект", ОписаниеТиповЕдиницыИзмерения);
	
	ТаблицаЕдиницИзмерения.Колонки.Добавить("Код", ОписаниеТиповСтрока);
	ТаблицаЕдиницИзмерения.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	ТаблицаЕдиницИзмерения.Колонки.Добавить("НаименованиеПолное", ОписаниеТиповСтрока);
	ТаблицаЕдиницИзмерения.Колонки.Добавить("МеждународноеСокращение", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаЕдиницИзмерения.Строки Цикл
		
		НоваяЕдиницаИзмерения = ТаблицаЕдиницИзмерения.Добавить();
		
		НоваяЕдиницаИзмерения.ИД = Строка.ИД;
		НоваяЕдиницаИзмерения.ИндексСтроки = Строка.ИндексСтроки;
		НоваяЕдиницаИзмерения.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "Код" Тогда
				НоваяЕдиницаИзмерения.Код = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Наименование" Тогда
				НоваяЕдиницаИзмерения.Наименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "НаименованиеПолное" Тогда
				НоваяЕдиницаИзмерения.НаименованиеПолное = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "МеждународноеСокращение" Тогда
				НоваяЕдиницаИзмерения.МеждународноеСокращение = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЕдиницИзмерения;
	
КонецФункции

Функция ТаблицаНоменклатурыПоСтрокеДереваCML(СтрокаНоменклатуры)
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаНоменклатуры.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	
	ТаблицаНоменклатуры.Колонки.Добавить("ИдентификаторНоменклатуры", ОписаниеТиповСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("Артикул", ОписаниеТиповСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТиповСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаНоменклатуры.Строки Цикл
		
		НоваяНоменклатура = ТаблицаНоменклатуры.Добавить();
		
		НоваяНоменклатура.ИД = Строка.ИД;
		НоваяНоменклатура.ИндексСтроки = Строка.ИндексСтроки;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "Ид" Тогда
				НоваяНоменклатура.ИдентификаторНоменклатуры = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Наименование" Тогда
				НоваяНоменклатура.Наименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Артикул" Тогда
				НоваяНоменклатура.Артикул = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "ЕдиницаИзмерения" Тогда
				НоваяНоменклатура.ЕдиницаИзмерения = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "НомерСтроки" Тогда
				НоваяНоменклатура.НомерСтроки = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Функция ТаблицаБанковПоСтрокеДереваCML(СтрокаБанков)
	
	ТаблицаБанков = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаБанков.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаБанков.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	
	ТаблицаБанков.Колонки.Добавить("Код", ОписаниеТиповСтрока);
	ТаблицаБанков.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	ТаблицаБанков.Колонки.Добавить("КоррСчет", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаБанков.Строки Цикл
		
		НовыйБанк = ТаблицаБанков.Добавить();
		
		НовыйБанк.ИД = Строка.ИД;
		НовыйБанк.ИндексСтроки = Строка.ИндексСтроки;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "Код" Тогда
				НовыйБанк.Код = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Наименование" Тогда
				НовыйБанк.Наименование = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "КоррСчет" Тогда
				НовыйБанк.КоррСчет = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаБанков;
	
КонецФункции

Функция ТаблицаБанковскихСчетовКонтрагентовПоСтрокеДереваCML(СтрокаСчетовКонтрагентов)
	
	ТаблицаБанковскихСчетовКонтрагентов = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаБанковскихСчетовКонтрагентов.Колонки.Добавить("ИД", ОписаниеТиповСтрока);
	ТаблицаБанковскихСчетовКонтрагентов.Колонки.Добавить("ИндексСтроки", ОписаниеТиповСтрока);
	
	ТаблицаБанковскихСчетовКонтрагентов.Колонки.Добавить("НомерСчета", ОписаниеТиповСтрока);
	ТаблицаБанковскихСчетовКонтрагентов.Колонки.Добавить("Комментарий", ОписаниеТиповСтрока);
	ТаблицаБанковскихСчетовКонтрагентов.Колонки.Добавить("Банк", ОписаниеТиповСтрока);
	ТаблицаБанковскихСчетовКонтрагентов.Колонки.Добавить("БанкКорреспондент", ОписаниеТиповСтрока);
	
	Для Каждого Строка Из СтрокаСчетовКонтрагентов.Строки Цикл
		
		НовыйСчет = ТаблицаБанковскихСчетовКонтрагентов.Добавить();
		
		НовыйСчет.ИД = Строка.ИД;
		НовыйСчет.ИндексСтроки = Строка.ИндексСтроки;
		
		Для Каждого СтрокаСвойств Из Строка.Строки Цикл
			
			Если СтрокаСвойств.Реквизит = "НомерСчета" Тогда
				НовыйСчет.НомерСчета = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Комментарий" Тогда
				НовыйСчет.Комментарий = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "Банк" Тогда
				НовыйСчет.Банк = СтрокаСвойств.ЗначениеРеквизита;
			ИначеЕсли СтрокаСвойств.Реквизит = "БанкКорреспондент" Тогда
				НовыйСчет.БанкКорреспондент = СтрокаСвойств.ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаБанковскихСчетовКонтрагентов;
	
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиДереваРазбора

Функция ДанныеВалютыПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиВалюты, Ошибки = Неопределено) Экспорт
	
	ДанныеВалюты = Новый Структура;
	ДанныеВалюты.Вставить("Ссылка", Справочники.Валюты.ПустаяСсылка());
	ДанныеВалюты.Вставить("Код", "");
	ДанныеВалюты.Вставить("КодМКВ", "");
	ДанныеВалюты.Вставить("Наименование", "");
	ДанныеВалюты.Вставить("НаименованиеПолное", "");
	
	ТаблицаВалют = ДанныеДереваРазбора.Валюты;
	
	Если ТаблицаВалют = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о валютах из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиВалюты = ТаблицаВалют.НайтиСтроки(
		Новый Структура("ИндексСтроки", ИндексСтрокиВалюты));
	
	Если СтрокиВалюты.Количество() = 0 Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о валюте документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеВалюты, СтрокиВалюты[0]);
	
	Возврат ДанныеВалюты;
	
КонецФункции

Функция ДанныеКонтрагентаПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиКонтрагента, Ошибки = Неопределено)
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("ПолноеНаименование", "");
	ДанныеКонтрагента.Вставить("ОфициальноеНаименование", "");
	ДанныеКонтрагента.Вставить("ИНН", "");
	ДанныеКонтрагента.Вставить("КПП", "");
	ДанныеКонтрагента.Вставить("ФактическийАдрес_Представление", "");
	ДанныеКонтрагента.Вставить("АдресСтруктурой", Неопределено);
	ДанныеКонтрагента.Вставить("Роль", "");
	ДанныеКонтрагента.Вставить("БанковскийСчетКонтрагента", Неопределено);
	
	ТаблицаКонтрагентов = ДанныеДереваРазбора.Контрагенты;
	
	Если ТаблицаКонтрагентов = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о контрагентов из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиКонтрагентов = ТаблицаКонтрагентов.НайтиСтроки(
		Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента));
	
	Если СтрокиКонтрагентов.Количество() = 0 Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о контрагенте документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, СтрокиКонтрагентов[0], , "БанковскийСчетКонтрагента");
	
	ИндексСтрокиСчета = СтрокиКонтрагентов[0].БанковскийСчетКонтрагента;
	
	Если ЗначениеЗаполнено(ИндексСтрокиСчета) Тогда
		ДанныеКонтрагента.БанковскийСчетКонтрагента =
			ДанныеСчетаКонтрагентаПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиСчета, Ошибки);
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Функция ДанныеСчетаКонтрагентаПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиСчета, Ошибки = Неопределено)
	
	ДанныеСчетаКонтрагента = Новый Структура;
	
	ДанныеСчетаКонтрагента.Вставить("НомерСчета", "");
	ДанныеСчетаКонтрагента.Вставить("Комментарий", "");
	ДанныеСчетаКонтрагента.Вставить("Банк", Неопределено);
	ДанныеСчетаКонтрагента.Вставить("БанкКорреспондент", Неопределено);
	
	ТаблицаСчетов = ДанныеДереваРазбора.БанковскиеСчетаКонтрагентов;
	
	Если ТаблицаСчетов = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о банковских счетах контрагентов из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиСчета = ТаблицаСчетов.НайтиСтроки(
		Новый Структура("ИндексСтроки", ИндексСтрокиСчета));
	
	Если СтрокиСчета.Количество() = 0 Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о банковском счете контрагента документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСчетаКонтрагента, СтрокиСчета[0], , 
		"Банк, БанкКорреспондент");
	
	ИндексСтрокиБанка = СтрокиСчета[0].Банк;
	
	Если ЗначениеЗаполнено(ИндексСтрокиБанка) Тогда
		ДанныеСчетаКонтрагента.Банк =
			ДанныеБанкаПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиБанка, Ошибки);
	КонецЕсли;
	
	ИндексСтрокиБанка = СтрокиСчета[0].БанкКорреспондент;
	
	Если ЗначениеЗаполнено(ИндексСтрокиБанка) Тогда
		ДанныеСчетаКонтрагента.БанкКорреспондент =
			ДанныеБанкаПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиБанка, Ошибки);
	КонецЕсли;
	
	Возврат ДанныеСчетаКонтрагента;
	
КонецФункции

Функция ДанныеБанкаПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиБанка, Ошибки = Неопределено)
	
	ДанныеБанка = Новый Структура;
	
	ДанныеБанка.Вставить("Код", "");
	ДанныеБанка.Вставить("Наименование", "");
	ДанныеБанка.Вставить("КоррСчет", "");
	
	ТаблицаБанков = ДанныеДереваРазбора.Банки;
	
	Если ТаблицаБанков = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о банках из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиБанка = ТаблицаБанков.НайтиСтроки(
		Новый Структура("ИндексСтроки", ИндексСтрокиБанка));
	
	Если СтрокиБанка.Количество() = 0 Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о банке в документе из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеБанка, СтрокиБанка[0]);
	
	Возврат ДанныеБанка;
	
КонецФункции

Функция ДанныеОрганизацииПоДаннымCML(ДанныеДереваРазбора, ИндексСтрокиОрганизации, Ошибки = Неопределено)
	
	ДанныеОрганизации = Новый Структура;
	
	ДанныеОрганизации.Вставить("ПолноеНаименование", "");
	ДанныеОрганизации.Вставить("ИНН", "");
	ДанныеОрганизации.Вставить("КПП", "");
	ДанныеОрганизации.Вставить("ФактическийАдрес_Представление", "");
	ДанныеОрганизации.Вставить("АдресСтруктурой", Неопределено);
	ДанныеОрганизации.Вставить("Роль", "");
	
	ТаблицаОрганизаций = ДанныеДереваРазбора.Организации;
	
	Если ТаблицаОрганизаций = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о организациях из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиОрганизаций = ТаблицаОрганизаций.НайтиСтроки(
		Новый Структура("ИндексСтроки", ИндексСтрокиОрганизации));
	
	Если СтрокиОрганизаций.Количество() = 0 Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить данные о организации документа из дерева разбора CML.'");
		ДобавитьОшибкуРазбораCML(ОписаниеПроблемы, Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации, СтрокиОрганизаций[0]);
	
	Возврат ДанныеОрганизации;
	
КонецФункции


#КонецОбласти

Процедура ДобавитьОшибкуРазбораCML(ТекстОшибки, МассивОшибок)
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив;
	КонецЕсли;
	
	МассивОшибок.Добавить(ТекстОшибки);
	
КонецПроцедуры

Процедура ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ЗначениеРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДокумента, ПутьКДанным);
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ПутьКДанным, ".", "");
	
	Если ВРег(ИмяРеквизита) = ВРег("ВидОперации") Тогда
		ЗначениеРеквизита = XMLСтрока(ЗначениеРеквизита);
	КонецЕсли;
	
	Если ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяРеквизита, ЗначениеРеквизита);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	
КонецПроцедуры

#КонецОбласти