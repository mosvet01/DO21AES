////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO
// Реализует функционал веб-сервиса DMService
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает результат обработки универсальных сообщений
// 
// Параметры:
//   Сообщение - ОбъектXDTO, потомок DMRequest
// Возвращаемое значение:
//   ОбъектXDTO, потомок DMResponse
// 
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		НачалоЗамераВремени = ТекущаяДатаСеанса();
		
		Результат = ОбработкаЗапросовXDTOПереопределяемый.ОбработатьУниверсальноеСообщение(Сообщение);
		Если Результат = Неопределено Тогда
			
			Если ПроверитьТип(Сообщение, "DMCreateRequest") Тогда
				Результат = Создать(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRetrieveRequest") Тогда
				Результат = ПолучитьОбъекты(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateRequest") Тогда
				Результат = ЗаписатьОбъекты(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMDeleteRequest") Тогда
				Результат = ПометитьНаУдаление(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetNewObjectRequest") Тогда
				Результат = ПолучитьНовыйОбъект(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetCurrentUserRequest") Тогда
				Результат = ПолучитьТекущегоПользователя(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetTasksTreeRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСписокЗадачПоОбъекту(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetFileListRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ПолучитьСписокФайлов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectListRequest") Тогда
				Результат = ПолучитьДоступныеЗначенияДляВыбора(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAddLinkedFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ДобавитьФайлСДиска(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetSettingsRequest") Тогда
				Результат = ПолучитьНастройки(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetSubFoldersRequest") Тогда
				Результат = ПолучитьПодпапки(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetFileListByOwnerRequest") Тогда
				Результат = ПолучитьСписокФайловПоВладельцу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDocumentListByOwnerRequest") Тогда
				Результат = ПолучитьСписокДокументовПоВладельцу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAddObjectLinkRequest") Тогда
				Результат = ДобавитьСсылкуНаВнешнийОбъект(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRemoveObjectLinkRequest") Тогда
				Результат = УдалитьСсылкуНаВнешнийОбъект(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMLaunchBusinessProcessRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.СтартоватьБизнесПроцесс(Сообщение.businessProcess);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDocumentListRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ПолучитьДокументы(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetNewBusinessProcessRequest") Тогда
				Результат = ПолучитьСостояниеНовогоБизнесПроцесса(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAddFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ДобавитьФайлВДокумент(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectAdditionalPropertiesRequest") Тогда
				Результат = ПолучитьДополнительныеРеквизитыОбъекта(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetBusinessProcessTemplatesRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьШаблоныБизнесПроцесса(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetBusinessProcessTemplatesTreeRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьДеревоШаблоновБизнесПроцессов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetTemplateHintRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСводкуШаблонаБизнесПроцесса(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetBusinessProcessByTemplateRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьБизнесПроцессПоШаблону(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRedirectTasksRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПеренаправитьЗадачи(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMDocumentRegistrationRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ЗарегистрироватьДокумент(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAddDocumentRelationRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.СоздатьСвязьДокументов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRemoveDocumentRelationRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.УдалитьСвязьДокументов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetVersionRequest") Тогда
				Результат = ПолучитьВерсиюСервиса();
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetPredefinedObjectRequest") Тогда
				Результат = ПолучитьПредопределенноеЗначение(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetChronometrationSettingsRequest") Тогда
				Результат = ОбработкаЗапросовXDTOУчетВремени.ПолучитьПараметрыХронометража(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMSetChronometrationSettingsRequest") Тогда
				Результат = ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыХронометража(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMBatchRequest") Тогда
				Результат = ОбработатьПакет(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDefaultValuesByDocumentTypeRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ЗначенияРеквизитовПоУмолчанию(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetApprovalSheetRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьЛистСогласования(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMLockFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗанятьФайл(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUnlockFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ОсвободитьФайл(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetFileEditingInfoRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ПолучитьСведенияОРедактированииФайла(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateFileEditingInfoRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗаписатьСведенияОРедактированииФайла(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAutoFillRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗаполнитьПоляФайлаДаннымиВладельца(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateFilesRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ЗаписатьИзмененияФайлов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetCaseFilesListSectionsTreeRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ПолучитьДеревоРазделовНоменклатурыДел(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetCaseFilesDossiersRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ПолучитьСписокДелХраненияДокументов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetCaseFilesCatalogRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ПолучитьСписокНоменклатурыДел(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetTimeTrackingPolicyRequest") Тогда
				Результат = ОбработкаЗапросовXDTOУчетВремени.ПолучитьПолитикуУчетаРабочегоВремени();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ВремяВыполнения = ТекущаяДатаСеанса() - НачалоЗамераВремени;
			Если ВремяВыполнения > 15 Тогда
				ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Неизвестное сообщение'");
		Ошибка.description = Строка(Сообщение.Тип());
		
		Возврат Ошибка;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объекты Документооборота по запросу DMRetrieveRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRetrieveRequest - запрос на получение
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMRetrieveResponse или DMError
//
Функция ПолучитьОбъекты(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMRetrieveResponse");
		
		Для Каждого ОбъектИд Из Сообщение.objectIds Цикл
			
			
			Объект = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьОбъектПоObjectID(ОбъектИд, Сообщение.columnSet);
			
			Если Объект <> Неопределено Тогда
				
				Если ПроверитьТип(Объект, "DMError") Тогда
					Возврат Объект
				КонецЕсли;
				
				Ответ.objects.Добавить(Объект);
				
				Продолжить;
				
			КонецЕсли;
			
			Если ОбъектИд.type = "DMFile" Тогда
				Объект = ОбработкаЗапросовXDTOФайлы.ПолучитьКарточкуФайла(ОбъектИд.id, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMFileVersion" Тогда
				Объект = ОбработкаЗапросовXDTOФайлы.ПолучитьВерсиюФайла(ОбъектИд.id, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMBusinessProcessTask"
					Или ОбъектИд.type = "DMBusinessProcessOrderTaskCheckup"
					Или ОбъектИд.type = "DMBusinessProcessApprovalTaskApproval"
					Или ОбъектИд.type = "DMBusinessProcessApprovalTaskCheckup"
					Или ОбъектИд.type = "DMBusinessProcessConfirmationTaskConfirmation"
					Или ОбъектИд.type = "DMBusinessProcessConfirmationTaskCheckup"
					Или ОбъектИд.type = "DMBusinessProcessRegistrationTaskRegistration"
					Или ОбъектИд.type = "DMBusinessProcessRegistrationTaskCheckup"
					Или ОбъектИд.type = "DMBusinessProcessConsiderationTaskAcquaint"
					Или ОбъектИд.type = "DMBusinessProcessPerfomanceTaskCheckup"
					Или ОбъектИд.type = "DMBusinessProcessIssuesSolutionTaskQuestion"
					Или ОбъектИд.type = "DMBusinessProcessIssuesSolutionTaskAnswer"
					Или ОбработкаЗапросовXDTOПереопределяемый.ПроверитьТипОбъектаПриПолученииЗадачи(ОбъектИд) Тогда
					
				ВыполняетсяЗапросHTMLПредставления = Ложь;
				ПолучитьЗависимыеОбъекты = Ложь;
				Для Каждого Колонка Из Сообщение.columnSet Цикл
					Если Колонка = "HTMLView" Тогда
						ВыполняетсяЗапросHTMLПредставления = Истина;
						Прервать;
					КонецЕсли;
					Если Колонка = "withDependentObjects" Тогда
						ПолучитьЗависимыеОбъекты = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ВыполняетсяЗапросHTMLПредставления Тогда
					Объект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьHTMLФормы(ОбъектИд);
				Иначе
					Объект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьЗадачуБизнесПроцесса(
						ОбъектИд,
						ПолучитьЗависимыеОбъекты,
						Истина);
				КонецЕсли;
				
			ИначеЕсли ОбъектИд.type = "DMBusinessProcessPerformance"
				Или ОбъектИд.type = "DMBusinessProcessPerformance_1.2.1.11"
				Или ОбъектИд.type = "DMBusinessProcessAcquaintance"
				Или ОбъектИд.type = "DMBusinessProcessOrder"
				Или ОбъектИд.type = "DMBusinessProcessConsideration"
				Или ОбъектИд.type = "DMBusinessProcessRegistration"
				Или ОбъектИд.type = "DMBusinessProcessApproval"
				Или ОбъектИд.type = "DMBusinessProcessApproval_1.2.1.11"
				Или ОбъектИд.type = "DMBusinessProcessConfirmation"
				Или ОбъектИд.type = "DMBusinessProcessInternalDocumentProcessing"
				Или ОбъектИд.type = "DMBusinessProcessIncomingDocumentProcessing"
				Или ОбъектИд.type = "DMBusinessProcessOutgoingDocumentProcessing"
				Или ОбъектИд.type = "DMBusinessProcessIssuesSolution"
				Или ОбработкаЗапросовXDTOПереопределяемый.ПроверитьТипОбъектаПриПолученииПроцесса(ОбъектИД) Тогда
				
				Объект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьБизнесПроцесс(ОбъектИд);
				
			ИначеЕсли ОбъектИд.type = "DMBusinessProcessExecutorRole" Тогда
				Объект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьРольИсполнителей(ОбъектИд);
				
			ИначеЕсли ОбъектИд.type = "DMIncomingDocument" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьВходящийДокумент(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMOutgoingDocument" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьИсходящийДокумент(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMInternalDocument" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьВнутреннийДокумент(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMIncomingDocumentTemplate" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьШаблонВходящегоДокумента(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMOutgoingDocumentTemplate" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьШаблонИсходящегоДокумента(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMInternalDocumentTemplate" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьШаблонВнутреннегоДокумента(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMInternalDocumentType"
					Или ОбъектИд.type = "DMIncomingDocumentType"
					Или ОбъектИд.type = "DMOutgoingDocumentType" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьВидДокумента(ОбъектИд);
				
			ИначеЕсли ОбъектИд.type = "DMInternalDocumentFolder" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьПапкуВнутреннихДокументов(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMSubdivision" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьПодразделение(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMMeasurementUnit" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьЕдиницуИзмерения(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMProduct" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьНоменклатуру(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMCurrency" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьВалюту(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMBank" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьБанк(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMBankAccount" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьБанковскийСчет(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMContactInformationKind" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьВидКонтактнойИнформации(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMUser" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьПользователя(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMContactPerson" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьКонтактноеЛицо(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMPrivatePerson" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьФизическоеЛицо(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMOrganization" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьОрганизацию(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMCorrespondent" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьКонтрагента(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMDailyReport" Тогда
				Объект = ОбработкаЗапросовXDTOУчетВремени.ПолучитьЕжедневныйОтчет(ОбъектИд);
				
			ИначеЕсли ОбъектИд.type = "DMWeeklyReport" Тогда
				Объект = ОбработкаЗапросовXDTOУчетВремени.ПолучитьЕженедельныйОтчет(ОбъектИд);
				
			ИначеЕсли ОбъектИд.type = "DMApplicationNotification" Тогда
				Объект = ОбработкаЗапросовXDTO.ПолучитьУведомлениеПрограммы(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMMeasurementUnit" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьЕдиницуИзмерения(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMProduct" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьНоменклатуру(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMCaseFilesListSections" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьРазделНоменклатурыДел(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMCaseFilesCatalog" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьНоменклатуруДел(ОбъектИд, Сообщение.columnSet);
				
			ИначеЕсли ОбъектИд.type = "DMCaseFilesDossiers" Тогда
				Объект = ОбработкаЗапросовXDTOДокументы.ПолучитьДелоХраненияДокументов(ОбъектИд, Сообщение.columnSet);
				
			Иначе
				Объект = ПолучитьНеОписанныйОбъект(ОбъектИД);
				
			КонецЕсли;
			
			Если ПроверитьТип(Объект, "DMError") Тогда
				Возврат Объект
			КонецЕсли;
			
			Ответ.objects.Добавить(Объект);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении объектов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// В транзакции помечает на удаление объекты Документооборота
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMDeleteRequest - запрос на удаление
// Возвращаемое значение:
//   ОбъектXDTO типа DMDeleteResponse или DMError
// 
Функция ПометитьНаУдаление(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = СоздатьОбъект("DMDeleteResponse");
		
		НачатьТранзакцию();
		Попытка
		
			Для Каждого ОбъектИд Из Сообщение.objectIds Цикл
				
				СсылкаОбъектаД8 = ПолучитьСсылкуПоObjectID(ОбъектИд);
				Если Не ЗначениеЗаполнено(СсылкаОбъектаД8) Тогда
					ВызватьИсключение НСтр("ru = 'Объект не найден'");
				КонецЕсли;
				
				ЗаблокироватьДанныеДляРедактирования(СсылкаОбъектаД8);
				ОбъектД8 = СсылкаОбъектаД8.ПолучитьОбъект();
				ОбъектД8.УстановитьПометкуУдаления(Не ОбъектД8.ПометкаУдаления);
				РазблокироватьДанныеДляРедактирования(СсылкаОбъектаД8);
				
			КонецЦикла;
		
			ЗафиксироватьТранзакцию();
		Исключение
		     ОтменитьТранзакцию();
		     ВызватьИсключение;
		КонецПопытки;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при установке пометки удаления'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Заполняет список externalObjects в объекте XDTO ссылками на внешние объекты.
//
// Параметры:
//   Объект - ЛюбаяСсылка - ссылка на объект Документооборота.
//   ОбъектXDTO - ОбъектXDTO - потомок DMObject, в котором заполняется список externalObjects.
//
Процедура ЗаполнитьСписокВнешнихОбъектов(Объект, ОбъектXDTO) Экспорт
	
	СписокВнешнихОбъектов = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.
		ПолучитьСписокВнешнихОбъектов(Объект);
	ОбъектXDTO.externalObjects.Очистить();
	
	Для Каждого ВнешнийОбъект Из СписокВнешнихОбъектов Цикл
		
		ВнешнийОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject");
		ВнешнийОбъектXDTO.id = ВнешнийОбъект.Идентификатор;
		ВнешнийОбъектXDTO.type = ВнешнийОбъект.Тип;
		ВнешнийОбъектXDTO.name = "";
		ОбъектXDTO.externalObjects.Добавить(ВнешнийОбъектXDTO);
		
		Если Не ОбъектXDTO.Установлено("externalObject") Тогда
			ВнешнийОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject");
			ВнешнийОбъектXDTO.id = ВнешнийОбъект.Идентификатор;
			ВнешнийОбъектXDTO.type = ВнешнийОбъект.Тип;
			ВнешнийОбъектXDTO.name = "";
			ОбъектXDTO.externalObject = ВнешнийОбъектXDTO;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает объект XDTO типа DMObject по его ID
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
// Возвращаемое значение:
//   ОбъектXDTO типа DMObject или DMError
// 
Функция ПолучитьНеОписанныйОбъект(ОбъектИд) Экспорт
	
	Попытка 
		
		Ссылка = ПолучитьСсылкуПоObjectID(ОбъектИд);
		
		Объект = СоздатьОбъект("DMObject");
		Объект.objectID = ПолучитьObjectIDПоСсылке(Ссылка);
		Объект.name = Строка(Ссылка);
		
		Возврат Объект;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении объекта типа %ТипОбъекта%'");
		Ошибка.subject = СтрЗаменить(Ошибка.subject,"%ТипОбъекта%", ОбъектИд.type);
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает список подпапок по папке-родителю
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetSubFoldersRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetSubFoldersResponse или DMError
// 
Функция ПолучитьПодпапки(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = СоздатьОбъект("DMGetSubFoldersResponse");
		
		ИдентификаторКорневойПапки = Сообщение.folder.id;
		Если Сообщение.folder.type = "DMFileFolder" Тогда
			МассивПапок = ОбработкаЗапросовXDTOФайлы.ПолучитьСписокПапок(ИдентификаторКорневойПапки);
		ИначеЕсли Сообщение.folder.type = "DMInternalDocumentFolder" Тогда
			МассивПапок = ОбработкаЗапросовXDTOДокументы.ПолучитьСписокПапок(ИдентификаторКорневойПапки);
		КонецЕсли;
		
		Для Каждого СтруктураПапки Из МассивПапок Цикл
			ОбъектDMFolder = СоздатьОбъект(Сообщение.folder.type);
			
			ОбъектDMFolder.name = СтруктураПапки.Наименование;
			
			ОбъектDMFolder.objectId = СоздатьОбъект("DMObjectID");
			ОбъектDMFolder.objectId.id = Строка(СтруктураПапки.УникальныйИдентификатор);
			ОбъектDMFolder.objectId.type = Сообщение.folder.type;
			
			Ответ.folders.Добавить(ОбъектDMFolder);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка папок'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Проверяет тип объекта XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект
//   Тип - Строка - имя типа XDTO
// Возвращаемое значение:
//   Булево - Истина, если объект является объектом указанного типа
//
Функция ПроверитьТип(ОбъектXDTO, Тип) Экспорт
	
	Возврат (ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO"))
		И (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип));
	
КонецФункции	

// Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dm"
// 
// Параметры:
//   ТипОбъекта - Строка - имя типа XDTO
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект указанного типа
//
Функция СоздатьОбъект(ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/dm", ТипОбъекта));
	
КонецФункции

// Заполняет реквизит объекта информационной базы из свойства объекта XDTO
//
// Параметры:
//   Реквизит - Произвольный - реквизит объекта, подлежащий заполнению
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого соответствует заполняемому реквизиту
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого переносится в реквизит
//
Процедура ЗаполнитьРеквизитИзСвойстваXDTO(Реквизит, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	Если СвойствоУстановлено(ОбъектXDTO, ИмяСвойстваXDTO) Тогда
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда
			Тип = ЗначениеСвойстваXDTO.objectId.type;
			ID  = ЗначениеСвойстваXDTO.objectId.id;
			Если Не ЗначениеЗаполнено(ID) И Не ЗначениеЗаполнено(Тип) И ЗначениеСвойстваXDTO.Установлено("ExternalObject") Тогда
				НовоеЗначение = НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO);
			Иначе
				НовоеЗначение = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId);
			КонецЕсли;
		Иначе
			НовоеЗначение = ЗначениеСвойстваXDTO;
		КонецЕсли;
		
		Если Реквизит <> НовоеЗначение Тогда
			Реквизит = НовоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойство объекта XDTO из реквизита объекта информационной базы
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого требуется заполнить
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого заполняется
//   Реквизит - Произвольный - реквизит объекта, служащий источником
//
Процедура ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, ИмяСвойстваXDTO, Реквизит) Экспорт
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизит)) Тогда
			
			ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
			ЗначениеСвойства = ФабрикаXDTO.Создать(ТипСвойства);
			
			ЗначениеСвойства.objectId = ПолучитьObjectIDПоСсылке(Реквизит);
			ЗначениеСвойства.name = Строка(Реквизит);
			
			// Заполнение ключевых реквизитов контрагентов и организаций.
			Если (ТипЗнч(Реквизит) = Тип("СправочникСсылка.Организации")
					И ТипСвойства = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMOrganization"))
				Или (ТипЗнч(Реквизит) = Тип("СправочникСсылка.Контрагенты")
					И ТипСвойства = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMCorrespondent")) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизит, "ИНН, КПП, ЮрФизЛицо");
				ЗаполнитьСвойствоXDTOИзРеквизита(ЗначениеСвойства, "inn", ЗначенияРеквизитов.ИНН);
				ЗаполнитьСвойствоXDTOИзРеквизита(ЗначениеСвойства, "kpp", ЗначенияРеквизитов.КПП);
				ЗаполнитьСвойствоXDTOИзРеквизита(ЗначениеСвойства, "legalPrivatePerson", ЗначенияРеквизитов.ЮрФизЛицо);
				
			КонецЕсли;
			
			ОбъектXDTO[ИмяСвойстваXDTO] = ЗначениеСвойства;
			
		Иначе // примитивный тип
			
			ОбъектXDTO[ИмяСвойстваXDTO] = Реквизит;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запись в регистр СвязиОбъектовИнтегрированныхСистем по запросу DMAddObjectLinkRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMAddObjectLinkRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMAddObjectLinkResponse или типа DMError.
//
Функция ДобавитьСсылкуНаВнешнийОбъект(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMAddObjectLinkResponse");
		
		СсылкаОбъектаДО8 = ПолучитьСсылкуПоObjectID(Сообщение.linkedObject);
		Если НЕ ЗначениеЗаполнено(СсылкаОбъектаДО8) Тогда
			ВызватьИсключение НСтр("ru = 'Объект не найден'");
		КонецЕсли;
		
		РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
			Сообщение.ownerObject.id,
			Сообщение.ownerObject.type,
			СсылкаОбъектаДО8);
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при добавлении ссылки на внешний объект'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Удаляет запись из регистра СвязиОбъектовИнтегрированныхСистем по запросу DMRemoveObjectLinkRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRemoveObjectLinkRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMRemoveObjectLinkResponse или типа DMError
// 
Функция УдалитьСсылкуНаВнешнийОбъект(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = СоздатьОбъект("DMRemoveObjectLinkResponse");
		
		СсылкаОбъектаД8 = ПолучитьСсылкуПоObjectID(Сообщение.linkedObject);
		Если НЕ ЗначениеЗаполнено(СсылкаОбъектаД8) Тогда
			ВызватьИсключение НСтр("ru = 'Объект не найден'");
		КонецЕсли;
		
		РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.УдалитьСвязьОбъектаДОИВнешнегоОбъекта(
			Сообщение.ownerObject.id, Сообщение.ownerObject.type, СсылкаОбъектаД8);
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при удалении ссылки на внешний объект'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Возвращает ObjectID по ссылке на объект Документооборота
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект Документооборота
//   ТолькоОбязательныеПоля - Булево - заполнять только обязательные поля
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMObjectID
//
Функция ПолучитьObjectIDПоСсылке(Ссылка, ТолькоОбязательныеПоля = Ложь) Экспорт
	
	ОбъектИД = СоздатьОбъект("DMObjectID");
	ОбъектИД.id = ПолучитьIDПоСсылке(Ссылка);
	ОбъектИД.type = ПолучитьИмяТипаСсылки(Ссылка);
	
	Если ТолькоОбязательныеПоля Тогда
		Возврат ОбъектИД;
	КонецЕсли;
	
	Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ОбъектИД.navigationRef = ПолучитьНавигационнуюСсылку(Ссылка);
	Иначе
		ОбъектИД.navigationRef = "";
	КонецЕсли;
	Если Ссылка.Пустая() Тогда
		ОбъектИД.presentation = Ссылка.Метаданные().Синоним;
	Иначе
		ОбъектИД.presentation = Строка(Ссылка);
	КонецЕсли;
	
	Возврат ОбъектИД;
	
КонецФункции

// Возвращает ссылку на объект Документооборота по ObjectID
//
// Параметры:
//   objectId - ОбъектXDTO типа DMObjectID
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект Документооборота
//
Функция ПолучитьСсылкуПоObjectID(objectId) Экспорт
	
	Ссылка = Неопределено;
	
	Если objectId <> Неопределено И objectId.type <> "" Тогда
		
		ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
		Строка = ТаблицаСоответствия.Найти(objectId.type, "ИмяXDTO");
		Если Строка = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Попытка получить ссылку 1С:Документооборота для неизвестного типа XDTO: %1'"),
				objectId.type);
		КонецЕсли;
		ИмяТипа = Строка["ИмяДО"];
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипа);
		Ссылка = Менеджер.ПустаяСсылка();
		
		Если objectId.id <> "" Тогда
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(objectId.id) Тогда
				Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(objectId.id));
			Иначе // возможно, это имя предопределенного элемента или перечисление
				Попытка
					Ссылка = Менеджер[objectId.id];
				Исключение
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Нет значения ""%1"" среди значений типа ""%2""'"),
						objectId.id,
						ИмяТипа);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает значение перечисления по имени и имени или синониму значения.
//
// Параметры:
//   ИмяПеречисления - Строка - имя перечисления.
//   ИмяИлиСинонимЗначения - Строка - имя или синоним значения перечисления.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на значение перечисления.
//
Функция ЗначениеПеречисленияПоИмениИлиСинониму(ИмяПеречисления, Знач ИмяИлиСинонимЗначения) Экспорт
	
	ЗначениеПеречисления = Перечисления[ИмяПеречисления].ПустаяСсылка();
	ИмяИлиСинонимЗначения = СокрЛП(ИмяИлиСинонимЗначения);
	Если ИмяИлиСинонимЗначения <> "" Тогда
		МетаданныеПеречисления = Метаданные.Перечисления[ИмяПеречисления];
		Если МетаданныеПеречисления.ЗначенияПеречисления.Найти(ИмяИлиСинонимЗначения) = Неопределено Тогда
			// Заполним перечисление по переданному синониму
			Для Каждого МетаданныеЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
				Если ВРег(СокрЛП(МетаданныеЗначениеПеречисления.Синоним)) = ВРег(ИмяИлиСинонимЗначения) Тогда
					ЗначениеПеречисления = Перечисления[ИмяПеречисления][МетаданныеЗначениеПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе // по имени
			ЗначениеПеречисления = Перечисления[ИмяПеречисления][ИмяИлиСинонимЗначения];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Возвращает UUID по ссылке на объект Документооборота
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект Документооборота
// Возвращаемое значение:
//   Строка - строковое представление UUID или имя значения перечисления
//
Функция ПолучитьIDПоСсылке(Ссылка) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат "";
	КонецЕсли;
	
	Тип = ТипЗнч(Ссылка);
	Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(Ссылка);
	Иначе
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

// Возвращает имя типа XDTO по ссылке на объект Документооборота
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект Документооборота
// Возвращаемое значение:
//   Строка - имя типа XDTO 
// 
Функция ПолучитьИмяТипаСсылки(Ссылка) Экспорт
	
	ИмяТипа = Ссылка.Метаданные().ПолноеИмя();
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипа, "ИмяДО");
	Если Строка = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Попытка получить имя типа ссылки для неизвестного типа: %1'"), ИмяТипа);
	Иначе
		Возврат Строка["ИмяXDTO"];
	КонецЕсли;
	
КонецФункции

// Возвращает имя типа Документооборота по имени типа XDTO
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO
//   ИмяТипаДляЗапроса - Строка - неявно возвращаемое значение, имя типа для вставки в запрос
// Возвращаемое значение:
//   Строка - полное имя типа Документооборота
// 
Функция ПолучитьТипДОПоТипуXDTO(ИмяТипаXDTO, ИмяТипаДляЗапроса) Экспорт
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяXDTO");
	
	Если Строка = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Попытка получить тип 1С:Документооборота для неизвестного типа XDTO: %1'"), ИмяТипаXDTO);
	КонецЕсли;
	
	ИмяТипа = Строка["ИмяДО"];
	ИмяТипаДляЗапроса = ИмяТипа;
	ИмяТипа = СтрЗаменить(ИмяТипа, "Справочник.", 			  "Справочники.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Документ.", 			  "Документы.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Перечисление.", 		  "Перечисления.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Задача.", 				  "Задачи.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "БизнесПроцесс.", 		  "БизнесПроцессы.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "ПланВидовХарактеристик.", "ПланыВидовХарактеристик.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрСведений.",  	  "РегистрыСведений.");
	
	Возврат ИмяТипа;
	
КонецФункции

// Устанавливает новому объекту ссылку, заданную свойством externalObject, если возможно
//
// Параметры:
//   НовыйОбъект - СправочникОбъект
//   ОбъектXDTO - ОбъектXDTO произвольного типа
//
Процедура УстановитьСсылкуНовогоДляСправочника(НовыйОбъект, ОбъектXDTO) Экспорт
	
	Если НЕ ОбъектXDTO.Установлено("externalObject") Тогда
		Возврат;
	КонецЕсли;
	
	ВидСправочника = НовыйОбъект.Метаданные().Имя;
	ИдентификаторВнешнегоОбъекта = Новый УникальныйИдентификатор(ОбъектXDTO.externalObject.id);
	СсылкаДО = Справочники[ВидСправочника].ПолучитьСсылку(ИдентификаторВнешнегоОбъекта);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	Ссылка
		|ИЗ
		|	Справочник." + ВидСправочника + "
		|ГДЕ 
		|	Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаДО);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйОбъект.УстановитьСсылкуНового(СсылкаДО);
	КонецЕсли;
	
КонецПроцедуры

// Получает ссылку по идентификатору внешнего объекта, если объект существует в БД
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO произвольного типа
//   ВидСправочника - Строка - вид справочника
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка, если объект найден по идентификатору
//   Неопределено - если объект не найден
//
Функция СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, ВидСправочника) Экспорт
	
	Если НЕ ОбъектXDTO.Установлено("externalObject") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(
		ОбъектXDTO.externalObject.id,
		ОбъектXDTO.externalObject.type,
		ВидСправочника);
	
КонецФункции

// Проверяет заполнение реквизитов.
// Для реквизитов, у которых при конфигурировании свойство "Проверка заполнения" установлено 
// в значение "Показывать ошибку" и реквизит не заполнен, будет сформировано сообщение об ошибке.
//
// Параметры:
//   Объект - Произвольный - проверяемый объект
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке
//
// Возвращаемое значение:
//   Булево - Истина, если обязательные реквизиты заполнены, и Ложь в противном случае
//
Функция ПроверитьЗаполнение(Объект, ТекстСообщения = "") Экспорт
	
	ТекстСообщения = "";
	ЕстьОшибки = Ложь;
	
	Если Не Объект.ПроверитьЗаполнение() Тогда
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
		КонецЦикла;
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

// Возвращает описание ошибки
//
// Параметры:
//   Инфо - ИнформацияОбОшибке
// Возвращаемое значение:
//   Строка - текст детального описания ошибки
// 
Функция ПолучитьОписаниеОшибки(Инфо) Экспорт
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	ТекстСообщения = "";
	Для Каждого Сообщение Из Сообщения Цикл 
		ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
	КонецЦикла;
	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(Инфо);
	Если Не ПустаяСтрока(Инфо.Описание) И ПустаяСтрока(ПредставлениеОшибки) Тогда
		ПредставлениеОшибки = Инфо.Описание;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки + ?(ПредставлениеОшибки + ТекстСообщения = "", "", Символы.ПС) + ТекстСообщения;
	
КонецФункции	

// Возвращает настройки по запросу DMGetSettingsRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetSettingsRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetSettingsResponse или DMError
//
Функция ПолучитьНастройки(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetSettingsResponse");
		
		ИзвлекатьТекстыФайловНаСервере = ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере();
		Ответ.needExtractText = НЕ ИзвлекатьТекстыФайловНаСервере;
		
		Ответ.useDigitalSignatures = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
		Ответ.addActualWorkUponTaskExecution =
			УчетВремени.ПолучитьПерсональныеНастройкиУчетаВремениСервер().ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
		Ответ.accountForScannedOriginals = ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		Ответ.showLockedFilesOnExit = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", 
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", Истина);
		Ответ.useAutoFill = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
		Ответ.allowToChangeEndDate = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
		
		// Определим политику указания фактического исполнителя задач.
		ФактическийИсполнитель = Константы.ФактическийИсполнительЗадач.Получить();
		Если ФактическийИсполнитель = Перечисления.ФактическийИсполнительЗадач.ВыборПриИсполненииЗадачи Тогда
			Ответ.actualTasksPerformer = "userChoice";
		ИначеЕсли ФактическийИсполнитель = Перечисления.ФактическийИсполнительЗадач.ТекущийПользователь Тогда
			Ответ.actualTasksPerformer = "currentUser";
		Иначе
			Ответ.actualTasksPerformer = "taskPerformer";
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении настроек'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает список файлов владельца по запросу DMGetFileListByOwnerRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetFileListByOwnerRequest 
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetFileListByOwnerResponse или DMError
// 
Функция ПолучитьСписокФайловПоВладельцу(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = СоздатьОбъект("DMGetFileListByOwnerResponse");
		
		Если Сообщение.Установлено("ignoreDeletionMark") Тогда
			ВключатьПомеченныеНаУдаление = Сообщение.ignoreDeletionMark;
		Иначе
			ВключатьПомеченныеНаУдаление = Ложь;
		КонецЕсли;
		
		Для Каждого Владелец Из Сообщение.owners Цикл
			
			ВладелецФайла = ПолучитьСсылкуПоObjectID(Владелец.objectId);
			Если НЕ ЗначениеЗаполнено(ВладелецФайла) Тогда
				ВызватьИсключение НСтр("ru = 'Объект не найден'");
			КонецЕсли;
			
			МассивОбъектовДО = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВладелецФайла, ВключатьПомеченныеНаУдаление);
			
			МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, Сообщение.columnSet);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(Ответ, МассивФайлов, Сообщение.columnSet);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка файлов по владельцу'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Получает список документов в папке-владельце по запросу DMGetDocumentListByOwnerRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetDocumentListByOwnerRequest 
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetDocumentListByOwnerResponse или DMError
// 
Функция ПолучитьСписокДокументовПоВладельцу(Сообщение) Экспорт
	
	Попытка 
		
		Ответ = СоздатьОбъект("DMGetDocumentListByOwnerResponse");
		
		Для Каждого Владелец Из Сообщение.owners Цикл
			
			ВладелецДокумента = ПолучитьСсылкуПоObjectID(Владелец.objectId);
			Если НЕ ЗначениеЗаполнено(ВладелецДокумента) Тогда
				ВызватьИсключение НСтр("ru = 'Объект не найден'");
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец",ВладелецДокумента);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВнутренниеДокументы.Ссылка
				|ИЗ
				|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
				|ГДЕ
				|	НЕ ВнутренниеДокументы.ПометкаУдаления
				|	И ВнутренниеДокументы.Папка = &Владелец
				|
				|УПОРЯДОЧИТЬ ПО
				|	ВнутренниеДокументы.Наименование";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				Объект = СоздатьОбъект("DMInternalDocument");
				ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеВнутреннегоДокумента(Выборка.Ссылка, Объект, Сообщение.columnSet);
				Ответ.documents.Добавить(Объект);
            КонецЦикла;
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка документов по владельцу'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Возвращает дополнительные реквизиты в ответ на запрос DMGetObjectAdditionalPropertiesRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectAdditionalPropertiesRequest 
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectAdditionalPropertiesResponse или DMError
// 
Функция ПолучитьДополнительныеРеквизитыОбъекта(Сообщение)
	
	Ответ = СоздатьОбъект("DMGetObjectAdditionalPropertiesResponse");
	
	ИмяТипа = ПолучитьТипДОПоТипуXDTO(Сообщение.object.objectId.type, Неопределено);
	СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(Сообщение.object.objectId);
	
	Если СсылкаНаОбъектДО.Пустая() Тогда
		Если Лев(ИмяТипа, СтрДлина("Задачи.")) = "Задачи." Тогда
			Выполнить("ОбъектДО = " + ИмяТипа + ".СоздатьЗадачу();");
		Иначе
			Выполнить("ОбъектДО = " + ИмяТипа + ".СоздатьЭлемент();");
		КонецЕсли;
	Иначе
		ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
	КонецЕсли;
	
	Если СоздатьОбъект("DMDocument").Тип().ЭтоПотомок(Сообщение.object.Тип()) Тогда
		Если Сообщение.object.Установлено("documentType") Тогда
			ВидДокумента = ПолучитьСсылкуПоObjectID(Сообщение.object.documentType.objectId);
			ОбъектДО.ВидДокумента = ВидДокумента;
		Иначе
			ОбъектДО.ВидДокумента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьНаборДополнительныхРеквизитовОбъектаДО(ОбъектДО, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Получает набор дополнительных реквизитов и их значений для объекта Документооборота
//
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота
//   ОбъектXDTO - связанный объект XDTO, чье свойство additionalProperties подлежит заполнению
//
Процедура ПолучитьНаборДополнительныхРеквизитовОбъектаДО(ОбъектДО, ОбъектXDTO) Экспорт
	
	ОписаниеДополнительныхРеквизитов = ОписаниеДополнительныхРеквизитовОбъектаДО(ОбъектДО);
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	
	Для Каждого ОписаниеРеквизита Из ОписаниеДополнительныхРеквизитов Цикл
		
		ДополнительноеСвойство = СоздатьОбъект("DMAdditionalProperty");
		ДополнительноеСвойство.name = ОписаниеРеквизита.Свойство.Заголовок;
		ДополнительноеСвойство.objectId = ПолучитьObjectIDПоСсылке(ОписаниеРеквизита.Свойство, Истина);
		ДополнительноеСвойство.mandatory = ОписаниеРеквизита.ЗаполнятьОбязательно;
		
		Для Каждого ТипРеквизита Из ОписаниеРеквизита.ТипРеквизита.Типы() Цикл
			
			ОбработкаЗапросовXDTOПереопределяемый.
				ПриОпределенииТипаДополнительногоРеквизита(ТипРеквизита, ДополнительноеСвойство.propertyValueTypes);
			
			ОбъектТипXDTO = СоздатьОбъект("DMType");
			
			Если ТипРеквизита = Тип("Дата") Тогда
				ОбъектТипXDTO.xdtoClassName = "date";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Дата'");
				
			ИначеЕсли ТипРеквизита = Тип("Число") Тогда
				ОбъектТипXDTO.xdtoClassName = "integer";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Число'");
				
			ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
				ОбъектТипXDTO.xdtoClassName = "string";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Строка'");
				
			ИначеЕсли ТипРеквизита = Тип("Булево") Тогда
				ОбъектТипXDTO.xdtoClassName = "boolean";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Логическое значение'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMObjectPropertyValue";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Дополнительное значение'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMObjectPropertyValueHierarchy";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Дополнительное значение (иерархия)'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Контрагенты") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMCorrespondent";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Контрагент'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Пользователи") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMUser";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Пользователь'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMPrivatePerson";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Физическое лицо'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMContactPerson";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Контактное лицо'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMSubdivision";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Подразделение'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Организации") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMOrganization";
				ОбъектТипXDTO.presentation = РедакцииКонфигурацииКлиентСервер.Организация();
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Валюты") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMCurrency";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Валюта'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.КлассификаторБанков") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMBank";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Банк'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMBankAccount";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Банковский счет'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMInternalDocument";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Внутренний документ'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMIncomingDocument";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Входящий документ'");
				
			ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				ОбъектТипXDTO.xdtoClassName = "DMOutgoingDocument";
				ОбъектТипXDTO.presentation = НСтр("ru = 'Исходящий документ'");
				
			Иначе
				Продолжить;
				
			КонецЕсли;
			
			ДополнительноеСвойство.propertyValueTypes.Добавить(ОбъектТипXDTO);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОписаниеРеквизита.Значение) Тогда
			Если ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Дата")
					Или ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Число")
					Или ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Строка")
					Или ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Булево") Тогда
				
				ДополнительноеСвойство.propertySimpleValue = ОписаниеРеквизита.Значение;
			Иначе
				ИмяТипа = ОписаниеРеквизита.Значение.Метаданные().ПолноеИмя();
				Если ТаблицаСоответствия.Найти(ИмяТипа, "ИмяДО") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбъектЗначениеXDTO = СоздатьОбъект("DMObject");
				ОбъектЗначениеXDTO.name = Строка(ОписаниеРеквизита.Значение);
				ОбъектЗначениеXDTO.objectId = ПолучитьObjectIDПоСсылке(ОписаниеРеквизита.Значение);
				
				ДополнительноеСвойство.propertyObjectValue = ОбъектЗначениеXDTO;
				
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO.additionalProperties.Добавить(ДополнительноеСвойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает набор дополнительных реквизитов и их значения у объекта Документооборота
// 
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота, чьи дополнительные свойства подлежат заполнению
//   ОбъектXDTO - связанный объект XDTO, чье свойство additionalProperties служит источником
// 
Процедура ЗаписатьДополнительныеРеквизиты(ОбъектДО, ОбъектXDTO) Экспорт
	
	Для Каждого ДополнительныйРеквизит Из ОбъектXDTO.additionalProperties Цикл
		
		ОбъектСвойство = ПолучитьСсылкуПоObjectID(ДополнительныйРеквизит.objectId);
		
		Если ЗначениеЗаполнено(ОбъектСвойство) Тогда
			
			ЗначениеСвойства = Неопределено;
			Если ДополнительныйРеквизит.Установлено("propertySimpleValue") Тогда
				ЗначениеСвойства = ДополнительныйРеквизит.propertySimpleValue;
				
			ИначеЕсли ДополнительныйРеквизит.Установлено("propertyObjectValue") Тогда
				ЗначениеСвойстваXDTO = ДополнительныйРеквизит.propertyObjectValue;
				
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.id)
					И Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.type)
					И ЗначениеСвойстваXDTO.Установлено("externalObject") Тогда
					
					// Определим значение по записи в регистре связей или по полям поиска.
					ЗначениеСвойства = НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO);
					
					Если ЗначениеСвойства = Неопределено Тогда
						
						// Определим значение по записи в регистре связей значений свойств.
						ЗначениеСвойства = РегистрыСведений.СвязиЗначенийСвойствИОбъектовИнтегрированныхСистем.
							ПолучитьЗначениеСвойства(
								ЗначениеСвойстваXDTO.externalObject.id,
								ЗначениеСвойстваXDTO.externalObject.type,
								ОбъектСвойство);
								
						Если ЗначениеСвойства = Неопределено Тогда
							
							// Найдем значение свойства по наименованию или создадим его.
							ТипыЗначения = ОбъектСвойство.ТипЗначения.Типы();
							Если ТипыЗначения.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
								<> Неопределено Тогда
								ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(
									ЗначениеСвойстваXDTO.name, Истина,, ОбъектСвойство);
								Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
									ЗначениеСвойстваОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
									ЗначениеСвойстваОбъект.Владелец = ОбъектСвойство;
									ЗначениеСвойстваОбъект.Наименование = ЗначениеСвойстваXDTO.name;
									ЗначениеСвойстваОбъект.Записать();
									ЗначениеСвойства = ЗначениеСвойстваОбъект.Ссылка;
								КонецЕсли;
								
							ИначеЕсли ТипыЗначения.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"))
								<> Неопределено Тогда
								ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектовИерархия.НайтиПоНаименованию(
									ЗначениеСвойстваXDTO.name, Истина,, ОбъектСвойство);
								Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
									ЗначениеСвойстваОбъект = Справочники.ЗначенияСвойствОбъектовИерархия.СоздатьЭлемент();
									ЗначениеСвойстваОбъект.Владелец = ОбъектСвойство;
									ЗначениеСвойстваОбъект.Наименование = ЗначениеСвойстваXDTO.name;
									ЗначениеСвойстваОбъект.Записать();
									ЗначениеСвойства = ЗначениеСвойстваОбъект.Ссылка;
								КонецЕсли;
								
							КонецЕсли;
							
							// Запишем связь созданного автоматически или найденного по наименованию свойства
							// для использования в дальнейшем.
							Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
								РегистрыСведений.СвязиЗначенийСвойствИОбъектовИнтегрированныхСистем.ЗаписатьСвязь(
									ЗначениеСвойстваXDTO.externalObject.id, ЗначениеСвойстваXDTO.externalObject.type,
									ОбъектСвойство, ЗначениеСвойства);
							КонецЕсли;
							
						Иначе // значение найдено в регистре связей, но, возможно, следует изменить наименование
							НаименованиеЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								ЗначениеСвойства, "Наименование");
							Если НаименованиеЗначения <> ЗначениеСвойстваXDTO.name Тогда
								ЗначениеСвойстваОбъект = ЗначениеСвойства.ПолучитьОбъект();
								ЗначениеСвойстваОбъект.Наименование = ЗначениеСвойстваXDTO.name;
								ЗначениеСвойстваОбъект.Записать();
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ЗначениеСвойства = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId);
				КонецЕсли;
				
			КонецЕсли;
			
			Строка = ОбъектДО.ДополнительныеРеквизиты.Найти(ОбъектСвойство, "Свойство");
			Если Строка <> Неопределено Тогда
				Строка.Значение = ЗначениеСвойства;
				Если ТипЗнч(ЗначениеСвойства) = Тип("Строка")
						И (СтрДлина(ЗначениеСвойства) > 1024 Или ЗначениеЗаполнено(Строка.ТекстоваяСтрока)) Тогда
					Строка.ТекстоваяСтрока = ЗначениеСвойства;
				КонецЕсли;
			ИначеЕсли ДополнительныйРеквизит.Установлено("propertySimpleValue")
				ИЛИ ДополнительныйРеквизит.Установлено("propertyObjectValue") Тогда
				НоваяСтрока = ОбъектДО.ДополнительныеРеквизиты.Добавить();
				НоваяСтрока.Свойство = ОбъектСвойство;
				НоваяСтрока.Значение = ЗначениеСвойства;
				Если ТипЗнч(ЗначениеСвойства) = Тип("Строка")
						И (СтрДлина(ЗначениеСвойства) > 1024 Или ЗначениеЗаполнено(НоваяСтрока.ТекстоваяСтрока)) Тогда
					НоваяСтрока.ТекстоваяСтрока = ЗначениеСвойства;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = "";
	Если Не ПроверитьЗаполнениеДополнительныхРеквизитов(ОбъектДО, ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку заполненности дополнительных реквизитов объекта ДО.
//
// Параметры:
//   ОбъектДО - Произвольный - проверяемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значения, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если обязательные реквизиты заполнены, и Ложь в противном случае.
//
Функция ПроверитьЗаполнениеДополнительныхРеквизитов(ОбъектДО, ТекстСообщения) Экспорт
	
	Если Не УправлениеСвойствами.ОбъектПоддерживаетПроверкуУсловийДопСвойств(ОбъектДО) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Свойство,
		|	Зависимости.Реквизит КАК ПроверяемыйРеквизит,
		|	Зависимости.Условие КАК ПроверяемоеУсловие,
		|	Зависимости.Значение КАК ЗначениеПроверки
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Зависимости
		|		ПО ДополнительныеРеквизиты.Ссылка = Зависимости.Ссылка
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка В(&Свойства)
		|	И ДополнительныеРеквизиты.ЗаполнятьОбязательно
		|	И (ВЫРАЗИТЬ(Зависимости.ЗависимоеСвойство КАК СТРОКА(8))) <> ""Доступен""
		|	И (ВЫРАЗИТЬ(Зависимости.ЗависимоеСвойство КАК СТРОКА(5))) <> ""Виден""
		|ИТОГИ
		|	МАКСИМУМ(ПроверяемоеУсловие),
		|	МАКСИМУМ(ЗначениеПроверки)
		|ПО
		|	Свойство,
		|	ПроверяемыйРеквизит");
	
	ОписаниеДополнительныхРеквизитов = ОписаниеДополнительныхРеквизитовОбъектаДО(ОбъектДО);
	Запрос.УстановитьПараметр("Свойства", ОписаниеДополнительныхРеквизитов.ВыгрузитьКолонку("Свойство"));
	ВыборкаСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСвойства.Следующий() Цикл
		
		СтрокаТЧ = ОбъектДО.ДополнительныеРеквизиты.Найти(ВыборкаСвойства.Свойство, "Свойство");
		Если СтрокаТЧ <> Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда // проверять нечего
			Продолжить;
		КонецЕсли;
		
		ВыполнятьПроверку = Истина;
		
		ВыборкаПроверяемыйРеквизит = ВыборкаСвойства.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроверяемыйРеквизит.Следующий() Цикл
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = NULL Тогда // обязательное без условий
				Прервать;
			КонецЕсли;
			
			Если ТипЗнч(ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит) = Тип("Строка") Тогда
				Если СтрНачинаетсяС(ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит, "ДопРеквизитыОтбораДляУсловий") Тогда
					ПутьКРеквизиту = ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит;
				Иначе
					ПутьКРеквизиту = "ОбъектДО." + ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит;
				КонецЕсли;
			Иначе
				ДополнительныйРеквизит = ОбъектДО.ДополнительныеРеквизиты.Найти(
					ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит, "Свойство");
				Если ДополнительныйРеквизит = Неопределено Тогда
					Продолжить; // Дополнительный реквизит не существует, условие игнорируется.
				КонецЕсли;
				ПутьКРеквизиту = "ДополнительныйРеквизит.Значение";
			КонецЕсли;
			
			ШаблонУсловия = "";
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "Равно" Тогда
				ШаблонУсловия = "Результат = (%1 = ЗначениеПроверки)";
			ИначеЕсли ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеРавно" Тогда
				ШаблонУсловия = "Результат = (%1 <> ЗначениеПроверки)";
			КонецЕсли;
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "Заполнено" Тогда
				ШаблонУсловия = "Результат = ЗначениеЗаполнено(%1)";
			ИначеЕсли ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеЗаполнено" Тогда
				ШаблонУсловия = "Результат = Не ЗначениеЗаполнено(%1)";
			КонецЕсли;
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "ВСписке" Тогда
				ШаблонУсловия = "Результат = (ЗначениеПроверки.Найти(%1) <> Неопределено)";
			ИначеЕсли ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеВСписке" Тогда
				ШаблонУсловия = "Результат = (ЗначениеПроверки.Найти(%1) = Неопределено)";
			КонецЕсли;
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "ВСписке"
					Или ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеВСписке" Тогда
				ЗначениеПроверки = Новый Массив;
				Выборка = ВыборкаПроверяемыйРеквизит.Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗначениеПроверки.Добавить(Выборка.ЗначениеПроверки);
				КонецЦикла;
			Иначе
				ЗначениеПроверки = ВыборкаПроверяемыйРеквизит.ЗначениеПроверки;
			КонецЕсли;
			
			КодУсловия = СтрШаблон(ШаблонУсловия, ПутьКРеквизиту);
			
			Результат = Ложь;
			Попытка
				Выполнить(КодУсловия);
			Исключение
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ошибка при проверке заполнения свойства ""%1"": %2'"),
					ВыборкаСвойства.Свойство,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Ложь;
			КонецПопытки;
			
			ВыполнятьПроверку = ВыполнятьПроверку И Результат;
			
		КонецЦикла;
		
		Если ВыполнятьПроверку Тогда
			ТекстОдногоСообщения = СтрШаблон(
				НСтр("ru = 'Не заполнено обязательное свойство ""%1"".'"),
				ВыборкаСвойства.Свойство);
			ТекстСообщения = ТекстСообщения
				+ ?(ТекстСообщения = "", "", Символы.ПС)
				+ ТекстОдногоСообщения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстСообщения = "";
	
КонецФункции

// Выполняет проверку списка дополнительных реквизитов на модифицированность их значений
//
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота, чьи дополнительные свойства подлежат проверке
//   ОбъектXDTO - связанный объект XDTO, чье свойство additionalProperties служит эталоном
//
Функция ДополнительныеРеквизитыИзменены(ОбъектДО, ОбъектXDTO) Экспорт
	
	Для Каждого ДополнительныйРеквизит Из ОбъектXDTO.additionalProperties Цикл
		
		ОбъектСвойство = ПолучитьСсылкуПоObjectID(ДополнительныйРеквизит.objectId);
		
		Если ЗначениеЗаполнено(ОбъектСвойство) Тогда
			
			ЗначениеСвойства = Неопределено;
			Если ДополнительныйРеквизит.Установлено("propertySimpleValue") Тогда
				ЗначениеСвойства = ДополнительныйРеквизит.propertySimpleValue;
			ИначеЕсли ДополнительныйРеквизит.Установлено("propertyObjectValue") Тогда
				ЗначениеСвойстваXDTO = ДополнительныйРеквизит.propertyObjectValue;
				
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.Id)
					И Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.type)
					И ЗначениеСвойстваXDTO.Установлено("externalObject") Тогда
					ЗначениеСвойства = НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO);
				Иначе
					ЗначениеСвойства = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId);
				КонецЕсли;
			КонецЕсли;
			
			Строка = ОбъектДО.ДополнительныеРеквизиты.Найти(ОбъектСвойство, "Свойство");
			Если Строка <> Неопределено Тогда
				Если Не ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда
					ЗначениеСтроки = Строка.ТекстоваяСтрока;
				Иначе
					ЗначениеСтроки = Строка.Значение;
				КонецЕсли;
				
				Если ЗначениеСтроки <> ЗначениеСвойства Тогда
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли ДополнительныйРеквизит.Установлено("propertySimpleValue")
				ИЛИ ДополнительныйРеквизит.Установлено("propertyObjectValue") Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак работы сеанса через WS-соединение
//
// Возвращаемое значение:
//   Булево - Истина, если работа идет через WS-соединение
// 
Функция ЭтоВебСервис() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерТекущегоСеанса И Сеанс.ИмяПриложения = "WSConnection" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Вызывается при установке параметров сеанса.
//
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриУстановкеПараметровСеанса(ИменаПараметровСеанса);
	
КонецПроцедуры

// Определяет существует ли свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство существует.
//
Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства) <> Неопределено);
	
КонецФункции

// Определяет было ли установлено свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство установлено.
//
Функция СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (СвойствоСуществует(ОбъектXDTO, ИмяСвойства) И ОбъектXDTO.Установлено(ИмяСвойства));
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для обработки запросов веб сервиса ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Обработка запросов XDTO
//        или Обработка запросов XDTO.<ИмяСобытияВторогоУровня>
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает объект DMBatchResponse, содержащий результаты выполнения пакетного запроса
//
Функция ОбработатьПакет(Сообщение) 
	
	Попытка
		
		ПакетОтветов = СоздатьОбъект("DMBatchResponse");
		
		Для Каждого СообщениеПакета Из Сообщение.Requests Цикл
			
			Ответ = ОбработатьУниверсальноеСообщение(СообщениеПакета);
			ПакетОтветов.responses.Добавить(Ответ);
			
		КонецЦикла;
		
		Возврат ПакетОтветов;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке пакета сообщений'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
	КонецПопытки;
	
КонецФункции

// Возвращает текущую версию веб-сервиса по версии конфигурации
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetVersionResponse
//
Функция ПолучитьВерсиюСервиса()
	
	ОтветВерсия = СоздатьОбъект("DMGetVersionResponse");
	ОтветВерсия.versionNumber = ОбработкаЗапросовXDTOПереопределяемый.ВерсияСервиса();
	Возврат ОтветВерсия;
	
КонецФункции

// Возвращает предопределенное значение по наименованию.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetPredefinedObjectRequest - запрос на получение предопределенного значения.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetPredefinedObjectResponse или DMError
//
Функция ПолучитьПредопределенноеЗначение(Сообщение)
	
	Попытка
		
		ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
		Строка = ТаблицаСоответствия.Найти(Сообщение.type, "ИмяXDTO");
		
		Если Строка = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Попытка получить тип 1С:Документооборота для неизвестного типа XDTO: %1'"), Сообщение.type);
		КонецЕсли;
		
		Результат = ПредопределенноеЗначение(СтрШаблон("%1.%2", Строка["ИмяДО"], Сообщение.predefinedObjectName));
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetPredefinedObjectResponse");
		Ответ.result = СоздатьОбъект("DMObject");
		Ответ.result.name = Строка(Результат);
		Ответ.result.objectId = ПолучитьObjectIDПоСсылке(Результат);
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении предопределенного значения'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет объекты Документооборота по данным объектов XDTO и возвращает измененные объекты
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMUpdateRequest - запрос на запись
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUpdateResponse или DMError
//
Функция ЗаписатьОбъекты(Сообщение)
	
	Ответ = СоздатьОбъект("DMUpdateRequest");
	Если Сообщение.dataBaseId <> Неопределено Тогда
		Ответ.dataBaseId = Сообщение.dataBaseId;
	КонецЕсли;
	
	Для Каждого Объект Из Сообщение.objects Цикл
		
		// Переопределяемая запись.
		Результат = ОбработкаЗапросовXDTOПереопределяемый.ЗаписатьОбъект(Объект);
		Если Результат <> Неопределено Тогда
			Если ПроверитьТип(Результат, "DMError") Тогда
				Возврат Результат;
			КонецЕсли;
			Ответ.objects.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Если ПроверитьТип(Объект, "DMBusinessProcessPerformance")
				Или ПроверитьТип(Объект, "DMBusinessProcessPerformance_1.2.1.11")
				Или ПроверитьТип(Объект, "DMBusinessProcessAcquaintance")
				Или ПроверитьТип(Объект, "DMBusinessProcessOrder")
				Или ПроверитьТип(Объект, "DMBusinessProcessConsideration")
				Или ПроверитьТип(Объект, "DMBusinessProcessRegistration")
				Или ПроверитьТип(Объект, "DMBusinessProcessApproval")
				Или ПроверитьТип(Объект, "DMBusinessProcessApproval_1.2.1.11")
				Или ПроверитьТип(Объект, "DMBusinessProcessConfirmation")
				Или ПроверитьТип(Объект, "DMBusinessProcessInternalDocumentProcessing")
				Или ПроверитьТип(Объект, "DMBusinessProcessIncomingDocumentProcessing")
				Или ПроверитьТип(Объект, "DMBusinessProcessOutgoingDocumentProcessing")
				Или ПроверитьТип(Объект, "DMBusinessProcessIssuesSolution")
				Или ОбработкаЗапросовXDTOПереопределяемый.ПроверитьТипОбъектаПриЗаписиПроцесса(Объект) Тогда
			
			Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаписатьБизнесПроцесс(Объект, Ложь);
			
		ИначеЕсли ПроверитьТип(Объект, "DMIncomingDocument") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьВходящийДокумент(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMOutgoingDocument") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьИсходящийДокумент(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMInternalDocument") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьВнутреннийДокумент(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMInternalDocumentFolder") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьПапкуВнутреннихДокументов(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMFile") Тогда
			Результат = ОбработкаЗапросовXDTOФайлы.ИзменитьФайл(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMFileVersion") Тогда
			ВызватьИсключение НСтр("ru = 'Изменение версий средствами веб-сервиса не поддерживается'");
			
		ИначеЕсли ПроверитьТип(Объект, "DMSubdivision") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьПодразделение(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMMeasurementUnit") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьЕдиницуИзмерения(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMProduct") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьНоменклатуру(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMCurrency") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьВалюту(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMBank") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьБанк(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMBankAccount") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьБанковскийСчет(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMUser") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьПользователя(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMContactPerson") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьКонтактноеЛицо(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMPrivatePerson") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьФизическоеЛицо(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMOrganization") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьОрганизацию(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMCorrespondent") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьКонтрагента(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMCaseFilesListSections") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьРазделНоменклатурыДел(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMCaseFilesCatalog") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьНоменклатуруДел(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMCaseFilesDossiers") Тогда
			Результат = ОбработкаЗапросовXDTOДокументы.ИзменитьДелоХраненияДокументов(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMBusinessProcessTask")
				Или ПроверитьТип(Объект, "DMBusinessProcessOrderTaskCheckup")
				Или ПроверитьТип(Объект, "DMBusinessProcessApprovalTaskApproval")
				Или ПроверитьТип(Объект, "DMBusinessProcessApprovalTaskCheckup")
				Или ПроверитьТип(Объект, "DMBusinessProcessConfirmationTaskConfirmation")
				Или ПроверитьТип(Объект, "DMBusinessProcessConfirmationTaskCheckup")
				Или ПроверитьТип(Объект, "DMBusinessProcessRegistrationTaskRegistration")
				Или ПроверитьТип(Объект, "DMBusinessProcessRegistrationTaskCheckup")
				Или ПроверитьТип(Объект, "DMBusinessProcessConsiderationTaskAcquaint")
				Или ПроверитьТип(Объект, "DMBusinessProcessPerfomanceTaskCheckup")
				Или ПроверитьТип(Объект, "DMBusinessProcessIssuesSolutionTaskQuestion")
				Или ПроверитьТип(Объект, "DMBusinessProcessIssuesSolutionTaskAnswer")
				Или ОбработкаЗапросовXDTOПереопределяемый.ПроверитьТипОбъектаПриЗаписиЗадачи(Объект) Тогда
			Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ИзменитьЗадачу(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMDailyReport") Тогда
			Результат = ОбработкаЗапросовXDTOУчетВремени.ИзменитьЕжедневныйОтчет(Объект);
			
		ИначеЕсли ПроверитьТип(Объект, "DMWeeklyReport") Тогда
			Результат = ОбработкаЗапросовXDTOУчетВремени.ИзменитьЕженедельныйОтчет(Объект);
			
		КонецЕсли;
		
		Если ПроверитьТип(Результат, "DMError") Тогда
			Возврат Результат;
		КонецЕсли;
		
		Ответ.objects.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Создает объект XDTO по указанному типу объекта
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMCreateRequest - запрос на создание
// Возвращаемое значение:
//   ОбъектXDTO типа DMCreateRequest или DMError
// 
Функция Создать(Сообщение)
	
	Ответ = СоздатьОбъект("DMCreateResponse");
	
	Объект = ОбработкаЗапросовXDTOПереопределяемый.Создать(Сообщение);
	Если Сообщение.dataBaseId <> Неопределено Тогда
		Ответ.dataBaseId = Сообщение.dataBaseId;
	КонецЕсли; 
	
	Если Объект <> Неопределено Тогда
		
		Если ПроверитьТип(Объект, "DMError")
			Или ПроверитьТип(Объект, "DMOK") Тогда
			Возврат Объект
		КонецЕсли;
		
		Ответ.object = Объект;
		
		Возврат Ответ;
		
	КонецЕсли;
	
	Если ПроверитьТип(Сообщение.object, "DMIncomingDocument") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьВходящийДокумент(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMOutgoingDocument") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьИсходящийДокумент(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMInternalDocument") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьВнутреннийДокумент(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMSubdivision") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьПодразделение(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMMeasurementUnit") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьЕдиницуИзмерения(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMProduct") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьНоменклатуру(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMCurrency") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьВалюту(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMBank") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьБанк(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMBankAccount") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьБанковскийСчет(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMUser") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьПользователя(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMContactPerson") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьКонтактноеЛицо(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMPrivatePerson") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьФизическоеЛицо(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMOrganization") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьОрганизацию(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMCorrespondent") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьКонтрагента(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMCaseFilesListSections") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьРазделНоменклатурыДел(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMCaseFilesCatalog") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьНоменклатуруДел(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMCaseFilesDossiers") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьДелоХраненияДокументов(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMBusinessProcessPerformance")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessPerformance_1.2.1.11")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessAcquaintance")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessOrder")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessIssuesSolution")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessConsideration")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessRegistration")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessApproval")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessApproval_1.2.1.11")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessConfirmation")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessInternalDocumentProcessing")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessIncomingDocumentProcessing")
			Или ПроверитьТип(Сообщение.object, "DMBusinessProcessOutgoingDocumentProcessing")
			Или ОбработкаЗапросовXDTOПереопределяемый.ПроверитьТипПриСозданииНовогоПроцесса(Сообщение.object) Тогда
		Объект = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаписатьБизнесПроцесс(Сообщение.object, Истина);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMDailyReport") Тогда
		Объект = ОбработкаЗапросовXDTOУчетВремени.СоздатьЕжедневныйОтчет(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMWeeklyReport") Тогда
		Объект = ОбработкаЗапросовXDTOУчетВремени.СоздатьЕженедельныйОтчет(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMActualWork") Тогда
		Объект = ОбработкаЗапросовXDTOУчетВремени.СоздатьЗаписьФактическихТрудозатрат(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMInternalDocumentFolder") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьПапкуВнутреннихДокументов(Сообщение);
		
	ИначеЕсли ПроверитьТип(Сообщение.object, "DMInternalDocumentType") 
		Или ПроверитьТип(Сообщение.object, "DMIncomingDocumentType") 
		Или ПроверитьТип(Сообщение.object, "DMOutgoingDocumentType") Тогда
		Объект = ОбработкаЗапросовXDTOДокументы.СоздатьВидДокумента(Сообщение);
		
	Иначе
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Создание объектов этого типа не поддерживается'");
		Ошибка.description = Строка(Сообщение.object.Тип());
		Возврат Ошибка;
		
	КонецЕсли;
	
	Если ПроверитьТип(Объект, "DMError") Тогда
		Возврат Объект
	КонецЕсли;
	
	Ответ.object = Объект;
	Возврат Ответ;
	
КонецФункции

// Получает новый объект XDTO заданного типа
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewObjectRequest - запрос на создание
// Возвращаемое значение:
//   ОбъектXDTO заданного типа или DMError
// 
Функция ПолучитьНовыйОбъект(Сообщение)
	
	Если Сообщение.type = "DMIncomingDocument" Тогда
		Ответ = ОбработкаЗапросовXDTOДокументы.ПолучитьНовыйВходящийДокумент(Сообщение.columnSet, Сообщение.dataSource);
		
	ИначеЕсли Сообщение.type = "DMOutgoingDocument" Тогда
		Ответ = ОбработкаЗапросовXDTOДокументы.ПолучитьНовыйИсходящийДокумент(Сообщение.columnSet, Сообщение.dataSource);
		
	ИначеЕсли Сообщение.type = "DMInternalDocument" Тогда
		Ответ = ОбработкаЗапросовXDTOДокументы.ПолучитьНовыйВнутреннийДокумент(Сообщение.columnSet, Сообщение.dataSource);
		
	ИначеЕсли Сообщение.type = "DMDailyReport" Тогда
		Ответ = ОбработкаЗапросовXDTOУчетВремени.ПолучитьНовыйЕжедневныйОтчет(Сообщение.columnSet);
		
	ИначеЕсли Сообщение.type = "DMWeeklyReport" Тогда
		Ответ = ОбработкаЗапросовXDTOУчетВремени.ПолучитьНовыйЕженедельныйОтчет(Сообщение.columnSet);
		
	ИначеЕсли Сообщение.type = "DMActualWork" Тогда
		Ответ = ОбработкаЗапросовXDTOУчетВремени.ПолучитьНовуюЗаписьФактическихТрудозатрат(Сообщение.columnSet);
		
	ИначеЕсли Сообщение.type = "DMCorrespondent" Тогда
		Ответ = ОбработкаЗапросовXDTOДокументы.ПолучитьНовогоКонтрагента(Сообщение.columnSet);
		
	ИначеЕсли Сообщение.type = "DMContactPerson" Тогда
		Ответ = ОбработкаЗапросовXDTOДокументы.ПолучитьНовоеКонтактноеЛицо(Сообщение.columnSet);
		
	Иначе
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения'");
		Ошибка.description = НСтр("ru = 'Операции с указанным типом объектов не поддерживаются в данной версии 1С:Документооборот.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает текущего пользователя в виде объекта XDTO 
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetCurrentUserRequest - запрос на получение текущего пользователя
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetCurrentUserResponse или DMError
//
Функция ПолучитьТекущегоПользователя(Сообщение)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Пользователь = СоздатьОбъект("DMUser");
	Пользователь.name = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Наименование");
	Пользователь.objectId = ПолучитьObjectIDПоСсылке(ТекущийПользователь);
	
	Ответ = СоздатьОбъект("DMGetCurrentUserResponse");
	Ответ.user = Пользователь;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает новый бизнес-процесс, заполненный по умолчанию
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewBusinessProcessRequest - запрос на получение процесса
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetNewBusinessProcessResponse или DMError
//
Функция ПолучитьСостояниеНовогоБизнесПроцесса(Сообщение)

	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеНовогоБизнесПроцесса(Сообщение);
	
	Если Ответ <> Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Если Сообщение.type = "DMBusinessProcessPerformance"
			Или Сообщение.type = "DMBusinessProcessPerformance_1.2.1.11"
			Или Сообщение.type = "DMBusinessProcessAcquaintance"
			Или Сообщение.type = "DMBusinessProcessOrder"
			Или Сообщение.type = "DMBusinessProcessIssuesSolution"
			Или Сообщение.type = "DMBusinessProcessConsideration"
			Или Сообщение.type = "DMBusinessProcessRegistration"
			Или Сообщение.type = "DMBusinessProcessApproval"
			Или Сообщение.type = "DMBusinessProcessApproval_1.2.1.11"
			Или Сообщение.type = "DMBusinessProcessConfirmation"
			Или Сообщение.type = "DMBusinessProcessInternalDocumentProcessing"
			Или Сообщение.type = "DMBusinessProcessIncomingDocumentProcessing"
			Или Сообщение.type = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		Ответ = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСостояниеНовогоОбъекта(Сообщение, "DMGetNewBusinessProcessResponse");
		
	Иначе
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения'");
		Ошибка.description = НСтр("ru = 'Операции с указанным типом объектов не поддерживаются в данной версии 1С:Документооборот.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Находит подходящий или создает новый объект и возвращает ссылку на него
//
// Параметры:
//   ЗначениеСвойстваXDTO - ОбъектXDTO - объект требуемого типа
// ВозвращаемоеЗначение
//   ЛюбаяСсылка - ссылка на найденный или вновь созданный объект Документооборота
// 
Функция НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаДО = ОбработкаЗапросовXDTOПереопределяемый.НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO);
	Если СсылкаДО <> Неопределено Тогда
		Возврат СсылкаДО;
	КонецЕсли;
	
	Если ПроверитьТип(ЗначениеСвойстваXDTO, "DMCorrespondent") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьКонтрагента(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMOrganization") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьОрганизацию(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMPrivatePerson") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьФизическоеЛицо(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMContactPerson") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьКонтактноеЛицо(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMMeasurementUnit") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьЕдиницуИзмерения(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMProduct") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьНоменклатуру(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMCurrency") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьВалюту(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMBank") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьБанк(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMBankAccount") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьБанковскийСчет(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMUser") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьПользователя(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMSubdivision") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьПодразделение(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMIncomingDocumentType") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьВидВходящегоДокумента(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMOutgoingDocumentType") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьВидИсходящегоДокумента(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMInternalDocumentType") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьВидВнутреннегоДокумента(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMAccessLevel") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьГрифДоступа(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMActivityMatter") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьВопросДеятельности(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMDeliveryMethod") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьСпособДоставки(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMLegalPrivatePerson") Тогда
		
		СсылкаДО = НайтиЗначениеПеречисленияПоВнешнемуОбъекту("ЮрФизЛицо", ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMProlongationProcedure") Тогда
		
		СсылкаДО = НайтиЗначениеПеречисленияПоВнешнемуОбъекту("ПорядокПродления", ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMInternalDocumentFolder") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьПапкуВнутреннихДокументов(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMCaseFilesListSections") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьРазделНоменклатурыДел(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMCaseFilesCatalog") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьНоменклатуруДел(ЗначениеСвойстваXDTO);
		
	ИначеЕсли ПроверитьТип(ЗначениеСвойстваXDTO, "DMCaseFilesDossiers") Тогда
		
		СсылкаДО = ОбработкаЗапросовXDTOДокументы.НайтиСоздатьДелоХраненияДокументов(ЗначениеСвойстваXDTO);
		
	КонецЕсли;
	
	Возврат СсылкаДО;
	
КонецФункции

// Возвращает значение перечисления по имени или синониму в объекте XDTO. Имя приоритетней.
//
// Параметры:
//   ИмяПеречисления - Строка - имя перечисления, например, "ПорядокПродления".
//   ЗначениеСвойстваXDTO - ОбъектXDTO - объект XDTO, соответствующий внешнему объекту.
//
// Возвращаемое значение:
//   ПеречислениеСсылка - найденное значение, или
//   Неопределено.
//
Функция НайтиЗначениеПеречисленияПоВнешнемуОбъекту(ИмяПеречисления, ЗначениеСвойстваXDTO) Экспорт
	
	ЗначенияПеречисления = Метаданные.Перечисления.Найти(ИмяПеречисления).ЗначенияПеречисления;
	
	ИмяЗначенияПеречисления = ЗначениеСвойстваXDTO.externalObject.id;
	
	Если ЗначениеЗаполнено(ИмяЗначенияПеречисления) Тогда
		МетаданныеЗначения = ЗначенияПеречисления.Найти(ИмяЗначенияПеречисления);
	Иначе
		МетаданныеЗначения = Неопределено;
	КонецЕсли;
	
	Если МетаданныеЗначения = Неопределено Тогда
		Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
			Если ВРег(СокрЛП(ЗначениеПеречисления.Синоним)) = ВРег(СокрЛП(ЗначениеСвойстваXDTO.name)) Тогда
				МетаданныеЗначения = ЗначениеПеречисления;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МетаданныеЗначения <> Неопределено Тогда
		Возврат Перечисления[ИмяПеречисления][МетаданныеЗначения.Имя];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает соответствие свойств XDTO и реквизитов объекта, которые можно использовать в поиске.
// 
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Структура, где ключом является имя свойства XDTO, а значением - имя реквизита.
//
Функция СоответствиеСвойствXDTOРеквизитамПоиска(Тип) Экспорт
	
	Результат = Новый Структура;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриЗаполненииСоответствияСвойствXDTOРезультатамПоиска(Тип, Результат);
	
	Если Тип = "DMIncomingDocument"
			Или Тип = "DMInternalDocument"
			Или Тип = "DMOutgoingDocument" Тогда
		Результат.Вставить("documentType", "ВидДокумента");
		Результат.Вставить("title", "Заголовок");
		Результат.Вставить("summary", "Содержание");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("regNumber", "РегистрационныйНомер");
		Результат.Вставить("regDate", "ДатаРегистрации");
		Результат.Вставить("sum", "Сумма");
		Результат.Вставить("currency", "Валюта");
		Результат.Вставить("organization", "Организация");
		Результат.Вставить("subdivision", "Подразделение");
		Результат.Вставить("accessLevel", "ГрифДоступа");
		Результат.Вставить("performanceDate", "СрокИсполнения");
		Результат.Вставить("activityMatter", "ВопросДеятельности");
		Результат.Вставить("responsible", "Ответственный");
		
	ИначеЕсли Тип = "DMIncomingDocumentTemplate"
			Или Тип = "DMInternalDocumentTemplate"
			Или Тип = "DMOutgoingDocumentTemplate" Тогда
		Результат.Вставить("documentType", "ВидДокумента");
		Результат.Вставить("title", "Заголовок");
		Результат.Вставить("summary", "Содержание");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("organization", "Организация");
		Результат.Вставить("subdivision", "Подразделение");
		
	КонецЕсли;
	
	Если Тип = "DMIncomingDocument" Тогда
		Результат.Вставить("externalNumber", "ИсходящийНомер");
		Результат.Вставить("externalDate", "ИсходящаяДата");
		Результат.Вставить("correspondent", "Отправитель");
		Результат.Вставить("signer", "Подписал");
		Результат.Вставить("addressee", "Адресат");
		Результат.Вставить("deliveryMethod", "СпособПолучения");
		
	ИначеЕсли Тип = "DMInternalDocument" Тогда
		Результат.Вставить("folder", "Папка");
		Результат.Вставить("beginDate", "ДатаНачалаДействия");
		Результат.Вставить("endDate", "ДатаОкончанияДействия");
		Результат.Вставить("openEnded", "Бессрочный");
		Результат.Вставить("correspondent", "Контрагент");
		Результат.Вставить("contactPerson", "КонтактноеЛицо");
		Результат.Вставить("signer", "Утвердил");
		Результат.Вставить("author", "Подготовил");
		Результат.Вставить("prolongationProcedure", "ПорядокПродления");
		
	ИначеЕсли Тип = "DMOutgoingDocument" Тогда
		Результат.Вставить("signer", "Подписал");
		Результат.Вставить("author", "Подготовил");
		
	ИначеЕсли Тип = "DMIncomingDocumentTemplate" Тогда
		Результат.Вставить("correspondent", "Отправитель");
		
	ИначеЕсли Тип = "DMInternalDocumentTemplate" Тогда
		Результат.Вставить("correspondent", "Контрагент");
		
	ИначеЕсли Тип = "DMCorrespondent" Тогда
		Результат.Вставить("inn", "ИНН");
		Результат.Вставить("kpp", "КПП");
		Результат.Вставить("okpo", "КодПоОКПО");
		Результат.Вставить("fullName", "НаименованиеПолное");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("privatePerson", "ФизЛицо");
		Результат.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		Результат.Вставить("responsible", "Ответственный");
		
	ИначеЕсли Тип = "DMOrganization" Тогда
		Результат.Вставить("inn", "ИНН");
		Результат.Вставить("kpp", "КПП");
		Результат.Вставить("okpo", "КодПоОКПО");
		Результат.Вставить("fullName", "НаименованиеПолное");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		Результат.Вставить("prefix", "Префикс");
		Результат.Вставить("VATpayer", "ПлательщикНДС");
		
	ИначеЕсли Тип = "DMUser" Тогда
		Результат.Вставить("privatePerson", "ДатаРождения");
		Результат.Вставить("comment", "Комментарий");
		
	ИначеЕсли Тип = "DMMeasurementUnit" Тогда
		Результат.Вставить("fullName", "НаименованиеПолное");
		
	ИначеЕсли Тип = "DMCaseFilesListSections" Тогда
		Результат.Вставить("year", "Год");
		Результат.Вставить("index", "Индекс");
		Результат.Вставить("company", "Организация");
		Результат.Вставить("department", "Подразделение");
		
	ИначеЕсли Тип = "DMCaseFilesCatalog" Тогда
		Результат.Вставить("year", "Год");
		Результат.Вставить("longDescription", "ПолноеНаименование");
		Результат.Вставить("index", "Индекс");
		Результат.Вставить("section", "Раздел");
		Результат.Вставить("company", "Организация");
		Результат.Вставить("retentionPeriod", "СрокХранения");
		Результат.Вставить("articleNumbers", "НомераСтатей");
		Результат.Вставить("caseCategory", "КатегорияДела");
		Результат.Вставить("expertsCommissionMark", "ОтметкаЭПК");
		Результат.Вставить("comment", "Примечание");
		Результат.Вставить("documentTypesFilledIn", "ВидыДокументовЗаполнены");
		Результат.Вставить("correspondentsFilledIn", "КонтрагентыЗаполнены");
		Результат.Вставить("activityTypesFilledIn", "ВопросыДеятельностиЗаполнены");
		
	ИначеЕсли Тип = "DMCaseFilesDossiers" Тогда
		Результат.Вставить("startDate", "ДатаНачала");
		Результат.Вставить("endDate", "ДатаОкончания");
		Результат.Вставить("caseClosed", "ДелоЗакрыто");
		Результат.Вставить("numberOfSheets", "КоличествоЛистов");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("caseFilesCatalog", "НоменклатураДел");
		Результат.Вставить("dossierNumber", "НомерТома");
		Результат.Вставить("company", "Организация");
		Результат.Вставить("department", "Подразделение");
		
	ИначеЕсли Тип = "DMProduct" Тогда
		Результат.Вставить("article", "Артикул");
		Результат.Вставить("measurementUnit", "ЕдиницаИзмерения");
		Результат.Вставить("VATRate", "СтавкаНДС");
		Результат.Вставить("price", "Цена");
		
	ИначеЕсли Тип = "DMFile" Тогда
		Результат.Вставить("owner", "ВладелецФайла");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("encrypted", "Зашифрован");
		Результат.Вставить("signed", "ПодписанЭП");
		Результат.Вставить("size", "ТекущаяВерсияРазмер");
		Результат.Вставить("creationDate", "ТекущаяВерсияДатаСоздания");
		Результат.Вставить("modificationDate", "ТекущаяВерсияДатаМодификацииФайла");
		Результат.Вставить("description", "Описание");
		Результат.Вставить("extension", "ТекущаяВерсияРасширение");
		Результат.Вставить("deletionMark", "ПометкаУдаления");
		
	ИначеЕсли Тип = "DMFileVersion" Тогда
		Результат.Вставить("owner", "Владелец");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("size", "Размер");
		Результат.Вставить("creationDate", "ДатаСоздания");
		Результат.Вставить("modificationDate", "ДатаМодификацииФайла");
		Результат.Вставить("extension", "Расширение");
		Результат.Вставить("modificationDateUniversal", "ДатаМодификацииУниверсальная");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("deletionMark", "ПометкаУдаления");
		
	ИначеЕсли Лев(Тип, СтрДлина("DMBusinessProcessTask")) = "DMBusinessProcessTask" Тогда
		Результат.Вставить("beginDate ", "Дата");
		Результат.Вставить("endDate ", "ДатаИсполнения");
		Результат.Вставить("dueDate", "СрокИсполнения");
		
	ИначеЕсли Лев(Тип, СтрДлина("DMBusinessProcess")) = "DMBusinessProcess" Тогда
		Результат.Вставить("beginDate ", "ДатаНачала");
		Результат.Вставить("endDate ", "ДатаЗавершения");
		Если Тип <> "DMBusinessProcessInternalDocumentProcessing"
			И Тип <> "DMBusinessProcessIncomingDocumentProcessing"
			И Тип <> "DMBusinessProcessOutgoingDocumentProcessing" Тогда
			Результат.Вставить("dueDate", "СрокИсполнения");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает объекты, доступные для выбора по запросу DMGetObjectListRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse
// 
Функция ПолучитьДоступныеЗначенияДляВыбора(Сообщение)
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	ТипыОбъектовXDTO = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сообщение.type, ";", Истина);
	
	Ответ = Неопределено;
	
	Для Каждого ТипОбъектаXDTO Из ТипыОбъектовXDTO Цикл
		
		Строка = ТаблицаСоответствия.Найти(СокрЛП(ТипОбъектаXDTO), "ИмяXDTO");
		Если Строка = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Попытка получить список объектов 1С:Документооборота для неизвестного типа XDTO: %1'"), ТипОбъектаXDTO);
		КонецЕсли;
		ИмяТипа = Строка["ИмяДО"];
		
		Если СтрНайти(ИмяТипа, "Перечисление.") Тогда
			Результат = ПолучитьСписокПеречисленияДляВыбора(Сообщение, Ответ, ИмяТипа);
		ИначеЕсли СтрНайти(ИмяТипа, "Задача.") Тогда
			Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСписокЗадач(Сообщение, Ответ, ИмяТипа);
		ИначеЕсли СтрНайти(ИмяТипа, "БизнесПроцесс.") Тогда
			Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСписокБизнесПроцессов(Сообщение, Ответ, ИмяТипа);
		ИначеЕсли СтрНайти(ИмяТипа, "Документ.ЕжедневныйОтчет") Тогда
			Результат = ОбработкаЗапросовXDTOУчетВремени.ПолучитьСписокЕжедневныхОтчетов(Сообщение, Ответ, ИмяТипа);
		ИначеЕсли СтрНайти(ИмяТипа, "Документ.ЕженедельныйОтчет") Тогда
			Результат = ОбработкаЗапросовXDTOУчетВремени.ПолучитьСписокЕженедельныхОтчетов(Сообщение, Ответ, ИмяТипа);
		ИначеЕсли СтрНайти(ИмяТипа, "РегистрСведений.ФактическиеТрудозатраты") Тогда
			Результат = ОбработкаЗапросовXDTOУчетВремени.ПолучитьСписокФактическихТрудозатрат(Сообщение, Ответ, ИмяТипа);
		Иначе // иные объекты без специальных методов получения 	
			Результат = ПолучитьСписокОбъектовДляВыбора(Сообщение, Ответ, ИмяТипа);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Если ПроверитьТип(Результат, "DMError") Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения перечисления по запросу DMGetObjectListRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse
//
Функция ПолучитьСписокПеречисленияДляВыбора(Сообщение, Ответ, ИмяТипа)
	
	Если Ответ = Неопределено Тогда
		Ответ = СоздатьОбъект("DMGetObjectListResponse");
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(ИмяТипа, "Перечисление.", "");
	
	Отбор = Новый Структура;
	Если Сообщение.query <> Неопределено Тогда
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			Если ВРег(Условие.property) = ВРег("Name") Тогда
				Отбор.Вставить("Наименование", Условие.value);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления[ИмяТипа].ЗначенияПеречисления Цикл
		
		ОтборПройден = Истина;
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Если СтрокаОтбора.Ключ = "Наименование" Тогда
				Если СтрНайти(НРег(ЗначениеПеречисления.Синоним), НРег(СтрокаОтбора.Значение)) = 0 Тогда
					ОтборПройден = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОтборПройден Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("DMObjectListItem");
		Элемент.object = СоздатьОбъект("DMObject");
		Элемент.object.name = ЗначениеПеречисления.Синоним;
		
		Элемент.object.objectId = СоздатьОбъект("DMObjectID");
		Элемент.object.objectId.id = ЗначениеПеречисления.Имя;
		Элемент.object.objectId.type = Сообщение.type;
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Ответ.items.Добавить(Элемент);
	КонецЦикла;
		
	Возврат Ответ;
	
КонецФункции

// Возвращает элементы справочника по запросу DMGetObjectListRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
//   Ответ - неявно возвращаемый параметр, ОбъектXDTO типа DMGetObjectListResponse
//   ИмяТипа - полное имя типа Документооборота
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокОбъектовДляВыбора(Сообщение, Ответ, ИмяТипа)
	
	Попытка
		
		ВыбранныйЭлемент = Неопределено;
		ВключатьПомеченныеНаУдаление = Ложь;
		
		СвойстваИРеквизиты = СоответствиеСвойствXDTOРеквизитамПоиска(Сообщение.type);
		СостоянияДокументов = ИсключающиеСостоянияДокументов();
		
		ИмяРегистраИсторияСостоянийДокументов = Неопределено;
		ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииИмениРегистраИсторияСостоянийДокументов(
			ИмяРегистраИсторияСостоянийДокументов);
		
		ЭтоСправочник = СтрНайти(ИмяТипа, "Справочник.") <> 0;
		Если ЭтоСправочник Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
			Иерархический = ОбъектМетаданных.Иерархический;
			ВидИерархииСправочника = ОбъектМетаданных.ВидИерархии;
		Иначе
			Иерархический = Ложь;
			ВидИерархииСправочника = Неопределено;
		КонецЕсли;
		
		Если ЭтоСправочник Тогда
			ПолеНаименования = "ОбъектВыборки.Наименование";
		Иначе
			ПолеНаименования = "Представление(ОбъектВыборки.Ссылка)";
		КонецЕсли;
		
		УсловияОтбора = Новый ТаблицаЗначений;
		УсловияОтбора.Колонки.Добавить("Поле");
		УсловияОтбора.Колонки.Добавить("ОператорСравнения");
		УсловияОтбора.Колонки.Добавить("Значение");
		
		Если Сообщение.query <> Неопределено Тогда
			
			ЗаполнитьУсловияОтбора(
				УсловияОтбора,
				Сообщение,
				СвойстваИРеквизиты,
				Иерархический,
				ВыбранныйЭлемент,
				ВключатьПомеченныеНаУдаление,
				ИмяТипа);
			
			// старые версии клиентов могут не устанавливать эти свойства
			ПредельноеКоличествоВыбираемыхОбъектов = ?(Сообщение.query.Установлено("limit"),
				Сообщение.query.limit, 0);
			НаборКолонок = ?(Сообщение.query.Установлено("columnSet"),
				Сообщение.query.columnSet, Новый Массив);
			
		Иначе
			
			ПредельноеКоличествоВыбираемыхОбъектов = 0;
			НаборКолонок = Новый Массив;
			
		КонецЕсли;
		
		Если Не Иерархический Тогда
			ВыбранныйЭлемент = Неопределено;
		КонецЕсли;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		// выбираем на один объект больше, чем затребовали
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ"
			+ ?(ЗначениеЗаполнено(ПредельноеКоличествоВыбираемыхОбъектов),
					" ПЕРВЫЕ " + Формат(ПредельноеКоличествоВыбираемыхОбъектов + 1, "ЧГ=0"),
					"") + "
			|	" + ПолеНаименования + " КАК Наименование,
			|	ОбъектВыборки.Ссылка,
			|	ОбъектВыборки.ПометкаУдаления";
		
		Для Каждого ИмяСвойства из НаборКолонок Цикл
			
			Если ИмяСвойства = "status" Тогда
				
				Запрос.Текст = Запрос.Текст + ",
				|	ПоследниеСостояния.Состояние КАК status";
				
			ИначеЕсли СостоянияДокументов.Свойство(ИмяСвойства) Тогда
				
				ИмяТаблицы = "СрезПоследних" + ИмяСвойства;
				
				Запрос.Текст = Запрос.Текст + ",
				|	" + ИмяТаблицы + ".Состояние КАК " + ИмяСвойства;
				
			ИначеЕсли ИмяСвойства = "correspondent" 
				И (Сообщение.type = "DMOutgoingDocument"
					Или Сообщение.type = "DMOutgoingDocumentTemplate") Тогда
					
				Запрос.Текст = Запрос.Текст + ",
				|	ПервыеПолучатели.Получатель КАК " + ИмяСвойства;
				
			Иначе // простое свойство, получаемое через точку
				
				ИмяРеквизита = СвойстваИРеквизиты[ИмяСвойства];
				Запрос.Текст = Запрос.Текст + ",
				|	" + ИмяРеквизита + " КАК " + ИмяСвойства;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Иерархический Тогда
			Запрос.Текст = Запрос.Текст + ", Родитель";
			
			Если ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Запрос.Текст = Запрос.Текст + ", ЭтоГруппа";
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " ИЗ " + ИмяТипа + " КАК ОбъектВыборки
		|%ТекстСоединений%
		|ГДЕ ";
		
		ДобавитьОтборИПараметрыЗапроса(
			Запрос,
			Сообщение,
			СостоянияДокументов,
			НаборКолонок,
			УсловияОтбора,
			Иерархический,
			ВключатьПомеченныеНаУдаление);
		
		ТекстСоединений = СформироватьТекстСоединений(
			Сообщение,
			СостоянияДокументов,
			НаборКолонок,
			УсловияОтбора,
			ИмяРегистраИсторияСостоянийДокументов,
			МенеджерВременныхТаблиц);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстСоединений%", ТекстСоединений);
		
		Если Иерархический и ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО ЭтоГруппа УБЫВ, Наименование";
		Иначе
			Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО Наименование";
		КонецЕсли;
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоВыбираемыхОбъектов, НаборКолонок,
				Сообщение.type, ЭтоСправочник, Иерархический, ВидИерархииСправочника);
		Иначе
			
			// Если есть SelectedItem и справочник иерархический - сперва строим до корня списка, 
			// затем для каждого уровня получаем список и заполняем массив возврата.
			// Вернем список списков - соседние ветки каждого уровня от текущего до самого верхнего.
			
			МассивРодителей = Новый Массив;
			ТекущийЭлемент = ВыбранныйЭлемент;
			
			Пока НЕ ТекущийЭлемент.Родитель.Пустая() Цикл
				ТекущийЭлемент = ТекущийЭлемент.Родитель;
				МассивРодителей.Добавить(ТекущийЭлемент);
			КонецЦикла;
			
			// Запрос без Родителя - для корневых папок.
			ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоВыбираемыхОбъектов, НаборКолонок, 
				Сообщение.type, ЭтоСправочник, Иерархический, ВидИерархииСправочника);
			
			Для Каждого ТекущийЭлемент Из МассивРодителей Цикл
				Запрос.УстановитьПараметр("Родитель", ТекущийЭлемент);
				ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоВыбираемыхОбъектов, НаборКолонок, 
					Сообщение.type, ЭтоСправочник, Иерархический, ВидИерархииСправочника);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка справочника'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает структуру с массивами для последующего отбора
//
Функция ИсключающиеСостоянияДокументов()
	
	СостоянияДокументов = Новый Структура;
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаРассмотрении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Рассмотрен);
	СостоянияДокументов.Вставить("statusConsideration", ИсключающиеСостояния);
	
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаИсполнении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Исполнен);
	СостоянияДокументов.Вставить("statusPerformance", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаСогласовании);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НеСогласован);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Согласован);
	СостоянияДокументов.Вставить("statusApproval", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаУтверждении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НеУтвержден);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Утвержден);
	СостоянияДокументов.Вставить("statusConfirmation", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаПодписании);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Отклонен);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Подписан);
	СостоянияДокументов.Вставить("statusSigning", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Проект);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаРегистрации);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Зарегистрирован);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НеЗарегистрирован);
	СостоянияДокументов.Вставить("statusRegistration", ИсключающиеСостояния);
	
	Возврат СостоянияДокументов;
	
КонецФункции

// Формирует таблицу значений с условиями отбора
//
Процедура ЗаполнитьУсловияОтбора(УсловияОтбора, Сообщение, СвойстваИРеквизиты, Иерархический,
	ВыбранныйЭлемент, ВключатьПомеченныеНаУдаление, ИмяТипа)
	
	ДокументИз = Неопределено;
	ДокументНа = Неопределено;
	Предопределенные = Неопределено;
	Обязательные = Неопределено;
	
	// соберем условия в таблицу, уточнив операторы сравнения и значения
	Для Каждого Условие Из Сообщение.query.conditions Цикл
		
		// старые версии клиентов могут не устанавливать это свойство
		ОператорСравнения = ?(Условие.Установлено("comparisonOperator"),
			Условие.comparisonOperator, "");
			
		// специальные поля поиска
		Если ВРег(Условие.property) = ВРег("SelectedItem") Тогда
			ВыбранныйЭлемент = ПолучитьСсылкуПоObjectID(Условие.value);
			
		ИначеЕсли ВРег(Условие.property) = ВРег("ignoreDeletionMark") Тогда
			ВключатьПомеченныеНаУдаление = Условие.value;
			
		ИначеЕсли ВРег(Условие.property) = ВРег("Parent") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.Родитель";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
			
		ИначеЕсли ВРег(Условие.property) = ВРег("Name") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.Наименование";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = Условие.value;
			
		ИначеЕсли ВРег(Условие.property) = ВРег("correspondent")
			И Сообщение.Type = "DMContactPerson" Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.Владелец";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
			
		ИначеЕсли ВРег(Условие.property) = ВРег("correspondent")
			И (Сообщение.Type = "DMOutgoingDocument"
				Или Сообщение.Type = "DMOutgoingDocumentTemplate") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "anyCorrespondent";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
			
		ИначеЕсли ВРег(Условие.property) = ВРег("AdditionalProperty") 
			И (Сообщение.Type = "DMObjectPropertyValue"
				Или Сообщение.Type = "DMObjectPropertyValueHierarchy") Тогда
			Продолжить;
			
		ИначеЕсли ВРег(Условие.property) = ВРег("documentType") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.ВидДокумента";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
			
		ИначеЕсли ВРег(Условие.property) = ВРег("anyDate") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "anyDate";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = Условие.value;
			
		ИначеЕсли ВРег(Условие.property) = ВРег("status") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "status";
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
			
		ИначеЕсли ВРег(Условие.property) = ВРег("ExternalObject") Тогда
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
			УсловиеОтбора.ОператорСравнения = ?(ЗначениеЗаполнено(ОператорСравнения),
				ОператорСравнения,
				"IN");
			УсловиеОтбора.Значение = 
				РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
					Условие.value.id, Условие.value.type, Ложь);
			
		ИначеЕсли Сообщение.type = "DMRelationType" Тогда
			
			Если ВРег(Условие.property) = ВРег("DocumentFrom") Тогда
				ДокументИз = ПолучитьСсылкуПоObjectID(Условие.value);
				Если ТипЗнч(ДокументИз) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
					Или ТипЗнч(ДокументИз) = Тип("СправочникСсылка.ВидыВходящихДокументов")
					Или ТипЗнч(ДокументИз) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
					ДокументИз = Новый Структура("ВидДокумента", ДокументИз);
				КонецЕсли;
			КонецЕсли;
			
			Если ВРег(Условие.property) = ВРег("DocumentTo") Тогда
				ДокументНа = ПолучитьСсылкуПоObjectID(Условие.value);
				Если ТипЗнч(ДокументНа) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
					Или ТипЗнч(ДокументНа) = Тип("СправочникСсылка.ВидыВходящихДокументов")
					Или ТипЗнч(ДокументНа) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
					ДокументНа = Новый Структура("ВидДокумента", ДокументНа);
				КонецЕсли;
			КонецЕсли;
			
			Если ВРег(Условие.property) = ВРег("Predefined") Тогда
				Предопределенные = Условие.value;
			КонецЕсли;
			
			Если ВРег(Условие.property) = ВРег("Mandatory") Тогда
				Обязательные = Условие.value;
			КонецЕсли;
			
		ИначеЕсли Сообщение.type = "DMUser" Тогда
			
			Если ВРег(Условие.property) = ВРег("Subdivision") Тогда
				ПодразделениеФильтр = ПолучитьСсылкуПоObjectID(Условие.value);
			КонецЕсли;
			
			Если ПодразделениеФильтр <> Неопределено Тогда
				ПользователиПодразделения = РаботаСПользователями.ПолучитьПользователейПодразделения(
					ПодразделениеФильтр);
				УсловиеОтбора = УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
				УсловиеОтбора.ОператорСравнения = "IN";
				УсловиеОтбора.Значение = ПользователиПодразделения;
			КонецЕсли;
			
		// Прочие поддерживаемые условия поиска.
		ИначеЕсли СвойстваИРеквизиты.Свойство(Условие.property) Тогда
			
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки." + СвойстваИРеквизиты[Условие.property];
			УсловиеОтбора.ОператорСравнения = ОператорСравнения;
			Если ТипЗнч(Условие.value) = Тип("ОбъектXDTO") Тогда
				УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
			Иначе
				УсловиеОтбора.Значение = Условие.value;
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестное поле в условии отбора: %1'"), Условие.property);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим типы связей по собранным ранее условиям.
	Если Сообщение.type = "DMRelationType" Тогда
		
		НастройкиСвязи = СвязиДокументов.ПолучитьНастройкиСвязи(ДокументИз, ДокументНа);
		ТипыСвязей = Новый Массив;
		
		Для Каждого НастройкаСвязи Из НастройкиСвязи Цикл
			
			Если Предопределенные <> Неопределено
				И НастройкаСвязи.Предопределенная <> Предопределенные Тогда
				Продолжить;
			КонецЕсли;
			
			Если Обязательные <> Неопределено
				И НастройкаСвязи.Обязательная <> Обязательные Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДокументИз) <> Тип("Структура")
				И ТипЗнч(ДокументНа) <> Тип("Структура")
				И Не СвязиДокументов.ЭтоПодходящийТипСвязи(ДокументИз, ДокументНа, НастройкаСвязи.ТипСвязи) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипыСвязей.Добавить(НастройкаСвязи.ТипСвязи);
			
		КонецЦикла;
		
		УсловиеОтбора = УсловияОтбора.Добавить();
		УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
		УсловиеОтбора.ОператорСравнения = "IN";
		УсловиеОтбора.Значение = ТипыСвязей;
		
	КонецЕсли;
	
	Если Иерархический Тогда
		
		// Для иерархических справочников условие на родителя необходимо, чтобы получить
		// группы и элементы нужного уровня.
		Если УсловияОтбора.Найти("ОбъектВыборки.Родитель", "Поле") = Неопределено
			И ВыбранныйЭлемент <> Неопределено Тогда
			
			ИмяВида = Сред(ИмяТипа, СтрДлина("Справочник.") + 1);
			УсловиеОтбора = УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.Родитель";
			УсловиеОтбора.ОператорСравнения = "=";
			УсловиеОтбора.Значение = Справочники[ИмяВида].ПустаяСсылка();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в запрос условия отбора и заполняет параметры запроса
//
Процедура ДобавитьОтборИПараметрыЗапроса(Запрос, Сообщение, СостоянияДокументов, НаборКолонок, УсловияОтбора,
	Иерархический, ВключатьПомеченныеНаУдаление)
	
	Запрос.Текст = Запрос.Текст
		+ ?(ВключатьПомеченныеНаУдаление,
			"ИСТИНА
			|",
			"НЕ ОбъектВыборки.ПометкаУдаления
			|");
	
	Для Каждого ИмяСвойства из НаборКолонок Цикл
		Если СостоянияДокументов.Свойство(ИмяСвойства) Тогда
			
			ИмяПараметра = "ЗначениеОтбора" + ИмяСвойства;
			Запрос.УстановитьПараметр(ИмяПараметра, СостоянияДокументов[ИмяСвойства]);
			
		КонецЕсли;
	КонецЦикла;
	
	// Далеко не все файлы следует предъявлять через этот интерфейс.
	Если Сообщение.type = "DMFile" Тогда
		Запрос.Текст = Запрос.Текст + " И (
		|	ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.ПапкиФайлов
		|	ИЛИ ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.ВнутренниеДокументы
		|	ИЛИ ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.ВходящиеДокументы
		|	ИЛИ ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.ИсходящиеДокументы
		|	ИЛИ ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.Контрагенты
		|)
		|";
	ИначеЕсли Сообщение.type = "DMFileFolder" Тогда // отбросим служебные папки
		Запрос.Текст = Запрос.Текст + " И СлужебныеПапки.СсылкаНаПапкуФайловДО ЕСТЬ NULL
		|";
	КонецЕсли;
	
	Для Каждого УсловиеОтбора из УсловияОтбора Цикл
		
		Если УсловиеОтбора.Поле = "ОбъектВыборки.Родитель" Тогда
			Если Не Иерархический Тогда
				Продолжить;
			КонецЕсли;
			ИмяПараметра = "Родитель";
		Иначе
			ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		КонецЕсли;
		
		ИмяСрезаСостояний = "СрезСостояний" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		ОператорСравнения = УсловиеОтбора.ОператорСравнения;
		Значение = УсловиеОтбора.Значение;
		
		// Определим оператор сравнения по умолчанию.
		Если УсловиеОтбора.Поле = "ОбъектВыборки.Наименование" Тогда
			// Совместимость с ранними версиями клиентов: по умолчанию ищем по части наименования.
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "LIKE";
				Значение = "%" + Значение + "%";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			// Совместимость с ранними версиями клиентов: ищем вхождение в список.
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "IN";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") 
			Или ТипЗнч(Значение) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			// Совместимость с ранними версиями клиентов: ищем по родителю В ИЕРАРХИИ.
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "IN HIERARCHY";
			КонецЕсли;
		КонецЕсли;
		
		// Совместимость с ранними версиями клиентов: оператор сравнения может быть не указан.
		Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
			ОператорСравнения = "=";
		КонецЕсли;
		
		// Сформируем текст условия запроса.
		Если ОператорСравнения = "LIKE" Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " ПОДОБНО &" + ИмяПараметра + "
			|";
			
		ИначеЕсли ОператорСравнения = "IN" Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " В (&" + ИмяПараметра + ")
			|";
			
		ИначеЕсли ОператорСравнения = "IN HIERARCHY" Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " В ИЕРАРХИИ(&" + ИмяПараметра + ")
			|";
			
		ИначеЕсли УсловиеОтбора.Поле = "anyDate" Тогда
			
			Запрос.Текст = Запрос.Текст + " И (";
			Если Сообщение.type = "DMFile" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	" + УсловиеНаДату("ДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ТекущаяВерсияДатаМодификацииФайла", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ТекущаяВерсияДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|";
			ИначеЕсли Сообщение.type = "DMInternalDocument" или Сообщение.type = "DMOutgoingDocument" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	" + УсловиеНаДату("ДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ДатаРегистрации", ОператорСравнения, ИмяПараметра) + "
				|";
			ИначеЕсли Сообщение.type = "DMIncomingDocument" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	" + УсловиеНаДату("ДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ДатаРегистрации", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ИсходящаяДата", ОператорСравнения, ИмяПараметра) + "
				|";
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Условие на поле anyDate не поддерживается для объектов типа %1'"), Сообщение.type);
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ")
			|";
			
		ИначеЕсли (УсловиеОтбора.Поле = "status") И (УсловиеОтбора.ОператорСравнения = "<>") Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + ИмяСрезаСостояний + ".Документ ЕСТЬ NULL
			|";
			
		ИначеЕсли (УсловиеОтбора.Поле = "status") И (УсловиеОтбора.ОператорСравнения = "=") Тогда
			// реализуется соединением
			
		ИначеЕсли УсловиеОтбора.Поле = "anyCorrespondent" Тогда
			// реализуется соединением
			
		Иначе // простейшее условие
			
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " " + ОператорСравнения + " &" + ИмяПараметра + "
			|";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр(ИмяПараметра, Значение);
		
	КонецЦикла;
	
	// Отбор списка шаблонов бизнес процессов без комплексных процессов.
	Если СтрНачинаетсяС(Сообщение.type, "DMBusinessProcess")
		И СтрЗаканчиваетсяНа(Сообщение.type, "Template") Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ ШаблонВКомплексномПроцессе
		|";
	КонецЕсли;
	
КонецПроцедуры

// Формирует блок соединений в запросе, получающем список объектов для выбора
//
Функция СформироватьТекстСоединений(Сообщение, СостоянияДокументов, НаборКолонок,
	УсловияОтбора, ИмяРегистраИсторияСостоянийДокументов, МенеджерВременныхТаблиц)
	
	ТекстСоединений = "";
	
	// отбросим служебные папки
	Если Сообщение.type = "DMFileFolder" Тогда
		ТекстСоединений = ТекстСоединений +
			"ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем КАК СлужебныеПапки
			|ПО
			|	ОбъектВыборки.Ссылка = СлужебныеПапки.СсылкаНаПапкуФайловДО
			|";
	КонецЕсли;
	
	Для Каждого ИмяСвойства из НаборКолонок Цикл
		
		Если ИмяСвойства = "status" Тогда
			
			ТекстСоединений = ТекстСоединений +
			"ЛЕВОЕ СОЕДИНЕНИЕ (
			|	ВЫБРАТЬ
			|		ИсторияСостояний.Документ КАК Документ,
			|		МАКСИМУМ(ИсторияСостояний.Состояние) КАК Состояние
			|	ИЗ
			|		РегистрСведений." + ИмяРегистраИсторияСостоянийДокументов + " КАК ИсторияСостояний
			|	ЛЕВОЕ СОЕДИНЕНИЕ (
			|		ВЫБРАТЬ
			|			Документ,
			|			МАКСИМУМ(Период) КАК Период
			|		ИЗ
			|			РегистрСведений." + ИмяРегистраИсторияСостоянийДокументов + "
			|		СГРУППИРОВАТЬ ПО
			|			Документ
			|	) КАК ДатыПоследнихСостояний
			|	ПО 
			|		ИсторияСостояний.Документ = ДатыПоследнихСостояний.Документ
			|		И ИсторияСостояний.Период = ДатыПоследнихСостояний.Период
			|	СГРУППИРОВАТЬ ПО ИсторияСостояний.Документ
			|) КАК ПоследниеСостояния
			|ПО 
			|	ОбъектВыборки.Ссылка = ПоследниеСостояния.Документ
			|";
			
		ИначеЕсли СостоянияДокументов.Свойство(ИмяСвойства) Тогда
			
			ИмяТаблицы = "СрезПоследних" + ИмяСвойства;
			ИмяПараметра = "ЗначениеОтбора" + ИмяСвойства;
			
			ТекстСоединений = ТекстСоединений +
			"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраИсторияСостоянийДокументов + ".СрезПоследних(, 
			|		Состояние В (&" + ИмяПараметра + ")) КАК " + ИмяТаблицы + "
			|ПО 
			|	ОбъектВыборки.Ссылка = " + ИмяТаблицы + ".Документ
			|";
			
		ИначеЕсли ИмяСвойства = "correspondent" 
			И (Сообщение.type = "DMOutgoingDocument"
				Или Сообщение.type = "DMOutgoingDocumentTemplate") Тогда
				
			ИмяСправочника = ?(Сообщение.type = "DMOutgoingDocument", 
				"ИсходящиеДокументы",
				"ШаблоныИсходящихДокументов");
				
			ТекстСоединений = ТекстСоединений + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + ".Получатели КАК ПервыеПолучатели
			|ПО ОбъектВыборки.Ссылка = ПервыеПолучатели.Ссылка И ПервыеПолучатели.НомерСтроки = 1
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УсловиеОтбора из УсловияОтбора Цикл
		
		ИмяСрезаСостояний = "СрезСостояний" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		ОператорСравнения = ?(ЗначениеЗаполнено(УсловиеОтбора.ОператорСравнения),
			УсловиеОтбора.ОператорСравнения,
			"=");
		ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		
		Если УсловиеОтбора.Поле = "status" Тогда
			
			Если УсловиеОтбора.ОператорСравнения = "<>" Тогда
				ТекстСоединений = ТекстСоединений + 
				"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраИсторияСостоянийДокументов + ".СрезПоследних() КАК " + ИмяСрезаСостояний + "
				|ПО 
				|	ОбъектВыборки.Ссылка = " + ИмяСрезаСостояний + ".Документ
				|	И " + ИмяСрезаСостояний + ".Состояние = &" + ИмяПараметра + "
				|";
			Иначе
				ТекстСоединений = ТекстСоединений + 
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраИсторияСостоянийДокументов + ".СрезПоследних() КАК " + ИмяСрезаСостояний + "
				|ПО 
				|	ОбъектВыборки.Ссылка = " + ИмяСрезаСостояний + ".Документ
				|	И " + ИмяСрезаСостояний + ".Состояние " + ОператорСравнения + " &" + ИмяПараметра + "
				|";
			КонецЕсли;
			
		ИначеЕсли УсловиеОтбора.Поле = "anyCorrespondent" Тогда
			
			ИмяСправочника = ?(Сообщение.type = "DMOutgoingDocument", 
				"ИсходящиеДокументы",
				"ШаблоныИсходящихДокументов");
			
			ТекстСоединений = ТекстСоединений + 
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка
			|	ИЗ Справочник." + ИмяСправочника + ".Получатели
			|	ГДЕ Получатель " + ОператорСравнения + " &" + ИмяПараметра + "
			|) КАК ПодходящиеПолучатели
			|ПО
			|	ОбъектВыборки.Ссылка = ПодходящиеПолучатели.Ссылка
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Сообщение.query <> Неопределено)
		И (Сообщение.query.conditions.Количество() = 1) Тогда
		Условие = Сообщение.query.conditions[0];
		
		Если (ВРег(Условие.property) = ВРег("AdditionalProperty"))
			И (Сообщение.Type = "DMObjectPropertyValue"
				Или Сообщение.Type = "DMObjectPropertyValueHierarchy") Тогда
				
			ЗапросВладелецДопЗначений = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫБОР
				|		КОГДА ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
				|			ТОГДА ДополнительныеРеквизитыИСведения.Ссылка
				|		ИНАЧЕ ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений
				|	КОНЕЦ КАК Владелец
				|ПОМЕСТИТЬ ВТВладелецДопЗначений
				|ИЗ
				|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
				|ГДЕ
				|	ДополнительныеРеквизитыИСведения.Ссылка = &Параметр");
			ЗапросВладелецДопЗначений.УстановитьПараметр("Параметр", ПолучитьСсылкуПоObjectID(Условие.value));
			ЗапросВладелецДопЗначений.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ЗапросВладелецДопЗначений.Выполнить();
			
			ТекстСоединений = ТекстСоединений + 
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВладелецДопЗначений КАК ВТВладелецДопЗначений
				|	ПО ОбъектВыборки.Владелец = ВТВладелецДопЗначений.Владелец
				|";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСоединений;
	
КонецФункции

// Собирает условие на дату в зависимости от оператора сравнения
//
Функция УсловиеНаДату(ИмяПоля, ОператорСравнения, ИмяПараметра)
	
	Если ОператорСравнения = "<" или ОператорСравнения = "<=" Тогда
		Результат = "((ИмяПоля <> ДАТАВРЕМЯ(1, 1, 1)) И (КОНЕЦПЕРИОДА(ИмяПоля, ДЕНЬ) == &ИмяПараметра))";
	Иначе
		Результат = "((ИмяПоля <> ДАТАВРЕМЯ(1, 1, 1)) И (НАЧАЛОПЕРИОДА(ИмяПоля, ДЕНЬ) == &ИмяПараметра))";
	КонецЕсли;
	Результат = СтрЗаменить(Результат, "==", ОператорСравнения);
	Результат = СтрЗаменить(Результат, "ИмяПоля", "ОбъектВыборки." + ИмяПоля);
	Результат = СтрЗаменить(Результат, "ИмяПараметра", ИмяПараметра);
	
	Возврат Результат;
	
КонецФункции

// Заполняет свойства объекта DMObjectListItem из результата запроса
//
// Параметры:
//   Ответ - неявно возвращаемое значение, ОбъектXDTO типа DMObjectListItem
//   Запрос - Запрос, выбирающий реквизиты объекта
//   ПредельноеКоличествоЭлементов - Число - если указано, вернуть не больше указанного количества
//   ИменаСвойств - СписокXDTO - имена свойств объекта XDTO, подлежащих заполнению помимо стандартных
//   ИмяТипа - Строка - имя типа XDTO
//   ЭтоСправочник - Булево - Истина, если заполняемый объект - справочник
//   Иерархический - Булево - Истина, если справочник иерархический
//   ВидИерархииСправочника - ВидИерархии - вид иерархии справочника
// 
Процедура ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоЭлементов, ИменаСвойств, ИмяТипа,
		ЭтоСправочник, Иерархический, ВидИерархииСправочника)

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// возможно, в выборке больше элементов, чем запрашивалось?
		Если ПредельноеКоличествоЭлементов <> 0 
			и Ответ.items.Количество() >= ПредельноеКоличествоЭлементов Тогда
			Ответ.tooManyObjects = Истина;
			Прервать;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("DMObjectListItem");
		
		Элемент.object = СоздатьОбъект(ИмяТипа);
		Элемент.object.name = Выборка.Наименование;
		Элемент.object.objectId = ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		
		Для каждого ИмяСвойства из ИменаСвойств Цикл
			ЗначениеРеквизита = Выборка[ИмяСвойства];
			ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object, ИмяСвойства, ЗначениеРеквизита);
		КонецЦикла;
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Если ЭтоСправочник Тогда
			
			Если Иерархический Тогда
				Элемент.parentId = ПолучитьObjectIDПоСсылке(Выборка.Родитель);
				
				Если ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
					Элемент.canHaveChildren = Истина;
				Иначе	
					Элемент.isFolder = Выборка.ЭтоГруппа;
					Элемент.canHaveChildren = Выборка.ЭтоГруппа;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Ответ.items.Добавить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает описание дополнительных реквизитов объекта ДО.
//
// Параметры:
//   ОбъектДО - Произвольный - владелец дополнительных реквизитов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание реквизитов, с колонками:
//     Свойство,
//     Значение,
//     ТипРеквизита.
//
Функция ОписаниеДополнительныхРеквизитовОбъектаДО(ОбъектДО)
	
	// Для шаблонов - отдельная упрощенная выборка из табличной части.
	Если ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
		Или ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ШаблоныВходящихДокументов")
		Или ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов") Тогда
		
		Если ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов") Тогда
			ИмяСправочника = "ШаблоныВнутреннихДокументов"
		ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникСсылка.ШаблоныВходящихДокументов") Тогда
			ИмяСправочника = "ШаблоныВходящихДокументов"
		Иначе
			ИмяСправочника = "ШаблоныИсходящихДокументов";
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДополнительныеРеквизиты.Свойство КАК Свойство,
			|	ДополнительныеРеквизиты.Значение КАК Значение,
			|	ДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока,
			|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипРеквизита
			|ИЗ
			|	Справочник." + ИмяСправочника + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
			|ГДЕ
			|	ДополнительныеРеквизиты.Ссылка = &Ссылка
			|	И Не ДополнительныеРеквизиты.Свойство.ПометкаУдаления");
			
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДО)) Тогда
			Запрос.УстановитьПараметр("Ссылка", ОбъектДО);
		Иначе
			Запрос.УстановитьПараметр("Ссылка", ОбъектДО.Ссылка);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат = Запрос.Выполнить().Выгрузить();
		РезультатСТекстовымиСтроками = Результат.Скопировать(,"Свойство, Значение, ТипРеквизита");
		ИндексСтроки = 0;
		Для Каждого ЗначениеСвойства Из Результат Цикл
			Если Не ПустаяСтрока(ЗначениеСвойства.ТекстоваяСтрока) Тогда
				РезультатСТекстовымиСтроками[ИндексСтроки].Значение = ЗначениеСвойства.ТекстоваяСтрока;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
		РезультатСТекстовымиСтроками.Колонки.Добавить("ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"));
		Возврат РезультатСТекстовымиСтроками;
		
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Свойство");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("ТипРеквизита");
	Результат.Колонки.Добавить("ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"));
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ОбъектДО);
	
	ДополнительныеСвойстваОбъекта = Новый ТаблицаЗначений;
	ДополнительныеСвойстваОбъекта.Колонки.Добавить("Свойство");
	ДополнительныеСвойстваОбъекта.Колонки.Добавить("Значение");
	
	Если ЗначениеЗаполнено(ОбъектДО.Ссылка) Тогда
		ДополнительныеСвойстваОбъекта = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДО.Ссылка, "ДополнительныеРеквизиты").Выгрузить();
	ИначеЕсли ОбъектДО.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		ДополнительныеСвойстваОбъекта = ОбъектДО.ДополнительныеРеквизиты.Выгрузить();
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	СписокСвойствОбъекта = Новый СписокЗначений;
	СписокСвойствОбъекта.ЗагрузитьЗначения(НаборСвойств.ВыгрузитьКолонку("Набор"));
	
	СоставДополнительныхРеквизитов = ОбработкаЗапросовXDTOПовтИсп.СоставДополнительныхРеквизитов(
			ЗначениеВСтрокуВнутр(ДополнительныеСвойстваОбъекта),
			ЗначениеВСтрокуВнутр(СписокСвойствОбъекта),
			Ложь);
	
	ПроверятьЗависимости =
		Не СоставДополнительныхРеквизитов.Колонки.Найти("ЗависимостиДополнительныхРеквизитов") = Неопределено;
	
	Для Каждого СтрокаРеквизита Из СоставДополнительныхРеквизитов Цикл
		
		ОписаниеРеквизита = Результат.Добавить();
		ОписаниеРеквизита.Свойство = СтрокаРеквизита.Свойство;
		ОписаниеРеквизита.ТипРеквизита = СтрокаРеквизита.ТипЗначения;
		ОписаниеРеквизита.Значение = СтрокаРеквизита.Значение;
		
		ОписаниеРеквизита.ЗаполнятьОбязательно = СтрокаРеквизита.ЗаполнятьОбязательно;
		Если ПроверятьЗависимости Тогда
			Для Каждого Зависимость Из СтрокаРеквизита.ЗависимостиДополнительныхРеквизитов Цикл
				ОписаниеРеквизита.ЗаполнятьОбязательно = 
					ОписаниеРеквизита.ЗаполнятьОбязательно И
					НЕ Зависимость.ЗависимоеСвойство = "ЗаполнятьОбязательно";
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий уведомлению программы.
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий существующее уведомление.
//   НаборКолонок - Массив - массив имен реквизитов к получению
//                - Неопределено - требование получить все реквизиты
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser или DMError
//
Функция ПолучитьУведомлениеПрограммы(ОбъектИд, НаборКолонок = Неопределено) Экспорт 
	
	Попытка 
		
		Ссылка = ПолучитьСсылкуПоObjectID(ОбъектИд);
		
		ОбъектXDTO = СоздатьОбъект("DMUser");
		ПолучитьДанныеУведомленияПрограммы(Ссылка, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении уведомления программы'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта ДО.
//
// Параметры:
//   Объект - СправочникОбъект.УведомленияПрограммы.
//   ОбъектXDTO - ОбъектXDTO типа DMApplicationNotification.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению, или
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеУведомленияПрограммы(Ссылка, ОбъектXDTO, НаборКолонок = Неопределено) 
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("user", "Пользователь");
	СтруктураРеквизитов.Вставить("date", "Дата");
	СтруктураРеквизитов.Вставить("description", "Описание");
	СтруктураРеквизитов.Вставить("name", "Наименование");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтруктураРеквизитов);
	
	Колонки = МассивСтрокВНижнемРегистре(НаборКолонок);
	
	Для Каждого Реквизит Из ЗначенияРеквизитов Цикл
		Если Колонки.Количество() = 0 Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
	ОбъектXDTO.name = ЗначенияРеквизитов.name;
	
КонецПроцедуры

// Преобразует массив строк в нижний регистр.
//
// Параметры:
//   МассивСтрок - Массив или Неопределено.
//
// Возвращаемое значение:
//   Массив - исходный массив, строки которого приведены к нижнему регистру.
//
Функция МассивСтрокВНижнемРегистре(МассивСтрок)
	
	Результат = Новый Массив;
	
	Если МассивСтрок <> Неопределено Тогда
		Для Каждого Строка Из МассивСтрок Цикл
			Результат.Добавить(НРег(Строка));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Сообщение);
	ТекстОбъектаСообщение = ЗаписьXML.Закрыть();
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
	ТекстОбъектаРезультат = ЗаписьXML.Закрыть();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Превышено время ожидания выполнения запроса.
			|Время выполнения: %1
			|
			|Текст запроса:
			|%2
			|
			|Результат запроса:
			|%3'"),
				ВремяВыполнения,
				ТекстОбъектаСообщение,
				ТекстОбъектаРезультат));
	
КонецПроцедуры

#КонецОбласти