#Область СлужебныйПрограммныйИнтерфейс

// Читает сообщения по входящим документам.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - Для этой организации, согласно ее настройкам каталога получения
Процедура ПолучитьВходящиеДокументы(Организация) Экспорт
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(
		Организация, ДанныеОтвета, "Организация, КаталогПолучения, РазмерПорции");
	Если Не ДанныеОтвета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	МЭДО.ПолучитьВходящиеСообщения(Настройки, "Транспортный контейнер, Документ");
	
КонецПроцедуры

// Отправить исходящие документы. См. МЭДО.ОтправитьИсходящиеДокументы.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйЛегкийОтвет.
//  МассивДокументов - Массив из ОпределяемыйТип.ПредметМЭДО - Массив документов
Процедура ОтправитьИсходящиеДокументы(Организация, ДанныеОтвета, МассивДокументов = Неопределено) Экспорт
	
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(
		Организация, ДанныеОтвета, "Организация, КаталогОтправки, РазмерПорции");
	Если Не ДанныеОтвета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	МЭДО.ОтправитьИсходящиеДокументы(Настройки, ДанныеОтвета, МассивДокументов);
	
КонецПроцедуры

// Функция - Возвращает набор данных для подписания контейнеров ЭП, помещая во временное хранилище
// данные исходящих документов для отправки.
//
// Параметры:
//  ИсходящиеДокументы		 - Массив из ОпределяемыйТип.ПредметМЭДО - Массив из исходящих документов.
//  АдресДанныхДокументов	 - Строка	 - Адрес во временном хранилище
// 
// Возвращаемое значение:
//  Массив из Структура - значения массива типа Структура с полями
//    Данные - ДвоичныеДанные
//    Объект - УникальныйИдетификатор - Идентификатор сообщения
//    Представление - Строка - Представление документа
//
Функция НаборДанныхИсходящихДокументовДляПодписания(ИсходящиеДокументы, АдресДанныхДокументов) Экспорт
	
	НаборДанных = Новый Массив();
	ДанныеДокументов = Новый Соответствие();
	
	Для Каждого ИсходящийДокумент Из ИсходящиеДокументы Цикл
		ДанныеОтвета = МЭДОСтруктурыДанных.НовыйОтвет();
		ДанныеДокумента = ИнтеграцияСМЭДО.ДанныеИсходящегоДокументаДляОтправки(ИсходящийДокумент, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Продолжить;
		КонецЕсли;
		
		МЭДО.ЗаписатьСодержимоеКонтейнераИсходящегоДокумента(ДанныеДокумента, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокументов[ДанныеДокумента.ИдентификаторСообщения] = ДанныеДокумента;
		
		ЭлементНабора = Новый Структура("Данные, Объект, Представление");
		ЭлементНабора.Данные = ДанныеДокумента.СодержимоеКонтейнера.ДвоичныеДанные;
		ЭлементНабора.Объект = ДанныеДокумента.ИдентификаторСообщения;
		ЭлементНабора.Представление = Строка(ИсходящийДокумент);
		НаборДанных.Добавить(ЭлементНабора);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеДокументов, АдресДанныхДокументов);
	Возврат НаборДанных;
	
КонецФункции

// Записывает сообщения по исходящим документам после их подписания.
//
// Параметры:
//   Путь - Строка - полный путь к каталогу, куда следует записать сообщения.
//   АдресДанныхДокументов - Строка - адрес данных документов во временном хранилище.
//   Подписи - Соответствие из ДвоичныеДанные - двоичных данных подписей идентификаторам сообщений.
//
// Возвращаемое значение:
//   Соответствие из Структура - где ключ - документ, а значение - Структура со свойствами:
//   * Успех - Булево - Истина, если сообщение записано успешно.
//   * СообщениеОбОшибке - Строка - текст сообщения об ошибке.
//
Функция ЗаписатьСообщенияПоИсходящимДокументамПослеПодписания(Путь, АдресДанныхДокументов, Подписи) Экспорт
	
	ДанныеОтветов = Новый Соответствие();
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	МЭДО.ПроверитьСуществуетЛиКаталог(Путь, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		ДанныеОтветов.Вставить(МЭДО.Текст_КаталогНеСуществует(), ДанныеОтвета);
		Возврат ДанныеОтветов;
	КонецЕсли;
	
	ДанныеДокументов = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
	
	// Запишем подписи на диск.
	Для Каждого Подпись Из Подписи Цикл
		ДанныеДокумента = ДанныеДокументов[Подпись.Ключ];
		ДанныеДокумента.ПодписьКонтейнера.ДвоичныеДанные = Подпись.Значение;
		ПутьКФайлуПодписи = ДанныеДокумента.ВременныйКаталог + ДанныеДокумента.ПодписьКонтейнера.ЛокальноеИмя;
		ДанныеДокумента.ПодписьКонтейнера.ДвоичныеДанные.Записать(ПутьКФайлуПодписи);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеДокументов Цикл
		ДанныеДокумента = КлючИЗначение.Значение;
		
		ДанныеОтвета = МЭДОСтруктурыДанных.НовыйОтвет();
		МЭДО.ЗаписатьСообщениеПоИсходящемуДокументу(Путь, ДанныеДокумента, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Если ЗначениеЗаполнено(ДанныеДокумента.ПодкаталогСообщения) Тогда
				УдалитьФайлы(ДанныеДокумента.ПодкаталогСообщения);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеДокумента.ВременныйКаталог) Тогда
				УдалитьФайлы(ДанныеДокумента.ВременныйКаталог);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОтветов[ДанныеДокумента.Документ] = ДанныеОтвета;
	КонецЦикла;
	
	Возврат ДанныеОтветов;
	
КонецФункции

// Читает сообщения по уведомлениям и квитанциям.
// Параметры:
//   Организация - ОпределяемыйТип.Организация - Для этой организации, согласно ее настройкам каталога получения
Процедура ПолучитьВходящиеУведомленияКвитанции(Организация) Экспорт
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(
		Организация, ДанныеОтвета, "Организация, КаталогПолучения, РазмерПорции");
	Если Не ДанныеОтвета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	МЭДО.ПолучитьВходящиеСообщения(Настройки, "Уведомление, Квитанция");
	
КонецПроцедуры

// Процедура - Записывает сообщения по исходящим квитанциям.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - Организация.
Процедура ОтправитьИсходящиеКвитанции(Организация) Экспорт
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(
		Организация, ДанныеОтвета, "Организация, КаталогОтправки, РазмерПорции");
	Если Не ДанныеОтвета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	МЭДО.ОтправитьИсходящиеКвитанции(Настройки);
	
КонецПроцедуры

// Записывает сообщения по уведомлениям.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйЛегкийОтвет.
//  МассивУведомлений	 - Массив из ДокументСсылка.УведомлениеМЭДО - массив уведомлений.
Процедура ОтправитьИсходящиеУведомления(Организация, ДанныеОтвета, МассивУведомлений) Экспорт
	
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(
		Организация, ДанныеОтвета, "Организация, КаталогОтправки, РазмерПорции");
	Если Не ДанныеОтвета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	МЭДО.ОтправитьИсходящиеУведомления(Настройки, ДанныеОтвета, МассивУведомлений);
	
КонецПроцедуры

// Процедура - Удаляет временные файлы.
//
// Параметры:
//   АдресДанных - Строка - адрес данных документов или уведомлений во временном хранилище.
//
Процедура УдалитьВременныеФайлы(АдресДанных) Экспорт
	
	НаборДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	
	Для Каждого КлючИЗначение Из НаборДанных Цикл
		Данные = КлючИЗначение.Значение;
		Если ЗначениеЗаполнено(Данные.ВременныйКаталог) Тогда
			УдалитьФайлы(Данные.ВременныйКаталог);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция - Получает настройки организации для МЭДО.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, для которой надо получить настройки.
//  Поля - Строка,Неопределено - Список настроек через запятую, если не указан, то получить все настройки
// 
// Возвращаемое значение:
//  Структура,Неопределено - Поля структуры соответствуют ресурсам регистра. В случае неудачи - Неопределено.
Функция ПолучитьНастройкиОрганизации(Организация, Поля) Экспорт
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	Настройки = РегистрыСведений.НастройкиОрганизацийМЭДО.ПолучитьНастройки(Организация, ДанныеОтвета, Поля);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#Область ПереопределяемыеТипы

// Пустая ссылка на сотрудника нашей организации - зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция СотрудникПустаяСсылка() Экспорт
	Возврат ИнтеграцияСМЭДО.СотрудникПустаяСсылка();
КонецФункции

// Пустая ссылка на контактное лицо - зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция КонтактноеЛицоПустаяСсылка() Экспорт
	Возврат ИнтеграцияСМЭДО.КонтактноеЛицоПустаяСсылка();
КонецФункции

// Пустая ссылка на контрагента - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтрагентМЭДО
Функция КонтрагентПустаяСсылка() Экспорт
	Возврат ИнтеграцияСМЭДО.КонтрагентПустаяСсылка();
КонецФункции

// Тип "Контрагенты" - зависит от конфигурации.
// 
// Возвращаемое значение:
//  Тип
Функция ТипКонтрагенты() Экспорт
	Возврат ИнтеграцияСМЭДО.ТипКонтрагенты();
КонецФункции

// Имя формы выбора контактного лица - зависит от конфигурации.
// 
// Возвращаемое значение:
//  Строка
Функция КонтактныеЛицаФормаВыбора() Экспорт
	Возврат ИнтеграцияСМЭДО.КонтактныеЛицаФормаВыбора();
КонецФункции

#КонецОбласти

#КонецОбласти
