#Область СлужебныйПрограммныйИнтерфейс

// Обработчик одноименного регламентного задания
Процедура ЗаполнениеПереходныхРГ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗаполнениеПереходныхРабочихГрупп);
	
	// Формирование расширенной рабочей группы для перехода на 3.0
	МетаданныеДляПереходнойРГ = РегистрыСведений.РабочиеГруппыДляПерехода.ТаблицаМетаданныхДляПереходнойРГ();
	
	Для Каждого СтрокаМетаданных Из МетаданныеДляПереходнойРГ Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10 РАЗЛИЧНЫЕ
		|	Ссылка
		|Из
		|	#Таблица Как Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппыДляПерехода Как ПереходныеРГ
		|		По Таблица.Ссылка = ПереходныеРГ.Объект
		|ГДЕ
		|	ПереходныеРГ.Объект ЕСТЬ Null";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", СтрокаМетаданных.ИмяТаблицы);
		Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		Если Ссылки.Количество() Тогда
			РегистрыСведений.РабочиеГруппыДляПерехода.СформироватьИЗаписатьРабочиеГруппыПоОбъектамВыгрузки(
				Ссылки, СтрокаМетаданных.Метаданное);
		КонецЕсли;
	КонецЦикла;
	
	
	// Для объектов, у которых нет прав по касанию в 3.0, просто скопируем РГ
	Типы = Метаданные.РегистрыСведений.РабочиеГруппы.Измерения.Объект.Тип.Типы();
	ПрочиеИОМ = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(Типы);
	
	Для Каждого КлючИЗначение Из ПрочиеИОМ Цикл
		
		Если МетаданныеДляПереходнойРГ.Найти(КлючИЗначение.Значение,
			"ИдентификаторОбъектаМетаданных") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10 РАЗЛИЧНЫЕ
		|	Таблица.Ссылка
		|ПОМЕСТИТЬ СсылкиДляПолученияРГ
		|ИЗ
		|		#Таблица Как Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппыДляПерехода Как ПереходныеРГ
		|		По Таблица.Ссылка = ПереходныеРГ.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы Как РГ
		|		По Таблица.Ссылка = РГ.Объект
		|ГДЕ
		|	ПереходныеРГ.Объект ЕСТЬ NULL
		|	И НЕ РГ.Объект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СсылкиДляПолученияРГ.Ссылка КАК Объект,
		|	РабочиеГруппы.Участник КАК Участник,
		|	РабочиеГруппы.Изменение КАК Изменение
		|ИЗ
		|	СсылкиДляПолученияРГ КАК СсылкиДляПолученияРГ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО СсылкиДляПолученияРГ.Ссылка = РабочиеГруппы.Объект
		|		И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(РабочиеГруппы.Участник) = ТИП(Справочник.Пользователи)
		|				ТОГДА НЕ РабочиеГруппы.Участник.Служебный
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|ИТОГИ
		|ПО
		|	Объект";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", КлючИЗначение.Ключ);
		ДеревоРГ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого СтрокаРГ Из ДеревоРГ.Строки Цикл
			
			Набор = Регистрысведений.РабочиеГруппыДляПерехода.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(СтрокаРГ.Объект);
			
			Для Каждого УчастникРГ Из СтрокаРГ.Строки Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), УчастникРГ);
			КонецЦикла;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнить грифы и группы доступа таблицами участников.
// 
// Параметры:
//  Выгрузка - ТаблицаЗначений
//  ОбщееЗначениеДоступа - ПланВидовХарактеристикСсылка.ВидыДоступа
//
Процедура ДополнитьГрифыИГруппыДоступаТаблицамиУчастников(Выгрузка, Метаданное) Экспорт
	
	Если Метаданное = Метаданные.Справочники.ГрифыДоступа Тогда 
		ВидОбщегоДоступа = ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа;
		Менеджер = Справочники.ГрифыДоступа;
	ИначеЕсли Метаданное = Метаданные.Справочники.ГруппыДоступаКонтрагентов Тогда
		ВидОбщегоДоступа = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов;
		Менеджер = Справочники.ГруппыДоступаКонтрагентов;
	ИначеЕсли Метаданное = Метаданные.Справочники.ГруппыДоступаФизическихЛиц Тогда
		ВидОбщегоДоступа = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаФизическихЛиц;
		Менеджер = Справочники.ГруппыДоступаФизическихЛиц;
	КонецЕсли;
	
	Выгрузка.Колонки.Добавить("Доступ", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ВсеЗначенияДоступа = Выгрузка.ВыгрузитьКолонку("Ссылка");
	Для Н = 0 По ВсеЗначенияДоступа.ВГраница() Цикл
		ВсеЗначенияДоступа[Н] = Менеджер.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ВсеЗначенияДоступа[Н]));
	КонецЦикла;
	ВсеЗначенияДоступа.Добавить(ВидОбщегоДоступа);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазрешенияДоступаОбщие.ЗначениеДоступа КАК ЗначениеДоступа,
		|	РазрешенияДоступаОбщие.Пользователь,
		|	РазрешенияДоступаОбщие.УровеньДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияДоступаОбщие
		|ГДЕ
		|	РазрешенияДоступаОбщие.ЗначениеДоступа В (&ЗначениеДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоллекцииЗначенийДоступаЗначенияДоступа.Значение,
		|	РазрешенияДоступаИсключительные.Пользователь,
		|	РазрешенияДоступаИсключительные.УровеньДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК
		|			КоллекцииЗначенийДоступаЗначенияДоступа
		|		ПО РазрешенияДоступаИсключительные.КоллекцияЗначенийДоступа = КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка
		|		И КоллекцииЗначенийДоступаЗначенияДоступа.Значение В (&ЗначениеДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоллекцииЗначенийДоступаЗначенияДоступа.Значение,
		|	РазрешенияДляЛокальныхАдминистраторов.Пользователь,
		|	РазрешенияДляЛокальныхАдминистраторов.УровеньДоступа
		|ИЗ
		|	РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияДляЛокальныхАдминистраторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК
		|			КоллекцииЗначенийДоступаЗначенияДоступа
		|		ПО РазрешенияДляЛокальныхАдминистраторов.КоллекцияЗначенийДоступа = КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка
		|		И КоллекцииЗначенийДоступаЗначенияДоступа.Значение В (&ЗначениеДоступа)
		|ИТОГИ
		|ПО
		|	ЗначениеДоступа";
	Запрос.УстановитьПараметр("ЗначениеДоступа", ВсеЗначенияДоступа);
	ВсеРазрешения = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаЭлементаДоступа Из Выгрузка Цикл
		
		// Добавим ТЧ "Доступ" в выгружаемые элементы
		СтрокаЭлементаДоступа.Доступ = Новый ТаблицаЗначений;
		СтрокаЭлементаДоступа.Доступ.Колонки.Добавить("Участник");
		
		// Все разрешения пользователей по текущему элементу
		РазрешенияПоЭлементу = ВсеРазрешения.Строки.Найти(Менеджер.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтрокаЭлементаДоступа.Ссылка)));
		РазрешенияПоВсемЭлементам = ВсеРазрешения.Строки.Найти(ВидОбщегоДоступа);

		УчастникиЭлемента = Новый Массив;
		Если РазрешенияПоЭлементу <> Неопределено Тогда
			Для Каждого СтрокаРазрешения Из РазрешенияПоЭлементу.Строки Цикл
				УчастникиЭлемента.Добавить(СтрокаРазрешения.Пользователь);
			КонецЦикла;
		КонецЕсли;
		Если РазрешенияПоВсемЭлементам <> Неопределено Тогда
			Для Каждого СтрокаРазрешения Из РазрешенияПоВсемЭлементам.Строки Цикл
				УчастникиЭлемента.Добавить(СтрокаРазрешения.Пользователь);
			КонецЦикла;
		КонецЕсли;
		УчастникиЭлемента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УчастникиЭлемента);

		// Если доступ предоставлен всем пользователям, то не важно, какие еще есть участники
		ВсеПользователи = Справочники.РабочиеГруппы.ВсеПользователи;
		Если УчастникиЭлемента.Найти(ВсеПользователи) <> Неопределено Тогда
			НовыйУчастник = СтрокаЭлементаДоступа.Доступ.Добавить();
			НовыйУчастник.Участник = ВсеПользователи;
			Продолжить;
		КонецЕсли;
		
		
		// Проверим контейнеры участников на предмет вхождения в них пользователей
		Подразделения = Новый Массив;
		Роли = Новый Массив;
		РабочиеГруппы = Новый Массив;
		Для Каждого УчастникЭлемента Из УчастникиЭлемента Цикл
			Если ТипЗнч(УчастникЭлемента) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Подразделения.Добавить(УчастникЭлемента);
			ИначеЕсли ТипЗнч(УчастникЭлемента) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				Роли.Добавить(УчастникЭлемента);
			ИначеЕсли ТипЗнч(УчастникЭлемента) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				РабочиеГруппы.Добавить(УчастникЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		ЗапросУчастников = Новый Запрос;
		ЗапросУчастников.Текст = 
			"ВЫБРАТЬ
			|	СведенияОПользователяхДокументооборот.Пользователь,
			|	СведенияОПользователяхДокументооборот.Подразделение КАК Контейнер
			|ИЗ
			|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
			|ГДЕ
			|	СведенияОПользователяхДокументооборот.Подразделение В (&Подразделения)
			|	Или СведенияОПользователяхДокументооборот.Подразделение.Родитель В Иерархии (&Подразделения)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.Исполнитель,
			|	ИсполнителиЗадач.РольИсполнителя
			|ИЗ
			|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			|	ИсполнителиЗадач.РольИсполнителя В (&Роли)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РабочиеГруппыСостав.Пользователь,
			|	РабочиеГруппыСостав.Ссылка
			|ИЗ
			|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
			|ГДЕ
			|	РабочиеГруппыСостав.Ссылка В (&РабочиеГруппы)
			|	Или РабочиеГруппыСостав.Ссылка.Родитель В Иерархии (&РабочиеГруппы)
			|ИТОГИ
			|ПО
			|	Контейнер";
		ЗапросУчастников.УстановитьПараметр("Подразделения", Подразделения);
		ЗапросУчастников.УстановитьПараметр("Роли", Роли);
		ЗапросУчастников.УстановитьПараметр("РабочиеГруппы", РабочиеГруппы);
		КонтейнерыИУчастники = ЗапросУчастников.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого СтрокаКонтейнера Из КонтейнерыИУчастники.Строки Цикл
			Для Каждого СтрокаПользователя Из СтрокаКонтейнера.Строки Цикл
				Если УчастникиЭлемента.Найти(СтрокаПользователя.Пользователь) <> Неопределено Тогда
					УчастникиЭлемента.Удалить(
						УчастникиЭлемента.Найти(СтрокаПользователя.Пользователь));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Проверим контейнеры участников на предмет вхождения друг в друга
		ЗапросРодителей = Новый Запрос;
		ЗапросРодителей.Текст = "ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	СтруктураПредприятия.Родитель КАК Родитель
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка,
		|	РабочиеГруппы.Родитель
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ИТОГИ
		|ПО
		|	Родитель";
		ВсеЭлементыИРодители = ЗапросРодителей.Выполнить().Выгрузить();

		// Соберем всех родителей для наших элементов доступа
		ЭлементыИРодители = Новый Соответствие();
		Отбор = Новый Структура("Ссылка");
		
		Для Каждого Подразделение Из Подразделения Цикл

			ЭлементыИРодители[Подразделение] = Новый Массив;
			Отбор.Ссылка = Подразделение;

			СтрокиСРодителем = ВсеЭлементыИРодители.НайтиСтроки(Отбор);
			Пока СтрокиСРодителем.Количество() Цикл
				Родитель = СтрокиСРодителем[0].Родитель;
				Если ЗначениеЗаполнено(Родитель) Тогда
					ЭлементыИРодители[Подразделение].Добавить(Родитель);
				КонецЕсли;
				Отбор.Ссылка = Родитель;
				СтрокиСРодителем = ВсеЭлементыИРодители.НайтиСтроки(Отбор);
			КонецЦикла;
		
		КонецЦикла;
		
		Для Каждого РабочаяГруппа Из РабочиеГруппы Цикл
			
			ЭлементыИРодители[РабочаяГруппа] = Новый Массив;
			Отбор.Ссылка = РабочаяГруппа;

			СтрокиСРодителем = ВсеЭлементыИРодители.НайтиСтроки(Отбор);
			Пока СтрокиСРодителем.Количество() Цикл
				Родитель = СтрокиСРодителем[0].Родитель;
				Если ЗначениеЗаполнено(Родитель) Тогда
					ЭлементыИРодители[РабочаяГруппа].Добавить(Родитель);
				КонецЕсли;
				Отбор.Ссылка = Родитель;
				СтрокиСРодителем = ВсеЭлементыИРодители.НайтиСтроки(Отбор);
			КонецЦикла;
			
		КонецЦикла;
		
		// Удалим из массива участников те элементы, родители которых тоже входят в массив
		Для Каждого ЭлементИРодители Из ЭлементыИРодители Цикл
			Для Каждого Родитель Из ЭлементИРодители.Значение Цикл
				Если УчастникиЭлемента.Найти(Родитель) <> Неопределено Тогда
					УчастникиЭлемента.Удалить(
						УчастникиЭлемента.Найти(ЭлементИРодители.Ключ));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		
		// Соберем оставшихся участников в ТЧ "Доступ" выгружаемого элемента
		Для Каждого УчастникЭлемента Из УчастникиЭлемента Цикл
			НовыйУчастник = СтрокаЭлементаДоступа.Доступ.Добавить();
			НовыйУчастник.Участник = УчастникЭлемента;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриВыгрузкеФайлов(Выгрузка) Экспорт
	
	ФайлыКВыгрузке = ФайлыВТаблицеВыгрузки(Выгрузка);
	
	ИсключаемыеИД = ИсключаемыеИзВыгрузкиИДФайлов(ФайлыКВыгрузке);
	
	ИсключитьИзВыгрузкиСтрокиПоИД(Выгрузка, ИсключаемыеИД);
	
КонецПроцедуры

Процедура ПриВыгрузкеВерсийФайлов(Выгрузка) Экспорт
	
	ВерсииКВыгрузке = ВерсииФайловВТаблицеВыгрузки(Выгрузка);
	
	ИсключаемыеИД = ИсключаемыеИзВыгрузкиИДВерсийФайлов(ВерсииКВыгрузке);
	
	ИсключитьИзВыгрузкиСтрокиПоИД(Выгрузка, ИсключаемыеИД);
	
КонецПроцедуры

Процедура ПриВыгрузкеПрисоединенныхФайловСообщенийЭДО(Выгрузка) Экспорт
	
	Индекс = 0;
	
	Пока Индекс < Выгрузка.Количество() Цикл
		
		СтрокаВыгрузки = Выгрузка[Индекс];
		
		Если ЗначениеЗаполнено(СтрокаВыгрузки.ВладелецФайла) Тогда
			Индекс = Индекс + 1;
		Иначе
			Выгрузка.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВидыДокументовПравамиНаСоздание(Выгрузка, Метаданное) Экспорт
	
	Выгрузка.Колонки.Добавить("Доступ", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Если Не ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа") Тогда
		
		Для Каждого СтрокаВида Из Выгрузка Цикл
			СтрокаВида.Доступ = Новый ТаблицаЗначений;
			СтрокаВида.Доступ.Колонки.Добавить("Участник");
			СтрокаВида.Доступ.Добавить().Участник = Справочники.РабочиеГруппы.ВсеПользователи;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	
	Если Метаданное = Метаданные.Справочники.ВидыВходящихДокументов Тогда 
		ВидОбщегоДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов;
		Менеджер = Справочники.ВидыВходящихДокументов;
	ИначеЕсли Метаданное = Метаданные.Справочники.ВидыИсходящихДокументов Тогда
		ВидОбщегоДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВидыИсходящихДокументов;
		Менеджер = Справочники.ВидыИсходящихДокументов;
	ИначеЕсли Метаданное = Метаданные.Справочники.ВидыВнутреннихДокументов Тогда
		ВидОбщегоДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов;
		Менеджер = Справочники.ВидыВнутреннихДокументов;
	КонецЕсли;
	
	ЗапросРазрешений = Новый Запрос("ВЫБРАТЬ
	|	РазрешенияДоступаОбщие.Пользователь,
	|	РазрешенияДоступаОбщие.ЗначениеДоступа
	|ИЗ
	|	РегистрСведений.РазрешенияДоступаОбщие КАК РазрешенияДоступаОбщие
	|ГДЕ
	|	РазрешенияДоступаОбщие.ЗначениеДоступа В (&ВыгружаемыеВиды)
	|	И РазрешенияДоступаОбщие.УровеньДоступа В (&УровниДоступа)");
	
	УровниДоступа = Новый Массив;
	УровниДоступа.Добавить(Справочники.УровниДоступа.Регистрация);
	УровниДоступа.Добавить(Справочники.УровниДоступа.Редактирование);
	УровниДоступа.Добавить(Справочники.УровниДоступа.РедактированиеБезОграничения);
	ЗапросРазрешений.УстановитьПараметр("УровниДоступа", УровниДоступа);
	
	ВыгружаемыеВиды = Выгрузка.ВыгрузитьКолонку("Ссылка");
	Для Н = 0 По ВыгружаемыеВиды.ВГраница() Цикл
		ВыгружаемыеВиды[Н] = Менеджер.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ВыгружаемыеВиды[Н]));
	КонецЦикла;
	ВыгружаемыеВиды.Добавить(ВидОбщегоДоступа);
	ЗапросРазрешений.УстановитьПараметр("ВыгружаемыеВиды", ВыгружаемыеВиды);
	
	Участники = ЗапросРазрешений.Выполнить().Выгрузить();
	
	Для Каждого СтрокаВида Из Выгрузка Цикл
		
		// Добавим ТЧ "Доступ" в выгружаемые элементы
		СтрокаВида.Доступ = Новый ТаблицаЗначений;
		СтрокаВида.Доступ.Колонки.Добавить("Участник");
		
		УчастникиВида = Участники.НайтиСтроки(Новый Структура("ЗначениеДоступа",
			Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВида.Ссылка))));
		Если УчастникиВида.Количество() Тогда
			Для Каждого СтрокаУчастника Из УчастникиВида Цикл
				СтрокаВида.Доступ.Добавить().Участник = СтрокаУчастника.Пользователь;
			КонецЦикла;
		КонецЕсли;
		
		УчастникиВсехВидов = Участники.НайтиСтроки(Новый Структура("ЗначениеДоступа", ВидОбщегоДоступа));
		Если УчастникиВсехВидов.Количество() Тогда
			Для Каждого СтрокаУчастника Из УчастникиВсехВидов Цикл
				СтрокаВида.Доступ.Добавить().Участник = СтрокаУчастника.Пользователь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДопРеквизитыРодителями(Выгрузка) Экспорт
	
	Выгрузка.Колонки.Добавить("РодительИмяПредопределенного");
	
	Родители = Выгрузка.ВыгрузитьКолонку("Родитель");
	Родители = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Родители);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Родители, Неопределено);
	Для Н = 0 По Родители.ВГраница() Цикл
		Родители[Н] = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Родители[Н]));
	КонецЦикла;
	
	ИменаПредопределенных = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Родители,
		"ИмяПредопределенныхДанных");
	
	Для Каждого Строка Из Выгрузка Цикл
		Если ЗначениеЗаполнено(Строка.Родитель) Тогда
			Строка.РодительИмяПредопределенного = ИменаПредопределенных[
				Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(
					Новый УникальныйИдентификатор(Строка.Родитель))];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОперацииПриВыгрузкеФайлов

Процедура ИсключитьИзВыгрузкиСтрокиПоИД(Выгрузка, ИсключаемыеИД)
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < Выгрузка.Количество() Цикл
		
		СтрокаВыгрузки = Выгрузка[ИндексСтроки];
		
		Если ИсключаемыеИД[СтрокаВыгрузки.Ссылка] <> Неопределено Тогда
			Выгрузка.Удалить(СтрокаВыгрузки);
		Иначе
			ИндексСтроки = ИндексСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлыВТаблицеВыгрузки(Выгрузка)
	
	ФайлыКВыгрузке = Новый Массив;
	
	Для Каждого СтрокаВыгрузки Из Выгрузка Цикл
		СсылкаНаФайл = Справочники.Файлы.ПолучитьСсылку(СтрокаВыгрузки.Ссылка);
		ФайлыКВыгрузке.Добавить(СсылкаНаФайл);
	КонецЦикла;
	
	Возврат ФайлыКВыгрузке;
	
КонецФункции

Функция ИсключаемыеИзВыгрузкиИДФайлов(ФайлыКВыгрузке)
	
	ИсключаемыеИДФайлов = Новый Соответствие;
	
	ФайлыСВД = ФайлыСВД(ФайлыКВыгрузке);
	Для Каждого Файл Из ФайлыСВД Цикл
		ИсключаемыеИДФайлов.Вставить(Файл.УникальныйИдентификатор(), Истина);
	КонецЦикла;
	
	Возврат ИсключаемыеИДФайлов;
	
КонецФункции

Функция ФайлыСВД(Файлы)
	
	ТипыВладельцевСВД = Новый Массив;
	ТипыВладельцевСВД.Добавить("Справочник.СерверныеСообщенияСВД");
	ТипыВладельцевСВД.Добавить("Документ.ВходящееСообщениеСВД");
	ТипыВладельцевСВД.Добавить("Документ.ИсходящееСообщениеСВД");
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК ВладельцыФайлов
		|		ПО ВладельцыФайлов.Ссылка = Файлы.ВладелецФайла
		|ГДЕ
		|	Файлы.Ссылка В (&Файлы)";
	
	Разделитель =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	МассивЗапросов = Новый Массив;
	
	Для Каждого ТипВладельца Из ТипыВладельцевСВД Цикл
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ТипВладельца);
		МассивЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	ИтоговыйТекстЗапроса = СтрСоединить(МассивЗапросов, Разделитель);
	
	Запрос = Новый Запрос(ИтоговыйТекстЗапроса);
	Запрос.УстановитьПараметр("Файлы", Файлы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ФайлыСВД = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ФайлыСВД.Добавить(Выборка.Файл);
	КонецЦикла;
	
	Возврат ФайлыСВД;
	
КонецФункции

Функция ВерсииФайловВТаблицеВыгрузки(Выгрузка)
	
	ВерсииКВыгрузке = Новый Массив;
	
	Для Каждого СтрокаВыгрузки Из Выгрузка Цикл
		СсылкаНаВерсию = Справочники.ВерсииФайлов.ПолучитьСсылку(СтрокаВыгрузки.Ссылка);
		ВерсииКВыгрузке.Добавить(СсылкаНаВерсию);
	КонецЦикла;
	
	Возврат ВерсииКВыгрузке;
	
КонецФункции

Функция ИсключаемыеИзВыгрузкиИДВерсийФайлов(ВерсииКВыгрузке)
	
	ИсключаемыеИДФайлов = Новый Соответствие;
	
	ВерсииСВД = ВерсииФайловСВД(ВерсииКВыгрузке);
	Для Каждого Версия Из ВерсииСВД Цикл
		ИсключаемыеИДФайлов.Вставить(Версия.УникальныйИдентификатор(), Истина);
	КонецЦикла;
	
	Возврат ИсключаемыеИДФайлов;
	
КонецФункции

Функция ВерсииФайловСВД(ВерсииФайлов)
	
	ТипыВладельцевСВД = Новый Массив;
	ТипыВладельцевСВД.Добавить("Справочник.СерверныеСообщенияСВД");
	ТипыВладельцевСВД.Добавить("Документ.ВходящееСообщениеСВД");
	ТипыВладельцевСВД.Добавить("Документ.ИсходящееСообщениеСВД");
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Версия
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК ВладельцыФайлов
		|		ПО ВладельцыФайлов.Ссылка = Файлы.ВладелецФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.Ссылка = ВерсииФайлов.Владелец
		|ГДЕ
		|	ВерсииФайлов.Ссылка В (&Версии)";
	
	Разделитель =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	МассивЗапросов = Новый Массив;
	
	Для Каждого ТипВладельца Из ТипыВладельцевСВД Цикл
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ТипВладельца);
		МассивЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	ИтоговыйТекстЗапроса = СтрСоединить(МассивЗапросов, Разделитель);
	
	Запрос = Новый Запрос(ИтоговыйТекстЗапроса);
	Запрос.УстановитьПараметр("Версии", ВерсииФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВерсииФайловСВД = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ВерсииФайловСВД.Добавить(Выборка.Версия);
	КонецЦикла;
	
	Возврат ВерсииФайловСВД;
	
КонецФункции

#КонецОбласти

#КонецОбласти
