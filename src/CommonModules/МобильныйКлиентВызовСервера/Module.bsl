
#Область ПрограммныйИнтерфейс

// Делает новую запись в регистр сведений для пуш уведомлений под мобильный клиент.
//
// Параметры:
//  СведенияОМобильномКлиенте - Структура - Сведения о мобильном клиенте для записи в регистр сведений.
//
Процедура ЗаписатьИнформациюОМобильномКлиенте(Знач СведенияОМобильномКлиенте) Экспорт
	
	НачатьТранзакцию();
		
	Попытка
			
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОМобильныхОнлайнКлиентах");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();

		ЗаписьМобильныйКлиент = РегистрыСведений.СведенияОМобильныхОнлайнКлиентах.СоздатьМенеджерЗаписи();
		
		ЗаписьМобильныйКлиент.СведенияОКлиенте = СведенияОМобильномКлиенте.ВерсияОС;
		ЗаписьМобильныйКлиент.Версия = СведенияОМобильномКлиенте.ВерсияПриложения;
		ЗаписьМобильныйКлиент.ИдентификаторКлиента = СведенияОМобильномКлиенте.ИдентификаторКлиента;
		ЗаписьМобильныйКлиент.ИдентификаторПодписчикаУведомления = Новый ХранилищеЗначения(
			СведенияОМобильномКлиенте.ИдентификаторПодписчикаУведомления, Новый СжатиеДанных());
		ЗаписьМобильныйКлиент.Пользователь = Пользователи.АвторизованныйПользователь();
		ЗаписьМобильныйКлиент.ДатаПоследнегоВхода = ТекущаяДатаСеанса();		
		ЗаписьМобильныйКлиент.ИдентификаторПодписчикаУстановлен = Истина;
	
		ЗаписьМобильныйКлиент.Записать(Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации(МобильныйКлиентКлиентСервер.ИмяСобытияPushУведомления(), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

// Добавляет запись в журнал регистрации с клиента.
//
// Параметры:
//  ТекстСообщения - Строка - Данные для записи;
//
Процедура ЗаписьЖурналаРегистрацииСервер(Знач ТекстСообщения) Экспорт
	
	ЗаписьЖурналаРегистрации(
		МобильныйКлиентКлиентСервер.ИмяСобытияPushУведомления(), 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
КонецПроцедуры

// Получает ссылку на объект указанного типа
//
// Параметры:
//  ТипМобильного		 - Строка - Описатель типа объекта
//  СтрокаИдентификатора - Строка, УникальныйИдентификатор - идентификатор объекта.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на объект 
//
Функция СсылкаПоТипуИИД(Знач ТипМобильного, Знач СтрокаИдентификатора) Экспорт

	Если Не ЗначениеЗаполнено(ТипМобильного) Или Не ЗначениеЗаполнено(СтрокаИдентификатора) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(СтрокаИдентификатора) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора)
	ИначеЕсли ТипЗнч(СтрокаИдентификатора) = Тип("УникальныйИдентификатор") Тогда
		Идентификатор = СтрокаИдентификатора;
	КонецЕсли;

	Если Идентификатор = УникальныйИдентификаторПустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипМобильного = "Role" Тогда
		Возврат Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Справочники.РолиИсполнителей.ПолучитьСсылку(Идентификатор),
			Неопределено,
			Неопределено)
	КонецЕсли;
	
	ТипСсылки = ТипСсылкиПоТипуМобильного(ТипМобильного);
	XMLТип = XMLТип(ТипСсылки);
	
	Если XMLТип = Неопределено Или XMLТип.ИмяТипа = "Null" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлассИТип = СтрРазделить(XMLТип.ИмяТипа, ".");
	Класс = КлассИТип[0];
	ИмяТипа = КлассИТип[1];
	
	Если СтрСравнить(Класс, "DocumentRef") = 0 Тогда		
		Возврат Документы[ИмяТипа].ПолучитьСсылку(Идентификатор);	
			
	ИначеЕсли СтрСравнить(Класс, "CatalogRef") = 0 Тогда		
		Возврат Справочники[ИмяТипа].ПолучитьСсылку(Идентификатор);	
			
	ИначеЕсли СтрСравнить(Класс, "TaskRef") = 0 Тогда		
		Возврат Задачи[ИмяТипа].ПолучитьСсылку(Идентификатор);		
		
	ИначеЕсли СтрСравнить(Класс, "BusinessProcessRef") = 0 Тогда		
		Возврат БизнесПроцессы[ИмяТипа].ПолучитьСсылку(Идентификатор);
		
	КонецЕсли;
	 
КонецФункции

//Возвращает признак того, что приложение запущено на моб. устройстве с большим экраном
//
// Возвращаемое значение:
// Булево - признак того, что устройство имеет большой экран 
Функция ЭтоМобильныйСБольшимЭкраном() Экспорт
	
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоНеТелефон = ОбщегоНазначения.ЭтоНеТелефон();
	Если ЭтоНеТелефон Тогда 
	
		//Если это фаблет, то экран должен быть в альбомной ориентации
		Если ОбщегоНазначенияКлиентСервер.ТипУстройства() = "Фаблет" Тогда
			ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
			Возврат Не ПараметрыЭкрана.Портрет; 
		КонецЕсли; 
	
		Возврат Истина;	
	
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

//Возвращает признак того, что приложение запущено на моб. устройстве в портретном режиме экрана
//
// Возвращаемое значение:
// Булево - признак того, что устройство в портретном режиме
Функция ЭтоМобильныйВПортретномРежиме() Экспорт
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
	
	Возврат ПараметрыЭкрана.Портрет;
	
КонецФункции

// Возвращает цвет фона для заполнения серых полей для группы списка.
// 
// Возвращаемое значение:
//  Цвет - цвет фона для заполнения серых полей для группы списка.
//
Функция ЦветФонаГруппыСписка() Экспорт
	
	Возврат WebЦвета.Белый;

КонецФункции

// Возвращает цвет текста для полей автор\исполнитель списка.
// 
// Возвращаемое значение:
//  Цвет - возвращает цвет текста для полей автор\исполнитель списка.
//
Функция ЦветТекстаИсполнительАвтор() Экспорт
	
	Возврат WebЦвета.ТемноСерый;

КонецФункции

// Возвращает шрифт текста для полей автор\исполнитель списка.
// 
// Возвращаемое значение:
//  Шрифт - возвращает шрифт текста для полей автор\исполнитель списка.
//
Функция ШрифтТекстаИсполнительАвтор() Экспорт
	
	Возврат ШрифтыСтиля.МелкийШрифтТекста;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает тип обекта уведомления по его строковому описанию.
//
// Параметры:
//  ТипМобильного - Строка - Строковое описание типа уведомления;
// 
// Возвращаемое значение:
//  Строка - Объект уведомления .
//
Функция ТипСсылкиПоТипуМобильного(ТипМобильного)

	Если ТипМобильного = "IncomingMail" Тогда 	
		Возврат Тип("ДокументСсылка.ВходящееПисьмо");
		
	ИначеЕсли ТипМобильного = "OutgoingMail" Тогда
		Возврат Тип("ДокументСсылка.ИсходящееПисьмо");

	ИначеЕсли ТипМобильного = "CalendarEvent" Тогда
		Возврат Тип("СправочникСсылка.ЗаписиРабочегоКалендаря");

	ИначеЕсли ТипМобильного = "Task" Тогда
		Возврат Тип("ЗадачаСсылка.ЗадачаИсполнителя");

	ИначеЕсли ТипМобильного = "Control" Тогда
		Возврат Тип("СправочникСсылка.Контроль");

	ИначеЕсли ТипМобильного = "ExecutionProcess" Тогда
		Возврат Тип("БизнесПроцессСсылка.Исполнение");

	ИначеЕсли ТипМобильного = "MailAccount"Тогда
		Возврат Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");

	ИначеЕсли ТипМобильного = "MailFolder" Тогда
		Возврат Тип("СправочникСсылка.ПапкиПисем");

	ИначеЕсли ТипМобильного = "User" Тогда
		Возврат Тип("СправочникСсылка.Пользователи");

	ИначеЕсли ТипМобильного = "Role" Тогда
		Возврат Тип("СправочникСсылка.РолиИсполнителей");

	ИначеЕсли ТипМобильного = "File" Тогда
		Возврат Тип("СправочникСсылка.Файлы");

	ИначеЕсли ТипМобильного = "MailThread" Тогда
		Возврат Тип("СправочникСсылка.ВеткиПереписки");
		
	ИначеЕсли ТипМобильного = "Addressee" Тогда
		Возврат Тип("СправочникСсылка.АдресатыПочтовыхСообщений");
		
	ИначеЕсли ТипМобильного = "MailTextTemplate" Тогда
		Возврат Тип("СправочникСсылка.ШаблоныТекстов");

	ИначеЕсли ТипМобильного = "MyAbsence" Тогда
		Возврат Тип("ДокументСсылка.Отсутствие");
		
	ИначеЕсли ТипМобильного = "MyHealth" Тогда
		Возврат Тип("ДокументСсылка.СамочувствиеСотрудника");
		
	ИначеЕсли ТипМобильного = "Event" Тогда
		Возврат Тип("СправочникСсылка.Мероприятия");
				
	КонецЕсли;

КонецФункции

//Возвращает ссылку из значения строки
//Параметр
//	СсылкаСтрой - Строка - Значение для конвертации
// 
Функция ЗначенияСтрокиВнутрВСсылку(СсылкаСтрокой) Экспорт

 	Возврат ЗначениеИзСтрокиВнутр(СсылкаСтрокой);

КонецФункции

#КонецОбласти