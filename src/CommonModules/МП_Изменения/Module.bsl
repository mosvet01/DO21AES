///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПолучениеИзмененийЗаголовкиИВсеОстальное

//Возвращает изменения заголовков данных по переданным ПараметрамСинхронизации
// Параметры:
//  ПараметрыСинхронизации - Структура - Параметры синхронизации, определенные в начале синхронизации
// ВозвращаемоеЗначение:
//  СтруктураРезультатовЗапроса - Структура - Структура результатов, ключом которой является тип,
//		а значением - ТаблицаЗначений с измененными данными
//
Функция ИзмененияТолькоЗаголовки(ПараметрыСинхронизации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПараметрыСинхронизации.ТекущийПользователь; 
	МобильноеПриложение = ПараметрыСинхронизации.МобильноеПриложение;
	ПредыдущаяГраницаСборки = ПараметрыСинхронизации.ПредыдущаяГраницаСборки;
	ДатаУстаревания = МП_Служебный.ОпределитьДатуУстареванияДанных(МобильноеПриложение, ПараметрыСинхронизации);
	ГраницаПоДатеУстаревания = ОтметкиВремени.ДатаВДатуВМиллисекундах(ДатаУстаревания);
	
	БлижайшаяГраница = Макс(ПредыдущаяГраницаСборки, ГраницаПоДатеУстаревания);
			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
	Запрос.УстановитьПараметр("БлижайшаяГраница", БлижайшаяГраница);
	Запрос.УстановитьПараметр("ПредыдущаяГраницаСборки", ПредыдущаяГраницаСборки);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	СтруктураРезультатовЗапроса = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаИзмененийНСИ(МобильноеПриложение);
	
	Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Для каждого ТаблицаВТ Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		
		РезультатИзменений = ТаблицаВТ.ПолучитьДанные();
		
		Если Не РезультатИзменений.Пустой() Тогда
			СтруктураРезультатовЗапроса.Вставить(ТаблицаВТ.ПолноеИмя, РезультатИзменений);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыСинхронизации.СинхронизацияПочты И ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты") Тогда
		
		ОсновнаяУчетнаяЗапись = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОсновнаяУчетнаяЗапись");
		
		ПодписьДляНовыхПисем =
			ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьДляНовыхПисем");
	
		ПодписьПриОтветеИПересылке =
			ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
		
		Запрос.УстановитьПараметр("ОсновнаяУчетнаяЗапись", ОсновнаяУчетнаяЗапись);
		
		Запрос.УстановитьПараметр("ПодписьДляНовыхПисем", ПодписьДляНовыхПисем);
		
		Запрос.УстановитьПараметр("ПодписьПриОтветеИПересылке", ПодписьПриОтветеИПересылке);
		
		Запрос.Текст = ТекстЗапросаИзмененийНСИПочта();
		
		Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		Для каждого ТаблицаВТ Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
			
			РезультатИзменений = ТаблицаВТ.ПолучитьДанные();
			
			Если Не РезультатИзменений.Пустой() Тогда
				СтруктураРезультатовЗапроса.Вставить(ТаблицаВТ.ПолноеИмя, РезультатИзменений);
			КонецЕсли;
			
		КонецЦикла;
			
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = ТекстЗапросаИзмененияПапок();
		
		РезультатИзменений = Запрос.Выполнить();
		
		Если Не РезультатИзменений.Пустой() Тогда
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипПапкаПисем(), РезультатИзменений);
		КонецЕсли; 
		
		УчетныеЗаписи = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(
			"ДоступныеУчетныеЗаписи").ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
		
		Запрос.УстановитьПараметр("ДоступныеУчетныеЗаписиПользователя", УчетныеЗаписи);
		
		Запрос.УстановитьПараметр("СрокУстареванияДанных", ДатаУстаревания);
			
		Запрос.Текст = ТекстЗапросаИзмененийПисем();
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипПисьмоЗаголовки(), Результат);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.СинхронизацияЗадач Тогда
		
		Запрос.Текст = ТекстЗапросаИзмененийЗадач();
		
		РезультатЗадачи = Запрос.Выполнить();
		
		Если Не РезультатЗадачи.Пустой() Тогда
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипЗадачаЗаголовки(), РезультатЗадачи);
		КонецЕсли; 

		Запрос.Текст = ТекстЗапросаИзмененийПроцессов();
		
		РезультатыПроцессовИзменения = Запрос.ВыполнитьПакет();
		РезультатПроцессыИсполнения = РезультатыПроцессовИзменения[0];
		РезультатПроцессыВопросы = РезультатыПроцессовИзменения[1];
		Если Не РезультатПроцессыИсполнения.Пустой() Тогда
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипПроцессИсполненияЗаголовки(),
				РезультатПроцессыИсполнения);
		КонецЕсли;
		
		Если Не РезультатПроцессыВопросы.Пустой() Тогда
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипПроцессРВВЗЗаголовки(),
				РезультатПроцессыВопросы);
		КонецЕсли;
		
	КонецЕсли;

	
	Возврат СтруктураРезультатовЗапроса;
	
КонецФункции

Функция ИзмененияВсеОстальное(ПараметрыСинхронизации, СтруктураРезультатовЗапросаЗаголовки) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРезультатовЗапроса = Новый Структура;
	
	МобильноеПриложение = ПараметрыСинхронизации.МобильноеПриложение;
	
	ПредыдущаяГраницаСборки = ПараметрыСинхронизации.ПредыдущаяГраницаСборки;
	ДатаУстаревания = МП_Служебный.ОпределитьДатуУстареванияДанных(МобильноеПриложение, ПараметрыСинхронизации);
	ГраницаПоДатеУстаревания = ОтметкиВремени.ДатаВДатуВМиллисекундах(ДатаУстаревания);
	
	БлижайшаяГраница = Макс(ПредыдущаяГраницаСборки, ГраницаПоДатеУстаревания);
		
	Для каждого КлючИЗначение Из СтруктураРезультатовЗапросаЗаголовки Цикл
		ДанныеИзменений = КлючИЗначение.Значение;
		
		ИзмененияВсеОстальноеПоТаблицамЗаголовков(КлючИЗначение.Ключ, ДанныеИзменений, СтруктураРезультатовЗапроса, 
			ПараметрыСинхронизации);
	КонецЦикла;
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСинхронизации.ТекущийПользователь);
	
	Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
	
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", БлижайшаяГраница);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("ПредыдущаяГраницаСборки", ПредыдущаяГраницаСборки);

	Если ПараметрыСинхронизации.СинхронизацияКалендаря Тогда
		
		Запрос.Текст = ТекстЗапросаИзмененийКалендаря();
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			ТаблицаКалендарь = Результат.Выгрузить();
			
			ОтобратьПредметыКалендарь(СтруктураРезультатовЗапроса, ПараметрыСинхронизации, ТаблицаКалендарь);
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипЗаписьКалендаря(), ТаблицаКалендарь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.СинхронизацияКонтроля Тогда
		
		ТипыБП = БизнесПроцессы.ТипВсеСсылки().Типы();
		
		Запрос.УстановитьПараметр("ТипыБП", ТипыБП);
		
		Запрос.УстановитьПараметр("СостояниеОтветПолучен", НСтр("ru = 'Ответ получен'"));
		
		Запрос.УстановитьПараметр("СостояниеОтветНеПолучен", НСтр("ru = 'Ответ не получен'")); 
		
		Запрос.УстановитьПараметр("СостояниеИсполнено", НСтр("ru = 'Исполнено'"));

		Запрос.Текст = ТекстЗапросаИзмененийКонтроля();
		
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда
			
			ТаблицаКонтроль = Результат.Выгрузить();
			
			ОтобратьПредметыКонтроль(СтруктураРезультатовЗапроса,ПараметрыСинхронизации, ТаблицаКонтроль);
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипКонтроль(), ТаблицаКонтроль);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.СинхронизацияОтсутствий Тогда
		
		Запрос.Текст = ТекстЗапросаИзмененийМоихОтсутствий();
		
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда
			
			ТаблицаМоиОтсутствия = Результат.Выгрузить();
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипМоеОтсутствие(), ТаблицаМоиОтсутствия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.СинхронизацияСамочувствий Тогда
		
		Запрос.Текст = ТекстЗапросаИзмененийМоегоСамочувствия();
		
		Результаты = Запрос.ВыполнитьПакет();

		Если Не Результаты[0].Пустой() Тогда
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипВремяЗамера(), Результаты[0].Выгрузить());
			
		КонецЕсли;
		
		Если Не Результаты[1].Пустой() Тогда
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипМоеСамочувствие(), Результаты[1].Выгрузить());
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПараметрыСинхронизации.СинхронизацияМероприятий Тогда
		
		Запрос.Текст = ТекстЗапросаИзмененийМероприятий();
		
		Результаты = Запрос.ВыполнитьПакет();

		Если Не Результаты[0].Пустой() Тогда
			
			ТаблицаМероприятия = Результаты[0].Выгрузить();
					
			ЗаполнитьСпецифическиеКолонкиМероприятие(СтруктураРезультатовЗапроса, ПараметрыСинхронизации, 
				ТаблицаМероприятия);
				
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипМероприятие(), ТаблицаМероприятия);
			
		КонецЕсли;
		
		Если Не Результаты[1].Пустой() Тогда
			
			ТаблицаПриглашения = Результаты[1].Выгрузить();
			ТаблицаПриглашения.Колонки.Добавить("HTMLОписаниеМероприятия");
			
			Для Каждого СтрокаПриглашения Из ТаблицаПриглашения Цикл
				СтрокаПриглашения.HTMLОписаниеМероприятия = МП_Служебный.HTMLОписаниеМероприятия(СтрокаПриглашения.Мероприятие);
			КонецЦикла;
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипСостояниеПриглашения(), ТаблицаПриглашения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.СинхронизацияУчетаВремени Тогда
		
		Запрос.Текст = ТекстЗапросаИзмененийОбъектовУчетаВремени();
		Результаты = Запрос.ВыполнитьПакет();
		РезультатВидыРабот = Результаты[0];
		РезультатЕжедневныеРаботы = Результаты[1];
		РезультатЕженедельныеРаботы = Результаты[2];
		РезультатФактическиеТрудозатраты = Результаты[3];
		РезультатИспользуемыеПроекты = Результаты[4];
		
		Если Не РезультатВидыРабот.Пустой() Тогда
			
			ТаблицаВидыРабот = РезультатВидыРабот.Выгрузить();
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипВидРабот(), ТаблицаВидыРабот);
			
		КонецЕсли;
		
		Если Не РезультатЕжедневныеРаботы.Пустой() Тогда
			
			ТаблицаЕжедневныеРаботы = РезультатЕжедневныеРаботы.Выгрузить();
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипЕжедневныйОтчет(), ТаблицаЕжедневныеРаботы);
			
		КонецЕсли;
		
		Если Не РезультатЕженедельныеРаботы.Пустой() Тогда
			
			ТаблицаЕженедельныеРаботы = РезультатЕженедельныеРаботы.Выгрузить();
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипЕженедельныйОтчет(), ТаблицаЕженедельныеРаботы);
			
		КонецЕсли;
		
		Если Не РезультатФактическиеТрудозатраты.Пустой() Тогда
			
			ТаблицаФактическиеТрудозатраты = РезультатФактическиеТрудозатраты.Выгрузить();
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипТрудозатраты(), ТаблицаФактическиеТрудозатраты);
			
		КонецЕсли;
		
		Если Не РезультатИспользуемыеПроекты.Пустой() Тогда
			
			ТаблицаИспользуемыеПроекты = РезультатИспользуемыеПроекты.Выгрузить();
			
			СтруктураРезультатовЗапроса.Вставить(МП_СлужебныйПовтИсп.ТипПроект(), ТаблицаИспользуемыеПроекты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененияНастроекВложения(СтруктураРезультатовЗапроса, ПараметрыСинхронизации);
	
	ИзмененияНастроекСинхронизации(СтруктураРезультатовЗапроса, ПараметрыСинхронизации);
	
	Возврат СтруктураРезультатовЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовИзменений

Функция ТекстЗапросаИзмененийНСИПочта()
	
	Возврат 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныТекстовПисем.Ссылка КАК Ссылка,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ШаблоныТекстовПисем.Наименование КАК Наименование,
		|	ПОДСТРОКА(ШаблоныТекстовПисем.Шаблон, 1, 1000) КАК Шаблон,
		|	ШаблоныТекстовПисем.Ссылка = &ПодписьПриОтветеИПересылке КАК ПодписьПриОтветеИПересылке,
		|	ШаблоныТекстовПисем.Ссылка = &ПодписьДляНовыхПисем КАК ПодписьДляНовыхПисем,
		|	ШаблоныТекстовПисем.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ MailTextTemplate
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстовПисем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ШаблоныТекстовПисем.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|			И (ШаблоныТекстовПисем.Автор = &Пользователь)
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &БлижайшаяГраница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	УчетныеЗаписиЭлектроннойПочты.Наименование КАК Наименование,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК Адрес,
		|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки КАК МожетИспользоватьсяДляОтправки,
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &ОсновнаяУчетнаяЗапись КАК ОсновнаяУчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ MailAccount
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = ОтметкиВремениСсылочныхОбъектов.Граница
		|			И (УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная))
		|			И (ОтметкиВремениСсылочныхОбъектов.Ключ ССЫЛКА Справочник.УчетныеЗаписиЭлектроннойПочты)
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки 
		|
		|	И УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОтметкиВремениСсылочныхОбъектов.Граница) КАК Граница,
		|	МАКСИМУМ(АдресатыПочтовыхСообщений.Ссылка) КАК Ссылка,
		|	СведенияОбАдресатах.Представление КАК Наименование,
		|	АдресатыПочтовыхСообщений.Адрес КАК Адрес
		|ПОМЕСТИТЬ Addressee
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО Пользователи.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО Пользователи.Ссылка = СведенияОбАдресатах.Контакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО (СведенияОбАдресатах.АдресатСообщения = АдресатыПочтовыхСообщений.Ссылка)
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки 
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОбАдресатах.Представление,
		|	АдресатыПочтовыхСообщений.Адрес
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОтметкиВремениСсылочныхОбъектов.Граница),
		|	МАКСИМУМ(АдресатыПочтовыхСообщений.Ссылка),
		|	СведенияОбАдресатах.Представление,
		|	АдресатыПочтовыхСообщений.Адрес
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО РолиИсполнителей.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|		ПО РолиИсполнителей.Ссылка = СведенияОбАдресатах.Контакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО (СведенияОбАдресатах.АдресатСообщения = АдресатыПочтовыхСообщений.Ссылка)
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|
		|СГРУППИРОВАТЬ ПО
		|	АдресатыПочтовыхСообщений.Адрес,
		|	СведенияОбАдресатах.Представление";
		
КонецФункции

функция ТекстЗапросаИзмененийНСИ(МобильноеПриложение);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.Наименование КАК Наименование,
		|	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ФизическиеЛица.ФайлФотографии КАК ФайлФотографии,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СведенияОПользователяхДокументооборот.Подразделение) КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СведенияОПользователяхДокументооборот.ГрафикРаботы) КАК ГрафикРаботы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Пользователи.Помещение) КАК Помещение
		|	,&КонтактнаяИнформацияПользователя
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО Пользователи.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО Пользователи.Ссылка = СведенияОПользователяхДокументооборот.Пользователь
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиИсполнителей.Ссылка КАК Ссылка,
		|	РолиИсполнителей.Наименование КАК Наименование,
		|	РолиИсполнителей.ПометкаУдаления КАК ПометкаУдаления,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница
		|	,&КонтактнаяИнформацияРолиИсполнителя
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО РолиИсполнителей.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОтсутствий.Ссылка КАК Ссылка,
		|	ВидыОтсутствий.Наименование КАК Наименование,
		|	ВидыОтсутствий.ПометкаУдаления КАК ПометкаУдаления,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ВидыОтсутствий.Комментарий КАК Комментарий,
		|	ВидыОтсутствий.ЭтоУдаленнаяРабота КАК ЭтоУдаленнаяРабота
		|ИЗ
		|	Справочник.ВидыОтсутствий КАК ВидыОтсутствий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ВидыОтсутствий.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки";
		
	
	Если МП_СлужебныйПовтИсп.ВерсияБольше2_2_5(МобильноеПриложение) Тогда
		МП_Служебный.ПолеКИВТекстЗапроса(ТекстЗапроса, Метаданные.Справочники.Пользователи.Имя,
			"&КонтактнаяИнформацияПользователя");
		
		МП_Служебный.ПолеКИВТекстЗапроса(ТекстЗапроса, Метаданные.Справочники.РолиИсполнителей.Имя,
			"&КонтактнаяИнформацияРолиИсполнителя");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&КонтактнаяИнформацияПользователя", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&КонтактнаяИнформацияРолиИсполнителя", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИзмененияПапок()
	
	Возврат
		"ВЫБРАТЬ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Папка КАК Папка,
		|	ПапкиУчетныхЗаписей.УчетнаяЗапись КАК УчетнаяЗапись
		|ПОМЕСТИТЬ ПапкиПисемДляСинхронизации
		|ИЗ
		|	РегистрСведений.СинхронизацияПапокПисемСМобильнымКлиентом КАК СинхронизацияПапокПисемСМобильнымКлиентом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|		ПО СинхронизацияПапокПисемСМобильнымКлиентом.Папка = ПапкиУчетныхЗаписей.Папка
		|ГДЕ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиПисемДляСинхронизации.УчетнаяЗапись КАК УчетнаяЗапись
		|ПОМЕСТИТЬ ДоступныеУчетныеЗаписи
		|ИЗ
		|	ПапкиПисемДляСинхронизации КАК ПапкиПисемДляСинхронизации
		|ГДЕ
		|	ПапкиПисемДляСинхронизации.УчетнаяЗапись <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
		|	И НЕ ПапкиПисемДляСинхронизации.УчетнаяЗапись ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиПисемДляСинхронизации.УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ПапкиПисемДляСинхронизации.Папка КАК Ссылка,
		|	ПапкиПисемДляСинхронизации.УчетнаяЗапись КАК УчетнаяЗапись
		|ПОМЕСТИТЬ ИзмененияСинхронизируемыхПапок
		|ИЗ
		|	ПапкиПисемДляСинхронизации КАК ПапкиПисемДляСинхронизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ПапкиПисемДляСинхронизации.Папка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПапкиПисем.Родитель КАК Родитель,
		|	ПапкиПисем.ВидПапки КАК ВидПапки,
		|	ПапкиПисем.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК Синхронизировать,
		|	ПапкиПисем.Наименование КАК Наименование,
		|	ИзмененияСинхронизируемыхПапок.Граница КАК Граница,
		|	ИзмененияСинхронизируемыхПапок.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ИзмененияСинхронизируемыхПапок.Ссылка КАК Ссылка
		|ИЗ
		|	ИзмененияСинхронизируемыхПапок КАК ИзмененияСинхронизируемыхПапок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиПисем КАК ПапкиПисем
		|		ПО ИзмененияСинхронизируемыхПапок.Ссылка = ПапкиПисем.Ссылка";
	
КонецФункции

Функция ТекстЗапросаИзмененийПисем()
	
	// Получение состояний аналогично запросу в ЖурналДокументов.ЭлектроннаяПочта.ФормаСписка
	Возврат
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтметкиВремениИзмененияСведенийПисем.Письмо КАК Ссылка,
		|	ОтметкиВремениИзмененияСведенийПисем.Граница КАК Граница
		|ПОМЕСТИТЬ ВТ_ЭлектроннаяПочта
		|ИЗ
		|	РегистрСведений.ОтметкиВремениИзмененияСведенийПисем КАК ОтметкиВремениИзмененияСведенийПисем
		|ГДЕ
		|	ОтметкиВремениИзмененияСведенийПисем.Граница > &БлижайшаяГраница
		|	И ОтметкиВремениИзмененияСведенийПисем.УчетнаяЗапись В (&ДоступныеУчетныеЗаписиПользователя)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка,
		|	ЭлектроннаяПочта.Папка КАК Папка,
		|	ЭлектроннаяПочта.Тема КАК Тема,
		|	СведенияОПрочтении.Прочтен КАК Прочитан,
		|	ЭлектроннаяПочта.ПометкаУдаления
		|	ИЛИ ПапкиПисемДляСинхронизации.Папка ЕСТЬ NULL КАК ПометкаУдаления,
		|	ИСТИНА КАК ТолькоЗаголовок,
		|	ЭлектроннаяПочта.ЕстьВложения КАК ЕстьВложения,
		|	ЭлектроннаяПочта.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.Объект ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.ЕстьОшибкиПриемкиОтправкиПочты
		|		И ЭлектроннаяПочта.Отправлено = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 6
		|		КОГДА КешИнформацииОбОбъектах.ЕстьОшибкиПриемкиОтправкиПочты
		|		И ТИПЗНАЧЕНИЯ(ЭлектроннаяПочта.Ссылка) = ТИП(Документ.ВходящееПисьмо)
		|			ТОГДА 6
		|		КОГДА КешИнформацииОбОбъектах.Отозван
		|			ТОГДА 9
		|		КОГДА ЭлектроннаяПочта.ОтправкаОтменена
		|			ТОГДА 5
		|		КОГДА КешИнформацииОбОбъектах.ПолученОтвет
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.ОтправленОтвет
		|		И КешИнформацииОбОбъектах.Перенаправлен
		|			ТОГДА 8
		|		КОГДА НЕ КешИнформацииОбОбъектах.ОтправленОтвет
		|		И КешИнформацииОбОбъектах.Перенаправлен
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.ОтправленОтвет
		|		И КешИнформацииОбОбъектах.Переслан
		|			ТОГДА 3
		|		КОГДА КешИнформацииОбОбъектах.ОтправленОтвет
		|		И НЕ КешИнформацииОбОбъектах.Переслан
		|			ТОГДА 1
		|		КОГДА НЕ КешИнформацииОбОбъектах.ОтправленОтвет
		|		И КешИнформацииОбОбъектах.Переслан
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексСостоянияПисьма,
		|	ЭлектроннаяПочта.Важность КАК Важность,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЭлектроннаяПочта.Отправитель) КАК Отправитель,
		|	КешИнформацииОбОбъектах.СрокИсполнения КАК СрокИсполнения,
		|	ЭлектроннаяПочта.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ФлагиОбъектов.Флаг КАК Флаг,
		|	ЭлектроннаяПочта.ДатаОтправкиПолучения КАК ДатаОтправки,
		|	ЭлектроннаяПочта.Ссылка ССЫЛКА Документ.ВходящееПисьмо КАК Входящее,
		|	ВТ_ЭлектроннаяПочта.Граница КАК УдалитьОтметкаВремени,
		|	КешИнформацииОбОбъектах.СостояниеКонтроля КАК СостояниеКонтроля
		|ИЗ
		|	ВТ_ЭлектроннаяПочта КАК ВТ_ЭлектроннаяПочта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ПО ВТ_ЭлектроннаяПочта.Ссылка = ЭлектроннаяПочта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО (ЭлектроннаяПочта.Ссылка = КешИнформацииОбОбъектах.Объект)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО ВТ_ЭлектроннаяПочта.Ссылка = СведенияОПрочтении.Объект
		|		И (СведенияОПрочтении.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПапкиПисемДляСинхронизации КАК ПапкиПисемДляСинхронизации
		|		ПО (ЭлектроннаяПочта.Папка = ПапкиПисемДляСинхронизации.Папка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ВТ_ЭлектроннаяПочта.Ссылка = ФлагиОбъектов.Объект
		|		И (ФлагиОбъектов.Пользователь = &Пользователь)
		|ГДЕ
		|	ЭлектроннаяПочта.Дата >= &СрокУстареванияДанных";
	
КонецФункции

Функция ТекстЗапросаИзмененийЗадач()
	
	Возврат
		"ВЫБРАТЬ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
		|ПОМЕСТИТЬ ВТТекущиеРоли
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &Пользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнителиРолейИДелегаты.РольПользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачиПоИсполнителю.Ссылка КАК Ссылка,
		|	ЗадачиПоИсполнителю.Наименование КАК Наименование,
		|	ЗадачиПоИсполнителю.Автор КАК Автор,
		|	ЗадачиПоИсполнителю.Исполнитель КАК Исполнитель,
		|	ЗадачиПоИсполнителю.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачиПоИсполнителю.Дата КАК ДатаСоздания,
		|	КешИнформацииОбОбъектах.ЕстьФайлы КАК ЕстьВложения,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	ЗадачиПоИсполнителю.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ИСТИНА КАК ТолькоЗаголовок,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) = ТИП(БизнесПроцесс.Исполнение)
		|			ТОГДА ЗадачиПоИсполнителю.БизнесПроцесс
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПроцессИсполнение,
		|	ЗадачиПоИсполнителю.РольИсполнителя.Владелец КАК РольИсполнителя,
		|	ЗадачиПоИсполнителю.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса КАК Состояние,
		|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса.Порядок КАК СостояниеИндекс,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ЗадачиПоИсполнителю.ПометкаУдаления
		|		ИЛИ ЗадачиПоИсполнителю.Выполнена
		|		ИЛИ ЗадачиПоИсполнителю.ИсключенаИзПроцесса КАК ПометкаУдаления,
		|	ФлагиОбъектов.Флаг КАК Флаг,
		|	ЗадачиПоИсполнителю.Выполнена КАК Выполнена,
		|	ПОДСТРОКА(ЗадачиПоИсполнителю.РезультатВыполнения, 1, 1000) КАК КомментарийИсполнителя,
		|	ЗадачиПоИсполнителю.Важность КАК Важность
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачиПоИсполнителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ЗадачиПоИсполнителю.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|			И (ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеРоли КАК ВТТекущиеРоли
		|		ПО (ЗадачиПоИсполнителю.Исполнитель = ВТТекущиеРоли.РольПользователь
		|				ИЛИ ЗадачиПоИсполнителю.РольИсполнителя = ВТТекущиеРоли.РольПользователь
		|				ИЛИ ЗадачиПоИсполнителю.Исполнитель = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиПоИсполнителю.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачиПоИсполнителю.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО (ЗадачиДляВыполнения.Задача = ЗадачиПоИсполнителю.Ссылка)
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|	И НЕ ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) = ТИП(БизнесПроцесс.КомплексныйПроцесс)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОбИсполнителяхЗадач.Задача,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.СведенияОбИсполнителяхЗадач КАК СведенияОбИсполнителяхЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО СведенияОбИсполнителяхЗадач.Задача = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|	И СведенияОбИсполнителяхЗадач.Участник = &Пользователь";
		
КонецФункции

функция ТекстЗапросаИзмененийПроцессов()
	
	Возврат
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Исполнение.Наименование КАК Наименование,
		|	Исполнение.Автор КАК Автор,
		|	Исполнение.Важность КАК Важность,
		|	Исполнение.ВедущаяЗадача КАК ГлавнаяЗадача,
		|	Исполнение.Дата КАК ДатаСоздания,
		|	Исполнение.ДатаНачала КАК ДатаСтарта,
		|	Исполнение.Состояние КАК Состояние,
		|	Исполнение.СрокИсполненияПроцесса КАК Срок,
		|	КешИнформацииОбОбъектах.ЕстьФайлы КАК ЕстьВложения,
		|	Исполнение.Описание КАК Описание,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	Исполнение.Ссылка КАК Ссылка,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	Исполнение.Завершен
		|	ИЛИ Исполнение.ПометкаУдаления КАК ПометкаУдаления,
		|	ФлагиОбъектов.Флаг КАК Флаг,
		|	NULL КАК ДатаНачала,
		|	NULL КАК ПринятоеРешение,
		|	NULL КАК СрокИсполнения,
		|	NULL КАК ИнициаторПроцесса
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО Исполнение.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО Исполнение.Ссылка = ФлагиОбъектов.Объект
		|		И (ФлагиОбъектов.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО Исполнение.Ссылка = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	Исполнение.Автор = &Пользователь
		|	И ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РешениеВопросовВыполненияЗадач.Наименование КАК Наименование,
		|	РешениеВопросовВыполненияЗадач.Автор КАК Автор,
		|	РешениеВопросовВыполненияЗадач.Важность КАК Важность,
		|	РешениеВопросовВыполненияЗадач.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	РешениеВопросовВыполненияЗадач.Дата КАК Дата,
		|	РешениеВопросовВыполненияЗадач.Состояние КАК Состояние,
		|	КешИнформацииОбОбъектах.ЕстьФайлы КАК ЕстьВложения,
		|	РешениеВопросовВыполненияЗадач.Описание КАК Описание,
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК Ссылка,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	РешениеВопросовВыполненияЗадач.ПометкаУдаления КАК ПометкаУдаления,
		|	РешениеВопросовВыполненияЗадач.ДатаНачала КАК ДатаНачала,
		|	РешениеВопросовВыполненияЗадач.ПринятоеРешение КАК ПринятоеРешение,
		|	РешениеВопросовВыполненияЗадач.СрокИсполнения КАК СрокИсполнения,
		|	РешениеВопросовВыполненияЗадач.ИнициаторПроцесса КАК ИнициаторПроцесса,
		|	РешениеВопросовВыполненияЗадач.Завершен КАК Завершен,
		|	РешениеВопросовВыполненияЗадач.ОтправитьНаУточнение КАК ОтправитьНаУточнение,
		|	ВЫБОР
		|		КОГДА РешениеВопросовВыполненияЗадач.ИнициаторПроцесса ССЫЛКА Справочник.Пользователи
		|			ТОГДА ""User""
		|		ИНАЧЕ ""Role""
		|	КОНЕЦ КАК ТипИнициатораПроцесса
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО РешениеВопросовВыполненияЗадач.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО РешениеВопросовВыполненияЗадач.Ссылка = ФлагиОбъектов.Объект
		|		И (ФлагиОбъектов.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО РешениеВопросовВыполненияЗадач.Ссылка = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.Автор = &Пользователь
		|	И ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки";
	
КонецФункции

Функция ТекстЗапросаИзмененийКалендаря()
	
	Возврат
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование КАК Наименование,
		|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь,
		|	ЗаписиРабочегоКалендаря.ВесьДень КАК ВесьДень,
		|	ЗаписиРабочегоКалендаря.ДатаНачала КАК ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения КАК ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания КАК ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения КАК ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения КАК ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов КАК КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.Описание КАК Описание,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца КАК ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам КАК ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ПравилоОкончанияПовторения КАК ПравилоОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.Связанная КАК Связанная,
		|	ЗаписиРабочегоКалендаря.Предмет КАК Предмет,
		|	ЗаписиРабочегоКалендаря.Состояние КАК Состояние,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения КАК ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения КАК ДатаИсключения,
		|		ЗаписьИсключения КАК ЗаписьИсключения
		|	) КАК ИсключенияПовторения,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели КАК ДеньНедели,
		|		НомерВхождения КАК НомерВхождения
		|	) КАК ПовторениеПоДням,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления КАК ПометкаУдаления,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ЕСТЬNULL(НастройкиОтображенияЗаписейОтработано.ЗначениеНастройки, ЛОЖЬ) КАК Отработано,
		|	ВЫБОР
		|		КОГДА НастройкиОтображенияЗаписейЦвета.ЗначениеНастройки = ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(НастройкиОтображенияЗаписейЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.ПустаяСсылка))
		|	КОНЕЦ КАК Цвет
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкиОтображенияЗаписейОтработано
		|		ПО (НастройкиОтображенияЗаписейОтработано.Пользователь = &Пользователь)
		|			И ЗаписиРабочегоКалендаря.Ссылка = НастройкиОтображенияЗаписейОтработано.Событие
		|			И (НастройкиОтображенияЗаписейОтработано.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкиОтображенияЗаписейЦвета
		|		ПО (НастройкиОтображенияЗаписейЦвета.Пользователь = &Пользователь)
		|			И ЗаписиРабочегоКалендаря.Ссылка = НастройкиОтображенияЗаписейЦвета.Событие
		|			И (НастройкиОтображенияЗаписейЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|	И ЗаписиРабочегоКалендаря.Пользователь = &Пользователь";
	
КонецФункции

Функция ТекстЗапросаИзмененийКонтроля()
	
	Возврат 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контроль.Ссылка КАК Ссылка,
		|	Контроль.Автор КАК Автор,
		|	Контроль.Наименование КАК Наименование,
		|	Контроль.ДатаПостановкиНаКонтроль КАК ДатаПостановкиНаКонтроль,
		|	Контроль.ДатаСнятияСКонтроля КАК ДатаСнятияСКонтроля,
		|	Контроль.ИсполнителиСтрокой КАК ИсполнителиСтрокой,
		|	Контроль.Источник КАК Источник,
		|	Контроль.Контролер КАК Контролер,
		|	Контроль.Описание КАК Описание,
		|	Контроль.ПоставленНаКонтроль КАК ПоставленНаКонтроль,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Контроль.Предмет) = ТИП(Справочник.ВеткиПереписки)
		|			ТОГДА Контроль.Предмет.КорневоеПисьмо
		|		ИНАЧЕ Контроль.Предмет
		|	КОНЕЦ КАК Предмет,
		|	Контроль.СнятСКонтроля КАК СнятСКонтроля,
		|	Контроль.СрокИсполнения КАК СрокИсполнения,
		|	Контроль.Исполнители.(
		|		ДатаИсполнения КАК ДатаИсполнения,
		|		ДатаКонтроля КАК ДатаКонтроля,
		|		Исполнено КАК Исполнено,
		|		Ответственный КАК Ответственный,
		|		Проконтролировано КАК Проконтролировано,
		|		ВЫБОР
		|			КОГДА Контроль.Исполнители.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|				ТОГДА Контроль.Исполнители.Исполнитель.Владелец
		|			ИНАЧЕ Контроль.Исполнители.Исполнитель
		|		КОНЕЦ КАК Исполнитель,
		|		Источник КАК Источник,
		|		ПРЕДСТАВЛЕНИЕССЫЛКИ(Контроль.Исполнители.Исполнитель) КАК ИсполнительСтрокой,
		|		ВЫБОР
		|			КОГДА Контроль.Исполнители.Исполнитель ССЫЛКА Справочник.Пользователи
		|				ТОГДА ""User""
		|			КОГДА Контроль.Исполнители.Исполнитель ССЫЛКА Справочник.АдресатыПочтовыхСообщений
		|				ТОГДА ""Addressee""
		|			ИНАЧЕ ""Role""
		|		КОНЕЦ КАК ТипИсполнителя,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Контроль.Предмет) = ТИП(Справочник.ВеткиПереписки)
		|				ТОГДА ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(Контроль.Исполнители.Источник) = ТИП(Документ.ВходящееПисьмо)
		|							ТОГДА &СостояниеОтветПолучен
		|						КОГДА ТИПЗНАЧЕНИЯ(Контроль.Исполнители.Источник) = ТИП(Документ.ИсходящееПисьмо)
		|							ТОГДА &СостояниеОтветНеПолучен
		|					КОНЕЦ
		|			КОГДА ТИПЗНАЧЕНИЯ(Контроль.Предмет) В (&ТипыБП)
		|					ИЛИ ТИПЗНАЧЕНИЯ(Контроль.Предмет) = ТИП(Задача.ЗадачаИсполнителя)
		|				ТОГДА ВЫБОР
		|						КОГДА Контроль.Исполнители.Исполнено
		|							ТОГДА &СостояниеИсполнено
		|					КОНЕЦ
		|		КОНЕЦ КАК Состояние
		|	) КАК Исполнители,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	Контроль.ПометкаУдаления
		|		ИЛИ Контроль.СнятСКонтроля КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО Контроль.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница> &ПредыдущаяГраницаСборки
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|			ГДЕ
		|				ИсполнителиРолейИДелегаты.РольПользователь = Контроль.Контролер
		|				И ИсполнителиРолейИДелегаты.ИсполнительДелегат = &Пользователь
		|				И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль""))";
	
КонецФункции

Функция ТекстЗапросаИзмененийМоихОтсутствий()
	
	Возврат 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отсутствие.Ссылка КАК Ссылка,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	Отсутствие.ПометкаУдаления КАК ПометкаУдаления,
		|	Отсутствие.Номер КАК Номер,
		|	Отсутствие.Дата КАК Дата,
		|	Отсутствие.БудуРазбиратьЗадачи КАК БудуРазбиратьЗадачи,
		|	Отсутствие.ВесьДень КАК ВесьДень,
		|	Отсутствие.ВидОтсутствия КАК ВидОтсутствия,
		|	Отсутствие.ДатаНачала КАК ДатаНачала,
		|	Отсутствие.ДатаОкончания КАК ДатаОкончания,
		|	Отсутствие.Комментарий КАК Комментарий,
		|	Отсутствие.ПериодСтрокой КАК ПериодСтрокой,
		|	Отсутствие.Заместители.(
		|		Заместитель КАК Заместитель,
		|		Комментарий КАК Комментарий
		|	) КАК Заместители
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО Отсутствие.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|	И Отсутствие.Сотрудник = &Пользователь
		|	И Отсутствие.ДатаОкончания >= &ДатаНачалаВыгрузки";
	
КонецФункции

Функция ТекстЗапросаИзмененийМоегоСамочувствия()
	
	Возврат
		"ВЫБРАТЬ
		|	ГрафикУчетаСамочувствияСотрудников.Ссылка КАК Ссылка,
		|	ГрафикУчетаСамочувствияСотрудников.ПометкаУдаления КАК ПометкаУдаления,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ГрафикУчетаСамочувствияСотрудников.ВремяЗамера КАК ВремяЗамера,
		|	ГрафикУчетаСамочувствияСотрудников.Недействительная КАК Недействительная
		|ИЗ
		|	Справочник.ГрафикУчетаСамочувствияСотрудников КАК ГрафикУчетаСамочувствияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ГрафикУчетаСамочувствияСотрудников.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница >= &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СамочувствиеСотрудника.Ссылка КАК Ссылка,
		|	СамочувствиеСотрудника.ПометкаУдаления КАК ПометкаУдаления,
		|	СамочувствиеСотрудника.Номер КАК Номер,
		|	СамочувствиеСотрудника.Дата КАК Дата,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	СамочувствиеСотрудника.Температура КАК Температура,
		|	СамочувствиеСотрудника.Самочувствие КАК Самочувствие,
		|	СамочувствиеСотрудника.ПовышеннаяТемпература КАК ПовышеннаяТемпература,
		|	СамочувствиеСотрудника.ДатаЗамера КАК ДатаЗамера,
		|	СамочувствиеСотрудника.ТочкаЗамера КАК ТочкаЗамера
		|ИЗ
		|	Документ.СамочувствиеСотрудника КАК СамочувствиеСотрудника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО СамочувствиеСотрудника.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница >= &ПредыдущаяГраницаСборки
		|	И СамочувствиеСотрудника.Сотрудник = &Пользователь
		|	И СамочувствиеСотрудника.Дата >= &ДатаНачалаВыгрузки";
	
Конецфункции

функция ТекстЗапросаИзмененийМероприятий()
	
	Возврат
		"ВЫБРАТЬ
		|	СправочникМероприятия.Ссылка КАК Ссылка,
		|	СправочникМероприятия.ДатаНачала КАК ДатаНачала,
		|	СправочникМероприятия.ДатаОкончания КАК ДатаОкончания,
		|	СправочникМероприятия.Наименование КАК Наименование,
		|	СправочникМероприятия.Предмет КАК Предмет,
		|	УчастникиМероприятия.СостояниеПриглашения КАК СостояниеПриглашения,
		|	КешИнформацииОбОбъектах.ЕстьФайлы КАК ЕстьФайлы,
		|	КешИнформацииОбОбъектах.СостояниеКонтроля КАК СостояниеКонтроля,
		|	СправочникМероприятия.Важность КАК Важность,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СправочникМероприятия.Организатор) КАК ОрганизаторСтрокой,
		|	СправочникМероприятия.ПериодСтрокой КАК ПериодСтрокой,
		|	СправочникМероприятия.Подготовил КАК Подготовил,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено))
		|			ТОГДА 4
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено))
		|			ТОГДА 5
		|		КОГДА СправочникМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				И 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|			ТОГДА 1
		|		КОГДА СправочникМероприятия.ДатаОкончания < &ТекущаяДата
		|				И 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|			ТОГДА 3
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинкиСостояния,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	СправочникМероприятия.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Мероприятия КАК СправочникМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|		ПО СправочникМероприятия.Ссылка = УчастникиМероприятия.Мероприятие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО СправочникМероприятия.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО СправочникМероприятия.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	УчастникиМероприятия.Исполнитель = &Пользователь
		|	И СправочникМероприятия.ДатаОкончания >= &ДатаНачалаВыгрузки
		|	И ОтметкиВремениСсылочныхОбъектов.Граница >= &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МП_ИзмененныеСостоянияПриглашенийНаМероприятия.Мероприятие КАК Мероприятие,
		|	МП_ИзмененныеСостоянияПриглашенийНаМероприятия.УдалитьОтметкаВремени КАК УдалитьОтметкаВремени,
		|	УчастникиМероприятия.СостояниеПриглашения КАК СостояниеПриглашения
		|ИЗ
		|	РегистрСведений.МП_ИзмененныеСостоянияПриглашенийНаМероприятия КАК МП_ИзмененныеСостоянияПриглашенийНаМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
		|		ПО МП_ИзмененныеСостоянияПриглашенийНаМероприятия.Мероприятие = Мероприятия.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|		ПО МП_ИзмененныеСостоянияПриглашенийНаМероприятия.Пользователь = УчастникиМероприятия.Исполнитель
		|			И МП_ИзмененныеСостоянияПриглашенийНаМероприятия.Мероприятие = УчастникиМероприятия.Мероприятие
		|ГДЕ
		|	МП_ИзмененныеСостоянияПриглашенийНаМероприятия.Граница >= &ПредыдущаяГраницаСборки
		|	И МП_ИзмененныеСостоянияПриглашенийНаМероприятия.Пользователь = &Пользователь
		|	И Мероприятия.ДатаОкончания >= &ДатаНачалаВыгрузки";
	
КонецФункции

Функция ТекстЗапросаИзмененийОбъектовУчетаВремени() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	ВидыРабот.Ссылка КАК Ссылка,
		|	ВидыРабот.ПометкаУдаления КАК ПометкаУдаления,
		|	ВидыРабот.Родитель КАК Родитель,
		|	ВидыРабот.ЭтоГруппа КАК ЭтоГруппа,
		|	ВидыРабот.Код КАК Код,
		|	ВидыРабот.Наименование КАК Наименование,
		|	ВидыРабот.ВидВремени КАК ВидВремени,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница
		|ИЗ
		|	Справочник.ВидыРабот КАК ВидыРабот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ВидыРабот.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница >= &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕжедневныйОтчет.Ссылка КАК Ссылка,
		|	ЕжедневныйОтчет.ДлительностьРабот КАК ДлительностьРабот,
		|	ЕжедневныйОтчет.ДлительностьРабочая КАК ДлительностьРабочая,
		|	ЕжедневныйОтчет.НачалоДня КАК НачалоДня,
		|	ЕжедневныйОтчет.НекорректнаяДлительность КАК НекорректнаяДлительность,
		|	ЕжедневныйОтчет.ОкончаниеДня КАК ОкончаниеДня,
		|	ЕжедневныйОтчет.Дата КАК Дата,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ЕжедневныйОтчет.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕжедневныйОтчет.Ссылка КАК ID,
		|	ЕжедневныйОтчет.СпособУказанияВремени КАК СпособУказанияВремени
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ЕжедневныйОтчет.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &Пользователь
		|	И ОтметкиВремениСсылочныхОбъектов.Граница >= &ПредыдущаяГраницаСборки
		|	И ЕжедневныйОтчет.Дата >= &ДатаНачалаВыгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕженедельныйОтчет.Ссылка КАК Ссылка,
		|	ЕженедельныйОтчет.ДлительностьРабот КАК ДлительностьРабот,
		|	ЕженедельныйОтчет.ДниНедели.(
		|		ДеньНедели КАК ДеньНедели,
		|		Дата КАК Дата,
		|		ВидДня КАК ВидДня,
		|		НачалоДня КАК НачалоДня,
		|		ОкончаниеДня КАК ОкончаниеДня,
		|		ЕжедневныйОтчет КАК ЕжедневныйОтчет,
		|		ДлительностьРабот КАК ДлительностьРабот,
		|		ДлительностьРабочая КАК ДлительностьРабочая
		|	) КАК ДниНедели,
		|	ЕженедельныйОтчет.Достижения КАК Достижения,
		|	ЕженедельныйОтчет.Планы КАК Планы,
		|	ЕженедельныйОтчет.Неудачи КАК Неудачи,
		|	ЕженедельныйОтчет.Дата КАК Дата,
		|	ЕженедельныйОтчет.Ссылка КАК ID,
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница,
		|	ЕженедельныйОтчет.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕженедельныйОтчет.ДлительностьРабочая КАК ДлительностьРабочая
		|ИЗ
		|	Документ.ЕженедельныйОтчет КАК ЕженедельныйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ЕженедельныйОтчет.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ЕженедельныйОтчет.Пользователь = &Пользователь
		|	И ЕженедельныйОтчет.Дата >= &ДатаНачалаВыгрузки
		|	И ОтметкиВремениСсылочныхОбъектов.Граница >= &ПредыдущаяГраницаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеТрудозатраты.Начало КАК Начало,
		|	ФактическиеТрудозатраты.Окончание КАК Окончание,
		|	ЕСТЬNULL(ФактическиеТрудозатраты.ДатаДобавления, МП_ИзмененныеТрудозатраты.День) КАК ДатаДобавления,
		|	ЕСТЬNULL(ФактическиеТрудозатраты.НомерДобавления, МП_ИзмененныеТрудозатраты.НомерДобавления) КАК НомерДобавления,
		|	ФактическиеТрудозатраты.ВидРабот КАК ВидРабот,
		|	ФактическиеТрудозатраты.ЕжедневныйОтчет КАК ОтчетИсточник,
		|	ФактическиеТрудозатраты.ОписаниеРаботы КАК ОписаниеРаботы,
		|	ФактическиеТрудозатраты.Длительность КАК Длительность,
		|	ФактическиеТрудозатраты.Проект КАК Проект,
		|	МП_ИзмененныеТрудозатраты.Граница КАК Граница,
		|	МП_ИзмененныеТрудозатраты.Удалена КАК Удалена
		|ИЗ
		|	РегистрСведений.МП_ИзмененныеТрудозатраты КАК МП_ИзмененныеТрудозатраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|		ПО (ФактическиеТрудозатраты.Пользователь = МП_ИзмененныеТрудозатраты.Пользователь)
		|			И (НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) = НАЧАЛОПЕРИОДА(МП_ИзмененныеТрудозатраты.День, ДЕНЬ))
		|			И МП_ИзмененныеТрудозатраты.НомерДобавления = ФактическиеТрудозатраты.НомерДобавления
		|ГДЕ
		|	МП_ИзмененныеТрудозатраты.Граница >= &ПредыдущаяГраницаСборки
		|	И МП_ИзмененныеТрудозатраты.День > &ДатаНачалаВыгрузки
		|	И МП_ИзмененныеТрудозатраты.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МП_СинхронизацияПроектов.Проект КАК Ссылка,
		|	ЕСТЬNULL(МП_СинхронизацияПроектов.Удален, Проекты.ПометкаУдаления) КАК ПометкаУдаления,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.Код КАК Код,
		|	Проекты.Состояние КАК Состояние,
		|	Проекты.Руководитель КАК Руководитель
		|ИЗ
		|	РегистрСведений.МП_СинхронизацияПроектов КАК МП_СинхронизацияПроектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО МП_СинхронизацияПроектов.Проект = Проекты.Ссылка
		|ГДЕ
		|	МП_СинхронизацияПроектов.Граница >= &ПредыдущаяГраницаСборки";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСпецифическихКолонок

Процедура ОтобратьПредметыКалендарь(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, ТаблицаВыгрузки) Экспорт
	
	ДатаУстареванияДанных = МП_Служебный.ОпределитьДатуУстареванияДанных(ПараметрыСинхронизации.МобильноеПриложение,
		ПараметрыСинхронизации);

	ПапкиСинхронизации = МП_СлужебныйПовтИсп.ПапкиСинхронизацииТекущегоПользователя();

	ТаблицаВыгрузки.Колонки.Добавить("ТипПредмета");
	
	Предметы = Новый Массив;
	
	Для каждого Строка Из ТаблицаВыгрузки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Предмет) Тогда
			Продолжить;
		КонецЕсли;
			
		ТипПредмета = МП_СлужебныйПовтИсп.ТипПоСсылке(Строка.Предмет);
		
		Строка.ТипПредмета = ПредметВПредметПроцессаПриНеобходимости(ТипПредмета, Строка.Предмет, Предметы, 
			ДатаУстареванияДанных, ПапкиСинхронизации);
		
	КонецЦикла;

	Если Предметы.Количество() > 0 Тогда
		
		ПредметыТаблица = Новый ТаблицаЗначений();
		ПредметыТаблица.Колонки.Добавить("Ссылка", Метаданные.Справочники.ЗаписиРабочегоКалендаря.Реквизиты.Предмет.Тип);
		
		Для каждого Предмет Из Предметы Цикл
			ПредметыТаблица.Добавить().Ссылка = Предмет;
		КонецЦикла;
		
		ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, ПредметыТаблица)
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиКалендаря.Ссылка КАК Ссылка,
		|   ЗаписиКалендаря.Предмет КАК Предмет
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ЗаписиКалендаря КАК ЗаписиКалендаря
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВТ.Предмет = Файлы.Ссылка";
	
	Запрос.УстановитьПараметр("ЗаписиКалендаря", ТаблицаВыгрузки);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОтобратьФайлы(СтруктураРезультатовЗапросов, Результат.Выгрузить(), ПараметрыСинхронизации); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСпецифическиеКолонкиМероприятие(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, 
	ТаблицаВыгрузки) Экспорт
	
	ДатаУстареванияДанных = МП_Служебный.ОпределитьДатуУстареванияДанных(ПараметрыСинхронизации.МобильноеПриложение,
		ПараметрыСинхронизации);

	ПапкиСинхронизации = МП_СлужебныйПовтИсп.ПапкиСинхронизацииТекущегоПользователя();

	ТаблицаВыгрузки.Колонки.Добавить("ТипПредмета");
	ТаблицаВыгрузки.Колонки.Добавить("HTMLОписание");
	
	Предметы = Новый Массив;
	
	Для каждого Строка Из ТаблицаВыгрузки Цикл
		
		Строка.HTMLОписание = МП_Служебный.HTMLОписаниеМероприятия(Строка.Ссылка); 
		
		Если Не ЗначениеЗаполнено(Строка.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПредмета = МП_СлужебныйПовтИсп.ТипПоСсылке(Строка.Предмет);
		
		Строка.ТипПредмета = ПредметВПредметПроцессаПриНеобходимости(ТипПредмета, Строка.Предмет, Предметы, 
			ДатаУстареванияДанных, ПапкиСинхронизации);
	КонецЦикла;

	Если Предметы.Количество() > 0 Тогда
		
		ПредметыТаблица = Новый ТаблицаЗначений();
		ПредметыТаблица.Колонки.Добавить("Ссылка", Метаданные.Справочники.Мероприятия.Реквизиты.Предмет.Тип);
		
		Для каждого Предмет Из Предметы Цикл
			ПредметыТаблица.Добавить().Ссылка = Предмет;
		КонецЦикла;
		
		ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, ПредметыТаблица)
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка КАК Ссылка,
		|	Мероприятия.Предмет КАК Предмет
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Мероприятия КАК Мероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВТ.Ссылка = Файлы.ВладелецФайла
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВТ.Предмет = Файлы.Ссылка";
	
	Запрос.УстановитьПараметр("Мероприятия", ТаблицаВыгрузки);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОтобратьФайлы(СтруктураРезультатовЗапросов, Результат.Выгрузить(), ПараметрыСинхронизации); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобратьПредметыКонтроль(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, ТаблицаВыгрузки) Экспорт
	
	ДатаУстареванияДанных = МП_Служебный.ОпределитьДатуУстареванияДанных(ПараметрыСинхронизации.МобильноеПриложение,
		ПараметрыСинхронизации);

	ПапкиСинхронизации = МП_СлужебныйПовтИсп.ПапкиСинхронизацииТекущегоПользователя();

	ТаблицаВыгрузки.Колонки.Добавить("ТипПредмета");
	
	Предметы = Новый Массив;
	
	Для каждого Строка Из ТаблицаВыгрузки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПредмета = МП_СлужебныйПовтИсп.ТипПоСсылке(Строка.Предмет);
		
		Строка.ТипПредмета = ПредметВПредметПроцессаПриНеобходимости(ТипПредмета, Строка.Предмет, Предметы, 
			ДатаУстареванияДанных, ПапкиСинхронизации);
		
		Строка.Исполнители.Колонки.Добавить("ТипИсточника");
		
		Для каждого СтрокаИсполнители Из Строка.Исполнители Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаИсполнители.Исполнитель) Тогда
				Строка.Исполнители.Удалить(СтрокаИсполнители);
				Продолжить;
			КонецЕсли;
			
			Источник = СтрокаИсполнители.Источник;
			Если Источник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипИсточника = МП_СлужебныйПовтИсп.ТипПоСсылке(Источник);
			
			СтрокаИсполнители.ТипИсточника = ПредметВПредметПроцессаПриНеобходимости(ТипИсточника, Источник, Предметы,
				ДатаУстареванияДанных, ПапкиСинхронизации);
				
		КонецЦикла;
		
	КонецЦикла;

	Если Предметы.Количество() > 0 Тогда
		
		ПредметыТаблица = Новый ТаблицаЗначений();
		ПредметыТаблица.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.ВладелецФайлов.Тип);
		
		Для каждого Предмет Из Предметы Цикл
			ПредметыТаблица.Добавить().Ссылка = Предмет;
		КонецЦикла;
		
		ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, ПредметыТаблица)
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредметВПредметПроцессаПриНеобходимости(ТипПредмета, Предмет, Предметы,
	ДатаУстареванияДанных, ПапкиСинхронизации) Экспорт
	
	ТипПредметаПроцесса = МП_СлужебныйПовтИсп.ТипПредметПроцесса();
	МетаРеквизиты = Предмет.Метаданные().Реквизиты;
	Если ТипПредмета = МП_СлужебныйПовтИсп.ТипВходящееПисьмо() 
		Или ТипПредмета = МП_СлужебныйПовтИсп.ТипИсходящееПисьмо() Тогда
		
		ПапкаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "Папка");;
		
		ЕстьВПапкеСинхронизации = ПапкиСинхронизации.Найти(ПапкаПисьма) <> Неопределено;
		
		Если ДатаУстареванияДанных > Предмет.Дата Или Не ЕстьВПапкеСинхронизации Тогда
			ТипПредмета = ТипПредметаПроцесса;
		КонецЕсли;
	//Если предмет не выгружается на мобильное приложение - тогда выгружаем в качестве предмета процесса
	ИначеЕсли (МетаРеквизиты.Найти("Дата") <> Неопределено И Предмет.Дата < ДатаУстареванияДанных) Или
		(МетаРеквизиты.Найти("ДатаОкончания") <> Неопределено И Предмет.ДатаОкончания < ДатаУстареванияДанных) Тогда
			
		ТипПредмета = ТипПредметаПроцесса;
				
	КонецЕсли;
	
	Если ТипПредмета = ТипПредметаПроцесса 
		Или Не Метаданные.ОпределяемыеТипы.МП_Ссылки.Тип.СодержитТип(ТипЗнч(Предмет))
		Тогда
		Предметы.Добавить(Предмет);
	КонецЕсли;

	Возврат ТипПредмета;
	
КонецФункции

Процедура ЗаполнитьСпецифическиеКолонкиПисьма(ТаблицаВыгрузки) Экспорт
	
	ТаблицаВыгрузки.Колонки.Добавить("ПолучателиПисьма");
	
	ТаблицаВыгрузки.Колонки.Добавить("ПолучателиКопий");
	
	ТаблицаВыгрузки.Колонки.Добавить("ПолучателиСкрытыхКопий");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИмяТаблицыПолучатели.Адресат КАК Адресат
		|ИЗ
		|	&ИмяТаблицыПолучатели КАК ИмяТаблицыПолучатели
		|ГДЕ
		|	ИмяТаблицыПолучатели.Ссылка = &Ссылка";
		
	Для каждого Строка Из ТаблицаВыгрузки Цикл
		
		Ссылка = Строка.Ссылка;
		
		ЭтоВходящее = Строка.Входящее;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыПолучатели",
			?(ЭтоВходящее, "Документ.ВходящееПисьмо.ПолучателиПисьма", "Документ.ИсходящееПисьмо.ПолучателиПисьма"));
		
		Результат = Запрос.Выполнить();
		
		Строка.ПолучателиПисьма = СтрСоединить(Результат.Выгрузить().ВыгрузитьКолонку("Адресат"), ";");
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыПолучатели", 
			?(ЭтоВходящее, "Документ.ВходящееПисьмо.ПолучателиКопий", "Документ.ИсходящееПисьмо.ПолучателиКопий"));
		
		Результат = Запрос.Выполнить();
		
		Строка.ПолучателиКопий = СтрСоединить(Результат.Выгрузить().ВыгрузитьКолонку("Адресат"), ";");
		
		Если Не ЭтоВходящее Тогда
			
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыПолучатели" ,"Документ.ИсходящееПисьмо.ПолучателиСкрытыхКопий");
			
			Результат = Запрос.Выполнить();
			
			Строка.ПолучателиСкрытыхКопий = СтрСоединить(Результат.Выгрузить().ВыгрузитьКолонку("Адресат"), ";");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьВариантыВыполненияЗадачиПоТочкеМаршрута(Задача, ТочкаМаршрута, ВидВопроса = Неопределено)

	ТаблицаВарианты = Новый ТаблицаЗначений;
	ТаблицаВарианты.Колонки.Добавить("Результат");
	ТаблицаВарианты.Колонки.Добавить("ПредставлениеДляБольшогоЭкрана");
	ТаблицаВарианты.Колонки.Добавить("ПредставлениеДляМаленькогоЭкрана");
	ТаблицаВарианты.Колонки.Добавить("ОценкаРезультата");
	
	Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты, 
			1,
			НСтр("ru = 'Согласен'"),
			НСтр("ru = 'Согл.'"),
			"ExecutedPositive");
		
		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2,
			НСтр("ru = 'Согласен с замечаниями'"),
			НСтр("ru = 'Согл. с замеч.'"),
			"ExecutedAlmostPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			3, 
			НСтр("ru = 'Не согласен'"),
			НСтр("ru = 'Не согл.'"),
			"ExecutedNegative");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда

		Если Задача.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
			Или Задача.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1,
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

		Иначе
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1,
				НСтр("ru = 'Завершить согласование'"),
				НСтр("ru = 'Завершить'"),
				"ExecutedPositive");

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				2,
				НСтр("ru = 'Повторить согласование'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1,
			НСтр("ru = 'Утверждено'"),
			НСтр("ru = 'Утверждено'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2,
			НСтр("ru = 'Не утверждено'"),
			НСтр("ru = 'Не утверждено'"),
			"ExecutedNegative");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда

		Если Задача.БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1, 
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

		Иначе
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1,
				НСтр("ru = 'Завершить утверждение'"),
				НСтр("ru = 'Завершить'"),
				"ExecutedPositive");

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				2, 
				НСтр("ru = 'Повторить утверждение'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1,
			НСтр("ru = 'Наложить резолюцию'"),
			НСтр("ru = 'Рассмотрено'"),
			"ExecutedAlmostPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2,
			НСтр("ru = 'Направить на исполнение'"),
			НСтр("ru = 'На исполнение'"),
			"ExecutedAlmostPositive");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
		Или ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться 
		Или ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1,
			НСтр("ru = 'Ознакомился'"),
			НСтр("ru = 'Ознакомился'"),
			"ExecutedPositive");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
		Или ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1,
			НСтр("ru = 'Выполнено'"),
			НСтр("ru = 'Выполнено'"),
			"ExecutedPositive");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1,
			НСтр("ru = 'Завершить исполнение'"),
			НСтр("ru = 'Завершить'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2, 
			НСтр("ru = 'Вернуть на доработку'"),
			НСтр("ru = 'На доработку'"),
			"ExecutedNegative");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать
		Или  ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1, 
			НСтр("ru = 'Снять с контроля'"),
			НСтр("ru = 'Снять с контроля'"),
			"ExecutedPositive");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1, 
			НСтр("ru = 'Завершить поручение'"),
			НСтр("ru = 'Завершить'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2, 
			НСтр("ru = 'Вернуть на доработку'"),
			НСтр("ru = 'На доработку'"),
			"ExecutedNegative");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1, 
			НСтр("ru = 'Зарегистрировано'"),
			НСтр("ru = 'Зарег.'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2, 
			НСтр("ru = 'Не зарегистрировано'"),
			НСтр("ru = 'Не зарег.'"),
			"ExecutedNegative");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда

		Если Задача.БизнесПроцесс.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1, 
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

		Иначе
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1, 
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				2, 
				НСтр("ru = 'Повторить регистрацию'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1, 
			НСтр("ru = 'Принять приглашение'"),
			НСтр("ru = 'Принять'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2, 
			НСтр("ru = 'Отклонить приглашение'"),
			НСтр("ru = 'Отклонить'"),
			"ExecutedNegative");

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда

		Если Задача.БизнесПроцесс.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками
			Или Задача.БизнесПроцесс.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1, 
				НСтр("ru = 'Подтвердить приглашения'"),
				НСтр("ru = 'Подтвердить'"),
				"ExecutedPositive");

		Иначе

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				2, 
				НСтр("ru = 'Повторить приглашения'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNeutral");

			ДобавитьВариантИсполнения(ТаблицаВарианты,
				3, 
				НСтр("ru = 'Отменить'"),
				НСтр("ru = 'Отменить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
	
		Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1, 
				НСтр("ru = 'Перенести срок'"),
				НСтр("ru = 'Перенести'"),
				"ExecutedPositive");
			
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				2, 
				НСтр("ru = 'Отказать'"),
				НСтр("ru = 'Отказать'"),
				"ExecutedNegative");
		
		Иначе
			
			ДобавитьВариантИсполнения(ТаблицаВарианты,
				1, 
				НСтр("ru = 'Рассмотрено'"),
				НСтр("ru = 'Рассмотрено'"),
				"ExecutedPositive");
		
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда

		ДобавитьВариантИсполнения(ТаблицаВарианты,
			1, 
			НСтр("ru = 'Закрыть вопрос'"),
			НСтр("ru = 'Закрыть'"),
			"ExecutedPositive");
			
		ДобавитьВариантИсполнения(ТаблицаВарианты,
			2, 
			НСтр("ru = 'Уточнить'"),
			НСтр("ru = 'Уточнить'"),
			"ExecutedNegative");
	
	КонецЕсли;
		
	Возврат ТаблицаВарианты;
	
КонецФункции

#КонецОбласти

#Область ОтборИзмененийЧастиВсеОстальное

Процедура ИзмененияВсеОстальноеПоТаблицамЗаголовков(ИмяТаблицыИзменений, ТаблицаИзменений, СтруктураРезультатовЗапросов,
	ПараметрыСинхронизации) Экспорт
	
	//Выгрузка специфичных колонок для таблиц изменений для выгрузки части "Все остальное"
	Если ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипПисьмо() 
		Или ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипПисьмоЗаголовки()
		//если запрошен единичный объект
		Или ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипВходящееПисьмо()
		Или ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипИсходящееПисьмо() Тогда
		
		// Выгружаем хранилище текста писем, вложения
		ИзмененияВсеОстальноеПоТаблицамЗаголовковПочта(
			ТаблицаИзменений, СтруктураРезультатовЗапросов, ПараметрыСинхронизации);
		
	КонецЕсли;
	
	Если ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипЗадача() 
		Или ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипЗадачаЗаголовки() Тогда
		
		ИзмененияВсеОстальноеПоТаблицамЗаголовковЗадач(
			ПараметрыСинхронизации, СтруктураРезультатовЗапросов, ТаблицаИзменений);
			
	КонецЕсли;
	
	Если ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипПроцессИсполнения() 
		Или ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипПроцессИсполненияЗаголовки() Тогда
		
		ИзмененияВсеОстальноеПоТаблицамЗаголовковПроцессовИсполнения(
			ПараметрыСинхронизации, СтруктураРезультатовЗапросов, ТаблицаИзменений);
			
	КонецЕсли;
	
	Если ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипПроцессРВВЗ() 
		Или ИмяТаблицыИзменений = МП_СлужебныйПовтИсп.ТипПроцессРВВЗЗаголовки() Тогда
		
		ИзмененияВсеОстальноеПоТаблицамЗаголовковПроцессовВопросов(
			ПараметрыСинхронизации, СтруктураРезультатовЗапросов, ТаблицаИзменений);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияВсеОстальноеПоТаблицамЗаголовковПочта(ТаблицаИзменений, СтруктураРезультатовЗапросов,
	ПараметрыСинхронизации) Экспорт
	
	Если ТипЗнч(ТаблицаИзменений) = Тип("РезультатЗапроса") Тогда
		Если ТаблицаИзменений.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаИзменений = ТаблицаИзменений.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененияПочта.Ссылка КАК Ссылка,
		|	ИзмененияПочта.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ Почта
		|ИЗ
		|	&ТаблицаИзмененийПочта КАК ИзмененияПочта
		|ГДЕ
		|	НЕ ИзмененияПочта.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛОЖЬ КАК ТолькоЗаголовок,
		|	ПисьмаКВыгрузке.Ссылка КАК Ссылка,
		|	ИсходящееПисьмо.ТекстХранилище КАК ТекстХранилище,
		|	ЛОЖЬ КАК Входящее,
		|	NULL КАК Отправитель,
		|	ПисьмаКВыгрузке.ПометкаУдаления КАК ПометкаУдаления,
		|	ИсходящееПисьмо.ТекстПисьмаHTMLХранилище КАК ТекстHTMLХранилище,
		|	ИсходящееПисьмо.ТипТекста КАК ТипТекста,
		|	ИсходящееПисьмо.Дата КАК Дата,
		|	ИсходящееПисьмо.Тема КАК Тема
		|ИЗ
		|	Почта КАК ПисьмаКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|		ПО ПисьмаКВыгрузке.Ссылка = ИсходящееПисьмо.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ПисьмаКВыгрузке.Ссылка,
		|	ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище,
		|	ИСТИНА,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВходящееПисьмо.ОтправительАдресат),
		|	ПисьмаКВыгрузке.ПометкаУдаления,
		|	ВходящееПисьмо.ТекстПисьмаHTMLХранилище,
		|	ВходящееПисьмо.ТипТекста,
		|	ВходящееПисьмо.Дата,
		|	ВходящееПисьмо.Тема
		|ИЗ
		|	Почта КАК ПисьмаКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|		ПО ПисьмаКВыгрузке.Ссылка = ВходящееПисьмо.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаИзмененийПочта", ТаблицаИзменений);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	ЗаполнитьСпецифическиеКолонкиПисьма(ТаблицаВыгрузки);
	
	СтруктураРезультатовЗапросов.Вставить(МП_СлужебныйПовтИсп.ТипПисьмоСодержимое(), ТаблицаВыгрузки);
	
	ОтобратьВложенияПочты(
		СтруктураРезультатовЗапросов, ПараметрыСинхронизации, Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИзмененияВсеОстальноеПоТаблицамЗаголовковЗадач(ПараметрыСинхронизации, 
	СтруктураРезультатовЗапросов,
	ТаблицаИзменений = Неопределено,
	МенеджерВТ = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ?(МенеджерВТ = Неопределено, Новый МенеджерВременныхТаблиц, МенеджерВТ);
	
	Если МенеджерВТ = Неопределено Тогда
		
		Если ТипЗнч(ТаблицаИзменений) = Тип("РезультатЗапроса") Тогда
			Если ТаблицаИзменений.Пустой() Тогда
				Возврат;
			КонецЕсли; 
			
			ТаблицаИзменений = ТаблицаИзменений.Выгрузить();
		КонецЕсли; 
		
		Если ТаблицаИзменений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Ссылка КАК Ссылка,
		|	ТаблицаИзменений.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ИзмененияЗадач
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений";
		
		ТекстЗапроса = ТекстЗапроса + МП_Служебный.РазделительПакетногоЗапроса();
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Наименование КАК Наименование,
		|	ЗадачаИсполнителя.Предметы.(
		|		Предмет КАК Предмет,
		|		Представление(ИмяПредмета) КАК ИмяПредмета,
		|		РольПредмета КАК РольПредмета,
		|		ВЫБОР
		|			КОГДА ЗадачаИсполнителя.Предметы.Предмет ССЫЛКА Справочник.Файлы
		|				ТОГДА ""File""
		|			ИНАЧЕ ""ActionTarget""
		|		КОНЕЦ КАК ТипПредмета) КАК Предметы,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЛОЖЬ КАК ТолькоЗаголовок,
		|	ИзмененияЗадач.Ссылка КАК Ссылка,
		|	"""" КАК ОписаниеКраткое,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК КомментарийИсполнителя,
		|	ЗадачаИсполнителя.Описание КАК Описание,
		|	ЗадачаИсполнителя.БизнесПроцесс
		|ИЗ
		|	ИзмененияЗадач КАК ИзмененияЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ИзмененияЗадач.Ссылка = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	НЕ ИзмененияЗадач.ПометкаУдаления";
		
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗадачи = Запрос.Выполнить();
	
	Если РезультатЗадачи.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаКВыгрузке = РезультатЗадачи.Выгрузить();
	
	ТаблицаКВыгрузке.Колонки.Добавить("ВариантыВыполнения");
	
	ТаблицаКВыгрузке.Колонки.Добавить("ОписаниеПолное");
	
	Для каждого СтрокаИзменений Из ТаблицаКВыгрузке Цикл
		
		СтрокаИзменений.ОписаниеКраткое =
			ОбменСМобильнымиПочтаСервер.ПолучитьКраткийТекст(СтрокаИзменений.Описание, 500);
		
		СтрокаИзменений.ОписаниеПолное =
			ОбменСМобильнымиСервер.ПолучитьHTMLПредставлениеФормыЗадачи(СтрокаИзменений.Ссылка);
		
		БП = СтрокаИзменений.БизнесПроцесс;
		Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
			ВидВопроса = БП.ВидВопроса;
		КонецЕсли;
		
		СтрокаИзменений.ВариантыВыполнения = ЗаполнитьВариантыВыполненияЗадачиПоТочкеМаршрута(СтрокаИзменений.Ссылка,
			СтрокаИзменений.ТочкаМаршрута,
			ВидВопроса);
			
	КонецЦикла;
	
	СтруктураРезультатовЗапросов.Вставить(МП_СлужебныйПовтИсп.ТипЗадачаСодержимое(), ТаблицаКВыгрузке);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Ссылка
		|ИЗ
		|	ИзмененияЗадач КАК ИзмененияЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ИзмененияЗадач.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	НЕ ИзмененияЗадач.ПометкаУдаления
		|	И ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Файлы";
	РезультатПредметыФайлы = Запрос.Выполнить();
	
	Если Не РезультатПредметыФайлы.Пустой() Тогда
		ОтобратьФайлы(СтруктураРезультатовЗапросов, РезультатПредметыФайлы.Выгрузить(), ПараметрыСинхронизации);
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Ссылка,
		|	Представление(ЗадачаИсполнителяПредметы.ИмяПредмета) КАК ИмяПредмета
		|ИЗ
		|	ИзмененияЗадач КАК ИзмененияЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ИзмененияЗадач.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	НЕ ИзмененияЗадач.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Файлы";
	
	РезультатПредметы = Запрос.Выполнить();
	
	Если Не РезультатПредметы.Пустой() Тогда
		ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, РезультатПредметы.Выгрузить());
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИзмененияВсеОстальноеПоТаблицамЗаголовковПроцессовИсполнения(ПараметрыСинхронизации,
	СтруктураРезультатовЗапросов, ТаблицаИзменений = Неопределено, МенеджерВТ = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ?(МенеджерВТ = Неопределено, Новый МенеджерВременныхТаблиц, МенеджерВТ);
	
	Если МенеджерВТ = Неопределено Тогда
		
		Если ТипЗнч(ТаблицаИзменений) = Тип("РезультатЗапроса") Тогда
			Если ТаблицаИзменений.Пустой() Тогда
				Возврат;
			КонецЕсли; 
			
			ТаблицаИзменений = ТаблицаИзменений.Выгрузить();
		КонецЕсли; 
		
		Если ТаблицаИзменений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Ссылка КАК Ссылка,
		|	ТаблицаИзменений.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ИзмененияПроцессовИсполнения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений";
		
		ТекстЗапроса = ТекстЗапроса + МП_Служебный.РазделительПакетногоЗапроса();
		
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК ТолькоЗаголовок,
		|	Исполнение.Исполнители.(
		|		ИдентификаторИсполнителя КАК ИдентификаторИсполнителя,
		|		ВЫБОР
		|			КОГДА Исполнение.Исполнители.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|				ТОГДА Исполнение.Исполнители.Исполнитель.Владелец
		|			ИНАЧЕ Исполнение.Исполнители.Исполнитель
		|		КОНЕЦ КАК Исполнитель,
		|		ПРЕДСТАВЛЕНИЕССЫЛКИ(Исполнение.Исполнители.Исполнитель) КАК ИсполнительСтрокой,
		|		ВЫБОР
		|			КОГДА Исполнение.Исполнители.Исполнитель ССЫЛКА Справочник.Пользователи
		|				ТОГДА ""User""
		|			ИНАЧЕ ""Role""
		|		КОНЕЦ КАК ТипИсполнителя
		|	) КАК Исполнители,
		|	ИзмененияПроцессовИсполнения.Ссылка КАК Ссылка,
		|	Исполнение.Предметы.(
		|		Предмет КАК Предмет,
		|		ВЫБОР
		|			КОГДА Исполнение.Предметы.Предмет ССЫЛКА Справочник.Файлы
		|				ТОГДА ""File""
		|			ИНАЧЕ ""ActionTarget""
		|		КОНЕЦ КАК ТипПредмета,
		|		Представление(ИмяПредмета) КАК ИмяПредмета,
		|		РольПредмета КАК РольПредмета
		|	) КАК Предметы
		|ИЗ
		|	ИзмененияПроцессовИсполнения КАК ИзмененияПроцессовИсполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение КАК Исполнение
		|		ПО ИзмененияПроцессовИсполнения.Ссылка = Исполнение.Ссылка
		|ГДЕ
		|	НЕ ИзмененияПроцессовИсполнения.ПометкаУдаления";
		
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыПроцессы = Запрос.Выполнить();
	
	Если РезультатыПроцессы.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаКВыгрузке = РезультатыПроцессы.Выгрузить();
	
	СтруктураРезультатовЗапросов.Вставить(МП_СлужебныйПовтИсп.ТипПроцессИсполненияСодержимое(), ТаблицаКВыгрузке);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнениеПредметы.Предмет КАК Ссылка
		|ИЗ
		|	ИзмененияПроцессовИсполнения КАК ИзмененияПроцессовИсполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
		|		ПО ИзмененияПроцессовИсполнения.Ссылка = ИсполнениеПредметы.Ссылка
		|ГДЕ
		|	НЕ ИзмененияПроцессовИсполнения.ПометкаУдаления
		|	И ИсполнениеПредметы.Предмет ССЫЛКА Справочник.Файлы";
		
	РезультатПредметыФайлы = Запрос.Выполнить();
	Если Не РезультатПредметыФайлы.Пустой() Тогда
		ОтобратьФайлы(СтруктураРезультатовЗапросов, РезультатПредметыФайлы.Выгрузить(), ПараметрыСинхронизации);
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнениеПредметы.Предмет КАК Ссылка,
		|	Представление(ИсполнениеПредметы.ИмяПредмета) Как ИмяПредмета
		|ИЗ
		|	ИзмененияПроцессовИсполнения КАК ИзмененияПроцессовИсполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
		|		ПО ИзмененияПроцессовИсполнения.Ссылка = ИсполнениеПредметы.Ссылка
		|ГДЕ
		|	НЕ ИзмененияПроцессовИсполнения.ПометкаУдаления
		|	И НЕ ИсполнениеПредметы.Предмет ССЫЛКА Справочник.Файлы";
	РезультатПредметы = Запрос.Выполнить();

	Если Не РезультатПредметы.Пустой() Тогда
		ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, РезультатПредметы.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияВсеОстальноеПоТаблицамЗаголовковПроцессовВопросов(ПараметрыСинхронизации,
	СтруктураРезультатовЗапросов, ТаблицаИзменений = Неопределено, МенеджерВТ = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ?(МенеджерВТ = Неопределено, Новый МенеджерВременныхТаблиц, МенеджерВТ);
	
	Если МенеджерВТ = Неопределено Тогда
		
		Если ТипЗнч(ТаблицаИзменений) = Тип("РезультатЗапроса") Тогда
			Если ТаблицаИзменений.Пустой() Тогда
				Возврат;
			КонецЕсли; 
			
			ТаблицаИзменений = ТаблицаИзменений.Выгрузить();
		КонецЕсли; 
		
		Если ТаблицаИзменений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Ссылка КАК Ссылка,
		|	ТаблицаИзменений.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ИзмененияПроцессовВопросы
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений";
		
		ТекстЗапроса = ТекстЗапроса + МП_Служебный.РазделительПакетногоЗапроса();
		
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК ТолькоЗаголовок,
		|	ИзмененияПроцессовВопросы.Ссылка КАК Ссылка,
		|	РешениеВопросовВыполненияЗадач.Предметы.(
		|		Предмет КАК Предмет,
		|		ВЫБОР
		|			КОГДА РешениеВопросовВыполненияЗадач.Предметы.Предмет ССЫЛКА Справочник.Файлы
		|				ТОГДА ""File""
		|			ИНАЧЕ ""ActionTarget""
		|		КОНЕЦ КАК ТипПредмета,
		|		Представление(ИмяПредмета) КАК ИмяПредмета,
		|		РольПредмета КАК РольПредмета
		|	) КАК Предметы
		|ИЗ
		|	ИзмененияПроцессовВопросы КАК ИзмененияПроцессовВопросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|		ПО ИзмененияПроцессовВопросы.Ссылка = РешениеВопросовВыполненияЗадач.Ссылка
		|ГДЕ
		|	НЕ ИзмененияПроцессовВопросы.ПометкаУдаления";
		
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыПроцессы = Запрос.Выполнить();
	
	Если РезультатыПроцессы.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаКВыгрузке = РезультатыПроцессы.Выгрузить();
	
	СтруктураРезультатовЗапросов.Вставить(МП_СлужебныйПовтИсп.ТипПроцессРВВЗСодержимое(), ТаблицаКВыгрузке);
	
	Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные
		|	РешениеВопросовВыполненияЗадачПредметы.Предмет КАК Ссылка
		|ИЗ
		|	ИзмененияПроцессовВопросы КАК ИзмененияПроцессовВопросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.РешениеВопросовВыполненияЗадач.Предметы КАК
		|			РешениеВопросовВыполненияЗадачПредметы
		|		ПО ИзмененияПроцессовВопросы.Ссылка = РешениеВопросовВыполненияЗадачПредметы.Ссылка
		|ГДЕ
		|	НЕ ИзмененияПроцессовВопросы.ПометкаУдаления
		|	И РешениеВопросовВыполненияЗадачПредметы.Предмет ССЫЛКА Справочник.Файлы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	ИзмененияПроцессовВопросы КАК ИзмененияПроцессовВопросы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ИзмененияПроцессовВопросы.Ссылка = Файлы.ВладелецФайла
		|ГДЕ
		|	НЕ ИзмененияПроцессовВопросы.ПометкаУдаления";
		
	РезультатПредметыФайлы = Запрос.Выполнить();
	Если Не РезультатПредметыФайлы.Пустой() Тогда
		ОтобратьФайлы(СтруктураРезультатовЗапросов, РезультатПредметыФайлы.Выгрузить(), ПараметрыСинхронизации);
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РешениеВопросовВыполненияЗадачПредметы.Предмет КАК Ссылка,
		|	Представление(РешениеВопросовВыполненияЗадачПредметы.ИмяПредмета) Как ИмяПредмета
		|ИЗ
		|	ИзмененияПроцессовВопросы КАК ИзмененияПроцессовВопросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.РешениеВопросовВыполненияЗадач.Предметы КАК
		|			РешениеВопросовВыполненияЗадачПредметы
		|		ПО ИзмененияПроцессовВопросы.Ссылка = РешениеВопросовВыполненияЗадачПредметы.Ссылка
		|ГДЕ
		|	НЕ ИзмененияПроцессовВопросы.ПометкаУдаления
		|	И НЕ РешениеВопросовВыполненияЗадачПредметы.Предмет ССЫЛКА Справочник.Файлы";
	РезультатПредметы = Запрос.Выполнить();

	Если Не РезультатПредметы.Пустой() Тогда
		ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов,ПараметрыСинхронизации, РезультатПредметы.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияНастроекВложения(СтруктураРезультатовЗапроса, ПараметрыСинхронизации)
	
	ПредыдущаяГраницаСборки = ПараметрыСинхронизации.ПредыдущаяГраницаСборки;
	ТекущийПользователь = ПараметрыСинхронизации.ТекущийПользователь;
	
	//Изменение максимального размера вложения - общая настройка
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтметкиВремениСсылочныхОбъектов.Ключ КАК Ссылка
		|ИЗ
		|	РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки
		|	И ОтметкиВремениСсылочныхОбъектов.Ключ = ЗНАЧЕНИЕ(
		|		Перечисление.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерВложения)";
	Запрос.УстановитьПараметр("ПредыдущаяГраницаСборки", ПредыдущаяГраницаСборки);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипНастройкиСинхронизации = МП_СлужебныйПовтИсп.ТипНастройкиСинхронизации();
		
		МП_Изменения.ИнициализироватьТаблицуПоТипу(
			СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
		
		СтрокаНастроек = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
		
		СтрокаНастроек.ВидНастройки = "МаксимальныйРазмерВложения";
		СтрокаНастроек.Значение = Константы.МаксимальныйРазмерФайла.Получить();
		СтрокаНастроек.НастройкаСтрокой = Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом КАК 
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом
		|ГДЕ
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Пользователь = &Пользователь
		|	И ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Граница > &ПредыдущаяГраницаСборки
		|	И ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Настройка = ЗНАЧЕНИЕ(Перечисление.ОбменСМобильнымиТипыНастроекПользователей.ФорматыПередаваемыхФайлов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Настройка
		|ИЗ
		|	РегистрСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом КАК ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом
		|ГДЕ
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Пользователь = &Пользователь
		|	И ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Граница > &ПредыдущаяГраницаСборки
		|	И ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Настройка = ЗНАЧЕНИЕ(Перечисление.ОбменСМобильнымиТипыНастроекПользователей.ОграничениеФорматовПередаваемыхФайлов)";
	
	Запрос.УстановитьПараметр("ПредыдущаяГраницаСборки", ПредыдущаяГраницаСборки);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипНастройкиСинхронизации = МП_СлужебныйПовтИсп.ТипНастройкиСинхронизации();
		
		МП_Изменения.ИнициализироватьТаблицуПоТипу(
			СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			
		СтрокаНастроек = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
		
		СтрокаНастроек.ВидНастройки = "ФорматыПередаваемыхФайлов";
		СтрокаНастроек.НастройкаСтрокой = Истина;
		СтрокаНастроек.Значение = ?(ПараметрыСинхронизации.ОграничениеФорматовПередаваемыхФайлов,
			ПараметрыСинхронизации.ФорматыПередаваемыхФайлов, "");
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияНастроекСинхронизации(СтруктураРезультатовЗапроса, ПараметрыСинхронизации)
	
	ПредыдущаяГраницаСборки = ПараметрыСинхронизации.ПредыдущаяГраницаСборки;
	ТекущийПользователь = ПараметрыСинхронизации.ТекущийПользователь;
	
	Настройки = Новый Массив;
	Настройки.Добавить(Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.МаксимальныйРазмерФайла);
	Настройки.Добавить(Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем);
	Настройки.Добавить(Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СрокУстареванияДанных);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияСамочувствий);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияОтсутствий);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияМероприятий);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияУчетаВремени);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПроектПоУмолчанию);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СпособУказанияВремени);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ВидРаботПоУмолчанию);
	Настройки.Добавить(Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияАдреснойКниги);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом КАК ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом
		|ГДЕ
		|	ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Пользователь = &Пользователь
		|	И ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Настройка В(&Настройки)
		|	И ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.Граница > &ПредыдущаяГраницаСборки";
	
	Запрос.УстановитьПараметр("Настройки", Настройки);
	Запрос.УстановитьПараметр("ПредыдущаяГраницаСборки", ПредыдущаяГраницаСборки);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НастройкиТаблица = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаНастройки Из НастройкиТаблица Цикл
		ТипНастройкиСинхронизации = МП_СлужебныйПовтИсп.ТипНастройкиСинхронизации();
		
		Если СтрокаНастройки.Настройка = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.МаксимальныйРазмерФайла Тогда
			
			ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			
			НоваяСтрока = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
			НоваяСтрока.Значение = ПараметрыСинхронизации.МаксимальныйРазмерФайлов;
			НоваяСтрока.ВидНастройки = СтрокаНастройки.Настройка;
			
		КонецЕсли;
		
		Если СтрокаНастройки.Настройка = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СрокУстареванияДанных Тогда

			ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			
			НоваяСтрока = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
			НоваяСтрока.Значение = ПараметрыСинхронизации.СрокУстареванияДанных;
			НоваяСтрока.ВидНастройки = СтрокаНастройки.Настройка;
			
		КонецЕсли;
		
		Если СтрокаНастройки.Настройка = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем Тогда
			
			ТипШаблоныТекстов = МП_СлужебныйПовтИсп.ТипШаблонТекста();
			
			ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапроса, ТипШаблоныТекстов);
			
			ПустойШаблон = Справочники.ШаблоныТекстов.ПустаяСсылка();
			
			ПодписьПриОтветеИПересылке = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
			
			НоваяСтрока = СтруктураРезультатовЗапроса[ТипШаблоныТекстов].Добавить();
			
			Если ЗначениеЗаполнено(ПодписьПриОтветеИПересылке) Тогда
				НоваяСтрока.Ссылка = ПодписьПриОтветеИПересылке;
			Иначе
				НоваяСтрока.Ссылка = ПустойШаблон;
			КонецЕсли;
			
			РеквизитыШаблонаПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				НоваяСтрока.Ссылка, "Наименование, Шаблон");
				
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыШаблонаПисьма);
			
			НоваяСтрока.ПодписьПриОтветеИПересылке = Истина;
			
			НоваяСтрока.ПодписьДляНовыхПисем = Ложь;
			
			НоваяСтрока = СтруктураРезультатовЗапроса[ТипШаблоныТекстов].Добавить();
			
			ПодписьДляНовыхПисем = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьДляНовыхПисем");
			
			Если ЗначениеЗаполнено(ПодписьДляНовыхПисем) Тогда
				НоваяСтрока.Ссылка = ПодписьДляНовыхПисем;
			Иначе
				НоваяСтрока.Ссылка = ПустойШаблон;
			КонецЕсли;
			
			РеквизитыШаблонаПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				НоваяСтрока.Ссылка, "Наименование, Шаблон");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыШаблонаПисьма);
			НоваяСтрока.ПодписьДляНовыхПисем = Истина;
			НоваяСтрока.ПодписьПриОтветеИПересылке = Ложь;
			
		КонецЕсли;
		
		Если СтрокаНастройки.Настройка = Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПроектПоУмолчанию Тогда
			МП_Изменения.ИнициализироватьТаблицуПоТипу(
				СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			
			СтрокаНастроек = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
			СтрокаНастроек.ВидНастройки = "ПроектПоУмолчанию";
			
			ПроектПоУмолчанию = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСПроектами", "ПроектПоУмолчанию");
			Если ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
				СтрокаНастроек.Значение = XMLСтрока(ПроектПоУмолчанию);
			КонецЕсли;
			
			СтрокаНастроек.НастройкаСтрокой = Истина;
		КонецЕсли;
		
		Если СтрокаНастройки.Настройка = Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СпособУказанияВремени Тогда
			МП_Изменения.ИнициализироватьТаблицуПоТипу(
				СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			СтрокаНастроек = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
			СтрокаНастроек.ВидНастройки = "СпособУказанияВремени";
			СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
			СтрокаНастроек.Значение = ОбщегоНазначения.ИмяЗначенияПеречисления(СпособУказанияВремени);
			СтрокаНастроек.НастройкаСтрокой = Истина;
		КонецЕсли;
		
		Если СтрокаНастройки.Настройка = Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ВидРаботПоУмолчанию Тогда
			МП_Изменения.ИнициализироватьТаблицуПоТипу(
				СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			ВидРаботПоУмолчанию = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВидРабот");
			СтрокаНастроек = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
			СтрокаНастроек.ВидНастройки = "ВидРаботПоУмолчанию";
			СтрокаНастроек.Значение = XMLСтрока(ВидРаботПоУмолчанию);
			СтрокаНастроек.НастройкаСтрокой = Истина;
		КонецЕсли;
		
		Если СтрНайти(Строка(СтрокаНастройки.Настройка), "Синхронизация") > 0 Тогда
			ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапроса, ТипНастройкиСинхронизации);
			ИмяНастройки = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаНастройки.Настройка);
			НоваяСтрока = СтруктураРезультатовЗапроса[ТипНастройкиСинхронизации].Добавить();
			НоваяСтрока.Значение = ПараметрыСинхронизации[ИмяНастройки];
			НоваяСтрока.ВидНастройки = ИмяНастройки;
			НоваяСтрока.НастройкаСтрокой = Истина;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработкаВложений

Процедура ДобавитьПредметыКВыгрузке(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, ПредметыТаблица) Экспорт
	
	ТипПредметаПроцесса = МП_СлужебныйПовтИсп.ТипПредметПроцесса();
	
	ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапросов, ТипПредметаПроцесса);
	
	ЕстьИмяПредмета = ПредметыТаблица.Колонки.Найти("ИмяПредмета") <> Неопределено;
	
	Для каждого СтрокаПредмета Из ПредметыТаблица Цикл
		
		Предмет = СтрокаПредмета.Ссылка;
		
		НовСтрока = СтруктураРезультатовЗапросов[ТипПредметаПроцесса].Добавить();
		
		НовСтрока.Ссылка = Предмет;
		
		ТипПредмета = ТипЗнч(Предмет);
		
		ПредставлениеДокумент = ОбменСМобильнымиСервер.ПолучитьСодержаниеПредмета(Предмет);
			
		Если ТипЗнч(ПредставлениеДокумент) = Тип("ТабличныйДокумент") Тогда
			
			ФорматВложения = "html";
			ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложения);
			ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
			
		ИначеЕсли ТипЗнч(ПредставлениеДокумент) = Тип("ФорматированныйДокумент") Тогда
			
			ФорматВложения = "txt";
			ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложения);
			ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаФорматированногоДокумента.TXT);
			
		Иначе
			
			СтрокаДляЗаписи = СтрШаблон(НСтр("ru = 'Данные данного типа (%1) не поддерживаются на мобильном клиенте'"), 
				ТипПредмета);
			ФорматВложения = "txt";
			ИмяФайла = ПолучитьИмяВременногоФайла(ФорматВложения);
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
			ЗаписьТекста.ЗаписатьСтроку(СтрокаДляЗаписи);
			ЗаписьТекста.Закрыть();
			
		КонецЕсли;
		
		ДанныеВложения = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла), Новый СжатиеДанных(9));
		
		НовСтрока.Детали = ДанныеВложения;
		НовСтрока.ТипФайлаСДеталями = ФорматВложения;
		НовСтрока.Наименование = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(Предмет,
			?(ЕстьИмяПредмета, СтрокаПредмета.ИмяПредмета, Неопределено));
				
		УдалитьФайлы(ИмяФайла);
		
	КонецЦикла;
	
	ОтобратьФайлыПредметов(СтруктураРезультатовЗапросов, ПредметыТаблица, ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ОтобратьФайлы(СтруктураРезультатовЗапросов, ТаблицаСФайлами, ПараметрыСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСФайлами.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТФайлы
	|ИЗ
	|	&ТаблицаСФайлами КАК ТаблицаСФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
	|	Файлы.ТекущаяВерсияРазмер КАК Размер,
	|	Файлы.ТекущаяВерсияРасширение КАК Тип,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ВТФайлы КАК ВТФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ВТФайлы.Ссылка = Файлы.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаСФайлами", ТаблицаСФайлами);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДобавитьФайлыКВыгрузке(СтруктураРезультатовЗапросов, Результат.Выгрузить(), ПараметрыСинхронизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобратьФайлыПредметов(СтруктураРезультатовЗапросов, ПредметыТаблица, ПараметрыСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредметыТаблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПредметы
		|ИЗ
		|	&ПредметыТаблица КАК ПредметыТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ТекущаяВерсияРасширение КАК Тип,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ВТПредметы КАК ВТПредметы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВТПредметы.Ссылка = Файлы.ВладелецФайла";
	
	Запрос.УстановитьПараметр("ПредметыТаблица", ПредметыТаблица);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ДобавитьФайлыКВыгрузке(
			СтруктураРезультатовЗапросов,
			Результат.Выгрузить(),
			ПараметрыСинхронизации,
			МП_СлужебныйПовтИсп.ТипПредметПроцесса());

	КонецЕсли; 
		
КонецПроцедуры

Процедура ДобавитьФайлыКВыгрузке(СтруктураРезультатовЗапросов, ТаблицаРезультат, 
	ПараметрыСинхронизации, ТипПринудительно = Неопределено)
	
	ТипФайл = МП_СлужебныйПовтИсп.ТипФайл();
	
	ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапросов, ТипФайл);
	
	Для каждого Строка Из ТаблицаРезультат Цикл
		
		НоваяСтрока = СтруктураРезультатовЗапросов[ТипФайл].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		ДанныеФайла = ДанныеФайлаПоОграничению(Строка.Ссылка, Строка.ВладелецФайла, 
			ПараметрыСинхронизации, Строка.ТекущаяВерсия);
		
		Если ДанныеФайла = Неопределено Тогда
			НоваяСтрока.ТолькоЗаголовок = Истина;
		Иначе
			НоваяСтрока.ТолькоЗаголовок = Ложь;
			НоваяСтрока.Данные = ДанныеФайла;
		КонецЕсли;
		
		Если ТипПринудительно <> Неопределено Тогда
			НоваяСтрока.ТипВладельца = ТипПринудительно;
		Иначе
			НоваяСтрока.ТипВладельца = МП_СлужебныйПовтИсп.ТипПоСсылке(НоваяСтрока.ВладелецФайла);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтобратьВложенияПочты(СтруктураРезультатовЗапросов, ПараметрыСинхронизации, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПредыдущаяГраницаСборки", ПараметрыСинхронизации.ПредыдущаяГраницаСборки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ТекущаяВерсияРасширение КАК Тип,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ВТФайлы
		|ИЗ
		|	Почта КАК ТаблицаВладельцыФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ТаблицаВладельцыФайлов.Ссылка = Файлы.ВладелецФайла
		|ГДЕ
		|	НЕ ТаблицаВладельцыФайлов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТФайлы.Ссылка КАК Ссылка,
		|	ВТФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ВТФайлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ВТФайлы.Размер КАК Размер,
		|	ВТФайлы.Тип КАК Тип,
		|	ВТФайлы.Наименование КАК Наименование,
		|	ВТФайлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ИдентификаторыПочтовыхВложений.Идентификатор КАК ИдентификаторПочтовогоВложения
		|ПОМЕСТИТЬ ВТФайлыСВложениями
		|ИЗ
		|	ВТФайлы КАК ВТФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ПО ВТФайлы.Ссылка = ИдентификаторыПочтовыхВложений.Файл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТФайлыСВложениями.Ссылка КАК Ссылка,
		|	ВТФайлыСВложениями.ВладелецФайла КАК ВладелецФайла,
		|	ВТФайлыСВложениями.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ВТФайлыСВложениями.Размер КАК Размер,
		|	ВТФайлыСВложениями.Тип КАК Тип,
		|	ВТФайлыСВложениями.Наименование КАК Наименование,
		|	ВТФайлыСВложениями.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТФайлыСВложениями.ИдентификаторПочтовогоВложения КАК ИдентификаторПочтовогоВложения
		|ИЗ
		|	ВТФайлыСВложениями КАК ВТФайлыСВложениями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов
		|		ПО ВТФайлыСВложениями.Ссылка = ОтметкиВремениСсылочныхОбъектов.Ключ
		|ГДЕ
		|	ОтметкиВремениСсылочныхОбъектов.Граница > &ПредыдущаяГраницаСборки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДобавитьФайлыКВыгрузке(СтруктураРезультатовЗапросов, Результат.Выгрузить(), ПараметрыСинхронизации);
	КонецЕсли;

КонецПроцедуры

Функция ДанныеФайлаПоОграничению(Файл, ВладелецФайла, ПараметрыСинхронизации, ТекущаяВерсия) Экспорт
	
	ЕстьОграничениеПоВладельцу = Ложь;
	
	Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		ЕстьОграничениеПоВладельцу = Истина;
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.ОграничениеФорматовПередаваемыхФайлов Тогда
		
		ЕстьОграничениеПоРасширению = Не ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(
			ПараметрыСинхронизации.ФорматыПередаваемыхФайлов, ТекущаяВерсия.Расширение);
			
	Иначе
		ЕстьОграничениеПоРасширению = Ложь;
	КонецЕсли;
	
	Если ЕстьОграничениеПоВладельцу Или ЕстьОграничениеПоРасширению Тогда
		
		ТолькоЗаголовок = Истина;
		
	Иначе
		
		МаксимальныйРазмерФайлов = ПараметрыСинхронизации.МаксимальныйРазмерФайлов;
		
		ТолькоЗаголовок = МаксимальныйРазмерФайлов > 0 И ТекущаяВерсия.Размер > МаксимальныйРазмерФайлов * 1024;
		
	КонецЕсли;
	
	Если ТолькоЗаголовок Тогда
		
		ДанныеФайла = Неопределено;
		
	Иначе
		
		Попытка
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ТекущаяВерсия);
			
		Исключение
			
			ДанныеФайла = Неопределено;
			
			ТолькоЗаголовок = Истина;
			
			ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				СтрШаблон("%1.%2", ТекущаяВерсия.ПолноеНаименование, ТекущаяВерсия.Расширение));
			
			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(ТекстПредупреждения, 
				Ложь, ПараметрыСинхронизации.МобильноеПриложение);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ДанныеФайла = Неопределено Тогда
		ДанныеФайла = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Возврат ДанныеФайла;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьТаблицуПоТипу(СтруктураРезультатовЗапросов, Тип) Экспорт
	
	Если СтруктураРезультатовЗапросов.Свойство(Тип) Тогда
		//Таблица уже есть
		Возврат;
	КонецЕсли;
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяСтруктура = МП_ФормированиеИсходящегоСообщения.ПустаяСтруктураПоТипу(Тип);
	
	Для каждого КлючИЗначение Из ПустаяСтруктура Цикл
		ПустаяТаблица.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	СтруктураРезультатовЗапросов.Вставить(Тип, ПустаяТаблица);
	
КонецПроцедуры

Процедура ДобавитьВариантИсполнения(ТаблицаВариантов, Результат,
	ПредставлениеДляБольшогоЭкрана, ПредставлениеДляМаленькогоЭкрана, Оценка)

	НоваяСтрока = ТаблицаВариантов.Добавить();
	НоваяСтрока.Результат = Результат;
	НоваяСтрока.ПредставлениеДляБольшогоЭкрана = ПредставлениеДляБольшогоЭкрана;
	НоваяСтрока.ПредставлениеДляМаленькогоЭкрана = ПредставлениеДляМаленькогоЭкрана;
	НоваяСтрока.ОценкаРезультата = Оценка;
	
КонецПроцедуры

#КонецОбласти