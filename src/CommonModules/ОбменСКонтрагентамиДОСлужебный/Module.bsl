
#Область ПодпискиНаСобытия

// Подписка на событие. Синхронизирует состояния в РС СостоянияВерсийЭД и СостоянияЭДОДокументооборот
//
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.СостоянияВерсийЭД - Набор, из которого необходимо получить
//	 сведения о состоянии.
//	Отказ - Булево - Признак отказа от записи.
//	
//
Процедура СинхронизироватьСостоянияЭДДляДО(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляСинхронизации = ДанныеДляСинхронизацииСостояния(Источник);
	
	Для Каждого ДанныеСостояния Из ДанныеДляСинхронизации Цикл
		
		Если ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
			ИЛИ ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора
			ИЛИ ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.Отправлен,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
			ИЛИ (ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
				И ДанныеСостояния.Направление <> Перечисления.НаправленияЭДО.Исходящий) Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.НаПодписи,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
			И Не ДанныеСостояния.ТребуетсяПодтверждение Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.ОбменЗавершен,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
			И ДанныеСостояния.СостояниеЗаписанное <> Перечисления.СостоянияЭДОДокументооборот.ОбменЗавершен
			И ДанныеСостояния.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.НаПодписи,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
			И ДанныеСостояния.СостояниеЗаписанное <> Перечисления.СостоянияЭДОДокументооборот.ОбменЗавершен
			И ДанныеСостояния.ТребуетсяПодтверждение
			И ДанныеСостояния.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.НаПодписи,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяИсправление,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
			И ДанныеСостояния.СостояниеЗаписанное = Перечисления.СостоянияЭДОДокументооборот.НаПодписи Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.Подписан,
				ДанныеСостояния.Направление);
			
		Иначе
			
			ИндексЗначения = Перечисления.СостоянияДокументовЭДО.Индекс(ДанныеСостояния.СостояниеЭДО);
			СостояниеЭД = Метаданные.Перечисления.СостоянияДокументовЭДО.ЗначенияПеречисления[ИндексЗначения].Имя;
				
			Если Не Метаданные.Перечисления.СостоянияЭДОДокументооборот.ЗначенияПеречисления.Найти(СостояниеЭД) = Неопределено Тогда
				
				РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
					ДанныеСостояния.ДокументДО, 
					ДанныеСостояния.Контрагент, 
					Перечисления.СостоянияЭДОДокументооборот[СостояниеЭД], 
					ДанныеСостояния.Направление);
					
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Записывает начальное состояние документа по ЭДО
// 
// Параметры:
// 	ДокументДО - СправочникСсылка.ВнутренниеДокументы - Документ для которого необходимо установить начальное состояние
Процедура ЗаписатьНачальноеСостояниеЭДОДокументаДО(ДокументДО) Экспорт
 	
	Если Не ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЗаписанное = СостояниеДокумента(ДокументДО);
	
	ПараметрыДокументаПоЭДО = ПараметрыДокументаПоЭДО(ДокументДО);
	
	Если ПараметрыДокументаПоЭДО = Неопределено Тогда
		
		// Если не сформирован ЭД и он не может быть отправлен, но есть записанное состояние по ЭДО -- значит документ
		//  поменяли таким образом, что он больше не может быть отправлен по ЭДО
		Если СостояниеЗаписанное.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
			УстановитьСостояниеДокументаЭДО(
				ДокументДО,
				СостояниеЗаписанное.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка(),
				Перечисления.НаправленияЭДО.Исходящий,
				НСтр("ru = 'Удалено состояние ЭДО, поскольку нет правил отправки.'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДокументаПоЭДО.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеЗаписанное.Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументДО, "Контрагент");
	
	УстановитьСостояниеДокументаЭДО(
		ДокументДО,
		Контрагент,
		Перечисления.СостоянияЭДОДокументооборот.НеСформирован,
		Перечисления.НаправленияЭДО.Исходящий,
		НСтр("ru = 'Установка состояния при записи документа, поскольку он может быть отправлен по ЭДО.'"));
	
КонецПроцедуры

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника, объект которого надо найти.
//  ИмяРеквизита - Строка - Имя реквизита, по которому будет проведен поиск.
//  ЗначРеквизита - Произвольный - значение реквизита, по которому будет проведен поиск.
//  Результат - СправочникСсылка - Ссылка на найденный объект.
//  Владелец - СправочникСсылка - Ссылка на владельца для поиска в иерархическом справочнике.
//  ТолькоНеПомеченные - Булево - Исключить из поиска помеченные на удаление.
//
Процедура НайтиСсылкуНаОбъектПоРеквизиту(
	ИмяСправочника, 
	ИмяРеквизита, 
	ЗначРеквизита, 
	Результат, 
	Владелец = Неопределено,
	ТолькоНеПомеченные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ИскСправочник
		|ГДЕ
		|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Если ТолькоНеПомеченные Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.ПометкаУдаления = Ложь";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск контактного лица контрагента по данным сертификата ЭП, при отсутствии добавляет новое.
//
Функция НайтиДобавитьКонтактноеЛицоИзСертификата(Контрагент, ДвоичныеДанныеСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеСертификата) Тогда
		Возврат КонтактноеЛицо;
	КонецЕсли;
	
	Субъект = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(
		Новый СертификатКриптографии(ДвоичныеДанныеСертификата));
		
	Если Не Субъект.Свойство("ОбщееИмя") Тогда
		Возврат КонтактноеЛицо;		
	КонецЕсли;
	
	ФИОКонтактногоЛица = Новый Массив;
	Если ЗначениеЗаполнено(Субъект.Фамилия) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Фамилия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Субъект.Имя) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Имя);
		
		Если ЗначениеЗаполнено(Субъект.Отчество) Тогда
			ФИОКонтактногоЛица.Добавить(Субъект.Отчество);
		КонецЕсли;	
	КонецЕсли;
	Если Не ФИОКонтактногоЛица.Количество() Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.ОбщееИмя);
	КонецЕсли;
	НаименованиеКонтактногоЛица = СтрСоединить(ФИОКонтактногоЛица, " ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И НЕ КонтактныеЛица.ПометкаУдаления
		|	И КонтактныеЛица.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Наименование", НаименованиеКонтактногоЛица);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// Добавляем новое контактное лицо
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Владелец = Контрагент;
		КонтактноеЛицо.Наименование = НаименованиеКонтактногоЛица;
		Субъект.Свойство("Должность", КонтактноеЛицо.Должность);
		КонтактноеЛицо.Комментарий = НСтр("ru = 'Создан при загрузке ЭД.'");
		КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
		КонтактноеЛицо.Записать();
		
		КонтактноеЛицо = КонтактноеЛицо.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо; 
		
	КонецЕсли;
			
	Возврат КонтактноеЛицо;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник                       - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - ТаблицаЗначений - параметры источника, необходимые для определения настроек обмена электронными документами: 
//    * Тип                - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.ТипыДокументов. Используются все ключи, кроме УПД, УКД. Обязательный.
//                           Необходимость формирования УПД, УКД определяется на основании нескольких критериев
//                           (указанный тип, вариант формирования универсальных документов, настройки отправки
//                           электронных документов). 
//    * ФормированиеУниверсальногоДокумента - Произвольный - значение элемента структуры, возвращаемой
//                           см. ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов. Обязательный при указании типов:
//                            - ТоварнаяНакладная
//                            - АктВыполненныхРабот
//                            - АктНаПередачуПрав
//                            - СоглашениеОбИзмененииСтоимости
//                            - СчетФактура
//                            - КорректировочныйСчетФактура
//    * Направление        - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.НаправленияДокументов(). Обязательный.
//    * Организация        - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент         - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Знач Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Источник) 
			И Не (ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") 
					И ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Источник.Ссылка))
			И Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВерсииФайлов") 
					Или ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов")) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаПараметров = ПараметрыЭД.Добавить();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		ЗаполнитьПараметрыЭДПоСсылке(Источник, СтрокаПараметров, ФорматCML);
	Иначе
		ЗаполнитьПараметрыЭДПоОбъекту(Источник, СтрокаПараметров, ФорматCML);
	КонецЕсли;
		
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПолучитьОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ОснованиеОбъект) 
			И Не ТипЗнч(ОснованиеОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ОснованиеОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда 
		ВладелецОбъекта =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеОбъект.Владелец, "ВладелецФайла");
		ОснованиеОбъект = ВладелецОбъекта.ПолучитьОбъект();
	КонецЕсли;
	
	Описание.Вид = СтрШаблон(НСтр("ru = '%1'"), ОснованиеОбъект.ВидДокумента);
	Описание.Контрагент = ОснованиеОбъект.Контрагент;
	Описание.СуммаДокумента = ОснованиеОбъект.Сумма;
	Описание.Дата = 
		?(ЗначениеЗаполнено(ОснованиеОбъект.ДатаРегистрации), ОснованиеОбъект.ДатаРегистрации, ОснованиеОбъект.ДатаСоздания);
	Описание.Номер = 
		?(ЗначениеЗаполнено(ОснованиеОбъект.РегистрационныйНомер), ОснованиеОбъект.РегистрационныйНомер, ОснованиеОбъект.Код);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Описание.Организация = ОснованиеОбъект.Организация;
	Иначе
		Описание.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
		
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ПризнакФизЛица = Истина;
	КонецЕсли;

КонецПроцедуры

// Возвращает, возможно ли корректировка данного вида ЭД непосредственно, т.е. без создания отдельного документа.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокуметовЭДО - Вид документа, для которого необходимо выполнить проверку.
//
Функция ВидДокументаКорректируетсяНепосредственно(ВидДокумента) Экспорт
	
	МассивТиповДокументов = Новый Массив;
	
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ЗаказТовара);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПрайсЛист);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара);
	
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВзаимозачета);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверки);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Ведомость);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Договор);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС11);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС2);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС3);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Отчет);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПриложениеКАкту);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Спецификация);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Уведомление);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Прочее);
	
	ТипДокументаВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	
	Возврат (МассивТиповДокументов.Найти(ТипДокументаВида) <> Неопределено);
	
КонецФункции

// Выполняет необходимые действия после подписания документа.
//
// Параметры:
//	ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - Файл ЭД, который необходимо обработать.
//
Процедура ПослеПодписанияДокументаКонтрагентом(ФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодписанныеДанные = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайлаДокумента,
		|	ВЫРАЗИТЬ(СостоянияЭД.СсылкаНаОбъект КАК Справочник.ВерсииФайлов).Владелец.ВладелецФайла КАК Документ,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.ЭлектронныйДокумент
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &ФайлЭД");
	Запрос.УстановитьПараметр("ФайлЭД", ФайлЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() 
			Или Не ЗначениеЗаполнено(Выборка.ВерсияФайлаДокумента) Или Не ЗначениеЗаполнено(Выборка.Документ) Тогда
			
		Возврат;
	КонецЕсли;
	
	СоответствиеМассивовДО = Новый Соответствие;
	ПодписиДО = ПодготовитьМассивЭПКСравнению(
		ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ВерсияФайлаДокумента), СоответствиеМассивовДО);
	
	СоответствиеМассивовЭД = Новый Соответствие;
	ПодписиЭД = ПодготовитьМассивЭПКСравнению(
		ЭлектроннаяПодпись.УстановленныеПодписи(ФайлЭД), СоответствиеМассивовЭД);

	ПодписиДляДобавления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодписиЭД, ПодписиДО);
	
	Если Не ПодписиДляДобавления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавляемаяПодпись Из ПодписиДляДобавления Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Выборка.ВерсияФайлаДокумента);
		Элемент.Вставить("СвойстваПодписи", СоответствиеМассивовЭД[ДобавляемаяПодпись]);
		Элемент.Вставить("Контрагент", Выборка.Контрагент);
		ПодписанныеДанные.Добавить(Элемент);
	КонецЦикла;
		
	Если ПодписанныеДанные.Количество() Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
		
		Попытка			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнутренниеДокументы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Документ);
			Блокировка.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанные);	
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();			
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				Для Каждого Элемент Из ПодписанныеДанные Цикл
					СтрокаКонтрагента = ДокументОбъект.Стороны.Найти(Элемент.Контрагент, "Сторона");
					Если Не СтрокаКонтрагента = Неопределено Тогда
						ПодписантОтКонтрагента = ОбменСКонтрагентамиДОСлужебный.НайтиДобавитьКонтактноеЛицоИзСертификата(
							Элемент.Контрагент, Элемент.СвойстваПодписи.Сертификат);
						ДатаПодписанияКонтрагентом = Элемент.СвойстваПодписи.ДатаПодписи;				
						
						СтрокаКонтрагента.Подписан = Истина;
						СтрокаКонтрагента.ДатаПодписи = ДатаПодписанияКонтрагентом;
						СтрокаКонтрагента.Подписал = ПодписантОтКонтрагента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);					
			ДокументОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось прикрепить ответные подписи к документу ""%1"" (%2). Причина: %3'"), 
				Выборка.Документ, 
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение ТекстСообщения;				
		КонецПопытки;
	КонецЕсли;
			
КонецПроцедуры

// Возвращает необходимо ли добавить сообщение ЭДО в очередь приема
//
// Параметры:
//  СообщениеЭДО - ДокументОбъект.СообщенияЭДО - Сообщение, по которому необходимо провести проверку
// 
// Возвращаемое значение:
//  Булево - Истина - если необходимо добавить в очередь, Ложь - в противном случае
Функция НеобходимоДобавитьВОчередь(СообщениеЭДО) Экспорт
	
	ТипРегламента = СообщениеЭДО.ТипЭлементаРегламента;
	Статус = СообщениеЭДО.Статус;
	
	Если ТипРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И Статус = Перечисления.СтатусыСообщенийЭДО.Получен Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает массив видов документов для которых доступна отправка по ЭДО
// 
// Возвращаемое значение:
//   Массив из Справочкик.ВидыВнутреннихДокументов - Массив видов документов,
//                                                   для которых доступна отправка по ЭДО
Функция ВидыДокументовДляОтправкиПоЭДО() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыДокументов
		|ГДЕ
		|	НЕ ВидыДокументов.ПометкаУдаления
		|	И ВидыДокументов.ВестиУчетСторон";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	
КонецФункции

// Проверяет, является ли выбранный документ документом аннулирования по ЭДО
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - проверяемый документ ДО.
//  ДанныеАннулирования - Структура из:
//      * Документ - В данное поле запишется аннулируемый документ ДО
//      * ЭД - В данное поле запишется аннулируемый ЭД
//      * ФайлЭДАннулирования - В данное поле запишется файл Предложения Об Аннулировании
//      * НаправлениеЭД - В данное поле запишется направление предложкния об аннулировании
//      * СостояниеЭДО - В данное поле запишется состояние Предложения Об Аннулировании
// 
// Возвращаемое значение:
//  Булево - Является ли переданный документ документом аннулирования ЭДО
// 
Функция ЭтоДокументАннулированияЭДО(Документ, ДанныеАннулирования = Неопределено) Экспорт
	
	// Аннулирование по ЭДО добавим позже
	Возврат Ложь;
	
КонецФункции

#Область ДополнительнаяОбработкаСобытийБЭД

Процедура ЗагрузитьОтветнуюПодписьВФайлДО(СообщениеОбъект, ОтветныеПодписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК ВерсияФайла,
		|	ВерсииФайлов.Владелец КАК Файл
		|ПОМЕСТИТЬ ФайлыДО
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ВерсииФайлов.Ссылка
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДО.ВерсияФайла,
		|	ДокументыДО.Ссылка КАК Документ
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФайлыДО КАК ФайлыДО
		|		ПО Файлы.Ссылка = ФайлыДО.Файл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ДокументыДО
		|		ПО Файлы.ВладелецФайла = ДокументыДО.Ссылка";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписанныеДанные = Новый Массив;
		
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СообщениеОбъект.ЭлектронныйДокумент, "Контрагент");
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ВерсияФайла);
		Для Каждого СвойстваПодписи Из ОтветныеПодписи.ПодписиОсновныхДанных Цикл
			Если ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи) Тогда
				
				СвойстваПодписи.Вставить("УстановившийПодпись", Неопределено);
				СвойстваПодписи.Вставить("ПодписьВерна", Истина);
				
				Элемент = Новый Структура;
				Элемент.Вставить("ПодписанныйОбъект", Выборка.ВерсияФайла);
				Элемент.Вставить("СвойстваПодписи", СвойстваПодписи);
				Элемент.Вставить("Контрагент", Контрагент);
				ПодписанныеДанные.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнутренниеДокументы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Документ);
			Блокировка.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанные);
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				Для Каждого Элемент Из ПодписанныеДанные Цикл
					СтрокаКонтрагента = ДокументОбъект.Стороны.Найти(Элемент.Контрагент, "Сторона");
					Если Не СтрокаКонтрагента = Неопределено Тогда
						ПодписантОтКонтрагента = НайтиДобавитьКонтактноеЛицоИзСертификата(
							Элемент.Контрагент, Элемент.СвойстваПодписи.Сертификат);
						ДатаПодписанияКонтрагентом = Элемент.СвойстваПодписи.ДатаПроверкиПодписи;
						
						СтрокаКонтрагента.Подписан = Истина;
						СтрокаКонтрагента.ДатаПодписи = ДатаПодписанияКонтрагентом;
						СтрокаКонтрагента.Подписал = ПодписантОтКонтрагента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			ДокументОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось прикрепить ответные подписи к документу ""%1"" (%2). Причина: %3'"), 
				Выборка.Документ, 
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение ТекстСообщения;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗаписьОДоверенностиВРегистрыДО(ПодписанныйОбъект, ХешПодписи, Доверенность) Экспорт
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		Возврат;
	КонецЕсли;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПодписанныйОбъект);
	
	СвойстваПодписи = Неопределено;
	
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		ХешУстановленнойПодписи = КриптографияБЭД.ХешПодписи(Подпись.Подпись);
		
		Если ХешУстановленнойПодписи = ХешПодписи Тогда
			СвойстваПодписи = Подпись;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СвойстваПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЭП.ЗанестиИнформациюОДоверенностиЭП(
		СвойстваПодписи.УникальныйИдентификатор, Доверенность, СвойстваПодписи);
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДокументовПоЭДО

// Возвращает состояние документа 1С:Документоборот в ЭДО.
//
// Параметры:
//  Документ - ДокументСсылка.ВнутренниеДокументы - Документ, для которого необходимо получить сведения о состоянии.
//  Дата - Дата - Дата, на которую необходимо получить сведения.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свежения о состоянии документа 1С:Документооборот в ЭДО.
//		см. РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента
//
Функция СостояниеДокумента(Документ, Дата = Неопределено, Контрагент = Неопределено) Экспорт

	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(Документ, Дата, Контрагент);

КонецФункции 

// Устанавливает состояние документа документооборота по ЭДО
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Документ для которого необходимо установить состояние
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент для которого необходимо установить состояние
//  СостояниеДокументаЭДО - ПеречислениеСсылка.СостоянияЭДОДокументооборот - состояние, которое необходимо установить
//  НаправлениеЭДО - ПеречислениеСсылка.НаправленияЭДО - Направление обмена
//  Комментарий - Строка - Комментарий к установке состояния
Процедура УстановитьСостояниеДокументаЭДО(Документ, Контрагент, СостояниеДокументаЭДО,
	НаправлениеЭДО = Неопределено, Комментарий = Неопределено) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(Документ, Контрагент, СостояниеДокументаЭДО, НаправлениеЭДО, Комментарий);
	
КонецПроцедуры

// Возвращает параметры документа по ЭДО
// 
// Параметры:
// 	ДокументДО - СправочникСсылка.ВнутренниеДокументы - Документ, для которого необходимо выяснить состояния по ЭДО
// Возвращаемое значение:
// 	Неопределено, Структура - Параметры документа по ЭДО, если документ не может учавствовать в обмене ЭДО,
// 	                          тогда Неопределено:
// * ДоступнаКорректировкаЭД - Булево - Доступна ли для вида документа непосредственная корректировка
// * СостояниеДО - ПеречислениеСсылка.СостоянияЭДОДокументооборот - Состояние документа ДО по ЭДО
// * Подписан - Булево - Подписан ли документ
// * ТребуетсяПодтверждение - Булево - Требуется ли ответная подпись по документу
// * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа, если он есть
// * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа ЭДО
// * ВидДокументаЭДО - СправочникСсылка.ВидыДокументовЭДО - Вид документа ЭДО
// * Направление - ПеречислениеСсылка.НаправленияЭДО - Направление обмена ЭДО
// * ЭлектронныйДокумент - Электронный документ, связанный с документом ДО, если он есть
// * ЕстьЭД - Булево - Есть ли с документом связанный документ ЭДО
// * ДокументВПакетеЭДО - Булево - Состоит ли документ в пакете по ЭДО
// * ПакетЭДО - УникальныйИдентификатор, Неопределено - УИД пакета ЭДО, если документ состоит в пакете,
//                                                      Неопределено, если документ в пакете не состоит
// * ДоступноИзменениеПакетаЭДО - Булево - Доступно ли изменение состава пакета ЭДО.
// * ДоступныДействияПоДокументу - Булево - Доступны ли действия по одиночному документу.
//                                          Для исходящих документов доступны одиночные действия только вне пакета.
//                                          Для входящих - зависит от оператора ЭДО контрагента.
// * ПоддерживаетсяПакетнаОбработка - Булево - Поддерживается ли пакетная обработка по данному документу.
Функция ПараметрыДокументаПоЭДО(ДокументДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьЭД", Ложь);
	СтруктураВозврата.Вставить("ЭлектронныйДокумент", Неопределено);
	СтруктураВозврата.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ВидДокументаЭДО", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТипДокументаЭДО", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТребуетсяПодтверждение", Истина);
	СтруктураВозврата.Вставить("Подписан", Ложь);
	СтруктураВозврата.Вставить("СостояниеДО", Перечисления.СостоянияЭДОДокументооборот.НеСформирован);
	СтруктураВозврата.Вставить("ДоступнаКорректировкаЭД", Ложь);
	СтруктураВозврата.Вставить("ДокументВПакетеЭДО", Ложь);
	СтруктураВозврата.Вставить("ПакетЭДО", Неопределено);
	СтруктураВозврата.Вставить("ДоступноИзменениеПакетаЭДО", Ложь);
	СтруктураВозврата.Вставить("ДоступныДействияПоДокументу", Истина);
	СтруктураВозврата.Вставить("ПоддерживаетсяПакетнаОбработка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидЭлектронногоДокумента,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.СпособОбмена КАК СпособОбмена
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФайлыДокумента КАК ФайлыДокумента
		|		ПО ФайлыДокумента.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.Актуальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК СостояниеДОПоЭДО
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних КАК СостояниеДокументовПоЭДОСрезПоследних
		|ГДЕ
		|	СостояниеДокументовПоЭДОСрезПоследних.ДокументДО = &Документ";
	Запрос.УстановитьПараметр("Документ", ДокументДО);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоСвязаннымДокументамЭДО = МассивРезультатов[1];
	ВыборкаСостоянийДО = МассивРезультатов[2].Выбрать();
	
	Если Не РезультатПоСвязаннымДокументамЭДО.Пустой() Тогда
		Выборка = РезультатПоСвязаннымДокументамЭДО.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата.ЕстьЭД = Истина;
		СтруктураВозврата.ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
		СтруктураВозврата.Направление = 
			?(ТипЗнч(Выборка.ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"),
				Перечисления.НаправленияЭДО.Входящий,
				Перечисления.НаправленияЭДО.Исходящий);
		СтруктураВозврата.ВидДокументаЭДО = Выборка.ВидЭлектронногоДокумента;
		СтруктураВозврата.ТипДокументаЭДО = Выборка.ТипДокумента;
		СтруктураВозврата.Состояние = Выборка.Состояние;
		СтруктураВозврата.ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение;
		СтруктураВозврата.ДоступнаКорректировкаЭД =
			ОбменСКонтрагентамиДОСлужебный.ВидДокументаКорректируетсяНепосредственно(Выборка.ВидЭлектронногоДокумента);
		
		Если ВыборкаСостоянийДО.Следующий() Тогда
			СостояниеДО = ВыборкаСостоянийДО.СостояниеДОПоЭДО;
			
			СтруктураВозврата.СостояниеДО = СостояниеДО;
			СтруктураВозврата.Подписан = Истина;
		КонецЕсли;
		
		ПакетЭДО = ПакетДокумента(ДокументДО);
		
		СтруктураВозврата.ПоддерживаетсяПакетнаОбработка =
			СпособОбменаПоддерживаетПакетнуюОбработку(Выборка.СпособОбмена);
		
		Если ПакетЭДО = Неопределено Тогда
			СтруктураВозврата.ДокументВПакетеЭДО = Ложь;
			СтруктураВозврата.ДоступныДействияПоДокументу = Истина;
		Иначе
			СтруктураВозврата.ДокументВПакетеЭДО = Истина;
			СтруктураВозврата.ПакетЭДО = ПакетЭДО;
			
			ДанныеПакетаЭДО = ОбменСКонтрагентамиДОСлужебный.ДанныеПакетаДокументов(ПакетЭДО);
			
			СтруктураВозврата.ДоступноИзменениеПакетаЭДО = 
				Не ЗначениеЗаполнено(ДанныеПакетаЭДО.ИдентификаторПакетаБЭД)
				И ДанныеПакетаЭДО.Направление = Перечисления.НаправленияЭДО.Исходящий;
			
			Если ДанныеПакетаЭДО.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
				СтруктураВозврата.ДоступныДействияПоДокументу = СинхронизацияЭДО.ТребуетсяОднородностьОтвета(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтруктураВозврата.ЭлектронныйДокумент, "ИдентификаторКонтрагента"));
			Иначе
				СтруктураВозврата.ДоступныДействияПоДокументу = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО,
		"Организация, Контрагент, ВидДокумента");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		РеквизитыДокумента.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		РеквизитыДокумента.Организация,
		РеквизитыДокумента.Контрагент,
		РеквизитыДокумента.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		СтруктураВозврата.ЕстьЭД = Ложь;
		СтруктураВозврата.ЭлектронныйДокумент = Неопределено;
		СтруктураВозврата.Направление = Перечисления.НаправленияЭДО.Исходящий;
		СтруктураВозврата.ВидДокументаЭДО = НастройкиОтправки.ВидДокументаЭДО;
		СтруктураВозврата.ТипДокументаЭДО = НастройкиОтправки.ТипДокумента;
		СтруктураВозврата.Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
		СтруктураВозврата.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
		СтруктураВозврата.ДоступнаКорректировкаЭД =
			ОбменСКонтрагентамиДОСлужебный.ВидДокументаКорректируетсяНепосредственно(НастройкиОтправки.ВидДокументаЭДО);
		
		Если ВыборкаСостоянийДО.Следующий() Тогда
			
			СостояниеДО = ВыборкаСостоянийДО.СостояниеДОПоЭДО;
			
			СтруктураВозврата.СостояниеДО = СостояниеДО;
			СтруктураВозврата.Подписан =
				Не (СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован
					Или СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ЗакрытПринудительно);
			
		Иначе
			
			СтруктураВозврата.СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован;
			СтруктураВозврата.Подписан = Ложь;
			
		КонецЕсли;
		
		СпособыОбмена = СпособыОбменаЭДОПоДокументамДО(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументДО));
		
		СтруктураВозврата.ПоддерживаетсяПакетнаОбработка =
			СпособОбменаПоддерживаетПакетнуюОбработку(СпособыОбмена[ДокументДО]);
		
		ПакетЭДО = ПакетДокумента(ДокументДО);
		
		Если ПакетЭДО = Неопределено Тогда
			СтруктураВозврата.ДокументВПакетеЭДО = Ложь;
			СтруктураВозврата.ДоступныДействияПоДокументу = Истина;
		Иначе
			СтруктураВозврата.ДокументВПакетеЭДО = Истина;
			СтруктураВозврата.ПакетЭДО = ПакетЭДО;
			
			ДанныеПакетаЭДО = ОбменСКонтрагентамиДОСлужебный.ДанныеПакетаДокументов(ПакетЭДО);
			
			СтруктураВозврата.ДоступноИзменениеПакетаЭДО = 
				Не ЗначениеЗаполнено(ДанныеПакетаЭДО.ИдентификаторПакетаБЭД)
				И ДанныеПакетаЭДО.Направление = Перечисления.НаправленияЭДО.Исходящий;
			СтруктураВозврата.ДоступныДействияПоДокументу = Ложь;
		КонецЕсли;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает электронный документ, связанный с документом 1С:Документооборот
// 
// Параметры:
//  ДокументДО - СправочникСсылка.ВнутренниеДокументы - Документ ДО для которого необходимо получить документ ЭДО
// 
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, Неопределено -
//              Документ ЭДО с которым связан документ ДО, неопределено, если документа ЭДО не найдено.
Функция ЭлектронныйДокументДокументаДО(ДокументДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Документ", ДокументДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СведенияОЭДИзФайла

// Сведения о формализованном электронном документе из файла
// 
// Параметры:
//  АдресВременногоХранилищаФайла - Строка - Адрес во временном хранилище на двоичные данные файла
// 
// Возвращаемое значение:
//  Структура, Неопределено - Неопределено, если файл не является формализованным. В ином случае:
// * ДатаДокумента - Дата - Дата документа
// * НомерДокумента - Строка - Номер документа
// * СуммаДокумента - Число - Сумма документа
// * ИмяСоздания - Строка - Имя для создания файла формата <Вид документа> №<Номер> от <Дата>
// * Валюта - СправочникСсылка.Валюты - Валюта документа
// * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа ЭДО
// * ВидДокументаЭДО - СправочникСсылка.ВидыДокументовЭДО - Вид документа ЭДО
Функция СведенияОЭДИзФайла(АдресВременногоХранилищаФайла) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДатаДокумента", Неопределено);
	СтруктураВозврата.Вставить("НомерДокумента", "");
	СтруктураВозврата.Вставить("СуммаДокумента", "");
	СтруктураВозврата.Вставить("ИмяСоздания", "");
	СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТипДокументаЭДО", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ВидДокументаЭДО", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ИдентификаторДокумента", "");
	
	ОбщиеСведения = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(
		ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
	
	Если ОбщиеСведения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОбщиеСведения);
	
	ДанныеЭДФайла = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(
		ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
	
	Если ТипЗнч(ДанныеЭДФайла) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипДокумента = ДанныеЭДФайла.НовыйЭД.ВидЭД;
	
	СтруктураВозврата.ТипДокументаЭДО = ТипДокумента;
	СтруктураВозврата.ВидДокументаЭДО = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокумента);
	
	СтруктураВозврата.ИмяСоздания = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"),
		ТипДокумента,
		ОбщиеСведения.НомерДокумента,
		Формат(ОбщиеСведения.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.CML208
		ИЛИ ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.CML402 Тогда
		
		СведенияОЭД = СведенияОЭДФорматаCML(ДанныеЭДФайла);
		
	Иначе
		
		СведенияОЭД = СведенияОЭДФорматаФНС(ДанныеЭДФайла);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, СведенияОЭД);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПредставленияДокумента

Функция ЗапуститьФормированиеПредставленияДанныхЭДО(ДанныеДляПредставления, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ОбменСКонтрагентамиДОСлужебный.ПредставлениеДанныхЭДО",
		ДанныеДляПредставления);
	
КонецФункции

Функция ПредставлениеДанныхЭДО(ДанныеДляПредставления) Экспорт
	
	Файл = Неопределено;
	ВерсияФайла = Неопределено;
	ПараметрыВизуализации = Неопределено;
	
	ДанныеДляПредставления.Свойство("Файл", Файл);
	ДанныеДляПредставления.Свойство("ВерсияФайла", ВерсияФайла);
	ДанныеДляПредставления.Свойство("ПараметрыВизуализации", ПараметрыВизуализации);
	
	Если ЗначениеЗаполнено(Файл) И ЗначениеЗаполнено(ВерсияФайла) Тогда
		
		Возврат ПредставлениеДанныхПоФайлу(Файл, ВерсияФайла, ПараметрыВизуализации);
		
	ИначеЕсли ЗначениеЗаполнено(Файл) Тогда
		
		ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
		
		Возврат ПредставлениеДанныхПоФайлу(Файл, ВерсияФайла, ПараметрыВизуализации);
		
	ИначеЕсли ЗначениеЗаполнено(ВерсияФайла) Тогда
		
		Файл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияФайла, "Владелец");
		
		Возврат ПредставлениеДанныхПоФайлу(Файл, ВерсияФайла, ПараметрыВизуализации);
		
	КонецЕсли;
	
	Документ = Неопределено;
	
	ДанныеДляПредставления.Свойство("Документ", Документ);
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Возврат ПредставлениеДанныхПоДокументу(Документ, ПараметрыВизуализации);
		
	КонецЕсли;
	
	ДокументЭДО = Неопределено;
	
	ДанныеДляПредставления.Свойство("ДокументЭДО", ДокументЭДО);
	
	Если ЗначениеЗаполнено(ДокументЭДО) Тогда
		
		Возврат ПредставлениеДанныхПоДокументуЭДО(ДокументЭДО, ПараметрыВизуализации);
		
	КонецЕсли;
	
	Результат = НовыйРезультатПредставленияЭДО();
	Результат.Успех = Ложь;
	Результат.ОписаниеОшибки =
		НСтр("ru = 'Не переданы параметры представления данных ЭДО.'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсЭДО

Процедура ЕстьЭДО(ДокументДО, Форма) Экспорт
	
	Форма.ЕстьЭДО = Ложь;
	Форма.ПодписанЭДО = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается
			И ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		ПараметрыЭДО = ОбменСКонтрагентамиДОВызовСервера.ПараметрыДокументаПоЭДО(ДокументДО);
		
		ЗаполнитьТаблицуСертификатов(ДокументДО, ПараметрыЭДО, Форма);
		
		Если ЗначениеЗаполнено(ПараметрыЭДО) Тогда
			Форма.ЕстьЭДО = Истина;
			
			Форма.ТипДокументаЭДО = ПараметрыЭДО.ТипДокументаЭДО;
			Форма.НаправлениеИсходящий = (ПараметрыЭДО.Направление = Перечисления.НаправленияЭДО.Исходящий);
			Форма.СостояниеПоЭДО = ПараметрыЭДО.СостояниеДО;
			Форма.ПодписанЭДО = ПараметрыЭДО.Подписан;
			Форма.ТребуетсяОтветнаяПодписьЭДО = ПараметрыЭДО.ТребуетсяПодтверждение;
			Форма.ДоступнаКорректировкаЭД = ПараметрыЭДО.ДоступнаКорректировкаЭД;
			
			Форма.ИдентификаторПакетаЭДО = ПараметрыЭДО.ПакетЭДО;
			Форма.МожноМенятьПакетЭДО = ПараметрыЭДО.ДоступноИзменениеПакетаЭДО;
			Форма.ПоддерживаетсяПакетнаяОбработкаЭДО = ПараметрыЭДО.ПоддерживаетсяПакетнаОбработка;
			
		КонецЕсли;
		
		Если Форма.ЕстьЭДО Тогда
			Форма.ТипДокументаЭДО =
				?(Не ЗначениеЗаполнено(Форма.ТипДокументаЭДО),
				Перечисления.ТипыДокументовЭДО.Прочее,
				Форма.ТипДокументаЭДО);
		КонецЕсли;
		
		// Аннулирование добавим позже
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость и доступность команд по ЭДО для документа
// 
// Параметры:
// 	ДокументДО - СправочникСсылка.ВнутренниеДокументы - Ссылка на документ ДО
// 	Форма - ФормаКлиентскогоПриложения - Форма для которой провизводится установка видимости и доступности команд
// 	НастройкиКоманд - Структура - см. ОбменСКонтрагентамиДОСлужебный.НовыеНастройкиКомандПоДействияЭДО
Процедура УстановитьВидимостьДоступностьКомандЭДО(ДокументДО, Форма, НастройкиКоманд) Экспорт
	
	КомандыПоДокументу = НастройкиКоманд.КомандыПоДокументу;
	КомандыПоПакету = НастройкиКоманд.КомандыПоПакету;
	
	Для Каждого Элемент Из КомандыПоДокументу Цикл
		УстановитьВидимостьДоступностьКомандыПоДействию(Элемент.Ключ, КомандыПоДокументу, Ложь, Ложь);
	КонецЦикла;
	
	Для Каждого Элемент Из КомандыПоПакету Цикл
		УстановитьВидимостьДоступностьКомандыПоДействию(Элемент.Ключ, КомандыПоПакету, Ложь, Ложь);
	КонецЦикла;
	
	Если Не Форма.ЕстьЭДО Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СинхронизацияЭДО.ЕстьПравоВыполненияОбмена() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ПараметрыДокументаПоЭДО(ДокументДО);
	
	Если ПараметрыПоЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.НаправлениеИсходящий Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПоЭДО.ЭлектронныйДокумент) Тогда
			ДействияДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
				ПараметрыПоЭДО.Состояние,
				ПараметрыПоЭДО.ЭлектронныйДокумент);
			
			Если ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.Утвердить)
				ИЛИ ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.Подписать) Тогда
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Утвердить, КомандыПоДокументу,
					Истина, Истина);
			КонецЕсли;
			
			Если ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.Отклонить)
				ИЛИ ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.ОтклонитьПодписание) Тогда
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Отклонить, КомандыПоДокументу,
					Истина, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СостояниеДО = ПараметрыПоЭДО.СостояниеДО;
		
		Если СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
			
			УстановитьВидимостьДоступностьКомандыПоДействию(
				Перечисления.ДействияПоЭДО.Подписать, КомандыПоДокументу,
				Истина, Истина);
			
		КонецЕсли;
		
		Если СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.Подписан
			Или СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку
			Или СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
			
			УстановитьВидимостьДоступностьКомандыПоДействию(
				Перечисления.ДействияПоЭДО.Отправить, КомандыПоДокументу,
				Истина, Истина);
			
		КонецЕсли;
		
		Если СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ОшибкаПередачи Тогда
			УстановитьВидимостьДоступностьКомандыПоДействию(
				Перечисления.ДействияПоЭДО.ВернутьВРаботу, КомандыПоДокументу,
				Истина, Истина);
			УстановитьВидимостьДоступностьКомандыПоДействию(
				Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, КомандыПоДокументу,
				Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПоЭДО.ДокументВПакетеЭДО Тогда
		
		ДоступныеДействияДляПакета =
			ОбменСКонтрагентамиДОВызовСервера.ДоступныеДействияПакетаЭДО(ПараметрыПоЭДО.ПакетЭДО);
		
		Если Не Форма.НаправлениеИсходящий Тогда
			
			ОтборКомандПоДокументу = Новый Структура;
			ОтборКомандПоДокументу.Вставить("СкрыватьВПакете", Истина);
			
			Если ДоступныеДействияДляПакета[Перечисления.ДействияПоЭДО.Утвердить] = Истина
				ИЛИ ДоступныеДействияДляПакета[Перечисления.ДействияПоЭДО.Подписать] = Истина Тогда
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Утвердить, КомандыПоДокументу,
					Ложь, Ложь, ОтборКомандПоДокументу);
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Утвердить, КомандыПоПакету,
					Истина, Истина);
				
			КонецЕсли;
			
			Если ДоступныеДействияДляПакета[Перечисления.ДействияПоЭДО.Отклонить] = Истина
				ИЛИ ДоступныеДействияДляПакета[Перечисления.ДействияПоЭДО.ОтклонитьПодписание] = Истина Тогда
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Отклонить, КомандыПоДокументу,
					Ложь, Ложь, ОтборКомандПоДокументу);
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Отклонить, КомандыПоПакету,
					Истина, Истина);
				
			КонецЕсли;
			
		Иначе
			
			УстановитьВидимостьДоступностьКомандыПоДействию(
				Перечисления.ДействияПоЭДО.Подписать, КомандыПоДокументу,
				Ложь, Ложь);
			
			УстановитьВидимостьДоступностьКомандыПоДействию(
				Перечисления.ДействияПоЭДО.Отправить, КомандыПоДокументу,
				Ложь, Ложь);
			
			Если ДоступныеДействияДляПакета[Перечисления.ДействияПоЭДО.Подписать] = Истина Тогда
				
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Подписать, КомандыПоПакету,
					Истина, Истина);
				
			ИначеЕсли ДоступныеДействияДляПакета[Перечисления.ДействияПоЭДО.Отправить] = Истина Тогда
				
				УстановитьВидимостьДоступностьКомандыПоДействию(
					Перечисления.ДействияПоЭДО.Отправить, КомандыПоПакету,
					Истина, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новые настройки команд по действиям ЭДО для форм
// 
// Возвращаемое значение:
// 	Структура:
// * КомандыПоДокументу - Соответствие - Соответствие команд по действиям ЭДО:
//     ** Ключ - ПеречислениеСсылка.ДействияПоЭДО - Действие для команд
//     ** Значение - Массив из Структура:
//         *** ЭлементФормы - Элемент формы, отвечающий за вызов команды
//         *** СкрыватьВПакете - Булево - Нужно ли скрывать для документа в составе пакета
// * КомандыПоПакету - Соответствие - Соответствие команд по действиям ЭДО:
//     ** Ключ - ПеречислениеСсылка.ДействияПоЭДО - Действие для команд
//     ** Значение - Массив из Структура:
//         *** ЭлементФормы - Элемент формы, отвечающий за вызов команды
Функция НовыеНастройкиКомандПоДействияЭДО() Экспорт
	
	НастройкиКомандПоДействиямЭДО = Новый Структура;
	
	НастройкиКомандПоДействиямЭДО.Вставить("КомандыПоДокументу", Новый Соответствие);
	НастройкиКомандПоДействиямЭДО.Вставить("КомандыПоПакету", Новый Соответствие);	
	
	Возврат НастройкиКомандПоДействиямЭДО;
	
КонецФункции

// Добавляет команду ЭДО действия по документу.
// 
// Параметры:
// 	НастройкиКомандПоДействиямЭДО - Структура - см. ОбменСКонтрагентамиДОСлужебный.НовыеНастройкиКомандПоДействияЭДО
// 	Действие - ПеречислениеСсылка.ДействияПоЭДО - Действие команды
// 	ЭлементФормы - Элемент формы, отвечающий за вызов команты
// 	СкрыватьДляДокументаВПакете - Булево - Скрывать элемент при условии, что документ находится в пакете по ЭДО.
Процедура ДобавитьКомандуЭДОПоДокументуВНастройки(НастройкиКомандПоДействиямЭДО, Действие,
	ЭлементФормы, СкрыватьВПакете = Истина) Экспорт
	
	КомандыПоДокументу = НастройкиКомандПоДействиямЭДО.КомандыПоДокументу;
	
	КомандыПоДействию = КомандыПоДокументу.Получить(Действие);
	
	Если КомандыПоДействию = Неопределено Тогда
		КомандыПоДействию = Новый Массив;
		КомандыПоДокументу.Вставить(Действие, КомандыПоДействию);
	КонецЕсли;
	
	КомандаПоДокументу = Новый Структура;
	КомандаПоДокументу.Вставить("ЭлементФормы", ЭлементФормы);
	КомандаПоДокументу.Вставить("СкрыватьВПакете", СкрыватьВПакете);
	
	КомандыПоДействию.Добавить(КомандаПоДокументу);
	
КонецПроцедуры

// Добавляет команду ЭДО действия по пакету.
// 
// Параметры:
// 	НастройкиКомандПоДействиямЭДО - Структура - см. ОбменСКонтрагентамиДОСлужебный.НовыеНастройкиКомандПоДействияЭДО
// 	Действие - ПеречислениеСсылка.ДействияПоЭДО - Действие команды
// 	ЭлементФормы - Элемент формы, отвечающий за вызов команты
Процедура ДобавитьКомандуЭДОПоПакетуВНастройки(НастройкиКомандПоДействиямЭДО, Действие, ЭлементФормы) Экспорт
	
	КомандыПоПакету = НастройкиКомандПоДействиямЭДО.КомандыПоПакету;
	
	КомандыПоДействию = КомандыПоПакету.Получить(Действие);
	
	Если КомандыПоДействию = Неопределено Тогда
		КомандыПоДействию = Новый Массив;
		КомандыПоПакету.Вставить(Действие, КомандыПоДействию);
	КонецЕсли;
	
	КомандаПоДокументу = Новый Структура;
	КомандаПоДокументу.Вставить("ЭлементФормы", ЭлементФормы);
	
	КомандыПоДействию.Добавить(КомандаПоДокументу);
	
КонецПроцедуры

Функция ДоступныКомандыПоДокументуЭДОИзИнтерфейсаБЭД(ДокументЭДО) Экспорт
	
	Если ТипЗнч(ДокументЭДО) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		ДокументыДО = ДокументыДОЭлектронныхДокументов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументЭДО));
		
		ЕстьДокументДО = (ДокументыДО[ДокументЭДО] <> Неопределено);
		
		ДокументТребуетОтражения = ДокументЭДОТребуетОтражения(ДокументЭДО);
		
		Если ЕстьДокументДО Или ДокументТребуетОтражения Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СпискиДокументовЭДО

#Область ДокументыИсходящие

Функция ИсходящиеДокументыЭДО(Знач Отбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИсходящихДокументовЭДО();
	
	УстановитьПараметрыЗапросаИсходящих(Запрос, Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗапуститьПолучениеДанныхИсходящих(ДанныеВыделенных, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ОбменСКонтрагентамиДОСлужебный.ДанныеВыделенныхИсходящихДокументов",
		ДанныеВыделенных);
	
КонецФункции

Функция ДанныеВыделенныхИсходящихДокументов(ДанныеВыделенныхСтрок) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Пакеты", Новый Массив);
	СтруктураВозврата.Вставить("ОдиночныеДокументы", Новый Массив);
	СтруктураВозврата.Вставить("ДеревоФайлов", Неопределено);
	СтруктураВозврата.Вставить("Организации", Новый Массив);
	СтруктураВозврата.Вставить("Контрагенты", Новый Массив);
	СтруктураВозврата.Вставить("ДоступныеДействия", Новый Соответствие);
	
	ДанныеОбъектов = ДанныеВыделенныхОбъектов(ДанныеВыделенныхСтрок);
	
	СтруктураВозврата.ДеревоФайлов = ДеревоФайловПоДаннымОбъектов(ДанныеОбъектов);
	
	Для Каждого Элемент Из ДанныеОбъектов.Пакеты Цикл
		СтруктураВозврата.Пакеты.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из ДанныеОбъектов.Документы Цикл
		СтруктураВозврата.ОдиночныеДокументы.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ОрганизацииИКонтрагенты = ОрганизацииИКонтрагентыВыбранныхДанныхОбъектов(ДанныеОбъектов);
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОрганизацииИКонтрагенты);
	
	СтруктураВозврата.ДоступныеДействия = 
		ДоступныеДействияПоВыделеннымИсходящимОбъектам(
			ДанныеОбъектов,
			ОрганизацииИКонтрагенты.Организации,
			ОрганизацииИКонтрагенты.Контрагенты);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПакетыЭДО

// Возвращает ИД пакета ЭДО к которому принадлежит документ ДО.
//  Если документ не состоит в пакете, то возвращается Неопределено
// 
// Параметры:
// 	Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО
// Возвращаемое значение:
// 	УникальныйИдентификатор, Неопределено - УИД пакета, либо Неопределено, если документ не состоит в пакете ЭДО
Функция ПакетДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|ГДЕ
		|	СоставПакетовЭДОДокументооборот.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторПакета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает данные пакета ЭДО документов ДО
// 
// Параметры:
// 	ИдентификаторПакета - УникальныйИдентификатор - УИД пакета ЭДО
// Возвращаемое значение:
// 	Структура - Данные пакета:
// * ИдентификаторПакета - Неопределено, УникальныйИдентификатор - УИД пакета, если пакет существует,
//                                                                 Неопределено, если пакета ЭДО не существует
// * Организация - СправочникСсылка.Организации - Организация пакета
// * Контрагент - СправочникСсылка.Контрагенты - Контрагент пакета
// * Направление - ПеречислениеСсылка.НаправленияЭДО - Направление пакета
// * ИдентификаторПакетаБЭД - Неопределено, УникальныйИдентификатор -
//                                          Идентификартор пакета документо БЭД, если он существует
//                                          Неопределено, если пакет документов БЭД еще не создан
// * Документы - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов, входящих в пакет
Функция ДанныеПакетаДокументов(ИдентификаторПакета) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ИдентификаторПакета", Неопределено);
	СтруктураВозврата.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураВозврата.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	СтруктураВозврата.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ИдентификаторПакетаБЭД", Неопределено);
	СтруктураВозврата.Вставить("Документы", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета,
		|	ПакетыЭДОДокументооборот.Организация,
		|	ПакетыЭДОДокументооборот.Контрагент,
		|	ПакетыЭДОДокументооборот.Направление,
		|	ПакетыЭДОДокументооборот.ИдентификаторПакетаБЭД,
		|	СоставПакетовЭДОДокументооборот.Документ
		|ИЗ
		|	РегистрСведений.ПакетыЭДОДокументооборот КАК ПакетыЭДОДокументооборот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО СоставПакетовЭДОДокументооборот.ИдентификаторПакета = ПакетыЭДОДокументооборот.ИдентификаторПакета
		|ГДЕ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета = &ИдентификаторПакета";
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.ИдентификаторПакета = Выборка.ИдентификаторПакета;
	СтруктураВозврата.Организация = Выборка.Организация;
	СтруктураВозврата.Контрагент = Выборка.Контрагент;
	СтруктураВозврата.Направление = Выборка.Направление;
	СтруктураВозврата.ИдентификаторПакетаБЭД = Выборка.ИдентификаторПакетаБЭД;
	СтруктураВозврата.Документы.Добавить(Выборка.Документ);
	
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.Документы.Добавить(Выборка.Документ);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОбъединитьДокументыВИсходящийПакетЭДО(Документы) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	СтруктураВозврата.Вставить("ИдентификаторПакета", Неопределено);
	СтруктураВозврата.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураВозврата.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	ДанныеДляПакета = ДанныеДокументовДляДобавленияВПакет(Документы);
	
	Если Не ВозможноОбъединитьДокументыВПакет(Документы, ДанныеДляПакета, СтруктураВозврата.ОписаниеОшибки) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ОрганизацияПакета = ДанныеДляПакета.Организации[0];
	КонтрагентПакета = ДанныеДляПакета.Контрагенты[0];
	
	ИДПакета = Новый УникальныйИдентификатор;
	
	Блокировка = Новый БлокировкаДанных();
	
	Для Каждого Документ Из Документы Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеДокументовПоЭДО");
		ЭлементБлокировки.УстановитьЗначение("ДокументДО", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовЭДОДокументооборот");
		ЭлементБлокировки.УстановитьЗначение("Документ", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание пакета ЭДО документов 1С:Документооборот.'"),
			УровеньЖурналаРегистрации.Информация, , ,
			СтрШаблон(НСтр("ru = 'Начало создания пакета ЭДО документов 1С:Документообот (%1).'"),
				ИДПакета));
		
		Блокировка.Заблокировать();
		
		Для Каждого Документ Из Документы Цикл
			
			Запись = РегистрыСведений.СоставПакетовЭДОДокументооборот.СоздатьМенеджерЗаписи();
			
			Запись.Документ = Документ;
			Запись.ИдентификаторПакета = ИДПакета;
			
			Запись.Записать();
			
		КонецЦикла;
		
		ЗаписьСвойствПакета = РегистрыСведений.ПакетыЭДОДокументооборот.СоздатьМенеджерЗаписи();
		
		ЗаписьСвойствПакета.ИдентификаторПакета = ИДПакета;
		ЗаписьСвойствПакета.Организация = ОрганизацияПакета;
		ЗаписьСвойствПакета.Контрагент = КонтрагентПакета;
		ЗаписьСвойствПакета.Направление = Перечисления.НаправленияЭДО.Исходящий;
		
		ЗаписьСвойствПакета.Записать();
		
		ВыборкаСведенийСостояний = ВыборкаСведенийОСостоянияхЭДОИсходящих(Документы);
		
		Пока ВыборкаСведенийСостояний.Следующий() Цикл
			
			Если ВыборкаСведенийСостояний.СостояниеВерсииДокументаПоЭДО <>
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
				
				Продолжить;
			КонецЕсли;
			
			УстановитьСостояниеДокументаЭДО(
				ВыборкаСведенийСостояний.ДокументДО,
				ВыборкаСведенийСостояний.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО,
				ВыборкаСведенийСостояний.НаправлениеЭД,
				НСтр("ru = 'Документ добавлен в пакет ЭДО.'"));
			
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание пакета ЭДО документов 1С:Документооборот.'"),
			УровеньЖурналаРегистрации.Информация, , ,
			СтрШаблон(НСтр("ru = 'Создан пакет ЭДО документов 1С:Документообот (%1) из %2 документов.'"),
				ИДПакета,
				Документы.Количество()));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СтруктураВозврата.ОписаниеОшибки =
			СтрШаблон(НСтр("ru = 'Не удалось создать пакет ЭДО документов 1С:Документооборот (%1) по причине:'"),
				ИДПакета)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание пакета ЭДО документов 1С:Документооборот.'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтруктураВозврата.ОписаниеОшибки);
		
		Возврат СтруктураВозврата;
		
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.ИдентификаторПакета = ИДПакета;
	СтруктураВозврата.Организация = ОрганизацияПакета;
	СтруктураВозврата.Контрагент = КонтрагентПакета;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ИзменитьСоставИсходящегоПакетаЭДО(ИдентификаторПакета, ДобавляемыеДокументы, УдаляемыеДокументы) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	СтруктураВозврата.Вставить("ПакетУдален", Ложь);
	
	ДанныеПакета = ДанныеПакетаДокументов(ИдентификаторПакета);
	
	Если Не ВозможноИзменитьСоставПакета(ДанныеПакета, ДобавляемыеДокументы,
			УдаляемыеДокументы, СтруктураВозврата.ОписаниеОшибки) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДокументыВПакете = Новый Соответствие;
	
	Для Каждого Документ Из ДанныеПакета.Документы Цикл
		ДокументыВПакете.Вставить(Документ, Истина);
	КонецЦикла;
	
	ИДПакета = ДанныеПакета.ИдентификаторПакета;
	
	Блокировка = Новый БлокировкаДанных();
	
	Для Каждого Документ Из ДобавляемыеДокументы Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеДокументовПоЭДО");
		ЭлементБлокировки.УстановитьЗначение("ДокументДО", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовЭДОДокументооборот");
		ЭлементБлокировки.УстановитьЗначение("Документ", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЦикла;
	
	Для Каждого Документ Из УдаляемыеДокументы Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеДокументовПоЭДО");
		ЭлементБлокировки.УстановитьЗначение("ДокументДО", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовЭДОДокументооборот");
		ЭлементБлокировки.УстановитьЗначение("Документ", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЦикла;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПакетыЭДОДокументооборот");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторПакета", ИДПакета);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение состава пакета ЭДО документов 1С:Документооборот.'"),
			УровеньЖурналаРегистрации.Информация, , ,
			СтрШаблон(НСтр("ru = 'Начало изменения состава пакета ЭДО документов 1С:Документообот (%1).'"),
				ИДПакета));
		
		Блокировка.Заблокировать();
		
		Для Каждого Документ Из УдаляемыеДокументы Цикл
			Запись = РегистрыСведений.СоставПакетовЭДОДокументооборот.СоздатьМенеджерЗаписи();
			Запись.Документ = Документ;
			Запись.Удалить();
			
			ДокументыВПакете.Удалить(Документ);
		КонецЦикла;
		
		Для Каждого Документ Из ДобавляемыеДокументы Цикл
			Запись = РегистрыСведений.СоставПакетовЭДОДокументооборот.СоздатьМенеджерЗаписи();
			Запись.Документ = Документ;
			Запись.ИдентификаторПакета = ИДПакета;
			Запись.Записать();
			
			ДокументыВПакете.Вставить(Документ, Истина);
		КонецЦикла;
		
		ВыборкаСостоянийДобавляемых = ВыборкаСведенийОСостоянияхЭДОИсходящих(ДобавляемыеДокументы);
		
		Пока ВыборкаСостоянийДобавляемых.Следующий() Цикл
			
			Если ВыборкаСостоянийДобавляемых.СостояниеВерсииДокументаПоЭДО <>
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
				
				Продолжить;
			КонецЕсли;
			
			ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
				ВыборкаСостоянийДобавляемых.ДокументДО,
				ВыборкаСостоянийДобавляемых.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО,
				ВыборкаСостоянийДобавляемых.НаправлениеЭД,
				НСтр("ru = 'Документ добавлен в пакет ЭДО.'"));
			
		КонецЦикла;
		
		ВыборкаСостоянийУдаляемых = ВыборкаСведенийОСостоянияхЭДОИсходящих(УдаляемыеДокументы);
		
		Пока ВыборкаСостоянийУдаляемых.Следующий() Цикл
			
			Если ВыборкаСостоянийУдаляемых.СостояниеВерсииДокументаПоЭДО <>
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО Тогда
				
				Продолжить;
			КонецЕсли;
			
			УстановитьСостояниеДокументаЭДО(
				ВыборкаСостоянийУдаляемых.ДокументДО,
				ВыборкаСостоянийУдаляемых.Контрагент,
				Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка,
				ВыборкаСостоянийУдаляемых.НаправлениеЭД,
				НСтр("ru = 'Документ удален из пакета ЭДО.'"));
			
		КонецЦикла;
		
		Если ДокументыВПакете.Количество() <= 1 Тогда
			
			Если ДокументыВПакете.Количество() = 0 Тогда
				КомментарийЖР = СтрШаблон(
					НСтр("ru = 'Пакет ЭДО (%1) документов 1С:Документооборот удален,
						|поскольку все документы из него удалены.'"),
					ИДПакета);
			Иначе
				КомментарийЖР = СтрШаблон(
					НСтр("ru = 'Пакет ЭДО (%1) документов 1С:Документооборот удален,
						|поскольку теперь содержит только один документ.'"),
					ИДПакета);
				
				Для Каждого Элемент Из ДокументыВПакете Цикл
					Запись = РегистрыСведений.СоставПакетовЭДОДокументооборот.СоздатьМенеджерЗаписи();
					Запись.Документ = Элемент.Ключ;
					Запись.Удалить();
				КонецЦикла;
			КонецЕсли;
			
			Запись = РегистрыСведений.ПакетыЭДОДокументооборот.СоздатьМенеджерЗаписи();
			Запись.ИдентификаторПакета = ИДПакета;
			Запись.Удалить();
			
			СтруктураВозврата.ПакетУдален = Истина;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление пакета ЭДО документов 1С:Документооборот.'"),
				УровеньЖурналаРегистрации.Информация, , ,
				КомментарийЖР);
			
		Иначе
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Изменение состава пакета ЭДО документов 1С:Документооборот.'"),
				УровеньЖурналаРегистрации.Информация, , ,
				СтрШаблон(НСтр("ru = 'Начало изменения состава пакета ЭДО документов 1С:Документообот (%1).'"),
					ИДПакета));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СтруктураВозврата.ОписаниеОшибки =
			СтрШаблон(НСтр("ru = 'Не удалось изменить состав пакета ЭДО документов 1С:Документооборот (%1) по причине:'"),
				ИДПакета)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение состава пакета ЭДО документов 1С:Документооборот.'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтруктураВозврата.ОписаниеОшибки);
		
		Возврат СтруктураВозврата;
		
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Данные документов для добавления их в пакет
// 
// Параметры:
// 	Документы - Массив из СправочникСсылка.ВнутренниеДокументы
// Возвращаемое значение:
// 	Структура - Данные документов:
// * Организации - Массив из СправочникСсылка.Организации - Организации документов
// * Контрагенты - Массив из СправочникСсылка.Контрагенты - Контрагенты документов
// * Направления - Массив из ПеречислениеСсылка.НаправленияЭДО - Направления документов по ЭДО
// * Состояния - Массив из ПеречислениеСсылка.СостоянияЭДОДокументооборот - Состояния документов по ЭДО
// * ИдентификаторыПакетов - Массив из УникальныйИдентификатор - УИДы пакетов ЭДО в которых уже учавствуют документы
Функция ДанныеДокументовДляДобавленияВПакет(Документы) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Организации", Новый Массив);
	СтруктураВозврата.Вставить("Контрагенты", Новый Массив);
	СтруктураВозврата.Вставить("Направления", Новый Массив);
	СтруктураВозврата.Вставить("Состояния", Новый Массив);
	СтруктураВозврата.Вставить("ИдентификаторыПакетов", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.ДокументДО КАК Документ,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК Состояние,
		|	СостояниеДокументовПоЭДОСрезПоследних.НаправлениеЭД КАК Направление,
		|	ДокументыДО.Организация,
		|	ДокументыДО.Контрагент,
		|	ЕСТЬNULL(СоставПакетовЭДОДокументооборот.ИдентификаторПакета, НЕОПРЕДЕЛЕНО) КАК ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(, ДокументДО В (&Документы)) КАК
		|		СостояниеДокументовПоЭДОСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ДокументыДО
		|		ПО СостояниеДокументовПоЭДОСрезПоследних.ДокументДО = ДокументыДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО СостояниеДокументовПоЭДОСрезПоследних.ДокументДО = СоставПакетовЭДОДокументооборот.Документ";
	Запрос.УстановитьПараметр("Документы", Документы);
	
	УникальныеОрганизации = Новый Соответствие;
	УникальныеКонтрагенты = Новый Соответствие;
	УникальныеНаправления = Новый Соответствие;
	УникальныеСостояния = Новый Соответствие;
	УникальныеУИДПакетов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если УникальныеОрганизации[Выборка.Организация] = Неопределено Тогда
			УникальныеОрганизации.Вставить(Выборка.Организация, Истина);
		КонецЕсли;
		
		Если УникальныеКонтрагенты[Выборка.Контрагент] = Неопределено Тогда
			УникальныеКонтрагенты.Вставить(Выборка.Контрагент, Истина);
		КонецЕсли;
		
		Если УникальныеНаправления[Выборка.Направление] = Неопределено Тогда
			УникальныеНаправления.Вставить(Выборка.Направление, Истина);
		КонецЕсли;
		
		Если УникальныеСостояния[Выборка.Состояние] = Неопределено Тогда
			УникальныеСостояния.Вставить(Выборка.Состояние, Истина);
		КонецЕсли;
		
		Если УникальныеУИДПакетов[Выборка.ИдентификаторПакета] = Неопределено Тогда
			УникальныеУИДПакетов.Вставить(Выборка.ИдентификаторПакета, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеОрганизации Цикл
		СтруктураВозврата.Организации.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеКонтрагенты Цикл
		СтруктураВозврата.Контрагенты.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеНаправления Цикл
		СтруктураВозврата.Направления.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеСостояния Цикл
		СтруктураВозврата.Состояния.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеУИДПакетов Цикл
		СтруктураВозврата.ИдентификаторыПакетов.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет, поддерживает ли способ обмена ЭДО пакетную обработку документов
// 
// Параметры:
//  СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД - Способ обмена ЭДО
// 
// Возвращаемое значение:
//  Булево - Поддерживает ли способ обмена пакетную обработку документов.
Функция СпособОбменаПоддерживаетПакетнуюОбработку(СпособОбмена) Экспорт
	
	Возврат (СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
КонецФункции

Функция ДанныеНеотраженныхДокументовЭДОПакета(ИдентификаторПакетаЭДО) Экспорт
	
	НеотраженныеДокументыЭДО = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПакетаЭДО) Тогда
		Возврат НеотраженныеДокументыЭДО;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК Номер
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыЭДОДокументооборот КАК ПакетыЭДОДокументооборот
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыЭДОДокументооборот.ИдентификаторПакетаБЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|ГДЕ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета = &ИдентификаторПакета
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакетаЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДокументаЭДО = Новый Структура;
		ДанныеДокументаЭДО.Вставить("ВидДокумента", Выборка.ВидДокумента);
		ДанныеДокументаЭДО.Вставить("Номер", Выборка.Номер);
		ДанныеДокументаЭДО.Вставить("Дата", Выборка.Дата);
		
		НеотраженныеДокументыЭДО.Вставить(Выборка.ЭлектронныйДокумент, ДанныеДокументаЭДО);
	КонецЦикла;
	
	Возврат НеотраженныеДокументыЭДО;
	
КонецФункции

#КонецОбласти

#Область ОтражениеДокументовВДО

// Возвращает документы ДО для документов ЭДО
// 
// Параметры:
//  ЭлектронныеДокументы - Массив из СправочникСсылка.ВнутренниеДокументы - Документы ЭДО для которых необходимо получить документы ДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документы ЭДО
//    * Значение - СправочникСсылка.ВнутренниеДокументы - Документ ДО для документа ЭДО из ключа
Функция ДокументыДОЭлектронныхДокументов(ЭлектронныеДокументы) Экспорт
	
	ДокументыДО = Новый Соответствие;
	Для Каждого ДокументЭДО Из ЭлектронныеДокументы Цикл
		ДокументыДО.Вставить(ДокументЭДО, Неопределено);
	КонецЦикла;
	
	Запрос = Новый Запрос(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов(Истина));
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ОбъектУчета)
			И ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.ВнутренниеДокументы")
			И Выборка.Актуальный = Истина Тогда
			
			ДокументыДО[Выборка.ЭлектронныйДокумент] = Выборка.ОбъектУчета;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыДО;
	
КонецФункции

// Виды документов доступные для отражения входящих ЭДО.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыВнутреннихДокументов - Виды документов доступные для отражения входящих ЭДО
Функция ВидыДокументовДоступныеДляОтраженияВходящихЭДО() Экспорт
	
	ВидыДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	ВидыВнутреннихДокументов.ВестиУчетСторон
		|	И ВидыВнутреннихДокументов.УчитыватьНедействующиеДокументы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

#КонецОбласти

#Область ПереопределениеБЭД

// Получает данные о юридическом (физическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//  Сведения - см. ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица
//
Процедура ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Сведения) Экспорт
	
	Если ЗначениеЗаполнено(ЮрФизЛицо)
		И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
		РеквизитыЮрФизЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЮрФизЛицо,
			"ЮрФизЛицо, Наименование, НаименованиеПолное, ИНН, КПП");
		
		Сведения.ЮрФизЛицо = РеквизитыЮрФизЛица.ЮрФизЛицо;
		Сведения.ПолноеНаименование = РеквизитыЮрФизЛица.НаименованиеПолное;
		Сведения.ОфициальноеНаименование = РеквизитыЮрФизЛица.Наименование;
		Сведения.ИНН = РеквизитыЮрФизЛица.ИНН;
		Сведения.КПП = РеквизитыЮрФизЛица.КПП;
		Сведения.Телефоны = "";
		Сведения.КодПоОКПО = "";
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеСчета.НомерСчета,
		|	БанковскиеСчета.Банк.Наименование КАК Банк,
		|	БанковскиеСчета.Банк.Код КАК БИК
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И НЕ БанковскиеСчета.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", ЮрФизЛицо);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Сведения, Выборка);
		КонецЕсли;
		
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
			ИЛИ ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ЮрФизЛицо.Наименование);
			Сведения.Фамилия = ФИО.Фамилия;
			Сведения.Имя = ФИО.Имя;
			Сведения.Отчество = ФИО.Отчество;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЮрФизЛицо,, ТекущаяДатаСеанса(), Ложь);
	
	Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл
		
		Если СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации
			ИЛИ СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента Тогда
			
			Сведения.ЮридическийАдресXML = СтрокаТаблицыКИ.ЗначенияПолей;
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			
		ИначеЕсли СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
			ИЛИ СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента Тогда
			
			Сведения.ФактическийАдресXML = СтрокаТаблицыКИ.ЗначенияПолей;
			Сведения.ФактическийАдрес = СтрокаТаблицыКИ.Представление;
			
		ИначеЕсли СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации
			ИЛИ СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда
			
			Сведения.ПочтовыйАдресXML = СтрокаТаблицыКИ.ЗначенияПолей;
			Сведения.ПочтовыйАдрес = СтрокаТаблицыКИ.Представление;
			
		ИначеЕсли СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации
			ИЛИ СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			Сведения.ТелефоныXML = СтрокаТаблицыКИ.ЗначенияПолей;
			Сведения.Телефоны = СтрокаТаблицыКИ.Представление;
			
		ИначеЕсли СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации
			ИЛИ СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
			
			Сведения.ЭлектроннаяПочта = СтрокаТаблицыКИ.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределение процедуры ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на элемент справочника Организации;
//  ДанныеОрганизации - см. ИнтеграцияЭДО.НоваяСтруктураДанныхОрганизации
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		"НаименованиеПолное, ИНН, КПП, ОГРН, ЮрФизЛицо");
	
	ДанныеОрганизации.Наименование = РеквизитыОрганизации.НаименованиеПолное;
	ДанныеОрганизации.ИНН = РеквизитыОрганизации.ИНН;
	ДанныеОрганизации.КПП = РеквизитыОрганизации.КПП;
	ДанныеОрганизации.ОГРН = РеквизитыОрганизации.ОГРН;
	
	ОрганизацияФизЛицо = (РеквизитыОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ РеквизитыОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Если ОрганизацияФизЛицо Тогда
		ДанныеОрганизации.ЮрФизЛицо = "ФизЛицо";
	Иначе
		ДанныеОрганизации.ЮрФизЛицо = "ЮрЛицо";
	КонецЕсли;
	
	ЗаполнитьДанныеРуководителя(Организация, ДанныеОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Значение
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.УстановитьПараметр("Вид",    Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(Выборка.Значение);
		Если АдресСтруктурой.Свойство("Индекс") Тогда
			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Регион") Тогда
			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("КодРегиона") Тогда
			ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Район") Тогда
			ДанныеОрганизации.Район = АдресСтруктурой.Район;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Город") Тогда
			ДанныеОрганизации.Город = АдресСтруктурой.Город;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Улица") Тогда
			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
			ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
			ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет при изменении данные физического лица по ссылке.
//
// Параметры:
//  ФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//  Сведения - см. МашиночитаемыеДоверенности.НовыеДанныеФизЛица
//
Процедура ПриИзмененииДанныеФизЛица(ФизЛицо, Сведения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.ДатаРождения,
		|	ФизическиеЛица.Пол,
		|	ФизическиеЛица.Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
		|ГДЕ
		|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо";
	Запрос.УстановитьПараметр("Физлицо", ФизЛицо);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДанныхФизлица = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выбрать();
	ВыборкаДокументаФизлица = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
	
	Если ВыборкаДанныхФизлица.Следующий() Тогда
		
		Сведения.ДатаРождения = ВыборкаДанныхФизлица.ДатаРождения;
		Сведения.ФИО = ВыборкаДанныхФизлица.Наименование;
		Сведения.Пол = ВыборкаДанныхФизлица.Пол;
		
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВыборкаДанныхФизлица.Наименование);
		Сведения.Фамилия = ЧастиИмени.Фамилия;
		Сведения.Имя = ЧастиИмени.Имя;
		Сведения.Отчество = ЧастиИмени.Отчество;
		
	КонецЕсли;
	
	Если ВыборкаДокументаФизлица.Следующий() Тогда
		
		Сведения.Серия = ВыборкаДокументаФизлица.Серия;
		Сведения.Номер = ВыборкаДокументаФизлица.Номер;
		Сведения.ДатаВыдачи = ВыборкаДокументаФизлица.ДатаВыдачи;
		Сведения.КемВыдан = ВыборкаДокументаФизлица.КемВыдан;
		Сведения.КодПодразделения = ВыборкаДокументаФизлица.КодПодразделения;
		Сведения.КодФНС = КодВидаДокументаФНС(ВыборкаДокументаФизлица.ВидДокумента);
		
		Если ВыборкаДокументаФизлица.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			Сведения.Гражданство = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставительФЛПоДаннымМЧД(ДанныеДоверенности) Экспорт
	
	ФИОПредставителей = Новый Массив;
	Для Каждого ФИО Из ДанныеДоверенности.ФИО Цикл
		Если ФИО.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ФИОПредставителей.Добавить(ФИО);
		КонецЕсли;
	КонецЦикла;
	
	ПредставителиПоФИО = ПредставителиМЧДПоФИО(ФИОПредставителей);
	
	ДанныеДокументовФЛПредставителей = Новый Массив;
	Для Каждого УдостоверениеЛичности Из ДанныеДоверенности.УдостоверенияЛичности Цикл
		Если УдостоверениеЛичности.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ДанныеДокументовФЛПредставителей.Добавить(УдостоверениеЛичности);
		КонецЕсли;
	КонецЦикла;
	
	ФизлицаСДокументами = ФизлицаИмеющиеДокументы(ПредставителиПоФИО, ДанныеДокументовФЛПредставителей);
	
	Если ФизлицаСДокументами.Количество() > 0 Тогда
		Возврат ФизлицаСДокументами[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыЭДПоСсылке(Знач Источник, ПараметрыЭД, ФорматCML = Ложь)
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияФайла = Неопределено;
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВерсииФайлов") Тогда 
		ВерсияФайла = Источник;
		Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Владелец.ВладелецФайла");
	КонецЕсли;
	
	ВариантыФормированияУниверсальныхДокументов = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов();
	
	ПараметрыЭД.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Контрагент");
	
	ПараметрыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ВидДокумента, Организация");	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ПараметрыЭД.Организация = ПараметрыИсточника.Организация;
	Иначе
		ПараметрыЭД.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	ТипВходящегоЭД = ТипВходящегоЭД(Источник);
	
	Если ТипВходящегоЭД <> Неопределено Тогда
		
		ПараметрыЭД.Тип = ТипВходящегоЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Входящий;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		ПараметрыЭД.Организация,
		ПараметрыЭД.Контрагент, 
		ПараметрыИсточника.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		ТипДокумента = Неопределено;
		Если ТипЗнч(НастройкиОтправки) <> Тип("Структура") Тогда
			ТипДокумента = Неопределено;
		Иначе
			НастройкиОтправки.Свойство("ТипДокумента", ТипДокумента);
			Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
				ТипДокументаИзФайла = ТипДокументаПоВерсииФайла(ВерсияФайла);
				Если ЗначениеЗаполнено(ТипДокументаИзФайла) Тогда
					ТипДокумента = ТипДокументаИзФайла;
				Иначе
					ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.Тип = ТипДокумента;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Исходящий;
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Обязательно;
			
		Иначе
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Запрещено;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЭДПоОбъекту(Знач Источник, ПараметрыЭД, ФорматCML = Ложь)
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда 
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Владелец, "ВладелецФайла");		
		Если ЗначениеЗаполнено(ВладелецФайла)
			И ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			ЗаполнитьПараметрыЭДПоСсылке(ВладелецФайла, ПараметрыЭД, ФорматCML);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыФормированияУниверсальныхДокументов = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов();
	
	ПараметрыЭД.Контрагент = Источник.Контрагент;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ПараметрыЭД.Организация = Источник.Организация;
	Иначе
		ПараметрыЭД.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	ТипВходящегоЭД = ТипВходящегоЭД(Источник.Ссылка);
	
	Если ТипВходящегоЭД <> Неопределено Тогда
		
		ПараметрыЭД.Тип = ТипВходящегоЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Входящий;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		ПараметрыЭД.Организация,
		ПараметрыЭД.Контрагент, 
		Источник.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		ТипДокумента = Неопределено;
		Если ТипЗнч(НастройкиОтправки) <> Тип("Структура") Тогда
			ТипДокумента = Неопределено;
		Иначе
			НастройкиОтправки.Свойство("ТипДокумента", ТипДокумента);
			Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
				ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.Тип = ТипДокумента;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Исходящий;
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Обязательно;
			
		Иначе
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Запрещено;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьМассивЭПКСравнению(МассивЭП, СоответствиеМассивов)
	
	МассивДляСравнения = Новый Массив;
	
	Для Каждого Элемент Из МассивЭП Цикл
		СоответствиеМассивов.Вставить(Элемент.Подпись, Элемент);
		МассивДляСравнения.Добавить(Элемент.Подпись);
	КонецЦикла;
	
	Возврат МассивДляСравнения;
	
КонецФункции

// Возвращает вид входящего электронного документа, связанного с текущим документом ДО
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы - Внутренний документ ДО
//              для которого необходимо определить вид входящего ЭД
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыДокументовЭДО - Вид входящего ЭД, если таковой имеется,
//       Неопределено - если входящих ЭД по документу нет.
Функция ТипВходящегоЭД(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И НЕ Файлы.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФайлыДокумента КАК ФайлыДокумента
		|		ПО ФайлыДокумента.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ВЫРАЗИТЬ(ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК
		|			Документ.ЭлектронныйДокументВходящийЭДО).ВидДокумента = ВидыДокументовЭДО.Ссылка
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.Актуальный
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТипДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТипДокументаПоВерсииФайла(ВерсияФайла)
	
	Если Не ЗначениеЗаполнено(ВерсияФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияФайла, "Владелец");
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		Файл,
		ВерсияФайла);
	
	Если ДанныеФайлаИДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВРег(ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение) <> "XML" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЭДФайла = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные);
	
	ПолучитьСообщенияПользователю(Истина);
	
	Если ТипЗнч(ДанныеЭДФайла) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеЭДФайла.НовыйЭД.ВидЭД;
	
КонецФункции

Функция ДанныеДляСинхронизацииСостояния(Источник)
	
	ОбъектыУчета = Источник.ВыгрузитьКолонку("СсылкаНаОбъект");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК ДокументДО,
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ВерсияФайла,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|	КОНЕЦ КАК Направление,
		|	СостояниеДокументовПоЭДО.СостояниеВерсииДокументаПоЭДО КАК СостояниеЗаписанное,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (ОбъектыУчетаДокументовЭДО.ОбъектУчета = Файлы.ТекущаяВерсия
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО КАК СостояниеДокументовПоЭДО
		|		ПО Файлы.ВладелецФайла = СостояниеДокументовПоЭДО.ДокументДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ОбъектыУчета)";
	
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДляСинхронизации = Новый Массив;
	
	Для Каждого Запись Из Источник.ЭтотОбъект Цикл
		СтруктураПоиска = Новый Структура("ВерсияФайла", Запись.СсылкаНаОбъект);
		
		Выборка.НайтиСледующий(СтруктураПоиска);
		
		Если Не ЗначениеЗаполнено(Выборка.ДокументДО)
			Или ТипЗнч(Выборка.ДокументДО) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ДанныеСостояния = Новый Структура;
		ДанныеСостояния.Вставить("ДокументДО", Выборка.ДокументДО);
		ДанныеСостояния.Вставить("Контрагент", Выборка.Контрагент);
		ДанныеСостояния.Вставить("Направление", Выборка.Направление);
		ДанныеСостояния.Вставить("СостояниеЭДО", Запись.СостояниеЭДО);
		ДанныеСостояния.Вставить("СостояниеЗаписанное", Выборка.СостояниеЗаписанное);
		ДанныеСостояния.Вставить("ТребуетсяПодтверждение", Выборка.ТребуетсяПодтверждение);
		
		ДанныеДляСинхронизации.Добавить(ДанныеСостояния);
		
	КонецЦикла;
	
	Возврат ДанныеДляСинхронизации;
	
КонецФункции

Функция ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи)
	
	Если НЕ ЗначениеЗаполнено(УстановленныеПодписи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СвойстваУстановленнойПодписи Из УстановленныеПодписи Цикл
		Если СвойстваУстановленнойПодписи.Подпись = СвойстваПодписи.Подпись Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область СвойстваЭДИзФайла

Функция СведенияОЭДФорматаФНС(ДанныеЭДФайла)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	ДеревоДанных = ДанныеЭДФайла.НовыйЭД.ЗначениеРеквизита;
	
	КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", Ложь);
	
	Если КодВалюты <> Неопределено Тогда
		
		Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтруктураВозврата.Валюта = Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СведенияОЭДФорматаCML(ДанныеЭДФайла)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	ДанныеДереваРазбора = ОбменСКонтрагентамиДО.ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	Если ДанныеДереваРазбора = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДанныеДокумента = ДанныеДереваРазбора.Документы.Получить(ДанныеЭДФайла.НовыйЭД.ИД);
	
	Если ДанныеДокумента.Свойство("Валюта") Тогда
		
		ДанныеВалюты = ОбменСКонтрагентамиДО.ДанныеВалютыПоДаннымCML(ДанныеДереваРазбора, ДанныеДокумента.Валюта);
		
		Если ДанныеВалюты <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеВалюты.Ссылка) Тогда
				СтруктураВозврата.Валюта = ДанныеВалюты.Ссылка;
			ИначеЕсли ЗначениеЗаполнено(ДанныеВалюты.Код) Тогда
				Валюта = Справочники.Валюты.НайтиПоКоду(ДанныеВалюты.Код);
				
				Если ЗначениеЗаполнено(Валюта) Тогда
					СтруктураВозврата.Валюта = Валюта;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПредставленияДокумента

Функция ПредставлениеДанныхПоФайлу(Файл, Версия, ПараметрыВизуализации) Экспорт
	
	Результат = НовыйРезультатПредставленияЭДО();
	
	Результат.Файл = Файл;
	Результат.Версия = Версия;
	
	Результат.Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	Результат.ДокументЭДО = ЭлектронныйДокументДокументаДО(Результат.Документ);
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(Файл, Версия);
	
	Расширение = ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение;
	
	Результат.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ПолноеНаименованиеВерсии, Расширение);
	
	Результат.ИндексКартинкиФайла = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	// Если это не xml файл, то он не формализованный и выводим результат просто так.
	Если ВРег(Расширение) <> "XML" Тогда
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	СведенияОФайле = СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	
	// Если не смогли прочитать -- это не является неуспехом. Просто он не формализованный. Выводим как файл.
	Если ТипЗнч(СведенияОФайле) <> Тип("Структура") Тогда
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	
	ВидДокумента = СведенияОФайле.ВидДокументаЭДО;
	ДвоичныеДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	
	ДвоичныеДанныеФайлаОтвета = ДвоичныеДанныеФайлаОтвета(Версия);
	
	РезультатПредставленияТабличногоДокумента =
		ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(
			ВидДокумента, ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета, ПараметрыВизуализации);
	
	Если ТипЗнч(РезультатПредставленияТабличногоДокумента) <> Тип("Структура")
		Или Не РезультатПредставленияТабличногоДокумента.Успех Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	ТабличныйДокумент = РезультатПредставленияТабличногоДокумента.ПредставлениеДокумента;
	
	ДополнитьВизуализациюШтампамиПодписей(ТабличныйДокумент, Файл, Версия);
	
	Результат.Успех = Истина;
	Результат.ТабличныйДокумент = ТабличныйДокумент;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеДанныхПоДокументу(Документ, ПараметрыВизуализации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Документ,
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК Версия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И НЕ Файлы.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Документ,
		|	ФайлыДокумента.Файл,
		|	ФайлыДокумента.Версия,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (ОбъектыУчетаДокументовЭДО.ОбъектУчета = ФайлыДокумента.Версия
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Документ,
		|	ФайлыДокумента.Файл,
		|	ФайлыДокумента.Версия
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов =  РезультатыЗапроса.Количество();
	
	ВыборкаПоСвязаннымДокументамЭДО = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаПоФайламКОтправке = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	КоличествоСвязанныхДокументовЭДО = ВыборкаПоСвязаннымДокументамЭДО.Количество();
	Если КоличествоСвязанныхДокументовЭДО > 0 Тогда
		
		Если КоличествоСвязанныхДокументовЭДО > 1 Тогда
			
			Результат = НовыйРезультатПредставленияЭДО();
			Результат.Документ = Документ;
			Результат.Успех = Ложь;
			Результат.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'С документом %1 по ЭДО.
					|В обмене по ЭДО может учавствовать документ только с одним файлом.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';связан %1 файл;;связано %1 файла;связано %1 файлов;связано %1 файлов'"),
					КоличествоСвязанныхДокументовЭДО));
			
			Возврат Результат;
			
		КонецЕсли;
		
		ВыборкаПоСвязаннымДокументамЭДО.Следующий();
		
		Возврат ПредставлениеДанныхПоФайлу(
			ВыборкаПоСвязаннымДокументамЭДО.Файл,
			ВыборкаПоСвязаннымДокументамЭДО.Версия,
			ПараметрыВизуализации);
		
	КонецЕсли;
	
	КоличествоФайловДляОтправки = ВыборкаПоФайламКОтправке.Количество();
	
	Если КоличествоФайловДляОтправки > 1 Тогда
		
		Результат = НовыйРезультатПредставленияЭДО();
		Результат.Документ = Документ;
		Результат.Успех = Ложь;
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'К документу %1 для отправки по ЭДО.
				|В обмене по ЭДО может учавствовать документ только с одним файлом.'"),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';прикреплен %1 файл;;прикреплено %1 файла;прикреплено %1 файлов;прикреплено %1 файлов'"),
				КоличествоФайловДляОтправки));
		
		Возврат Результат;
		
	ИначеЕсли КоличествоФайловДляОтправки <=0 Тогда
		
		Результат = НовыйРезультатПредставленияЭДО();
		Результат.Документ = Документ;
		Результат.Успех = Ложь;
		Результат.ОписаниеОшибки = 
			НСтр("ru = 'К документу не прикреплено файлов доступных к отправке по ЭДО.
				|Для обмена по ЭДО к документу должен быть прикреплен файл.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ВыборкаПоФайламКОтправке.Следующий();
	
	Возврат ПредставлениеДанныхПоФайлу(
		ВыборкаПоФайламКОтправке.Файл,
		ВыборкаПоФайламКОтправке.Версия,
		ПараметрыВизуализации);
	
КонецФункции

Функция ПредставлениеДанныхПоДокументуЭДО(ДокументЭДО, ПараметрыВизуализации)
	
	Результат = НовыйРезультатПредставленияЭДО();
	
	Результат.ДокументЭДО = ДокументЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК СообщениеЭДО,
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК ФайлЭДО,
		|	СообщениеЭДОПрисоединенныеФайлы.Расширение,
		|	СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = СообщениеЭДОПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ДокументЭДО
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
	Запрос.УстановитьПараметр("ДокументЭДО", ДокументЭДО);
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить файл ЭДО для визуализации.'");
		Возврат Результат;
	КонецЕсли;
	
	Расширение = Выборка.Расширение;
	СообщениеЭДО = Выборка.СообщениеЭДО;
	ФайлЭДО = Выборка.ФайлЭДО;
	
	Результат.Успех = Истина;
	Результат.ЭтоВизуализацияФайлаЭДО = Истина;
	Результат.ФайлЭДО = ФайлЭДО;
	Результат.ИмяФайла = Выборка.ПолноеИмяФайла;
	Результат.ИндексКартинкиФайла = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Если ВРег(Расширение) <> "XML" Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатВизуализацииЭДО =
		ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(СообщениеЭДО, , ПараметрыВизуализации);
	
	Если ТипЗнч(РезультатВизуализацииЭДО) <> Тип("Структура")
		Или Не РезультатВизуализацииЭДО.Успех Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.ТабличныйДокумент = РезультатВизуализацииЭДО.ПредставлениеДокумента;
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатПредставленияЭДО()
	
	РезультатПредставления = Новый Структура;
	РезультатПредставления.Вставить("Успех", Ложь);
	РезультатПредставления.Вставить("ОписаниеОшибки", "");
	РезультатПредставления.Вставить("Документ", Справочники.ВнутренниеДокументы.ПустаяСсылка());
	РезультатПредставления.Вставить("Файл", Справочники.Файлы.ПустаяСсылка());
	РезультатПредставления.Вставить("Версия", Справочники.ВерсииФайлов.ПустаяСсылка());
	РезультатПредставления.Вставить("ДокументЭДО", Неопределено);
	РезультатПредставления.Вставить("ФайлЭДО", Неопределено);
	РезультатПредставления.Вставить("ТабличныйДокумент", Неопределено);
	РезультатПредставления.Вставить("ИндексКартинкиФайла", 0);
	РезультатПредставления.Вставить("ИмяФайла", "");
	РезультатПредставления.Вставить("ЭтоВизуализацияФайлаЭДО", Ложь);
	
	Возврат РезультатПредставления;
	
КонецФункции

Функция ДанныеОтветногоТитула(ВерсияФайлаДО)
	
	ДанныеОтвета = Новый Структура;
	ДанныеОтвета.Вставить("Сообщение", Документы.СообщениеЭДО.ПустаяСсылка());
	ДанныеОтвета.Вставить("Файл", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
		|	СообщениеЭДО.Ссылка КАК СообщениеОтветногоТитула,
		|	СообщениеЭДО.ОсновнойФайл КАК ФайлОтветногоТитула
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	Запрос.УстановитьПараметр("ОбъектУчета", ВерсияФайлаДО);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеОтвета.Сообщение = Выборка.СообщениеОтветногоТитула;
		ДанныеОтвета.Файл = Выборка.ФайлОтветногоТитула;
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДвоичныеДанныеФайлаОтвета(ВерсияФайлаДО)
	
	ДанныеОтвета = ДанныеОтветногоТитула(ВерсияФайлаДО);
	ФайлОтвета = ДанныеОтвета.Файл;
	
	Если Не ЗначениеЗаполнено(ФайлОтвета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлОтвета);
	
	Возврат ДвоичныеДанныеФайлаОтвета;
	
КонецФункции

Процедура ДополнитьВизуализациюШтампамиПодписей(ТабличныйДокумент, ФайлДО ,ВерсияФайлаДО)
	
	ДанныеДляШтампа = ДанныеДляШтампаЭП(ФайлДО, ВерсияФайлаДО);
	
	Если ДанныеДляШтампа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляШтампа.ПодписиОтправителя.Количество() = 0
		И ДанныеДляШтампа.ПодписиПолучателя.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Штамп = КриптографияБЭД.ШтампЭлектроннойПодписи(ДанныеДляШтампа);
	
	ОбщегоНазначенияБЭД.ПрисоединитьОбластьКТабличномуДокументу(ТабличныйДокумент, Штамп, "Штамп");
	
КонецПроцедуры

Функция ДанныеДляШтампаЭП(ФайлДО, ВерсияФайлаДО)
	
	ДанныеДляФормированияШтампа = КриптографияБЭД.НовыеДанныеДляФормированияШтампа();
	
	ДокументДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлДО, "ВладелецФайла");
	
	Если Не ЗначениеЗаполнено(ДокументДО) Или Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ДокументДО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДокумента = ПараметрыДокументаПоЭДО(ДокументДО);
	Если ПараметрыДокумента <> Неопределено Тогда
		Направление = ПараметрыДокумента.Направление;
		СостояниеДО = ПараметрыДокумента.СостояниеДО;
	Иначе
		Направление = Перечисления.НаправленияЭДО.Исходящий;
		СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО, "Организация");
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлДО, ВерсияФайлаДО);
	СведенияОФайле = СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	
	ДанныеДляФормированияШтампа.ИдентификаторДокумента = СведенияОФайле.ИдентификаторДокумента;
	ДанныеДляФормированияШтампа.ЭтоИнформацияОтправителя = Истина;
	ДанныеДляФормированияШтампа.Организация = РеквизитыДокумента.Организация;
	ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент =
		(Направление = Перечисления.НаправленияЭДО.Исходящий);
	
	ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Подписан;
	Если Направление = Перечисления.НаправленияЭДО.Входящий
		И СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.Получен Тогда
		
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Получен;
		
	ИначеЕсли Направление = Перечисления.НаправленияЭДО.Исходящий
		И СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.Отправлен Тогда
		
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Отправлен;
		
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ОсновноеСостояние = ОсновноеСостояние;
	
	ДополнительноеСостояние = Неопределено;
	Если СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяПодтверждениеАннулирования
		Или СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ТребуетсяАннулировать Тогда
		
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().ВПроцессеАннулирования;
		
	ИначеЕсли СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.Аннулирован Тогда 
		
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().Аннулирован;
		
	ИначеЕсли СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяИсправление
		Или СостояниеДО = Перечисления.СостоянияЭДОДокументооборот.ТребуетсяУточнение Тогда 
		
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().Отклонен;
		
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ДополнительноеСостояние = ДополнительноеСостояние;
	
	ПодписиФайла = ПодписиСУчетомДоверенностиВФорматеБЭД(ВерсияФайлаДО);
	ПодписиОтветногоТитула = Новый Массив;
	
	ДанныеОтвета = ДанныеОтветногоТитула(ВерсияФайлаДО);
	Если ЗначениеЗаполнено(ДанныеОтвета.Сообщение) Тогда
		ПодписиОтветногоТитула = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ДанныеОтвета.Сообщение);
		ИсключитьПодписиОтветногоТитула(ПодписиФайла, ПодписиОтветногоТитула);
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ПодписиОтправителя = ПодписиФайла;
	ДанныеДляФормированияШтампа.ПодписиПолучателя = ПодписиОтветногоТитула;
	
	ДанныеДляФормированияШтампа.ЕстьОтветнаяПодпись = ЗначениеЗаполнено(ДанныеДляФормированияШтампа.ПодписиПолучателя)
		Или (Направление = Перечисления.НаправленияЭДО.Входящий
			И СостояниеДО <> Перечисления.СостоянияЭДОДокументооборот.НаПодписи);
	
	Возврат ДанныеДляФормированияШтампа;
	
КонецФункции

Функция ПодписиСУчетомДоверенностиВФорматеБЭД(ПодписанныйОбъект)
	
	ДанныеПодписиейСУчетомДоверенностей = Новый Массив;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПодписанныйОбъект);
	
	УникальныеИдентификаторы = Новый Массив;
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		УникальныеИдентификаторы.Добавить(Подпись.УникальныйИдентификатор);
	КонецЦикла;
	
	ДанныеДоверенностей = РаботаСЭП.ДанныеДоверенностейПодписей(УникальныеИдентификаторы);
	
	Доверенности = Новый Массив;
	Для Каждого Элемент Из ДанныеДоверенностей Цикл
		Доверенности.Добавить(Элемент.Значение.Доверенность);
	КонецЦикла;
	
	СвойстваДоверенностей = МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенностей(Доверенности);
	
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		
		ДанныеПодписи = ЭлектронныеДокументыЭДО.НовыеДанныеПодписиСУчетомДоверенности();
		
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись");
		СвойстваПодписи.Вставить("ВидПодписи");
		СвойстваПодписи.Вставить("УстановившийПодпись");
		СвойстваПодписи.Вставить("Комментарий");
		СвойстваПодписи.Вставить("ИмяФайлаПодписи");
		СвойстваПодписи.Вставить("ДатаПодписи");
		СвойстваПодписи.Вставить("ДатаПроверкиПодписи");
		СвойстваПодписи.Вставить("ПодписьВерна");
		СвойстваПодписи.Вставить("ПорядковыйНомер");
		СвойстваПодписи.Вставить("Сертификат");
		СвойстваПодписи.Вставить("Отпечаток");
		СвойстваПодписи.Вставить("Владелец");
		СвойстваПодписи.Вставить("Должность");
		СвойстваПодписи.Вставить("УникальныйИдентификатор");
		
		ЗаполнитьЗначенияСвойств(СвойстваПодписи, Подпись);
		СвойстваПодписи.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
		СвойстваПодписи.Владелец = Подпись.КомуВыданСертификат;
		
		ДанныеПодписи.СвойстваПодписи = СвойстваПодписи;
		
		ДанныеДоверенности = ДанныеДоверенностей[Подпись.УникальныйИдентификатор];
		Если ДанныеДоверенности = Неопределено Тогда
			ДанныеПодписи.ЭтоПодписьПоДоверенности = Ложь;
			ДанныеПодписиейСУчетомДоверенностей.Добавить(ДанныеПодписи);
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписи.ЭтоПодписьПоДоверенности = Истина;
		
		РезультатПроверкиПодписи = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
		РезультатПроверкиПодписи.ДатаПроверки = ДанныеДоверенности.ДатаПроверкиДоверенности;
		РезультатПроверкиПодписи.Доверенность = ДанныеДоверенности.Доверенность;
		РезультатПроверкиПодписи.ПодписьВерна = ДанныеДоверенности.ДоверенностьВерна;
		РезультатПроверкиПодписи.ПротоколПроверки = ДанныеДоверенности.ПротоколПроверкиДоверенности;
		
		ДанныеПодписи.РезультатПроверкиПоМЧД = РезультатПроверкиПодписи;
		ДанныеПодписи.СвойстваДоверенности = СвойстваДоверенностей[ДанныеДоверенности.Доверенность];
		
		ДанныеПодписиейСУчетомДоверенностей.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	Возврат ДанныеПодписиейСУчетомДоверенностей;
	
КонецФункции

Процедура ИсключитьПодписиОтветногоТитула(ПодписиФайла, ПодписиОтветногоТитула)
	
	КлючиПодписейОтветногоТитула = Новый Соответствие;
	
	Для Каждого ДанныеПодписи Из ПодписиОтветногоТитула Цикл
		Ключ = КлючПодписиСДоверенностью(ДанныеПодписи);
		КлючиПодписейОтветногоТитула.Вставить(Ключ, Истина);
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ПодписиФайла.Количество() Цикл
		
		ДанныеПодписи = ПодписиФайла[Счетчик];
		Ключ = КлючПодписиСДоверенностью(ДанныеПодписи);
		Если КлючиПодписейОтветногоТитула[Ключ] = Истина Тогда
			ПодписиФайла.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючПодписиСДоверенностью(ДанныеПодписи)
	
	Отпечаток = ДанныеПодписи.СвойстваПодписи.Отпечаток;
	
	Если ДанныеПодписи.ЭтоПодписьПоДоверенности Тогда
		НомерДоверенности = ДанныеПодписи.СвойстваДоверенности.НомерДоверенности;
	Иначе
		НомерДоверенности = УникальныйИдентификаторПустой();
	КонецЕсли;
	
	Возврат СтрШаблон("%1_%2", Отпечаток, НомерДоверенности);
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсЭДО

Процедура УстановитьВидимостьДоступностьКомандыПоДействию(Действие, КомандыДействий,
		Видимость, Доступность, Отбор = Неопределено)
	
	ОтборКоманд = Отбор;
	
	Если ОтборКоманд = Неопределено Тогда
		ОтборКоманд = Новый Структура;
	КонецЕсли;
	
	КомандыПоДействию = КомандыДействий.Получить(Действие);
	
	Если КомандыПоДействию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеКоманды Из КомандыПоДействию Цикл
		
		УстанавливатьВидимостьДоступность = Истина;
		
		Для Каждого Элемент Из ОтборКоманд Цикл
			Если Не ОписаниеКоманды.Свойство(Элемент.Ключ)
				Или ОписаниеКоманды[Элемент.Ключ] <> Элемент.Значение Тогда
				
				УстанавливатьВидимостьДоступность = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УстанавливатьВидимостьДоступность Тогда
			ЭлементФормы = ОписаниеКоманды.ЭлементФормы;
			
			ЭлементФормы.Видимость = Видимость;
			ЭлементФормы.Доступность = Доступность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДействиеВВозможных(ВозможныеДействия, Действие)
	
	Возврат ВозможныеДействия.Получить(Действие) <> Неопределено;
	
КонецФункции

#Область РаботаСТаблицейСертификатовЭДО

Процедура ЗаполнитьТаблицуСертификатов(ДокументДО, ПараметрыЭДО, Форма)
	
	ЗаполнитьДоступностьСертификатовПоЭДО(ДокументДО, ПараметрыЭДО, Форма);
	
	ЗаполнитьДоступностьСертификатовНаСервере(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьДоступностьСертификатовПоЭДО(ДокументДО, ПараметрыЭДО, Форма)
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенДляЭДО = Ложь;
	КонецЦикла;
	
	Если ПараметрыЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДУчетнойЗаписи = Неопределено;
	
	Если ПараметрыЭДО.ЕстьЭД И ЗначениеЗаполнено(ПараметрыЭДО.ЭлектронныйДокумент) Тогда
		
		ИДУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыЭДО.ЭлектронныйДокумент, "ИдентификаторОрганизации");
		
	Иначе
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументДО, "Организация, Контрагент");
		
		ВидДокументаПрочее = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.Прочее);
		
		ВидДокументаЭДО = ?(ЗначениеЗаполнено(ПараметрыЭДО.ВидДокументаЭДО),
			ПараметрыЭДО.ВидДокументаЭДО,
			ВидДокументаПрочее);
		
		КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправки.Отправитель = РеквизитыДокумента.Организация;
		КлючНастроекОтправки.Получатель = РеквизитыДокумента.Контрагент;
		КлючНастроекОтправки.ВидДокумента = ВидДокументаЭДО;
		
		НастройкаОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
		
		Если НастройкаОтправки <> Неопределено Тогда
			ИДУчетнойЗаписи = НастройкаОтправки.ИдентификаторОтправителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИДУчетнойЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСертификатов = ВыборкаСертификатовПоУчетнойЗаписи(ИДУчетнойЗаписи);
	
	Пока ВыборкаСертификатов.Следующий() Цикл
		
		ОтборСертификата = Новый Структура("Отпечаток", ВыборкаСертификатов.Отпечаток);
		СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
		
		Если СтрокиСуществующие.Количество() = 0 Тогда
			
			НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
			НоваяСтрока.Отпечаток = ВыборкаСертификатов.Отпечаток;
			НоваяСтрока.ДоступенДляЭДО = Истина;
			НоваяСтрока.Доверенность = ВыборкаСертификатов.Доверенность;
			
		Иначе
			
			Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
				СтрокаСуществующая.ДоступенДляЭДО = Истина;
				СтрокаСуществующая.Доверенность = ВыборкаСертификатов.Доверенность;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаСертификатовПоУчетнойЗаписи(ИДУчетнойЗаписи)
	
	ОтборСертификатов = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	ОтборСертификатов.УчетныеЗаписи = "&Идентификаторы";
	ОтборСертификатов.ТолькоДействительные = Истина;
	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей(
		"СертификатыУчетныхЗаписей", ОтборСертификатов));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СертификатыУчетныхЗаписей.Сертификат КАК Сертификат,
		|	СертификатыУчетныхЗаписей.Сертификат.Отпечаток КАК Отпечаток,
		|	СертификатыУчетныхЗаписей.Доверенность КАК Доверенность
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Идентификаторы", ИДУчетнойЗаписи);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура ЗаполнитьДоступностьСертификатовНаСервере(Форма)
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенНаСервере = Ложь;
	КонецЦикла;
	
	Если Не ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатов", Ложь);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСертификатовКриптографии = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	ВсеСертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе();
	
	Для Каждого Сертификат Из ВсеСертификаты Цикл
		
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		
		ОтборСертификата = Новый Структура("Отпечаток", Отпечаток);
		СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
		
		Если СтрокиСуществующие.Количество() = 0 Тогда
			
			НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
			НоваяСтрока.Отпечаток = Отпечаток;
			НоваяСтрока.ДоступенНаСервере = Истина;
			
		Иначе
			
			Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
				СтрокаСуществующая.ДоступенНаСервере = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ДокументЭДОТребуетОтражения(ДокументЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.Ссылка
		|ИЗ
		|	РегистрСведений.ОчередьПриемаСообщенийЭДО КАК ОчередьПриемаСообщенийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщенияЭДО
		|		ПО ОчередьПриемаСообщенийЭДО.СообщениеЭДО = СообщенияЭДО.Ссылка
		|ГДЕ
		|	СообщенияЭДО.ЭлектронныйДокумент = &ДокументЭДО
		|	И СообщенияЭДО.ТипЭлементаРегламента = &ИнформацияОтправителя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Поле1
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЭДОКИсправлению КАК ОшибкиЭДОКИсправлению
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ОшибкиЭДОКИсправлению.ПредметОшибки
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ДокументЭДО
		|	И СообщениеЭДО.ТипЭлементаРегламента = &ИнформацияОтправителя";
	Запрос.УстановитьПараметр("ДокументЭДО", ДокументЭДО);
	Запрос.УстановитьПараметр("ИнформацияОтправителя", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СпискиДокументовЭДО

#Область ДокументыИсходящие

Функция ТекстЗапросаИсходящихДокументовЭДО()
	
	Возврат
		"ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.ДокументДО,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК Состояние
		|ПОМЕСТИТЬ ДокументыИсходящие
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(,
		|		НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)) КАК СостояниеДокументовПоЭДОСрезПоследних
		|ГДЕ
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО В (&СостоянияДляСписка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыИсходящие.ДокументДО,
		|	ДокументыИсходящие.Состояние,
		|	ДокументыДО.Организация,
		|	ДокументыДО.Контрагент,
		|	ДокументыДО.ВидДокумента,
		|	ЕСТЬNULL(СоставПакетовЭДОДокументооборот.ИдентификаторПакета, &ПустойИдентификатор) КАК ИдентификаторПакета
		|ПОМЕСТИТЬ ДокументыБезОтборов
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ДокументыДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыИсходящие КАК ДокументыИсходящие
		|		ПО ДокументыИсходящие.ДокументДО = ДокументыДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО ДокументыДО.Ссылка = СоставПакетовЭДОДокументооборот.Документ
		|ГДЕ
		|	&ОтборОрганизации
		|	И &ОтборКонтрагента
		|	И Не ДокументыДО.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыБезОтборов.ДокументДО,
		|	ДокументыБезОтборов.Организация,
		|	ДокументыБезОтборов.Контрагент,
		|	ДокументыБезОтборов.ВидДокумента,
		|	ДокументыБезОтборов.Состояние,
		|	ДокументыБезОтборов.ИдентификаторПакета
		|ПОМЕСТИТЬ ДокументыСОтборами
		|ИЗ
		|	ДокументыБезОтборов КАК ДокументыБезОтборов
		|ГДЕ
		|	&ОтборВидаДокумента
		|	И &ОтборСостояния
		|	И &ОтборТипаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыСОтборами.ИдентификаторПакета
		|ПОМЕСТИТЬ ПакетыСодержащиеДокументыСОтборами
		|ИЗ
		|	ДокументыСОтборами КАК ДокументыСОтборами
		|ГДЕ
		|	ДокументыСОтборами.ИдентификаторПакета <> &ПустойИдентификатор
		|СГРУППИРОВАТЬ ПО
		|	ДокументыСОтборами.ИдентификаторПакета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыСОтборами.ВидДокумента,
		|	ДокументыСОтборами.ДокументДО,
		|	ДокументыСОтборами.ИдентификаторПакета,
		|	ДокументыСОтборами.Контрагент,
		|	ДокументыСОтборами.Организация,
		|	ДокументыСОтборами.Состояние
		|ПОМЕСТИТЬ ОдиночныеДокументыСОтборами
		|ИЗ
		|	ДокументыСОтборами КАК ДокументыСОтборами
		|ГДЕ
		|	ДокументыСОтборами.ИдентификаторПакета = &ПустойИдентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПакетыСодержащиеДокументыСОтборами.ИдентификаторПакета,
		|	ДокументыБезОтборов.ДокументДО,
		|	ДокументыБезОтборов.Организация,
		|	ДокументыБезОтборов.Контрагент,
		|	ДокументыБезОтборов.ВидДокумента,
		|	ДокументыБезОтборов.Состояние,
		|	ДокументыБезОтборов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭДОДокументооборот.НеСформирован) КАК ПодписанЭП
		|ИЗ
		|	ПакетыСодержащиеДокументыСОтборами КАК ПакетыСодержащиеДокументыСОтборами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыБезОтборов КАК ДокументыБезОтборов
		|		ПО ПакетыСодержащиеДокументыСОтборами.ИдентификаторПакета = ДокументыБезОтборов.ИдентификаторПакета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОдиночныеДокументыСОтборами.ИдентификаторПакета,
		|	ОдиночныеДокументыСОтборами.ДокументДО,
		|	ОдиночныеДокументыСОтборами.Организация,
		|	ОдиночныеДокументыСОтборами.Контрагент,
		|	ОдиночныеДокументыСОтборами.ВидДокумента,
		|	ОдиночныеДокументыСОтборами.Состояние,
		|	ОдиночныеДокументыСОтборами.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭДОДокументооборот.НеСформирован)
		|ИЗ
		|	ОдиночныеДокументыСОтборами КАК ОдиночныеДокументыСОтборами";
	
КонецФункции

Процедура УстановитьПараметрыЗапросаИсходящих(Запрос, Отбор)
	
	СостоянияДляСписка = Новый Массив;
	СостоянияДляСписка.Добавить(Перечисления.СостоянияЭДОДокументооборот.НеСформирован);
	СостоянияДляСписка.Добавить(Перечисления.СостоянияЭДОДокументооборот.Подписан);
	СостоянияДляСписка.Добавить(Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку);
	СостоянияДляСписка.Добавить(Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка);
	СостоянияДляСписка.Добавить(Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО);
	
	Запрос.УстановитьПараметр("СостоянияДляСписка", СостоянияДляСписка);
	
	Если ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("Действия")
		И Отбор.Действия = "Подписание" Тогда
		
		СостоянияПоДействию = Новый Массив;
		СостоянияПоДействию.Добавить(Перечисления.СостоянияЭДОДокументооборот.НеСформирован);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборСостояния",
			"ДокументыБезОтборов.Состояние В (&СостоянияПоДействию)");
		
		Запрос.УстановитьПараметр("СостоянияПоДействию", СостоянияПоДействию);
		
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("Действия")
		И Отбор.Действия = "Отправка" Тогда
		
		СостоянияПоДействию = Новый Массив;
		СостоянияПоДействию.Добавить(Перечисления.СостоянияЭДОДокументооборот.Подписан);
		СостоянияПоДействию.Добавить(Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку);
		СостоянияПоДействию.Добавить(Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка);
		СостоянияПоДействию.Добавить(Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборСостояния",
			"ДокументыБезОтборов.Состояние В (&СостоянияПоДействию)");
		
		Запрос.УстановитьПараметр("СостоянияПоДействию", СостоянияПоДействию);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборСостояния",
			"Истина");
		
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("Организация")
		И ЗначениеЗаполнено(Отбор.Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборОрганизации",
			"ДокументыДО.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", Отбор.Организация);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборОрганизации",
			"Истина");
		
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("Контрагент")
		И ЗначениеЗаполнено(Отбор.Контрагент) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборКонтрагента",
			"ДокументыДО.Контрагент = &Контрагент");
		
		Запрос.УстановитьПараметр("Контрагент", Отбор.Контрагент);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборКонтрагента",
			"Истина");
		
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("ВидДокумента")
		И ЗначениеЗаполнено(Отбор.ВидДокумента) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборВидаДокумента",
			"ДокументыБезОтборов.ВидДокумента = &ВидДокумента");
		
		Запрос.УстановитьПараметр("ВидДокумента", Отбор.ВидДокумента);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборВидаДокумента",
			"Истина");
		
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("Объекты")
		И Отбор.Объекты = "Документы" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборТипаОбъектов",
			"ДокументыБезОтборов.ИдентификаторПакета = &ПустойИдентификатор");
		
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("Объекты")
		И Отбор.Объекты = "Пакеты" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборТипаОбъектов",
			"ДокументыБезОтборов.ИдентификаторПакета <> &ПустойИдентификатор");
		
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборТипаОбъектов",
			"Истина");
		
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВыделенныхОбъектов(ДанныеВыделенныхСтрок)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Пакеты", Новый Соответствие);
	СтруктураВозврата.Вставить("Документы", Новый Соответствие);
	
	ПакетыВыделенные = Новый Соответствие;
	ДокументыВыделенные = Новый Соответствие;
	
	Для Каждого ДанныеСтроки Из ДанныеВыделенныхСтрок Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторПакета) Тогда
			ПакетыВыделенные.Вставить(ДанныеСтроки.ИдентификаторПакета, Истина);
		Иначе
			ДокументыВыделенные.Вставить(ДанныеСтроки.Документ, Истина)
		КонецЕсли;
	КонецЦикла;
	
	УникальныеПакеты = Новый Массив;
	УникальныеДокументы = Новый Массив;
	
	Для Каждого Элемент Из ПакетыВыделенные Цикл
		УникальныеПакеты.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из ДокументыВыделенные Цикл
		УникальныеДокументы.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныхВыбранныхИсходящихДокументов();
	Запрос.УстановитьПараметр("Пакеты", УникальныеПакеты);
	Запрос.УстановитьПараметр("Документы", УникальныеДокументы);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КолвоПакетов = МассивРезультатов.Количество();
	
	ВыборкаДокументов = МассивРезультатов[КолвоПакетов - 4].Выбрать();
	ВыборкаСостояний = МассивРезультатов[КолвоПакетов - 3].Выбрать();
	ВыборкаФайлов = МассивРезультатов[КолвоПакетов - 2].Выбрать();
	ВыборкаОрганизацийИКонтрагентов = МассивРезультатов[КолвоПакетов - 1].Выбрать();
	
	ДанныеПоДокументам = Новый Соответствие;
	
	Пока ВыборкаСостояний.Следующий() Цикл
		
		ДанныеДокумента = ДанныеПоДокументам.Получить(ВыборкаСостояний.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			ДанныеДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
			ДанныеДокумента.Вставить("Состояние", Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка());
			ДанныеДокумента.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
			ДанныеДокумента.Вставить("Файлы", Новый Массив);
			
			ДанныеПоДокументам.Вставить(ВыборкаСостояний.Документ, ДанныеДокумента);
		КонецЕсли;
		
		ДанныеДокумента.Состояние = ВыборкаСостояний.Состояние;
		
	КонецЦикла;
	
	Пока ВыборкаФайлов.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаФайлов.Файл) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента = ДанныеПоДокументам.Получить(ВыборкаФайлов.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			ДанныеДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
			ДанныеДокумента.Вставить("Состояние", Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка());
			ДанныеДокумента.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
			ДанныеДокумента.Вставить("Файлы", Новый Массив);
			
			ДанныеПоДокументам.Вставить(ВыборкаФайлов.Документ, ДанныеДокумента);
		КонецЕсли;
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Файл", ВыборкаФайлов.Файл);
		ДанныеФайла.Вставить("Расширение", ВыборкаФайлов.Расширение);
		
		ДанныеДокумента.Файлы.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	Пока ВыборкаОрганизацийИКонтрагентов.Следующий() Цикл
		
		ДанныеДокумента = ДанныеПоДокументам.Получить(ВыборкаОрганизацийИКонтрагентов.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			ДанныеДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
			ДанныеДокумента.Вставить("Состояние", Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка());
			ДанныеДокумента.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
			ДанныеДокумента.Вставить("Файлы", Новый Массив);
			
			ДанныеПоДокументам.Вставить(ВыборкаОрганизацийИКонтрагентов.Документ, ДанныеДокумента);
		КонецЕсли;
		
		ДанныеДокумента.Организация = ВыборкаОрганизацийИКонтрагентов.Организация;
		ДанныеДокумента.Контрагент = ВыборкаОрганизацийИКонтрагентов.Контрагент;
		
	КонецЦикла;
	
	СпособыОбмена = СпособыОбменаЭДОПоДокументамДО(УникальныеДокументы);
	
	Для Каждого Элемент Из СпособыОбмена Цикл
		
		Документ = Элемент.Ключ;
		СпособОбмена = Элемент.Значение;
		
		ДанныеДокумента = ДанныеПоДокументам.Получить(Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			ДанныеДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
			ДанныеДокумента.Вставить("Состояние", Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка());
			ДанныеДокумента.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
			ДанныеДокумента.Вставить("Файлы", Новый Массив);
			
			ДанныеПоДокументам.Вставить(ВыборкаОрганизацийИКонтрагентов.Документ, ДанныеДокумента);
		КонецЕсли;
		
		ДанныеДокумента.СпособОбмена = СпособОбмена;
		
	КонецЦикла;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДокументов.ИдентификаторПакета) Тогда
			
			СтруктураВозврата.Документы.Вставить(ВыборкаДокументов.Документ,
				ДанныеПоДокументам[ВыборкаДокументов.Документ]);
			
		Иначе
			
			ДокументыПакета = СтруктураВозврата.Пакеты.Получить(ВыборкаДокументов.ИдентификаторПакета);
			
			Если ДокументыПакета = Неопределено Тогда
				ДокументыПакета = Новый Соответствие;
				СтруктураВозврата.Пакеты.Вставить(ВыборкаДокументов.ИдентификаторПакета, ДокументыПакета);
			КонецЕсли;
			
			ДокументыПакета.Вставить(ВыборкаДокументов.Документ,
				ДанныеПоДокументам[ВыборкаДокументов.Документ]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТекстЗапросаДанныхВыбранныхИсходящихДокументов()
	Возврат
		"ВЫБРАТЬ
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета,
		|	СоставПакетовЭДОДокументооборот.Документ
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|ГДЕ
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета В (&Пакеты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	ДокументыДО.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ДокументыДО
		|ГДЕ
		|	ДокументыДО.Ссылка В (&Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	ЕСТЬNULL(СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО,
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЭДОДокументооборот.ПустаяСсылка)) КАК Состояние
		|ПОМЕСТИТЬ СостоянияДокументов
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних КАК СостояниеДокументовПоЭДОСрезПоследних
		|		ПО Документы.Документ = СостояниеДокументовПоЭДОСрезПоследних.ДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия.Расширение КАК Расширение
		|ПОМЕСТИТЬ ВсеФайлыДокументов
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО Файлы.ВладелецФайла = Документы.Документ
		|		И НЕ Файлы.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеФайлыДокументов.Документ,
		|	ВсеФайлыДокументов.Файл КАК Файл,
		|	ВсеФайлыДокументов.Расширение КАК Расширение
		|ПОМЕСТИТЬ ФайлыДокументовДляОтправки
		|ИЗ
		|	ВсеФайлыДокументов КАК ВсеФайлыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО ВсеФайлыДокументов.Файл = СлужебныеФайлыДокументов.Файл
		|ГДЕ
		|	СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	ДокументыДО.Организация,
		|	ДокументыДО.Контрагент
		|ПОМЕСТИТЬ ОрганизацииИКонтрагенты
		|ИЗ
		|	Документы КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ДокументыДО
		|		ПО Документы.Документ = ДокументыДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.ИдентификаторПакета,
		|	Документы.Документ
		|ИЗ
		|	Документы КАК Документы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияДокументов.Документ,
		|	СостоянияДокументов.Состояние
		|ИЗ
		|	СостоянияДокументов КАК СостоянияДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокументовДляОтправки.Документ,
		|	ФайлыДокументовДляОтправки.Файл,
		|	ФайлыДокументовДляОтправки.Расширение
		|ИЗ
		|	ФайлыДокументовДляОтправки КАК ФайлыДокументовДляОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацииИКонтрагенты.Документ,
		|	ОрганизацииИКонтрагенты.Контрагент,
		|	ОрганизацииИКонтрагенты.Организация
		|ИЗ
		|	ОрганизацииИКонтрагенты КАК ОрганизацииИКонтрагенты";
КонецФункции

Функция ДеревоФайловПоДаннымОбъектов(ДанныеОбъектов)
	
	ДеревоФайлов = Новый ДеревоЗначений;
	ДеревоФайлов.Колонки.Добавить("ИдентификаторПакета");
	ДеревоФайлов.Колонки.Добавить("Документ");
	ДеревоФайлов.Колонки.Добавить("Файл");
	ДеревоФайлов.Колонки.Добавить("ПодписанЭП");
	ДеревоФайлов.Колонки.Добавить("ИндексКартинкиЭП");
	ДеревоФайлов.Колонки.Добавить("ПредставлениеЭлемента");
	ДеревоФайлов.Колонки.Добавить("ИндексКартинкиФайла");
	
	ВыбранОдинПакет = (ДанныеОбъектов.Пакеты.Количество() = 1 И ДанныеОбъектов.Документы.Количество() = 0);
	
	// Если выбран один пакет, то обработка происходит иначе -- просто кидаем все данные в корень.
	Если ВыбранОдинПакет Тогда
		
		Для Каждого ЭлементПакета Из ДанныеОбъектов.Пакеты Цикл
			Для Каждого ЭлементДокумента Из ЭлементПакета.Значение Цикл
				Документ = ЭлементДокумента.Ключ;
				ДанныеДокумента = ЭлементДокумента.Значение;
				
				СтрокаДокумента = ДеревоФайлов.Строки.Добавить();
				
				ЗаполнитьДанныеСтрокиДереваДокумента(
					СтрокаДокумента, Документ, ДанныеДокумента, ЭлементПакета.Ключ);
			КонецЦикла;
		КонецЦикла;
		
		Возврат ДеревоФайлов;
		
	КонецЕсли;
	
	Для Каждого ЭлементПакета Из ДанныеОбъектов.Пакеты Цикл
		
		ИдентификаторПакета = ЭлементПакета.Ключ;
		ДокументыПакета = ЭлементПакета.Значение;
		
		СтрокаПакета = ДеревоФайлов.Строки.Добавить();
		
		СтрокаПакета.ИдентификаторПакета = ИдентификаторПакета;
		СтрокаПакета.ПредставлениеЭлемента = СтрШаблон(
			НСтр("ru = 'Пакет ЭДО (%1)'"),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'"),
				ДокументыПакета.Количество()));
		
		ИндексКартинкиЭППакета = Неопределено;
		
		Для Каждого ЭлементДокумента Из ДокументыПакета Цикл
			
			Документ = ЭлементДокумента.Ключ;
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			СтрокаДокумента = СтрокаПакета.Строки.Добавить();
			
			ЗаполнитьДанныеСтрокиДереваДокумента(
				СтрокаДокумента, Документ, ДанныеДокумента, ИдентификаторПакета);
			
			Если ИндексКартинкиЭППакета = Неопределено Тогда
				
				ИндексКартинкиЭППакета = СтрокаДокумента.ИндексКартинкиЭП;
				
			ИначеЕсли СтрокаДокумента.ИндексКартинкиЭП <> ИндексКартинкиЭППакета Тогда 
				
				ИндексКартинкиЭППакета = 1
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПакета.ИндексКартинкиЭП = ИндексКартинкиЭППакета;
		СтрокаПакета.ПодписанЭП = (ИндексКартинкиЭППакета = 2);
		СтрокаПакета.ИндексКартинкиФайла = -1;
		
	КонецЦикла;
	
	Для Каждого ЭлементДокумента Из ДанныеОбъектов.Документы Цикл
		
		Документ = ЭлементДокумента.Ключ;
		ДанныеДокумента = ЭлементДокумента.Значение;
		
		СтрокаДокумента = ДеревоФайлов.Строки.Добавить();
		
		ЗаполнитьДанныеСтрокиДереваДокумента(
			СтрокаДокумента, Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДеревоФайлов;
	
КонецФункции

Процедура ЗаполнитьДанныеСтрокиДереваДокумента(СтрокаДокумента, Документ,
	ДанныеДокумента, ИдентификаторПакета = Неопределено)
	
	СтрокаДокумента.ИдентификаторПакета = ИдентификаторПакета;
	СтрокаДокумента.Документ = Документ;
	СтрокаДокумента.ПодписанЭП =
		(ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован);
	СтрокаДокумента.ИндексКартинкиЭП = ?(СтрокаДокумента.ПодписанЭП, 2, 0);
	
	Если ДанныеДокумента.Файлы.Количество() = 0 Тогда
		
		СтрокаДокумента.ПредставлениеЭлемента = СтрШаблон(
			НСтр("ru = '(нет файлов) %1'"),
			Документ);
		
		СтрокаДокумента.ИндексКартинкиФайла = -1;
		
	ИначеЕсли ДанныеДокумента.Файлы.Количество() > 1 Тогда
		
		СтрокаДокумента.ПредставлениеЭлемента = СтрШаблон(
			НСтр("ru = '(%2) %1'"),
			Документ,
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 файл;;%1 файла;%1 файлов;%1 файлов'"),
				ДанныеДокумента.Файлы.Количество()));
		
		СтрокаДокумента.ИндексКартинкиФайла = -1;
		
	Иначе
		
		ДанныеФайла = ДанныеДокумента.Файлы[0];
		
		СтрокаДокумента.ПредставлениеЭлемента = Строка(ДанныеФайла.Файл);
		
		СтрокаДокумента.Файл = ДанныеФайла.Файл;
		СтрокаДокумента.ИндексКартинкиФайла =
			ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОрганизацииИКонтрагентыВыбранныхДанныхОбъектов(ДанныеОбъектов)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Организации", Новый Массив);
	СтруктураВозврата.Вставить("Контрагенты", Новый Массив);
	
	УникальныеОрганизации = Новый Соответствие;
	УникальныеКонтрагенты = Новый Соответствие;
	
	Для Каждого ЭлементПакета Из ДанныеОбъектов.Пакеты Цикл
		
		Для Каждого ЭлементДокумента Из ЭлементПакета.Значение Цикл
			
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			Если УникальныеОрганизации[ДанныеДокумента.Организация] = Неопределено Тогда
				УникальныеОрганизации.Вставить(ДанныеДокумента.Организация, Истина);
			КонецЕсли;
			
			Если УникальныеКонтрагенты[ДанныеДокумента.Контрагент] = Неопределено Тогда
				УникальныеКонтрагенты.Вставить(ДанныеДокумента.Контрагент, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементДокумента Из ДанныеОбъектов.Документы Цикл
		
		ДанныеДокумента = ЭлементДокумента.Значение;
		
		Если УникальныеОрганизации[ДанныеДокумента.Организация] = Неопределено Тогда
			УникальныеОрганизации.Вставить(ДанныеДокумента.Организация, Истина);
		КонецЕсли;
		
		Если УникальныеКонтрагенты[ДанныеДокумента.Контрагент] = Неопределено Тогда
			УникальныеКонтрагенты.Вставить(ДанныеДокумента.Контрагент, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеОрганизации Цикл
		СтруктураВозврата.Организации.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеКонтрагенты Цикл
		СтруктураВозврата.Контрагенты.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДоступныеДействияПоВыделеннымИсходящимОбъектам(ДанныеОбъектов, Организации, Контрагенты)
	
	ДоступныеДействия = Новый Соответствие;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.БлокироватьОбменСВнешнимиРесурсами() Тогда
		Возврат ДоступныеДействия;
	КонецЕсли;
	
	Если Организации.Количество() <> 1
		Или Контрагенты.Количество() <> 1 Тогда
		
		Возврат ДоступныеДействия;
	КонецЕсли;
	
	// Если в каком либо документе нет файлов или их больше 1, то действия нельзя выполнять вообще.
	Для Каждого ЭлементПакета Из ДанныеОбъектов.Пакеты Цикл
		ДокументыПакета = ЭлементПакета.Значение;
		
		Для Каждого ЭлементДокумента Из ДокументыПакета Цикл
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			Если ДанныеДокумента.Файлы.Количество() = 0
				Или ДанныеДокумента.Файлы.Количество() > 1 Тогда
				
				Возврат ДоступныеДействия;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементДокумента Из ДанныеОбъектов.Документы Цикл
		ДанныеДокумента = ЭлементДокумента.Значение;
		
		Если ДанныеДокумента.Файлы.Количество() = 0
			Или ДанныеДокумента.Файлы.Количество() > 1 Тогда
			
			Возврат ДоступныеДействия;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеОбъектов.Пакеты.Количество() = 0
		И ДанныеОбъектов.Документы.Количество() > 0 Тогда
		
		ДоступныДействияСПакетом = Истина;
		
		Для Каждого Элемент Из ДанныеОбъектов.Документы Цикл
			
			ДанныеДокумента = Элемент.Значение;
			
			Если ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован
				И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан
				И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
				
				ДоступныДействияСПакетом = Ложь;
				Прервать;
			КонецЕсли;
			
			Если Не СпособОбменаПоддерживаетПакетнуюОбработку(ДанныеДокумента.СпособОбмена) Тогда
				ДоступныДействияСПакетом = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступныДействияСПакетом Тогда
			ДоступныеДействия.Вставить("СоздатьПакет", Истина);
			
			Если ДанныеОбъектов.Документы.Количество() = 1 Тогда
				
				ДоступныеДействия.Вставить("ДобавитьКПакету", Истина);
				
			КонецЕсли;
		КонецЕсли;
				
	ИначеЕсли ДанныеОбъектов.Документы.Количество() = 0
		И ДанныеОбъектов.Пакеты.Количество() = 1 Тогда
		
		ДоступноИзменениеСоставаПакета = Истина;
		
		Для Каждого ЭлементПакета Из ДанныеОбъектов.Пакеты Цикл
			
			ДокументыПакета = ЭлементПакета.Значение;
			
			Для Каждого ЭлементДокумента Из ДокументыПакета Цикл
				
				ДанныеДокумента = ЭлементДокумента.Значение;
				
				Если ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован
					И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан
					И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
					И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО Тогда
					
					ДоступноИзменениеСоставаПакета = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДоступноИзменениеСоставаПакета Тогда
			ДоступныеДействия.Вставить("ИзменитьСоставПакета", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементПакета Из ДанныеОбъектов.Пакеты Цикл
		
		Для Каждого ЭлементДокумента Из ЭлементПакета.Значение Цикл
			
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			Если ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
				
				ДоступныеДействия.Вставить("Подписать", Истина);
				ДоступныеДействия.Вставить("Отправить", Истина);
				
				Прервать;
				
			ИначеЕсли ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.Подписан
				Или ДанныеДокумента.Состояние
					= Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО
				Или ДанныеДокумента.Состояние 
					= Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку
				Или ДанныеДокумента.Состояние 
					= Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
				
				ДоступныеДействия.Вставить("Отправить", Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступныеДействия["Подписать"] <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементДокумента Из ДанныеОбъектов.Документы Цикл
		
		Если ДоступныеДействия["Подписать"] <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ДанныеДокумента = ЭлементДокумента.Значение;
		
		Если ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
			
			ДоступныеДействия.Вставить("Подписать", Истина);
			ДоступныеДействия.Вставить("Отправить", Истина);
			
			Прервать;
			
		ИначеЕсли ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.Подписан
			Или ДанныеДокумента.Состояние
				= Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО
			Или ДанныеДокумента.Состояние 
				= Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку
			Или ДанныеДокумента.Состояние 
				= Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
			
			ДоступныеДействия.Вставить("Отправить", Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеДействия;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПакетыЭДО

Функция ВозможноОбъединитьДокументыВПакет(Документы, ДанныеДляПакета, ОписаниеОшибки)
	
	Если ТипЗнч(Документы) <> Тип("Массив")
		Или Документы.Количество() <= 1 Тогда
		
		ОписаниеОшибки =
			НСтр("ru = 'Неверные параметры создания пакета.
				|Необходимо передать массив минимум из 2 документов 1С:Документооборот.'");
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из Документы Цикл
		Если ТипЗнч(Элемент) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Неверные параметры создания пакета.
					|К объединению в пакет переданы элементы не являющиеся документами 1С:Документооборот.'");
			Возврат Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляПакета.Организации.Количество() > 1 Тогда
		ОписаниеОшибки =
			НСтр("ru = 'К объединению в пакет выбраны документы по разным организациям.
				|В исходящий пакет ЭДО могут быть объединены документы только одной организации.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеДляПакета.Контрагенты.Количество() > 1 Тогда
		ОписаниеОшибки =
			НСтр("ru = 'К объединению в пакет выбраны документы по разным контрагентам.
				|В исходящий пакет ЭДО могут быть объединены документы только одного контрагента.'");
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Направление Из ДанныеДляПакета.Направления Цикл
		Если Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'К объединению в пакет выбраны не исходящие документы.'");
			Возврат Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Состояние Из ДанныеДляПакета.Состояния Цикл
		Если Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован
			И Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан
			И Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'К объединению в пакет выбраны документы с неподходящими состояниями.
					|В исходящий пакет ЭДО могут быть объединены документы только в состоянии ""Не начат"" и ""Подписан"".'");
			Возврат Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляПакета.ИдентификаторыПакетов.Количество() > 0 Тогда
		ОписаниеОшибки =
			НСтр("ru = 'К объединению в пакет выбраны документы уже состоящие в пакетах ЭДО.'");
		Возврат Ложь;
	КонецЕсли;
	
	СпособыОбмена = СпособыОбменаЭДОПоДокументамДО(Документы);
	
	Для Каждого Элемент Из СпособыОбмена Цикл
		Если Не СпособОбменаПоддерживаетПакетнуюОбработку(Элемент.Значение) Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К объединению в пакет выбраны документы с неподходящим способом обмена.
					|Пакетную обработку поддерживает только сервис 1С-ЭДО, при настройке обмена напрямую с оператором, пакеты не поддерживаются.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВозможноИзменитьСоставПакета(ДанныеПакета, ДобавляемыеДокументы, УдаляемыеДокументы, ОписаниеОшибки)
	
	Если ДанныеПакета.ИдентификаторПакета = Неопределено Тогда
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Не найден пакет документов (%1) в которых необходимо добавить документы.'"),
			ДанныеПакета.ИдентификаторПакета);
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПакета.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Пакет документов (%1) не исходящий.
				|Возможно менять состав только исходящих по ЭДО пакетов.'"),
			ДанныеПакета.ИдентификаторПакета);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПакета.ИдентификаторПакетаБЭД) Тогда
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Пакет документов (%1) запущен в отправку. Нельзя менять состав этого пакета.'"),
			ДанныеПакета.ИдентификаторПакета);
		Возврат Ложь;
	КонецЕсли;
	
	// Создадим соответствия, чтобы эффективнее искать
	ДокументыВПакете = Новый Соответствие;
	Для Каждого Документ Из ДанныеПакета.Документы Цикл
		ДокументыВПакете.Вставить(Документ, Истина);
	КонецЦикла;
	
	НовыеДокументы = Новый Соответствие;
	Для Каждого Документ Из ДобавляемыеДокументы Цикл
		НовыеДокументы.Вставить(Документ, Истина);
	КонецЦикла;
	
	Для Каждого Документ Из УдаляемыеДокументы Цикл
		
		Если ДокументыВПакете[Документ] = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Попытка удаления документа %1 из пакета ЭДО (%2), который не содержит удаляемого документа.'"),
				Документ,
				ДанныеПакета.ИдентификаторПакета);
			Возврат Ложь;
		КонецЕсли;
		
		Если НовыеДокументы[Документ] <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка изменения состава пакета ЭДО (%2):
					|Документ %1 присутствует и в удаляемых и в добавляемых документах.'"),
				Документ,
				ДанныеПакета.ИдентификаторПакета);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Документ Из ДобавляемыеДокументы Цикл
		
		Если ДокументыВПакете[Документ] <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Попытка добавления документа %1 в пакет ЭДО (%2), который уже содержит этот документ.'"),
				Документ,
				ДанныеПакета.ИдентификаторПакета);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавляемыеДокументы.Количество() > 0 Тогда
		
		ДанныеНовыхДокументов = ДанныеДокументовДляДобавленияВПакет(ДобавляемыеДокументы);
		
		Если ДанныеНовыхДокументов.Организации.Количество() > 1 Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К добавлению в пакет выбраны документы по разным организациям.
					|В исходящий пакет ЭДО могут быть добавлены документы только одной организации.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеНовыхДокументов.Организации[0] <> ДанныеПакета.Организация Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К добавлению в пакет выбраны документы по организации, отличной от пакета.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеНовыхДокументов.Контрагенты.Количество() > 1 Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К добавлению в пакет выбраны документы по разным контрагентам.
					|В исходящий пакет ЭДО могут быть добавлены документы только одного контрагента.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеНовыхДокументов.Контрагенты[0] <> ДанныеПакета.Контрагент Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К добавлению в пакет выбраны документы по контрагенту, отличному от пакета.'");
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого Направление Из ДанныеНовыхДокументов.Направления Цикл
			Если Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
				
				ОписаниеОшибки =
					НСтр("ru = 'К добавлению в пакет выбраны не исходящие документы.'");
				Возврат Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Состояние Из ДанныеНовыхДокументов.Состояния Цикл
			Если Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован
				И Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан
				И Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
				
				ОписаниеОшибки =
					НСтр("ru = 'К добавлению в пакет выбраны документы с неподходящими состояниями.
						|В исходящий пакет ЭДО могут быть добавлены документы только в состоянии ""Не начат"" и ""Подписан"".'");
				Возврат Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеНовыхДокументов.ИдентификаторыПакетов.Количество() > 0 Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К добавлению в пакет выбраны документы уже состоящие в пакетах ЭДО.'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СпособыОбмена = СпособыОбменаЭДОПоДокументамДО(ДобавляемыеДокументы);
	
	Для Каждого Элемент Из СпособыОбмена Цикл
		Если Не СпособОбменаПоддерживаетПакетнуюОбработку(Элемент.Значение) Тогда
			ОписаниеОшибки =
				НСтр("ru = 'К добавлению в пакет выбраны документы с неподходящим способом обмена.
					|Пакетную обработку поддерживает только сервис 1С-ЭДО, при настройке обмена напрямую с оператором, пакеты не поддерживаются.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыборкаСведенийОСостоянияхЭДОИсходящих(Документы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.ДокументДО,
		|	СостояниеДокументовПоЭДОСрезПоследних.Контрагент,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО,
		|	СостояниеДокументовПоЭДОСрезПоследних.Комментарий,
		|	СостояниеДокументовПоЭДОСрезПоследних.НаправлениеЭД
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(, ДокументДО В (&Документы)
		|	И НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)) КАК СостояниеДокументовПоЭДОСрезПоследних";
	Запрос.УстановитьПараметр("Документы", Документы);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

Функция СпособыОбменаЭДОПоДокументамДО(ДокументыДО)
	
	СпособыОбмена = Новый Соответствие;
	
	Для Каждого Документ Из ДокументыДО Цикл
		СпособыОбмена.Вставить(Документ, Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ПОМЕСТИТЬ СуществующиеДокументыЭДО
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И Файлы.ВладелецФайла В (&Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Документ,
		|	НастройкиОтправкиДокументовПоЭДО.Отправитель,
		|	НастройкиОтправкиДокументовПоЭДО.Получатель,
		|	НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО
		|ПОМЕСТИТЬ ВидыДокументовЭДОДокументов
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ДокументыДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДокументовПоЭДО
		|		ПО ДокументыДО.Организация = НастройкиОтправкиДокументовПоЭДО.Отправитель
		|		И ДокументыДО.Контрагент = НастройкиОтправкиДокументовПоЭДО.Получатель
		|		И ДокументыДО.ВидДокумента = НастройкиОтправкиДокументовПоЭДО.ВидДокумента
		|ГДЕ
		|	ДокументыДО.Ссылка В (&Документы)
		|	И НастройкиОтправкиДокументовПоЭДО.Отправлять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументовЭДОДокументов.Документ,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбмена
		|ИЗ
		|	ВидыДокументовЭДОДокументов КАК ВидыДокументовЭДОДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ПО ВидыДокументовЭДОДокументов.Отправитель = НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель
		|		И ВидыДокументовЭДОДокументов.Получатель = НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель
		|		И ВидыДокументовЭДОДокументов.ВидДокументаЭДО <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
		|		И ВидыДокументовЭДОДокументов.ВидДокументаЭДО = НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыДокументовЭДОДокументов.Документ,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД
		|ИЗ
		|	ВидыДокументовЭДОДокументов КАК ВидыДокументовЭДОДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ПО ВидыДокументовЭДОДокументов.Отправитель = НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель
		|		И ВидыДокументовЭДОДокументов.Получатель = НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель
		|		И ВидыДокументовЭДОДокументов.ВидДокументаЭДО = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
		|		И НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидДокументаПрочее
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуществующиеДокументыЭДО.Документ,
		|	ЭлектронныйДокументВходящийЭДО.СпособОбмена,
		|	NULL
		|ИЗ
		|	СуществующиеДокументыЭДО КАК СуществующиеДокументыЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СуществующиеДокументыЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СуществующиеДокументыЭДО.Документ,
		|	NULL,
		|	ЭлектронныйДокументИсходящийЭДО.СпособОбмена
		|ИЗ
		|	СуществующиеДокументыЭДО КАК СуществующиеДокументыЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СуществующиеДокументыЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка";
	Запрос.УстановитьПараметр("Документы", ДокументыДО);
	Запрос.УстановитьПараметр("ВидДокументаПрочее",
		ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.Прочее));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаПоНастройкамОтправки = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаПоСуществующимДокументамЭДО = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаПоНастройкамОтправки.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПоНастройкамОтправки.СпособОбмена) Тогда
			СпособыОбмена.Вставить(ВыборкаПоНастройкамОтправки.Документ,
				ВыборкаПоНастройкамОтправки.СпособОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Пока ВыборкаПоСуществующимДокументамЭДО.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПоСуществующимДокументамЭДО.СпособОбмена) Тогда
			СпособыОбмена.Вставить(ВыборкаПоСуществующимДокументамЭДО.Документ,
				ВыборкаПоСуществующимДокументамЭДО.СпособОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СпособыОбмена;
	
КонецФункции

#Область ПереопределениеБЭД

Процедура ЗаполнитьДанныеРуководителя(Организация, ДанныеОрганизации)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК
		|			ОтветственныеЛицаОрганизацийСрезПоследних
		|		ПО Пользователи.Ссылка = ОтветственныеЛицаОрганизацийСрезПоследних.Пользователь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Организация = &Организация
		|	И ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &ОтветственноеЛицо";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.Наименование);
	ДанныеОрганизации.Фамилия = ЧастиИмени.Фамилия;
	ДанныеОрганизации.Имя = ЧастиИмени.Имя;
	ДанныеОрганизации.Отчество = ЧастиИмени.Отчество;
	
	ДанныеОрганизации.РуководительФизЛицо = Выборка.Ссылка;
	ДанныеОрганизации.ДатаРождения = Выборка.ДатаРождения;
	
КонецПроцедуры

Функция КодВидаДокументаФНС(ВидДокумента)
	
	МенеджерВидовДокументов = Справочники.ВидыДокументовФизическихЛиц;
	
	КодаВидовДокументов = Новый Соответствие;
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ВоенныйБилетОфицераЗапаса, "27");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ВоенныйБилет, "07");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ДипломатическийПаспорт, "09");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ЗагранпаспортРФ, "22");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ЗагранпаспортСССР, "02");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ПаспортРФ, "21");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ПаспортСССР, "01");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ПаспортМинморфлота, "06");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.ПаспортМоряка, "26");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.СвидетельствоОРождении, "03");
	КодаВидовДокументов.Вставить(МенеджерВидовДокументов.УдостоверениеОфицера, "04");
	
	КодВида = КодаВидовДокументов[ВидДокумента];
	
	Если КодВида <> Неопределено Тогда
		Возврат КодВида;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ФизлицаИмеющиеДокументы(Физлица, ДанныеДокументов)
	
	СтрокиСерииНомера = Новый Соответствие;
	ВидыДокументов = Новый Массив;
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		ВидДокумента = ВидДокументаПоКодуФНС(ДанныеДокумента.ВидДок);
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыДокументов.Добавить(ВидДокумента);
		СтрокаСерииНомера = ДанныеДокумента.СерНомДок;
		СтрокаСерииНомера = СтрокаБезНезначащихСимволовСерииИНомера(СтрокаСерииНомера);
		СтрокиСерииНомера.Вставить(СтрокаСерииНомера, Истина);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыФизическихЛиц.Физлицо,
		|	ДокументыФизическихЛиц.ВидДокумента,
		|	ДокументыФизическихЛиц.Серия,
		|	ДокументыФизическихЛиц.Номер
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|ГДЕ
		|	ДокументыФизическихЛиц.Физлицо В (&Физлица)
		|	И ДокументыФизическихЛиц.ВидДокумента В (&ВидыДокументов)";
	Запрос.УстановитьПараметр("Физлица", Физлица);
	Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПодходящиеФизлица = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтрокаСерииНомера = СтрШаблон("%1%2", Выборка.Серия, Выборка.Номер);
		СтрокаСерииНомера = СтрокаБезНезначащихСимволовСерииИНомера(СтрокаСерииНомера);
		
		Если СтрокиСерииНомера[СтрокаСерииНомера] = Истина Тогда
			ПодходящиеФизлица.Добавить(Выборка.Физлицо);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодходящиеФизлица;
	
КонецФункции

Функция СтрокаБезНезначащихСимволовСерииИНомера(СтрокаСерииНомера)
	
	НезначащиеСимволы = Новый Массив;
	НезначащиеСимволы.Добавить(" ");
	НезначащиеСимволы.Добавить("-");
	
	ОчищеннаяСтрока = СтрокаСерииНомера;
	
	Для Каждого НезначащийСимвол Из НезначащиеСимволы Цикл
		ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, НезначащийСимвол, "");
	КонецЦикла;
	
	Возврат ОчищеннаяСтрока;
	
КонецФункции

Функция ВидДокументаПоКодуФНС(КодФНС)
	
	МенеджерВидовДокументов = Справочники.ВидыДокументовФизическихЛиц;
	
	ВидыДокументовПоКодам = Новый Соответствие;
	ВидыДокументовПоКодам.Вставить("27", МенеджерВидовДокументов.ВоенныйБилетОфицераЗапаса);
	ВидыДокументовПоКодам.Вставить("07", МенеджерВидовДокументов.ВоенныйБилет);
	ВидыДокументовПоКодам.Вставить("09", МенеджерВидовДокументов.ДипломатическийПаспорт);
	ВидыДокументовПоКодам.Вставить("22", МенеджерВидовДокументов.ЗагранпаспортРФ);
	ВидыДокументовПоКодам.Вставить("02", МенеджерВидовДокументов.ЗагранпаспортСССР);
	ВидыДокументовПоКодам.Вставить("21", МенеджерВидовДокументов.ПаспортРФ);
	ВидыДокументовПоКодам.Вставить("01", МенеджерВидовДокументов.ПаспортСССР);
	ВидыДокументовПоКодам.Вставить("06", МенеджерВидовДокументов.ПаспортМинморфлота);
	ВидыДокументовПоКодам.Вставить("26", МенеджерВидовДокументов.ПаспортМоряка);
	ВидыДокументовПоКодам.Вставить("03", МенеджерВидовДокументов.СвидетельствоОРождении);
	ВидыДокументовПоКодам.Вставить("04", МенеджерВидовДокументов.УдостоверениеОфицера);
	
	ВидПоКоду = ВидыДокументовПоКодам[КодФНС];
	
	Если ВидПоКоду <> Неопределено Тогда
		Возврат ВидПоКоду;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПредставителиМЧДПоФИО(ФИОПредставителей)
	
	ПредставленияФизлиц = Новый Массив;
	Для Каждого ФИО Из ФИОПредставителей Цикл
		
		Если Не ЗначениеЗаполнено(ФИО.Фамилия) Или Не ЗначениеЗаполнено(ФИО.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФИО.Отчество) Тогда
			Представление = СтрШаблон(НСтр("ru = '%1 %2 %3'"),
				ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			ПредставленияФизлиц.Добавить(Представление);
		Иначе
			Представление = СтрШаблон(НСтр("ru = '%1 %2'"),
				ФИО.Фамилия, ФИО.Имя);
			ПредставленияФизлиц.Добавить(Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование В (&ПредставленияФизлиц)";
	Запрос.УстановитьПараметр("ПредставленияФизлиц", ПредставленияФизлиц);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредставителиФЛ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПредставителиФЛ.Добавить(Выборка.Физлицо);
	КонецЦикла;
	
	Возврат ПредставителиФЛ;
	
КонецФункции

#КонецОбласти

#КонецОбласти
