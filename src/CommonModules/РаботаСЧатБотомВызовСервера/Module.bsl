////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с чат-ботом (сервер,вызов сервера).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограмныйИнтерфейс

// Проверяет наличие обсуждения чат-бота и текущего пользователя. 
// Если такого нет, создает новое и пишет приветственное сообщение.
//
// ВозвращаемоеЗначение:
//	ОбсуждениеСистемыВзаимодействия - идентификатор обсуждения между текущим пользователем и чат-ботом
Функция СоздатьОбсуждениеСБотом(ПроверитьНаличиеОбсуждения = Ложь) Экспорт
	
	Если ПроверитьНаличиеОбсуждения Тогда 
		Если Не РаботаСЧатБотомПовтИсп.ЕстьАктивныеСостояния() Или РаботаСЧатБотом.ОбсуждениеСБотомСуществует() Тогда
			Возврат РаботаСЧатБотом.ОбсуждениеТекущегоПользователяСБотом().Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		РаботаСЧатБотом.НаписатьПервоеСообщение();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрацииСервер(ТекстСообщения);
	КонецПопытки;
	
	Возврат РаботаСЧатБотом.ОбсуждениеТекущегоПользователяСБотом().Идентификатор;
	
КонецФункции

// Отправляет сообщение от чат-бота пользователю.
//
// Параметры:
//  Кому         - СправочникСсылка.Пользователи - Кому следует отправить сообщение.
//  Текст        - Строка                        - Текст сообщения.
//  Вложения     - Массив из Структура           - Вложения сообщения. См. РаботаСЧатБотом.ВложениеЧатБота().
//  Действия     - СписокЗначение, Структура     - Действия сообщения
//  ЗаписьБеседы - Структура                     - см. РаботаСЧатБотомКлиентСервер.НоваяЗаписьБеседы
// 
// Возвращаемое значение:
//  Структура - Результат отправки сообщения от чат-бота.
//   * Отправлено  - Булево - Сообщение было отправлено.
//   * ТекстОшибки - Строка - Текст ошибки, почему сообщение не было отправлено.
//
Функция ОтправитьСообщение(
	Кому, Текст = "", Вложения = Неопределено, Действия = Неопределено, ЗаписьБеседы = Неопределено) Экспорт
	
	РезультатОтправкиСВ = РаботаСЧатБотом.ОтправитьСообщение(
		Кому, Текст, Вложения, Действия, ЗаписьБеседы);
	
	Возврат РезультатОтправкиСВ;
	
КонецФункции

// Отправляет сообщение от пользователя в диалог с чат-ботом
//
//Параметры:
//	Текст - Строка - Текст отправляемого сообщения
//
Функция ОтправитьСообщениеОтИмениПользователя(Текст) Экспорт

	Возврат РаботаСЧатБотом.ОтправитьСообщениеОтИмениПользователя(Текст);
	
КонецФункции

// Возвращает состояние в которое следует перейти из текущего.
//
// Параметры: 
//  ТекущееСостояние - СправочникССылка.СостоянияЧатБота - ТекущееСостояние чат-бота
//  Сообщение - Строка - Текст сообщения отправленного пользователем
//  ИдентификаторОбсуждения - ИдентификаторОбсужденияСистемыВзаимодействия - Идентификатор обсуждения с пользователем
//  СостоянияДляУточнения - Массив из СправочникССылка.СостоянияЧатБота - массив состояний, которые
//     после прошлого сообщения пользователя оказались равновероятны для перехода
//  ЗаписьБеседы - Структура - см. РаботаСЧатБотомКлиентСервер.НоваяЗаписьБеседы
//
// ВозвращамоеЗначение - см.РаботаСЧатБотом.СледующееСостояние 
//
Функция СледующееСостояние(
	ТекущееСостояние, Сообщение, СостоянияДляУточнения, ЗаписьБеседы) Экспорт
	
	Если Не ЧатБотЗапущен() Тогда 
		
		Возврат Неопределено; 
		
	КонецЕсли;
	
	Если РаботаСЧатБотом.НачатьДиалогЗаново(ТекущееСостояние) Тогда
	
		ТекущееСостояние = ПредопределенноеЗначение("Справочник.СостоянияЧатБота.ПустаяСсылка");
		СостоянияДляУточнения.Очистить();
	
	КонецЕсли; 
	
	Возврат РаботаСЧатБотом.СледующееСостояние(
		ТекущееСостояние, Сообщение, СостоянияДляУточнения, ЗаписьБеседы);
		
КонецФункции

// Возвращает сформированное сообщение по состояниям, доступным из текущего.
// 
// Параметры:
//  ТекущееСостояние - СправочникСсылка.СостоянияЧатБота - Текущее состояние чат-бота.
//
// Возвращаемое значение: см. РаботаСЧатБотом.СообщениеПоДействиямИВысказываниям
//
Функция ПодчиненныеСостояния(ТекущееСостояние) Экспорт
	
	Возврат РаботаСЧатБотом.ПодчиненныеСостояния(ТекущееСостояние);
	
КонецФункции 

// Пишет пользователю одно из высказываний записанных в текущем состоянии.
//
// Параметры: 
//  ТекущееСостояние - СправочникСсылка.СостоянияЧатБота - Текущее состояние чат-бота.
//  ЗаписьБеседы - Структура - см. РаботаСЧатБотомКлиентСервер.НоваяЗаписьБеседы.
//
Процедура НаписатьПользователю(ТекущееСостояние, ЗаписьБеседы) Экспорт
	
	РаботаСЧатБотом.НаписатьПользователю(ТекущееСостояние, ЗаписьБеседы);
	
КонецПроцедуры

// Возвращает ссылку состояния чат-бота по уникальному идентификатору.
//
// Параметры:
//  ИдентификаторСостояния - УникальныйИдентификатор - Идентификатор состояния чат-бота.
//
// Возвращаемое значение:
//  СправочникСсылка.СосстоянияЧатБота - Ссылка на состояние
//
Функция СостояниеЧатБотаПоИдентификатору(ИдентификаторСостояния) Экспорт

	Возврат Справочники.СостоянияЧатБота.ПолучитьСсылку(ИдентификаторСостояния);

КонецФункции 

// Отправляет сообщение пользователю о возникшей ошибке.
//
// Параметры: 
//  ПредставлениеОшибки - Строка - текст ошибки
//  ЗаписьБеседы - Структура - см. РаботаСЧатБотомКлиентСервер.НоваяЗаписьБеседы.
//
Процедура СообщитьОбОшибке(ПредставлениеОшибки, ЗаписьБеседы, СообщениеПользователю = "") Экспорт
	
	Если Не ЗначениеЗаполнено(СообщениеПользователю) Тогда 
		СообщениеПользователю = НСтр("ru = 'Возникла ошибка, обратитесь к администратору.'");
	КонецЕсли;
	
	РаботаСЧатБотом.ОтправитьСообщение(
		ПользователиКлиентСервер.ТекущийПользователь(),
		СообщениеПользователю,,, 
		ЗаписьБеседы);
	ЗаписьБеседы.СообщениеБота = ПредставлениеОшибки;
	РегистрыСведений.ИсторияБеседСЧатБотом.ОбновитьИсториюБеседы(ЗаписьБеседы);
	
КонецПроцедуры

// Проверяет запущен ли чат-бот.
//
// Возвращаемое значение:
//  Булево - Истина, если чат-бот запущен
//
Функция ЧатБотЗапущен() Экспорт

	Возврат РаботаСЧатБотом.ЧатБотЗапущен();

КонецФункции

// Возвращает Действие, ЭтоДействие и Параметры состояния
//
// Параметры:
//  Состояние - СправочникСсылка.СостояниеЧатБота - состояние чат бота
//
// Возвращаемое значение:
//  Структура с полями
//    * Действие - Строка - Действие состояния
//    * ЭтоДействие - Булево - Истина, если состояние является Действием
//    * Параметры - Структура - см.ПараметрыСостояния
//
Функция ДействиеСостояния(Состояние) Экспорт
	
	Параметры = РаботаСЧатБотом.ПараметрыСостояния(Состояние);
	Действие = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Состояние, "Действие, ТипСостояния");
	Действие.Вставить("Параметры", Параметры);
	
	Возврат Действие;

КонецФункции

// Проверяет, зарегистрирована ли информационная база в системе взаимодействия
//  и находится ли пользователь в рабочей группе для тестирования чат-бота
//
// Возвращаемое значение:
//  Булево - Истина, если База зарегистрирована и 
//           пользователь находится в рабочей группе для тестирования
//
Функция ИнформационнаяБазаЗарегистрирована() Экспорт
	
	Возврат СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
КонецФункции 

//Возвращает имя, значение и тип параметра, который необходимо заполнить в типе состояния "Вопрос"
//
//Параметры:
//	Состояние - СправочникСсылка.СостоянияЧатБота - состояние чат-бота
//
Функция ПараметрДляЗаполнения(Состояние) Экспорт

	Параметр = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Состояние, "ИмяЗаполняемогоПараметра, ПримерЗаполняемогоПараметра");
	Параметр.Вставить("ТипЗначения", 
		ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(Параметр.ПримерЗаполняемогоПараметра)));
	Возврат Параметр;

КонецФункции

// Записывает в журнал регистрации
Процедура ЗаписьЖурналаРегистрацииСервер(ТекстСообщения) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Работа с ЧатБотом'", Метаданные.ОсновнойЯзык.КодЯзыка), 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти
