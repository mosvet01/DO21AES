///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////
// @strict-types

#Область ПрограммныйИнтерфейс

// Вызывается при удалении области данных.
// В процедуре необходимо удалить данные области данных, которые не могут быть удалены стандартным механизмом.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//   ОбластьДанных - Число - значение разделителя удаляемой области данных.
//
Процедура ПриУдаленииОбластиДанных(Знач ОбластьДанных) Экспорт
КонецПроцедуры

// Формирует список параметров ИБ.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//   ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров
//   				   - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
КонецПроцедуры

// Вызывается перед попыткой получения значений параметров ИБ из одноименных констант.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//   ИменаПараметров - Массив - имена параметров, значения которых необходимо получить.
//     							В случае если значение параметра получается в данной процедуре, 
//     							необходимо удалить имя обработанного параметра из массива.
//   ЗначенияПараметров - Структура - значения параметров.
//
Процедура ПриПолученииЗначенийПараметровИБ(Знач ИменаПараметров, Знач ЗначенияПараметров) Экспорт
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные константы.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//   ЗначенияПараметров - Структура - значения параметров которые требуется установить.
//     В случае если значение параметра устанавливается в данной процедуре из структуры необходимо удалить соответствующую
//     пару КлючИЗначение.
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных,
// при первом запуске конфигурации с параметром "ИнициализироватьРазделеннуюИБ" ("InitializeSeparatedIB").
// В частности, здесь следует размещать код по включению регламентных заданий, используемых только при включенном 
// разделении данных, и соответственно, по выключению заданий, используемых только при выключенном разделении данных.
// @skip-warning ПустойМетод - переопределяемый метод.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	ВключитьРегламентныеЗаданияВМоделиСервиса();
	
КонецПроцедуры

// Устанавливает пользователю права по умолчанию.
// Вызывается при работе в модели сервиса, в случае обновления в менеджере
// сервиса прав пользователя без прав администрирования.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, которому
//   требуется установить права по умолчанию.
//
Процедура УстановитьПраваПоУмолчанию(Пользователь) Экспорт
КонецПроцедуры

// Актуализирует использование регламентных заданий в модели сервиса.
//
Процедура ВключитьРегламентныеЗаданияВМоделиСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Включено = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	
	ОбластьДанныхИспользование = Ложь;
	Если ПараметрыСеанса.ОбластьДанныхИспользование Тогда
		ОбластьДанныхИспользование = Истина;
		ПараметрыСеанса.ОбластьДанныхИспользование = Ложь;
	КонецЕсли;
	
	// Рег. задания для работы в режиме разделения.
	Использования = Новый Структура;
	Использования.Вставить("ДиспетчерЗаданийВМоделиСервиса", Включено);
	Использования.Вставить("СлияниеИндексаППД", Не Включено);
	Использования.Вставить("ОбновлениеИндексаППД", Не Включено);
	
	РазделенныеОсновные = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав;
	НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	
	Настройки = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	Сверток = Настройки.Скопировать(,"РегламентноеЗадание");
	Сверток.Свернуть("РегламентноеЗадание");
	Для Каждого СтрокаЗадания Из Сверток Цикл
		
		Если Использования.Свойство(СтрокаЗадания.РегламентноеЗадание.Имя) Тогда
			//Использование определяется в конфигурации.
			Продолжить;
			
		ИначеЕсли Не Включено Тогда
			//Включаем для локальной версии. Если доступно по настройкам, но не включено.
			Есть = Ложь;
			Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", СтрокаЗадания.РегламентноеЗадание));
			Для Каждого Задание Из Задания Цикл
				Если Задание.Использование Тогда
					// Включенные вручную не отключаем.
					Есть = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Есть Тогда
				Продолжить;
			КонецЕсли;
			
			Отказ = Ложь;
			Попытка
				ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(СтрокаЗадания.РегламентноеЗадание, Отказ);
			Исключение
			КонецПопытки;
			
			Использования.Вставить(СтрокаЗадания.РегламентноеЗадание.Имя, Отказ = Ложь);
			Продолжить;
			
		КонецЕсли;
		
		Разделенное = РазделенныеОсновные.Найти(СтрокаЗадания.РегламентноеЗадание).Использование <> НеИспользовать;
			
		СтрокиФО = Настройки.НайтиСтроки(Новый Структура("РегламентноеЗадание", СтрокаЗадания.РегламентноеЗадание));
		
		Нет = Ложь;
		НастройкаДляМоделиСервиса = Неопределено;
		Для Каждого Настройка Из СтрокиФО Цикл
			
			Если Настройка.ДоступноВМоделиСервиса = Ложь
				Или Настройка.ОчередьЗаданийВМоделиСервиса >= 1 Тогда
				//Не требуется выполнять в разделенной ИБ.
				Использования.Вставить(СтрокаЗадания.РегламентноеЗадание.Имя, Не Включено);
				Нет = Истина;
				Прервать;
				
			ИначеЕсли Настройка.ФункциональнаяОпция = Неопределено И Настройка.ФункциональныйРазделительВМоделиСервиса = Неопределено
				Или Настройка.ОчередьЗаданийВМоделиСервиса < 0 Тогда
				//Использование определяется в конфигурации. Пропускаем.
				Нет = Истина;
				Разделенное = Ложь;
				Прервать;
				
			КонецЕсли;
			
			Если Настройка.ФункциональныйРазделительВМоделиСервиса <> Неопределено Тогда
				Если НастройкаДляМоделиСервиса = Неопределено Тогда
					НастройкаДляМоделиСервиса = Настройка;
				Иначе
					ОбъединитьНастройкуРегламентногоЗаданияВМоделиСервиса(Настройка, НастройкаДляМоделиСервиса);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Если Нет И Не Разделенное Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверяем актуальность для ИБ по одной из областей.
		Если НастройкаДляМоделиСервиса <> Неопределено И Не Разделенное Тогда
			Использования.Вставить(СтрокаЗадания.РегламентноеЗадание.Имя, ЗначениеЗаполнено(
				ОбластиДанныхИспользующиеФункциональность(
					СтрокаЗадания.РегламентноеЗадание,
					НастройкаДляМоделиСервиса.ФункциональныйРазделительВМоделиСервиса,
					НастройкаДляМоделиСервиса)));
			Продолжить;
		КонецЕсли;
		
		Есть = Ложь;
		Для Каждого Разделитель Из ИтераторОбходаОбластейДанных(,, СтрокаЗадания.РегламентноеЗадание) Цикл
			
			Использование = Ложь;
			Если ВойтиВОбластьДанных(Разделитель, СтрокаЗадания.РегламентноеЗадание, Истина, Настройки) Тогда
				Есть = Истина;
				
				Если Разделенное Тогда
					Использование = Не Нет;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если Разделенное Тогда
				// Отключаем в области.
				Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", СтрокаЗадания.РегламентноеЗадание));
				Для Каждого Задание Из Задания Цикл
					Если Задание.Использование <> Использование Тогда
						Задание.Использование = Использование;
						Попытка
							Задание.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			
		Использования.Вставить(СтрокаЗадания.РегламентноеЗадание.Имя, Есть);
		
	КонецЦикла;
	
	Для Каждого Настройка Из Использования Цикл
		Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Метаданные.РегламентныеЗадания[Настройка.Ключ]));
		Для Каждого Задание Из Задания Цикл
			Если Задание.Использование <> Настройка.Значение Тогда
				Задание.Использование = Настройка.Значение;
				Попытка
					Задание.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОбластьДанныхИспользование Тогда
		ПараметрыСеанса.ОбластьДанныхИспользование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Метод регламентного задания.
//
Процедура ДиспетчерЗаданийВМоделиСервиса() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ЗаданиеВладелец = Метаданные.РегламентныеЗадания.ДиспетчерЗаданийВМоделиСервиса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Избранные = Новый ТаблицаЗначений;
	Избранные.Колонки.Добавить("РегламентноеЗадание");
	Избранные.Колонки.Добавить("Расписание");
	Избранные.Колонки.Добавить("Идентификатор");
	Избранные.Колонки.Добавить("ОчередьЗаданийВМоделиСервиса", Новый ОписаниеТипов("Число"));
	Избранные.Колонки.Добавить("ФункциональныйРазделительВМоделиСервиса");
	Избранные.Колонки.Добавить("ЗависимостьПоИ", Новый ОписаниеТипов("Булево"));
	Избранные.Колонки.Добавить("ПараллельноеВыполнениеВМоделиСервиса", Новый ОписаниеТипов("Булево"));
	Избранные.Колонки.Добавить("ХранениеПользователяВМоделиСервиса");
	
	Настройки = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	Для Каждого Настройка Из Настройки Цикл
	
		Если Настройка.ДоступноВМоделиСервиса <> Ложь
			И Настройка.ОчередьЗаданийВМоделиСервиса > 0 Тогда
			
			Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Настройка.РегламентноеЗадание));
			Если Задания.Количество() > 0 И Не Задания[0].Использование Тогда
				НастройкаДляМоделиСервиса = Избранные.Найти(Настройка.РегламентноеЗадание, "РегламентноеЗадание");
				
				Если НастройкаДляМоделиСервиса = Неопределено Тогда
					Задание = Задания[0];
					НастройкаДляМоделиСервиса = Избранные.Добавить();
					НастройкаДляМоделиСервиса.РегламентноеЗадание = Настройка.РегламентноеЗадание;
					НастройкаДляМоделиСервиса.Расписание = Задание.Расписание;
					НастройкаДляМоделиСервиса.Идентификатор = Задание.УникальныйИдентификатор;
					НастройкаДляМоделиСервиса.ОчередьЗаданийВМоделиСервиса = Настройка.ОчередьЗаданийВМоделиСервиса;
					НастройкаДляМоделиСервиса.ЗависимостьПоИ = Настройка.ЗависимостьПоИ;
					Если Не ПустаяСтрока(Задание.ИмяПользователя) Тогда
						НастройкаДляМоделиСервиса.ХранениеПользователяВМоделиСервиса = Задание.ИмяПользователя;
					КонецЕсли;
				КонецЕсли;
				ОбъединитьНастройкуРегламентногоЗаданияВМоделиСервиса(Настройка, НастройкаДляМоделиСервиса);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Избранные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросОтметок = Новый Запрос(
	"ВЫБРАТЬ
	|	Отметки.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
	|	Отметки.Идентификатор КАК Идентификатор,
	|	Отметки.Конец КАК Конец,
	|	Отметки.Попытка КАК Попытка,
	|	ЧасовыеПояса.Значение КАК ЧасовойПояс
	|ИЗ
	|	РегистрСведений.ОтметкиВыполненияЗаданийВМоделиСервиса КАК Отметки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ЧасовойПоясОбластиДанных КАК ЧасовыеПояса
	|		ПО Отметки.ОбластьДанныхВспомогательныеДанные = ЧасовыеПояса.ОбластьДанныхВспомогательныеДанные
	|ГДЕ
	|	Отметки.Идентификатор = &Идентификатор");
	
	ОтметкиОтбор = Новый Структура("ОбластьДанных,Идентификатор");
	
	ВсеОбласти = ИтераторОбходаОбластейДанных();
	
	Очереди = Избранные.Скопировать(, "ОчередьЗаданийВМоделиСервиса");
	Очереди.Свернуть("ОчередьЗаданийВМоделиСервиса");
	Очереди.Сортировать("ОчередьЗаданийВМоделиСервиса");
	
	ИДБлокировки = Новый УникальныйИдентификатор();
	
	ЛимитЗацикливания = ТекущаяУниверсальнаяДата() + 600;
	
	Для Итерация = 1 По 100 Цикл
		
		ХолостаяИтерация = Истина;
		
		Для каждого Очередь Из Очереди Цикл
			
			Для Подход = 1 По 3 Цикл
				
				ХолостойПодход = Истина;
				
				Для Каждого Настройка Из Избранные Цикл
					
					Если Очередь.ОчередьЗаданийВМоделиСервиса <> Настройка.ОчередьЗаданийВМоделиСервиса Тогда
						Продолжить;
					КонецЕсли;
					
					ОтметкиОтбор.ОбластьДанных = 0;
					ОтметкиОтбор.Идентификатор = Настройка.Идентификатор;
					
					Попытка
						ЗаблокироватьДанныеДляРедактирования(
							РегистрыСведений.ОтметкиВыполненияЗаданийВМоделиСервиса.СоздатьКлючЗаписи(ОтметкиОтбор),,
							ИДБлокировки);
					Исключение
						// Уже обрабатывается параллельно.
						Продолжить;
					КонецПопытки;
					
					Если Настройка.ФункциональныйРазделительВМоделиСервиса <> Неопределено Тогда
						ТекОбласти = ОбластиДанныхИспользующиеФункциональность(Настройка.РегламентноеЗадание, Настройка.ФункциональныйРазделительВМоделиСервиса, Настройка);
						Если ТекОбласти = Неопределено Тогда
							Продолжить;	
						КонецЕсли;
					Иначе
						ТекОбласти = ВсеОбласти;
					КонецЕсли;
					
					ЗапросОтметок.УстановитьПараметр("Идентификатор", Настройка.Идентификатор);
					Отметки = ЗапросОтметок.Выполнить().Выгрузить();
					
					Для Каждого Разделитель Из ТекОбласти Цикл
						
						ОтметкиОтбор.ОбластьДанных = Разделитель;
						ОтметкиОтбор.Идентификатор = Настройка.Идентификатор;
						Предыдущие = Отметки.НайтиСтроки(ОтметкиОтбор);
						
						Предыдущее = ?(Предыдущие.Количество(), Предыдущие[0], Неопределено);
						ЧасовойПояс = ?(Предыдущее = Неопределено Или Не ЗначениеЗаполнено(Предыдущее.ЧасовойПояс), Неопределено, Предыдущее.ЧасовойПояс);
						ДатаНачала = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
						
						Если Предыдущее = Неопределено
							Или Настройка.Расписание.ТребуетсяВыполнение(ДатаНачала, Предыдущее.Конец)
							Или Предыдущее.Попытка > 0 И Предыдущее.Попытка < Настройка.РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении И Предыдущее.Конец <= ДатаНачала Тогда
							
							Если Не ВойтиВОбластьДанных(Разделитель, Настройка.РегламентноеЗадание, Истина, Настройки, Настройка.ХранениеПользователяВМоделиСервиса, ЗаданиеВладелец.Имя) Тогда
								
								Набор = РегистрыСведений.ОтметкиВыполненияЗаданийВМоделиСервиса.СоздатьНаборЗаписей();
								Запись = Набор.Добавить();
								Запись.Идентификатор = Настройка.Идентификатор;
								Запись.Конец = ДатаНачала;
								Запись.ОбластьДанныхВспомогательныеДанные = Разделитель;
								Набор.Отбор.Идентификатор.Установить(Запись.Идентификатор);
								Набор.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(Запись.ОбластьДанныхВспомогательныеДанные);
								Набор.Записать();
								Продолжить;
								
							КонецЕсли;
							
							Попытка
								
								ВыполнитьМетодРегламентногоЗадания(Настройка.РегламентноеЗадание, Настройка);
								
								Набор = РегистрыСведений.ОтметкиВыполненияЗаданийВМоделиСервиса.СоздатьНаборЗаписей();
								Запись = Набор.Добавить();
								Запись.Идентификатор = Настройка.Идентификатор;
								Запись.Начало = ДатаНачала;
								Запись.Конец = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
								Набор.Отбор.Идентификатор.Установить(Запись.Идентификатор);
								Набор.Записать();
								ХолостойПодход = Ложь;
								ХолостаяИтерация = Ложь;
								
							Исключение
								
								Пока ТранзакцияАктивна() Цикл
									ОтменитьТранзакцию();
								КонецЦикла;
								
								ЗаписьЖурналаРегистрации(
									НСтр("ru = 'Фоновое задание. Ошибка выполнения'"),
									УровеньЖурналаРегистрации.Ошибка,
									Настройка.РегламентноеЗадание,
									ЗаданиеВладелец.Имя,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								Набор = РегистрыСведений.ОтметкиВыполненияЗаданийВМоделиСервиса.СоздатьНаборЗаписей();
								Запись = Набор.Добавить();
								Запись.Идентификатор = Настройка.Идентификатор;
								Запись.Начало = ДатаНачала;
								Запись.Конец = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс) + Настройка.РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении;
								Если Предыдущие.Количество() Тогда
									Запись.Попытка = Предыдущие[0].Попытка + 1;
								Иначе
									Запись.Попытка = 1;
								КонецЕсли;
								Набор.Отбор.Идентификатор.Установить(Запись.Идентификатор);
								Набор.Записать();
								
							КонецПопытки;
							
							Если ЛимитЗацикливания <= ТекущаяУниверсальнаяДата() Тогда
								// Не успевает. Запускаем помощника.
								ЛимитЗацикливания = ТекущаяУниверсальнаяДата() + 600;
								РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
								ФоновыеЗадания.Выполнить("РаботаВМоделиСервисаПереопределяемый.ДиспетчерЗаданийВМоделиСервиса");
							КонецЕсли;
							
						КонецЕсли; 
						
					КонецЦикла;
					
					РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
					
					РазблокироватьДанныеДляРедактирования(, ИДБлокировки);
					
				КонецЦикла; // задание
				
				Если ХолостойПодход Тогда
					Прервать;
				КонецЕсли;
		
			КонецЦикла; // подход
		КонецЦикла; // очередь
			
		Если ХолостаяИтерация Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; // итерация
	
КонецПроцедуры

// Проверяет и выполняет общее регламентное задание для каждой области данных.
//
// Параметры:
//  РегламентноеЗадание	 - ОбъектМетаданных - объект метаданных регламентного задания.
//  Отказ				 - Булево, Неопределено - для прерывания выполнения задания в неразделенной области.
// 
// Возвращаемое значение:
//   - Булево - Истина, если регламентное задание требуется выполнять для каждой области.
//
Функция ПриНачалеВыполненияНеразделенногоРегламентногоЗадания(РегламентноеЗадание, Отказ) Экспорт
	
	Если РегламентноеЗадание = Метаданные.РегламентныеЗадания.МониторингЦКК
		Или РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОповещенийПользователей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбщегоНазначения.ОбщийМодуль("БлокировкаРаботыСВнешнимиРесурсами");
	БлокировкаРаботыСВнешнимиРесурсами.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСлужебный");
	НастройкиЗаданий = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	НастройкаДляМоделиСервиса = Неопределено;
	Для Каждого Настройка Из НастройкиЗаданий.НайтиСтроки(Новый Структура("РегламентноеЗадание", РегламентноеЗадание)) Цикл
		Если Настройка.ДоступноВМоделиСервиса = Ложь
			Или Настройка.ОчередьЗаданийВМоделиСервиса < 0 Тогда
			// Не обрабатывает разделенные данные.
			НастройкаДляМоделиСервиса = Неопределено;
			Прервать;
			
		ИначеЕсли Настройка.ОчередьЗаданийВМоделиСервиса >= 1 Тогда
			// Должно выполняться через отдельную очередь заданий.
			ВызватьИсключение
				НСтр("ru = 'Регламентное задание недоступно для выполнения вне очереди заданий.'");
				
		ИначеЕсли НастройкаДляМоделиСервиса = Неопределено Тогда
			НастройкаДляМоделиСервиса = Настройка;
			
		Иначе
			ОбъединитьНастройкуРегламентногоЗаданияВМоделиСервиса(Настройка, НастройкаДляМоделиСервиса);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкаДляМоделиСервиса <> Неопределено Тогда
		// Выполнение сразу для каждой области данных.
		
		Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", РегламентноеЗадание));
		Если Задания.Количество() Тогда
			Расписание = Задания[0].Расписание;
			Если Не ПустаяСтрока(Задания[0].ИмяПользователя) Тогда
				ИмяПользователя = Задания[0].ИмяПользователя;
			КонецЕсли;
		КонецЕсли;
			
		Для Итерация = 1 По 10 Цикл
			ДатаНачала = ТекущаяДатаСеанса();
			
			ВыполнитьРегламентноеЗаданиеДляКаждойОбластиДанных(
				РегламентноеЗадание,
				НастройкаДляМоделиСервиса,
				НастройкиЗаданий,
				ИмяПользователя);
				
			Если Расписание = Неопределено 
				Или Не Расписание.ТребуетсяВыполнение(, ДатаНачала) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если Отказ = Неопределено Тогда
			ВызватьИсключение
				НСтр("ru = 'Регламентное задание выполнено для каждой области данных.'");
		КонецЕсли;
			
		Отказ = Истина;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет регламентное задание для каждой области данных.
//
// Параметры:
//  РегламентноеЗадание	 - ОбъектМетаданных - объект метаданных регламентного задания.
//  Настройка			 - СтрокаТаблицыЗначений - строка настройки регламентного задания из таблицы НастройкиЗаданий. 
//  НастройкиЗаданий	 - ТаблицаЗначений - таблица настроек из РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций().
//
Процедура ВыполнитьРегламентноеЗаданиеДляКаждойОбластиДанных(РегламентноеЗадание, Настройка = Неопределено, НастройкиЗаданий = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Если Настройка = Неопределено Тогда
		Настройка = ПолучитьНастройкуРегламентногоЗаданияВМоделиСервиса(РегламентноеЗадание, НастройкиЗаданий);
	КонецЕсли;
	
	Если Настройка <> Неопределено Тогда
		Если Настройка.ФункциональныйРазделительВМоделиСервиса <> Неопределено Тогда
			Параметр = Настройка.ФункциональныйРазделительВМоделиСервиса;
		КонецЕсли;
		Если Настройка.ХранениеПользователяВМоделиСервиса <> Неопределено Тогда
			Пользователь = Настройка.ХранениеПользователяВМоделиСервиса;
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого Разделитель Из ИтераторОбходаОбластейДанных(Параметр,, РегламентноеЗадание, Настройка) Цикл
		
		Если Не ВойтиВОбластьДанных(Разделитель, РегламентноеЗадание, Истина, НастройкиЗаданий, ?(Пользователь = Неопределено, ИмяПользователя, Пользователь)) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ВыполнитьМетодРегламентногоЗадания(РегламентноеЗадание, Настройка);
			
		Исключение
			
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Фоновое задание. Ошибка выполнения'"),
				УровеньЖурналаРегистрации.Ошибка,
				РегламентноеЗадание,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
			
	КонецЦикла;
	
	Если ПараметрыСеанса.ОбластьДанныхИспользование Тогда
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Запускает выполнение метода регламентного задания.
//
// Параметры:
//  РегламентноеЗадание	 - ОбъектМетаданных - объект метаданных регламентного задания.
//  Настройка			 - СтрокаТаблицыЗначений - строка настройки регламентного задания из таблицы НастройкиЗаданий.
//
Процедура ВыполнитьМетодРегламентногоЗадания(РегламентноеЗадание, Настройка = Неопределено)
	
	Если Настройка <> Неопределено 
		И Настройка.ПараллельноеВыполнениеВМоделиСервиса Тогда
		
		Если ФоновыеЗадания.ПолучитьФоновыеЗадания(
			Новый Структура("ИмяМетода,Ключ,Состояние", РегламентноеЗадание.ИмяМетода, РегламентноеЗадание.Ключ, СостояниеФоновогоЗадания.Активно)).Количество() Тогда
			Возврат; // уже работает.
		КонецЕсли;
		
		ФоновыеЗадания.Выполнить(РегламентноеЗадание.ИмяМетода,, РегламентноеЗадание.Ключ,
			?(РегламентноеЗадание.Наименование <> "", РегламентноеЗадание.Наименование, РегламентноеЗадание.Синоним));
			
	Иначе
		
		Выполнить(РегламентноеЗадание.ИмяМетода + "()");
		
		Если ТранзакцияАктивна() Тогда
			ВызватьИсключение 
				НСтр("ru = 'Обнаружена незавершенная транзакция в методе регламентного задания '")
				+ РегламентноеЗадание.ИмяМетода + "()";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив разделителей активных областей данных.
// Для неразделенной ИБ содержит один элемент. 
//
// Параметры:
//  ПараметрИспользования          - Строка - имя константы для пропуска областей не использующих функциональность.
//											  Должна входить в общий реквизит ОбластьДанныхВспомогательныеДанные.
//  ПрименятьДляРазделенныхСеансов - Булево - пропускать обход в разделенных сеансах.
// 
// Возвращаемое значение:
//   - Массив, значений разделителя ИБ.
//
Функция ИтераторОбходаОбластейДанных(ПараметрИспользования = Неопределено, ПрименятьДляРазделенныхСеансов = Ложь, РегламентноеЗадание = Неопределено, Настройка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСеанса.ОбластьДанныхИспользование
		И Не ПрименятьДляРазделенныхСеансов Тогда
		Возврат Новый Массив(1); // только по текущей области данных.
	КонецЕсли;
	
	Отключено = Ложь;
	Если ПараметрыСеанса.ОбластьДанныхИспользование Тогда
		Отключено = Истина;
		ПараметрыСеанса.ОбластьДанныхИспользование = Ложь;
	КонецЕсли;
		
	Результат = ОбластиДанныхИспользующиеФункциональность(РегламентноеЗадание, ПараметрИспользования, Настройка);
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли;
		
	Если Отключено Тогда
		ПараметрыСеанса.ОбластьДанныхИспользование = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Меняет значение разделителя с изменением всех параметров сеанса. 
//
// Параметры:
//  ЗначениеРазделителя	 - Число - значение нового разделителя.
//  ОбъектМетаданных	 - ОбъектМетаданных - для привязки в ЖР.
//  ПроверитьДоступностьРегламентногоЗадания - Булево - выполнить проверку доступности рег.задания по ФО и прочим настройкам.
//
Функция ВойтиВОбластьДанных(ЗначениеРазделителя, ОбъектМетаданных = Неопределено, ПроверитьДоступностьРегламентногоЗадания = Ложь, НастройкиЗаданий = Неопределено, Пользователь = Неопределено, Контекст = Неопределено) Экспорт 
	
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
	
	Если ЗначениеРазделителя <> Неопределено Тогда
		
		Попытка
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Сеанс. Разделение'"),
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектМетаданных,
				Контекст,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Попытка	
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			Исключение
			КонецПопытки;
			
			Возврат Ложь;
		КонецПопытки;
		
		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			Текст = НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.
				               |Рекомендуется запрещать выполнение регламентных заданий на время обновления.'");
			Попытка	
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			Исключение
			КонецПопытки;
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сеанс. Разделение'"),
			УровеньЖурналаРегистрации.Информация,
			ОбъектМетаданных,
			Контекст);
		
	ИначеЕсли ЗначениеРазделителя = Неопределено И ПараметрыСеанса.ОбластьДанныхИспользование Тогда
		
		Попытка
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Сеанс. Разделение'"),
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектМетаданных,
				Контекст,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сеанс. Разделение'"),
			УровеньЖурналаРегистрации.Информация,
			ОбъектМетаданных,
			Контекст);
		
	КонецЕсли;
	
	Если Пользователь <> Неопределено Тогда
		Значение = Неопределено;
		Если Пользователь = Истина Тогда // из настройки рег.задания
			Для Каждого Задание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", ОбъектМетаданных)) Цикл
				Если Задание.ИмяПользователя <> "" Тогда
					Значение = Задание.ИмяПользователя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Пользователь) = Тип("ОбъектМетаданных") Тогда // константа
			Значение = Константы[Пользователь.Имя].Получить();
		ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда 
			Значение = Пользователь;
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда // имя
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Значение);
			Если ПользовательИБ <> Неопределено Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ИдентификаторПользователяИБ = &ИД
				|
				|УПОРЯДОЧИТЬ ПО
				|	Пользователи.ПометкаУдаления,
				|	Пользователи.Недействителен");
				Запрос.УстановитьПараметр("ИД", ПользовательИБ.УникальныйИдентификатор);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				Значение = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыСеанса.ТекущийПользователь = Значение;
		Иначе
			ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
			ПользователиСлужебный.АвторизоватьТекущегоПользователя(Истина);
			Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
				ПользователиСлужебный.УстановкаПараметровСеанса("ТекущийПользователь", Новый Массив);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьДоступностьРегламентногоЗадания И ОбъектМетаданных <> Неопределено Тогда
		//Часть процедуры ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(ОбъектМетаданных);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Доступно = Ложь;
		Попытка
			БлокировкаРаботыСВнешнимиРесурсами.ПриНачалеВыполненияРегламентногоЗадания(ОбъектМетаданных);
			Доступно = РегламентныеЗаданияСлужебный.РегламентноеЗаданиеДоступноПоФункциональнымОпциям(ОбъектМетаданных, НастройкиЗаданий);
		Исключение
			// Ошибку недоступности просто пропускаем.
		КонецПопытки;
		
		Возврат Доступно = Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Ищет строку настройки регламентного задания с настройками для обработки в модели сервиса.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных регламентного задания.
//  НастройкиЗаданий - ТаблицаЗначений - таблица настроек из РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций().
// 
// Возвращаемое значение:
//   - СтрокаТаблицыЗначений
//
Функция ПолучитьНастройкуРегламентногоЗаданияВМоделиСервиса(ОбъектМетаданных, НастройкиЗаданий = Неопределено) Экспорт
	
	Если НастройкиЗаданий = Неопределено Тогда
		НастройкиЗаданий = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	КонецЕсли;
	
	НастройкаДляМоделиСервиса = Неопределено;
	Для Каждого Настройка Из НастройкиЗаданий.НайтиСтроки(Новый Структура("РегламентноеЗадание", ОбъектМетаданных)) Цикл
		Если Настройка.ДоступноВМоделиСервиса = Ложь
			Или Настройка.ОчередьЗаданийВМоделиСервиса < 0 Тогда
			// Не обрабатывает разделенные данные.
			Прервать;
			
		ИначеЕсли НастройкаДляМоделиСервиса = Неопределено Тогда
			НастройкаДляМоделиСервиса = Настройка;
			
		Иначе
			ОбъединитьНастройкуРегламентногоЗаданияВМоделиСервиса(Настройка, НастройкаДляМоделиСервиса);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкаДляМоделиСервиса;
	
КонецФункции

// Объединяет настройки нескольких строк по регламентному заданию.
//
Процедура ОбъединитьНастройкуРегламентногоЗаданияВМоделиСервиса(НоваяСтрока, ИсходнаяСтрока)
	
	Если НоваяСтрока.ПараллельноеВыполнениеВМоделиСервиса = Истина Тогда
		ИсходнаяСтрока.ПараллельноеВыполнениеВМоделиСервиса = Истина;
	КонецЕсли;
	Если НоваяСтрока.ХранениеПользователяВМоделиСервиса <> Неопределено Тогда
		ИсходнаяСтрока.ХранениеПользователяВМоделиСервиса = НоваяСтрока.ХранениеПользователяВМоделиСервиса;
	КонецЕсли;
	
	Если НоваяСтрока.ФункциональныйРазделительВМоделиСервиса = Неопределено
		Или НоваяСтрока.ФункциональныйРазделительВМоделиСервиса = ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса Тогда
		
	ИначеЕсли ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса = Неопределено Тогда
		ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса = НоваяСтрока.ФункциональныйРазделительВМоделиСервиса;
		
	ИначеЕсли ТипЗнч(ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса) = Тип("Массив") Тогда
		Если ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса.Найти(НоваяСтрока.ФункциональныйРазделительВМоделиСервиса) = Неопределено Тогда
			ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса.Добавить(НоваяСтрока.ФункциональныйРазделительВМоделиСервиса);
		КонецЕсли;
		
	Иначе
		ВсеФО = Новый Массив;
		ВсеФО.Добавить(ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса);
		ВсеФО.Добавить(НоваяСтрока.ФункциональныйРазделительВМоделиСервиса);
		ИсходнаяСтрока.ФункциональныйРазделительВМоделиСервиса = ВсеФО;
		
	КонецЕсли;
			
КонецПроцедуры

// Получает массив значений разделителей областей данных, где включена необходимая функциональность.
//
// Параметры:
//  РегламентноеЗадание			 - ОбъектМетаданных - регламентное задание для идентификации в ЖР.
//  ФункциональныйРазделитель	 - ОбъектМетаданных, Строка, Неопределено - ОбъектМетаданных: для передачи ФО; строка: для имени константы или имени функции; Неопределено: для получения всех активных областей.
// 
// Возвращаемое значение:
//   - Массив разделителей (число)
//
Функция ОбластиДанныхИспользующиеФункциональность(РегламентноеЗадание, ФункциональныйРазделитель, Настройка = Неопределено) Экспорт
	
	Если ФункциональныйРазделитель = Неопределено Тогда
		// Все области.
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК Разделитель
		|ИЗ
		|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
		|ГДЕ
		|	ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Разделитель");
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	ИначеЕсли ТипЗнч(ФункциональныйРазделитель) = Тип("ОбъектМетаданных") Тогда
		
		Если Метаданные.ФункциональныеОпции.Содержит(ФункциональныйРазделитель) Тогда 
			// Функциональная опция.
			Запрос = Новый Запрос(СтрШаблон(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.ОбластьДанныхВспомогательныеДанные КАК Разделитель
			|ИЗ
			|	Константа.%1 КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДанных КАК ОбластиДанных
			|		ПО Т.ОбластьДанныхВспомогательныеДанные = ОбластиДанных.ОбластьДанныхВспомогательныеДанные
			|			И (ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
			|ГДЕ
			|	Т.Значение = ИСТИНА
			|	И Т.ОбластьДанныхВспомогательныеДанные > 0", ФункциональныйРазделитель.Хранение.Имя));
			
		Иначе
			// Константа
			Запрос = Новый Запрос(СтрШаблон(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных 
			|ИЗ
			|	Константа.%1 КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДанных КАК ОбластиДанных
			|		ПО Т.ОбластьДанныхВспомогательныеДанные = ОбластиДанных.ОбластьДанныхВспомогательныеДанные
			|			И (ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
			|ГДЕ
			|	Т.Значение <> ЛОЖЬ
			|	И Т.Значение <> 0
			|	И Т.Значение <> """"
			|	И Т.Значение <> ДАТАВРЕМЯ(1,1,1)
			|	И Т.ОбластьДанныхВспомогательныеДанные > 0", ФункциональныйРазделитель.Имя));
		КонецЕсли;
		
		Попытка
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Фоновое задание. Ошибка выполнения'"),
				УровеньЖурналаРегистрации.Ошибка,
				РегламентноеЗадание, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				+ Символы.ПС + Символы.ПС + Запрос.Текст);	
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ФункциональныйРазделитель) = Тип("Массив") Тогда
		//Несколько ФО.
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Разделитель");
		
		Если Настройка <> Неопределено И Настройка.ЗависимостьПоИ = Истина Тогда
			//Объединение по И.
			Результат.Колонки.Добавить("И");
			Для Каждого Параметр Из ФункциональныйРазделитель Цикл
				Для Каждого Разделитель Из ОбластиДанныхИспользующиеФункциональность(РегламентноеЗадание, Параметр) Цикл
					Запись = Результат.Добавить();
					Запись.Разделитель = Разделитель;
					Запись.И = 1;
				КонецЦикла;
			КонецЦикла;
			Результат.Свернуть("Разделитель", "И");
			Ин = Результат.Количество();
			Пока Ин > 0 Цикл
				Ин = Ин - 1;
				Если Результат[Ин].И <> ФункциональныйРазделитель.Количество() Тогда
					Результат.Удалить(Ин);
				КонецЕсли;
			КонецЦикла;
		Иначе
			//По умолчанию объединение по ИЛИ.
			Для Каждого Параметр Из ФункциональныйРазделитель Цикл
				Для Каждого Разделитель Из ОбластиДанныхИспользующиеФункциональность(РегламентноеЗадание, Параметр) Цикл
					Результат.Добавить().Разделитель = Разделитель;
				КонецЦикла;
			КонецЦикла;
			Результат.Свернуть("Разделитель");
		КонецЕсли;
		
		Результат.Сортировать("Разделитель");
		Возврат Результат.ВыгрузитьКолонку("Разделитель");
		
	Иначе
		// Функция
		Результат = Неопределено;
		Попытка
			Выполнить("Результат = " + ФункциональныйРазделитель);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Фоновое задание. Ошибка выполнения'"),
				УровеньЖурналаРегистрации.Ошибка,
				РегламентноеЗадание, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				+ Символы.ПС + Символы.ПС + Запрос.Текст);	
		КонецПопытки;
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Возврат Результат;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

#КонецОбласти
