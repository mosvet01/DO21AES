////////////////////////////////////////////////////////////////////////////////
// Помощник отправки объектов (переопределяемый).
//  Содержит переопределяемые процедуры и функции общ. модуля ПомощникОтправить.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Вызывается из ПомощникОтправить.Помощник при создании помощника отправки.
//
// Параметры:
//  Помощник - Структура - структура помощника, которую следует заполнить.
//  СтандартнаяОбработка - Булево - при установке Ложь стандартное создание помощника
//                                  будет проигнорировано.
//
Процедура ПриСозданииПомощникаОтправки(Помощник, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ЗаполнитьДеревоВариантовОтправки при
// заполнении дерева вариантов отправки.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартное заполнение дерева вариантов
//                                  будет проигнорировано.
//
Процедура ПриЗаполненииДереваВариантовОтправки(Помощник, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ПроверитьВозможностьОтправки при
// проверке возможности отправки объектов.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартная проверка
//                                  будет проигнорирована.
//
Процедура ПриПроверкеВозможностиОтправки(Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПомощникОтправитьКОРП.ПроверитьВозможностьОтправки(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ЗаголовокПомощника при
// получении заголовка помощника
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  Заголовок - Строка - заголовок помощника, который следует заполнить.
//  СтандартнаяОбработка - Булево - при установке Ложь стандартное получение заголовка
//                                  будет проигнорировано.
//
Процедура ПриПолученииЗаголовкаПомощника(Помощник, Заголовок, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Заголовок = ПомощникОтправитьКОРП.ЗаголовокПомощника(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ЗаголовокКомандыВыбораВариантаПомощника при
// получении заголовка команды выбора помощника.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  Заголовок - Строка - заголовок помощника, который следует заполнить.
//  СтандартнаяОбработка - Булево - при установке Ложь стандартное получение заголовка
//                                  будет проигнорировано.
//
Процедура ПриПолученииЗаголовкаКомандыВыбораВариантаПомощника(Помощник, Заголовок, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Заголовок = ПомощникОтправитьКОРП.ЗаголовокКомандыВыбораВариантаПомощника(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ОписаниеВарианта при
// формировании описания варианта.
//
// Параметры:
//  Вариант - Произвольный - вариант отправки.
//  Описание - Строка - описание варианта, в которое следует поместить описание.
//  СтандартнаяОбработка -  Булево - при установке Ложь стандартное формирование описания
//                                   будет проигнорировано.
//
Процедура ПриФормированииОписанияВарианта(Вариант, Описание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Описание = ПомощникОтправитьКОРП.ОписаниеВарианта(Вариант);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ПараметрыВарианта при получении параметров варианта.
//
// Параметры:
//  Вариант - Произвольный - вариант отправки.
//  Параметры - Структура - параметры варианта, которые следует заполнить.
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка -  Булево - при установке Ложь стандартное получение параметров
//                                   будет проигнорировано.
//
Процедура ПриПолученииПараметровВарианта(Вариант, Параметры, Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Параметры = ПомощникОтправитьКОРП.ПараметрыВарианта(Вариант, Помощник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВариантСоздатьПисьмоНаОсновании

// Вызывается из ПомощникОтправить.ДобавитьВДеревоВариантСоздатьПисьмоНаОсновании
// при добавлении в дерево варианта создания письма.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка -  Булево - при установке Ложь стандартный алгоритм добавления варианта
//                                   будет проигнорировано.
//
Процедура ПриДобавленииВДеревоВариантаСозданияПисьма(Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПомощникОтправитьКОРП.ДобавитьВДеревоВариантСоздатьПисьмоНаОсновании(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ДопустимыеТипыОбъектовДляВариантаСоздатьПисьмоНаОсновании
// при получении допустимых типов для создания письма.
//
// Параметры:
//  ДопустимыеТипы - Соответствие - допустимые типы, следует заполнить.
//    * Ключ - Тип - тип объекта.
//    * Значение - Булево - всегда Истина.
//  СтандартнаяОбработка -  Булево - при установке Ложь стандартный алгоритм получения допустимых типов
//                                   будет проигнорирован.
//
Процедура ПриПолученииДопустимыхТиповДляСозданияПисьма(
	ДопустимыеТипы, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДопустимыеТипы = ПомощникОтправитьКОРП.ДопустимыеТипыОбъектовДляВариантаСоздатьПисьмоНаОсновании();
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ПредставлениеВариантаСоздатьПисьмоНаОсновании
// при получении представления варианта создания письма.
//
// Параметры:
//  Представление - Строка - представление варианта, которое необходимо заполнить.
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка -  Булево - при установке Ложь стандартная логика получения представления
//                                   будет проигнорирована.
//
Процедура ПриПолученииПредставленияВариантаСозданияПисьма(
	Представление, Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Представление = ПомощникОтправитьКОРП.ПредставлениеВариантаСоздатьПисьмоНаОсновании(Помощник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВариантыСозданияПроцессов

// Вызывается из ПомощникОтправить.ЗаполнитьПредметыПроцесса при
// заполнении предметов процесса.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартное заполнение предметов
//                                  будет проигнорировано.
//
Процедура ПриЗаполненииПредметовПроцесса(Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПомощникОтправитьКОРП.ЗаполнитьПредметыПроцесса(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ЗаполнитьРекомендуемыеВариантыСозданияПроцессов при
// заполнении рекомендуемых вариантов создания процессов.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартная логика заполнения рекомендуемых вариантов
//                                  будет проигнорирована.
//
Процедура ПриЗаполненииРекомендуемыхВариантовСозданияПроцессов(
	Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПомощникОтправитьКОРП.ЗаполнитьРекомендуемыеВариантыСозданияПроцессов(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ЗаполнитьОбщиеВариантыСозданияПроцессов при
// заполнении общ. вариантов создания процессов.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартная логика заполнения общ. вариантов
//                                  будет проигнорирована.
//
Процедура ПриЗаполненииОбщихВариантовСозданияПроцессов(Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПомощникОтправитьКОРП.ЗаполнитьОбщиеВариантыСозданияПроцессов(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ЗаполнитьДругиеВариантыСозданияПроцессов при
// заполнении других вариантов создания процессов.
//
// Параметры:
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартная логика заполнения других вариантов
//                                  будет проигнорирована.
//
Процедура ПриЗаполненииДругихВариантовСозданияПроцессов(Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПомощникОтправитьКОРП.ЗаполнитьДругиеВариантыСозданияПроцессов(Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ПредставлениеВариантаСозданияПроцессаПоУмолчанию
// при получении представления варианта создания процесса по умолчанию для Еще.
//
// Параметры:
//  Представление - Строка - предметавление, которое необходимо заполнить.
//  Вариант - СправочникСсылка - ссылка на шаблон процесса.
//  Помощник - см. ПомощникОтправить.Помощник()
//  СтандартнаяОбработка - Булево - при установке Ложь будет проигнорирована
//                                  стандартная логика получения представления.
//
Процедура ПриПолученииПредставленияВариантаСозданияПроцессаПоУмолчанию(
	Представление, Вариант, Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Представление = ПомощникОтправитьКОРП.ПредставлениеВариантаСозданияПроцессаПоУмолчанию(
		Вариант, Помощник);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ПредставлениеВариантаУтвержденияПоУмолчанию
// при получении представления варианта утверждения по умолчанию.
//
// Параметры:
//  Представление - Строка - представление, которое нужно заполнить.
//  СтандартнаяОбработка - Булево - при установке Ложь стандартная логика формирования представления
//                                  будет проигнорирована.
//
Процедура ПриПолученииПредставленияВариантаУтвержденияПоУмолчанию(Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Представление = ПомощникОтправитьКОРП.ПредставлениеВариантаУтвержденияПоУмолчанию();
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ОписаниеВариантаСозданияПроцесса при
// получении описания варианта создания процесса.
//
// Параметры:
//  Вариант - Произвольный - вариант отправки.
//  HTMLОписание - Строка - описание варианта, которое нужно заполнить.
//  СтандартнаяОбработка - Булево - при установке Ложь стандартный алгоритм получения описания
//                                  будет проигнорирован.
//
Процедура ПриФормированиеОписанияОписаниеВариантаСозданияПроцесса(
	Вариант, HTMLОписание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	HTMLОписание = ПомощникОтправитьКОРП.ОписаниеВариантаСозданияПроцесса(Вариант);
	
КонецПроцедуры

// Вызывается из ПомощникОтправить.ПараметрыВариантаСозданияПроцесса при
// формировании параметров варианта создания процесса.
//
// Параметры:
//  Параметры - Структура - параметры, которые требуется заполнить.
//  Вариант - СправочникСсылка - ссылка на шаблон процесса.
//  Помощник - Структура - см. ПомощникОтправить.Помощник();
//  СтандартнаяОбработка - Булево - при установке Ложь стандартная логика определения параметров
//                                  будет проигнорирована.
//
Процедура ПриФормированиеПараметровВариантаСозданияПроцесса(
	Параметры, Вариант, Помощник, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Параметры = ПомощникОтправитьКОРП.ПараметрыВариантаСозданияПроцесса(Вариант, Помощник);
	
КонецПроцедуры

#КонецОбласти