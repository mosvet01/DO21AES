///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняется перед интерактивным началом работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПередНачаломРаботыСистемы.
//
// Параметры:
//  Параметры - Структура:
//   * Отказ         - Булево - возвращаемое значение. Если установить Истина, то работа программы будет прекращена.
//   * Перезапустить - Булево - возвращаемое значение. Если установить Истина, и параметр Отказ тоже установлен
//                              в Истина, то выполняется перезапуск программы.
// 
//   * ДополнительныеПараметрыКоманднойСтроки - Строка - возвращаемое значение. Имеет смысл, когда Отказ
//                              и Перезапустить установлены Истина.
//
//   * ИнтерактивнаяОбработка - ОписаниеОповещения - возвращаемое значение. Для открытия окна, блокирующего вход в
//                              программу, следует присвоить в этот параметр описание обработчика
//                              оповещения, который открывает окно. Смотри пример ниже.
//
//   * ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход в программу, то в обработке
//                              закрытия этого окна необходимо выполнить оповещение ОбработкаПродолжения. Смотри пример ниже.
//
//   * Модули                 - Массив - ссылки на модули, в которых нужно вызвать эту же процедуру после возврата.
//                              Модули можно добавлять только в рамках вызова в процедуру переопределяемого модуля.
//                              Используется для упрощения реализации нескольких последовательных асинхронных вызовов
//                              в разные подсистемы. См. пример ИнтеграцияПодсистемБСПКлиент.ПередНачаломРаботыСистемы.
//
// Пример:
//  Следующий код открывает окно, блокирующее вход в программу.
//
//		Если ОткрытьОкноПриЗапуске Тогда
//			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ОткрытьОкно", ЭтотОбъект);
//		КонецЕсли;
//
//	Процедура ОткрытьОкно(Параметры, ДополнительныеПараметры) Экспорт
//		// Показываем окно, по закрытию которого вызывается обработчик оповещения ОткрытьОкноЗавершение.
//		Оповещение = Новый ОписаниеОповещения("ОткрытьОкноЗавершение", ЭтотОбъект, Параметры);
//		Форма = ОткрытьФорму(... ,,, ... Оповещение);
//		Если Не Форма.Открыта() Тогда // Если ПриСозданииНаСервере Отказ установлен Истина.
//			ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
//		КонецЕсли;
//	КонецПроцедуры
//
//	Процедура ОткрытьОкноЗавершение(Результат, Параметры) Экспорт
//		...
//		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
//		
//	КонецПроцедуры
//
Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиента.ОткрытьРасчетПравДоступаПослеОбновления Тогда
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ОткрытьРасчетПравДоступаПослеОбновления", ЭтотОбъект);
	ИначеЕсли ПараметрыРаботыКлиента.ЗапретРасчетПравДоступаПослеОбновления Тогда
		Параметры.Отказ = Истина;
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ЗапретРасчетПравДоступаПослеОбновления", ЭтотОбъект);
	ИначеЕсли ПараметрыРаботыКлиента.ПредупреждениеРасчетПравДоступаПослеОбновления Тогда
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ПредупреждениеРасчетПравДоступаПослеОбновления", ЭтотОбъект);
	КонецЕсли;
	
	РаботаСЧасовымиПоясамиКлиент.АктуализироватьЧасовойПояс(
		ПараметрыРаботыКлиента.ЧасовойПоясПользователя);
	
КонецПроцедуры

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПриНачалеРаботыСистемы.
//
// Параметры:
//  Параметры - Структура:
//   * Отказ         - Булево - возвращаемое значение. Если установить Истина, то работа программы будет прекращена.
//   * Перезапустить - Булево - возвращаемое значение. Если установить Истина и параметр Отказ тоже установлен
//                              в Истина, то выполняется перезапуск программы.
//
//   * ДополнительныеПараметрыКоманднойСтроки - Строка - возвращаемое значение. Имеет смысл
//                              когда Отказ и Перезапустить установлены Истина.
//
//   * ИнтерактивнаяОбработка - ОписаниеОповещения - возвращаемое значение. Для открытия окна, блокирующего вход
//                              в программу, следует присвоить в этот параметр описание обработчика оповещения,
//                              который открывает окно. См. пример в ПередНачаломРаботыСистемы.
//
//   * ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход в программу, то в
//                              обработке закрытия этого окна необходимо выполнить оповещение ОбработкаПродолжения.
//                              См. пример в ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
//                              
//   * Модули                 - Массив - ссылки на модули, в которых нужно вызвать эту же процедуру после возврата.
//                              Модули можно добавлять только в рамках вызова в процедуру переопределяемого модуля.
//                              Используется для упрощения реализации нескольких последовательных асинхронных вызовов
//                              в разные подсистемы. См. пример ИнтеграцияПодсистемБСПКлиент.ПередНачаломРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователейКлиент.ПриНачалеРаботыСистемы(Параметры);
	// Конец ИнтернетПоддержкаПользователе
	
	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверСканераШтрихкодов");
	РаботаСТорговымОборудованием.ОтключитьСканерШтрихкодов();
	РаботаСТорговымОборудованием.ПодключитьСканерШтрихкодов("ПоискДокументовПоШтрихкоду");
	
	ПротоколированиеРаботыПользователей.ЗаписатьВходВСистему();
	
	ФайловыеФункцииКлиент.ПеренестиЗаписиИзРегистраФайлыВРабочемКаталоге();
	ФайловыеФункцииКлиент.ПеренестиЗаписиИзРегистраРабочиеКаталогиФайлов();
	
	// ВстроеннаяПочта
	// Установка глобального параметра для использования при завершении работы программы.
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
		"АвтоматическиСохранятьВерсииНеотправленногоПисьма", 
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку(
			"АвтоматическиСохранятьВерсииНеотправленногоПисьма"));
	// ВстроеннаяПочта	
	
	ОбщийОбработчикОжиданияКлиент.ПодключитьОбщийОбработчикОжидания();
	
	РаботаСЧатБотомКлиент.СоздатьЧатБота();
	ОбсужденияДокументооборотКлиент.ПриНачалеРаботыСистемы();

#Если МобильныйКлиент Тогда	
	// Получаем информацию об устройстве для пуш уведомлений МК.
	СведенияОМобильномКлиенте = МобильныйКлиентНаКлиенте.НовыйСведенияОМобильномКлиенте();
	
 	ИдентификаторПодписчикаУведомлений = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений();
	СведенияОМобильномКлиенте.ИдентификаторПодписчикаУведомления = ИдентификаторПодписчикаУведомлений;
		
	ЗаполнитьЗначенияСвойств(СведенияОМобильномКлиенте, Новый СистемнаяИнформация);
	МобильныйКлиентВызовСервера.ЗаписатьИнформациюОМобильномКлиенте(СведенияОМобильномКлиенте);
	
	// Обработчик нажатия на пуш уведомление.
	ДоставляемыеУведомления.ПодключитьОбработчикУведомлений(
		Новый ОписаниеОповещения("Подключаемый_ОбработчикУведомлений", МобильныйКлиентНаКлиенте));

#КонецЕсли
	
КонецПроцедуры

// Вызывается для обработки собственных параметров запуска программы,
// передаваемых с помощью ключа командной строки /C, например: 1cv8.exe ... /CРежимОтладки;ОткрытьИЗакрыть.
//
// Параметры:
//  ПараметрыЗапуска  - Массив - массив строк разделенных символом ";" в параметре запуска,
//                      переданным в конфигурацию с помощью ключа командной строки /C.
//  Отказ             - Булево - если установить Истина, то запуск будет прерван.
//
Процедура ПриОбработкеПараметровЗапуска(ПараметрыЗапуска, Отказ) Экспорт
	
КонецПроцедуры

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Вызывается после завершения действий ПриНачалеРаботыСистемы.
// Используется для подключения обработчиков ожидания, которые не должны вызываться
// в случае интерактивных действий перед и при начале работы системы.
//
// Начальная страница (рабочий стол) в этот момент еще не открыта, поэтому запрещено открывать
// формы напрямую, а следует использовать для этих целей обработчик ожидания.
// Запрещено использовать это событие для интерактивного взаимодействия с пользователем
// (ПоказатьВопрос и аналогичные действия). Для этих целей следует размещать код в процедуре ПриНачалеРаботыСистемы.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ИмяПараметра = "РасчетПравДоступаПослеОбновления.ОткрытьРасчетПравДоступаПослеОбновления";
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.ОткрытьРасчетПравДоступаПослеОбновления 
		Или ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОткрытьРасчетПравДоступаПослеОбновления", 0.1, Истина);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеКлиент.ПослеНачалаРаботыСистемы();
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	ОбновитьКлассификатор = Ложь;
	Если ПараметрыРаботыКлиента.Свойство("ОбновитьКлассификатор") Тогда 
		Если ПараметрыРаботыКлиента.ОбновитьКлассификатор Тогда
			ОбновитьКлассификатор = Истина;
		ИначеЕсли ПараметрыРаботыКлиента.Свойство("ОбновлениеВерсииПрограммы") 
			И ПараметрыРаботыКлиента.ОбновлениеВерсииПрограммы = Истина Тогда 
			ОбновитьКлассификатор = РаботаСОбращениямиВызовСервера.АктуализироватьКлассификаторОбращенийГраждан();
		КонецЕсли;
	КонецЕсли;
	
	// Регламентированная отчетность
	Если ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		ДокументооборотСКОКлиент.ПослеЗапускаСистемы();
	КонецЕсли;
	// Конец Регламентированная отчетность
	
	Если ОбновитьКлассификатор Тогда
		ОткрытьФорму("Обработка.ОбновлениеКлассификатораОбращенийГраждан.Форма");
	КонецЕсли;
	
КонецПроцедуры

// Выполняется перед интерактивном завершении работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПередЗавершениемРаботыСистемы.
// Позволяет определить список предупреждений, выводимых пользователю перед завершением работы.
//
// Параметры:
//  Отказ          - Булево - если установить данному параметру значение Истина, то работа с программой не будет 
//                            завершена.
//  Предупреждения - Массив из см. СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершенииРаботы - 
//                            можно добавить сведения о внешнем виде предупреждения и дальнейших действиях.
//
Процедура ПередЗавершениемРаботыСистемы(Отказ, Предупреждения) Экспорт
	
КонецПроцедуры

// Позволяет переопределить заголовок программы.
//
// Параметры:
//  ЗаголовокПриложения - Строка - текст заголовка программы;
//  ПриЗапуске          - Булево - Истина, если вызывается при начале работы программы.
//                                 В этом случае недопустимо вызывать те серверные функции конфигурации,
//                                 которые рассчитывают на то, что запуск уже полностью завершен. 
//                                 Например, вместо СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента
//                                 следует вызывать СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске. 
//
// Пример:
//  Для того чтобы в начале заголовка программы вывести название текущего проекта, следует определить параметр 
//  ТекущийПроект в процедуре ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента и вписать код:
//
//  Если ПриЗапуске Тогда
//    Возврат;
//  КонецЕсли;
//  ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
//  ТекущийПроект = Неопределено;	
//  Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных И ПараметрыКлиента.Свойство("ТекущийПроект", ТекущийПроект) 
//	  И Не ПараметрыКлиента.ТекущийПроект.Пустая() Тогда
//	  ЗаголовокПриложения = Строка(ПараметрыКлиента.ТекущийПроект) + " / " + ЗаголовокПриложения;
//  КонецЕсли;
//
Процедура ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

// Открывать обработку обновления прав.
//
Процедура ОткрытьРасчетПравДоступаПослеОбновления(Параметры, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьРасчетПравДоступаПослеОбновленияЗавершение", ЭтотОбъект, Параметры);
	Форма = ОткрытьФорму("Обработка.РасчетПравДоступаПослеОбновления.Форма",,,,,, Оповещение);
	
КонецПроцедуры

// Обрабатывает закрытие обработки обновления прав.
//
Процедура ОткрытьРасчетПравДоступаПослеОбновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> "ВходВПрограммуРазрешен"
		И Результат <> "Завершено" Тогда
		Параметры.ОбработкаПродолжения.ДополнительныеПараметры.Отказ = Истина;
	КонецЕсли;
	Если Результат = "ВходВПрограммуРазрешен" Тогда
		ИмяПараметра = "РасчетПравДоступаПослеОбновления.ОткрытьРасчетПравДоступаПослеОбновления";
		ПараметрыПриложения.Вставить(ИмяПараметра, Истина);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Открывать обработку обновления прав.
//
Процедура ОбработкаОткрытьРасчетПравДоступаПослеОбновления() Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОткрытьРасчетПравДоступаПослеОбновленияЗавершение", ЭтотОбъект);
	Форма = ОткрытьФорму("Обработка.РасчетПравДоступаПослеОбновления.Форма",,,,,, Оповещение);
	
КонецПроцедуры

// Обрабатывает закрытие обработки обновления прав.
//
Процедура ОбработкаОткрытьРасчетПравДоступаПослеОбновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> "Завершено" Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Показывает запрет на вход в программу.
//
Процедура ЗапретРасчетПравДоступаПослеОбновления(Параметры, ДополнительныеПараметры) Экспорт
	
	ТекстПредупреждения = 
		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.
		|Обратитесь к администратору за подробностями.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Перезапустить", НСтр("ru = 'Перезапустить'"));
	Кнопки.Добавить("Завершить",     НСтр("ru = 'Завершить работу'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Вставить("КнопкаПоУмолчанию", "Перезапустить");
	ПараметрыВопроса.Вставить("КнопкаТаймаута",    "Перезапустить");
	ПараметрыВопроса.Вставить("Таймаут",           60);
	
	Оповещение = Новый ОписаниеОповещения("ЗапретРасчетПравДоступаПослеОбновленияЗавершение", ЭтотОбъект, Параметры);
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстПредупреждения, Кнопки, ПараметрыВопроса)
	
КонецПроцедуры

// Обрабатывает закрытие запрета на вход в программу.
//
Процедура ЗапретРасчетПравДоступаПослеОбновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Значение = "Перезапустить" Тогда
		Параметры.ОбработкаПродолжения.ДополнительныеПараметры.Перезапустить = Истина;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Показывает предупреждение.
//
Процедура ПредупреждениеРасчетПравДоступаПослеОбновления(Параметры, ДополнительныеПараметры) Экспорт
	
	ТекстПредупреждения = 
		НСтр("ru = 'Выполняется пересчет прав доступа. Некоторые данные в программе могут быть недоступны.
		|Обратитесь к администратору за подробностями.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Продолжить", НСтр("ru = 'Начать работу'"));
	Кнопки.Добавить("Завершить",     НСтр("ru = 'Завершить работу'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Вставить("КнопкаПоУмолчанию", "Продолжить");
	ПараметрыВопроса.Вставить("КнопкаТаймаута",    "Продолжить");
	ПараметрыВопроса.Вставить("Таймаут",           60);
	
	Оповещение = Новый ОписаниеОповещения("ПредупреждениеРасчетПравДоступаПослеОбновленияЗавершение", ЭтотОбъект, Параметры);
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстПредупреждения, Кнопки, ПараметрыВопроса)
	
КонецПроцедуры

// Обрабатывает закрытие предупреждения.
//
Процедура ПредупреждениеРасчетПравДоступаПослеОбновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Значение = "Завершить" Тогда
		Параметры.ОбработкаПродолжения.ДополнительныеПараметры.Отказ = Истина;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры
