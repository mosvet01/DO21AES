//@strict-types

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на исходящий документ, созданный на основании электронного документа для контролирующих органов.
// 
// Параметры:
// 	ДокументОтчетности - ДокументСсылка, СправочникСсылка - Ссылка на документ для контролирующих органов.
// Возвращаемое значение:
// 	СправочникСсылка.ИсходящиеДокументы - Ссылка на исходящий документ. Если документ не найден - пустая ссылка.
Функция ИсходящийДокументПоЭлектронномуДокументуКО(ДокументОтчетности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДокументахОбменСКО.Документ КАК Ссылка
		|ИЗ
		|	РегистрСведений.СведенияОДокументахОбменСКО КАК СведенияОДокументахОбменСКО
		|ГДЕ
		|	СведенияОДокументахОбменСКО.ДокументОтчетности = &ДокументОтчетности
		|	И СведенияОДокументахОбменСКО.Документ ССЫЛКА Справочник.ИсходящиеДокументы";
	
	Запрос.УстановитьПараметр("ДокументОтчетности", ДокументОтчетности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка; // СправочникСсылка.ИсходящиеДокументы - 
	КонецЕсли;
	
	Возврат Справочники.ИсходящиеДокументы.ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на входящий документ, созданный на основании электронного документа для контролирующих органов.
// 
// Параметры:
// 	ДокументОтчетности - ДокументСсылка, СправочникСсылка - Ссылка на документ для контролирующих органов.
// Возвращаемое значение:
// 	СправочникСсылка.ВходящиеДокументы - Ссылка на исходящий документ. Если документ не найден - пустая ссылка.
Функция ВходящийДокументПоЭлектронномуДокументуКО(ДокументОтчетности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДокументахОбменСКО.Документ КАК Ссылка
		|ИЗ
		|	РегистрСведений.СведенияОДокументахОбменСКО КАК СведенияОДокументахОбменСКО
		|ГДЕ
		|	СведенияОДокументахОбменСКО.ДокументОтчетности = &ДокументОтчетности
		|И СведенияОДокументахОбменСКО.Документ ССЫЛКА Справочник.ВходящиеДокументы";
	
	Запрос.УстановитьПараметр("ДокументОтчетности", ДокументОтчетности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка; // СправочникСсылка.ВходящиеДокументы - 
	КонецЕсли;
	
	Возврат Справочники.ВходящиеДокументы.ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на документ обмена с КО по ссылке на документ ДО.
// 
// Параметры:
// 	Документ - СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы -
// Возвращаемое значение:
// 	Неопределено, ОпределяемыйТип.ПредметЦиклаОбмена -
Функция ЭлектронныйДокументКОПоДокументу(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДокументахОбменСКО.ДокументОтчетности КАК Ссылка
		|ИЗ
		|	РегистрСведений.СведенияОДокументахОбменСКО КАК СведенияОДокументахОбменСКО
		|ГДЕ
		|	СведенияОДокументахОбменСКО.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает статус отправки электронного документа для контролирующего органа.
// 
// Параметры:
// 	Документ - ОпределяемыйТип.ПредметЦиклаОбмена - Электронный документ для контролирующего органа.
// Возвращаемое значение:
// 	Структура - Описание:
// * ПометкаУдаления - Булево - Пометка удаления документа.
// * СтатусОтправки - ПеречислениеСсылка.СтатусыОтправки - Статус отправки документа.
// * Ссылка - Неопределено, ЛюбаяСсылка - Ссылка на документ, если по нему есть статус, иначе Неопределено.
Функция СведенияОбОтправкеЭлектронногоДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("СтатусОтправки", Перечисления.СтатусыОтправки.ПустаяСсылка());
	Результат.Вставить("ПометкаУдаления", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыОтправки.Статус КАК СтатусОтправки,
		|	СтатусыОтправки.Объект КАК Ссылка,
		|	СтатусыОтправки.Объект.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		|ГДЕ
		|	СтатусыОтправки.Объект = &ДокументДокументооборота";
	
	Запрос.УстановитьПараметр("ДокументДокументооборота", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает основные сведения об электронном документе для заполнения документа ДО.
// 
// Параметры:
// 	Документ - ЛюбаяСсылка
// Возвращаемое значение:
// 	Структура - Основные сведения об электронном документе:
// * Комментарий - Строка -
// * ЕстьПриcоединенныйФайл - Булево -
// * Организация - СправочникСсылка.Организации -
// * Наименование - Строка -
// * Содержание - Строка -
// * СообщениеОбОшибке - Строка -
// * ТипКонтролирующегоОргана - ПеречислениеСсылка.ТипыКонтролирующихОрганов -
// * Контрагент - СправочникСсылка.Контрагенты -
Функция СведенияОбЭлектронномДокументе(Документ) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("ТипКонтролирующегоОргана", Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка());
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Содержание", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ЕстьПриcоединенныйФайл",	Ложь);
	Результат.Вставить("Комментарий",				"");
	
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО <> Неопределено Тогда
		СвойстваДокументаОтчетности = КонтекстЭДО.СвойстваОбъектовФормы1СОтчетность(Документ);
		ЗаполнитьЗначенияСвойств(Результат, СвойстваДокументаОтчетности);
	КонецЕсли; 
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		
		// В одном из полей - наша организация, в другом - контролирующий орган.
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Статус,Получатель,Отправитель,Содержание");
		ЭтоИсходящаяПереписка = Реквизиты.Статус <> Перечисления.СтатусыПисем.Полученное;
		Если ЭтоИсходящаяПереписка Тогда
			КонтролирующийОрган = Реквизиты.Получатель;
		Иначе
			КонтролирующийОрган = Реквизиты.Отправитель;
		КонецЕсли;
		
		Результат.Содержание = Реквизиты.Содержание;
		
	Иначе
		ИмяРеквизита = "НалоговыйОрган";
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") 
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОПолучателеДокументов") Тогда
			ИмяРеквизита = "Получатель";
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
			ИмяРеквизита = "РегистрацияВИФНС";
		КонецЕсли;
		
		КонтролирующийОрган = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, ИмяРеквизита);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтролирующийОрган) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #СправочникКонтролирующихОрганов КАК СправочникКО
			|		ПО Контрагенты.КодКонтролирующегоОргана = СправочникКО.Код
			|			И Контрагенты.ЭтоКонтролирующийОрган = Истина
			|			И Контрагенты.ТипКонтролирующегоОргана = &ТипКонтролирующегоОргана
			|			И СправочникКО.Ссылка = &Ссылка";
		
		ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка();
		Если ТипЗнч(КонтролирующийОрган) = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
			ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		ИначеЕсли ТипЗнч(КонтролирующийОрган) = Тип("СправочникСсылка.ОрганыПФР") Тогда
			ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		ИначеЕсли ТипЗнч(КонтролирующийОрган) = Тип("СправочникСсылка.ОрганыФСГС") Тогда
			ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипКонтролирующегоОргана) Тогда
			
			ИмяСправоникаКО = ОбщегоНазначения.ИмяТаблицыПоСсылке(КонтролирующийОрган);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СправочникКонтролирующихОрганов", ИмяСправоникаКО);
			Запрос.УстановитьПараметр("ТипКонтролирующегоОргана", ТипКонтролирующегоОргана);
			Запрос.УстановитьПараметр("Ссылка", КонтролирующийОрган);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				
				Результат.Контрагент = ВыборкаДетальныеЗаписи.Ссылка; // СправочникСсылка.Контрагенты - 
				
			Иначе
				
				Результат.СообщениеОбОшибке = СтрШаблон( 
					НСтр("ru = 'Контролирующий орган %1 не найден в справочнике Контрагенты.
					|Создайте контрагента на основании электронного документа или обратитесь к ответственному за НСИ.'"),
					КонтролирующийОрган);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат.СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Контролирующий орган %1 не заполнен в электронном документе (реквизит %2).
			|Заполните реквизит и повторите действие.'"),
			КонтролирующийОрган, ИмяРеквизита);
			
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создает или обновляет объект справочника Исходящие документы по данным документа ответности в КО.
// 
// Параметры:
// 	ДокументОтчетности - ОпределяемыйТип.ПредметЦиклаОбмена
// 	РежимОбновления - Булево - Если Истина и документ уже существует, то будет обновлен.
// Возвращаемое значение:
// 	Структура:
// * ОписаниеОшибки - Строка -
// * ДокументСуществует - Булево -
// * ИсходящийДокумент - СправочникСсылка.ИсходящиеДокументы -
Функция СоздатьИлиОбновитьИсходящийДокумент(ДокументОтчетности, РежимОбновления = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсходящийДокумент", Справочники.ИсходящиеДокументы.ПустаяСсылка());
	Результат.Вставить("ДокументСуществует", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ИмяТаблицыДокументОтчетности = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументОтчетности);
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументОтчетности);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОтчетности);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ИсходящийДокумент =
			ОтчетностьВКонтролирующиеОрганы.ИсходящийДокументПоЭлектронномуДокументуКО(ДокументОтчетности);
		Если Не ИсходящийДокумент.Пустая() Тогда
			Если РежимОбновления Тогда
				Блокировка = Новый БлокировкаДанных();
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ИсходящиеДокументы");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсходящийДокумент);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
	
				ИсходящийДокументоОбъект = ИсходящийДокумент.ПолучитьОбъект();
				
			Иначе
				Результат.ИсходящийДокумент = ИсходящийДокумент;
				Результат.ДокументСуществует = Истина;
				ЗафиксироватьТранзакцию();
				Возврат Результат;
			КонецЕсли;
			
			
		Иначе
			ИсходящийДокументоОбъект = Справочники.ИсходящиеДокументы.СоздатьЭлемент();
		КонецЕсли;
		
		ШаблонДокумента = ПодобратьШаблонДляСозданияДокумента(ДокументОтчетности, Ложь);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ШаблонДокумента", ШаблонДокумента);
		ДанныеЗаполнения.Вставить("Основание", ДокументОтчетности);
		
		ИсходящийДокументоОбъект.Заполнить(ДанныеЗаполнения);
		
		Если Делопроизводство.ИспользоватьВидыИсходящихДокументов() 
			И Не ЗначениеЗаполнено(ИсходящийДокументоОбъект.ВидДокумента) Тогда
			
			Результат.ОписаниеОшибки =
				НСтр("ru = 'Не заполнен вид документа.
				|Проверьте корректность настроек правил учета документов для контролирующи органов.'");
			ЗафиксироватьТранзакцию();
			Возврат Результат;
			
		КонецЕсли;
	
		ИсходящийДокументоОбъект.Записать();
		
		РегистрыСведений.СведенияОДокументахОбменСКО.ДобавитьЗапись(ИсходящийДокументоОбъект.Ссылка, ДокументОтчетности);
		
		// Создаем файлы
		СкопироватьФайлыИзДокументаОтчетности(ДокументОтчетности, ИсходящийДокументоОбъект.Ссылка, РежимОбновления);
		
		ИсходноеПисьмо = ИсходноеПисьмо(ДокументОтчетности);
		Если ЗначениеЗаполнено(ИсходноеПисьмо) Тогда
			СвязиДокументов.СоздатьСвязь(
				ИсходноеПисьмо, 
				ИсходящийДокументоОбъект.Ссылка, 
				Справочники.ТипыСвязей.ОтправленОтвет);
		КонецЕсли;
		
		Результат.ИсходящийДокумент = ИсходящийДокументоОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОтчетности.Метаданные(),
			ДокументОтчетности,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	

	Возврат Результат;
	
КонецФункции

// Создает или обновляет объект справочника Входящие документы по данным документа ответности в КО.
// 
// Параметры:
// 	ДокументОтчетности - ОпределяемыйТип.ПредметЦиклаОбмена
// 	РежимОбновления - Булево - Если Истина и документ уже существует, то будет обновлен.
// Возвращаемое значение:
// 	Структура:
// * ОписаниеОшибки - Строка -
// * ДокументСуществует - Булево -
// * ВходящийДокумент - СправочникСсылка.ВходящиеДокументы -
Функция СоздатьИлиОбновитьВходящийДокумент(ДокументОтчетности, РежимОбновления = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВходящийДокумент", Справочники.ВходящиеДокументы.ПустаяСсылка());
	Результат.Вставить("ДокументСуществует", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ИмяТаблицыДокументОтчетности = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументОтчетности);
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументОтчетности);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОтчетности);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ВходящийДокумент = ОтчетностьВКонтролирующиеОрганы.ВходящийДокументПоЭлектронномуДокументуКО(
			ДокументОтчетности); // СправочникСсылка.ВходящиеДокументы
		Если Не ВходящийДокумент.Пустая() Тогда
			
			Если РежимОбновления Тогда
				Блокировка = Новый БлокировкаДанных();
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ВходящиеДокументы");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВходящийДокумент);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
	
				ВходящийДокументОбъект = ВходящийДокумент.ПолучитьОбъект();
				
			Иначе
				Результат.ВходящийДокумент = ВходящийДокумент;
				Результат.ДокументСуществует = Истина;
				ЗафиксироватьТранзакцию();
				Возврат Результат;
			КонецЕсли;
			
		Иначе
			ВходящийДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		КонецЕсли;
		
		ШаблонДокумента = ПодобратьШаблонДляСозданияДокумента(ДокументОтчетности, Истина);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ШаблонДокумента", ШаблонДокумента);
		ДанныеЗаполнения.Вставить("Основание", ДокументОтчетности);
		
		ВходящийДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		Если Делопроизводство.ИспользоватьВидыВходящихДокументов() 
			И Не ЗначениеЗаполнено(ВходящийДокументОбъект.ВидДокумента) Тогда
			
			Результат.ОписаниеОшибки =
				НСтр("ru = 'Не заполнен вид документа.
				|Проверьте корректность настроек правил учета документов для контролирующи органов.'");
			ЗафиксироватьТранзакцию();
			Возврат Результат;
			
		КонецЕсли;
	
		ВходящийДокументОбъект.Записать();
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.СведенияОДокументахОбменСКО.ДобавитьЗапись(ВходящийДокументОбъект.Ссылка, ДокументОтчетности);
		УстановитьПривилегированныйРежим(Ложь);
		
		СкопироватьФайлыИзДокументаОтчетности(ДокументОтчетности, ВходящийДокументОбъект.Ссылка, РежимОбновления);
		
		ДокументыОтветыДО = ОтветыНаПисьмо(ДокументОтчетности);
		Для Каждого ДокументОтвет Из ДокументыОтветыДО Цикл
			
			СвязиДокументов.СоздатьСвязь(
				ДокументОтвет, 
				ВходящийДокументОбъект.Ссылка, 
				Справочники.ТипыСвязей.ОтправленВОтветНа);
			
		КонецЦикла;
		
		Результат.ВходящийДокумент = ВходящийДокументОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОтчетности.Метаданные(),
			ДокументОтчетности,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	

	Возврат Результат;
	
КонецФункции

Процедура СкопироватьФайлыИзДокументаОтчетности(Знач ДокументОтчетности, Знач ДокументДокументооборота,
	Знач РежимОбновления)
	
	ФайлыОснования = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ДокументОтчетности, ФайлыОснования);
	
	ВложенияДокументаОтчетности = Новый Массив;
	
	Если ТипЗнч(ДокументОтчетности) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		ВложенияДокументаОтчетности = 
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьСписокВложений(ДокументОтчетности);
		
	ИначеЕсли ТипЗнч(ДокументОтчетности) = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде")
		Или ТипЗнч(ДокументОтчетности) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов")
		Или ТипЗнч(ДокументОтчетности) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы") Тогда 
		
		ВложенияДокументаОтчетности = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.
			ПолучитьВложенияДокументовРеализацииПолномочийНалоговыхОрганов(ДокументОтчетности);
			
	КонецЕсли;	
	
	ФайлыОбновляемогоДокумента = Новый Соответствие();
	
	Если ФайлыОснования.Количество() > 0 Тогда
		
		Если РежимОбновления Тогда
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ДокументДокументооборота, Ложь);
			Если ПодчиненныеФайлы.Количество() > 0 Тогда
				ДанныеОФайлахОбновляемогоДокумента = РаботаСФайламиВызовСервера.ДанныеФайлов(ПодчиненныеФайлы);
				Для Каждого ДанныеФайла Из ДанныеОФайлахОбновляемогоДокумента Цикл
					ФайлыОбновляемогоДокумента.Вставить(
						ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение,
						ДанныеФайла.Ссылка);
				КонецЦикла;
			КонецЕсли;
			ПодчиненныеФайлы = Неопределено;
		КонецЕсли;
		
		Для Каждого ПрисоединенныйФайл Из ФайлыОснования Цикл
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			
			СведенияОФайле.АдресВременногоХранилищаФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			
			ЗаполнитьЗначенияСвойств(СведенияОФайле, ДанныеФайла);
			СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
			СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
			СведенияОФайле.ИмяБезРасширения = ДанныеФайла.Наименование;
			СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
			СведенияОФайле.Автор = ДанныеФайла.АвторТекущейВерсии;
			
			ФайлОбновляемогоДокумента = Неопределено;
			Если РежимОбновления Тогда
				ФайлОбновляемогоДокумента = ФайлыОбновляемогоДокумента.Получить(
					ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение);
			КонецЕсли;
			
			// Проверим, что файл есть во вложениях. Если нет - пометим на удаление.
			ПометкаУдаления = Истина;
			Для Каждого СведенияОВложении Из ВложенияДокументаОтчетности Цикл
				Если СведенияОВложении.ИмяФайла = ДанныеФайла.ИмяФайла Тогда
					ПометкаУдаления = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Обновляем файл, если уже есть.
			// Если исходный файл помечен на удаление - новый не создаем, имеющийся помечаем на удаление.
			Если ФайлОбновляемогоДокумента <> Неопределено Тогда
				Если ПометкаУдаления Тогда
					ФайлОбъект = ФайлОбновляемогоДокумента.ПолучитьОбъект();
					ФайлОбъект.ПометкаУдаления = Истина;
					ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
					ФайлОбъект.Записать();
				Иначе
					РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
						ФайлОбновляемогоДокумента,
						СведенияОФайле);
				КонецЕсли;
				 
			ИначеЕсли Не ПометкаУдаления Тогда
				ФайлОбновляемогоДокумента = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
					ДокументДокументооборота,
					СведенияОФайле);
			КонецЕсли;
			
			Если ДанныеФайла.ПодписанЭП Тогда
				
				УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
				СведенияОПодписи = Новый Массив;
				Для Каждого Элемент Из УстановленныеПодписи Цикл
					СведенияОПодписи.Добавить(
						Новый Структура("ПодписанныйОбъект, СвойстваПодписи", ФайлОбновляемогоДокумента, Элемент));
				КонецЦикла;
				
				РаботаСЭП.ЗанестиИнформациюОПодписях(СведенияОПодписи);
				
			КонецЕсли;
			
			
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СобытиеЖурналаРегистрации()
	Возврат НСтр("ru = 'Обмен с контролирующими органами'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

Функция ПодобратьШаблонДляСозданияДокумента(ДокументОтчетности, ВходящийДокумент)
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваДокументаОтчетности = КонтекстЭДО.СвойстваОбъектовФормы1СОтчетность(ДокументОтчетности);
	
	Параметры = РегистрыСведений.ПравилаУчетаДокументовОбменСКО.ПараметрыПодбораШаблонаДокумента();
	Параметры.Организация = СвойстваДокументаОтчетности.Организация;
	Параметры.ВходящийДокумент = ВходящийДокумент; // Создаем исходящий документ.
	Параметры.ТипКонтролирующегоОргана = СвойстваДокументаОтчетности.ВидКонтролирующегоОргана;
	
	Если ВходящийДокумент = Истина Тогда
		ВидЭлектронногоДокумента = Перечисления.ВидыДокументовПолучаемыхОтКО.Письмо;
		
		// Проверим на рассылку.
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЦиклыОбмена.Ссылка,
			|	ЦиклыОбмена.Тип
			|ИЗ
			|	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
			|ГДЕ
			|	ЦиклыОбмена.Предмет = &Предмет";
		
		Запрос.УстановитьПараметр("Предмет", ДокументОтчетности);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий(); 
			
			Если ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыЦикловОбмена.Рассылка
				ИЛИ ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая
				ИЛИ ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР
				ИЛИ ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС
				ИЛИ ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыЦикловОбмена.РассылкаШаблоновФСГС  тогда
				
				ВидЭлектронногоДокумента = Перечисления.ВидыДокументовПолучаемыхОтКО.Рассылка;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ВидЭлектронногоДокумента = Перечисления.ВидыДокументовОтправляемыхВКО.Письмо;
		Если СвойстваДокументаОтчетности.СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Письма Тогда
			ВидЭлектронногоДокумента = Перечисления.ВидыДокументовОтправляемыхВКО.Письмо;
		ИначеЕсли СвойстваДокументаОтчетности.СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Сверки Тогда
			ВидЭлектронногоДокумента = Перечисления.ВидыДокументовОтправляемыхВКО.ЗапросСверки;
		ИначеЕсли СвойстваДокументаОтчетности.СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Уведомления Тогда
			ВидЭлектронногоДокумента = Перечисления.ВидыДокументовОтправляемыхВКО.Уведомление;
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	
	Результат = РегистрыСведений.ПравилаУчетаДокументовОбменСКО.ПодобратьШаблонДокумента(Параметры);
	Возврат Результат;
	
КонецФункции

// Возвращает ссылки на исходящие письма (ДО), являющиеся ответами на документ КО.
// 
// Параметры:
// 	Ссылка - СправочникСсылка.ПерепискаСКонтролирующимиОрганами
// Возвращаемое значение:
// 	Массив Из СправочникСсылка.ИсходящиеДокументы
Функция ОтветыНаПисьмо(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПерепискаОтвет.Ссылка
		|ПОМЕСТИТЬ ВТ_ПерепискаОтветы
		|ИЗ
		|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаОтвет
		|		ПО ПерепискаОснование.Идентификатор = ПерепискаОтвет.ИдентификаторОснования
		|ГДЕ
		|	ПерепискаОснование.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДокументахОбменСКО.Документ КАК Ссылка
		|ИЗ
		|	РегистрСведений.СведенияОДокументахОбменСКО КАК СведенияОДокументахОбменСКО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПерепискаОтветы КАК ВТ_ПерепискаОтветы
		|		ПО ВТ_ПерепискаОтветы.Ссылка = СведенияОДокументахОбменСКО.ДокументОтчетности
		|		И СведенияОДокументахОбменСКО.Документ ССЫЛКА Справочник.ИсходящиеДокументы");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает ссылки на исходящие письма (ДО), являющиеся ответами на документ КО.
// 
// Параметры:
// 	Ссылка - СправочникСсылка.ПерепискаСКонтролирующимиОрганами
// Возвращаемое значение:
// 	СправочникСсылка.ВходящиеДокументы
Функция ИсходноеПисьмо(Ссылка) Экспорт
	
	ЧастиЗапроса = Новый Массив();
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		ЧастиЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПерепискаОснование.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ПерепискаОснование
			|ИЗ
			|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаОснование
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаОтвет
			|		ПО ПерепискаОснование.Идентификатор = ПерепискаОтвет.ИдентификаторОснования
			|ГДЕ
			|	ПерепискаОтвет.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПерепискаОтвет.Требование КАК Ссылка
			|ИЗ
			|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаОтвет
			|ГДЕ
			|	ПерепискаОтвет.Ссылка = &Ссылка");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы") Тогда 
		ЧастиЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПерепискаОтвет.Основание КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ПерепискаОснование
			|ИЗ
			|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы КАК ПерепискаОтвет
			|ГДЕ
			|	ПерепискаОтвет.Ссылка = &Ссылка");
	КонецЕсли;
		
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОДокументахОбменСКО.Документ КАК Ссылка
		|ИЗ
		|	РегистрСведений.СведенияОДокументахОбменСКО КАК СведенияОДокументахОбменСКО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПерепискаОснование КАК ВТ_ПерепискаОснование
		|		ПО ВТ_ПерепискаОснование.Ссылка = СведенияОДокументахОбменСКО.ДокументОтчетности
		|		И СведенияОДокументахОбменСКО.Документ ССЫЛКА Справочник.ВходящиеДокументы");
		
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, Символы.ПС + ";" + Символы.ПС));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ВходящиеДокументы.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(); 
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

#КонецОбласти
