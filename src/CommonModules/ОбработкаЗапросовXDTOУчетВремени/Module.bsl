////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, учет времени
// Реализует функционал веб-сервиса DMService в части хронометража
// и учета трудозатрат
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текущую политику учета рабочего времени.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetTimeTrackingPolicyResponse или DMError
//
Функция ПолучитьПолитикуУчетаРабочегоВремени() Экспорт
	
	Попытка
		
		ПолитикаУчета = Константы.ПолитикаУчетаРабочегоВремени.Получить();
		
		ОтветXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetTimeTrackingPolicyResponse");
		Если ПолитикаУчета = Перечисления.ПолитикиУчетаРабочегоВремени.НеУчитывать Тогда
			ОтветXDTO.timeTrackingPolicy = "DoNotTrack";
			
		ИначеЕсли ПолитикаУчета = Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеОтчеты Тогда
			ОтветXDTO.timeTrackingPolicy = "UseDailyReports";
			
		ИначеЕсли ПолитикаУчета = Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕженедельныеОтчеты Тогда
			ОтветXDTO.timeTrackingPolicy = "UseWeeklyReports";
			
		ИначеЕсли ПолитикаУчета = Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеИЕженедельныеОтчеты Тогда
			ОтветXDTO.timeTrackingPolicy = "UseDailyAndWeeklyReports";
			
		КонецЕсли;
		
		Возврат ОтветXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении политики учета рабочего времени'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

#Область ЕжедневныйОтчет

// Получает список документов ЕжедневныйОтчет по заданным условиям 
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMGetObjectListRequest
//   Ответ - ОбъектXDTO - возвращаемый результат DMGetObjectListResponse
//   ИмяТипа - Строка - имя таблицы для запроса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокЕжедневныхОтчетов(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка
		
		Отбор = Новый Структура;
		
		ПолучитьВсеДанные = Ложь;
		
		Если Сообщение.query <> Неопределено Тогда
			
			Для Каждого Условие Из Сообщение.query.conditions Цикл
				
				Если ВРег(Условие.property) = ВРег("byUser") Тогда
					Если ТипЗнч(Условие.value) = Тип("Булево") И Условие.value Тогда
						Отбор.Вставить(ИмяРеквизитаUser(), Пользователи.ТекущийПользователь());
					ИначеЕсли ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
							И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMUser") Тогда
						Отбор.Вставить(ИмяРеквизитаUser(), ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value.objectID));
					КонецЕсли;
					
				ИначеЕсли ВРег(Условие.property) = ВРег("beginDate") Тогда
					Отбор.Вставить("ДатаНачала", Условие.value);
				
				ИначеЕсли ВРег(Условие.property) = ВРег("endDate") Тогда
					Отбор.Вставить("ДатаОкончания", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("getFullData") Тогда
					ПолучитьВсеДанные = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеРеквизитов = Новый Соответствие;
		СоответствиеРеквизитов.Вставить("НачалоДня", "dayBegin");
		СоответствиеРеквизитов.Вставить("ОкончаниеДня", "dayEnd");
		СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
		СоответствиеРеквизитов.Вставить("ДлительностьРабочая", "workingDuration");
		СоответствиеРеквизитов.Вставить("НекорректнаяДлительность", "durationIncorrect");
		СоответствиеРеквизитов.Вставить("Автор", "author#DMUser");
		СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
		СоответствиеРеквизитов.Вставить("СпособУказанияВремени", "timeInputMethod#DMTimeInputMethod");
		
		Запрос = Новый Запрос;
		МассивТекстЗапроса = Новый Массив;
		МассивТекстЗапроса.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка,
			|	Номер,
			|	Дата,
			|	ПометкаУдаления,
			|	Проведен");
		
		Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
			МассивТекстЗапроса.Добавить(
				",
				|	");
			МассивТекстЗапроса.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
		
		МассивТекстЗапроса.Добавить(СтрШаблон(" ИЗ %1", ИмяТипа));
		Запрос.Текст = СтрСоединить(МассивТекстЗапроса);
		
		Если Отбор.Количество() > 0 Тогда
			МассивТекстЗапроса.Добавить(" ГДЕ ПометкаУдаления = Ложь И ");
			
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Если СтрокаОтбора.Ключ = ИмяРеквизитаUser() Тогда
					МассивТекстЗапроса.Добавить(СтрШаблон("%1 = &Пользователь И ", ИмяРеквизитаUser()));
					Запрос.УстановитьПараметр("Пользователь", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаНачала" Тогда
					МассивТекстЗапроса.Добавить("Дата >= &ДатаНачала И ");
					Запрос.УстановитьПараметр("ДатаНачала", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаОкончания" Тогда
					МассивТекстЗапроса.Добавить("Дата <= &ДатаОкончания И ");
					Запрос.УстановитьПараметр("ДатаОкончания", СтрокаОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(МассивТекстЗапроса);
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 3);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Ответ = Неопределено Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаОтвета = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDailyReport");
			
			Если ПолучитьВсеДанные Тогда
				ПолучитьДанныеЕжедневногоОтчета(Выборка, ДокументXDTO);
			Иначе
				ЗаполнитьОсновныеСвойстваXDTOДокумента(ДокументXDTO, Выборка);
				ЗаполнитьСвойстваXDTOПоСоответствию(ДокументXDTO, Выборка, СоответствиеРеквизитов);
			КонецЕсли;
			
			СтрокаОтвета.object = ДокументXDTO;
			
			Ответ.items.Добавить(СтрокаОтвета);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает ОбъектXDTO документа ЕжедневныйОтчет
//
// Параметры:
//   ОбъектID - ОбъектXDTO - Объект DMObjectID
//   НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция ПолучитьЕжедневныйОтчет(ОбъектID, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектID);
		
		ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Ссылка);
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Ссылка);
		
		Объект = Ссылка.ПолучитьОбъект();
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDailyReport");
		ПолучитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении ежедневного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет ежедневный отчет по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого документа типа DMDailyReport
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция ИзменитьЕжедневныйОтчет(ОбъектXDTO) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеЕжедневногоОтчета(Документ, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьЕжедневныйОтчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании ежедневного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового ежедневного отчета
//
// Параметры:
//   НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция ПолучитьНовыйЕжедневныйОтчет(НаборКолонок) Экспорт
	
	Попытка
		
		Объект = Документы.ЕжедневныйОтчет.СоздатьДокумент();
		Объект.Заполнить(Неопределено);
		
		Объект.Дата = ТекущаяДатаСеанса();
		
		Если Не ЗначениеЗаполнено(Объект[ИмяРеквизитаUser()]) Тогда
			Объект[ИмяРеквизитаUser()] = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект[ИмяРеквизитаUser()]);
		
		Если Не ЗначениеЗаполнено(Объект.СпособУказанияВремени) Тогда
			Объект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		КонецЕсли;
		Объект.Автор = Пользователи.ТекущийПользователь();
		
		УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDailyReport");
		ПолучитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового ежедневного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
	
КонецФункции

// Создает ежедневный отчет из объекта XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMDailyReport или DMError
//
Функция СоздатьЕжедневныйОтчет(Сообщение) Экспорт
	
	Попытка
		
		Объект = Документы.ЕжедневныйОтчет.СоздатьДокумент();
		ОбъектXDTO = Сообщение.object;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		
		Если Не ЗаписатьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕжедневныйОтчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании ежедневного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет ОбъектXDTO по данным документа "Ежедневный отчет"
//
// Параметры:
//	    - ДокументОбъект.ЕжедневныйОтчет - источник заполнения
//   ОбъектXDTO - ОбъектXDTO типа DMDailyReport - заполняемый объект XDTO
//   НаборКолонок - Массив - имена заполняемых реквизитов
//               -  Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, НаборКолонок = Неопределено)
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// значения по умолчанию
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"mainWorkType", УчетВремени.ПолучитьОсновнойВидРабот());
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"mainProject", РаботаСПроектами.ПолучитьПроектПоУмолчанию());
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"projectsEnabled", ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам"));
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("НачалоДня", "dayBegin");
	СоответствиеРеквизитов.Вставить("ОкончаниеДня", "dayEnd");
	СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
	СоответствиеРеквизитов.Вставить("ДлительностьРабочая", "workingDuration");
	СоответствиеРеквизитов.Вставить("НекорректнаяДлительность", "durationIncorrect");
	СоответствиеРеквизитов.Вставить("Автор", "author#DMUser");
	СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
	СоответствиеРеквизитов.Вставить("СпособУказанияВремени", "timeInputMethod#DMTimeInputMethod");
	
	ЗаполнитьОсновныеСвойстваXDTOДокумента(ОбъектXDTO, Объект);
	ЗаполнитьСвойстваXDTOПоСоответствию(ОбъектXDTO, Объект, СоответствиеРеквизитов);
	
	Работы = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(Объект.Дата, Объект[ИмяРеквизитаUser()]);
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("ДатаДобавления", "addDate");
	СоответствиеРеквизитов.Вставить("Начало", "begin");
	СоответствиеРеквизитов.Вставить("Окончание", "end");
	СоответствиеРеквизитов.Вставить("ОписаниеРаботы", "description");
	СоответствиеРеквизитов.Вставить("Длительность", "duration");
	СоответствиеРеквизитов.Вставить("ВидРабот", "workType#DMWorkType");
	СоответствиеРеквизитов.Вставить("Проект", "project#DMProject");
	СоответствиеРеквизитов.Вставить("ПроектнаяЗадача", "projectTask#DMProjectTask");
	СоответствиеРеквизитов.Вставить("Источник", "source#DMObject");
	
	ТипыИсточника = Метаданные.РегистрыСведений.ФактическиеТрудозатраты.Измерения.Источник.Тип.Типы();
	ТипыИcточникаXDTO = Новый Массив;
	
	Для Каждого Тип Из ТипыИсточника Цикл
		
		ТипXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMType");
		
		Если Тип = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ТипXDTO.xdtoClassName = "DMInternalDocument";
			ТипXDTO.presentation = НСтр("ru='Внутренний документ'");
			
		ИначеЕсли Тип = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			ТипXDTO.xdtoClassName = "DMIncomingEMail";
			ТипXDTO.presentation = НСтр("ru='Входящее письмо'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ТипXDTO.xdtoClassName = "DMIncomingDocument";
			ТипXDTO.presentation = НСтр("ru='Входящий документ'");
			
		ИначеЕсли Тип = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда
			ТипXDTO.xdtoClassName = "DMDailyReport";
			ТипXDTO.presentation = НСтр("ru='Ежедневный отчет'");
			
		ИначеЕсли Тип = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ТипXDTO.xdtoClassName = "DMBusinessProcessTask";
			ТипXDTO.presentation = НСтр("ru='Задача'");
			
		ИначеЕсли Тип = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			ТипXDTO.xdtoClassName = "DMOutgoingEMail";
			ТипXDTO.presentation = НСтр("ru='Исходящее письмо'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ТипXDTO.xdtoClassName = "DMOutgoingDocument";
			ТипXDTO.presentation = НСтр("ru='Исходящий документ'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Мероприятия") Тогда
			ТипXDTO.xdtoClassName = "DMActivity";
			ТипXDTO.presentation = НСтр("ru='Мероприятие'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Проекты") Тогда
			ТипXDTO.xdtoClassName = "DMProject";
			ТипXDTO.presentation = НСтр("ru='Проект'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ТипXDTO.xdtoClassName = "DMProjectTask";
			ТипXDTO.presentation = НСтр("ru='Проектная задача'");
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Файлы") Тогда
			ТипXDTO.xdtoClassName = "DMFile";
			ТипXDTO.presentation = НСтр("ru='Файл'");
			
		КонецЕсли;
		
		Если ТипXDTO.xdtoClassName <> Неопределено Тогда
			ТипыИcточникаXDTO.Добавить(ТипXDTO);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Работы Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualWork");
		ЗаполнитьСвойстваXDTOПоСоответствию(СтрокаXDTO, Строка, СоответствиеРеквизитов);
		
		Для Каждого ТипXDTO Из ТипыИcточникаXDTO Цикл
			
			НовыйТипXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMType");
			ЗаполнитьЗначенияСвойств(НовыйТипXDTO, ТипXDTO);
			СтрокаXDTO.sourceValueTypes.Добавить(НовыйТипXDTO);
			
		КонецЦикла;
		
		ОбъектXDTO.works.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
	// доп. реквизиты
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Объект, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ "Ежедневный отчет" по объекту XDTO и записывает его
//
// Параметры:
//   Объект - ДокументОбъект.ЕжедневныйОтчет - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMDailyReport - источник данных заполнения
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение для сообщения об ошибке
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеЕжедневногоОтчета(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда 
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи ежедневного отчета'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Запись);
	
	Если Блокировать Тогда
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет документ "Ежедневный отчет" по объекту XDTO
//
// Параметры:
//   ДокументОбъект - ДокументОбъект.ЕжедневныйОтчет - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMDailyReport - источник данных заполнения
//
Процедура ЗаполнитьДанныеЕжедневногоОтчета(ДокументОбъект, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.Дата,                ОбъектXDTO, "date");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.НачалоДня,           ОбъектXDTO, "dayBegin");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект.ОкончаниеДня,        ОбъектXDTO, "dayEnd");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДокументОбъект[ИмяРеквизитаUser()], ОбъектXDTO, "user");
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Автор) Тогда
		ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Подразделение) Тогда
		ДокументОбъект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(
			ДокументОбъект[ИмяРеквизитаUser()]);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.СпособУказанияВремени) Тогда
		ДокументОбъект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
	КонецЕсли;
	
	Работы = Новый ТаблицаЗначений;
	Работы.Колонки.Добавить("ДатаДобавления");
	Работы.Колонки.Добавить("Начало");
	Работы.Колонки.Добавить("Окончание");
	Работы.Колонки.Добавить("Работа");
	Работы.Колонки.Добавить("Длительность");
	Работы.Колонки.Добавить("ВидРабот");
	Работы.Колонки.Добавить("Проект");
	Работы.Колонки.Добавить("ПроектнаяЗадача");
	Работы.Колонки.Добавить("Источник");

	Для Каждого СтрокаXDTO Из ОбъектXDTO.works Цикл
		
		НоваяСтрока = Работы.Добавить();
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.ДатаДобавления,  СтрокаXDTO, "addDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.Начало,          СтрокаXDTO, "begin");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.Окончание,       СтрокаXDTO, "end");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.Работа,          СтрокаXDTO, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.Длительность,    СтрокаXDTO, "duration");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.ВидРабот,        СтрокаXDTO, "workType");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.Проект,          СтрокаXDTO, "project");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.ПроектнаяЗадача, СтрокаXDTO, "projectTask");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяСтрока.Источник,        СтрокаXDTO, "source");
		
	КонецЦикла;
	
	ДлительностьРаботСек = Работы.Итог("Длительность");
	ДокументОбъект.ДлительностьРабот = УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек);
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(ДокументОбъект, ОбъектXDTO);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("Работы", Работы);
	
КонецПроцедуры

#КонецОбласти

#Область ЕженедельныйОтчет

// Получает список документов ЕженедельныйОтчет по заданным условиям
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMGetObjectListRequest
//   Ответ - ОбъектXDTO - возвращаемый результат DMGetObjectListResponse
//   ИмяТипа - Строка - имя таблицы для запроса
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокЕженедельныхОтчетов(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка
		
		Отбор = Новый Структура;
		
		ПолучитьВсеДанные = Ложь;
		
		Если Сообщение.query <> Неопределено Тогда
			
			Для Каждого Условие Из Сообщение.query.conditions Цикл
				
				Если ВРег(Условие.property) = ВРег("byUser") Тогда
					Если ТипЗнч(Условие.value) = Тип("Булево") И Условие.value Тогда
						Отбор.Вставить(ИмяРеквизитаUser(), ПараметрыСеанса.ТекущийПользователь);
					ИначеЕсли ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
							И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMUser") Тогда
						Отбор.Вставить(ИмяРеквизитаUser(), ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value.objectID));
					КонецЕсли;
					
				ИначеЕсли ВРег(Условие.property) = ВРег("beginDate") Тогда
					Отбор.Вставить("ДатаНачала", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("endDate") Тогда
					Отбор.Вставить("ДатаОкончания", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("getFullData") Тогда
					ПолучитьВсеДанные = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеРеквизитов = Новый Соответствие;
		СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
		СоответствиеРеквизитов.Вставить("ДлительностьРабочая", "workingDuration");
		СоответствиеРеквизитов.Вставить("Достижения", "infoProgress");
		СоответствиеРеквизитов.Вставить("Неудачи", "infoFailure");
		СоответствиеРеквизитов.Вставить("Планы", "infoPlans");
		СоответствиеРеквизитов.Вставить("Подразделение", "subdivision#DMSubdivision");
		СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
		
		Запрос = Новый Запрос;
		МассивТекстЗапроса = Новый Массив;
		
		Если ПолучитьВсеДанные Тогда
			МассивТекстЗапроса.Добавить(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	*");
		Иначе
			МассивТекстЗапроса.Добавить(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Ссылка,
				|	Номер,
				|	Дата,
				|	ПометкаУдаления,
				|	Проведен");
			Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
				МассивТекстЗапроса.Добавить(
					",
					|	");
				МассивТекстЗапроса.Добавить(ЭлементСоответствия.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		МассивТекстЗапроса.Добавить(СтрШаблон(" ИЗ %1", ИмяТипа));
		Запрос.Текст = СтрСоединить(МассивТекстЗапроса);
		
		Если Отбор.Количество() > 0 Тогда
			МассивТекстЗапроса.Добавить(" ГДЕ ПометкаУдаления = Ложь И ");
			
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Если СтрокаОтбора.Ключ = ИмяРеквизитаUser() Тогда
					МассивТекстЗапроса.Добавить(СтрШаблон("%1 = &Пользователь И ", ИмяРеквизитаUser()));
					Запрос.УстановитьПараметр("Пользователь", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаНачала" Тогда
					МассивТекстЗапроса.Добавить("Дата >= &ДатаНачала И ");
					Запрос.УстановитьПараметр("ДатаНачала", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаОкончания" Тогда
					МассивТекстЗапроса.Добавить("Дата <= &ДатаОкончания И ");
					Запрос.УстановитьПараметр("ДатаОкончания", СтрокаОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(МассивТекстЗапроса);
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 3);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Ответ = Неопределено Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаОтвета = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMWeeklyReport");
			
			Если ПолучитьВсеДанные Тогда
				ПолучитьДанныеЕженедельногоОтчета(Выборка, ДокументXDTO);
			Иначе
				ЗаполнитьОсновныеСвойстваXDTOДокумента(ДокументXDTO, Выборка);
				ЗаполнитьСвойстваXDTOПоСоответствию(ДокументXDTO, Выборка, СоответствиеРеквизитов);
			КонецЕсли;
			
			СтрокаОтвета.object = ДокументXDTO;
			
			Ответ.items.Добавить(СтрокаОтвета);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка документов'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает ОбъектXDTO документа ЕженедельныйОтчет
//
// Параметры:
//   ОбъектID - ОбъектXDTO - Объект DMObjectID
//   НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMWeeklyReport или DMError
//
Функция ПолучитьЕженедельныйОтчет(ОбъектID, НаборКолонок = Неопределено) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектID);
		
		ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Ссылка);
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Ссылка);
		
		Объект = Ссылка.ПолучитьОбъект();
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMWeeklyReport");
		ПолучитьДанныеЕженедельногоОтчета(Объект, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении еженедельного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Изменяет еженедельный отчет по объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого документа типа DMWeeklyReport
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMWeeklyReport или DMError
//
Функция ИзменитьЕженедельныйОтчет(ОбъектXDTO) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Если Не ЗаписатьДанныеЕженедельногоОтчета(Документ, ОбъектXDTO, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Документ.Ссылка);
		Возврат ПолучитьЕженедельныйОтчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании еженедельного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового еженедельного отчета
//
// Параметры:
//   НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMWeeklyReport или DMError
//
Функция ПолучитьНовыйЕженедельныйОтчет(НаборКолонок) Экспорт
	
	Попытка
		
		Объект = Документы.ЕженедельныйОтчет.СоздатьДокумент();
		Объект.Заполнить(Неопределено);
		
		Объект.Дата = КонецДня(ТекущаяДатаСеанса());
		
		Если Не ЗначениеЗаполнено(Объект[ИмяРеквизитаUser()]) Тогда
			Объект[ИмяРеквизитаUser()] = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект[ИмяРеквизитаUser()]);
		
		Если ДеньНедели(Объект.Дата) > 5 Тогда
			ДатаНачала = КонецНедели(Объект.Дата) + 1 - 3600 * 24 * 2;
		Иначе
			ДатаНачала = НачалоНедели(Объект.Дата) - 3600 * 24 * 2;
		КонецЕсли;
		
		ЗаполнитьДниНедели(Объект, ДатаНачала);
		
		ПолитикаУчета = Константы.ПолитикаУчетаРабочегоВремени.Получить();
		
		ЗаполнитьПоФактическимТрудозатратам(Объект, ДатаНачала, ПолитикаУчета);
		ЗаполнитьПоЕжедневнымОтчетам(Объект, ДатаНачала, ПолитикаУчета);
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMWeeklyReport");
		ПолучитьДанныеЕженедельногоОтчета(Объект, ОбъектXDTO, НаборКолонок);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении нового еженедельного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает еженедельный отчет из объекта XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMWeeklyReport или DMError
//
Функция СоздатьЕженедельныйОтчет(Сообщение) Экспорт
	
	Попытка
		
		Объект = Документы.ЕженедельныйОтчет.СоздатьДокумент();
		ОбъектXDTO = Сообщение.object;
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		
		Если Не ЗаписатьДанныеЕженедельногоОтчета(Объект, ОбъектXDTO, Ошибка) Тогда
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЕженедельныйОтчет(ОбъектИд);
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при создании еженедельного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет ОбъектXDTO по данным документа "Еженедельный отчет"
//
// Параметры:
//   Объект - ДокументОбъект.ЕженедельныйОтчет, ВыборкаИзРезультатаЗапроса - источник заполнения
//   ОбъектXDTO - ОбъектXDTO типа DMWeeklyReport - заполняемый объект XDTO
//   НаборКолонок - Массив - имена заполняемых реквизитов
//                - Неопределено - требование заполнить все реквизиты
//
Процедура ПолучитьДанныеЕженедельногоОтчета(Объект, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	// набор колонок
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого Элемент Из НаборКолонок Цикл
			Колонки.Добавить(НРег(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	// значения по умолчанию
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"mainWorkType",
		УчетВремени.ПолучитьОсновнойВидРабот());
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"mainProject",
		РаботаСПроектами.ПолучитьПроектПоУмолчанию());
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
		"projectsEnabled",
		ВестиУчетПоПроектам);
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
	СоответствиеРеквизитов.Вставить("ДлительностьРабочая", "workingDuration");
	СоответствиеРеквизитов.Вставить("Достижения", "infoProgress");
	СоответствиеРеквизитов.Вставить("Неудачи", "infoFailure");
	СоответствиеРеквизитов.Вставить("Планы", "infoPlans");
	СоответствиеРеквизитов.Вставить("Подразделение", "subdivision#DMSubdivision");
	СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
	
	ЗаполнитьОсновныеСвойстваXDTOДокумента(ОбъектXDTO, Объект);
	ЗаполнитьСвойстваXDTOПоСоответствию(ОбъектXDTO, Объект, СоответствиеРеквизитов);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЕженедельныйОтчет") Тогда
		Работы = Объект.Работы;
	Иначе
		Работы = Объект.Работы.Выгрузить();
	КонецЕсли;
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("Работа", "description");
	СоответствиеРеквизитов.Вставить("ВидРабот", "workType#DMWorkType");
	СоответствиеРеквизитов.Вставить("Проект", "project#DMProject");
	СоответствиеРеквизитов.Вставить("ПроектнаяЗадача", "projectTask#DMProjectTask");
	СоответствиеРеквизитов.Вставить("Источник", "source#DMObject");
	СоответствиеРеквизитов.Вставить("ДатаДобавления", "addDate");
	СоответствиеРеквизитов.Вставить("Сб", "sat");
	СоответствиеРеквизитов.Вставить("Вс", "sun");
	СоответствиеРеквизитов.Вставить("Пн", "mon");
	СоответствиеРеквизитов.Вставить("Вт", "tue");
	СоответствиеРеквизитов.Вставить("Ср", "wed");
	СоответствиеРеквизитов.Вставить("Чт", "thu");
	СоответствиеРеквизитов.Вставить("Пт", "fri");
	
	Для Каждого Строка Из Работы Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMWeeklyReportWork");
		ЗаполнитьСвойстваXDTOПоСоответствию(СтрокаXDTO, Строка, СоответствиеРеквизитов);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO,
			"projectsEnabled",
			ВестиУчетПоПроектам);
		
		ОбъектXDTO.works.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЕженедельныйОтчет") Тогда
		ДниНедели = Объект.ДниНедели;
	Иначе
		ДниНедели = Объект.ДниНедели.Выгрузить();
	КонецЕсли;
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("Дата", "date");
	СоответствиеРеквизитов.Вставить("НачалоДня", "startTime");
	СоответствиеРеквизитов.Вставить("ОкончаниеДня", "endTime");
	СоответствиеРеквизитов.Вставить("ЕжедневныйОтчет", "dailyReport#DMDailyReport");
	СоответствиеРеквизитов.Вставить("ДлительностьРабот", "duration");
	СоответствиеРеквизитов.Вставить("ДлительностьРабочая", "workingDuration");
	
	Для Каждого Строка Из ДниНедели Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMWeeklyReportDayOfTheWeek");
		ЗаполнитьСвойстваXDTOПоСоответствию(СтрокаXDTO, Строка, СоответствиеРеквизитов);
		
		Если ЗначениеЗаполнено(Строка.ДеньНедели) Тогда
			Если Строка.ДеньНедели = Перечисления.ДниНедели.Понедельник Тогда
				СтрокаXDTO.dayOfTheWeek = "Monday";
				
			ИначеЕсли Строка.ДеньНедели = Перечисления.ДниНедели.Вторник Тогда
				СтрокаXDTO.dayOfTheWeek = "Tuesday";
				
			ИначеЕсли Строка.ДеньНедели = Перечисления.ДниНедели.Среда Тогда
				СтрокаXDTO.dayOfTheWeek = "Wednesday";
				
			ИначеЕсли Строка.ДеньНедели = Перечисления.ДниНедели.Четверг Тогда
				СтрокаXDTO.dayOfTheWeek = "Thursday";
				
			ИначеЕсли Строка.ДеньНедели = Перечисления.ДниНедели.Пятница Тогда
				СтрокаXDTO.dayOfTheWeek = "Friday";
				
			ИначеЕсли Строка.ДеньНедели = Перечисления.ДниНедели.Суббота Тогда
				СтрокаXDTO.dayOfTheWeek = "Saturday";
				
			ИначеЕсли Строка.ДеньНедели = Перечисления.ДниНедели.Воскресенье Тогда
				СтрокаXDTO.dayOfTheWeek = "Sunday";
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ВидДня) Тогда
			Если Строка.ВидДня = Перечисления.ВидыДней.Рабочий Тогда
				СтрокаXDTO.kindOfDay = "Working";
				
			ИначеЕсли Строка.ВидДня = Перечисления.ВидыДней.Выходной Тогда
				СтрокаXDTO.kindOfDay = "Holiday";
				
			ИначеЕсли Строка.ВидДня = Перечисления.ВидыДней.Больничный Тогда
				СтрокаXDTO.kindOfDay = "Sick";
				
			ИначеЕсли Строка.ВидДня = Перечисления.ВидыДней.Отпуск Тогда
				СтрокаXDTO.kindOfDay = "Vacation";
				
			ИначеЕсли Строка.ВидДня = Перечисления.ВидыДней.Отсутствие Тогда
				СтрокаXDTO.kindOfDay = "Absence";
				
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO.daysOfTheWeek.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ "Еженедельный отчет" по объекту XDTO и записывает его
//
// Параметры:
//   Объект - ДокументОбъект.ЕженедельныйОтчет - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMWeeklyReport - источник данных заполнения
//   Ошибка - ОбъектXDTO типа DMError - неявно возвращаемое значение для сообщения об ошибке
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае
//
Функция ЗаписатьДанныеЕженедельногоОтчета(Объект, ОбъектXDTO, Ошибка) Экспорт
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьДанныеЕженедельногоОтчета(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(Объект, ТекстСообщения) Тогда
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при записи еженедельного отчета'");
		Ошибка.description = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Запись);
	
	Если Блокировать Тогда
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет документ "Еженедельный отчет" по объекту XDTO
//
// Параметры:
//   ДокументОбъект - ДокументОбъект.ЕженедельныйОтчет - заполняемый объект
//   ОбъектXDTO - ОбъектXDTO типа DMWeeklyReport - источник данных заполнения
//
Процедура ЗаполнитьДанныеЕженедельногоОтчета(ДокументОбъект, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.Дата,
		ОбъектXDTO,
		"date");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.ДлительностьРабот,
		ОбъектXDTO,
		"duration");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.ДлительностьРабочая,
		ОбъектXDTO,
		"workingDuration");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.Достижения,
		ОбъектXDTO,
		"infoProgress");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.Неудачи,
		ОбъектXDTO,
		"infoFailure");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.Планы,
		ОбъектXDTO,
		"infoPlans");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект.Подразделение,
		ОбъектXDTO,
		"subdivision");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДокументОбъект[ИмяРеквизитаUser()],
		ОбъектXDTO,
		"user");
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Подразделение) Тогда
		ДокументОбъект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(ДокументОбъект[ИмяРеквизитаUser()]);
	КонецЕсли;
	
	Работы = ДокументОбъект.Работы;
	Работы.Очистить();
	ДлительностьВсегоМин = 0;
	ДлительностьРабочегоВремениМин = 0;
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.works Цикл
		
		НоваяСтрока = Работы.Добавить();
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Работа,
			СтрокаXDTO,
			"description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ВидРабот,
			СтрокаXDTO,
			"workType");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Проект,
			СтрокаXDTO,
			"project");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ПроектнаяЗадача,
			СтрокаXDTO,
			"projectTask");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Источник,
			СтрокаXDTO,
			"source");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ДатаДобавления,
			СтрокаXDTO,
			"addDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Сб,
			СтрокаXDTO,
			"sat");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Вс,
			СтрокаXDTO,
			"sun");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Пн,
			СтрокаXDTO,
			"mon");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Вт,
			СтрокаXDTO,
			"tue");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Ср,
			СтрокаXDTO,
			"wed");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Чт,
			СтрокаXDTO,
			"thu");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Пт,
			СтрокаXDTO,
			"fri");
		
		Длительность = Час(НоваяСтрока.Сб)*60 + Минута(НоваяСтрока.Сб)
			+ Час(НоваяСтрока.Вс)*60 + Минута(НоваяСтрока.Вс)
			+ Час(НоваяСтрока.Пн)*60 + Минута(НоваяСтрока.Пн)
			+ Час(НоваяСтрока.Вт)*60 + Минута(НоваяСтрока.Вт)
			+ Час(НоваяСтрока.Ср)*60 + Минута(НоваяСтрока.Ср)
			+ Час(НоваяСтрока.Чт)*60 + Минута(НоваяСтрока.Чт)
			+ Час(НоваяСтрока.Пт)*60 + Минута(НоваяСтрока.Пт);
		
		ДлительностьВсегоМин = ДлительностьВсегоМин + Длительность;
		
		ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРабот, "ВидВремени");
		Если ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее") Тогда
			ДлительностьРабочегоВремениМин = ДлительностьРабочегоВремениМин + Длительность;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДлительностьРабот) Тогда
		ДокументОбъект.ДлительностьРабот = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьВсегоМин);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДлительностьРабочая) Тогда
		ДокументОбъект.ДлительностьРабочая = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьРабочегоВремениМин);
	КонецЕсли;
	
	ДниНедели = ДокументОбъект.ДниНедели;
	ДниНедели.Очистить();
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.daysOfTheWeek Цикл
		
		НоваяСтрока = ДниНедели.Добавить();
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.Дата,
			СтрокаXDTO,
			"date");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.НачалоДня,
			СтрокаXDTO,
			"startTime");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ОкончаниеДня,
			СтрокаXDTO,
			"endTime");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ЕжедневныйОтчет,
			СтрокаXDTO,
			"dailyReport");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ДлительностьРабот,
			СтрокаXDTO,
			"duration");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			НоваяСтрока.ДлительностьРабочая,
			СтрокаXDTO,
			"workingDuration");
		
		Если СтрокаXDTO.Установлено("dayOfTheWeek") Тогда
			Если СтрокаXDTO.dayOfTheWeek = "Monday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Понедельник;
				
			ИначеЕсли СтрокаXDTO.dayOfTheWeek = "Tuesday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Вторник;
				
			ИначеЕсли СтрокаXDTO.dayOfTheWeek = "Wednesday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Среда;
				
			ИначеЕсли СтрокаXDTO.dayOfTheWeek = "Thursday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Четверг;
				
			ИначеЕсли СтрокаXDTO.dayOfTheWeek = "Friday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Пятница;
				
			ИначеЕсли СтрокаXDTO.dayOfTheWeek = "Saturday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Суббота;
				
			ИначеЕсли СтрокаXDTO.dayOfTheWeek = "Sunday" Тогда
				НоваяСтрока.ДеньНедели = Перечисления.ДниНедели.Воскресенье;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаXDTO.Установлено("kindOfDay") Тогда
			Если СтрокаXDTO.kindOfDay = "Working" Тогда
				НоваяСтрока.ВидДня = Перечисления.ВидыДней.Рабочий;
				
			ИначеЕсли СтрокаXDTO.kindOfDay = "Holiday" Тогда
				НоваяСтрока.ВидДня = Перечисления.ВидыДней.Выходной;
				
			ИначеЕсли СтрокаXDTO.kindOfDay = "Sick" Тогда
				НоваяСтрока.ВидДня = Перечисления.ВидыДней.Больничный;
				
			ИначеЕсли СтрокаXDTO.kindOfDay = "Vacation" Тогда
				НоваяСтрока.ВидДня = Перечисления.ВидыДней.Отпуск;
				
			ИначеЕсли СтрокаXDTO.kindOfDay = "Absence" Тогда
				НоваяСтрока.ВидДня = Перечисления.ВидыДней.Отсутствие;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текстовое представление для указанного еженедельного отчета.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetWeeklyReportTextPresentationRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetWeeklyReportTextPresentationResponse или DMError
//
Функция ТекстовоеПредставлениеЕженедельногоОтчета(Сообщение) Экспорт
	
	Попытка
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.weeklyReport.objectID);
		
		ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Ссылка);
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Ссылка);
		
		Объект = Ссылка.ПолучитьОбъект();
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Объект.СформироватьОтчет(ТекстовыйДокумент);
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetWeeklyReportTextPresentationResponse");
		ОбъектXDTO.text = ТекстовыйДокумент.ПолучитьТекст();
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении текстового представления еженедельного отчета'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ФактическиеТрудозатраты

// Возвращает список записей о фактических трудозатратах по заданным условиям
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMGetObjectListRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокФактическихТрудозатрат(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка
		
		Отбор = Новый Структура;
		
		Если Сообщение.query <> Неопределено Тогда
			
			Для Каждого Условие Из Сообщение.query.conditions Цикл
				
				Если ВРег(Условие.property) = ВРег("byUser") Тогда
					Если ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
						Отбор.Вставить(ИмяРеквизитаUser(),
							ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value));
					Иначе
						Отбор.Вставить(ИмяРеквизитаUser(),
							Пользователи.ТекущийПользователь());
					КонецЕсли;
					
				ИначеЕсли ВРег(Условие.property) = ВРег("beginDate") Тогда
					Отбор.Вставить("ДатаНачала", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("endDate") Тогда
					Отбор.Вставить("ДатаОкончания", Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("source") Тогда
					Если ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
						Отбор.Вставить("Источник", ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value));
					ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "ExternalObject") Тогда
						Источники = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.
							ПолучитьОбъектыДОПоВнешнемуОбъекту(Условие.value.ID, Условие.value.type);
						Если Источники.Количество() > 0 Тогда
							Отбор.Вставить("Источник", Источники);
						Иначе
							Отбор.Вставить("Источник", Неопределено);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеРеквизитов = Новый Соответствие;
		СоответствиеРеквизитов.Вставить("ДатаДобавления", "addDate");
		СоответствиеРеквизитов.Вставить("Начало", "begin");
		СоответствиеРеквизитов.Вставить("Окончание", "end");
		СоответствиеРеквизитов.Вставить("ОписаниеРаботы", "description");
		СоответствиеРеквизитов.Вставить("Длительность", "duration");
		СоответствиеРеквизитов.Вставить("ВидРабот", "workType#DMWorkType");
		СоответствиеРеквизитов.Вставить(ИмяРеквизитаUser(), "user#DMUser");
		СоответствиеРеквизитов.Вставить("Проект", "project#DMProject");
		СоответствиеРеквизитов.Вставить("ПроектнаяЗадача", "projectTask#DMProjectTask");
		СоответствиеРеквизитов.Вставить("Источник", "source#DMObject");
		
		Запрос = Новый Запрос;
		МассивТекстЗапроса = Новый Массив;
		МассивТекстЗапроса.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомерДобавления");
		
		Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
			МассивТекстЗапроса.Добавить(
				",
				|	");
			МассивТекстЗапроса.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
		
		МассивТекстЗапроса.Добавить(СтрШаблон(" ИЗ %1", ИмяТипа));
		Запрос.Текст = СтрСоединить(МассивТекстЗапроса);
		
		Если Отбор.Количество() > 0 Тогда
			МассивТекстЗапроса.Добавить(" ГДЕ Удалена = Ложь И ");
			
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Если СтрокаОтбора.Ключ = ИмяРеквизитаUser() Тогда
					МассивТекстЗапроса.Добавить(СтрШаблон("%1 = &Пользователь И ", ИмяРеквизитаUser()));
					Запрос.УстановитьПараметр("Пользователь", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаНачала" Тогда
					МассивТекстЗапроса.Добавить("ДатаДобавления >= &ДатаНачала И ");
					Запрос.УстановитьПараметр("ДатаНачала", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "ДатаОкончания" Тогда
					МассивТекстЗапроса.Добавить("ДатаДобавления <= &ДатаОкончания И ");
					Запрос.УстановитьПараметр("ДатаОкончания", СтрокаОтбора.Значение);
				ИначеЕсли СтрокаОтбора.Ключ = "Источник" Тогда
					МассивТекстЗапроса.Добавить("Источник В (&Источник) И Источник <> Неопределено И ");
					Запрос.УстановитьПараметр("Источник", СтрокаОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(МассивТекстЗапроса);
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 3);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Ответ = Неопределено Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаОтвета = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualWork");
			
			ЗаполнитьСвойстваXDTOПоСоответствию(СтрокаXDTO, Выборка, СоответствиеРеквизитов);
			
			СтрокаОтвета.object = СтрокаXDTO;
			
			Ответ.items.Добавить(СтрокаОтвета);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка фактических трудозатрат'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для новой записи фактических трудозатрат
//
// Параметры:
//   НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMActualWork или DMError
//
Функция ПолучитьНовуюЗаписьФактическихТрудозатрат(НаборКолонок) Экспорт
	
	Попытка
		
		ТекущаяДата = ТекущаяДатаСеанса();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ФактическиеТрудозатраты.Окончание,
			|	ФактическиеТрудозатраты.ДатаДобавления КАК ДатаДобавления
			|ИЗ
			|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
			|ГДЕ
			|	ФактическиеТрудозатраты.ДатаДобавления >= &ТекущаяДата
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаДобавления УБЫВ";
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата));
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Начало = ТекущаяДата - НачалоДня(ТекущаяДата);
		Иначе
			Начало = Результат.Выгрузить()[0].Окончание - '00010101';
		КонецЕсли;
		
		Окончание = ТекущаяДата - НачалоДня(ТекущаяДата);
		Если Окончание > Начало И Начало <> 0 Тогда 
			Длительность = Окончание - Начало;
		Иначе
			Длительность = 0;
		КонецЕсли;
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualWork");
		
		ВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
		СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"addDate",ТекущаяДатаСеанса());
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"begin", '00010101' + Начало);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"end", '00010101' + Окончание);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"duration", Длительность);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"workType", ВидРабот);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"project", РаботаСПроектами.ПолучитьПроектПоУмолчанию());
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"user", Пользователи.ТекущийПользователь());
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"projectsEnabled", ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам"));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO,
			"timeInputMethod", СпособУказанияВремени);
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "description","");
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении новой записи о фактических трудозатратах.'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает запись о фактических трудозатратах из объекта XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMCreateRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMActualWork или DMError
//
Функция СоздатьЗаписьФактическихТрудозатрат(Сообщение) Экспорт
	
	Попытка
		
		ПараметрыОповещения = Неопределено;
		
		ОбъектXDTO = Сообщение.object;
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ДатаОтчета");
		ПараметрыОтчета.Вставить("ВидРаботы");
		ПараметрыОтчета.Вставить("ОписаниеРаботы");
		ПараметрыОтчета.Вставить("ДлительностьРаботы");
		ПараметрыОтчета.Вставить("НачалоРаботы");
		ПараметрыОтчета.Вставить("ОкончаниеРаботы");
		ПараметрыОтчета.Вставить("Проект");
		ПараметрыОтчета.Вставить("ПроектнаяЗадача");
		ПараметрыОтчета.Вставить("Объект");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.ДатаОтчета,         ОбъектXDTO, "addDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.ВидРаботы,          ОбъектXDTO, "workType");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.ОписаниеРаботы,     ОбъектXDTO, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.ДлительностьРаботы, ОбъектXDTO, "duration");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.НачалоРаботы,       ОбъектXDTO, "begin");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.ОкончаниеРаботы,    ОбъектXDTO, "end");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.Проект,             ОбъектXDTO, "project");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.ПроектнаяЗадача,    ОбъектXDTO, "projectTask");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.Объект,             ОбъектXDTO, "source");
		
		Если ОбъектXDTO.Установлено("user") Тогда
			ПараметрыОтчета.Вставить(ИмяРеквизитаUser());
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
				ПараметрыОтчета[ИмяРеквизитаUser()], ОбъектXDTO, "user");
		КонецЕсли;
			
		Если ОбъектXDTO.Установлено("externalSource") Тогда
			Источники = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.
				ПолучитьОбъектыДОПоВнешнемуОбъекту(ОбъектXDTO.externalSource.ID, ОбъектXDTO.externalSource.type);
				
			Если Источники.Количество() > 0 Тогда
				ПараметрыОтчета.Объект = Источники[0];
				УчетВремени.ОчиститьХронометраж(Источники[0])
			КонецЕсли;
		КонецЕсли;
		
		УчетВремени.ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
	
		Возврат ОбъектXDTO;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при добавлении записи о фактических трудозатратах'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Хронометраж

// Возвращает данные хронометража по объекту
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMGetChronometrationSettingsRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetChronometrationSettingsResponse или DMError
//
Функция ПолучитьПараметрыХронометража(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetChronometrationSettingsResponse");
		
		Если Сообщение.objects.Количество() > 0 Тогда
			Для Каждого ИсточникXDTO Из Сообщение.objects Цикл
				Источник = Неопределено;
				Если ИсточникXDTO <> Неопределено Тогда
					Если ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "ExternalObject") Тогда
						Источники = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.
							ПолучитьОбъектыДОПоВнешнемуОбъекту(ИсточникXDTO.ID, ИсточникXDTO.type);
						Если Источники.Количество() > 0 Тогда
							Источник = Источники[0];
						КонецЕсли;
					ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObjectID") Тогда
						Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO);
					ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObject") Тогда
						Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO.objectID);
					КонецЕсли;
				КонецЕсли;
				
				Если Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВнутренниеДокументы") Или
						ТипЗнч(Источник) = Тип("СправочникСсылка.ВходящиеДокументы") Или
						ТипЗнч(Источник) = Тип("СправочникСсылка.ИсходящиеДокументы") Или
						ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или
						ТипЗнч(Источник) = Тип("ДокументСсылка.ВходящееПисьмо") Или
						ТипЗнч(Источник) = Тип("ДокументСсылка.ИсходящееПисьмо") Или
						Источник = Неопределено) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Хронометраж по типу объектов ""%1"" не ведется.'"),
						Источник.Метаданные().Синоним);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				УстановитьПараметрыУчетаВремени(Ответ, Источник);
			КонецЦикла;
			
		Иначе
			УстановитьАктивныеПараметрыУчетаВремени(Ответ);
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных хронометража'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Устанавливает значение хронометража для объекта
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение типа DMSetChronometrationSettingsRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMSetChronometrationSettingsResponse или DMError
//
Функция УстановитьПараметрыХронометража(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSetChronometrationSettingsResponse");
		
		Для Каждого ИсточникXDTO Из Сообщение.objects Цикл
			Источник = Неопределено;
			Если ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "ExternalObject") Тогда
				Источники = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.
					ПолучитьОбъектыДОПоВнешнемуОбъекту(ИсточникXDTO.ID, ИсточникXDTO.type);
				Если Источники.Количество() > 0 Тогда
					Источник = Источники[0];
				КонецЕсли;
			ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObjectID") Тогда
				Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO);
			ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ИсточникXDTO, "DMObject") Тогда
				Источник = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсточникXDTO.objectID);
			КонецЕсли;
			
			Если Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВнутренниеДокументы") Или
					ТипЗнч(Источник) = Тип("СправочникСсылка.ВходящиеДокументы") Или
					ТипЗнч(Источник) = Тип("СправочникСсылка.ИсходящиеДокументы") Или
					ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или
					ТипЗнч(Источник) = Тип("ДокументСсылка.ВходящееПисьмо") Или
					ТипЗнч(Источник) = Тип("ДокументСсылка.ИсходящееПисьмо") Или
					Источник = Неопределено) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Хронометраж по типу объектов ""%1"" не ведется.'"),
				Источник.Метаданные().Синоним);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ПараметрыОповещения = Неопределено;
			
			ПараметрыУчетаВремени = Новый Структура;
			ПараметрыУчетаВремени.Вставить("ДатаНачала", '00010101');
			ПараметрыУчетаВремени.Вставить("ДатаОкончания", '00010101');
			ПараметрыУчетаВремени.Вставить("ВключенХронометраж",Ложь);
			ПараметрыУчетаВремени.Вставить("ВидыРабот");
			ПараметрыУчетаВремени.Вставить("СпособУказанияВремени");
			
			ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
			
			ПараметрыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChronometrationSettings");
			
			Если ОпцияВестиУчетТрудозатрат И ЗначениеЗаполнено(Источник) Тогда
				УчетВремени.ПолучитьПараметрыХронометража(
				Источник,
				ПараметрыУчетаВремени.ВключенХронометраж,
				ПараметрыУчетаВремени.ДатаНачала,
				ПараметрыУчетаВремени.ДатаОкончания,
				ПараметрыУчетаВремени.ВидыРабот,
				ПараметрыУчетаВремени.СпособУказанияВремени);
				УчетВремени.ПереключитьХронометраж(
				ПараметрыОповещения,
				ПараметрыУчетаВремени.ДатаНачала,
				ПараметрыУчетаВремени.ДатаОкончания,
				ПараметрыУчетаВремени.ВключенХронометраж,
				Источник,
				ПараметрыУчетаВремени.ВидыРабот);
			КонецЕсли;
			
			ВидРабот = Неопределено;
			Если ПараметрыУчетаВремени.ВидыРабот <> Неопределено И ПараметрыУчетаВремени.ВидыРабот.Количество() > 0 Тогда
				ВидРабот = ПараметрыУчетаВремени.ВидыРабот[0].Значение;
			КонецЕсли;
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
				"chronometrationOn", ПараметрыУчетаВремени.ВключенХронометраж);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
				"workType", ВидРабот);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
				"timeInputMethod", ПараметрыУчетаВремени.СпособУказанияВремени);
			
			ПараметрыXDTO.beginDate = ПараметрыУчетаВремени.ДатаНачала;
			ПараметрыXDTO.endDate = ПараметрыУчетаВремени.ДатаОкончания;
			ПараметрыXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Источник);
			
			Ответ.settings.Добавить(ПараметрыXDTO);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при переключении хронометража'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Заполняет данные по учету времени по переданному объекту XDTO
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO
//   Ссылка - связанный объект Документооборота
//
Процедура УстановитьПараметрыУчетаВремени(ОбъектXDTO, Ссылка) Экспорт
	
	ПараметрыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChronometrationSettings");
	
	ПараметрыУчетаВремени = Новый Структура;
	
	ПараметрыУчетаВремени.Вставить("ДатаНачала", '00010101');
	ПараметрыУчетаВремени.Вставить("ДатаОкончания", '00010101');
	ПараметрыУчетаВремени.Вставить("ВключенХронометраж",Ложь);
	ПараметрыУчетаВремени.Вставить("ВидыРабот");
	ПараметрыУчетаВремени.Вставить("СпособУказанияВремени");
	
	ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
	
	Если ОпцияВестиУчетТрудозатрат Тогда
		УчетВремени.ПолучитьПараметрыХронометража(
			Ссылка,
			ПараметрыУчетаВремени.ВключенХронометраж,
			ПараметрыУчетаВремени.ДатаНачала,
			ПараметрыУчетаВремени.ДатаОкончания,
			ПараметрыУчетаВремени.ВидыРабот,
			ПараметрыУчетаВремени.СпособУказанияВремени);
	КонецЕсли;
	
	ВидРабот = Неопределено;
	Если ПараметрыУчетаВремени.ВидыРабот <> Неопределено И ПараметрыУчетаВремени.ВидыРабот.Количество() > 0 Тогда
		ВидРабот = ПараметрыУчетаВремени.ВидыРабот[0].Значение;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
		"chronometrationOn", ПараметрыУчетаВремени.ВключенХронометраж);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
		"workType", ВидРабот);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
		"timeInputMethod", ПараметрыУчетаВремени.СпособУказанияВремени);
	
	ПараметрыXDTO.beginDate = ПараметрыУчетаВремени.ДатаНачала;
	ПараметрыXDTO.endDate = ПараметрыУчетаВремени.ДатаОкончания;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMGetChronometrationSettingsResponse")
			Или ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMSetChronometrationSettingsResponse") Тогда
		ОбъектXDTO.settings.Добавить(ПараметрыXDTO);
	Иначе
		ОбъектXDTO.chronometrationSettings = ПараметрыXDTO;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет ответ активными данными учета времени
//
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetChronometrationSettingsResponse, неявно возвращаемый параметр
//
Процедура УстановитьАктивныеПараметрыУчетаВремени(Ответ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеХронометража.Объект
		|ИЗ
		|	РегистрСведений.ХронометражРабочегоВремениПользователей КАК ДанныеХронометража
		|ГДЕ
		|	ДанныеХронометража.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChronometrationSettings");
		
		ПараметрыУчетаВремени = Новый Структура;
		
		ПараметрыУчетаВремени.Вставить("ДатаНачала", '00010101');
		ПараметрыУчетаВремени.Вставить("ДатаОкончания", '00010101');
		ПараметрыУчетаВремени.Вставить("ВключенХронометраж",Ложь);
		ПараметрыУчетаВремени.Вставить("ВидыРабот");
		ПараметрыУчетаВремени.Вставить("СпособУказанияВремени");
		
		ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
		
		Если ОпцияВестиУчетТрудозатрат Тогда
			УчетВремени.ПолучитьПараметрыХронометража(
			Выборка.Объект,
			ПараметрыУчетаВремени.ВключенХронометраж,
			ПараметрыУчетаВремени.ДатаНачала,
			ПараметрыУчетаВремени.ДатаОкончания,
			ПараметрыУчетаВремени.ВидыРабот,
			ПараметрыУчетаВремени.СпособУказанияВремени);
		КонецЕсли;
		
		ВидРабот = Неопределено;
		Если ПараметрыУчетаВремени.ВидыРабот <> Неопределено И ПараметрыУчетаВремени.ВидыРабот.Количество() > 0 Тогда
			ВидРабот = ПараметрыУчетаВремени.ВидыРабот[0].Значение;
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
			"chronometrationOn", ПараметрыУчетаВремени.ВключенХронометраж);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
			"workType", ВидРабот);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ПараметрыXDTO,
			"timeInputMethod", ПараметрыУчетаВремени.СпособУказанияВремени);
		
		ПараметрыXDTO.beginDate = ПараметрыУчетаВремени.ДатаНачала;
		ПараметрыXDTO.endDate = ПараметрыУчетаВремени.ДатаОкончания;
		ПараметрыXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Объект);
		
		Ответ.settings.Добавить(ПараметрыXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет основные свойства объекта XDTO, соответствующего документу
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект
//   ОбъектВыборка - ДокументОбъект, ВыборкаИзРезультатаЗапроса - источник данных заполнения
//
Процедура ЗаполнитьОсновныеСвойстваXDTOДокумента(ОбъектXDTO, ОбъектВыборка)
	
	ОбъектXDTO.name = Строка(ОбъектВыборка.Ссылка);
	ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектВыборка.Ссылка);
	ОбъектXDTO.date = ОбъектВыборка.Дата;
	ОбъектXDTO.number = ОбъектВыборка.Номер;
	
КонецПроцедуры

// Заполняет свойства объекта XDTO по соответствию
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект
//   ОбъектВыборка - ДокументОбъект, ВыборкаИзРезультатаЗапроса - источник данных заполнения
//   СоответствиеРеквизитов - Соответствие - соответствие реквизитов объекта конфигурации и свойств XDTO
//     для ссылочных реквизитов указывается суффикс "#<ТипXDTO>", например "user#DMUser".
//
Процедура ЗаполнитьСвойстваXDTOПоСоответствию(ОбъектXDTO, ОбъектВыборка, СоответствиеРеквизитов)
	
	Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
		РазделительСвойства = Найти(ЭлементСоответствия.Значение, "#");
		Если РазделительСвойства <> 0 Тогда
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектВыборка[ЭлементСоответствия.Ключ]))
					И ЗначениеЗаполнено(ОбъектВыборка[ЭлементСоответствия.Ключ]) Тогда
				Свойство = Лев(ЭлементСоответствия.Значение, РазделительСвойства - 1);
				ТипСвойства = Прав(ЭлементСоответствия.Значение,
					СтрДлина(ЭлементСоответствия.Значение) - РазделительСвойства);
				Реквизит = ЭлементСоответствия.Ключ;
				
				СсылкаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект(ТипСвойства);
				СсылкаXDTO.name = Строка(ОбъектВыборка[Реквизит]);
				СсылкаXDTO.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбъектВыборка[Реквизит]);
				
				ОбъектXDTO[Свойство] = СсылкаXDTO;
			КонецЕсли;
		Иначе
			ОбъектXDTO[ЭлементСоответствия.Значение] = ОбъектВыборка[ЭлементСоответствия.Ключ];
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя типа справочника, соответствующее DMWorkType.
//
Функция ИмяРеквизитаUser()
	
	Если Метаданные.Документы.ЕжедневныйОтчет.Реквизиты.Найти("Пользователь") = Неопределено Тогда
		Возврат "Сотрудник";
	Иначе
		Возврат "Пользователь";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДниНедели(Объект, ДатаНачала)
	
	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Объект[ИмяРеквизитаUser()]);
	
	ВремяНачалаДня = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВремяНачалаДня");
	ВремяОкончанияДня = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВремяОкончанияДня");
	
	СписокДниНедели = Новый СписокЗначений;
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Суббота);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Воскресенье);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Понедельник);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Вторник);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Среда);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Четверг);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Пятница);

	Объект.ДниНедели.Очистить();
	Для Каждого ДеньНедели Из СписокДниНедели Цикл
		НоваяСтрока = Объект.ДниНедели.Добавить();
		НоваяСтрока.ДеньНедели = ДеньНедели.Значение;
		НоваяСтрока.Дата = ДатаНачала + СписокДниНедели.Индекс(ДеньНедели) * 3600 * 24;
		
		ЭтоРабочийДень = ГрафикиРаботы.ЭтоРабочийДень(НоваяСтрока.Дата, ГрафикРаботы);
		
		Если ЭтоРабочийДень Тогда
			НоваяСтрока.ВидДня = Перечисления.ВидыДней.Рабочий;
			
			НачалоИОкончаниеРабочегоДня = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(
				НоваяСтрока.Дата,
				ГрафикРаботы);
			Если ЗначениеЗаполнено(НачалоИОкончаниеРабочегоДня.НачалоДня)
					Или ЗначениеЗаполнено(НачалоИОкончаниеРабочегоДня.ОкончаниеДня) Тогда
				
				НоваяСтрока.НачалоДня = НачалоИОкончаниеРабочегоДня.НачалоДня;
				НоваяСтрока.ОкончаниеДня = НачалоИОкончаниеРабочегоДня.ОкончаниеДня;
				
				Если ЗначениеЗаполнено(ВремяНачалаДня) И ЗначениеЗаполнено(ВремяОкончанияДня) Тогда
					Если ВремяНачалаДня < НоваяСтрока.НачалоДня И ЗначениеЗаполнено(НоваяСтрока.НачалоДня) Тогда
						НоваяСтрока.НачалоДня = ВремяНачалаДня;
					КонецЕсли;
					
					Если ВремяОкончанияДня > НоваяСтрока.ОкончаниеДня И ЗначениеЗаполнено(НоваяСтрока.ОкончаниеДня) Тогда
						НоваяСтрока.ОкончаниеДня = ВремяОкончанияДня;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока.ВидДня = Перечисления.ВидыДней.Выходной;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоФактическимТрудозатратам(Объект, ДатаНачала, ПолитикаУчета)
	
	Если ПолитикаУчета <> Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕженедельныеОтчеты Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ФактическиеТрудозатраты.ОписаниеРаботы КАК СТРОКА(150)) КАК Работа,
		|	ФактическиеТрудозатраты.Проект КАК Проект,
		|	ФактическиеТрудозатраты.ПроектнаяЗадача КАК ПроектнаяЗадача,
		|	ФактическиеТрудозатраты.ВидРабот КАК ВидРабот,
		|	ФактическиеТрудозатраты.Длительность,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФактическиеТрудозатраты.Источник) <> ТИП(документ.ЕжедневныйОтчет)
		|			ТОГДА ФактическиеТрудозатраты.Источник
		|	КОНЕЦ КАК Источник,
		|	ФактическиеТрудозатраты.ДатаДобавления КАК Дата,
		|	ФактическиеТрудозатраты.НомерДобавления
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.Пользователь = &Пользователь
		|	И ФактическиеТрудозатраты.ДатаДобавления >= &ДатаНачала
		|	И ФактическиеТрудозатраты.ДатаДобавления <= &Дата
		|ИТОГИ ПО
		|	Работа,
		|	Проект,
		|	ПроектнаяЗадача,
		|	ВидРабот,
		|	Источник");
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	ВыборкаРабота = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРабота.Следующий() Цикл
		
		ВыборкаПроект = ВыборкаРабота.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроект.Следующий() Цикл
			
			ВыборкаПроектнаяЗадача = ВыборкаПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПроектнаяЗадача.Следующий() Цикл
				
				ВыборкаВидРабот = ВыборкаПроектнаяЗадача.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидРабот.Следующий() Цикл
					
					ВыборкаИсточник = ВыборкаВидРабот.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИсточник.Следующий() Цикл
						
						НоваяСтрока = Объект.Работы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИсточник,
							"Работа, Проект, ПроектнаяЗадача, ВидРабот, Источник");
						
						ВыборкаДетали = ВыборкаИсточник.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							
							ДатаРаботы = "";
							ДнНедели = ДеньНедели(ВыборкаДетали.Дата);
							Если ДнНедели = 1 Тогда
								ДатаРаботы = "Пн";
							ИначеЕсли ДнНедели = 2 Тогда
								ДатаРаботы = "Вт";
							ИначеЕсли ДнНедели = 3 Тогда
								ДатаРаботы = "Ср";
							ИначеЕсли ДнНедели = 4 Тогда
								ДатаРаботы = "Чт";
							ИначеЕсли ДнНедели = 5 Тогда
								ДатаРаботы = "Пт";
							ИначеЕсли ДнНедели = 6 Тогда
								ДатаРаботы = "Сб";
							ИначеЕсли ДнНедели = 7 Тогда
								ДатаРаботы = "Вс";
							КонецЕсли;
							
							Длительность = УчетВремениКлиентСервер.ПолучитьДату(ВыборкаДетали.Длительность);
							НоваяСтрока[ДатаРаботы] = НоваяСтрока[ДатаРаботы] + Час(Длительность)*3600
								+ Минута(Длительность)*60;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоЕжедневнымОтчетам(Объект, ДатаНачала, ПолитикаУчета)
	
	Если ПолитикаУчета <> Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеИЕженедельныеОтчеты Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка КАК ЕжедневныйОтчет,
		|	ЕжедневныйОтчет.ДлительностьРабот КАК ДлительностьРабот,
		|	ЕжедневныйОтчет.ДлительностьРабочая КАК ДлительностьРабочая,
		|	ЕжедневныйОтчет.Дата КАК Дата,
		|	ЕжедневныйОтчет.НачалоДня,
		|	ЕжедневныйОтчет.ОкончаниеДня
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &Пользователь
		|	И ЕжедневныйОтчет.Дата >= &ДатаНачала
		|	И ЕжедневныйОтчет.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕжедневныйОтчет.Дата");
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Дата", НачалоДня(Выборка.Дата));
		НайденныеСтроки = Объект.ДниНедели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ЕжедневныйОтчет = Выборка.ЕжедневныйОтчет;
			НайденныеСтроки[0].ДлительностьРабот = Выборка.ДлительностьРабот;
			НайденныеСтроки[0].ДлительностьРабочая = Выборка.ДлительностьРабочая;
			НайденныеСтроки[0].НачалоДня = Выборка.НачалоДня;
			НайденныеСтроки[0].ОкончаниеДня = Выборка.ОкончаниеДня;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
