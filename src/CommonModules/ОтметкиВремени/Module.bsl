
#Область ПолучениеИзменений

// Выбрать зарегистрированные изменения.
// 
// Параметры:
//  Отметка -Число
//  Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Неопределено
//  Владелец - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты, Неопределено
//  Источник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Неопределено
//  МенеджерВременныхТаблиц - Менеджер временных таблиц
//  Порция - Число - число выбираемых объектов
// 
// Возвращаемое значение:
//  ДеревоЗначений, ТаблицаЗначений - Выбрать изменения
Функция ВыбратьИзменения(Отметка, Объект = Неопределено, 
	Владелец = Неопределено, Источник = Неопределено, 
	МенеджерВременныхТаблиц = Неопределено, Порция = 1000) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ключ КАК Ключ,
	|	&ПустойУникальныйИдентификатор КАК КлючУИД,
	|	Т.Объект КАК Объект,
	|	Т.Отметка КАК Отметка,
	|	Т.Граница КАК Граница,
	|	Т.Удаление КАК Удаление,
	|	Т.Источник КАК Источник,
	|	0 КАК ТипКлюча,
	|	NULL КАК ЗначенияКлюча
	|ПОМЕСТИТЬ ВсеИзменения
	|ИЗ
	|	РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК Т
	|ГДЕ
	|	Т.Граница > &Граница
	|	//ИОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ключ,
	|	&ПустойУникальныйИдентификатор КАК КлючУИД,
	|	Т.Объект,
	|	Т.Отметка,
	|	Т.Граница,
	|	Т.Удаление,
	|	Т.Источник,
	|	Т.ТипКлюча,
	|	NULL
	|ИЗ
	|	РегистрСведений.ОтметкиВремениРегистровПодчиненных КАК Т
	|ГДЕ
	|	Т.Граница > &Граница
	|	//ИОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.КлючСсылка,
	|	Т.Ключ КАК КлючУИД,
	|	Т.Объект,
	|	Т.Отметка,
	|	Т.Граница,
	|	Т.Удаление,
	|	Т.Источник,
	|	3,
	|	Т.ЗначенияКлюча
	|ИЗ
	|	РегистрСведений.ОтметкиВремениРегистровНезависимых КАК Т
	|ГДЕ
	|	Т.Граница > &Граница
	|	//ИОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ключ,
	|	Т.ИдентификаторКлюча,
	|	Т.Объект,
	|	Т.Отметка,
	|	0,
	|	Т.Удаление,
	|	Т.Источник,
	|	Т.ТипКлюча,
	|	Т.ЗначенияКлюча
	|ИЗ
	|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
	|//ГдеОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ключ,
	|	Т.ИдентификаторКлюча,
	|	Т.Объект,
	|	Т.Отметка,
	|	0,
	|	Т.Удаление,
	|	Т.Источник,
	|	Т.ТипКлюча,
	|	Т.ЗначенияКлюча
	|ИЗ
	|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
	|//ГдеОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ключ,
	|	Т.ИдентификаторКлюча,
	|	Т.Объект,
	|	Т.Отметка,
	|	0,
	|	Т.Удаление,
	|	Т.Источник,
	|	Т.ТипКлюча,
	|	Т.ЗначенияКлюча
	|ИЗ
	|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
	|//ГдеОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Т.Ключ КАК Ключ,
	|	Т.КлючУИД КАК КлючУИД,
	|	Т.Объект КАК Объект,
	|	МАКСИМУМ(Т.Отметка) КАК Отметка,
	|	МАКСИМУМ(Т.Граница) КАК Граница,
	|	МАКСИМУМ(ЕСТЬNULL(СрезУдаленных.Удаление, Т.Удаление)) КАК Удаление,
	|	//СоединениеПоля1,
	|	МАКСИМУМ(Т.ТипКлюча) КАК ТипКлюча
	|ПОМЕСТИТЬ Изменённые
	|ИЗ
	|	ВсеИзменения КАК Т
	|		//СоединениеОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК СрезУдаленных
	|		ПО (Т.Удаление = ИСТИНА)
	|			И (Т.ТипКлюча > 0)
	|			И Т.Ключ = СрезУдаленных.Ключ
	|			И Т.Объект = СрезУдаленных.Объект
	|			И Т.Отметка <= СрезУдаленных.Отметка
	|			И (СрезУдаленных.Удаление = ЛОЖЬ)
	|//ГдеИсточник
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ключ,
	|	Т.КлючУИД,
	|	Т.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отметка,
	|	Удаление УБЫВ
	|;
	|");
		
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.КлючУИД КАК КлючУИД,
		|	Т.Объект КАК Объект,
		|	Т.Отметка КАК Отметка,
		|	Т.Граница КАК Граница,
		|	Т.Удаление КАК Удаление,
		|	//СоединениеПоля2,
		|	Т.ТипКлюча КАК ТипКлюча,
		|	ВсеИзменения.ЗначенияКлюча КАК ХранилищеКлюча		
		|ИЗ
		|	Изменённые КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК ВсеИзменения
		|		ПО (Т.ТипКлюча = 3)
		|			И (Т.Удаление = ИСТИНА)
		|			И Т.Ключ = ВсеИзменения.Ключ
		|			И Т.Объект = ВсеИзменения.Объект
		|			И Т.Отметка = ВсеИзменения.Отметка
		|			И Т.ТипКлюча = ВсеИзменения.ТипКлюча
		|			И (ВсеИзменения.Удаление = ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отметка,
		|	Удаление УБЫВ";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Т.КлючУИД КАК Ключ,
		|	Т.Объект КАК Объект,
		|	ВсеИзменения.ЗначенияКлюча КАК ХранилищеКлюча
		|ИЗ
		|	Изменённые КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеИзменения КАК ВсеИзменения
		|		ПО Т.Ключ = ВсеИзменения.Ключ
		|			И Т.Объект = ВсеИзменения.Объект
		|			И Т.Отметка = ВсеИзменения.Отметка
		|			И Т.ТипКлюча = ВсеИзменения.ТипКлюча
		|			И (ВсеИзменения.Удаление = ИСТИНА)
		|ГДЕ
		|	Т.ТипКлюча = 3
		|	И Т.Удаление = ИСТИНА
		|;
		|
		|УНИЧТОЖИТЬ ВсеИзменения
		|;
		|
		|ВЫБРАТЬ
		|	Т.Объект КАК Объект,
		|	Т.Объект.ПолноеИмя КАК ОбъектИмя,
		|	МАКСИМУМ(Т.Отметка) КАК Отметка,
		|	МАКСИМУМ(Т.Граница) КАК Граница,
		|	МАКСИМУМ(Т.Удаление) КАК Удаление,
		|	МИНИМУМ(Т.ТипКлюча) КАК ТипКлюча,
		|	//СоединениеПоля2,
		|	КОЛИЧЕСТВО(1) КАК Количество
		|ИЗ
		|	Изменённые КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Объект,
		|	Т.Объект.ПолноеИмя";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Или ЗначениеЗаполнено(Владелец) Тогда
		Отборы = Новый Массив;
		
		Если ТипЗнч(Объект) = Тип("Структура") Тогда
			//Отбор через соединение.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СоединениеОтбор",
				СтрШаблон("ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК _
				|		ПО Т.Объект = _.%2 %3",
				Объект.Таблица, Объект.ПолеОбъекта,
				?(ПустаяСтрока(Объект.Условия), "", "И (" + Объект.Условия +")")));
				
			Если ЗначениеЗаполнено(Объект.ПоляВыборки) Тогда
				Поля = СтрРазделить(Объект.ПоляВыборки, ",");
				Для Н=0 По Поля.ВГраница() Цикл
					Поля[Н] = СтрШаблон("МАКСИМУМ(_.%1) КАК _%1", Поля[Н]);
				КонецЦикла;
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СоединениеПоля1", СтрСоединить(Поля, ","));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СоединениеПоля2", СтрЗаменить(СтрСоединить(Поля, ","), "_.", "Т._"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.Параметры) Тогда
				Для Каждого Эл Из Объект.Параметры Цикл
					Запрос.УстановитьПараметр(Эл.Ключ, Эл.Значение);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Отборы.Добавить("Т.Объект В (&Объект)");
			Запрос.УстановитьПараметр("Объект", Объект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			Отборы.Добавить("Т.Владелец В (&Владелец)");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		
		Если Отборы.Количество() Тогда
			Отборы = СтрСоединить(Отборы, " И ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ИОтбор", "И " + Отборы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГдеОтбор", "ГДЕ " + Отборы);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) Тогда
		//Исключить свои изменения.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГдеИсточник", "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК СрезИсточников
		|		ПО Т.Ключ = СрезИсточников.Ключ
		|			И Т.Объект = СрезИсточников.Объект
		|			И Т.Отметка <= СрезИсточников.Отметка
		|			И Т.Источник <> СрезИсточников.Источник
		|ГДЕ ЕСТЬNULL(СрезИсточников.Источник, Т.Источник) <> &Источник");
		Запрос.УстановитьПараметр("Источник", Источник);		
	КонецЕсли;
	
	Если Порция <> 1000 И ЗначениеЗаполнено(Порция) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", Формат(Порция, "ЧГ=0"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Граница", Отметка);
	
	ПустойУникальныйИдентификатор = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор);
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Изменения = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Пакет = Запрос.ВыполнитьПакет();
		Изменения = Пакет[4].Выгрузить();
		Удаления = Пакет[2].Выгрузить();
		Пакет = Неопределено;
	КонецЕсли;
	
	Изменения.Колонки.Добавить("ПолеКлюча");
	Изменения.Колонки.Добавить("ПолеИсточника");
	Изменения.Колонки.Добавить("УдаленныеКлючи");
	
	//Разыменование ключей.
	Для Каждого Строка Из Изменения Цикл
		Если Строка.ТипКлюча = 0 Тогда
			Строка.ПолеКлюча = "Ключ";
			Строка.ПолеИсточника = "Ссылка";
			
		ИначеЕсли Строка.ТипКлюча = 1 Тогда
			Строка.ПолеКлюча = "Ключ";
			Строка.ПолеИсточника = "Регистратор";
			
		ИначеЕсли Строка.ТипКлюча = 2 Тогда
			//Первое ссылочное измерение.
			Строка.ПолеКлюча = "Ключ";
			Попытка
				Строка.ПолеИсточника = Метаданные.НайтиПоПолномуИмени(Строка.ОбъектИмя).Измерения[0].Имя;
			Исключение
				Строка.ПолеИсточника = "?";
			КонецПопытки;
						
		ИначеЕсли Строка.ТипКлюча = 3 Тогда
			//Общий реквизит.
			Строка.ПолеКлюча = "КлючУИД";
			Строка.ПолеИсточника = "ОтметкиВремениИдентификаторНабораЗаписей";
			
			Если Строка.Удаление Тогда
				
				Если Удаления <> Неопределено Тогда
					Строка.УдаленныеКлючи = Новый Соответствие;
					Для Каждого Выборка Из Удаления.НайтиСтроки(Новый Структура("Объект", Строка.Объект)) Цикл
						Строка.УдаленныеКлючи.Вставить(Выборка.Ключ, ЗначенияКлюча(Выборка.ХранилищеКлюча)); 		
					КонецЦикла;
				Иначе	
				    Строка.УдаленныеКлючи = ЗначенияКлюча(Строка.ХранилищеКлюча);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Строка.ТипКлюча = 9 Тогда
			// Константа
			Строка.ПолеКлюча = "Объект";
			Строка.ПолеИсточника = "";
			
		Иначе
			//Регистр без ключей.
			Строка.ПолеКлюча = "Объект";
			Строка.ПолеИсточника = "*";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Удаления = Неопределено Тогда
		Изменения.Колонки.Удалить("ХранилищеКлюча");
	Иначе
		Удаления.Очистить();
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

// Проверить изменения, по таблице пришедших данных, есть ли те же данные у нас в СУБД, и где новее.
// 
// Параметры:
//  Изменения - ЛюбаяСсылка, ТаблицаЗначений - данные для проверки изменений. 
//  Объект - ОбъектМетаданных, СправочникСсылка.ИдентификаторыОбъектовМетаданных - проверяемый объект метаданных.
//  Источник - СправочникСсылка - узел источник изменений.
//  Отметка - Число - проверяемая отметка времени. Если не указана в таблице Изменения.
//  КлючевоеПоле - Строка - имя поля ключа для использования в вызывающем коде.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - ТаблицаЗначений
Функция ПроверитьИзменения(Изменения, Объект, Источник = Неопределено, Отметка = Неопределено, КлючевоеПоле = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Блокировка = Новый БлокировкаДанных;
	Если ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		Метаданное = Объект;
		ИОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданное);
	Иначе
		Метаданное = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект);
		ИОМ = Объект;
	КонецЕсли;
	
	РеквизитКлюча = Неопределено;
	ТипКлюча = ТипКлючаОбъекта(Метаданное, РеквизитКлюча);
			
	Если ТипКлюча = 0 Тогда
		//Ссылка
		КлючевоеПоле = РеквизитКлюча.Имя;
		Блок = Блокировка.Добавить(Метаданное.ПолноеИмя());
		
	ИначеЕсли ТипКлюча = 1 Тогда
		//По регистратору
		КлючевоеПоле = РеквизитКлюча.Имя;
		Блок = Блокировка.Добавить(Метаданное.ПолноеИмя() + ".НаборЗаписей");
				
	ИначеЕсли ТипКлюча = 2 Тогда
		//По ведущему измерению.
		КлючевоеПоле = РеквизитКлюча.Имя;
		Блок = Блокировка.Добавить(Метаданное.ПолноеИмя());
		
	ИначеЕсли ТипКлюча >= 8 Тогда
		//Константа или регистр сведений без измерений.
		Если ТипКлюча = 9 Тогда
			КлючевоеПоле = "";
			ПолеЗначения = "Значение";
		Иначе
			КлючевоеПоле = "*";
			Если Метаданное.Ресурсы.Количество() Тогда
				ПолеЗначения = Метаданное.Ресурсы[0].Имя;
			ИначеЕсли Метаданное.Реквизиты.Количество() Тогда
				ПолеЗначения = Метаданное.Реквизиты[0].Имя;
			Иначе
				Набор = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "НаборЗаписей."));
				Набор = Набор.ВыгрузитьКолонки();
				ПолеЗначения = Набор.Колонки[0].Имя;
			КонецЕсли;
		КонецЕсли;
		Блокировка.Добавить(Метаданное.ПолноеИмя());
		
		Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	Т.Отметка КАК Отметка,
		|	Т.Источник КАК Источник
		|ПОМЕСТИТЬ Очередь
		|ИЗ
		|	РегистрСведений.ОтметкиВремениРегистровНезависимых КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	Null
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Ключ КАК Ключ,
		|	&Объект КАК Объект,
		|	&ТипКлюча КАК ТипКлюча,
		|	МАКСИМУМ(О.Отметка) КАК Отметка,
		|	МАКСИМУМ(О.Источник) КАК Источник,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА _.%2 ЕСТЬ NULL
		|			ИЛИ О.Отметка = 0
		|			ИЛИ О.Источник = &Источник
		|				И О.Отметка <= &Отметка
		|			ИЛИ О.Отметка = &Отметка
		|			ТОГДА 0
		|		КОГДА О.Источник = &Источник
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ) КАК Коллизия,
		|	МАКСИМУМ(_.%2 ЕСТЬ NULL) КАК ЭтоНовый,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
		|	ЛОЖЬ КАК Удаление
		|ИЗ
		|	Очередь КАК О
		|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
		|		ПО ИСТИНА
		|ГДЕ 
		|	О.Отметка В
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(Т.Отметка)
		|		ИЗ
		|			Очередь КАК Т)",
		Метаданное.ПолноеИмя(),
		ПолеЗначения);
		
		Запрос.УстановитьПараметр("Ключ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		Если Отметка <> Неопределено Тогда
			Запрос.УстановитьПараметр("Отметка", Отметка);
		ИначеЕсли ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
			Запрос.УстановитьПараметр("Отметка", Изменения[0]._Отметка);
		Иначе
			Запрос.УстановитьПараметр("Отметка", ТекущаяУниверсальнаяДатаВМиллисекундах());
		КонецЕсли;
			
	Иначе
		Если ТипКлюча = 3 Тогда
			КлючевоеПоле = "ОтметкиВремениИдентификаторНабораЗаписей";
		Иначе
			//Регистр без ключей.
			КлючевоеПоле = "НомерСтроки";
		КонецЕсли;
		
		Измерения = Новый Массив;
		Условия = Новый Массив;
		Набор = РегистрыСведений[Метаданное.Имя].СоздатьНаборЗаписей();
		Для Каждого Поле Из Набор.Отбор Цикл
			Измерения.Добавить(Поле.Имя);
			Условия.Добавить(СтрШаблон("Т.%1 = _.%1", Поле.Имя));
		КонецЦикла;
		Измерения = СтрСоединить(Измерения, ",");
		
		Ключи = Набор.Выгрузить(, Измерения);
		Ключи.Колонки.Добавить("ОтметкиВремениИдентификаторНабораЗаписей", Новый ОписаниеТипов("УникальныйИдентификатор"));
		Ключи.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9,0)));
		Ключи.Колонки.Добавить("_Отметка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
		Ключи.Колонки.Добавить("_Удаление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
		
		ЕстьУдаление = Ложь;
		Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Поле Из Набор.Отбор Цикл
				Если Изменения.Колонки.Найти(Поле.Имя) = Неопределено Тогда
					//Добавляем измерение со значением по умолчанию.
					Изменения.Колонки.Добавить(Поле.Имя, Поле.ТипЗначения);
				КонецЕсли;
			КонецЦикла;
			Если Изменения.Колонки.Найти("_Удаление") <> Неопределено Тогда
				ЕстьУдаление = Истина;
				УдаленныеНаборы = Новый Соответствие;
			КонецЕсли;
			Коллекция = Изменения;
		Иначе
			Коллекция = Новый Массив;
			Коллекция.Добавить(Изменения);
		КонецЕсли;
		
		Для Каждого Строка Из Коллекция Цикл
			ПолныйОтбор = Истина;
			Для Каждого Поле Из Набор.Отбор Цикл
				Если Строка[Поле.Имя] = Null Тогда
					Поле.Использование = Ложь;
					Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
					ПолныйОтбор = Ложь;
				Иначе
					Поле.Использование = Истина;
					Попытка
						Поле.Значение = Строка[Поле.Имя];
					Исключение
						Если Строка[Поле.Имя] = Неопределено Тогда
							Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
						Иначе
							ОшибкаТипизации(Поле.Имя, Строка[Поле.Имя], Метаданное);
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Запись = Ключи.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.ОтметкиВремениИдентификаторНабораЗаписей = ОтметкиВремениСобытия.ИдентификаторНабораЗаписей(Набор);
			Запись.НомерСтроки = Изменения.Индекс(Строка);
			Если Отметка <> Неопределено Тогда
				Запись._Отметка = Отметка;
			КонецЕсли;
			
			Если ЕстьУдаление И Не ПолныйОтбор И Строка._Удаление = Истина Тогда
				Поля = Новый Массив;
				Для Каждого Поле Из Набор.Отбор Цикл
					Если Строка[Поле.Имя] <> Null Тогда
						Поля.Добавить(СтрШаблон("Т.%1 = _.%1", Поле.Имя));
					КонецЕсли;
				КонецЦикла;
				Поля = СтрСоединить(Поля, " И ");
				Комбинация = УдаленныеНаборы.Получить(Поля);
				Если Комбинация = Неопределено Тогда
					Комбинация = УдаленныеНаборы.Количество() + 1;
					УдаленныеНаборы.Вставить(Поля, Комбинация);
				КонецЕсли;
				Запись._Удаление = Комбинация;
			КонецЕсли;
							
		КонецЦикла;
		
		Блок = Блокировка.Добавить(Метаданное.ПолноеИмя());
		Блок.ИсточникДанных = Ключи;
		Для Каждого Поле Из Набор.Отбор Цикл
			Блок.ИспользоватьИзИсточникаДанных(Поле.Имя, Поле.Имя);
		КонецЦикла;
						
		Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	%2,
		|	Т.ОтметкиВремениИдентификаторНабораЗаписей КАК ОтметкиВремениИдентификаторНабораЗаписей,
		|	Т._Отметка КАК _Отметка,
		|	Т._Удаление КАК _Удаление,
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Ключи
		|ИЗ
		|	&Ключи КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(%4.ОтметкиВремениИдентификаторНабораЗаписей, Т.ОтметкиВремениИдентификаторНабораЗаписей) КАК Ключ,
		|	Т.ОтметкиВремениИдентификаторНабораЗаписей КАК ОтметкиВремениИдентификаторНабораЗаписей,
		|	_.%5 ЕСТЬ NULL КАК ЭтоНовый,
		|	Т._Отметка КАК Отметка,
		|	Т.НомерСтроки
		|ПОМЕСТИТЬ КлючиТекущие
		|ИЗ
		|	Ключи КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
		|		ПО %3
		|%6
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.Отметка КАК Отметка,
		|	Т.Источник КАК Источник
		|ПОМЕСТИТЬ Очередь
		|ИЗ
		|	КлючиТекущие КАК _
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровНезависимых КАК Т
		|		ПО _.Ключ = Т.Ключ
		|			И (Т.Объект = &Объект)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
		|ГДЕ
		|	Т.Объект = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.Отметка КАК Отметка,
		|	Т.Источник КАК Источник
		|ПОМЕСТИТЬ ОчередьСрез
		|ИЗ
		|	Очередь КАК Т
		|ГДЕ
		|	(Т.Ключ, Т.Отметка) В 
		|			(ВЫБРАТЬ
		|				Т.Ключ КАК Ключ,
		|				МАКСИМУМ(Т.Отметка) КАК Отметка
		|			ИЗ
		|				Очередь КАК Т
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Т.Ключ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
		|	Т.ОтметкиВремениИдентификаторНабораЗаписей КАК Ключ,
		|	&Объект КАК Объект,
		|	&ТипКлюча КАК ТипКлюча,
		|	МАКСИМУМ(О.Отметка) КАК Отметка,
		|	МАКСИМУМ(О.Источник) КАК Источник,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА Т.ЭтоНовый
		|			ИЛИ О.Отметка ЕСТЬ NULL
		|			ИЛИ О.Источник = &Источник
		|				И О.Отметка <= Т.Отметка
		|			ИЛИ О.Отметка = Т.Отметка
		|			ТОГДА 0
		|		КОГДА О.Источник = &Источник
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ) КАК Коллизия,
		|	МАКСИМУМ(Т.ЭтоНовый) КАК ЭтоНовый,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
		|	ЛОЖЬ КАК Удаление
		|ИЗ
		|	КлючиТекущие КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьСрез КАК О
		|		ПО Т.Ключ = О.Ключ
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.ОтметкиВремениИдентификаторНабораЗаписей",
		Метаданное.ПолноеИмя(),
		Измерения,
		СтрСоединить(Условия, " И "),
		?(ТипКлюча = 3, "_", "Т"),
		Набор.Отбор[0].Имя,
		?(ЗначениеЗаполнено(УдаленныеНаборы), "ГДЕ Т._Удаление = 0", ""));
		
		Если ЗначениеЗаполнено(УдаленныеНаборы) Тогда
			Объединения = Новый Массив;
			Объединения.Добавить(Запрос.Текст);
			
			Для Каждого Комбинация Из УдаленныеНаборы Цикл
				Если Комбинация.Ключ = "" Тогда
					//Полное удаление
					Блокировка.Добавить(Метаданное.ПолноеИмя());
					
					Объединения.Добавить(СтрШаблон(
					"ВЫБРАТЬ
					|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
					|	МАКСИМУМ(Т.ОтметкиВремениИдентификаторНабораЗаписей) КАК Ключ,
					|	&Объект КАК Объект,
					|	&ТипКлюча КАК ТипКлюча,
					|	МАКСИМУМ(О.Отметка) КАК Отметка,
					|	МАКСИМУМ(О.Источник) КАК Источник,
					|	МАКСИМУМ(ВЫБОР
					|		КОГДА О.Отметка ЕСТЬ NULL
					|			ИЛИ О.Источник = &Источник
					|				И О.Отметка <= Т._Отметка
					|			ИЛИ О.Отметка = Т._Отметка
					|			ТОГДА 0
					|		КОГДА О.Источник = &Источник
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ) КАК Коллизия,
					|	ЛОЖЬ КАК ЭтоНовый,
					|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
					|	ИСТИНА КАК Удаление
					|ИЗ
					|	Ключи КАК Т
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровНезависимых КАК О
					|		ПО (О.Объект = &Объект)
					|ГДЕ
					|	Т._Удаление = %1
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
					|	МАКСИМУМ(Т.ОтметкиВремениИдентификаторНабораЗаписей) КАК Ключ,
					|	&Объект КАК Объект,
					|	&ТипКлюча КАК ТипКлюча,
					|	МАКСИМУМ(О.Отметка) КАК Отметка,
					|	МАКСИМУМ(О.Источник) КАК Источник,
					|	МАКСИМУМ(ВЫБОР
					|		КОГДА О.Отметка ЕСТЬ NULL
					|			ИЛИ О.Источник = &Источник
					|				И О.Отметка <= Т._Отметка
					|			ИЛИ О.Отметка = Т._Отметка
					|			ТОГДА 0
					|		КОГДА О.Источник = &Источник
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ) КАК Коллизия,
					|	ЛОЖЬ КАК ЭтоНовый,
					|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
					|	ЛОЖЬ КАК Удаление
					|ИЗ
					|	Ключи КАК Т
					|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьСрез КАК О
					|		ПО (ИСТИНА)
					|ГДЕ
					|	Т._Удаление = %1",
					Формат(Комбинация.Значение, "ЧГ=0")));
					
				ИначеЕсли ТипКлюча = 3 Тогда
					Блок = Блокировка.Добавить(Метаданное.ПолноеИмя());
					Блок.ИсточникДанных = Ключи.Скопировать(Ключи.НайтиСтроки(Новый Структура("_Удаление", Комбинация.Значение)));
					Для Каждого Поле Из Набор.Отбор Цикл
						Если Найти(Комбинация.Ключ, "." + Поле.Имя + " ") Тогда
							Блок.ИспользоватьИзИсточникаДанных(Поле.Имя, Поле.Имя);
						КонецЕсли;
					КонецЦикла;
										
					Объединения.Добавить(СтрШаблон(
					"ВЫБРАТЬ
					|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
					|	Т.ОтметкиВремениИдентификаторНабораЗаписей КАК Ключ,
					|	&Объект КАК Объект,
					|	&ТипКлюча КАК ТипКлюча,
					|	МАКСИМУМ(ЕСТЬNULL(О2.Отметка, О1.Отметка)) КАК Отметка,
					|	МАКСИМУМ(ЕСТЬNULL(О2.Источник, О1.Источник)) КАК Источник,
					|	МАКСИМУМ(ВЫБОР
					|		КОГДА О2.Отметка ЕСТЬ NULL И О1.Отметка ЕСТЬ NULL
					|			ИЛИ ЕСТЬNULL(О2.Источник, О1.Источник) = &Источник
					|				И ЕСТЬNULL(О2.Отметка, О1.Отметка) <= Т._Отметка
					|			ИЛИ ЕСТЬNULL(О2.Отметка, О1.Отметка) = Т._Отметка
					|			ТОГДА 0
					|		КОГДА ЕСТЬNULL(О2.Источник, О1.Источник) = &Источник
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ) КАК Коллизия,
					|	МИНИМУМ(_.ОтметкиВремениИдентификаторНабораЗаписей ЕСТЬ NULL) КАК ЭтоНовый,
					|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
					|	ЛОЖЬ КАК Удаление
					|ИЗ
					|	Ключи КАК Т
					|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
					|		ПО %2
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровНезависимых КАК О1
					|		ПО _.ОтметкиВремениИдентификаторНабораЗаписей = О1.Ключ
					|			И (О1.Объект = &Объект)
					|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьСрез КАК О2
					|		ПО _.ОтметкиВремениИдентификаторНабораЗаписей = О2.Ключ
					|ГДЕ
					|	Т._Удаление = %3
					|
					|СГРУППИРОВАТЬ ПО
					|	Т.ОтметкиВремениИдентификаторНабораЗаписей",
					Метаданное.ПолноеИмя(),
					Комбинация.Ключ,
					Формат(Комбинация.Значение, "ЧГ=0")));
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(Объединения, "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ключи", Ключи);
		
	КонецЕсли;
	
	Если Запрос.Текст = "" Тогда
		
		Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") И Изменения.Количество() > 1 Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Т.Ключ КАК Ключ,
			|	Т.Отметка КАК Отметка
			|ПОМЕСТИТЬ Ключи
			|ИЗ
			|	&Ключи КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.Ключ КАК Ключ,
			|	Т.Отметка КАК Отметка,
			|	Т.Источник КАК Источник
			|ПОМЕСТИТЬ Очередь
			|ИЗ
			|	Ключи КАК _
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.%3 КАК Т
			|		ПО _.Ключ = Т.Ключ
			|			И (Т.Объект = &Объект)
			|	
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.%4,
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
			|ГДЕ
			|	Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.%4,
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
			|ГДЕ
			|	Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.%4,
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
			|ГДЕ
			|	Т.Объект = &Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.Ключ КАК Ключ,
			|	&Объект КАК Объект,
			|	&ТипКлюча КАК ТипКлюча,
			|	МАКСИМУМ(О.Отметка) КАК Отметка,
			|	МАКСИМУМ(О.Источник) КАК Источник,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА _.%2 ЕСТЬ NULL
			|			ИЛИ О.Отметка ЕСТЬ NULL
			|			ИЛИ О.Источник = &Источник
			|				И О.Отметка <= Т.Отметка
			|			ИЛИ О.Отметка = Т.Отметка
			|			ТОГДА 0
			|		КОГДА О.Источник = &Источник
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ) КАК Коллизия,
			|	МАКСИМУМ(_.%2 ЕСТЬ NULL) КАК ЭтоНовый,
			|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
			|	ЛОЖЬ КАК Удаление
			|ИЗ
			|	Ключи КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
			|		ПО Т.Ключ = _.%2
			|		ЛЕВОЕ СОЕДИНЕНИЕ Очередь КАК О
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				Т.Ключ КАК Ключ,
			|				МАКСИМУМ(Т.Отметка) КАК Отметка
			|			ИЗ
			|				Очередь КАК Т
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Т.Ключ) КАК ОчередьСрез
			|			ПО О.Ключ = ОчередьСрез.Ключ
			|				И О.Отметка = ОчередьСрез.Отметка
			|		ПО Т.Ключ = О.Ключ
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Ключ";
			
			Ключи = Новый ТаблицаЗначений();
			Ключи.Колонки.Добавить("Ключ", РеквизитКлюча.Тип);
			Ключи.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
			
			Для Каждого Строка Из Изменения Цикл
				Запись = Ключи.Добавить();
				Запись.Ключ = Строка[КлючевоеПоле];
				Если Запись.Ключ <> Строка[КлючевоеПоле] Тогда
					ОшибкаТипизации(КлючевоеПоле, Строка[КлючевоеПоле], Метаданное); 
				КонецЕсли;
				Запись.Отметка = ?(Отметка = Неопределено, Строка._Отметка, Отметка);
			КонецЦикла;
			
			Запрос.УстановитьПараметр("Ключи", Ключи);
			Блок.ИсточникДанных = Ключи;
			Блок.ИспользоватьИзИсточникаДанных(КлючевоеПоле, "Ключ");
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Т.Отметка КАК Отметка,
			|	Т.Источник КАК Источник
			|ПОМЕСТИТЬ Очередь
			|ИЗ
			|	РегистрСведений.%3 КАК Т
			|ГДЕ
			|	Т.Ключ = &Ключ
			|	И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
			|ГДЕ
			|	Т.%4 = &Ключ
			|	И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
			|ГДЕ
			|	Т.%4 = &Ключ
			|	И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
			|ГДЕ
			|	Т.%4 = &Ключ
			|	И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	0,
			|	Null
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Ключ КАК Ключ,
			|	&Объект КАК Объект,
			|	&ТипКлюча КАК ТипКлюча,
			|	МАКСИМУМ(О.Отметка) КАК Отметка,
			|	МАКСИМУМ(О.Источник) КАК Источник,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА _.%2 ЕСТЬ NULL
			|			ИЛИ О.Отметка = 0
			|			ИЛИ О.Источник = &Источник
			|				И О.Отметка <= &Отметка
			|			ИЛИ О.Отметка = &Отметка
			|			ТОГДА 0
			|		КОГДА О.Источник = &Источник
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ) КАК Коллизия,
			|	МАКСИМУМ(_.%2 ЕСТЬ NULL) КАК ЭтоНовый,
			|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
			|	ЛОЖЬ КАК Удаление
			|ИЗ
			|	Очередь КАК О
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
			|		ПО (&Ключ = _.%2)
			|ГДЕ 
			|	О.Отметка В
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(Т.Отметка)
			|		ИЗ
			|			Очередь КАК Т)";
			
			Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
				Запрос.УстановитьПараметр("Ключ", Изменения[0][КлючевоеПоле]);
				Запрос.УстановитьПараметр("Отметка", ?(Отметка = Неопределено, Изменения[0]._Отметка, Отметка));
				Блок.УстановитьЗначение(КлючевоеПоле, Изменения[0][КлючевоеПоле]);
			Иначе
				Запрос.УстановитьПараметр("Ключ", Изменения);
				Запрос.УстановитьПараметр("Отметка", ?(Отметка = Неопределено, ТекущаяУниверсальнаяДатаВМиллисекундах(), Отметка));
				Блок.УстановитьЗначение(КлючевоеПоле, Изменения);
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрШаблон(Запрос.Текст,
			Метаданное.ПолноеИмя(),
			КлючевоеПоле,
			?(ТипКлюча = 0, "ОтметкиВремениСсылочныхОбъектов", ?(ТипКлюча <= 2, "ОтметкиВремениРегистровПодчиненных", "ОтметкиВремениРегистровНезависимых")),
			?(ТипКлюча <= 2, "Ключ", "ИдентификаторКлюча"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Объект", ИОМ);
	Запрос.УстановитьПараметр("ТипКлюча", ТипКлюча);
	
	Блокировка.Заблокировать();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Записать изменения.
// 
// Параметры:
//  Изменения Изменения
//  Источник - Неопределено - Источник
Процедура ЗаписатьИзменения(Изменения, Источник = Неопределено) Экспорт
	
	НаборУдаление = Неопределено;
	НаборДобавление = Неопределено;
	
	МаксОтметка = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для Каждого Строка Из Изменения Цикл
		Если ЗначениеЗаполнено(Строка.НоваяОтметка) Тогда
			
			Если НаборДобавление = Неопределено Тогда
				Если Строка.ТипКлюча = 0 Тогда
					НаборДобавление = Регистрысведений.ОтметкиВремениСсылочныхОбъектов.СоздатьНаборЗаписей();
				ИначеЕсли Строка.ТипКлюча <= 2 Тогда
					НаборДобавление = Регистрысведений.ОтметкиВремениРегистровПодчиненных.СоздатьНаборЗаписей();
				Иначе
					НаборДобавление = Регистрысведений.ОтметкиВремениРегистровНезависимых.СоздатьНаборЗаписей();
				КонецЕсли;
				ЗаполнитьРежимЗаписи(НаборДобавление);
			КонецЕсли;
			Запись = НаборДобавление.Добавить();
						
			Запись.Ключ = Строка.Ключ;
			Запись.Объект = Строка.Объект;
			Запись.Источник = Источник;
			Запись.Удаление = Строка.Удаление;
			Запись.Отметка = Строка.НоваяОтметка;
			Запись.Граница = Запись.Отметка;
			
			МаксОтметка = Мин(Запись.Отметка, МаксОтметка);
			
			Если Строка.ТипКлюча = 0 Тогда
			ИначеЕсли Строка.ТипКлюча <= 2 Тогда
				Запись.ТипКлюча = Строка.ТипКлюча;
			Иначе
				Запись.ТипКлюча = Строка.ТипКлюча;
				Запись.КлючСсылка = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(Запись.Ключ);
			КонецЕсли;
				
			Если Строка.Отметка <> Null Тогда
				Если НаборУдаление = Неопределено Тогда
					Если Строка.ТипКлюча = 0 Тогда
						НаборУдаление = Регистрысведений.ОтметкиВремениСсылочныхОбъектов.СоздатьНаборЗаписей();
					ИначеЕсли Строка.ТипКлюча <= 2 Тогда
						НаборУдаление = Регистрысведений.ОтметкиВремениРегистровПодчиненных.СоздатьНаборЗаписей();
						НаборУдаление.Отбор.Объект.Использование = Истина;
						НаборУдаление.Отбор.Объект.Значение = Строка.Объект;
					Иначе
						НаборУдаление = Регистрысведений.ОтметкиВремениРегистровНезависимых.СоздатьНаборЗаписей();
						НаборУдаление.Отбор.Объект.Использование = Истина;
						НаборУдаление.Отбор.Объект.Значение = Строка.Объект;
					КонецЕсли;
					НаборУдаление.Отбор.Ключ.Использование = Истина;
					ЗаполнитьРежимЗаписи(НаборУдаление);
				КонецЕсли;
				НаборУдаление.Отбор.Ключ.Значение = Запись.Ключ;
				НаборУдаление.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Граница = ТекущаяГраница(Истина);
	
	Если НаборДобавление <> Неопределено Тогда
		Для Каждого Запись Из НаборДобавление Цикл
			Если Запись.Отметка <= Граница Тогда
				Запись.Граница = Граница + 1;
			КонецЕсли;
		КонецЦикла;
		
		НаборДобавление.Записать(Ложь);
	КонецЕсли;
				
КонецПроцедуры

// Текущая граница.
// 
// Параметры:
//  ДляИзменения - Булево - Для изменения
//  ДляНовых - Булево - Для новых
// 
// Возвращаемое значение:
//  Число, Произвольный - Текущая граница
Функция ТекущаяГраница(ДляИзменения = Ложь, ДляНовых = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтметкиВремениСсылочныхОбъектов.Граница КАК Граница
		|ИЗ
		|	РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиВремениСсылочныхОбъектов");
	
	ТекстыЗапросов.Добавить("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтметкиВремениРегистровПодчиненных.Граница КАК Граница
		|ИЗ
		|	РегистрСведений.ОтметкиВремениРегистровПодчиненных КАК ОтметкиВремениРегистровПодчиненных");
	
	ТекстыЗапросов.Добавить("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтметкиВремениРегистровНезависимых.Граница
		|ИЗ
		|	РегистрСведений.ОтметкиВремениРегистровНезависимых КАК ОтметкиВремениРегистровНезависимых"
		);

	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") И
		ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту") Тогда
		
		УчетныеЗаписиТекущегоПользователя = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиТекущегоПользователя();
		
		ТекстыЗапросов.Добавить("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОтметкиВремениИзмененияСведенийПисем.Граница
			|ИЗ
			|	РегистрСведений.ОтметкиВремениИзмененияСведенийПисем КАК ОтметкиВремениИзмененияСведенийПисем
			|ГДЕ
			|	ОтметкиВремениИзмененияСведенийПисем.УчетнаяЗапись В (&УчетныеЗаписиТекущегоПользователя)");
		
		Запрос.УстановитьПараметр("УчетныеЗаписиТекущегоПользователя", УчетныеЗаписиТекущегоПользователя);
	
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);

	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "УПОРЯДОЧИТЬ ПО
		|Граница УБЫВ";
	
	Если ДляИзменения Тогда
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Константа.ИспользоватьОтметкиВремени");
		Блокировка.Заблокировать();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка[0]), Выборка[0],
			?(ДляНовых, ТекущаяУниверсальнаяДатаВМиллисекундах()-1, 0));
	КонецЕсли;
	
КонецФункции

// Обновляет границу отметок по объектам из очереди.
// 
Процедура ОбновитьГраницу() Экспорт
	
	РазобратьОчередь(Ложь, Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОчереди

// Обработка очереди. рег задание.
Процедура ОбработкаОчереди() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтметкиВремениОбработка, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазобратьОчередь(Истина);
		
КонецПроцедуры

// Разобрать очередь.
// 
// Параметры:
//  РежимОжидания - Булево - Режим ожидания
//  ТолькоГраницу - Булево - Только границу
Процедура РазобратьОчередь(РежимОжидания = Ложь, ТолькоГраницу = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Граница КАК Граница
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Т.Граница КАК Граница
	|	ИЗ
	|		РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК Т
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Граница УБЫВ) КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Граница
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Т.Граница КАК Граница
	|	ИЗ
	|		РегистрСведений.ОтметкиВремениРегистровПодчиненных КАК Т
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Т.Граница УБЫВ) КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Граница
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Т.Граница КАК Граница
	|	ИЗ
	|		РегистрСведений.ОтметкиВремениРегистровНезависимых КАК Т
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Т.Граница УБЫВ) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Т.Граница), -1) КАК Граница
	|ПОМЕСТИТЬ ГраницыМакс
	|ИЗ
	|	Границы КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Границы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	1 КАК Окно,
	|	Т.Отметка КАК Отметка,
	|	Т.Ключ КАК Ключ,
	|	Т.Объект КАК Объект,
	|	Т.Удаление КАК Удаление,
	|	Т.Источник КАК Источник,
	|	Т.Владелец КАК Владелец,
	|	Т.ТипКлюча КАК ТипКлюча,
	|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
	|	Т.ЗначенияКлюча КАК ЗначенияКлюча,
	|	ВЫБОР КОГДА Т.ТипКлюча = 0 ТОГДА 0 КОГДА Т.ТипКлюча <= 2 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ХранилищеКлюча
	|ПОМЕСТИТЬ Очередь
	|ИЗ
	|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	2,
	|	Т.Отметка,
	|	Т.Ключ,
	|	Т.Объект,
	|	Т.Удаление,
	|	Т.Источник КАК Источник,
	|	Т.Владелец КАК Владелец,
	|	Т.ТипКлюча,
	|	Т.ИдентификаторКлюча,
	|	Т.ЗначенияКлюча,
	|	ВЫБОР КОГДА Т.ТипКлюча = 0 ТОГДА 0 КОГДА Т.ТипКлюча <= 2 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ
	|ИЗ
	|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	3,
	|	Т.Отметка,
	|	Т.Ключ,
	|	Т.Объект,
	|	Т.Удаление,
	|	Т.Источник КАК Источник,
	|	Т.Владелец КАК Владелец,
	|	Т.ТипКлюча,
	|	Т.ИдентификаторКлюча,
	|	Т.ЗначенияКлюча,
	|	ВЫБОР КОГДА Т.ТипКлюча = 0 ТОГДА 0 КОГДА Т.ТипКлюча <= 2 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ
	|ИЗ
	|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
	|;
	|
	|ВЫБРАТЬ
	|	Т.Окно КАК Окно,
	|	Т.Отметка КАК Отметка,
	|	ВЫБОР
	|		КОГДА Границы.Граница >= Т.Отметка
	|			ТОГДА Границы.Граница + 1
	|		ИНАЧЕ Т.Отметка
	|	КОНЕЦ КАК Граница,
	|	Т.Ключ КАК Ключ,
	|	Т.Объект КАК Объект,
	|	Т.Удаление КАК Удаление,
	|	Т.Источник КАК Источник,
	|	Т.Владелец КАК Владелец,
	|	Т.ТипКлюча КАК ТипКлюча,
	|	Т.ЗначенияКлюча КАК ЗначенияКлюча,
	|	СсылочныхОбъектов.Отметка ЕСТЬ NULL И РегистровПодчиненных.Отметка ЕСТЬ NULL И РегистровНезависимых.Отметка ЕСТЬ NULL КАК ОбновитьГраницу
	|ИЗ
	|	Очередь КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК СсылочныхОбъектов
	|		ПО Т.ХранилищеКлюча = 0
	|			И Т.Ключ = СсылочныхОбъектов.Ключ
	|			И Т.Отметка <= СсылочныхОбъектов.Отметка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровПодчиненных КАК РегистровПодчиненных
	|		ПО Т.ХранилищеКлюча = 1
	|			И Т.Ключ = РегистровПодчиненных.Ключ
	|			И Т.Объект = РегистровПодчиненных.Объект
	|			И Т.Отметка <= РегистровПодчиненных.Отметка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровНезависимых КАК РегистровНезависимых
	|		ПО Т.ХранилищеКлюча = 2
	|			И Т.ИдентификаторКлюча = РегистровНезависимых.Ключ
	|			И Т.Объект = РегистровНезависимых.Объект
	|			И Т.Отметка <= РегистровНезависимых.Отметка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГраницыМакс КАК Границы
	|		ПО (ИСТИНА)
	|
	|//ГДЕ	СсылочныхОбъектов.Отметка ЕСТЬ NULL И РегистровПодчиненных.Отметка ЕСТЬ NULL И РегистровНезависимых.Отметка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отметка,
	|	Удаление УБЫВ");
		
	ВремяПерерыва = Неопределено;
	ОтметкиВремениСсылочныхОбъектов = Неопределено;
	ОтметкиВремениРегистровНезависимых = Неопределено;
	ОтметкиВремениРегистровПодчиненных = Неопределено;
	ОкнаОчереди = Неопределено;
	СостояниеОчереди = 2;
	
	Если ТолькоГраницу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ", "ГДЕ");
	КонецЕсли;
	
	Пока СостояниеОчереди >= 1 Цикл
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Константа.ИспользоватьОтметкиВремени");
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			Очередь = Запрос.Выполнить().Выгрузить();
				
			Если Очередь.Количество() Тогда
				
				Для Каждого Очередность Из Очередь Цикл
					
					Если Очередность.ОбновитьГраницу = Ложь Тогда
						Продолжить;
						
					ИначеЕсли Очередность.ТипКлюча = 0 Тогда
						Если ОтметкиВремениСсылочныхОбъектов = Неопределено Тогда
							ОтметкиВремениСсылочныхОбъектов = РегистрыСведений.ОтметкиВремениСсылочныхОбъектов.СоздатьНаборЗаписей();
							ОтметкиВремениСсылочныхОбъектов.Отбор.Ключ.Использование = Истина;
							ОтметкиВремениСсылочныхОбъектов.Добавить();
							ЗаполнитьРежимЗаписи(ОтметкиВремениСсылочныхОбъектов);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтметкиВремениСсылочныхОбъектов[0], Очередность);
						//Поддержка старого формата на переходный период.
						ОтметкиВремениСсылочныхОбъектов[0].УдалитьОтметка = 
							Формат(Дата(1, 1, 1) + Цел(ОтметкиВремениСсылочныхОбъектов[0].Отметка / 1000), "ДФ=yyyyMMddHHmmss")
							+ Формат(ОтметкиВремениСсылочныхОбъектов[0].Отметка % 1000, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
							
						ОтметкиВремениСсылочныхОбъектов.Отбор.Ключ.Значение = Очередность.Ключ;
						ОтметкиВремениСсылочныхОбъектов.Записать();
						
					ИначеЕсли Очередность.ТипКлюча <= 2 Тогда
						Если ОтметкиВремениРегистровПодчиненных = Неопределено Тогда
							ОтметкиВремениРегистровПодчиненных = РегистрыСведений.ОтметкиВремениРегистровПодчиненных.СоздатьНаборЗаписей();
							ОтметкиВремениРегистровПодчиненных.Отбор.Ключ.Использование = Истина;
							ОтметкиВремениРегистровПодчиненных.Отбор.Объект.Использование = Истина;
							ОтметкиВремениРегистровПодчиненных.Добавить();
							ЗаполнитьРежимЗаписи(ОтметкиВремениРегистровПодчиненных);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтметкиВремениРегистровПодчиненных[0], Очередность);
						ОтметкиВремениРегистровПодчиненных.Отбор.Ключ.Значение = Очередность.Ключ;
						ОтметкиВремениРегистровПодчиненных.Отбор.Объект.Значение = Очередность.Объект;
						ОтметкиВремениРегистровПодчиненных.Записать();
									
					Иначе
						Если ОтметкиВремениРегистровНезависимых = Неопределено Тогда
							ОтметкиВремениРегистровНезависимых = РегистрыСведений.ОтметкиВремениРегистровНезависимых.СоздатьНаборЗаписей();
							ОтметкиВремениРегистровНезависимых.Отбор.Ключ.Использование = Истина;
							ОтметкиВремениРегистровНезависимых.Отбор.Объект.Использование = Истина;
							ОтметкиВремениРегистровНезависимых.Добавить();
							ЗаполнитьРежимЗаписи(ОтметкиВремениРегистровНезависимых);
						КонецЕсли;
						
						Запись = ОтметкиВремениРегистровНезависимых[0];
						ЗаполнитьЗначенияСвойств(Запись, Очередность);
						Запись.КлючСсылка = Очередность.Ключ;
						Запись.Ключ = Очередность.Ключ.УникальныйИдентификатор();
						ОтметкиВремениРегистровНезависимых.Отбор.Ключ.Значение = Запись.Ключ;
						ОтметкиВремениРегистровНезависимых.Отбор.Объект.Значение = Запись.Объект;
						ОтметкиВремениРегистровНезависимых.Записать();
						
					КонецЕсли;
				КонецЦикла;
				
				СостояниеОчереди = 2;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
						
		КонецПопытки;
		
		Если Очередь.Количество() < 100 Тогда
			Если ТолькоГраницу Тогда
				Прервать;
			КонецЕсли;
			СостояниеОчереди = СостояниеОчереди - 1;
			Если Не РежимОжидания Тогда
				СостояниеОчереди = СостояниеОчереди - 1;
			КонецЕсли;
		КонецЕсли;
				
		Пока Не ТолькоГраницу И Очередь.Количество() Цикл
			
			Если ОкнаОчереди = Неопределено Тогда
				ОкнаОчереди = Новый Массив(4);
			КонецЕсли;
				
			НачатьТранзакцию();
			
			Попытка
				
				Для Н = 1 По Мин(10, Очередь.Количество()) Цикл
					Очередность = Очередь[0];
					
					Набор = ОкнаОчереди[Очередность.Окно];
					Если Набор = Неопределено Тогда
						Набор = РегистрыСведений["ОтметкиВремениОчередь" + Очередность.Окно].СоздатьНаборЗаписей();
						Для Каждого Поле Из Набор.Отбор Цикл
							Поле.Использование = Истина;
						КонецЦикла;
					    ЗаполнитьРежимЗаписи(Набор);
						ОкнаОчереди[Очередность.Окно] = Набор;
					КонецЕсли;
					
					Отбор = Набор.Отбор;
					Отбор.Отметка.Значение = Очередность.Отметка;
					Отбор.Ключ.Значение = Очередность.Ключ;
					Отбор.Объект.Значение = Очередность.Объект;
					
					Набор.Записать();
					
					Очередь.Удалить(Очередность);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОтметкиВремени.Обработка'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЦикла;
				
		Если РежимОжидания Тогда
			Если ВремяПерерыва = Неопределено Тогда
				ВремяПерерыва = ТекущаяУниверсальнаяДата() + 3600;
			КонецЕсли;	
			Если ТекущаяУниверсальнаяДата() >= ВремяПерерыва Тогда
				Прервать;
			КонецЕсли;
			Если СостояниеОчереди = 1 Тогда
				Пауза(3);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Набор = Неопределено;
	ОтметкиВремениСсылочныхОбъектов = Неопределено;
	ОтметкиВремениРегистровНезависимых = Неопределено;
	ОтметкиВремениРегистровПодчиненных = Неопределено;
	Если Очередь <> Неопределено Тогда
		Очередь.Очистить();
	КонецЕсли;
	Если ОкнаОчереди <> Неопределено Тогда
		ОкнаОчереди.Очистить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Записывает отметку времени при записи объекта.
//
// Параметры:
//   Объект - Произвольный - записываемый объект.
//   КлассОбъекта - Строка - "СсылочныйОбъект", "НаборЗаписей", "УдалениеОбъекта".
//   Источник - ОпределяемыйТип.ИсточникиОтметокВремени - источник, соответствующий отправителю.
//   ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени - отметка времени записываемых данных для установки.
//
Процедура ПриЗаписиОбъекта(Объект, КлассОбъекта,
	Знач Источник = Неопределено, Знач ОтметкаВремени = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим источник и отметку времени из дополнительных свойств, если они не переданы явно.
	ВозможныДополнительныеСвойства =
		КлассОбъекта <> "УдалениеОбъекта"
		И СтрНайти(XMLТип(ТипЗнч(Объект)).ИмяТипа, "Ref.") = 0;
	Если ВозможныДополнительныеСвойства Тогда
		Если Источник = Неопределено
			И Объект.ДополнительныеСвойства.Свойство("Источник") Тогда
			Источник = Объект.ДополнительныеСвойства.Источник;
		КонецЕсли;
		Если ОтметкаВремени = Неопределено
			И Объект.ДополнительныеСвойства.Свойство("ОтметкаВремени") Тогда
			ОтметкаВремени = Объект.ДополнительныеСвойства.ОтметкаВремени;
		КонецЕсли;
	КонецЕсли;
	
	РегистрируемыеДанные = ?(КлассОбъекта = "УдалениеОбъекта"
		Или СтрНайти(XMLТип(ТипЗнч(Объект)).ИмяТипа, "Object.") <> 0,
		Объект.Ссылка,
		Объект);
	ИдентификаторОбъектаМетаданных = Неопределено;
	Ключ = Неопределено;
	Установить(РегистрируемыеДанные, ОтметкаВремени);
	
КонецПроцедуры

// Возвращает текущую отметку времени строкой, совместимой с определяемым типом ОтметкаВремени.
//
Функция Текущая() Экспорт
	
	ОтметкаЧислом = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОтметкаДатой = Дата(1, 1, 1) + Цел(ОтметкаЧислом / 1000);
	Миллисекунд = ОтметкаЧислом % 1000;
	
	Текущая = Формат(ОтметкаДатой, "ДФ=yyyyMMddHHmmss")
		+ Формат(Миллисекунд, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
		
	Возврат Текущая;
	
КонецФункции

// Добавляет запись с текущей отметкой времени в соответствующий данным регистр сведений.
//
// Параметры:
//   Данные - ЛюбаяСсылка - данные, для которых следует установить
//     отметку времени.
//   ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени - устанавливаемая отметка. Если не указана, 
//     используется текущая.
//
Процедура Установить(Данные, ОтметкаВремени = Неопределено) Экспорт
	
	Если ОтметкаВремени = Неопределено Тогда
		ОтметкаВремени = Текущая();
	КонецЕсли;
	
	РегистрыСведений.ОтметкиВремениСсылочныхОбъектов.УстановитьОтметкуВремени(
		Данные,
		ОтметкаВремени);
	
КонецПроцедуры

// Возвращает отметку времени по дате.
//
// Параметры:
//   Дата - Дата - дата и время в часовом поясе сеанса.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОтметкаВремени - отметка времени, соответствующая дате.
//
Функция ОтметкаВремениПоДате(Дата) Экспорт
	
	УниверсальнаяДата = УниверсальноеВремя(Дата, ЧасовойПоясСеанса());
	ОтметкаВремени = ОтметкаВремениПоУниверсальнойДате(УниверсальнаяДата);
		
	Возврат ОтметкаВремени;
	
КонецФункции

// Возвращает отметку времени по дате.
//
// Параметры:
//   Дата - Дата - универсальные дата и время.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОтметкаВремени - отметка времени, соответствующая дате.
//
Функция ОтметкаВремениПоУниверсальнойДате(УниверсальнаяДата) Экспорт
	
	ОтметкаВремени = Формат(УниверсальнаяДата, "ДФ=yyyyMMddHHmmss") + "000";
		
	Возврат ОтметкаВремени;
	
КонецФункции

// Возвращает отметку времени по дате.
//
// Параметры:
//   УниверсальнаяДатаВМиллисекундах - Число - универсальная дата в миллисекундах.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОтметкаВремени - отметка времени, соответствующая универсальной дате в миллисекундах.
//
Функция ОтметкаВремениПоУниверсальнойДатеВМиллисекундах(УниверсальнаяДатаВМиллисекундах) Экспорт
	
	ОтметкаДатой = Дата(1, 1, 1) + Цел(УниверсальнаяДатаВМиллисекундах / 1000);
	Миллисекунд = УниверсальнаяДатаВМиллисекундах % 1000;
	
	ОтметкаВремени = Формат(ОтметкаДатой, "ДФ=yyyyMMddHHmmss")
		+ Формат(Миллисекунд, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
		
	Возврат ОтметкаВремени;
	
КонецФункции

// Возвращает дату, соответствующую отметке времени.
//
// Параметры:
//   ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени - отметка времени.
//
// Возвращаемое значение:
//   Дата - дата и время в часовом поясе сеанса.
//
Функция ДатаПоОтметкеВремени(ОтметкаВремени) Экспорт
	
	УниверсальнаяДата = УниверсальнаяДатаПоОтметкеВремени(ОтметкаВремени);
	РазностьДат = ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата();
	Дата = УниверсальнаяДата + РазностьДат;
	
	Возврат Дата;
	
КонецФункции

// Возвращает универсальную дату, соответствующую отметке времени.
//
// Параметры:
//   ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени - отметка времени.
//
// Возвращаемое значение:
//   Дата - универсальные дата и время.
//
Функция УниверсальнаяДатаПоОтметкеВремени(ОтметкаВремени) Экспорт
	
	Год = Число(Лев(ОтметкаВремени, 4));
	Месяц = Число(Сред(ОтметкаВремени, 5, 2));
	День = Число(Сред(ОтметкаВремени, 7, 2));
	Час = Число(Сред(ОтметкаВремени, 9, 2));
	Минута = Число(Сред(ОтметкаВремени, 11, 2));
	Секунда = Число(Сред(ОтметкаВремени, 13, 2));
	УниверсальнаяДата = Дата(Год, Месяц, День, Час, Минута, Секунда);
	
	Возврат УниверсальнаяДата;
	
КонецФункции

Процедура ЗаблокироватьНовыеИзменения() Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ОтметкиВремениОчередь1");
	Блокировка.Добавить("РегистрСведений.ОтметкиВремениОчередь2");
	Блокировка.Добавить("РегистрСведений.ОтметкиВремениОчередь3");
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Содержит объект.
// 
// Параметры:
//  ОбъектМетаданных Объект метаданных
// 
// Возвращаемое значение:
//  Булево - Содержит объект
Функция СодержитОбъект(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат Метаданные.ОпределяемыеТипы.ОтметкиВремениКонстанты.Тип.СодержитТип(
			Тип("КонстантаМенеджерЗначения." + ОбъектМетаданных.Имя));
	КонецЕсли;
	
	Для Каждого Поле Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Поле.Имя = "ИмяПредопределенныхДанных" Или Поле.Имя = "Ссылка" Тогда
			Возврат Метаданные.ОпределяемыеТипы.ОтметкиВремениСсылочныеОбъекты.Тип.СодержитТип(
				Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Объект.")));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Метаданные.ОпределяемыеТипы.ОтметкиВремениРегистры.Тип.СодержитТип(
				Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "НаборЗаписей.")));
	
КонецФункции

// Заполнить режим записи.
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписейИмяРегистраСведений, РегистрСведенийНаборЗаписей.ОтметкиВремениРегистровПодчиненных, РегистрСведенийНаборЗаписей.ОтметкиВремениРегистровНезависимых, РегистрСведенийНаборЗаписей.ОтметкиВремениСсылочныхОбъектов - Источник
Процедура ЗаполнитьРежимЗаписи(Источник) Экспорт
	
	Источник.ОбменДанными.Загрузка = Истина;
	Источник.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Источник.ДополнительныеСвойства.Вставить("ПереходОтключитьМеханизмРегистрации");
		
КонецПроцедуры

// Ключевое поле источника.
// 
// Параметры:
//  Объект Объект
//  ТипКлюча Тип ключа
// 
// Возвращаемое значение:
//  Строка - Ключевое поле источника
Функция КлючевоеПолеИсточника(Объект, ТипКлюча) Экспорт
	
	Если ТипКлюча = 0 Тогда
		Возврат "Ссылка";
		
	ИначеЕсли ТипКлюча = 1 Тогда
		Возврат "Регистратор";
		
	ИначеЕсли ТипКлюча = 2 Тогда
		//Первое ссылочное измерение.
		Возврат ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект).Измерения[0].Имя;
					
	ИначеЕсли ТипКлюча = 3 Тогда
		Возврат "ОтметкиВремениИдентификаторНабораЗаписей";
		
	ИначеЕсли ТипКлюча = 4 Тогда
		//Нет ключа. Ошибочно.
		Возврат "-";
		
	ИначеЕсли ТипКлюча = 9 Тогда
		// Константа
		Возврат "";
		
	Иначе //Если ТипКлюча = 8 Тогда
		//Регистр без ключей.
		Возврат "*";
		
	КонецЕсли;
	
КонецФункции

// Значения ключа.
// 
// Параметры:
//  Хранилище - Произвольный - Хранилище
// 
// Возвращаемое значение:
//  Структура, Неопределено - Значения ключа
Функция ЗначенияКлюча(Хранилище) Экспорт
	
	Попытка
		Отбор = Хранилище.Получить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Отбор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значения = Новый Структура(); 
	
	Для Каждого Поле Из Отбор Цикл
		Если Поле.Использование Тогда
			Значения.Вставить(Поле.Имя, Поле.Значение);
		КонецЕсли;
	КонецЦикла;
	Отбор = Неопределено;
	
	Возврат Значения;
	
КонецФункции

// Тип ключа объекта.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных, Произвольный, Неопределено, Null - Метаданное
// 
// Возвращаемое значение:
//  Число - Тип ключа объекта
Функция ТипКлючаОбъекта(Метаданное, РеквизитКлюча = Неопределено) Экспорт
	
	Если Метаданные.Константы.Содержит(Метаданное) Тогда
		РеквизитКлюча = Метаданное;
		Возврат 9;
	КонецЕсли;
	
	Для Каждого Реквизит Из Метаданное.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "ИмяПредопределенныхДанных" Или Реквизит.Имя = "Ссылка" Тогда
			РеквизитКлюча = Метаданное.СтандартныеРеквизиты.Ссылка;
			Возврат 0;
		ИначеЕсли Реквизит.Имя = "Регистратор" Тогда
			РеквизитКлюча = Реквизит;
			Возврат 1;
		ИначеЕсли Реквизит.Имя = "Период" Тогда
			ЕстьПериод = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитКлюча = Неопределено;
	
	Если Метаданное.Измерения.Количество() = 0 И ЕстьПериод <> Истина Тогда
		Возврат 8;
	КонецЕсли;
	
	Поле = Метаданные.ОбщиеРеквизиты.ОтметкиВремениИдентификаторНабораЗаписей.Состав.Найти(Метаданное);
	Если Поле <> Неопределено
		И Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
		РеквизитКлюча = Метаданные.ОбщиеРеквизиты.ОтметкиВремениИдентификаторНабораЗаписей;
		Возврат 3;
	КонецЕсли;
		
	Если Метаданное.Измерения.Количество() = 1 И ЕстьПериод <> Истина Тогда
		Если ЭтоСсылочныйТипЗначения(Метаданное.Измерения[0].Тип) Тогда
			РеквизитКлюча = Метаданное.Измерения[0];
			Возврат 2;
		Иначе
			Возврат 4; //Без идентификатора изменений. Допустимо только для загрузки.
		КонецЕсли;
	КонецЕсли;
		
	Если Метаданное.Измерения.Количество() = 0 Тогда
		Возврат 4;
	КонецЕсли;
	
	Для Н = 1 По Метаданное.Измерения.Количество() - 1 Цикл
		Если Метаданное.Измерения[Н].ОсновнойОтбор Тогда
			Возврат 4;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоСсылочныйТипЗначения(Метаданное.Измерения[0].Тип)
		И (ЕстьПериод <> Истина Или Не Метаданное.ОсновнойОтборПоПериоду) Тогда
		РеквизитКлюча = Метаданное.Измерения[0];
		Возврат 2; //Первое измерение ключевое.
	Иначе
		Возврат 4;
	КонецЕсли;
				
КонецФункции

// Это ссылочный тип значения.
// 
// Параметры:
//  ОписаниеТипа Описание типа
// 
// Возвращаемое значение:
//  Булево - Это ссылочный тип значения
Функция ЭтоСсылочныйТипЗначения(ОписаниеТипа)
	
	Для Каждого Тип Из ОписаниеТипа.Типы() Цикл
		Если Найти(XMLТип(Тип).ИмяТипа, ".") = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

// Пауза.
// 
// Параметры:
//  Секунд - Число - Секунд
Процедура Пауза(Секунд) Экспорт
	
	Окончание = Секунд * 1000 + ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < Окончание Цикл
	КонецЦикла;
	
КонецПроцедуры

// Ошибка типизации.
// 
// Параметры:
//  ИмяПоля - Строка, Неопределено - Имя поля
//  Значение - Произвольный - Значение
//  Метаданное - ОбъектМетаданных, Произвольный, Неопределено, Null - Метаданное
Процедура ОшибкаТипизации(ИмяПоля, Значение, Метаданное) Экспорт
	
	Причина = СтрШаблон("%1 ""%3"" %2 ""%4"" (%5)",
		НСтр("ru = 'Неактуальный тип значения'"),
		НСтр("ru = 'поле'"),
		ТипЗнч(Значение),
		ИмяПоля, Метаданное.ПолноеИмя());
	ВызватьИсключение Причина;
	
КонецПроцедуры

// Преобразует дату в дату в миллисекундах.
//
// Параметры:
//  Дата - Число - Дата.
//  БазоваяДата - Дата - Базовая дата.
//  БазоваяДатаВМиллисекундах - Число - Базовая дата в миллисекундах.
// 
// Возвращаемое значение:
//  Число - Дата в миллисекундах.
//
Функция ДатаВДатуВМиллисекундах(Дата, Знач БазоваяДата = Неопределено, БазоваяДатаВМиллисекундах = 0) Экспорт
	
	Если БазоваяДата = Неопределено Тогда
		БазоваяДата = Дата(1, 1, 1);
	КонецЕсли;
	
	ДатаВМиллисекундах = (Дата - БазоваяДата) * 1000 + БазоваяДатаВМиллисекундах;
	
	Возврат ДатаВМиллисекундах;
	
КонецФункции

#КонецОбласти
