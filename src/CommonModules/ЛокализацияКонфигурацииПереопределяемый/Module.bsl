#Область ПрограммныйИнтерфейс

// Вызывается при первом запуске. Служит для первоначального наполнения информационной базы.
//
Процедура ПервыйЗапуск() Экспорт
	
	
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры

// Вызвается при определении представления типа для указанного пользователя.
//
// Параметры:
//   Тип - Тип - тип, представление которого следует определить.
//   Пользователь - СправочникСсылка.Пользователи - пользователь, которому нужно представление.
//   Представление - Строка - локализованное для пользователя представление, или
//                 - Неопределено - признак стандартной обработки.
//
Процедура ПриОпределенииПредставленияТипаДляПользователя(Тип, Пользователь, Представление) Экспорт
	
	
	
КонецПроцедуры

// Вызвается при определении кода языка исполнителя задачи. Позволяет переопределить стандартное
// поведение.
//
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача, для которой определяется код языка.
//   КодЯзыка - Строка - переопределенный код языка, или
//            - Неопределено - признак необходимости выполнить стандартное определение.
//
Процедура ПриОпределенииКодаЯзыкаИсполнителяЗадачи(Задача, КодЯзыка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при обновлении на 2.1.1.1 и дает локализованные наименования справочнику "Уровни доступа".
//
Процедура ПерейтиНаВерсию_2_1_1_1() Экспорт
	
	ОбновитьПредопределенныйЭлемент(Справочники.УровниДоступа.Регистрация,
		"Наименование",
		НСтр("ru = 'Регистрация'"));

	ОбновитьПредопределенныйЭлемент(Справочники.УровниДоступа.Редактирование,
		"Наименование",
		НСтр("ru = 'Редактирование'"));

	ОбновитьПредопределенныйЭлемент(Справочники.УровниДоступа.Чтение,
		"Наименование",
		НСтр("ru = 'Чтение'"));

КонецПроцедуры

// Вызывается при обновлении на 2.1.6.1 и корректирует перевод термина "Организация".
//
Процедура ПерейтиНаВерсию_2_1_6_1() Экспорт
	
	Справочники.АдреснаяКнига.ОбновитьСпискиАвтоподстановок();
	
	ОбновитьПредопределенныйЭлемент(ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Организация,
		"Наименование",
		НСтр("ru = 'Организация'"));
		
	ОбновитьПредопределенныйЭлемент(ПланыВидовХарактеристик.ВидыДоступа.Организации,
		"Наименование",
		НСтр("ru = 'Организации'"));

	ОбновитьПредопределенныйЭлемент(Справочники.ВидыКонтактнойИнформации.СправочникОрганизации,
		"Наименование",
		НСтр("ru = 'Контактная информация справочника ""Организации""'"));

	ОбновитьПредопределенныйЭлемент(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_БанковскиеСчетаОрганизации,
		"Наименование",
		НСтр("ru = 'Доп. свойства справочника ""Банковские счета"" (организации)'"));
		
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.СодержитСсылкуНаИнтегрированныйОбъект,
		"Наименование",
		НСтр("ru = 'Содержит ссылку на'"));

	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.ПеренаправлениеПисьма,
		"Наименование",
		НСтр("ru = 'Перенаправление письма'"));

	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.ПеренаправленоПисьмом,
		"Наименование",
		НСтр("ru = 'Перенаправлено письмом'"));

КонецПроцедуры

// Вызывается при обновлении на 2.1.7.9 и дает локализованные наименования новым предопределенным элементам данных.
//
Процедура ПерейтиНаВерсию_2_1_7_9() Экспорт
	
	ОбновитьПредопределенныйЭлемент(ПланыВидовХарактеристик.ВидыДоступа.Подразделения,
		"Наименование",
		НСтр("ru = 'Подразделения'"));

КонецПроцедуры

// Вызывается при обновлении на 2.1.8.11 и дает локализованные наименования новым предопределенным элементам данных.
//
Процедура ПерейтиНаВерсию_2_1_8_11() Экспорт
	
	// Справочники.НаименованияСторон.

	ОбновитьПредопределенныйЭлемент(Справочники.НаименованияСторон.Заказчик,
		"Наименование",
		НСтр("ru = 'Заказчик'"));

	ОбновитьПредопределенныйЭлемент(Справочники.НаименованияСторон.Исполнитель,
		"Наименование",
		НСтр("ru = 'Исполнитель'"));

	ОбновитьПредопределенныйЭлемент(Справочники.НаименованияСторон.Покупатель,
		"Наименование",
		НСтр("ru = 'Покупатель'"));

	ОбновитьПредопределенныйЭлемент(Справочники.НаименованияСторон.Продавец,
		"Наименование",
		НСтр("ru = 'Продавец'"));

КонецПроцедуры

// Вызывается при обновлении на 2.1.13.23 и дает локализованные наименования новым предопределенным элементам данных.
//
Процедура ПерейтиНаВерсию_2_1_13_24() Экспорт
	
	ОбновитьПредопределенныйЭлемент(Справочники.ВидыБизнесСобытий.ИзменениеСостоянияДокументаПоЭДО,
		"Наименование",
		НСтр("ru = 'Изменение состояния документа по ЭДО'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ИсточникиДанных.ЭДО,
		"Наименование",
		НСтр("ru = 'ЭДО'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ИсточникиДанных.УстановкаТиповойМетодики,
		"Наименование",
		НСтр("ru = 'Установка типовой методики'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ИсточникиДанных.СВД,
		"Наименование",
		НСтр("ru = 'СВД'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ИсточникиДанных.ЗагрузкаИз1САрхив,
		"Наименование",
		НСтр("ru = 'Загрузка из ""1С:Архив""'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.КатегорииОтчетов.ЭДО,
		"Наименование",
		НСтр("ru = 'ЭДО'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу,
		"Наименование",
		НСтр("ru = 'Переадресован документом по вопросу'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.ПереадресацияДокументаПоВопросу,
		"Наименование",
		НСтр("ru = 'Переадресация документа по вопросу'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.КорректировкаК,
		"Наименование",
		НСтр("ru = 'Корректировка к'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.ИсправлениеК,
		"Наименование",
		НСтр("ru = 'Исправление к'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.Корректировка,
		"Наименование",
		НСтр("ru = 'Корректировка'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ТипыСвязей.Исправление,
		"Наименование",
		НСтр("ru = 'Исправление'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныИсполнения.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныКомплексныхБизнесПроцессов.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныОзнакомления.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныПриглашения.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныРассмотрения.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныРегистрации.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныСогласования.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныСоставныхБизнесПроцессов.ОбработкаВходящегоДокументаПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныСоставныхБизнесПроцессов.ОбработкаИсходящегоДокументаПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныСоставныхБизнесПроцессов.ОбработкаВнутреннегоДокументаПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
	ОбновитьПредопределенныйЭлемент(Справочники.ШаблоныСогласования.ПоУмолчанию,
		"Наименование",
		НСтр("ru = 'По умолчанию'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет реквизиты предопределенного элемента (необходимо для локализации).
//
Процедура ОбновитьПредопределенныйЭлемент(ПредопределенныйЭлемент, 
	ИмяРеквизита1 = Неопределено, ЗначениеРеквизита1 = Неопределено,
	ИмяРеквизита2 = Неопределено, ЗначениеРеквизита2 = Неопределено,
	ИмяРеквизита3 = Неопределено, ЗначениеРеквизита3 = Неопределено)
	
	Элемент = ПредопределенныйЭлемент.ПолучитьОбъект();
	
	НужнаЗапись = Ложь;
	
	Если ИмяРеквизита1 <> Неопределено
		И ЗначениеЗаполнено(ЗначениеРеквизита1) Тогда
		Если Элемент[ИмяРеквизита1] <> ЗначениеРеквизита1 Тогда
			Элемент[ИмяРеквизита1] = ЗначениеРеквизита1;
			НужнаЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРеквизита2 <> Неопределено
		И ЗначениеЗаполнено(ЗначениеРеквизита2)  Тогда
		Если Элемент[ИмяРеквизита2] <> ЗначениеРеквизита2 Тогда
			Элемент[ИмяРеквизита2] = ЗначениеРеквизита2;
			НужнаЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРеквизита3 <> Неопределено
		И ЗначениеЗаполнено(ЗначениеРеквизита3) Тогда
		Если Элемент[ИмяРеквизита3] <> ЗначениеРеквизита3 Тогда
			Элемент[ИмяРеквизита3] = ЗначениеРеквизита3;
			НужнаЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаЗапись Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти