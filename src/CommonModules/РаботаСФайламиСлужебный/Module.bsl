///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
//
// Параметры:
//   Объекты - см. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.Объекты
//
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.Файлы);
	
КонецПроцедуры

// См. ПоискИУдалениеДублей.ТипыИсключаемыеИзВозможныхДублей
Процедура ПриДобавленииТиповИсключаемыхИзВозможныхДублей(ИсключаемыеТипы) Экспорт

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ИсключаемыеТипы, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы());

КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
//
// Параметры:
//  Объекты - Массив из ОбъектМетаданных
//
Процедура ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.ПапкиФайлов);
	
КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ.
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт

КонецПроцедуры

// См. УдалениеПомеченныхОбъектовСлужебный.ЭтоТехническийОбъект
Функция ЭтоТехническийОбъект(ПолноеИмяОбъекта) Экспорт
	Возврат ПолноеИмяОбъекта = ВРег(Метаданные.Справочники.ВерсииФайлов.ПолноеИмя());
КонецФункции

// См. ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы
Процедура ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый) Экспорт

КонецПроцедуры

// Считаем ДействиеПоДвойномуЩелчкуМыши - если первый раз - поставим правильное значение.
//
// Возвращаемое значение:
//   Строка - действие по двойному щелчку мыши.
//
Функция ДействиеПоДвойномуЩелчкуМыши()
	
	КакОткрывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	
	Если КакОткрывать = Неопределено
	 ИЛИ КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ПустаяСсылка() Тогда
		
		КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	КонецЕсли;
	
	Если КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл Тогда
		Возврат "ОткрыватьФайл";
	Иначе
		Возврат "ОткрыватьКарточку";
	КонецЕсли;
	
КонецФункции

// Считаем из настроек СпособСравненияВерсийФайлов.
//
// Возвращаемое значение:
//   Строка - способ сравнения версий файлов.
//
Функция СпособСравненияВерсийФайлов()
	
	СпособСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов");
	
	Если СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord Тогда
		Возврат "MicrosoftOfficeWord";
		
	ИначеЕсли СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.OpenOfficeOrgWriter Тогда
		Возврат "OpenOfficeOrgWriter";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает настройку - Спрашивать режим редактирования при открытии файла.
// Возвращаемое значение:
//   Булево - Спрашивать режим редактирования при открытии файла.
//
Функция СпрашиватьРежимРедактированияПриОткрытииФайла()
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	Возврат СпрашиватьРежимРедактированияПриОткрытииФайла;
КонецФункции

// Возвращает настройку -  режим при открытии файла: просмотр или редактирование.
//
// Возвращаемое значение:
//   Строка - режим при открытии файла. Варианты: "Просмотр", "Редактирование".
//
Функция ВариантОткрытияФайла()
	
	ВариантОткрытияФайла = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ВариантОткрытияФайла");
	Если ВариантОткрытияФайла = Неопределено Тогда
		ВариантОткрытияФайла = "Открыть";
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "ВариантОткрытияФайла", ВариантОткрытияФайла);
	КонецЕсли;
	
	Возврат ВариантОткрытияФайла;
КонецФункции

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
КонецПроцедуры

// Получает значение настройки  ПоказыватьКолонкуРазмер.
// Возвращаемое значение:
//   Булево - Показывать колонку размер.
//
Функция ПолучитьПоказыватьКолонкуРазмер() Экспорт
	ПоказыватьКолонкуРазмер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	КонецЕсли;
	
	Возврат ПоказыватьКолонкуРазмер;
	
КонецФункции

// Процедура добавляет настройки специфичные для подсистемы Работа с файлами.
//
// Параметры:
//  ОбщиеНастройки        - Структура - настройки общие для всех пользователей.
//  ПерсональныеНастройки - Структура - настройки различные для разных пользователей.
//  
Процедура ДобавитьНастройкиРаботыСФайлами(ОбщиеНастройки, ПерсональныеНастройки) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ПерсональныеНастройки.Вставить("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши());
	ПерсональныеНастройки.Вставить("СпособСравненияВерсийФайлов",  СпособСравненияВерсийФайлов());
	
	ПерсональныеНастройки.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла",
		СпрашиватьРежимРедактированияПриОткрытииФайла());
	ПерсональныеНастройки.Вставить("ВариантОткрытияФайла", ВариантОткрытияФайла());	
	
	ПерсональныеНастройки.Вставить("ЭтоПолноправныйПользователь",
		Пользователи.ЭтоПолноправныйПользователь(,, Ложь));
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы",
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
			ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	КонецЕсли;
	
	ПерсональныеНастройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
		
	ПерсональныеНастройки.Вставить("ПоказыватьКолонкуРазмер", ПолучитьПоказыватьКолонкуРазмер());	
		
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	ПерсональныеНастройки.Вставить("ИспользоватьImageMagickДляРаспознаванияPDF", ИспользоватьImageMagickДляРаспознаванияPDF);
	
	ПерсональныеНастройки.Вставить("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());

	ОчищатьПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ОчищатьПриЗавершенииРаботы");
	Если ОчищатьПриЗавершенииРаботы = Неопределено Тогда
		ОчищатьПриЗавершенииРаботы = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКэшФайлов", "ОчищатьПриЗавершенииРаботы", ОчищатьПриЗавершенииРаботы);
	КонецЕсли;
	ПерсональныеНастройки.Вставить("ОчищатьПриЗавершенииРаботы", ОчищатьПриЗавершенииРаботы);
	
	ПерсональныеНастройки.Вставить("ЕстьИспользованныеШаблоны", РаботаСШаблонамиДокументовСервер.ЕстьИспользованныеШаблоны());
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередЗавершениемРаботыСистемы"].Добавить(
			"РаботаСФайламиСлужебныйКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"РаботаСФайламиСлужебный");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриДобавленииФайловВТомаПриРазмещении"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриУдаленииРегистрацииИзменений"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииТекстаЗапросаДляИзвлеченияТекста"].Добавить(
			"РаботаСФайламиСлужебныйВызовСервера");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииКоличестваВерсийСНеизвлеченнымТекстом"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриЗаписиИзвлеченногоТекста"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииКоличестваФайловВТомах"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииНаличияХранимыхФайлов"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриПолученииХранимыхФайлов"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииНавигационнойСсылкиФайла"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииИмениФайлаСПутемКДвоичнымДанным"].Добавить(
			"РаботаСФайламиСлужебный");
		
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РаботаСФайламиСлужебныйВызовСервера");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"РаботаСФайламиСлужебный");
	
КонецПроцедуры

Процедура ПриСохраненииНастроекРаботыСФайлами(КлючиОбъектовНастроекРаботыСФайлами) Экспорт
	
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла" ,"НастройкиОткрытияФайлов");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ДействиеПоДвойномуЩелчкуМыши",                  "НастройкиОткрытияФайлов");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьКолонкуРазмер" ,                      "НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",     "НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("СпособСравненияВерсийФайлов",                   "НастройкиСравненияФайлов");
	
КонецПроцедуры

// Возвращает Истина, если это элемент данных, относящийся к подсистеме РаботаСФайлами.
//
Функция ЭтоЭлементРаботаСФайлами(ЭлементДанных) 
	
	ТипЭлементаДанных = ТипЗнч(ЭлементДанных);
	Если ТипЭлементаДанных = Тип("УдалениеОбъекта") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов")
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВерсииФайлов");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Только для внутреннего использования.
//
// Параметры:
//   ЭлементДанных - ДокументОбъект
//                 - СправочникОбъект
//                 - ПланВидовРасчетаОбъект
//                 - ПланВидовХарактеристикОбъект
//                 - РегистрСведенийНаборЗаписей
//                 - РегистрНакопленияНаборЗаписей
//                 - РегистрБухгалтерииНаборЗаписей
//                 - БизнесПроцессОбъект
//                 - ЗадачаОбъект
//   ОтправкаЭлемента - ОтправкаЭлементаДанных
//  СозданиеНачальногоОбраза - Булево
//   Получатель - ПланОбменаСсылка
Процедура ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь, Получатель = Неопределено)
	
	// Для обменов не РИБ используется алгоритм обычного сеанса обмена, а не создания начального образа,
	// т.к. параметра СозданиеНачальногоОбраза равный Истина означает начальную выгрузку данных.
	Если СозданиеНачальногоОбраза И Получатель <> Неопределено 
		И Не ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Получатель.Ссылка) Тогда
		СозданиеНачальногоОбраза = Ложь;
	КонецЕсли;
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если ТипЗнч(Получатель) = Тип("ПланОбменаОбъект.ОбменДокументооборот20Документооборот21") Тогда
			// для плана обмена ОбменДокументооборот20Документооборот21
			//  ничего не делаем.
			Возврат;
		КонецЕсли;	
		
		Если СозданиеНачальногоОбраза Тогда
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				Если Получатель <> Неопределено
					И Получатель.ДополнительныеСвойства.Свойство("РазмещатьФайлыВНачальномОбразе") Тогда
					
					// Помещаем данные файла из тома на диске в служебный реквизит справочника.
					ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
					
				Иначе
					
					// Копируем файл из тома на диске в каталог создания начального образа.
					ИмяКаталогаФайлов = ХранилищеОбщихНастроек.Загрузить("ОбменФайлами", "ВременныйКаталог");
					
					ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу;
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
					
					НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
							ИмяКаталогаФайлов,
							УникальныйИдентификатор);
					
					ФайловыеФункцииСлужебный.СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла);
					
				КонецЕсли;
				
			Иначе
				
				// Если файл хранится в ИБ, то при создании начального образа
				// он будет выгружен в составе регистра сведений ДвоичныеДанныеФайлов.
				
			КонецЕсли;
			
		Иначе
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				// Помещаем данные файла из тома на диске в служебный реквизит справочника.
				ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
				
			Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
				
				Попытка
					// Помещаем данные файла из информационной базы в служебный реквизит справочника.
					АдресВоВременномХранилище = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ЭлементДанных.Ссылка);
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
				Исключение
					// Возможно, файл не был найден. Отправку данных не прерываем.
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииДляОбмена(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				КонецПопытки;
				
				ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				ЭлементДанных.ПутьКФайлу = "";
				ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ДвоичныеДанныеФайлов")
		И Не СозданиеНачальногоОбраза Тогда
		
		// Выгрузку регистра выполняем только при создании начального образа.
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
//
Процедура ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента, Отправитель) Экспорт
	
	ДанныеДляВосстановленияФайловВТоме = Новый Массив;
	Попытка
	
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			
			// Стандартную обработку не переопределяем.
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Файлы")
			И ПолучениеФайлаЗапрещено(ЭлементДанных) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
			Если ТипЗнч(Отправитель) = Тип("ПланОбменаОбъект.ОбменДокументооборот20Документооборот21") Тогда
				// для плана обмена ОбменДокументооборот20Документооборот21
				//  ничего не делаем.
				Возврат;
			КонецЕсли;	
			
			Если ПолучениеВерсииФайлаЗапрещено(ЭлементДанных) Тогда
				
				ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда

			     // Возможно, файл не был найден. Приемку данных не прерываем.
			     ЗаписьЖурналаРегистрации(
			      НСтр("ru = 'Файлы.Не удалось принять файл при обмене данными'",
			           ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			      УровеньЖурналаРегистрации.Ошибка,,ЭлементДанных.Ссылка);
				  
				  Возврат; // ничего не делаем. приемка не прерывается, файл остается старым.
				  
			КонецЕсли;	  

			
			// Для существующих файлов, размещенных в томах, выполняем их удаление из томов,
			// т.к. при получении нового файла он будет заново размещен в томе или информационной базе.
			Если НЕ ЭлементДанных.ЭтоНовый() Тогда
				
				ВерсияФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка, "ТипХраненияФайла, Том, ПутьКФайлу, Расширение");
				
				Если ВерсияФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
					
					РегистрыСведений.ФайлыКУдалению.ЗаписатьФайл(ВерсияФайла.Том, ВерсияФайла.ПутьКФайлу, 
						"ПриПолученииФайла", ЭлементДанных.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// при обмене сюда приходит только ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе
			//  если тип хранения базы-приемника такой же (в базе) - ничего не делаем
			//   а вот если в базе приемнике - тип хранения в томах - то разместим на диске
			Если ФайловыеФункции.ПолучитьТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске
				И Не ЭлементДанных.ФайлУдален Тогда
				// тип отличается от типа по умолчанию для данной базы - поменяем
				
				//ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
				ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				
				Если ЭлементДанных.ЭтоНовый() Тогда // добавлен новый элемент
					
					ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанные", ДвоичныеДанные);
				
				Иначе    
					
					 Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда

					     // Возможно, файл не был найден. Приемку данных не прерываем.
					     ЗаписьЖурналаРегистрации(
					      НСтр("ru = 'Файлы.Не удалось принять файл при обмене данными'",
					           ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					      УровеньЖурналаРегистрации.Ошибка);

					Иначе

						// по обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах
						//  - из ФайлХранилище размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске
						
						ВремяИзменения		= ЭлементДанных.ДатаМодификацииУниверсальная;
						РазмерФайла			= ЭлементДанных.Размер;
						ИмяБезРасширения	= ЭлементДанных.Наименование;
						Расширение			= ЭлементДанных.Расширение;
						Зашифрован			= ЭлементДанных.Зашифрован;
						
						ПутьКФайлуНаТоме = "";
						СсылкаНаТом = Неопределено;
						
						// добавить в один из томов (где есть свободное место)
						ФайловыеФункцииПереопределяемый.ДобавитьНаДискПриПолученииДанныхФайла(
							ЭлементДанных, ДвоичныеДанные,
							ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, 
							ИмяБезРасширения, Расширение, РазмерФайла, Зашифрован);
						
						ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
						ЭлементДанных.Том		 = СсылкаНаТом;
						ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ФайловыеФункцииПереопределяемый.ВыполнитьДополнительнуюОбработкуПриПолученииДанных(ЭлементДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		//РаботаСФайламиВызовСервера.ЗафиксироватьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме, "ПриПолученииФайла");
	
	Исключение
		
		//РаботаСФайламиВызовСервера.ОтменитьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме);
		ВызватьИсключение;
		
	КонецПопытки;
		
КонецПроцедуры

// Возвращает объекты, имеющие в наличии присоединенные (средствами подсистемы "Работа с файлами") файлы.
//
// Используется совместно с функцией ПрисоединенныеФайлы.СконвертироватьФайлыВПрисоединенные().
//
// Параметры:
//  ТаблицаВладельцевФайлов - Строка - полное имя объекта метаданных,
//                            который может владеть присоединенными файлами.
//
// Возвращаемое значение:
//   Массив
//
Функция СсылкиНаОбъектыСФайлами(Знач ТаблицаВладельцевФайлов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыСФайлами.Ссылка КАК Ссылка
	|ИЗ
	|	&Таблица КАК ОбъектыСФайлами
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.Файлы КАК Файлы
	|			ГДЕ
	|				Файлы.ВладелецФайла = ОбъектыСФайлами.Ссылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ТаблицаВладельцевФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает полный путь тома - в зависимости от ОС.
Функция ПолныйПутьТома(СсылкаНаТом) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		
		Возврат СсылкаНаТом.ПолныйПутьWindows;
	Иначе
		Возврат СсылкаНаТом.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

// Используется при выгрузке файлов для перехода в сервис (БТС).
//
// Параметры:
//   ОбъектФайла    - СправочникОбъект
//   ИмяНовогоФайла - Строка
//
Процедура ВыгрузитьФайл(Знач ОбъектФайла, Знач ИмяНовогоФайла) Экспорт
	
	Если ОбъектФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		ПолныйПуть = ПолныйПутьТома(ОбъектФайла.Том) + ОбъектФайла.ПутьКФайлу;
		КопироватьФайл(ПолныйПуть, ИмяНовогоФайла);
		
		// Исходному файлу мог быть установлен атрибут "Только чтение".
		// Унаследованный при копировании атрибут снимается, чтобы файл можно было удалить.
		СвойстваФайла = Новый Файл(ИмяНовогоФайла);
		
		Если СвойстваФайла.Существует() И СвойстваФайла.ПолучитьТолькоЧтение() Тогда
			
			СвойстваФайла.УстановитьТолькоЧтение(Ложь);
			
		КонецЕсли;
		
	Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
		
		АдресВоВременномХранилище = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ОбъектФайла.Ссылка);
		ПолучитьИзВременногоХранилища(АдресВоВременномХранилище).Записать(ИмяНовогоФайла);
		
	КонецЕсли;
	
	ЗаполнитьПутьКФайлуПриОтправке(ОбъектФайла);
	
КонецПроцедуры

// Используется при загрузке файлов для переходе в сервис (БТС).
//
Процедура ЗагрузитьФайл(Знач ОбъектФайла, Знач ПутьКФайлу) Экспорт
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	Если ФайловыеФункцииСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		// Добавление файла в один из томов (где есть свободное место).
		СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, 
			ОбъектФайла.ДатаМодификацииУниверсальная, ОбъектФайла.Наименование, ОбъектФайла.Расширение,
			ОбъектФайла.НомерВерсии, ОбъектФайла.Зашифрован); 
		ОбъектФайла.Том = СведенияОФайле.Том;
		ОбъектФайла.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		ОбъектФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		ОбъектФайла.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
		
	Иначе
		
		ОбъектФайла.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанные);
		ОбъектФайла.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
		ОбъектФайла.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ОбъектФайла.ПутьКФайлу = "";
		ОбъектФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему

// Записывает вложения в папку.
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов".
//
Процедура ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	// Перенос вложений в таблицу
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла",              Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("ПолныйПутьКФайлу",      Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("Файл",                  Новый ОписаниеТипов("Файл"));
	ТаблицаВложений.Колонки.Добавить("ФайлСсылка",            Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	ТаблицаВложений.Колонки.Добавить("ИмяФайлаБезРасширения", Новый ОписаниеТипов("Строка"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Вложение Из Вложения Цикл
		СтрокаТаблицы = ТаблицаВложений.Добавить();
		СтрокаТаблицы.ИмяФайла              = Вложение.Ключ;
		СтрокаТаблицы.ПолныйПутьКФайлу      = Вложение.Значение;
		СтрокаТаблицы.Файл                  = Новый Файл(СтрокаТаблицы.ПолныйПутьКФайлу);
		СтрокаТаблицы.ИмяФайлаБезРасширения = СтрокаТаблицы.Файл.ИмяБезРасширения;
	КонецЦикла;
	
	// Поиск существующих файлов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПолноеНаименование В(&МассивИменФайлов)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыДоставки.Папка);
	Запрос.УстановитьПараметр("МассивИменФайлов", ТаблицаВложений.ВыгрузитьКолонку("ИмяФайлаБезРасширения"));
	
	СуществующиеФайлы = Запрос.Выполнить().Выгрузить();
	Для Каждого Файл Из СуществующиеФайлы Цикл
		СтрокаТаблицы = ТаблицаВложений.Найти(Файл.ПолноеНаименование, "ИмяФайлаБезРасширения");
		СтрокаТаблицы.ФайлСсылка = Файл.Ссылка;
	КонецЦикла;
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассылка отчетов ''%1'' от %2'"),
		ПараметрыДоставки.Рассылка,
		Формат(ПараметрыДоставки.ДатаВыполнения, "ДЛФ=DT"));
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Вложение.Файл);
		СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.ПолныйПутьКФайлу));
		СведенияОФайле.ИмяБезРасширения = Вложение.ИмяФайлаБезРасширения;
		СведенияОФайле.Комментарий = Комментарий;
		
		// Запись
		Если ЗначениеЗаполнено(Вложение.ФайлСсылка) Тогда
			ВерсияСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьВерсию(Вложение.ФайлСсылка, СведенияОФайле);
			РаботаСФайламиСлужебныйВызовСервера.ОбновитьВерсиюВФайле(Вложение.ФайлСсылка, ВерсияСсылка, СведенияОФайле.АдресВременногоХранилищаТекста);
		Иначе
			Вложение.ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ПараметрыДоставки.Папка, СведенияОФайле); 
		КонецЕсли;
		
		// Заполнение ссылки на файл
		Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Вложение.ПолныйПутьКФайлу,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(Вложение.ФайлСсылка));
		КонецЕсли;
		
		// Очистка
		УдалитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает пометку удаления всем версиям указанного файла.
Процедура ПометитьНаУдалениеВерсииФайла(Знач ФайлСсылка, Знач ВерсияИсключение) Экспорт
	
	ПолноеИмяСправочникаВерсий = Метаданные.НайтиПоТипу(ТипЗнч(ВерсияИсключение)).ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &Владелец
	|	И НЕ ВерсииФайлов.ПометкаУдаления
	|	И ВерсииФайлов.Ссылка <> &Исключение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Запрос.УстановитьПараметр("Исключение", ВерсияИсключение);
	ВыборкаВерсий = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииФайлов");
		ЭлементБлокировки.УстановитьЗначение("Владелец", ФайлСсылка);
		Блокировка.Заблокировать();
		
		Для Каждого Версия Из ВыборкаВерсий Цикл
			ВерсияОбъект = Версия.Ссылка.ПолучитьОбъект();
			ВерсияОбъект.ПометкаУдаления = Истина;
			ВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ВерсияОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ПапкиФайлов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Файлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ВерсииФайлов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

Процедура СформироватьТекстЗапросаПолногоОбъемаФайлов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ВладелецФайла,
		|	СУММА(ВерсииФайлов.Размер / 1024 / 1024) КАК ОбъемВсего
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.Ссылка = ВерсииФайлов.Владелец
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И НЕ ВерсииФайлов.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла)";
	
КонецПроцедуры

Функция ПроверитьЦелостностьФайлов(ТаблицаФайловНаДиске, Том) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу,
		|	ВерсииФайлов.Расширение,
		|	ВерсииФайлов.Наименование,
		|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
		|	ВерсииФайлов.Представление,
		|	ВерсииФайлов.Том,
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.ДатаМодификацииФайла,
		|	ВерсииФайлов.Автор КАК Отредактировал
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|	И ВерсииФайлов.Том = &Том";
		
	Запрос.УстановитьПараметр("Том", Том);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПолныйПутьТома = ФайловыеФункцииСлужебный.ПолныйПутьТома(Том);
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ПутьКФайлу   = Выборка.ПутьКФайлу;
		
		Если ЗначениеЗаполнено(Выборка.ПутьКФайлу) И ЗначениеЗаполнено(Выборка.Том) Тогда
			
			// Удаляем лишнюю точку, если у файла нет расширения.
			Если ВерсияСсылка.Расширение = "" И СтрЗаканчиваетсяНа(ПутьКФайлу, ".") Тогда
				ПутьКФайлу = Лев(ПутьКФайлу, СтрДлина(ПутьКФайлу) - 1);
			КонецЕсли;
			
			ПолныйПутьФайла = ПолныйПутьТома + ПутьКФайлу;
			СуществующийФайл = ТаблицаФайловНаДиске.НайтиСтроки(Новый Структура("ПолноеИмя", ПолныйПутьФайла));
			
			Если СуществующийФайл.Количество() = 0 Тогда
				
				НесуществующийФайл = ТаблицаФайловНаДиске.Добавить();
				НесуществующийФайл.СтатусПроверки = НСтр("ru = 'Отсутствуют данные в томе на диске'");
				НесуществующийФайл.Файл = ВерсияСсылка;
				НесуществующийФайл.ПолноеИмя = ПолныйПутьФайла;
				НесуществующийФайл.Расширение = ВерсияСсылка.Расширение;
				НесуществующийФайл.Имя = ВерсияСсылка.Наименование;
				НесуществующийФайл.Том = Том;
				НесуществующийФайл.Отредактировал = Выборка.Отредактировал;
				НесуществующийФайл.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
				НесуществующийФайл.Количество = 1;
			Иначе
				
				СуществующийФайл[0].Файл = ВерсияСсылка;
				СуществующийФайл[0].СтатусПроверки = НСтр("ru = 'Целостные данные'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция ВозможностьСозданияПапки(ОбъектВладелец) Экспорт
	
	Если ОбъектВладелец = Неопределено Тогда
		Возврат Ложь;
	Иначе 
		Возврат ТипЗнч(ОбъектВладелец) = Тип("СправочникСсылка.ПапкиФайлов");
	КонецЕсли;
	
КонецФункции

Функция ОбъектЯвляетсяФайлом(ОбъектВладелец) Экспорт
	
	МассивТиповФайлов = Метаданные.Справочники.Файлы.Реквизиты.ВладелецФайла.Тип.Типы();
	Возврат МассивТиповФайлов.Найти(ТипЗнч(ОбъектВладелец)) <> Неопределено;
	
КонецФункции

// Возвращает массив справочников, выступающих в роли владельцев файлов.
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных
//
Функция СправочникиФайлов() Экспорт
	
	Результат = Новый Массив();
	
	КоллекцииМетаданных = Новый Массив();
	КоллекцииМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииМетаданных.Добавить(Метаданные.Документы);
	КоллекцииМетаданных.Добавить(Метаданные.БизнесПроцессы);
	КоллекцииМетаданных.Добавить(Метаданные.Задачи);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыОбмена);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	
	Для Каждого КоллекцияМетаданных Из КоллекцииМетаданных Цикл
		
		Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			ПустаяСсылка = МенеджерОбъекта.ПустаяСсылка();
			ИменаСправочниковХраненияФайлов = ИменаСправочниковХраненияФайлов(ПустаяСсылка, Истина);
			
			Для Каждого ИмяСправочникаХраненияФайлов Из ИменаСправочниковХраненияФайлов Цикл
				Результат.Добавить(Метаданные.Справочники[ИмяСправочникаХраненияФайлов.Ключ]);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Добавить(Метаданные.Справочники.ВерсииФайлов);
	
	Возврат Результат;
		
КонецФункции

// Возвращает массив объектов метаданных, которые используются для хранения
// двоичных данных файлов в информационной базе.
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных
//
Функция ОбъектыХраненияФайловИнформационнойБазе() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Метаданные.РегистрыСведений.ДвоичныеДанныеФайлов);
	Возврат Результат;
	
КонецФункции

// Возвращает расширение файла.
//
// Параметры:
//  Объект - ОпределяемыйТип.ПрисоединенныйФайлОбъект
// 
// Возвращаемое значение:
//   Строка
//
Функция РасширениеФайла(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Файлы") Тогда
		Возврат Объект.ТекущаяВерсияРасширение;
	КонецЕсли;
	
	Возврат Объект.Расширение;
	
КонецФункции

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП.

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты
// метаданных, но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.СведенияОФайлах.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить("Справочник.Файлы.Реквизиты.ТекущаяВерсия");
	ИсключенияПоискаСсылок.Добавить("Справочник.ВерсииФайлов.Реквизиты.РодительскаяВерсия");
	
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа".
//
Процедура ПриДобавленииФайловВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске);
	
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа".
//
Процедура ПриУдаленииРегистрацииИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьРегистрациюИзменений(ПланОбменаСсылка);
	
КонецПроцедуры

// Возвращает текст запроса для извлечения текста
//
Процедура ПриОпределенииТекстаЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ВерсииФайлов.Ссылка КАК Ссылка,
	|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
	|	ВерсииФайлов.Расширение КАК Расширение,
	|	ВерсииФайлов.Владелец.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	(ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ВерсииФайлов.Зашифрован";
	
	Если ПолучитьВсеФайлы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом.
//
Процедура ПриОпределенииКоличестваВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	ЧислоВерсий = ЧислоВерсий + РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	
КонецПроцедуры

// Записывает извлеченный текст.
//
Процедура ПриЗаписиИзвлеченногоТекста(ТекущаяВерсия, ФайлЗаблокирован = Истина) Экспорт
	
	// Если это не версия, то записываем.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВладелецФайла", Метаданные.НайтиПоТипу(ТипЗнч(ТекущаяВерсия))) Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущаяВерсия);
		Возврат;
	КонецЕсли;
	
	Файл = ТекущаяВерсия.Владелец;
	ТекущаяВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	Если ТекущаяВерсияФайла = ТекущаяВерсия.Ссылка Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
		Исключение
			ФайлЗаблокирован = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущаяВерсия);
	
	Если ТекущаяВерсияФайла = ТекущаяВерсия.Ссылка Тогда
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТекстХранилище = ТекущаяВерсия.ТекстХранилище;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФайлОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
//
Процедура ПриОпределенииКоличестваФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ПриОпределенииНаличияХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПриПолученииХранимыхФайлов(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище).
//
Процедура ПриОпределенииНавигационнойСсылкиФайла(ФайлСсылка, УникальныйИдентификатор, НавигационнаяСсылка) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		НавигационнаяСсылка = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Получает полный путь к файлу на диске.
//
Процедура ПриОпределенииИмениФайлаСПутемКДвоичнымДанным(ФайлСсылка, ПутьКФайлу, ПустойПутьДляПустыхДанных = Ложь) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		ПутьКФайлу = РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка, ПустойПутьДляПустыхДанных);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
//
Процедура ПриОпределенииДвоичныхДанныхФайлаИПодписи(ДанныеСтроки, ДанныеФайлаИПодписи) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ДанныеСтроки.Объект) Тогда
		ДанныеФайлаИПодписи = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описания возможных прав, назначаемых для объектов, указанных типов.
// 
// Параметры:
//  ВозможныеПрава - ТаблицаЗначений, содержащая поля,
//                   описание которых  см. в комментарии к функции.
//                   РегистрыСведений.НастройкиПравОбъектов.ВозможныеПрава().
//
Процедура ПриЗаполненииВозможныхПравДляНастройкиПравОбъектов(ВозможныеПрава) Экспорт
	
	////////////////////////////////////////////////////////////
	// Справочник.ПапкиФайлов
	
	// Право "Чтение папок и файлов".
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "Чтение";
	Право.Заголовок     = НСтр("ru = 'Чтение'");
	Право.Подсказка     = НСтр("ru = 'Чтение папок и файлов'");
	Право.НачальноеЗначение = Истина;
	// Права для стандартных шаблонов ограничений доступа.
	Право.ЧтениеВТаблицах.Добавить("*");
	
	// Право "Изменение папок"
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ИзменениеПапок";
	Право.Заголовок     = НСтр("ru = 'Изменение
	                                 |папок'");
	Право.Подсказка     = НСтр("ru = 'Добавление, изменение и
	                                 |пометка удаления папок файлов'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("Чтение");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ИзменениеВТаблицах.Добавить(Метаданные.Справочники.ПапкиФайлов.ПолноеИмя());
	
	// Право "Изменение файлов"
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ИзменениеФайлов";
	Право.Заголовок     = НСтр("ru = 'Изменение
	                                 |файлов'");
	Право.Подсказка     = НСтр("ru = 'Изменение файлов в папке'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("Чтение");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ИзменениеВТаблицах.Добавить("*");
	
	// Право "Добавление файлов"
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ДобавлениеФайлов";
	Право.Заголовок     = НСтр("ru = 'Добавление
	                                 |файлов'");
	Право.Подсказка     = НСтр("ru = 'Добавление файлов в папку'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ИзменениеФайлов");
	
	// Право "Пометка удаления файлов".
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "ПометкаУдаленияФайлов";
	Право.Заголовок     = НСтр("ru = 'Пометка
	                                 |удаления'");
	Право.Подсказка     = НСтр("ru = 'Пометка удаления файлов в папке'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ИзменениеФайлов");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = Метаданные.Справочники.ПапкиФайлов.ПолноеИмя();
	Право.Имя           = "УправлениеПравами";
	Право.Заголовок     = НСтр("ru = 'Управление
	                                 |правами'");
	Право.Подсказка     = НСтр("ru = 'Управление правами папки'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("Чтение");
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы.
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта].
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал. Этот вид доступа используется в
//                 шаблонах ограничений доступа, как "ссылка" на другой объект, по которому
//                 ограничивается текущий объект таблицы.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц,
//                 которые используются для этого вида доступа. Т.е. перечислить типы,
//                 которые соответствуют полю, использованному в шаблоне ограничения доступа
//                 в паре с видом доступа "Объект". При перечислении типов по виду доступа "Объект"
//                 нужно перечислить только те типы поля, которые есть у поля.
//                 РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Справочник.ПапкиФайлов.Чтение.НастройкиПрав.Справочник.ПапкиФайлов
		|Справочник.ПапкиФайлов.Изменение.НастройкиПрав.Справочник.ПапкиФайлов
		|Справочник.ВерсииФайлов.Чтение.Объект.Справочник.ПапкиФайлов
		|Справочник.ВерсииФайлов.Изменение.Объект.Справочник.ПапкиФайлов
		|Справочник.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
		|Справочник.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
		|РегистрСведений.ДвоичныеДанныеФайлов.Чтение.Объект.Справочник.ПапкиФайлов
		|";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		Описание = Описание + "
			|Справочник.ВерсииФайлов.Чтение.Объект.БизнесПроцесс.Задание
			|Справочник.ВерсииФайлов.Изменение.Объект.БизнесПроцесс.Задание
			|Справочник.Файлы.Чтение.Объект.БизнесПроцесс.Задание
			|Справочник.Файлы.Изменение.Объект.БизнесПроцесс.Задание
			|РегистрСведений.ДвоичныеДанныеФайлов.Чтение.Объект.БизнесПроцесс.Задание
			|";
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты - Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.РегистрыСведений.ДвоичныеДанныеФайлов);
	
КонецПроцедуры

// Заполняет перечень обработчиков интеграции подсистемы.
// "ТехнологияСервиса.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса"
//
// Параметры:
//  Обработчики - Массив(Строка), имя общего модуля обработчика,
//
Процедура ПриЗаполненииОбработчиковИнтеграцииФайловыхФункцийВМоделиСервиса(Обработчики) Экспорт
	
	Обработчики.Добавить("РаботаСФайламиСлужебный");
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Работа с кодировками

// Возвращает таблицу имен кодировок.
//
// Возвращаемое значение:
//   СписокЗначений:
//     * Значение - Строка - например "ibm852".
//     * Представление - Строка - например "ibm852 (Центральноевропейская DOS)".
//
Функция Кодировки() Экспорт

	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",       НСтр("ru = 'IBM852 (Центральноевропейская DOS)'"));
	СписокКодировок.Добавить("ibm866",       НСтр("ru = 'IBM866 (Кириллица DOS)'"));
	СписокКодировок.Добавить("iso-8859-1",   НСтр("ru = 'ISO-8859-1 (Западноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-2",   НСтр("ru = 'ISO-8859-2 (Центральноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-3",   НСтр("ru = 'ISO-8859-3 (Латиница 3 ISO)'"));
	СписокКодировок.Добавить("iso-8859-4",   НСтр("ru = 'ISO-8859-4 (Балтийская ISO)'"));
	СписокКодировок.Добавить("iso-8859-5",   НСтр("ru = 'ISO-8859-5 (Кириллица ISO)'"));
	СписокКодировок.Добавить("iso-8859-7",   НСтр("ru = 'ISO-8859-7 (Греческая ISO)'"));
	СписокКодировок.Добавить("iso-8859-9",   НСтр("ru = 'ISO-8859-9 (Турецкая ISO)'"));
	СписокКодировок.Добавить("iso-8859-15",  НСтр("ru = 'ISO-8859-15 (Латиница 9 ISO)'"));
	СписокКодировок.Добавить("koi8-r",       НСтр("ru = 'KOI8-R (Кириллица KOI8-R)'"));
	СписокКодировок.Добавить("koi8-u",       НСтр("ru = 'KOI8-U (Кириллица KOI8-U)'"));
	СписокКодировок.Добавить("us-ascii",     НСтр("ru = 'US-ASCII (США)'"));
	СписокКодировок.Добавить("utf-8",        НСтр("ru = 'UTF-8 (Юникод UTF-8)'"));
	СписокКодировок.Добавить("utf-8_WithoutBOM", НСтр("ru = 'UTF-8 (Юникод UTF-8 без BOM)'"));
	СписокКодировок.Добавить("windows-1250", НСтр("ru = 'Windows-1250 (Центральноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1251", НСтр("ru = 'windows-1251 (Кириллица Windows)'"));
	СписокКодировок.Добавить("windows-1252", НСтр("ru = 'Windows-1252 (Западноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1253", НСтр("ru = 'Windows-1253 (Греческая Windows)'"));
	СписокКодировок.Добавить("windows-1254", НСтр("ru = 'Windows-1254 (Турецкая Windows)'"));
	СписокКодировок.Добавить("windows-1257", НСтр("ru = 'Windows-1257 (Балтийская Windows)'"));
	
	Возврат СписокКодировок;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Обработчик подписки "при записи" версии файла.
//
// Параметры:
//   Источник - СправочникОбъект.ВерсииФайлов
//
Процедура ВерсииФайловПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПереименованиеФайла")
		Или Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьРезультатаРаспознавания") Тогда
		Возврат;
	КонецЕсли;
	
	// копируем реквизиты из версии в файл.
	ТекущаяВерсия = Источник;
	Если Не ТекущаяВерсия.Ссылка.Пустая() Тогда
	
		ФайлСсылка = Источник.Владелец;
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, 
			"ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания, ТекущаяВерсияАвтор, ТекущаяВерсияРасширение, ТекущаяВерсияНомерВерсии, ТекущаяВерсияТом, ТекущаяВерсияПутьКФайлу, ТекущаяВерсияКод, ТекущаяВерсияДатаМодификацииФайла");
			
			Если РеквизитыФайла.ТекущаяВерсияРазмер <> ТекущаяВерсия.Размер 
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаСоздания <> ТекущаяВерсия.ДатаСоздания
				ИЛИ РеквизитыФайла.ТекущаяВерсияРасширение <> ТекущаяВерсия.Расширение
				ИЛИ РеквизитыФайла.ТекущаяВерсияНомерВерсии <> ТекущаяВерсия.НомерВерсии
				ИЛИ РеквизитыФайла.ТекущаяВерсияТом <> ТекущаяВерсия.Том
				ИЛИ РеквизитыФайла.ТекущаяВерсияПутьКФайлу <> ТекущаяВерсия.ПутьКФайлу 
				ИЛИ РеквизитыФайла.ТекущаяВерсияКод <> ТекущаяВерсия.Код
				ИЛИ РеквизитыФайла.ИндексКартинки <> ТекущаяВерсия.ИндексКартинки
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаМодификацииФайла <> ТекущаяВерсия.ДатаМодификацииФайла Тогда
				
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
				
				// Сменим индекс картинки, возможно, появилась версия или сменился индекс картинки у версии.
				ФайлОбъект.ИндексКартинки = ТекущаяВерсия.ИндексКартинки;
				
				// копируем реквизиты для ускорения работы RLS.
				ФайлОбъект.ТекущаяВерсияРазмер = ТекущаяВерсия.Размер;
				ФайлОбъект.ТекущаяВерсияДатаСоздания = ТекущаяВерсия.ДатаСоздания;
				ФайлОбъект.ТекущаяВерсияАвтор = ТекущаяВерсия.Автор;
				ФайлОбъект.ТекущаяВерсияРасширение = ТекущаяВерсия.Расширение;
				ФайлОбъект.ТекущаяВерсияНомерВерсии = ТекущаяВерсия.НомерВерсии;
				ФайлОбъект.ТекущаяВерсияТом = ТекущаяВерсия.Том;
				ФайлОбъект.ТекущаяВерсияПутьКФайлу = ТекущаяВерсия.ПутьКФайлу;
				ФайлОбъект.ТекущаяВерсияКод = ТекущаяВерсия.Код;
				ФайлОбъект.ТекущаяВерсияДатаМодификацииФайла = ТекущаяВерсия.ДатаМодификацииФайла;
				
				Если Источник.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта",
						Источник.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта);
				КонецЕсли;
				
				// Проверка прав доступа не требуется.
				УстановитьПривилегированныйРежим(Истина);
				ФайлОбъект.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
		
	КонецЕсли;
		
	ПриОбновленииСостоянияОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// Проверяет право текущего пользователя
// при использовании ограничения для папки или файла.
//
// Параметры:
//   Папка - СправочникСсылка.ПапкиФайлов
//         - СправочникСсылка.Файлы - папка файлов.
//         - СправочникСсылка - владелец файлов.
//
// Места использования:
//   РассылкаОтчетов.ЗаполнитьПараметрыРассылкиПараметрамиПоУмолчанию().
//   Справочник.РассылкиОтчетов.Формы.ФормаЭлемента.ПравоИзмененияПапкиИФайлов().
//
Функция ПравоДобавленияФайловВПапку(Папка) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Проверяет право текущего пользователя
// при использовании ограничения для папки или файла.
// 
// Параметры:
//  Право        - Строка - имя права.
//  ВладелецПрав - СправочникСсылка.ПапкиФайлов
//               - СправочникСсылка.Файлы
//               - ОпределяемыйТип.ВладелецПрисоединенныхФайлов
//
Функция ЕстьПраво(Право, ВладелецПрав) Экспорт
	
	Если ТипЗнч(ВладелецПрав) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		
		Если НЕ МодульУправлениеДоступом.ЕстьПраво(Право, ВладелецПрав) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Добавляет и удаляет записи в регистр сведений ОчередьИзвлеченияТекста при изменении
// состояние извлечения текста версий файлов.
//
// Параметры:
//	ИсточникТекста - СправочникСсылка.ВерсииФайлов, СправочникСсылка.*ПрисоединенныеФайлы,
//		файл, у которого изменилось состояние извлечения текста.
//	СостояниеИзвлеченияТекста - ПеречислениеСсылка.СтатусыИзвлеченияТекстаФайлов, новый
//		статус извлечения текста у файла.
//
Процедура ПриОбновленииСостоянияОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста) 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса") Тогда
		
		Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
			МодульФайловыеФункцииСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебныйВМоделиСервиса");
			МодульФайловыеФункцииСлужебныйВМоделиСервиса.ОбновитьСостояниеОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Файл.Установить(Источник.Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Файл = Источник.Ссылка;
		Запись.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанныеФайла);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучениеФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	      И Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	             ЭлементДанных.ТекущаяВерсияРасширение, Ложь);
	
КонецФункции

Функция ПолучениеВерсииФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	      И Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	             ЭлементДанных.Расширение, Ложь);
	
КонецФункции

Процедура ПоместитьФайлВРеквизитСправочника(ЭлементДанных)
	
	Попытка
		// Помещаем данные файла из тома на диске в служебный реквизит справочника.
		ЭлементДанных.ФайлХранилище = ФайловыеФункцииСлужебный.ПоместитьДвоичныеДанныеВХранилище(ЭлементДанных.Том, ЭлементДанных.ПутьКФайлу, ЭлементДанных.Ссылка.УникальныйИдентификатор());
	Исключение
		// Возможно, файл не был найден. Отправку данных не прерываем.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииДляОбмена(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецПопытки;
	
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрацииДляОбмена() 
	
	Возврат НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	//НастройкиРаботыСФайлами = РаботаСФайламиСлужебныйПовтИсп.НастройкиРаботыСФайлами();
	//Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами", Новый ФиксированнаяСтруктура(
	//	НастройкиРаботыСФайлами.ПерсональныеНастройки));
	//
	//Параметры.Вставить("ОбщиеНастройкиРаботыСФайлами", Новый ФиксированнаяСтруктура(
	//	НастройкиРаботыСФайлами.ОбщиеНастройки));
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();	
	
	Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами", Новый ФиксированнаяСтруктура(
		ПерсональныеНастройки));
	
	Параметры.Вставить("ОбщиеНастройкиРаботыСФайлами", Новый ФиксированнаяСтруктура(
		ОбщиеНастройкиРаботыСФайлами));
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
	Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами", Новый ФиксированнаяСтруктура(
		ПерсональныеНастройки));
	
	КоличествоЗанятыхФайлов = 0;
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		КоличествоЗанятыхФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, Пользователь);
	КонецЕсли;
	
	Параметры.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// В процессе выгрузки данных ссылки на справочник ТомаХраненияФайлов очищаются,
	// а при загрузке загрузка производится относительно настройки томов в ИБ, в которую
	// производится загрузка, а не относительно настройки томов в ИБ, из которой были
	// выгружены данные.
	Типы.Добавить(Метаданные.Справочники.ТомаХраненияФайлов);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	//Библиотека = "СтандартныеПодсистемы";
	//
	//СтароеИмя = "Роль.РаботаСПапкамиФайлов";
	//НовоеИмя  = "Роль.ДобавлениеИзменениеПапокИФайлов";
	//ОбщегоНазначения.ДобавитьПереименование(Итог, "2.4.1.1", СтароеИмя, НовоеИмя, Библиотека);
	
КонецПроцедуры

Процедура ЗаполнитьПутьКФайлуПриОтправке(ЭлементДанных)
	
	Если ТипЗнч(ЭлементДанных) <> Тип("СправочникОбъект.ВерсииФайлов") Тогда
		ЭлементДанных.ПутьКФайлу = "";
		Возврат;
	КонецЕсли;
	
	ДанныеЗашифрованы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.Владелец, "Зашифрован");
	ЭлементДанных.ПутьКФайлу = ?(ДанныеЗашифрованы, ".p7m", "");
	
КонецПроцедуры

// Читает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
//
// Возвращаемое значение:
//   Строка кодировки
Функция ПолучитьКодировкуВерсииФайла(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Кодировка;
	
КонецФункции

// Получает все подчиненные файлы.
// Параметры:
//  ВладелецФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   Массив - массив файлов
Функция ПолучитьВсеПодчиненныеФайлы(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает структуру объекта файла.
//
Функция ФайлОбъект(Знач ПрисоединенныйФайл) Экспорт
	
	ФайлОбъект = Неопределено;

	МетаданныеОбъектаФайла = Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл));
	
	// Это справочник файлов.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВладелецФайла", МетаданныеОбъектаФайла) Тогда
		// С возможностью хранить версии.
		ЕстьТекущаяВерсия = Ложь;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеОбъектаФайла) Тогда
			ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ТекущаяВерсия"); 
			ЕстьТекущаяВерсия = ЗначениеЗаполнено(ТекущаяВерсия); 
		КонецЕсли;	
		
		Если ЕстьТекущаяВерсия Тогда // С возможностью хранить версии
			ИменаРеквизитов = "Ссылка,ТипХраненияФайла,Наименование,Расширение,Том,ПутьКФайлу";
			Если МетаданныеОбъектаФайла.Иерархический Тогда
				ИменаРеквизитов = ИменаРеквизитов + "," + "ЭтоГруппа";
			КонецЕсли;
			ФайлОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяВерсия, ИменаРеквизитов);
			ФайлОбъект.Вставить("ВладелецФайла", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла"));
			Если Не МетаданныеОбъектаФайла.Иерархический Тогда
				ФайлОбъект.Вставить("ЭтоГруппа", Ложь);
			КонецЕсли;
		Иначе // Без возможности хранить версии
			ИменаРеквизитов = "Ссылка,ТипХраненияФайла,ВладелецФайла,Наименование,Расширение,Том,ПутьКФайлу"; 
			Если МетаданныеОбъектаФайла.Иерархический Тогда
				ИменаРеквизитов = ИменаРеквизитов + "," + "ЭтоГруппа";
			КонецЕсли;
			ФайлОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, ИменаРеквизитов);
			Если Не МетаданныеОбъектаФайла.Иерархический Тогда
				ФайлОбъект.Вставить("ЭтоГруппа", Ложь);
			КонецЕсли;
		КонецЕсли;
		
		ЭтоГруппа = Ложь;
		Если МетаданныеОбъектаФайла.Иерархический Тогда
			ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ЭтоГруппа");
		КонецЕсли;
		ФайлОбъект.Вставить("ЭтоГруппа", ЭтоГруппа);
	// Это справочник версий файлов.
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("РодительскаяВерсия", МетаданныеОбъектаФайла) Тогда
	
		ФайлОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, 
			"Ссылка,ТипХраненияФайла,Наименование,Расширение,Том,ПутьКФайлу,Владелец");
		ФайлОбъект.Вставить("ВладелецФайла",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлОбъект.Владелец, "ВладелецФайла"));
		ФайлОбъект.Удалить("Владелец");
		ФайлОбъект.Вставить("ЭтоГруппа", Ложь);
		
	КонецЕсли;
	
	Возврат ФайлОбъект;
	
КонецФункции

// Для перехода с версий БСП 2.3.7 и младше. Устанавливает связь между
// подсистемой ПрисоединенныеФайлы и РаботаСФайлами.
//
Процедура ПриОпределенииНаследованияПодсистем(Выгрузка, НаследующиеПодсистемы) Экспорт
	
	//ОтборПоУдаленным = Новый Структура;
	//ОтборПоУдаленным.Вставить("Обновлен", Истина);
	//ОтборПоУдаленным.Вставить("ПометкаУдаления", Истина);
	//Удаленные = Выгрузка.НайтиСтроки(ОтборПоУдаленным);
	//НаследующиеПодсистемы = Новый Массив;
	//Для Каждого Удаленный Из Удаленные Цикл
	//	Если СтрНайти(Удаленный.ПолноеИмя, "Подсистема.СтандартныеПодсистемы.Подсистема.ПрисоединенныеФайлы") Тогда
	//		СтрокаРаботаСФайлами = Выгрузка.Найти("Подсистема.СтандартныеПодсистемы.Подсистема.РаботаСФайлами", "ПолноеИмя");
	//		Если СтрокаРаботаСФайлами <> Неопределено Тогда
	//			НаследующиеПодсистемы.Добавить(СтрокаРаботаСФайлами);
	//		КонецЕсли;
	//		
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись и шифрование для файлов.

Функция ДоступнаЭлектроннаяПодпись(ТипФайла) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		Возврат МодульЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипФайла);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Управляет видимостью элементов и команд в зависимости от наличия и
// использования электронной подписи и шифрования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения.
//   ЭтоФормаСписка - Булево.
//   ТолькоКартинкаСтрок - Булево.
//
Процедура КриптографияПриСозданииФормыНаСервере(Форма, ЭтоФормаСписка = Истина, ТолькоКартинкаСтрок = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	Подписание = Ложь;
	Шифрование = Ложь;
	ПросмотрЗашифрованных = Ложь;
	ДоступнаУсовершенствованнаяПодпись = Ложь;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
	
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		Если МодульЭлектроннаяПодписьСлужебный.ИнтерактивноеИспользованиеЭлектронныхПодписейИШифрования() Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			Подписание            = МодульЭлектроннаяПодпись.ДобавлениеИзменениеЭлектронныхПодписей();
			Шифрование            = МодульЭлектроннаяПодпись.ШифрованиеИРасшифровкаДанных();
			ПросмотрЗашифрованных = МодульЭлектроннаяПодпись.РасшифровкаДанных();
			ДоступнаУсовершенствованнаяПодпись = МодульЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоФормаСписка Тогда
		Если ОбщегоНазначения.ЭтоСправочник(Метаданные.НайтиПоПолномуИмени(Форма.Список.ОсновнаяТаблица)) Тогда
			ТаблицаФайлов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.Список.ОсновнаяТаблица);
			Доступна = ДоступнаЭлектроннаяПодпись(ТипЗнч(ТаблицаФайлов.ПустаяСсылка()));
		Иначе
			Доступна = Истина;
		КонецЕсли;
	Иначе
		Доступна = ДоступнаЭлектроннаяПодпись(ТипЗнч(Форма.Объект.Ссылка));
	КонецЕсли;

	Если Не ТолькоКартинкаСтрок Тогда
		
		Элементы.ФормаГруппаКомандЭлектроннаяПодписьИШифрование.Видимость = Доступна;
		
		Элементы.ФормаПодписать.Видимость = Подписание;
		Элементы.ФормаДобавитьПодписьИзФайла.Видимость = Подписание;
		Элементы.ФормаЗашифровать.Видимость = Шифрование;
		Элементы.ФормаРасшифровать.Видимость = ПросмотрЗашифрованных;
		
		Если ЭтоФормаСписка Тогда
			
			Элементы.СписокКонтекстноеМенюПодписать.Видимость = Подписание;
			Элементы.СписокКонтекстноеМенюДобавитьПодписьИзФайла.Видимость = Подписание;
			Элементы.СписокКонтекстноеМенюЗашифровать.Видимость = Шифрование;
			Элементы.СписокКонтекстноеМенюГруппаКомандЭлектроннаяПодписьИШифрование.Видимость = Доступна;
			
		Иначе
			
			Элементы.ЭлектронныеПодписиПродлитьДействиеПодписей.Видимость = Подписание И ДоступнаУсовершенствованнаяПодпись;
			Элементы.ЭлектронныеПодписи.ИзменятьСоставСтрок = Подписание;
			Элементы.ЭлектронныеПодписиПодписать.Видимость = Подписание;
			Элементы.ЭлектронныеПодписиУдалить.Видимость = Подписание;
			Элементы.ГруппаЭлектронныеПодписи.Видимость = Доступна;
			Элементы.ГруппаСертификатыШифрования.Видимость = ПросмотрЗашифрованных И Доступна;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Доступна Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТолькоКартинкаСтрок Тогда
		Элементы.ФормаГруппаКомандШифрование.Видимость = ПросмотрЗашифрованных;


		Если ЭтоФормаСписка Тогда
			Элементы.СписокКонтекстноеМенюГруппаКомандШифрование.Видимость = ПросмотрЗашифрованных;

		КонецЕсли;
	КонецЕсли;
	
	Если ПросмотрЗашифрованных Тогда
		Заголовок = НСтр("ru = 'Электронная подпись и шифрование'");
		Подсказка = НСтр("ru = 'Наличие электронной подписи или шифрования'");
		Картинка  = БиблиотекаКартинок["ПодписанЗашифрованЗаголовок"];
	Иначе
		Заголовок = НСтр("ru = 'Электронная подпись'");
		Подсказка = НСтр("ru = 'Наличие электронной подписи'");
		Картинка  = БиблиотекаКартинок["ПодписанЭП"];

	КонецЕсли;
	
	Если ЭтоФормаСписка Тогда
		Элементы.СписокНомерКартинкиПодписанЗашифрован.КартинкаШапки = Картинка;
		Элементы.СписокНомерКартинкиПодписанЗашифрован.Подсказка = Подсказка;
	КонецЕсли;
	
	Если Не ТолькоКартинкаСтрок Тогда
		
		ГруппаКомандЭП = Элементы.ФормаГруппаКомандЭлектроннаяПодписьИШифрование; //ГруппаФормы
		ГруппаКомандЭП.Заголовок = Заголовок;
		ГруппаКомандЭП.Подсказка = Заголовок;
		ГруппаКомандЭП.Картинка  = Картинка;
		
		Если ЭтоФормаСписка Тогда
			
			КомандаСпискаЭП = Элементы.СписокКонтекстноеМенюГруппаКомандЭлектроннаяПодписьИШифрование; // КнопкаФормы
			КомандаСпискаЭП.Заголовок = Заголовок;
			КомандаСпискаЭП.Подсказка = Заголовок;
			КомандаСпискаЭП.Картинка  = Картинка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	МодульЭлектроннаяПодписьСлужебный.ОформитьСписокПодписей(Форма, "ЭлектронныеПодписи");
	
КонецПроцедуры

// Только для внутреннего использования.
//
// Параметры:
//   ПодписиВФорме - ТаблицаЗначений.
Процедура ПеренестиРезультатыПроверкиПодписей(ПодписиВФорме, ПодписанныйФайл) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
		
	МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	Если Не МодульЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(ПодписанныйФайл)) Тогда
		Возврат;
	КонецЕсли;
		
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	ПодписиВОбъекте = МодульЭлектроннаяПодпись.УстановленныеПодписи(ПодписанныйФайл);
	
	Если ПодписиВФорме.Количество() <> ПодписиВОбъекте.Количество() Тогда
		Возврат; // Если объект был изменен, результаты проверки не переносятся.
	КонецЕсли;
	
	Если ПодписиВФорме.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = Новый Структура("ДатаПроверкиПодписи, ПодписьВерна", Null, Null);
	ЗаполнитьЗначенияСвойств(Свойства, ПодписиВОбъекте[0]);
	Если Свойства.ДатаПроверкиПодписи = Null
	 Или Свойства.ПодписьВерна = Null Тогда
		Возврат; // Если в объекте нет реквизитов проверки, результаты проверки не переносятся.
	КонецЕсли;
	
	Для Каждого Строка Из ПодписиВФорме Цикл
		СтрокаВОбъекте = ПодписиВОбъекте.Получить(ПодписиВФорме.Индекс(Строка));
		Если Строка.ДатаПодписи         <> СтрокаВОбъекте.ДатаПодписи
		 Или Строка.Комментарий         <> СтрокаВОбъекте.Комментарий
		 Или Строка.КомуВыданСертификат <> СтрокаВОбъекте.КомуВыданСертификат И ЗначениеЗаполнено(СтрокаВОбъекте.КомуВыданСертификат)
		 Или Строка.Отпечаток           <> СтрокаВОбъекте.Отпечаток И ЗначениеЗаполнено(СтрокаВОбъекте.Отпечаток)
		 Или Строка.УстановившийПодпись <> СтрокаВОбъекте.УстановившийПодпись Тогда
			Возврат; // Если объект был изменен, результаты проверки не переносятся.
		КонецЕсли;
	КонецЦикла;
	
	Свойства.Вставить("Отпечаток");
	Свойства.Вставить("КомуВыданСертификат");
	
	Для Каждого Строка Из ПодписиВФорме Цикл
		СтрокаВОбъекте = ПодписиВОбъекте.Получить(ПодписиВФорме.Индекс(Строка));
		ЗаполнитьЗначенияСвойств(Свойства, СтрокаВОбъекте);
		
		ЕстьИзменения = Ложь;
		Для Каждого КлючИЗначение Из Свойства Цикл
			Если Строка[КлючИЗначение.Ключ] <> Свойства[КлючИЗначение.Ключ] Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьИзменения Тогда
			Продолжить; // Не нужно устанавливать модифицированность, если результаты проверки совпадают.
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Свойства, Строка);
		ЗаполнитьЗначенияСвойств(СтрокаВОбъекте, Свойства);
		МодульЭлектроннаяПодпись.ОбновитьПодпись(ПодписанныйФайл, СтрокаВОбъекте);
	КонецЦикла;
	
КонецПроцедуры

// Помещает шифрованные файлы в базу и ставит признак Зашифрован файлу и всем версиям.
//
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл.
//  Зашифровать - Булево - зашифровать файл, если Истина - иначе расшифровать.
//  МассивДанныхДляЗанесенияВБазу - Массив из Структура
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИмяРабочегоКаталога - Строка - рабочий каталог.
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - файлы, которые надо удалить из регистра.
//  МассивОтпечатков  - Массив - массив отпечатков сертификатов, использованных для шифрования.
//
Процедура ЗаписатьИнформациюОШифровании(ФайлСсылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор, 
	ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков) Экспорт
	
	//НачатьТранзакцию();
	//Попытка
	//	АдресВременногоХранилищаТекстаТекущейВерсии = "";
	//	АдресВременногоХранилищаОсновногоФайла      = "";
	//	Для Каждого ДанныеДляЗаписиНаСервере Из МассивДанныхДляЗанесенияВБазу Цикл
	//		
	//		Если ТипЗнч(ДанныеДляЗаписиНаСервере.ВерсияСсылка) <> Тип("СправочникСсылка.ВерсииФайлов") Тогда
	//			АдресВременногоХранилищаОсновногоФайла = ДанныеДляЗаписиНаСервере.АдресВременногоХранилища;
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		АдресВременногоХранилища = ДанныеДляЗаписиНаСервере.АдресВременногоХранилища;
	//		ВерсияСсылка = ДанныеДляЗаписиНаСервере.ВерсияСсылка;
	//		АдресВременногоХранилищаТекста = ДанныеДляЗаписиНаСервере.АдресВременногоХранилищаТекста;
	//		
	//		Если ВерсияСсылка = ФайлСсылка.ТекущаяВерсия Тогда
	//			АдресВременногоХранилищаТекстаТекущейВерсии = АдресВременногоХранилищаТекста;
	//		КонецЕсли;
	//		
	//		ПолноеИмяФайлаВРабочемКаталоге = "";
	//		ВРабочемКаталогеНаЧтение = Истина; // не используется 
	//		ВРабочемКаталогеВладельца = Истина;
	//		ПолноеИмяФайлаВРабочемКаталоге = РаботаСФайламиСлужебныйВызовСервера.ПолучитьПолноеИмяФайлаИзРегистра(ВерсияСсылка, 
	//			ИмяРабочегоКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	//			
	//		Если Не ПустаяСтрока(ПолноеИмяФайлаВРабочемКаталоге) Тогда
	//			МассивФайловВРабочемКаталогеДляУдаления.Добавить(ПолноеИмяФайлаВРабочемКаталоге);
	//		КонецЕсли;
	//		
	//		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ВерсияСсылка);
	//		
	//		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	//		СведенияОФайле.ИмяБезРасширения = ВерсияСсылка.ПолноеНаименование;
	//		СведенияОФайле.Комментарий = ВерсияСсылка.Комментарий;
	//		СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилища;
	//		СведенияОФайле.РасширениеБезТочки = ВерсияСсылка.Расширение;
	//		СведенияОФайле.ВремяИзменения = ВерсияСсылка.ДатаСоздания;
	//		СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияСсылка.ДатаМодификацииУниверсальная;
	//		СведенияОФайле.Размер = ВерсияСсылка.Размер;
	//		СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияСсылка.ДатаМодификацииУниверсальная;
	//		СведенияОФайле.НовыйСтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	//		СведенияОФайле.Зашифрован = Зашифровать;
	//		СведенияОФайле.ХранитьВерсии = Ложь;
	//		РаботаСФайламиСлужебныйВызовСервера.ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ВерсияСсылка, УникальныйИдентификатор);
	//		
	//		// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
	//		Если Не ПустаяСтрока(ДанныеДляЗаписиНаСервере.АдресФайла) И ЭтоАдресВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла) Тогда
	//			УдалитьИзВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	БлокировкаДанных = Новый БлокировкаДанных;
	//	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка)).ПолноеИмя());
	//	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлСсылка);
	//	БлокировкаДанных.Заблокировать();
	//	
	//	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	//	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	//	
	//	ФайлОбъект.Зашифрован = Зашифровать;
	//	ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения("");
	//	ФайлОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	//	
	//	// Чтобы прошла запись ранее подписанного объекта.
	//	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	//	
	//	Если Зашифровать Тогда
	//		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
	//			МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	//			МодульЭлектроннаяПодписьСлужебный.ДобавитьСертификатыШифрования(ФайлСсылка, МассивОтпечатков);
	//		КонецЕсли;
	//	Иначе
	//		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
	//			МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	//			МодульЭлектроннаяПодписьСлужебный.ОчиститьСертификатыШифрования(ФайлСсылка);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	МетаданныеФайла = Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка));
	//	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	//	
	//	МетаданныеФайла = Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка));
	//	ВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеФайла);
	//	Если Не ФайлОбъект.ХранитьВерсии Или (ВозможностьХранитьВерсии И Не ЗначениеЗаполнено(ФайлОбъект.ТекущаяВерсия)) Тогда
	//		РаботаСФайламиСлужебный.ОбновитьДвоичныеДанныеФайлаНаСервере(ФайлОбъект, АдресВременногоХранилищаОсновногоФайла);
	//	КонецЕсли;
	//	
	//	ФайлОбъект.Записать();
	//	
	//	РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
	//	
	//	ЗафиксироватьТранзакцию();
	//Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	//КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьФайлОбработан(ФайлСсылка, ИмяПроцедуры) Экспорт
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ФайлСсылка,,
		"РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений",
		ИмяПроцедуры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие функции.

Функция СписокРасширенийДляПредпросмотра() Экспорт
	
	// См. также перечисление ФорматКартинки.
	РасширенияДляПредпросмотра = Новый СписокЗначений;
	РасширенияДляПредпросмотра.Добавить("bmp");
	РасширенияДляПредпросмотра.Добавить("emf");
	РасширенияДляПредпросмотра.Добавить("gif");
	РасширенияДляПредпросмотра.Добавить("ico");
	РасширенияДляПредпросмотра.Добавить("icon");
	РасширенияДляПредпросмотра.Добавить("jpg");
	РасширенияДляПредпросмотра.Добавить("jpeg");
	РасширенияДляПредпросмотра.Добавить("png");
	РасширенияДляПредпросмотра.Добавить("tiff");
	РасширенияДляПредпросмотра.Добавить("tif");
	РасширенияДляПредпросмотра.Добавить("wmf");
	
	Возврат РасширенияДляПредпросмотра;
	
КонецФункции

Функция СписокРасширенийТекстовыхФайлов() Экспорт
	
	Возврат "TXT XML INI"; 
	
КонецФункции

Функция ПодготовитьСтруктуруПараметровОтправки() Экспорт
	
	Возврат Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
	
КонецФункции

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ИзвлечениеТекста;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
		Зависимость.ФункциональнаяОпция = МодульПолнотекстовыйПоискСервер.ФункциональнаяОпцияИспользоватьПолнотекстовыйПоиск();
	КонецЕсли;
	Зависимость.ДоступноВМоделиСервиса = Ложь;
	
	
КонецПроцедуры

// Отмечает файл, как редактируемый.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка или Объект присоединенного файла, который требуется отметить.
//
Процедура ЗанятьФайлДляРедактированияСервер(Знач ПрисоединенныйФайл, Пользователь = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)).ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
			БлокировкаДанных.Заблокировать();
			
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
		Иначе
			ФайлОбъект = ПрисоединенныйФайл;
		КонецЕсли;
		
		Если Пользователь = Неопределено Тогда
			ФайлОбъект.Редактирует = Пользователи.АвторизованныйПользователь();
		Иначе
			ФайлОбъект.Редактирует = Пользователь;
		КонецЕсли;
		ФайлОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//   Результат - Структура
//   ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайлОбъект
//   ВерсияФайла - СправочникСсылка.ВерсииФайлов
//
Процедура ЗаполнитьДополнительныеДанныеФайла(Результат, ПрисоединенныйФайл, ВерсияФайла = Неопределено) Экспорт
	
	СправочникПоддерживаетВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)));
	
	Если СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
		ТекущаяВерсияФайла = ПрисоединенныйФайл.ТекущаяВерсия;
	Иначе
		ТекущаяВерсияФайла = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Результат.Вставить("ТекущаяВерсия", ТекущаяВерсияФайла);
	
	Если ВерсияФайла <> Неопределено Тогда
		Результат.Вставить("Версия", ВерсияФайла);
	ИначеЕсли СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
		Результат.Вставить("Версия", ПрисоединенныйФайл.ТекущаяВерсия);
	Иначе
		Результат.Вставить("Версия", ПрисоединенныйФайл.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияФайла) Тогда
		ТекущаяВерсияОбъект = ВерсияФайла.ПолучитьОбъект();
		Результат.Вставить("НомерВерсии", ТекущаяВерсияОбъект.НомерВерсии);
		ТекущаяВерсияФайла = ВерсияФайла;
	Иначе
		Результат.Вставить("НомерВерсии", 0);
		ТекущаяВерсияФайла = Результат.Версия;
		ТекущаяВерсияОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Результат.Вставить("Наименование",                 ТекущаяВерсияОбъект.Наименование);
	Результат.Вставить("Расширение",                   ТекущаяВерсияОбъект.Расширение);
	Результат.Вставить("Размер",                       ТекущаяВерсияОбъект.Размер);
	Результат.Вставить("ДатаМодификацииУниверсальная", ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("Том",                          ТекущаяВерсияОбъект.Том);
	Результат.Вставить("Автор",                        ТекущаяВерсияОбъект.Автор);
	Результат.Вставить("СтатусИзвлеченияТекста",       ТекущаяВерсияОбъект.СтатусИзвлеченияТекста);
	Результат.Вставить("ПолноеНаименованиеВерсии",     СокрЛП(ТекущаяВерсияОбъект.Наименование));
	
	СтруктураКлюча = Новый Структура("Файл", ТекущаяВерсияФайла);
	КлючЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьКлючЗаписи(СтруктураКлюча);
	НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ДвоичныеДанныеФайла");
	Результат.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);
	
	КодировкаТекущейВерсии = ПолучитьКодировкуВерсииФайла(ТекущаяВерсияФайла);
	Результат.Вставить("КодировкаТекущейВерсии", КодировкаТекущейВерсии);
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НаЧтение = Результат.Редактирует <> ТекущийПользователь;
	Результат.Вставить("НаЧтение", НаЧтение);
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ИмяКаталога = РабочийКаталогПользователя();
	
	Если ЗначениеЗаполнено(ТекущаяВерсияФайла) Тогда
		ПолноеИмяФайлаВРабочемКаталоге = РаботаСФайламиСлужебныйВызовСервера.ПолучитьПолноеИмяФайлаИзРегистра(ТекущаяВерсияФайла, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	
		Результат.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	Результат.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
	Результат.Вставить("РабочийКаталогВладельца", "");
	
	РедактируетТекущийПользователь = (Результат.Редактирует = ТекущийПользователь);
	Результат.Вставить("РедактируетТекущийПользователь", РедактируетТекущийПользователь);
	
	СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
	Если Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен Тогда
		СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
	ИначеЕсли Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
		СтатусИзвлеченияТекстаСтрока = "Извлечен";
	ИначеЕсли Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось Тогда
		СтатусИзвлеченияТекстаСтрока = "ИзвлечьНеУдалось";
	КонецЕсли;
	Результат.Вставить("СтатусИзвлеченияТекста", СтатусИзвлеченияТекстаСтрока);
	
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	Результат.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);
	
КонецПроцедуры

// Возвращает путь к рабочему каталогу пользователя в настройках.
//
// Возвращаемое значение:
//  Строка - имя каталога.
//
Функция РабочийКаталогПользователя()
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяКаталога = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
	Если ИмяКаталога = Неопределено Тогда
		ИмяКаталога = "";
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции

// Возвращает ссылки на присоединенные файлы для указанного владельца.

//
// Параметры:
//  ВладелецФайлов - ОпределяемыйТип.ПрисоединенныйФайл
//  КромеПомеченныхНаУдаление - Булево
//
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ПрисоединенныйФайл
//
Функция ПрисоединенныеФайлыКОбъекту(Знач ВладелецФайлов, Знач КромеПомеченныхНаУдаление = Ложь) Экспорт
	
	ИменаСправочников = ИменаСправочниковХраненияФайлов(ВладелецФайлов, Истина);
	Если ИменаСправочников.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ТекстЗапросов = "";
	
	Для каждого КлючИЗначение Из ИменаСправочников Цикл
		
		Если ЗначениеЗаполнено(ТекстЗапросов) Тогда
			
			ТекстЗапросов = ТекстЗапросов + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
			
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов";
		
		Если Метаданные.Справочники[КлючИЗначение.Ключ].Иерархический = Истина Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И НЕ ПрисоединенныеФайлы.ЭтоГруппа";
		КонецЕсли;
		Если КромеПомеченныхНаУдаление Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + КлючИЗначение.Ключ);
		ТекстЗапросов = ТекстЗапросов + ТекстЗапроса;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапросов);
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает соответствие имен справочников и значения Булево
// для указанного владельца.
// 
// Параметры:
//  ВладелецФайлов - ЛюбаяСсылка - объект, к которому добавляется файл.
// 
Функция ИменаСправочниковХраненияФайлов(ВладелецФайлов, НеВызыватьИсключение = Ложь) Экспорт
	
	Если ТипЗнч(ВладелецФайлов) = Тип("Тип") Тогда
		ТипВладельцаФайлов = ВладелецФайлов;
	Иначе
		ТипВладельцаФайлов = ТипЗнч(ВладелецФайлов);
	КонецЕсли;
	
	МетаданныеВладельца = Метаданные.НайтиПоТипу(ТипВладельцаФайлов);
	
	ИменаСправочников = Новый Соответствие;
	
	Если МетаданныеВладельца <> Неопределено Тогда
		ИмяСтандартногоОсновногоСправочника = МетаданныеВладельца.Имя
			+ ?(СтрЗаканчиваетсяНа(МетаданныеВладельца.Имя, "ПрисоединенныеФайлы"), "", "ПрисоединенныеФайлы");
			
		Если Метаданные.Справочники.Найти(ИмяСтандартногоОсновногоСправочника) <> Неопределено Тогда
			ИменаСправочников.Вставить(ИмяСтандартногоОсновногоСправочника, Истина);
		ИначеЕсли Метаданные.ОпределяемыеТипы.ВладелецФайлов.Тип.СодержитТип(ТипВладельцаФайлов) Тогда
			ИменаСправочников.Вставить(Метаданные.Справочники.Файлы.Имя, Истина);
		КонецЕсли;
		
		// Переопределение стандартного справочника хранения присоединенных файлов.
		РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов(
			ТипВладельцаФайлов, ИменаСправочников);

	КонецЕсли;
	
	ОсновнойСправочникУказан = Ложь;
	Ошибки = Новый Массив;
	Ошибки.Добавить(НСтр("ru = 'Ошибка при определении имен справочников для хранения файлов.'"));

	Для каждого КлючИЗначение Из ИменаСправочников Цикл
		
		Если Метаданные.Справочники.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			
			Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У владельца файлов типа ""%1""
					|указан несуществующий справочник ""%2"".'"),
				Строка(ТипВладельцаФайлов), Строка(КлючИЗначение.Ключ)));
				
		ИначеЕсли Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "ПрисоединенныеФайлы") И Не КлючИЗначение.Ключ ="Файлы" Тогда
			
			Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У владельца файлов типа ""%1""
					|указано имя справочника ""%2""
					|без обязательного постфикса ""%3"".'"),
				Строка(ТипВладельцаФайлов), Строка(КлючИЗначение.Ключ), "ПрисоединенныеФайлы"));
			
		ИначеЕсли КлючИЗначение.Значение = Неопределено Тогда
			ИменаСправочников.Вставить(КлючИЗначение.Ключ, Ложь);
			
		ИначеЕсли КлючИЗначение.Значение = Истина Тогда
			Если ОсновнойСправочникУказан Тогда
				Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У владельца файлов типа ""%1""
						|основной справочник указан более одного раза.'"),
					Строка(ТипВладельцаФайлов), Строка(КлючИЗначение.Ключ)));
			КонецЕсли;
			ОсновнойСправочникУказан = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаСправочников.Количество() = 0 Тогда
		
		Если НеВызыватьИсключение Тогда
			Возврат ИменаСправочников;
		КонецЕсли;
		
		Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У владельца файлов типа ""%1""
				|не имеется справочников для хранения файлов.'"),
			Строка(ТипВладельцаФайлов)));
		ВызватьИсключение СтрСоединить(Ошибки, Символы.ПС + Символы.ПС);
	КонецЕсли;
	
	Если Ошибки.Количество() > 1 Тогда
		ВызватьИсключение СтрСоединить(Ошибки, Символы.ПС + Символы.ПС);
	КонецЕсли; 
	
	Возврат ИменаСправочников;
	
КонецФункции

// Возвращает имя справочника для указанного владельца или вызывает исключение,
// если их более одного.
// 
// Параметры:
//  ВладелецФайлов  - Ссылка - объект, к которому добавляется файл.
//  ИмяСправочника  - Строка, если заполнено, то выполняется проверка
//                    наличия справочника среди справочников владельца для хранения файлов.
//                    Если не заполнено, возвращает имя основного справочника.
//  ЗаголовокОшибки - Строка - заголовок ошибки.
//                  - Неопределено - не вызывать исключение, а вернуть пустую строку.
//  ИмяПараметра    - Строка - имя требуемого параметра для определения имени справочника.
//  ОкончаниеОшибки - Строка - окончание ошибки (только для случая, когда ИмяПараметра = Неопределено).
// 
// Возвращаемое значение:
//  Строка - имя справочника
//
Функция ИмяСправочникаХраненияФайлов(ВладелецФайлов, ИмяСправочника = "",
	ЗаголовокОшибки = Неопределено, ОкончаниеОшибки = Неопределено) Экспорт
	
	НеВызыватьИсключение = (ЗаголовокОшибки = Неопределено);
	ИменаСправочников = ИменаСправочниковХраненияФайлов(ВладелецФайлов, НеВызыватьИсключение);
	
	Если ИменаСправочников.Количество() = 0 Тогда
		Если НеВызыватьИсключение Тогда
			Возврат "";
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС
			+ НСтр("ru = 'У владельца файлов ""%1"" типа ""%2""
			             |нет справочников для хранения файлов.'"),
			Строка(ВладелецФайлов),
			Строка(ТипЗнч(ВладелецФайлов)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяСправочника) Тогда
		Если ИменаСправочников[ИмяСправочника] <> Неопределено Тогда
			Возврат ИмяСправочника;
		КонецЕсли;
	
		Если НеВызыватьИсключение Тогда
			Возврат "";
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС
			+ НСтр("ru = 'У владельца файлов ""%1"" типа ""%2""
			             |нет справочника ""%3"" для хранения файлов.'"),
			Строка(ВладелецФайлов),
			Строка(ТипЗнч(ВладелецФайлов)),
			Строка(ИмяСправочника));
	КонецЕсли;
	
	ОсновнойСправочник = "";
	Для каждого КлючИЗначение Из ИменаСправочников Цикл
		Если КлючИЗначение.Значение = Истина Тогда
			ОсновнойСправочник = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОсновнойСправочник) Тогда
		Возврат ОсновнойСправочник;
	КонецЕсли;
		
	Если НеВызыватьИсключение Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонПричиныОшибки = 
		НСтр("ru = 'У владельца файлов ""%1"" типа ""%2""
			|не указан основной справочник для хранения файлов.'") + Символы.ПС;
			
	ПричинаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонПричиныОшибки, Строка(ВладелецФайлов), Строка(ТипЗнч(ВладелецФайлов)));
		
	ТекстОшибки = ЗаголовокОшибки + Символы.ПС
		+ ПричинаОшибки + Символы.ПС
		+ ОкончаниеОшибки;
		
	ВызватьИсключение СокрЛП(ТекстОшибки);
	
КонецФункции


Функция ЭтоПапкаФайлов(ОбъектВладелец) Экспорт
	
	Возврат ТипЗнч(ОбъектВладелец) = Тип("СправочникСсылка.ПапкиФайлов");
	
КонецФункции

// Определяет наличие опционального реквизита Служебный в метаданных справочника.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника в метаданных.
//
// Возвращаемое значение:
//  Булево - наличие реквизита Служебный.
//
Функция ЕстьРеквизитСлужебный(Знач ИмяСправочника) Экспорт
	
	ОбъектМетаданных  = Метаданные.Справочники[ИмяСправочника];
	РеквизитСлужебный = ОбъектМетаданных.Реквизиты.Найти("Служебный");
	Возврат РеквизитСлужебный <> Неопределено;
	
КонецФункции

// Возвращает тип хранения файлов с учетом наличия томов.
// Если томов хранения файлов нет, тогда хранение в ИБ.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыХраненияФайлов
//
Функция ТипХраненияФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	
	Если ХранитьФайлыВТомахНаДиске Тогда
		
		Если РаботаСФайлами.ЕстьТомаХраненияФайлов() Тогда
			Возврат Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		Иначе
			Возврат Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		КонецЕсли;
		
	Иначе
		Возврат Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	КонецЕсли;

КонецФункции

// Записывает двоичные данные файла в информационную базу.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на присоединенный файл.
//  ДвоичныеДанные     - ДвоичныеДанные - которые требуется записать.
//
Процедура ЗаписатьФайлВИнформационнуюБазу(Знач ПрисоединенныйФайл, Знач ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи                     = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл                = ПрисоединенныйФайл;
	МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Извлекает текст из временного хранилища или из двоичных данных, возвращает статус извлечения.
//
// Параметры:
//   АдресВременногоХранилищаТекста - Строка
//   ДвоичныеДанные                 - ДвоичныеДанные
//                                  - Неопределено
//   Расширение                     - Строка
//                                  - Неопределено
Функция ИзвлечьТекст(Знач АдресВременногоХранилищаТекста, Знач ДвоичныеДанные = Неопределено, Знач Расширение = Неопределено) Экспорт
	
	Результат = Новый Структура("СтатусИзвлеченияТекста, ТекстХранилище");
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
		ИзвлеченныйТекст = СтрокаИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		Результат.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст, Новый СжатиеДанных(9));
		Возврат Результат;
	КонецЕсли;
		
	Если ИзвлекатьТекстыФайловНаСервере() Тогда
		Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		Результат.ТекстХранилище = Новый ХранилищеЗначения("");
		Возврат Результат; // Текст будет извлечен позднее в регламентном задании.
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоWindowsСервер() Или ДвоичныеДанные = Неопределено Тогда
		Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		Результат.ТекстХранилище = Новый ХранилищеЗначения("");
		Возврат Результат;
	КонецЕсли;
	
	// Текст извлекается сразу, а не в регламентном задании.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	Результат = ИзвлечьТекстИзФайлаНаДиске(ИмяВременногоФайла);
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Извлечение текста'",	ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Возврат Результат;
		
КонецФункции

Функция ИзвлечьТекстИзФайлаНаДиске(Знач ИмяФайла, Знач Кодировка = Неопределено) Экспорт
	
	ИзвлеченныйТекст = "";
	Результат = Новый Структура("СтатусИзвлеченияТекста, ТекстХранилище");
	Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	
	Попытка
		Файл = Новый Файл(ИмяФайла);
		Если Не Файл.Существует() Тогда
			Возврат Результат;
		КонецЕсли;
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Отказ = Ложь;
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();	
	
	РасширениеИмениФайла =
		ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	
	РасширениеФайлаВСписке = ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(
		ОбщиеНастройки.СписокРасширенийТекстовыхФайлов, РасширениеИмениФайла);
	
	Если РасширениеФайлаВСписке Тогда
		
		ИзвлеченныйТекст = ФайловыеФункцииКлиентСервер.ИзвлечьТекстИзТекстовогоФайла(
			ИмяФайла, Кодировка, Отказ);
			
	Иначе
	
		Попытка
			Извлечение = Новый ИзвлечениеТекста(ИмяФайла);
			ИзвлеченныйТекст = Извлечение.ПолучитьТекст();
		Исключение
			// Когда текст некому извлечь исключение не требуется. Это нормальный случай.
			ИзвлеченныйТекст = "";
			Отказ = Истина;
		КонецПопытки;
		
		Если ПустаяСтрока(ИзвлеченныйТекст) Тогда
			
			РасширениеИмениФайла =
				ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
			
			РасширениеФайлаВСписке = ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(
				ОбщиеНастройки.СписокРасширенийФайловOpenDocument, РасширениеИмениФайла);
			
			Если РасширениеФайлаВСписке Тогда
				ИзвлеченныйТекст = ФайловыеФункцииКлиентСервер.ИзвлечьТекстOpenDocument(ИмяФайла, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		Результат.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает строку из временного хранилища (передача с клиента на сервер,
// делается через временное хранилище).
//
Функция СтрокаИзВременногоХранилища(АдресВременногоХранилищаТекста)
	
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТекста).Записать(ИмяВременногоФайла);
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Извлечение текста'",	ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

// Возвращает Истина, если текст из файлов извлекается на сервере, а не на клиенте.
//
// Возвращаемое значение:
//  Булево. Ложь - если текст не извлекается на сервере,
//                 т.е. может и должен быть извлечен на клиенте.
//
Функция ИзвлекатьТекстыФайловНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	
КонецФункции

// Создает версию сохраняемого файла для сохранения в ИБ.
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы - файл, для которого создается новая версия.
//   СведенияОФайле - см. РаботаСФайламиКлиентСервер.СведенияОФайле
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная версия.
//
Функция СоздатьВерсию(ФайлСсылка, СведенияОФайле) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Ссылка", Истина);
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(СведенияОФайле.ВремяИзмененияУниверсальное)
		Или СведенияОФайле.ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияОФайле.ВремяИзменения)
		Или УниверсальноеВремя(СведенияОФайле.ВремяИзменения) > СведенияОФайле.ВремяИзмененияУниверсальное Тогда
		
		СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПроверитьРасширениеФайлаДляЗагрузки(СведенияОФайле.РасширениеБезТочки);
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Если СведенияОФайле.НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
	Иначе
		Версия.НомерВерсии = СведенияОФайле.НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец                     = ФайлСсылка;
	Версия.ДатаМодификацииУниверсальная = СведенияОФайле.ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла         = СведенияОФайле.ВремяИзменения;
	Версия.Комментарий                  = СведенияОФайле.НоваяВерсияКомментарий;
	
	Версия.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(СведенияОФайле.РасширениеБезТочки);
	
	Если СведенияОФайле.НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Пользователи.АвторизованныйПользователь();
	Иначе
		Версия.Автор = СведенияОФайле.НоваяВерсияАвтор;
	КонецЕсли;
	
	Если СведенияОФайле.НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = СведенияОФайле.НоваяВерсияДатаСоздания;
	КонецЕсли;
	
	Версия.Размер             = СведенияОФайле.Размер;
	Версия.Расширение         = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	Версия.Наименование       = СведенияОФайле.ИмяБезРасширения;
	Версия.ПолноеНаименование = Версия.Наименование;
	
	ТипХраненияФайлов = ТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;

	Если СведенияОФайле.СсылкаНаВерсиюИсточник <> Неопределено Тогда // создание Файла из шаблона
		
		ТипХраненияФайловШаблона = СведенияОФайле.СсылкаНаВерсиюИсточник.ТипХраненияФайла;
		
		Если ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// И шаблон, и новый Файл - в базе.
			// При создании Файла из шаблона хранилище значения копируется напрямую.
			ДвоичныеДанныеИлиПуть = СведенияОФайле.АдресВременногоХранилищаФайла.Получить();
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			//  И шаблон, и новый Файл - на диске - просто копируем файл.
			
			Если Не СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том) 
					+ СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				
				Сведения = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ПолныйПутьФайлаШаблона, СведенияОФайле.ВремяИзмененияУниверсальное,
					СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки, Версия.НомерВерсии, СведенияОФайле.Зашифрован);
				Версия.Том = Сведения.Том;
				Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
			КонецЕсли;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// Шаблон в базе, новый Файл - на диске.
			// В этом случае в АдресВременногоХранилищаФайла находится ХранилищеЗначения с файлом.
			Сведения = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(СведенияОФайле.АдресВременногоХранилищаФайла.Получить(),
				СведенияОФайле.ВремяИзмененияУниверсальное, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки,
				Версия.НомерВерсии, СведенияОФайле.Зашифрован);
			Версия.Том = Сведения.Том;
			Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// Шаблон на диске, новый Файл - в базе.
			Если Не СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том) + СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				ДвоичныеДанныеИлиПуть = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
			КонецЕсли;
			
		КонецЕсли;
	Иначе // Создание объекта Файл на основе выбранного файла с диска.
	
		Если ЭтоАдресВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла) Тогда
		
			ДвоичныеДанныеИлиПуть = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
			
			Если Версия.Размер = 0 Тогда
				Версия.Размер = ДвоичныеДанныеИлиПуть.Размер();
				ПроверитьРазмерФайлаДляЗагрузки(Версия);
			КонецЕсли;
			
			Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ПутьКФайлу = "";
				Том = Неопределено;
				ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанныеИлиПуть, ПутьКФайлу, Том,
					СведенияОФайле.ВремяИзмененияУниверсальное,Версия.НомерВерсии, 
					СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки); 
				Версия.Том = Том;
				Версия.ПутьКФайлу = ПутьКФайлу;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	Если Метаданные.Справочники.ВерсииФайлов.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
		Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
			// При создании Файла из шаблона хранилище значения копируется напрямую.
			Версия.ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
			РезультатИзвлеченияТекста = ИзвлечьТекст(СведенияОФайле.АдресВременногоХранилищаТекста);
			Версия.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
			Версия.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
		КонецЕсли;
	КонецЕсли;

	Версия.Заполнить(Неопределено);
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ДвоичныеДанныеИлиПуть);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Вызывает исключение, если файл имеет недопустимый размер для загрузки.
Процедура ПроверитьРазмерФайлаДляЗагрузки(Файл) Экспорт
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	Если ТипЗнч(Файл) = Тип("Файл") Тогда
		Размер = Файл.Размер();
	Иначе
		Размер = Файл.Размер;
	КонецЕсли;
	
	Если Размер > ОбщиеНастройки.МаксимальныйРазмерФайла Тогда
	
		РазмерВМб     = Размер / (1024 * 1024);
		РазмерВМбМакс = ОбщиеНастройки.МаксимальныйРазмерФайла / (1024 * 1024);
		
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			Имя = Файл.Имя;
		Иначе
			Имя = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				Файл.ПолноеНаименование, Файл.Расширение);
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб)
			           |превышает максимально допустимый размер файла (%3 Мб).'"),
			Имя,
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
КонецПроцедуры

// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - ссылка на файл.
//
// Возвращаемое значение:
//   Число  - максимальный номер версии.
//
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат ?(Выборка.МаксимальныйНомер = Null, 0, Число(Выборка.МаксимальныйНомер));
		
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Возвращает Истина, если файл с таким расширением можно загружать.
//
// Параметры:
//  РасширениеФайла - Строка
//  ВызыватьИсключение - Булево
// 
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, ВызыватьИсключение = Истина) Экспорт
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	Если НЕ ОбщиеНастройки.ЗапретЗагрузкиФайловПоРасширению Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(
		ОбщиеНастройки.СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
				           |Обратитесь к администратору.'"),
				РасширениеФайла);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает типы объектов метаданных присоединенных файлов.
//
// Возвращаемое значение:
//  ОписаниеТипов.
//
Функция ТипыПрисоединенныхФайлов() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип;
КонецФункции

// Возвращает общий модуль реализующий обработчики событий:
//    ПередОбновлениемДанныхФайла;
//    ПриОбновленииДанныхФайла;
//    ПослеОбновленияДанныхФайла.
// 
// Для файла должен быть установлен тип хранения файла.
// 
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл
// 
// Возвращаемое значение:
//     ОбщийМодуль
//
Функция МенеджерФайлов(ПрисоединенныйФайл) Экспорт
	Возврат МенеджерФайловПоТипу(ПрисоединенныйФайл.ТипХраненияФайла);
КонецФункции

// Возвращает общий модуль реализующий обработчики событий:
//    ПередОбновлениемДанныхФайла;
//    ПриОбновленииДанныхФайла;
//    ПослеОбновленияДанныхФайла.
// 
// Параметры:
//  ТипХраненияФайла - ПеречислениеСсылка.ТипыХраненияФайлов
// 
// Возвращаемое значение:
//     ОбщийМодуль
//
Функция МенеджерФайловПоТипу(ТипХраненияФайла) Экспорт
	Возврат РаботаСФайламиСлужебный;
КонецФункции

// Контекст обновления файла.
// Должен инициализироваться, когда основные данные файла установлены или изменены.
// 
// Параметры:
//    ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайлОбъект - ссылка или объект файла.
//                       - ОпределяемыйТип.ПрисоединенныйФайл
//     ДанныеФайла - Строка - АдресВоВременномХранилище
//                 - ДвоичныеДанные
//    СсылкаНаФайл - ОпределяемыйТип.ПрисоединенныйФайл - если задана, то будет используется в качестве ссылки.
//    													  Используется в случаях, когда для нового файла установлена ссылка нового. 
//    ТипХраненияФайла - см. МенеджерФайловПоТипу.
// 
// Возвращаемое значение:
//  Структура - контекст обновления файла:
//   * ИзменяемыеРеквизиты - Структура - значение реквизитов, устанавливаемые перед записью присоединенного файла.
//   * ПрисоединенныйФайл - см. КонтекстОбновленияФайла.ПрисоединенныйФайл
//   * ДанныеФайла - см. КонтекстОбновленияФайла.ДанныеФайла
//   * СтарыйПутьКФайлу - Строка
//   * ПараметрыДобавленияФайла - см. РаботаСФайламиВТомахСлужебный.ПараметрыДобавленияФайла
//
Функция КонтекстОбновленияФайла(ПрисоединенныйФайл, ДанныеФайла, СсылкаНаФайл = Неопределено, ТипХраненияФайла = Неопределено) Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ИзменяемыеРеквизиты", Новый Структура);
	Контекст.Вставить("СтарыйПутьКФайлу", "");
	Контекст.Вставить("ПараметрыДобавленияФайла", ПараметрыДобавленияФайла());
	Контекст.Вставить("ЭтоНовый", Ложь);
	Контекст.Вставить("ПрисоединенныйФайл", Неопределено);
	ТипПараметраФайла = ТипЗнч(ПрисоединенныйФайл);
	Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипПараметраФайла)  Тогда
		Контекст.ЭтоНовый =  ПрисоединенныйФайл.ЭтоНовый();
	КонецЕсли;
	Контекст.ПрисоединенныйФайл = ?(ЗначениеЗаполнено(СсылкаНаФайл), СсылкаНаФайл, ПрисоединенныйФайл.Ссылка);
	
	ЗаполнитьЗначенияСвойств(Контекст.ПараметрыДобавленияФайла, ПрисоединенныйФайл);
	Контекст.ПараметрыДобавленияФайла.ТипХраненияФайла = ТипХраненияФайла;
	
	Если ТипЗнч(ДанныеФайла) = Тип("Строка") И ЭтоАдресВременногоХранилища(ДанныеФайла) Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла);
	Иначе
		// Без изменений
	КонецЕсли;
	
	Контекст.Вставить("ДанныеФайла", ДанныеФайла);
	Возврат Контекст;
КонецФункции

// Параметры:
//  Контекст - см. КонтекстОбновленияФайла
//
Процедура ПередОбновлениемДанныхФайла(Контекст) Экспорт
	Возврат; // Не используется
КонецПроцедуры

// Вызывается в транзакции модификации после записи присоединенного файла.
// 
// Параметры:
//  Контекст - см. КонтекстОбновленияФайла
//  ПрисоединенныйФайлОбъект - ОпределяемыйТип.ПрисоединенныйФайлОбъект
//
Процедура ПередЗаписьюДанныхФайла(Контекст, ПрисоединенныйФайлОбъект) Экспорт
	Возврат; // Не используется
КонецПроцедуры

// Вызывается в транзакции модификации после записи присоединенного файла.
// 
// Параметры:
//  Контекст - см. КонтекстОбновленияФайла
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл
//
Процедура ПриОбновленииДанныхФайла(Контекст, ПрисоединенныйФайл) Экспорт
	ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайл, Контекст.ДанныеФайла);
КонецПроцедуры

// Параметры:
//  Контекст - см. КонтекстОбновленияФайла
//  Успешно - Булево - Истина, если транзакция успешно зафиксирована.
//
Процедура ПослеОбновленияДанныхФайла(Контекст, Успешно) Экспорт
	Возврат; // Не используется
КонецПроцедуры

// Подставляет ссылку на версию в карточку Файла.
//
// Параметры:
//   ФайлСсылка - СправочникСсылка.Файлы - файл, в котором создается версия.
//   Версия  - СправочникСсылка.ВерсииФайлов - версия файла.
//   АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с
//                                           файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные
//                                           данные с файлом текста.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ОбновитьВерсиюВФайле(ФайлСсылка,
								Версия,
								Знач АдресВременногоХранилищаТекста,
								УникальныйИдентификатор = Неопределено) Экспорт
	
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	
	НачатьТранзакцию();
	Попытка
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка));
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(МетаданныеСправочника.ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлСсылка);
		БлокировкаДанных.Заблокировать();
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		
		ФайлОбъект.ТекущаяВерсия = Версия.Ссылка;
		Если МетаданныеСправочника.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
			Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
				// При создании Файла из шаблона хранилище значения копируется напрямую.
				ФайлОбъект.ТекстХранилище = АдресВременногоХранилищаТекста;
			Иначе
				РезультатИзвлеченияТекста = ИзвлечьТекст(АдресВременногоХранилищаТекста);
				ФайлОбъект.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
				ФайлОбъект.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
			КонецЕсли;
		Иначе
			ФайлОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения("");
		КонецЕсли;
		
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет свойства файла БЕЗ учета версий - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства.
//
Процедура ОбновитьФайл(ИнформацияОФайле, ПрисоединенныйФайл) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	
	РеквизитыЗначения = Новый Структура;
	
	Если ИнформацияОФайле.Свойство("ИмяБезРасширения") И ЗначениеЗаполнено(ИнформацияОФайле.ИмяБезРасширения) Тогда
		РеквизитыЗначения.Вставить("Наименование", ИнформацияОФайле.ИмяБезРасширения);
	КонецЕсли;
	
	Если НЕ ИнформацияОФайле.Свойство("ДатаМодификацииУниверсальная")
		ИЛИ НЕ ЗначениеЗаполнено(ИнформацияОФайле.ДатаМодификацииУниверсальная)
		ИЛИ ИнформацияОФайле.ДатаМодификацииУниверсальная > ТекущаяУниверсальнаяДата() Тогда
		
		// Заполнение текущей даты в формате универсального времени.
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	Иначе
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ИнформацияОФайле.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Редактирует") Тогда
		РеквизитыЗначения.Вставить("Редактирует", ИнформацияОФайле.Редактирует);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Расширение") Тогда
		РеквизитыЗначения.Вставить("Расширение", ИнформацияОФайле.Расширение);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Кодировка")
		И Не ПустаяСтрока(ИнформацияОФайле.Кодировка) Тогда
		
		РаботаСФайламиСлужебныйВызовСервера.ЗаписатьКодировкуВерсииФайла(ПрисоединенныйФайл, ИнформацияОФайле.Кодировка);
		
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
	
	МетаданныеФайла = Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл));
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	Если МетаданныеФайла.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
		РезультатИзвлеченияТекста = ИзвлечьТекст(ИнформацияОФайле.АдресВременногоХранилищаТекста, ДвоичныеДанные,
			ПрисоединенныйФайл.Расширение);
		РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", РезультатИзвлеченияТекста.СтатусИзвлеченияТекста);
		РеквизитыЗначения.Вставить("ТекстХранилище", РезультатИзвлеченияТекста.ТекстХранилище);
	Иначе
		РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
		РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(""));
	КонецЕсли;
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайл, ДвоичныеДанные, РеквизитыЗначения);
	
КонецПроцедуры

// Заменяет двоичные данные файла в ИБ на данные во временном хранилище.
Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(Знач ПрисоединенныйФайл,
	                                           Знач АдресФайлаВоВременномХранилищеДвоичныеДанные,
	                                           Знач РеквизитыЗначения = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоСсылка = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл));
	
	Контекст = КонтекстОбновленияФайла(ПрисоединенныйФайл, АдресФайлаВоВременномХранилищеДвоичныеДанные);
	МенеджерФайла = МенеджерФайлов(ПрисоединенныйФайл);
	МенеджерФайла.ПередОбновлениемДанныхФайла(Контекст);
	
	НачатьТранзакцию();
	Попытка
		Если ЭтоСсылка Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)).ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
			БлокировкаДанных.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(ПрисоединенныйФайл);
			
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлСсылка = ПрисоединенныйФайл;
		Иначе
			ФайлОбъект = ПрисоединенныйФайл;
			ФайлСсылка = ФайлОбъект.Ссылка;
		КонецЕсли;
		
		Если ТипЗнч(АдресФайлаВоВременномХранилищеДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = АдресФайлаВоВременномХранилищеДвоичныеДанные;
		Иначе
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилищеДвоичныеДанные);
		КонецЕсли;
		
		ФайлОбъект.Изменил = Пользователи.АвторизованныйПользователь();
		
		Если ТипЗнч(РеквизитыЗначения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ФайлОбъект, РеквизитыЗначения);
		КонецЕсли;
		
		ЭтоФайлВБазе = (ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);
		Если ЭтоФайлВБазе Тогда
			ОбновитьДвоичныеДанныеФайлаВИнформационнойБазе(ФайлОбъект, ФайлСсылка, ДвоичныеДанные);
		КонецЕсли;
		
		МенеджерФайла.ПередЗаписьюДанныхФайла(Контекст, ФайлОбъект);
		ФайлОбъект.Записать();
		МенеджерФайла.ПриОбновленииДанныхФайла(Контекст, ФайлОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
	МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Истина);
	
	Если Не ЭтоФайлВБазе Тогда
		ОбновитьДвоичныеДанныеФайлаВТоме(ФайлОбъект, ФайлСсылка, ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДвоичныеДанныеФайлаВИнформационнойБазе(ФайлОбъект, ФайлСсылка, ДвоичныеДанные)
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.РегистрыСведений.ДвоичныеДанныеФайлов.ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Файл", ФайлСсылка);
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Файл = ФайлСсылка;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Файл = ФайлСсылка;
		МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
		МенеджерЗаписи.Записать();
		
		ФайлОбъект.Размер = ДвоичныеДанные.Размер();
		ФайлОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Файлы.Обновление данных присоединенного файла в хранилище файлов'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДвоичныеДанныеФайлаВТоме(ФайлОбъект, ФайлСсылка, ДвоичныеДанные)
	
	Попытка
		
		ПолныйПуть = ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		Если Не ПустаяСтрока(ПолныйПуть) Тогда
			
			ФайлНаДиске = Новый Файл(ПолныйПуть);
			Если ФайлНаДиске.Существует() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(
			ДвоичныеДанные, 
			ФайлОбъект.ДатаМодификацииУниверсальная,
			ФайлОбъект.Наименование, ФайлОбъект.Расширение,, ФайлОбъект.Зашифрован);
		ФайлОбъект.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		ФайлОбъект.Том = СведенияОФайле.Том;
		ФайлОбъект.Размер = ДвоичныеДанные.Размер();
		ФайлОбъект.Записать();
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Запись файла на диск'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ФайлСсылка.Метаданные().Имя],
			ФайлСсылка,
			ТекстОшибкиПриСохраненииФайлаВТоме(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ФайлСсылка));
		
		ВызватьИсключение ТекстОшибкиПриСохраненииФайлаВТоме(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ФайлСсылка);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриСохраненииФайлаВТоме(Знач СообщениеОбОшибке, Знач Файл)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка, при сохранении файла в томе:
		           |""%1"".
		           |
		           |Ссылка на файл: ""%2"".'"),
		СообщениеОбОшибке,
		ПолучитьНавигационнуюСсылку(Файл) );
	
КонецФункции

// Создает у Получателя копии всех присоединенных файлов Источника.
// Источник и Получатель должны быть объектами одного типа.
//
// Параметры:
//  Источник   - Ссылка - объект, имеющий присоединенные файлы для копирования.
//  Получатель - Ссылка - объект, к которому копируются присоединенные файлы.
//
Процедура СкопироватьПрисоединенныеФайлы(Знач Источник, Знач Получатель) Экспорт
	
	ДоступнаЭлектроннаяПодпись = Неопределено;
	МодульЭлектроннаяПодписьСлужебный = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	КонецЕсли;
	
	КопируемыеФайлы = ПрисоединенныеФайлыКОбъекту(Источник.Ссылка, Истина);
	Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл
		Если ДоступнаЭлектроннаяПодпись = Неопределено Тогда
			ДоступнаЭлектроннаяПодпись = (МодульЭлектроннаяПодписьСлужебный <> Неопределено) 
				И (МодульЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(КопируемыйФайл)));
		КонецЕсли;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КопируемыйФайл, "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию();
		Попытка
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КопируемыйФайл);
			КопияФайла = КопируемыйФайл.Скопировать();
			КопияФайлаСсылка = МенеджерОбъекта.ПолучитьСсылку();
			КопияФайла.УстановитьСсылкуНового(КопияФайлаСсылка);
			КопияФайла.ВладелецФайла = Получатель.Ссылка;
			КопияФайла.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			
			КопияФайла.ТекстХранилище = КопируемыйФайл.ТекстХранилище;
			КопияФайла.СтатусИзвлеченияТекста = КопируемыйФайл.СтатусИзвлеченияТекста;
			КопияФайла.ФайлХранилище = КопируемыйФайл.ФайлХранилище;
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(КопируемыйФайл);
			КопияФайла.ТипХраненияФайла = ТипХраненияФайлов();
			
			Если ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
			Иначе
				// Добавить в один из томов (где есть свободное место).
				СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, КопияФайла.ДатаМодификацииУниверсальная,
					КопияФайла.Наименование, КопияФайла.Расширение);
				КопияФайла.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
				КопияФайла.Том = СведенияОФайле.Том;
			КонецЕсли;
			КопияФайла.Записать();
			
			Если ДоступнаЭлектроннаяПодпись Тогда
				УстановленныеПодписи = МодульЭлектроннаяПодпись.УстановленныеПодписи(КопируемыйФайл);
				МодульЭлектроннаяПодпись.ДобавитьПодпись(КопияФайла.Ссылка, УстановленныеПодписи);
				
				СертификатыИсточника = МодульЭлектроннаяПодпись.СертификатыШифрования(КопируемыйФайл);
				МодульЭлектроннаяПодпись.ЗаписатьСертификатыШифрования(КопияФайла, СертификатыИсточника);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Отменяет редактирование файла.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл
//                     - ОпределяемыйТип.ПрисоединенныйФайлОбъект - ссылка или 
//                     объект присоединенного файла, который требуется освободить.
//
Процедура ОсвободитьФайл(Знач ПрисоединенныйФайл) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
			БлокировкаДанных              = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных       = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)).ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
			БлокировкаДанных.Заблокировать();
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		Иначе
			ФайлОбъект = ПрисоединенныйФайл;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
			ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
КонецПроцедуры

// Переносит сведения об электронных подписях файла из табличной части файла в регистр сведений.
//
// Параметры:
//   Параметры - Структура - параметры выполнения отложенного обработчика обновления.
//
Процедура ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	ПолныеИменаСправочников = ПолныеИменаСправочниковПрисоединенныхФайлов();
	
	Для Каждого ПолноеИмяСправочника Из ПолныеИменаСправочников Цикл
		ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы(Параметры,
			ПолноеИмяСправочника, ОбработкаЗавершена);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

// Позволяет перенести элементы табличных частей УдалитьЭлектронныеПодписи и УдалитьСертификатыШифрования
// в регистры сведений ЭлектронныеПодписи и СертификатыШифрования.
//
// Параметры:
//  ПараметрыОбновления        - Структура - структура параметров отложенного обработчика обновления.
//
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, из которого переносятся данные табличных частей
//                                        УдалитьЭлектронныеПодписи и УдалитьСертификатыШифрования.
//  ОбработкаЗавершена         - Булево - Истина, если обработаны все данные при обновлении ИБ.
//
Процедура ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы(ПараметрыОбновления, ПолноеИмяОбъектаМетаданных, ОбработкаЗавершена)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан объект для обработки электронных подписей и сертификатов шифрования.'");
	КонецЕсли;
	
	ЕстьТабличнаяЧастьЭП = ОбъектМетаданных.ТабличныеЧасти.Найти("УдалитьЭлектронныеПодписи") <> Неопределено;
	ЕстьТабличнаяЧастьСШ = ОбъектМетаданных.ТабличныеЧасти.Найти("УдалитьСертификатыШифрования") <> Неопределено;
	
	ВыборкаСсылок = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(ПараметрыОбновления.Очередь, ПолноеИмяОбъектаМетаданных);
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	МассивСсылок = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаСсылок.Следующий() Цикл
			МассивСсылок.Добавить(ВыборкаСсылок.Ссылка);
		КонецЦикла;
		
		Если ЕстьТабличнаяЧастьЭП Тогда
			ПеренестиДанныеЭлектроннойПодписиВРегистрСведений(МассивСсылок,
				ПолноеИмяОбъектаМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если ЕстьТабличнаяЧастьСШ Тогда
			ПеренестиДанныеСертификатовВРегистрСведений(МассивСсылок, ПолноеИмяОбъектаМетаданных);
		КонецЕсли;
		
		Для Каждого ОбъектСЭП Из МассивСсылок Цикл
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектСЭП);
		КонецЦикла;
		ОбъектовОбработано = МассивСсылок.Количество();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		// Если не удалось обработать какой-либо объект, требуется повторить попытку.
		ПроблемныхОбъектов = ПроблемныхОбъектов + МассивСсылок.Количество();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать объект: %1 по причине:
			           |%2'"),
			ОбъектМетаданных,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, ОбъектМетаданных, , ТекстСообщения);
	КонецПопытки;
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(ПараметрыОбновления.Очередь, ПолноеИмяОбъектаМетаданных) Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений не удалось обработать некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			ОбъектМетаданных,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений обработала очередную порцию объектов: %1'"),
				ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы.
Процедура ПеренестиДанныеЭлектроннойПодписиВРегистрСведений(МассивОбъектов, ПолноеИмяОбъектаМетаданных, ОбъектМетаданных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ОбъектСДанными Из МассивОбъектов Цикл
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаМетаданных);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСДанными);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧЭлектронныеПодписи.Ссылка КАК ПодписанныйОбъект,
		|	ТЧЭлектронныеПодписи.ДатаПодписи,
		|	ТЧЭлектронныеПодписи.ИмяФайлаПодписи,
		|	ТЧЭлектронныеПодписи.Комментарий,
		|	ТЧЭлектронныеПодписи.КомуВыданСертификат,
		|	ТЧЭлектронныеПодписи.Отпечаток,
		|	ТЧЭлектронныеПодписи.Подпись,
		|	ТЧЭлектронныеПодписи.УстановившийПодпись,
		|	ТЧЭлектронныеПодписи.НомерСтроки КАК ПорядковыйНомер,
		|	ТЧЭлектронныеПодписи.Сертификат, 
		|	ТЧЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ТЧЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи
		|ИЗ
		|	" + ПолноеИмяОбъектаМетаданных + ".УдалитьЭлектронныеПодписи КАК ТЧЭлектронныеПодписи
		|ГДЕ
		|	ТЧЭлектронныеПодписи.Ссылка В(&МассивОбъектов)
		|ИТОГИ
		|	ПО ПодписанныйОбъект";
		
		Если ОбъектМетаданных = Метаданные.Справочники.ВерсииФайлов Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТЧЭлектронныеПодписи.Ссылка КАК ПодписанныйОбъект",
				"ТЧЭлектронныеПодписи.Ссылка.Владелец КАК ПодписанныйОбъект");
		КонецЕсли;
		
		РеквизитыТЧ = ОбъектМетаданных.ТабличныеЧасти.УдалитьЭлектронныеПодписи.Реквизиты;
		
		Если РеквизитыТЧ.Найти("ПодписьВерна") = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЧЭлектронныеПодписи.ПодписьВерна", "ЛОЖЬ");
		КонецЕсли;
		
		Если РеквизитыТЧ.Найти("ДатаПроверкиПодписи") = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЧЭлектронныеПодписи.ДатаПроверкиПодписи", "Неопределено");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			Если Не ЗначениеЗаполнено(Строка.ПодписанныйОбъект) Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений["ЭлектронныеПодписи"].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(Строка.ПодписанныйОбъект);
			Для Каждого Подстрока Из Строка.Строки Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Подстрока);
			КонецЦикла;
			// Используется параллельное обновление с нестандартной отметкой выполнения обработанных данных.
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для процедуры ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведенийДляТаблицы.
Процедура ПеренестиДанныеСертификатовВРегистрСведений(МассивОбъектов, ПолноеИмяОбъектаМетаданных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ОбъектСДанными Из МассивОбъектов Цикл
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаМетаданных);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСДанными);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧСертификатыШифрования.Ссылка КАК ЗашифрованныйОбъект,
		|	ТЧСертификатыШифрования.Отпечаток,
		|	ТЧСертификатыШифрования.Сертификат,
		|	ТЧСертификатыШифрования.НомерСтроки КАК ПорядковыйНомер,
		|	ТЧСертификатыШифрования.Представление
		|ИЗ
		|	" + ПолноеИмяОбъектаМетаданных + ".УдалитьСертификатыШифрования КАК ТЧСертификатыШифрования
		|ГДЕ
		|	ТЧСертификатыШифрования.Ссылка В(&МассивОбъектов)
		|ИТОГИ
		|	ПО ЗашифрованныйОбъект";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			НаборЗаписей = РегистрыСведений["СертификатыШифрования"].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗашифрованныйОбъект.Установить(Строка.ЗашифрованныйОбъект);
			Для Каждого Подстрока Из Строка.Строки Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Подстрока);
			КонецЦикла;
			// Используется параллельное обновление с нестандартной отметкой выполнения обработанных данных.
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписей.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолныеИменаСправочниковПрисоединенныхФайлов()
	
	Массив = Новый Массив;
	
	Для Каждого ТипПрисоединенногоФайла Из Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы() Цикл
		ПолноеИмя = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла).ПолноеИмя();
		Если СтрЗаканчиваетсяНа(ВРег(ПолноеИмя), ВРег("ВерсииПрисоединенныхФайлов")) Тогда
			Продолжить;
		КонецЕсли;
		Массив.Добавить(Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла).ПолноеИмя());
	КонецЦикла;
	
	Если Массив.Найти("Справочник.Файлы") = Неопределено Тогда
		Массив.Добавить("Справочник.Файлы");
	КонецЕсли;
	
	Если Массив.Найти("Справочник.ВерсииФайлов") = Неопределено Тогда
		Массив.Добавить("Справочник.ВерсииФайлов");
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Возвращает стандартный текст ошибки.
// Возвращаемое значение:
//   Строка
Функция ОшибкаФайлНеНайденВХранилищеФайлов(ИмяФайла, ПоискВТоме = Истина, ВладелецФайла = "") Экспорт
	
	Если ПоискВТоме Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл:
				|%1
				|который присоединен к:
				|%2
				|по причине: двоичные данные файла были удалены. Возможно, файл очищен как ненужный или удален антивирусной программой.
				|Обратитесь к администратору.'"),
			ИмяФайла,
			ВладелецФайла);
			
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл:
				|%1
				|который присоединен к:
				|%2
				|по причине: двоичные данные файла были удалены. Возможно, файл очищен как ненужный.
				|Обратитесь к администратору.'"),
			ИмяФайла,
			ВладелецФайла);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПараметрыДобавленияФайла()
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Ссылка", Неопределено);
	ПараметрыФайла.Вставить("Том", Справочники.ТомаХраненияФайлов.ПустаяСсылка());
	ПараметрыФайла.Вставить("ПутьКФайлу", "");
	ПараметрыФайла.Вставить("Расширение", Неопределено);
	ПараметрыФайла.Вставить("Размер", 0);
	ПараметрыФайла.Вставить("Наименование", "");
	ПараметрыФайла.Вставить("ХранимыйФайл", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайла", Неопределено);
	ПараметрыФайла.Вставить("ТипХраненияФайла", Неопределено);
	ПараметрыФайла.Вставить("ДатаМодификацииУниверсальная", Неопределено);
	ПараметрыФайла.Вставить("ДополнительныеСвойства", Новый Структура);
	
	Возврат ПараметрыФайла;
	
КонецФункции

#КонецОбласти
