///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму создания нового письма.
//
// Параметры:
//  ПараметрыОтправкиПисьма  - см. РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма.
//  ОповещениеОЗакрытииФормы - ОписаниеОповещения - процедура, в которую необходимо передать управление после закрытия
//                           формы отправки письма.
//
Процедура СоздатьНовоеПисьмо(ПараметрыОтправки = Неопределено, ОповещениеОЗакрытииФормы = Неопределено) Экспорт
	
	Если ПараметрыОтправки = Неопределено Тогда
		ПараметрыОтправки = Новый Структура;
	КонецЕсли;
	ПараметрыОтправки.Вставить("ОповещениеОЗакрытииФормы", ОповещениеОЗакрытииФормы);
	
	Получатель = "";
	Если ПараметрыОтправки.Свойство("Получатель") Тогда
		Получатель = ПараметрыОтправки.Получатель;
	КонецЕсли;	
	
	Вложения = Неопределено;
	Если ПараметрыОтправки.Свойство("Вложения") Тогда
		Вложения = ПараметрыОтправки.Вложения;
	КонецЕсли;	
	ПараметрыОтправки.Вставить("Вложения", Вложения);
	
	СведенияДляОтправки = РаботаСПочтовымиСообщениямиВызовСервера.СведенияДляОтправки(ПараметрыОтправки);
	ПараметрыОтправки.Вставить("ПоказыватьДиалогВыбораФорматаСохраненияВложений", СведенияДляОтправки.ПоказыватьДиалогВыбораФорматаСохраненияВложений);
	
	СоздатьНовоеПисьмоПроверкаУчетнойЗаписиВыполнена(Истина, ПараметрыОтправки);
	
КонецПроцедуры


// Возвращает пустую структуру с параметрами отправки письма.
//
// Возвращаемое значение:
//  Структура - параметры для заполнения в форме отправки нового письма (все необязательные):
//   * Отправитель - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, с которой может
//                   быть отправлено почтовое сообщение;
//                 - СписокЗначений - список учетных записей, доступных для выбора в форме:
//                     ** Представление - Строка- наименование учетной записи;
//                     ** Значение - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//    
//   * Получатель - Строка - список адресов в формате:
//                           [ПредставлениеПолучателя1] <Адрес1>; [[ПредставлениеПолучателя2] <Адрес2>;...]
//                - СписокЗначений:
//                   ** Представление - Строка - представление получателя,
//                   ** Значение      - Строка - почтовый адрес.
//                - Массив - массив структур, описывающий получателей:
//                   ** Адрес                        - Строка - почтовый адрес получателя сообщения;
//                   ** Представление                - Строка - представление адресата;
//                   ** ИсточникКонтактнойИнформации - СправочникСсылка - владелец контактной информации.
//   
//   * Копии - СписокЗначений
//           - Строка - см. описание поля Получатель.
//   * СкрытыеКопии - СписокЗначений
//                  - Строка - см. описание поля Получатель.
//   * Тема - Строка - тема письма.
//   * Текст - Строка - тело письма.
//
//   * Вложения - Массив - файлы, которые необходимо приложить к письму (описания в виде структур):
//     ** Представление - Строка - имя файла вложения;
//     ** АдресВоВременномХранилище - Строка - адрес двоичных данных либо табличного документа во временном хранилище.
//     ** Кодировка - Строка - кодировка вложения (используется, если отличается от кодировки письма).
//     ** Идентификатор - Строка - (необязательный) используется для отметки картинок, отображаемых в теле письма.
//   
//   * УдалятьФайлыПослеОтправки - Булево - удалять временные файлы после отправки сообщения.
//   * Предмет - ЛюбаяСсылка - предмет письма.
//
Функция ПараметрыОтправкиПисьма() Экспорт
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("Отправитель", Неопределено);
	ПараметрыПисьма.Вставить("Получатель", Неопределено);
	ПараметрыПисьма.Вставить("Копии", Неопределено);
	ПараметрыПисьма.Вставить("СкрытыеКопии", Неопределено);
	ПараметрыПисьма.Вставить("Тема", Неопределено);
	ПараметрыПисьма.Вставить("Текст", Неопределено);
	ПараметрыПисьма.Вставить("Вложения", Неопределено);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", Неопределено);
	ПараметрыПисьма.Вставить("Предмет", Неопределено);
	
	Возврат ПараметрыПисьма;
КонецФункции

// Если у пользователя нет настроенной учетной записи для отправки писем, то в зависимости от прав либо показывает
// помощник настройки новой учетной записи, либо выводит сообщение о невозможности отправки.
// Предназначена для сценариев, в которых требуется выполнить настройку учетной записи перед запросом дополнительных
// параметров отправки.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения - процедура, в которую необходимо передать выполнение кода после проверки.
//                                              В качестве результата возвращается Истина, если есть доступная учетная
//                                              запись для отправки почты. Иначе возвращается Ложь.
Процедура ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОбработчикРезультата) Экспорт
	Если РаботаСПочтовымиСообщениямиВызовСервера.ЕстьДоступныеУчетныеЗаписиДляОтправки() Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Истина);
	Иначе
		Если РаботаСПочтовымиСообщениямиВызовСервера.ДоступноПравоДобавленияУчетныхЗаписей() Тогда
			
			ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ФормаЭлемента", 
				Новый Структура("КонтекстныйРежим", Истина), , , , , ОбработчикРезультата);
				
		Иначе	
			ТекстСообщения = НСтр("ru = 'Для отправки письма требуется настройка почты.
				|Обратитесь к администратору.'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочтыЗавершение", ЭтотОбъект, ОбработчикРезультата);
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Открывает форму сообщения об ошибке, в которой помимо текста ошибки сообщаются возможные причины
// и способы устранения.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  Заголовок - Строка - текст заголовка в открываемой форме.
//  ТекстОшибки - Строка - исходный текст исключения, рекомендуется передавать КраткоеПредставлениеОшибки.
//
Процедура СообщитьОбОшибкеПодключения(УчетнаяЗапись, Заголовок, ТекстОшибки) Экспорт
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПроверкаНастроекУчетнойЗаписи", 
		Новый Структура("УчетнаяЗапись, Заголовок, ТекстОшибки", УчетнаяЗапись, Заголовок, ТекстОшибки));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УСТАРЕВШИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Интерфейсная клиентская функция, поддерживающая упрощенный вызов формы редактирования
// нового письма.
// Параметры
// Отправитель*  - СписокЗначений, СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - 
//                 учетная запись ,с которой может быть отправлено
//                 почтовое сообщение. Если тип список значений, тогда
//                   представление - наименование учетной записи,
//                   значение - ссылка на учетную запись
//
// Получатель      - СписокЗначений, Строка:
//                   если список значений, то представление - имя получателя
//                                            значение      - почтовый адрес
//                   если строка то список почтовых адресов,
//                   в формате правильного e-mail адреса*
//
// Тема            - Строка - тема письма
// Текст           - Строка - тело письма
//
// СписокФайлов    - СписокЗначений, где
//                   представление - строка - наименование вложения
//                   значение      - ДвоичныеДанные - двоичные данные вложения
//                                 - Строка - адрес файла во временном хранилище
//                                 - Строка - путь к файлу на клиенте
//
// УдалятьФайлыПослеОтправки - булево - удалять временные файлы после отправки сообщения
// ПисьмоДолжноСохраняться   - булево - должно ли письмо сохраняться (используется только
//                                      если встроена подсистема Взаимодействия)
//
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(знач Отправитель = Неопределено,
												знач Получатель = Неопределено,
												знач Тема = "",
												знач Текст = "",
												знач СписокФайлов = Неопределено,
												знач УдалятьФайлыПослеОтправки = Ложь,
												знач ПисьмоДолжноСохраняться = Истина,
												знач Основание = Неопределено) Экспорт
												
	ИспользованиеЛегкойПочты = ПолучитьФункциональнуюОпциюИнтерфейса("ИспользованиеЛегкойПочты");
	ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпциюИнтерфейса("ИспользованиеВстроеннойПочты");
												
	Если Не ИспользованиеЛегкойПочты И Не ИспользованиеВстроеннойПочты Тогда
		ТекстСообщения = НСтр("ru = 'Для отправки письма требуется включить использование встроенной или легкой почты.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ИспользованиеВстроеннойПочты Тогда		
				
		ПараметрыОткрытия = Новый Структура;
		
		Если ЗначениеЗаполнено(Получатель) Тогда 
			
			СписокПочтовыхАдресов = Новый СписокЗначений;
			
			Если ТипЗнч(Получатель) = Тип("Строка") Тогда
				
				АдресИнфо = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
					"", Получатель, "");
				СписокПочтовыхАдресов.Добавить(АдресИнфо);
				
			ИначеЕсли ТипЗнч(Получатель) = Тип("Массив") Тогда	
				
				Для Каждого Стр Из Получатель Цикл
					
					АдресИнфо = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
						"", Стр.Адрес, "");
					СписокПочтовыхАдресов.Добавить(АдресИнфо);
					
				КонецЦикла;	
				
			КонецЕсли;			
			
			ПараметрыОткрытия.Вставить("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Основание) Тогда 
			ПараметрыОткрытия.Вставить("Основание", Основание);
		КонецЕсли;
		
		Если СписокФайлов <> Неопределено Тогда 
			
			Если ТипЗнч(СписокФайлов) = Тип("Массив") Тогда
				
				ПараметрыОткрытия.Вставить("СписокФайлов", СписокФайлов);
				
			ИначеЕсли ТипЗнч(СписокФайлов) = Тип("СписокЗначений") Тогда
				
				МассивФайлов = Новый Массив;
				Для Каждого Строка Из СписокФайлов Цикл
					МассивФайлов.Добавить(
						Новый Структура("Представление, АдресВоВременномХранилище", 
						Строка.Представление, Строка.Значение));
				КонецЦикла;	
				ПараметрыОткрытия.Вставить("СписокФайлов", МассивФайлов);
				
			КонецЕсли;			
			
		КонецЕсли;	
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);
			
	ИначеЕсли ИспользованиеЛегкойПочты Тогда
		ПараметрКоманды = Новый Массив;
		
		Если ЗначениеЗаполнено(Основание) Тогда 
			ПараметрКоманды.Добавить(Основание);
		КонецЕсли;	

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Объекты", ПараметрКоманды);
		ПараметрыОткрытия.Вставить("Кому",    Получатель);
		
		Если СписокФайлов <> Неопределено Тогда 
			
			Если ТипЗнч(СписокФайлов) = Тип("Массив") Тогда
				
				ПараметрыОткрытия.Вставить("СписокФайлов", СписокФайлов);
				
			ИначеЕсли ТипЗнч(СписокФайлов) = Тип("СписокЗначений") Тогда
				
				МассивФайлов = Новый Массив;
				Для Каждого Строка Из СписокФайлов Цикл
					МассивФайлов.Добавить(
						Новый Структура("Представление, АдресВоВременномХранилище", 
						Строка.Представление, Строка.Значение));
				КонецЦикла;	
				ПараметрыОткрытия.Вставить("СписокФайлов", МассивФайлов);
				
			КонецЕсли;			
			
		КонецЕсли;	
		
		ОткрытьФорму(
			"Обработка.ПочтовоеСообщение.Форма.Форма",
			ПараметрыОткрытия,,
			Новый УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение процедуры СоздатьНовоеПисьмо.
Процедура СоздатьНовоеПисьмоПроверкаУчетнойЗаписиВыполнена(УчетнаяЗаписьНастроена, ПараметрыОтправки) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтправки.ПоказыватьДиалогВыбораФорматаСохраненияВложений Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНовоеПисьмоПодготовитьВложения", ЭтотОбъект, ПараметрыОтправки);
		ОткрытьФорму("ОбщаяФорма.ВыборФорматаВложений", , , , , , ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	СоздатьНовоеПисьмоВложенияПодготовлены(Истина, ПараметрыОтправки);
	
КонецПроцедуры

Процедура СоздатьНовоеПисьмоПодготовитьВложения(НастройкиСохранения, ПараметрыОтправки) Экспорт
	Если ТипЗнч(НастройкиСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПочтовымиСообщениямиВызовСервера.ПодготовитьВложения(ПараметрыОтправки.Вложения, НастройкиСохранения);
	
	СоздатьНовоеПисьмоВложенияПодготовлены(Истина, ПараметрыОтправки);
КонецПроцедуры

// Продолжение процедуры СоздатьНовоеПисьмо.
Процедура СоздатьНовоеПисьмоВложенияПодготовлены(ВложенияПодготовлены, ПараметрыОтправки)

	Если ВложенияПодготовлены <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытииФормы = ПараметрыОтправки.ОповещениеОЗакрытииФормы;
	ПараметрыОтправки.Удалить("ОповещениеОЗакрытииФормы");
	
	СтандартнаяОбработка = Истина;
	РаботаСПочтовымиСообщениямиКлиентПереопределяемый.ПередОткрытиемФормыОтправкиПисьма(ПараметрыОтправки, ОповещениеОЗакрытииФормы, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуОтправкиПочтовогоСообщения(, ПараметрыОтправки.Получатель,,, ПараметрыОтправки.Вложения);
	
КонецПроцедуры

// Выполняет проверку учетной записи.
//
// Параметры:
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
//					которую нужно проверить.
//
Процедура ПроверитьУчетнуюЗапись(Знач УчетнаяЗапись) Экспорт
	ОчиститьСообщения();
	ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(Неопределено, УчетнаяЗапись);
КонецПроцедуры

// Проверка учетной записи электронной почты.
//
// См. описание процедуры РаботаСПочтовымиСообщениямиСлужебный.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты.
//
Процедура ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(ОбработчикРезультата, УчетнаяЗапись)
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	РаботаСПочтовымиСообщениямиВызовСервера.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПоказатьПредупреждение(ОбработчикРезультата, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась с ошибками:
					   |%1'"), СообщениеОбОшибке ),,
			НСтр("ru = 'Проверка учетной записи'"));
	Иначе
		ПоказатьПредупреждение(ОбработчикРезультата, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась успешно. %1'"),
			ДополнительноеСообщение),,
			НСтр("ru = 'Проверка учетной записи'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочтыЗавершение(ОбработчикРезультата) Экспорт
	ВыполнитьОбработкуОповещения(ОбработчикРезультата, Ложь);
КонецПроцедуры

Процедура ПроверитьНастройкиУчетнойЗаписи(УчетнаяЗапись, Форма) Экспорт
	
	Параметры = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПроверкаНастроекУчетнойЗаписи", Параметры, Форма);
	
КонецПроцедуры

Процедура ПерейтиКДокументацииПоВводуУчетнойЗаписиЭлектроннойПочты() Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/bmk/bsp_email_account");
	
КонецПроцедуры

Процедура ПолеПароляНачалоВыбора(Элемент, Реквизит, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Реквизит = Элемент.ТекстРедактирования;
	Элемент.РежимПароля = Не Элемент.РежимПароля;
	Если Элемент.РежимПароля Тогда
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВводимыеСимволыСкрыты;
	Иначе
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВводимыеСимволыВидны;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
