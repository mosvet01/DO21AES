////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСЭлектроннымиПодписями

#Область ПроверкаПодписей

// Проверяет подписи объекта на форме
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма из которой происходит проверка
//  ПараметрыПроверки см. РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей
//  ОбработчикЗавершения - ОписаниеОповещения - Обработчик, который будет вызван после завершения проверки
Процедура ПроверитьПодписи(Форма, ПараметрыПроверки, ОбработчикЗавершения = Неопределено) Экспорт
	
	Контекст = НовыйКонтекстПроверкиПодписей();
	Контекст.ОбработчикЗавершения = ОбработчикЗавершения;
	Контекст.ПараметрыПроверки = ПараметрыПроверки;
	Контекст.Форма = Форма;
	
	ДанныеПодписейОбъектов = ДанныеПодписейОбъектовДляПроверки(Форма, ПараметрыПроверки);
	ЗаполнитьКонтекстПроверкиПоДаннымПодписей(Контекст, ДанныеПодписейОбъектов);
	
	ВыполнитьДействияДляПроверкиПодписей(Контекст);
	
КонецПроцедуры

// Новые праметры для проверки подписей на форме объекта
// 
// Возвращаемое значение:
//  Структура:
//   * ВыделенныеСтроки - Неопределено,
//                      Массив из Число,
//                                Структура - Массив строк таблицы подписей, которые необходимо проверить
//                                                      Если не указано (Неопределено), тогда проверяются все подписи.
//   * ИмяТаблицыЭП - Строка - Имя таблицы или дерева ЭП
//   * ПерезаполнитьВыделенныеСтроки - Булево - Необходимо ли перезаполнить текущие строки по результатам проверки
//
Функция НовыеПараметрыПроверкиПодписей() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ВыделенныеСтроки", Неопределено);
	ПараметрыПроверки.Вставить("ИмяТаблицыЭП", "ЭлектронныеПодписи");
	ПараметрыПроверки.Вставить("ПерезаполнитьВыделенныеСтроки", Ложь);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

#КонецОбласти

// Открывает форму просмотра ЭП.
//
Процедура ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) И 
		ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаПодписи", ТекущиеДанные.ДатаПодписи);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Объект);
		ПараметрыФормы.Вставить("УстановившийПодпись", ТекущиеДанные.УстановившийПодпись);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("ПодписьПроверена", ЗначениеЗаполнено(ТекущиеДанные.ДатаПроверкиПодписи));
		ПараметрыФормы.Вставить("ПодписьВерна", ТекущиеДанные.ПодписьВерна);
		ПараметрыФормы.Вставить("СертификатДействителен", ТекущиеДанные.СертификатДействителен);
		Попытка
			ОткрытьФорму("РегистрСведений.ЭлектронныеПодписи.ФормаЗаписи", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		КонецПопытки;
		
	Иначе
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементДерева") Тогда
			ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
			Если ДочерниеЭлементы.Количество() > 0 Тогда
				Версия = ДочерниеЭлементы[0].Объект;
				Если ЗначениеЗаполнено(Версия) И ТипЗнч(Версия) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					ФайлСсылка = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Версия, "Владелец");
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
						ФайлСсылка,
						Неопределено,
						УникальныйИдентификатор);
					РаботаСФайламиКлиент.Открыть(ДанныеФайла, УникальныйИдентификатор); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Подписание

// Новые параметры подписания ЭП
// 
// Возвращаемое значение:
//  Структура - Новые параметры подписания:
//   * ОбработчикЗавершения - Неопределено, ОписаниеОповещения - Обработчик, который будет вызван
//                                                               после выполнения подписания
//   * ИдентификаторФормы - УникальныйИдентификатор - УИД формы, из которой вызывается подписание
//   * Заголовки - Неопределено, Структура - Структура, описывающая заголовки формы подписания, возможные поля:
//     ** Операция - Строка - Описание операции, заголовок формы подписания, например, "Подписание визы согласования"
//     ** ЗаголовокДанных - Строка - Представление подписанных данных, например, "Виза согласования"
//   * ДоступныеСертификаты - Неопределено, Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования -
//                                                    Массив сертификатов, доступных для подписания в данной операции
//   * ДоверенностиСертификатов - Неопределено, Соответствие из КлючИЗначение - Допустимые доверенности сертификатов:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Сертификат
//     ** Значение - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Допустимые доверенности
//
Функция НовыеПараметрыПодписания() Экспорт
	
	ПараметрыПодписания = Новый Структура;
	ПараметрыПодписания.Вставить("ОбработчикЗавершения", Неопределено);
	ПараметрыПодписания.Вставить("ИдентификаторФормы", УникальныйИдентификаторПустой());
	ПараметрыПодписания.Вставить("Заголовки", Неопределено);
	ПараметрыПодписания.Вставить("ДоступныеСертификаты", Неопределено);
	ПараметрыПодписания.Вставить("ДоверенностиСертификатов", Неопределено);
	
	Возврат ПараметрыПодписания;
	
КонецФункции

// Подписывает данные ЭП
// 
// Параметры:
//  Данные - ОпределяемыйТип.ПодписанныйОбъект, Структура, Массив из ОпределяемыйТип.ПодписанныйОбъект, Структура -
//      Данные, которые необходимо подписать.
//      Возможны три варианта:
//        1) ОпределяемыйТип.ПодписанныйОбъект - просто ссылка на объект, который нужно подписать
//        2) Стркутура:
//              * ОбъектПодписания - ОпределяемыйТип.ПодписанныйОбъект - Объект, который нужно подписать
//              * ПараметрыДанных - Структура, неопределено - Параметры данных, необходимые для подписания
//              * Представление - Строка, Неопределено - Представление конкретного объекта
//              * ДополнительныеСвойства - Структура, Неопределено - Доп свойства при получении данных подписания
//        3) Массив из п. 1) или п. 2) - Если необходимо подписать сразу несколько объектов.
//  ПараметрыПодписания см. РаботаСЭПКлиент.НовыеПараметрыПодписания
Процедура Подписать(Данные, ПараметрыПодписания) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		МассивОбъектов = Данные;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Данные);
	КонецЕсли;
	
	НаборДанных = Новый Массив;
	МассивДанныхОбъектов = Новый Массив;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ПараметрыПодписания.ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ПараметрыПодписания.ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("МассивДанныхОбъектов", МассивДанныхОбъектов);
	
	СписокПредставлений = Новый СписокЗначений;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		ПараметрыДанных = Неопределено;
		ПредставлениеДанных = Неопределено;
		ДополнительныеСвойства = Неопределено;
		
		Если ТипЗнч(Объект) = Тип("Структура")
			И Объект.Свойство("ОбъектПодписания") Тогда
			
			ОбъектПодписания = Объект.ОбъектПодписания;
			
			Если Объект.Свойство("ПараметрыДанных") Тогда
				ПараметрыДанных = Объект.ПараметрыДанных;
			КонецЕсли;
			
			Если Объект.Свойство("Представление") Тогда
				ПредставлениеДанных = Объект.Представление;
			КонецЕсли;
			
			Если Объект.Свойство("ДополнительныеСвойства") Тогда
				ДополнительныеСвойства = Объект.ДополнительныеСвойства;
			КонецЕсли;
			
		Иначе
			ОбъектПодписания = Объект;
		КонецЕсли;
		
		// У документов сперва подписываем не помеченные на удаление файлы.
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектПодписания) Тогда
			
			МассивПодчиненныхФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектПодписания, Ложь);
			
			Для Каждого Файл Из МассивПодчиненныхФайлов Цикл
				
				МассивДанныхОбъектов.Добавить(Файл);
				
				ТекущиеПараметрыВыполнения = Новый Структура;
				ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы", ПараметрыПодписания.ИдентификаторФормы);
				ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные", Файл);
				
				ПараметрыДанныхФайла = Новый Структура;
				ПараметрыДанныхФайла.Вставить("ЗаполнятьПодписанта", Ложь);
				ПараметрыДанныхФайла.Вставить("ДанныеИзменены", Ложь);
				
				Если ПараметрыДанных <> Неопределено
					И ПараметрыДанных.Свойство("ЗаполнятьПодписантаВФайле")
					И ПараметрыДанных.ЗаполнятьПодписантаВФайле = Истина Тогда
					
					ПараметрыДанныхФайла.ЗаполнятьПодписанта = Истина;
					
				КонецЕсли;
				
				ТекущиеПараметрыВыполнения.Вставить("ПараметрыДанных", ПараметрыДанныхФайла);
				
				ЭлементДанных = Новый Структура;
				ЭлементДанных.Вставить("Представление", Файл);
				ЭлементДанных.Вставить("Данные",
					Новый ОписаниеОповещения("ПриЗапросеДвоичныхДанныхОбъекта", ЭтотОбъект, ТекущиеПараметрыВыполнения));
				ЭлементДанных.Вставить("Объект",
					Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ТекущиеПараметрыВыполнения));
				
				Если ДополнительныеСвойства <> Неопределено Тогда
					ЭлементДанных.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
				КонецЕсли;
				
				НаборДанных.Добавить(ЭлементДанных);
				
				СписокПредставлений.Добавить(Файл,
					СтрШаблон(НСтр("ru = 'Файл: %1'"), Файл));
				
			КонецЦикла;
			
		КонецЕсли;
		
		МассивДанныхОбъектов.Добавить(ОбъектПодписания);
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы", ПараметрыПодписания.ИдентификаторФормы);
		ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные", ОбъектПодписания);
		
		Если ПараметрыДанных <> Неопределено Тогда
			ТекущиеПараметрыВыполнения.Вставить("ПараметрыДанных", ПараметрыДанных);
		КонецЕсли;
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Представление", ОбъектПодписания);
		Если ПредставлениеДанных <> Неопределено Тогда
			ЭлементДанных.Представление = ПредставлениеДанных;
		КонецЕсли;
		ЭлементДанных.Вставить("Данные",
			Новый ОписаниеОповещения("ПриЗапросеДвоичныхДанныхОбъекта", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		ЭлементДанных.Вставить("Объект",
			Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		
		Если ДополнительныеСвойства <> Неопределено Тогда
			ЭлементДанных.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
		КонецЕсли;
		
		НаборДанных.Добавить(ЭлементДанных);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектПодписания) Тогда
			СписокПредставлений.Добавить(ОбъектПодписания, Строка(ОбъектПодписания));
		ИначеЕсли ПредставлениеДанных <> Неопределено Тогда
			СписокПредставлений.Добавить(ПредставлениеДанных);
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФайл(ОбъектПодписания) Тогда
			СписокПредставлений.Добавить(ОбъектПодписания,
					СтрШаблон(НСтр("ru = 'Файл: %1'"), ОбъектПодписания));
		Иначе
			СписокПредставлений.Добавить(ОбъектПодписания);
		КонецЕсли;
		
	КонецЦикла;
	
	Заголовки = ПараметрыПодписания.Заголовки;
	Если Не ЗначениеЗаполнено(Заголовки)
		Или ТипЗнч(Заголовки) <> Тип("Структура") Тогда
		
		Заголовки = Новый Структура;
	КонецЕсли;
	
	Если Заголовки.Свойство("Операция") Тогда
		Операция = Заголовки.Операция;
	Иначе
		Операция = НСтр("ru = 'Подписание'");
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
			Операция = НСтр("ru = 'Подписание документа'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВизаСогласования(Данные) Тогда
			Операция = НСтр("ru = 'Подписание визы согласования'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРезолюция(Данные) Тогда
			Операция = НСтр("ru = 'Подписание резолюции'");
		КонецЕсли;
	КонецЕсли;
	
	Если Заголовки.Свойство("ЗаголовокДанных") Тогда
		ЗаголовокДанных = Заголовки.ЗаголовокДанных;
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Объект'");
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
			ЗаголовокДанных = НСтр("ru = 'Документ'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВизаСогласования(Данные) Тогда
			ЗаголовокДанных = НСтр("ru = 'Виза согласования'");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРезолюция(Данные) Тогда
			ЗаголовокДанных = НСтр("ru = 'Резолюция'");
		КонецЕсли;
	КонецЕсли;
	
	Если Заголовки.Свойство("ЗаголовокДанных") Тогда
		ПредставлениеНабора = Заголовки.ЗаголовокДанных;
	Иначе
		ПредставлениеНабора = НСтр("ru = 'Объекты (%1)'");
		// Выводим название документа, так как при подписании документа будут также подписаны его файлы.
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Данные) Тогда
			ПредставлениеНабора = Строка(Данные);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("ИдентификаторФормы",  ПараметрыПодписания.ИдентификаторФормы);
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеНабора);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	ОписаниеДанных.Вставить("КонтекстОперации",    Неопределено);
	
	ДоступныеСертификаты = ПараметрыПодписания.ДоступныеСертификаты;
	Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", ДоступныеСертификаты);
	КонецЕсли;
	
	ДоверенностиСертификатов = ПараметрыПодписания.ДоверенностиСертификатов;
	Если ЗначениеЗаполнено(ДоверенностиСертификатов)
		И ТипЗнч(ДоверенностиСертификатов) = Тип("Соответствие") Тогда
		
		ОписаниеДанных.Вставить("ДоверенностиСертификатов", ДоверенностиСертификатов);
	КонецЕсли;
	
	Если СписокПредставлений.Количество() > 0 Тогда
		ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияОбъектов", ЭтотОбъект, ПараметрыВыполнения);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьОбъект.
// Вызывается из подсистемы ЭлектроннаяПодпись при запросе данных для подписания.
//
Процедура ПриЗапросеДвоичныхДанныхОбъекта(Параметры, Контекст) Экспорт
	
	РезультатПолученияДанных = Новый Структура;
	РезультатПолученияДанных.Вставить("Данные", Неопределено);
	РезультатПолученияДанных.Вставить("ДанныеИзменены", Ложь);
	РезультатПолученияДанных.Вставить("ПричинаИзмененияДанных", "");
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(Контекст.ПодписываемыеДанные) Тогда
		
		ЗаполнятьПодписанта = Ложь;
		
		Если Контекст.Свойство("ПараметрыДанных") Тогда
			ДополнительныеПараметры = Контекст.ПараметрыДанных;
			
			Если ДополнительныеПараметры.Свойство("ЗаполнятьПодписанта")
				И ДополнительныеПараметры.ЗаполнятьПодписанта = Истина Тогда
				
				ЗаполнятьПодписанта = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнятьПодписанта Тогда
			Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				Параметры.ОписаниеДанных.Доверенность);
			
			ДанныеФайлаСПодписантом =
				ОбменСКонтрагентамиДОВызовСервера.ПолучитьДанныеФайлаСУчетомПодписания(
					Контекст.ПодписываемыеДанные,
					Параметры.ОписаниеДанных.ВыбранныйСертификат.Отпечаток,
					Доверенности);
			
			РезультатПолученияДанных.Данные = ДанныеФайлаСПодписантом.ДвоичныеДанные;
			РезультатПолученияДанных.ДанныеИзменены = ДанныеФайлаСПодписантом.ДанныеИзменены;
			РезультатПолученияДанных.ПричинаИзмененияДанных =
				НСтр("ru = 'Заполнен подписант файла из сертификата.'");
			
		Иначе
			РезультатПолученияДанных.Данные =
				РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(
					Контекст.ПодписываемыеДанные).ДвоичныеДанные;
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		
		Если Контекст.Свойство("ПараметрыДанных") Тогда
			ДополнительныеПараметры = Контекст.ПараметрыДанных;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ЗаполнятьПодписантаВФайле")
			И ДополнительныеПараметры.ЗаполнятьПодписантаВФайле = Истина Тогда
			
			ДополнительныеПараметры.Вставить("Отпечаток", Параметры.ОписаниеДанных.ВыбранныйСертификат.Отпечаток);
			
			Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				Параметры.ОписаниеДанных.Доверенность);
			ДополнительныеПараметры.Вставить("ДоверенностиПриПодписании", Доверенности);
		КонецЕсли;
		
		РезультатПолученияДанных.Данные =
			РаботаСЭПВызовСервера.ПолучитьДвоичныеДанныеОбъекта(Контекст.ПодписываемыеДанные,,
				ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если Контекст.Свойство("ПараметрыДанных") Тогда
		ДополнительныеПараметры = Контекст.ПараметрыДанных;
		
		Если РезультатПолученияДанных.ДанныеИзменены Тогда
			ДополнительныеПараметры.Вставить("ДанныеИзменены", Истина);
			ДополнительныеПараметры.Вставить("ИзмененныеДанные",
				РезультатПолученияДанных.Данные);
			ДополнительныеПараметры.Вставить("ПричинаИзмененияДанных",
				РезультатПолученияДанных.ПричинаИзмененияДанных);
			
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, РезультатПолученияДанных);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьОбъект.
// Вызывается из подсистемы ЭлектроннаяПодпись после подписания данных для нестандартного
// способа добавления подписи в объект.
//
Процедура ПриПолученииПодписи(Параметры, Контекст) Экспорт
	
	Если Контекст.Свойство("ПараметрыДанных")
		И Контекст.ПараметрыДанных.Свойство("ДанныеПодписанта") Тогда
		
		СвойстваПодписи = Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи;
		
		// Если контекст недоступен на клиенте и подписание выполнялось на сервере,
		// то СвойстваПодписи - Адрес временного хранилища, содержащего свойства подписи
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ДанныеПодписанта = Контекст.ПараметрыДанных.ДанныеПодписанта;
		
		СвойстваПодписи.ДатаПодписи = ДанныеПодписанта.ДатаПодписи;
		СвойстваПодписи.Вставить("Подписал", ДанныеПодписанта.Подписал);
		
	КонецЕсли;
	
	Если Контекст.Свойство("ПараметрыДанных")
		И Контекст.ПараметрыДанных.Свойство("ЗаполнятьПодписанта")
		И Контекст.ПараметрыДанных.Свойство("ДанныеИзменены") Тогда
		
		СвойстваПодписи = Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи;
		
		// Если контекст недоступен на клиенте и подписание выполнялось на сервере,
		// то СвойстваПодписи - Адрес временного хранилища, содержащего свойства подписи
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ПараметрыДанных = Контекст.ПараметрыДанных;
		
		Если ПараметрыДанных.ЗаполнятьПодписанта = Истина
			И ПараметрыДанных.ДанныеИзменены = Истина Тогда
			
			СвойстваПодписи.Вставить("ДанныеИзменены", Истина);
			СвойстваПодписи.Вставить("ИзмененныеДанные", ПараметрыДанных.ИзмененныеДанные);
			СвойстваПодписи.Вставить("ПричинаИзмененияДанных", ПараметрыДанных.ПричинаИзмененияДанных);
			
			Параметры.ОписаниеДанных.ТекущийЭлементНабораДанных.СвойстваПодписи =
				ПоместитьВоВременноеХранилище(СвойстваПодписи, Новый УникальныйИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры ПодписатьОбъект.
Процедура ПослеПодписанияОбъектов(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикЗавершения, ОписаниеДанных);
	
КонецПроцедуры

Процедура ПослеПодписанияОбъекта(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ПодписанныеДанные = Новый Массив;
	Для Каждого Данные Из ОписаниеДанных.НаборДанных Цикл
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Возврат;
		КонецЕсли;
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Данные.Представление);
		Элемент.Вставить("СвойстваПодписи", Данные.СвойстваПодписи);
		Элемент.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ПодписанныеДанные.Добавить(Элемент);
	КонецЦикла;
	
	РаботаСЭПВызовСервера.ЗанестиИнформациюОПодписях(ПодписанныеДанные, ОписаниеДанных.ИдентификаторФормы);
	ИнформироватьОПодписании(ОписаниеДанных.НаборДанных, ПараметрыВыполнения.Объект);
	
КонецПроцедуры

// По окончании подписания нотифицирует.
//
Процедура ИнформироватьОПодписании(ПодписанныеДанные, Объект) Экспорт
	
	Для Каждого Данные Из ПодписанныеДанные Цикл
		ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Данные.Представление);
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		Объект);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает результат проверки подписей
//
// Параметры:
//  ДеревоПодписей  - ДанныеФормыДерево - Дерево ЭП объекта. 1-й уровень - объект подписи,
//                            2-й уровень - подписи объекта
//  УИДПодписей  - Массив из УникальныйИдентификатор - Массив УИД подписей отобранных для проверки.
//  ИдентификаторФормы  - УникальныйИдентификатор - Уникальный идентификатор формы,
//                                                       для открытия карточки подписи.
//
Процедура ОбработатьПроверкуПодписей(ДеревоПодписей, УИДПодписей, ИдентификаторФормы) Экспорт
	
	Если УИДПодписей.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли УИДПодписей.Количество() = 1 Тогда
		
		Для Каждого СтрокаОбъекта Из ДеревоПодписей.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаПодписи Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				Если СтрокаПодписи.УникальныйИдентификатор = УИДПодписей[0] Тогда
					ОткрытьПодпись(СтрокаПодписи, ИдентификаторФормы);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//Если попали сюда, значит не нашли строку в цикле, сообщим, что подпись не найдена.
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Проверяемая подпись не найдена в списке установленных. Повторите проверку.'"), ,
			НСтр("ru = 'Ошибка проверки подписи'"));
		
	Иначе
		
		ВсегоПодписей = УИДПодписей.Количество();
		Действительных = 0;
		Недействительных = 0;
		
		Для Каждого СтрокаОбъекта Из ДеревоПодписей.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаПодписи Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				Если УИДПодписей.Найти(СтрокаПодписи.УникальныйИдентификатор) <> Неопределено Тогда
					Если СтрокаПодписи.ПодписьВерна Тогда
						Действительных = Действительных + 1;
					Иначе
						Недействительных = Недействительных + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Ненайденных = ВсегоПодписей - Действительных - Недействительных;
		
		Если ВсегоПодписей = Действительных Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1, все подписи действительны.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					ВсегоПодписей));
		ИначеЕсли ВсегоПодписей = Недействительных Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1. Подписи недействительны.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					ВсегоПодписей));
		ИначеЕсли ВсегоПодписей = Ненайденных Тогда
			ТекстСообщения = 
				НСтр("ru = 'Проверяемые подписи не найдены в списке установленных. Повторите проверку.'");
		ИначеЕсли Ненайденных = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1. %2, %3.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					ВсегоПодписей),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись действительна;;%1 подписи действительны;%1 подписей действительно;%1 подписей действительно'"),
					Действительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 - недействительна;;%1 - недействительны;%1 - недействительно;%1 - недействительно'"),
					Недействительных));
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Проверено %1. %2, %3.'")
					+ Символы.ПС
					+ НСтр("ru = '%4 в списке установленных подписей. Повторите проверку.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись;;%1 подписи;%1 подписей;%1 подпись'"),
					Действительных + Недействительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись действительна;;%1 подписи действительны;%1 подписей действительно;%1 подписей действительно'"),
					Действительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 - недействительна;;%1 - недействительны;%1 - недействительно;%1 - недействительно'"),
					Недействительных),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 подпись не найдена;;%1 подписи не найдены;%1 подписей не найдено;%1 подписей не найдено'"),
					Ненайденных));
		КонецЕсли;
		
		ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Результат проверки подписей'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПроверкуСтрок()

Процедура ПродлитьДействиеПодписей(Форма, Объект, УИДПодписи = Неопределено,
		ОбработчикПродолжения = Неопределено) Экспорт
	
	ДанныеОбъекта = РаботаСЭПВызовСервера.ДанныеПодписанногоОбъекта(Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ПодписанныйОбъект) Тогда
		ВызватьИсключение НСтр("ru = 'Не выбран объект для продления подписей'");
	КонецЕсли;
	
	Если ТипЗнч(УИДПодписи) = Тип("УникальныйИдентификатор")
		И ЗначениеЗаполнено(УИДПодписи) Тогда
		УникальныйИдентификатор = УИДПодписи;
	Иначе
		УникальныйИдентификатор = Неопределено;
	КонецЕсли;
	
	ПараметрыПродления = Новый Структура;
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ПодписанныйОбъект", ДанныеОбъекта.ПодписанныйОбъект);
	ДанныеПодписи.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ПараметрыПродления.Вставить("Подпись", ДанныеПодписи);
	ПараметрыПродления.Вставить("ПредставлениеДанных", ДанныеОбъекта.Представление);
	ПараметрыПродления.Вставить("СкрытьПодписанныйОбъект", Истина);
	
	ЭлектроннаяПодписьКлиент.ОткрытьФормуПродленияДействияПодписей(
		Форма, ПараметрыПродления, ОбработчикПродолжения);
	
КонецПроцедуры

#Область РаботаСМЧД

Процедура УказатьДоверенностьЭлектроннойПодписи(ИдентификаторПодписи, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДанныеДляУказания = РаботаСЭПВызовСервера.ДанныеДляУстановкиДоверенностиПодписи(ИдентификаторПодписи);
	
	Если Не ДанныеДляУказания.МожноУказатьДоверенность Тогда
		ПоказатьПредупреждение(, ДанныеДляУказания.ОписаниеПроблемы);
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
		Возврат;
	КонецЕсли;
	
	СписокВыбораДоверенностей = Новый СписокЗначений;
	
	Для Каждого ДанныеДоверенности Из ДанныеДляУказания.ДоступныеДоверенностиДляСертификата Цикл
		Представление = СтрШаблон(НСтр("ru = '%1 (от имени %2, ИНН - %3)'"),
			ДанныеДоверенности.Доверенность, ДанныеДоверенности.Доверитель, ДанныеДоверенности.ИННДоверителя);
		СписокВыбораДоверенностей.Добавить(ДанныеДоверенности.Доверенность, Представление);
	КонецЦикла;
	
	Представление = НСтр("ru = 'Без доверенности (от имени физического лица)'");
	СписокВыбораДоверенностей.Добавить(Неопределено, Представление);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	Контекст.Вставить("ИдентификаторПодписи", ИдентификаторПодписи);
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ОбработатьВыборДоверенностиДляУказания", ЭтотОбъект, Контекст);
	
	СписокВыбораДоверенностей.ПоказатьВыборЭлемента(ОбработчикВыбора, НСтр("ru = 'Выберите доверенность'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СохранениеДоверенностейПриСохраненииЭП

Процедура СохранитьДоверенностиПриСохраненииЭП(Контекст) Экспорт
	
	ДанныеДляСохранения = ДанныеДоверенностейДляСохранения(Контекст);
	
	Если Не ДанныеДляСохранения.Сохранять Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ПослеСохраненияДоверенностиВместеСПодписью(Контекст);
		Возврат;
	КонецЕсли;
	
	Если Контекст.Подключено Тогда
		Описание = Новый ОписаниеПередаваемогоФайла(ДанныеДляСохранения.ИмяФайла, ДанныеДляСохранения.АдресДанных);
		Контекст.ПолучаемыеФайлы.Добавить(Описание);
		ЭлектроннаяПодписьСлужебныйКлиент.ПослеСохраненияДоверенностиВместеСПодписью(Контекст);
	Иначе
		// Сохранение Файла из базы данных на диск.
		ФайловаяСистемаКлиент.СохранитьФайл(
			Новый ОписаниеОповещения("СохранитьДоверенностьВместеСЭППослеСохраненияФайла", ЭтотОбъект,
				Контекст),
			ДанныеДляСохранения.АдресДанных, ДанныеДляСохранения.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПодписей

Процедура ВыполнитьДействияДляПроверкиПодписей(Контекст)
	
	ПолучитьДанныеСертификатовПодписей(Контекст);
	
	РасшифроватьДанныеКПроверкеПодписей(Контекст);
	
	ПроверитьДействительностьПодписей(Контекст);
	
	ЗавершитьПроверкуПодписейНаСервере(Контекст);
	
	ПерезаполнитьТекущиеСтроки(Контекст);
	
	ЗакончитьПроверкуПодписей(Контекст);
	
КонецПроцедуры

#Область ПолучениеДанныхПодписей

Функция ДанныеПодписейОбъектовДляПроверки(Форма, ПараметрыПроверки)
	
	ИмяТаблицыЭП = ПараметрыПроверки.ИмяТаблицыЭП;
	ВыделенныеСтроки = ПараметрыПроверки.ВыделенныеСтроки;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицыЭП) Тогда
		
		СообщениеИсключения = НСтр("ru = 'Неверные параметры проверки строк: если не указанно имя таблицы электронных подписей, то в качестве выделенных строк должен быть передан массив структур свойств подписей.'");
		
		Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") Тогда
			ВызватьИсключение СообщениеИсключения;
		КонецЕсли;
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ВызватьИсключение СообщениеИсключения;
		КонецЕсли;
		
		Если ТипЗнч(ВыделенныеСтроки[0]) <> Тип("Структура") Тогда
			ВызватьИсключение СообщениеИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеПодписейОбъектов = Новый Соответствие;
	
	НетВыделенныхСтрок =
		ТипЗнч(ВыделенныеСтроки) <> Тип("Массив")
		Или (ТипЗнч(ВыделенныеСтроки) = Тип("Массив")
			И ВыделенныеСтроки.Количество() = 0);
	
	Если НетВыделенныхСтрок Тогда
		
		ТаблицаЭП = Форма[ИмяТаблицыЭП];
		
		Если ТипЗнч(ТаблицаЭП) = Тип("ДанныеФормыДерево") Тогда
			ДополнитьДанныеПодписейИзКоллекцииДерева(ДанныеПодписейОбъектов, ТаблицаЭП.ПолучитьЭлементы());
		ИначеЕсли ТипЗнч(ТаблицаЭП) = Тип("ДанныеФормыКоллекция") Тогда
			
			Для Каждого Строка Из ТаблицаЭП Цикл
				ДополнитьДанныеПодписейИзСтроки(ДанныеПодписейОбъектов, Строка);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
				
				ДанныеСтроки = Форма[ИмяТаблицыЭП].НайтиПоИдентификатору(ВыделеннаяСтрока);
				ДополнитьДанныеПодписейИзСтроки(ДанныеПодписейОбъектов, ДанныеСтроки);
				
				Если ТипЗнч(ДанныеСтроки) = Тип("ДанныеФормыЭлементДерева") Тогда
					ДополнитьДанныеПодписейИзКоллекцииДерева(ДанныеПодписейОбъектов, ДанныеСтроки.ПолучитьЭлементы());
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВыделеннаяСтрока) = Тип("Структура") Тогда
				
				ДополнитьДанныеПодписейИзСтроки(ДанныеПодписейОбъектов, ВыделеннаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПодписейОбъектов;
	
КонецФункции

Процедура ДополнитьДанныеПодписейИзКоллекцииДерева(ДанныеПодписей, КоллекцияСтрокДерева)
	
	Для Каждого Строка Из КоллекцияСтрокДерева Цикл
		
		ДополнитьДанныеПодписейИзКоллекцииДерева(ДанныеПодписей, Строка.ПолучитьЭлементы());
		
		ДополнитьДанныеПодписейИзСтроки(ДанныеПодписей, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеПодписейИзСтроки(ДанныеПодписей, Строка)
	
	УИДПодписи = Строка.УникальныйИдентификатор;
	Объект = Строка.Объект;
	
	Если Не ЗначениеЗаполнено(УИДПодписи)
		Или Не ЗначениеЗаполнено(Объект) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПодписиОбъекта = ДанныеПодписей[Объект];
	Если ПодписиОбъекта = Неопределено Тогда
		ПодписиОбъекта = Новый Соответствие;
		ДанныеПодписей.Вставить(Объект, ПодписиОбъекта);
	КонецЕсли;
	
	ДанныеПодписи = РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляПроверки();
	ЗаполнитьЗначенияСвойств(ДанныеПодписи, Строка);
	ПодписиОбъекта.Вставить(УИДПодписи, ДанныеПодписи);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтекстомПроверкиПодписей

Функция НовыйКонтекстПроверкиПодписей()
	
	НовыеПараметрыПроверки = НовыеПараметрыПроверкиПодписей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Неопределено);
	Контекст.Вставить("ПараметрыПроверки", НовыеПараметрыПроверки);
	Контекст.Вставить("ОбработчикЗавершения", Неопределено);
	
	Контекст.Вставить("ДанныеПодписейОбъектов", Новый Соответствие);
	Контекст.Вставить("ДанныеОбъектов", Новый Соответствие);
	Контекст.Вставить("РасшифрованныеДанныеОбъектов", Новый Соответствие);
	
	Контекст.Вставить("ПодписанныеОбъекты", Новый Массив);
	Контекст.Вставить("ИндексТекущегоОбъекта", -1);
	
	Контекст.Вставить("ПодписиТекущегоОбъекта", Новый Массив);
	Контекст.Вставить("ИндексТекущейПодписи", -1);
	
	Контекст.Вставить("ТекущийОбъект", Неопределено);
	Контекст.Вставить("ТекущийИдентификаторПодписи", УникальныйИдентификаторПустой());
	
	Контекст.Вставить("ПроверкаТекущегоОбъектаНеуспешна", Ложь);
	Контекст.Вставить("ИндексДополнительнойПроверки", 0);
	
	Контекст.Вставить("РезультатыПроверкиПодписей", Новый Соответствие);
	Контекст.Вставить("ОбщийРезультатПроверки", Новый Соответствие);
	
	ДействияКВыполнению = Новый Соответствие;
	ДействияКВыполнению.Вставить(ДействияПроверкиПодписей().ПолучитьСертификаты, Истина);
	ДействияКВыполнению.Вставить(ДействияПроверкиПодписей().РасшифроватьДанные, Истина);
	ДействияКВыполнению.Вставить(ДействияПроверкиПодписей().ПроверитьПодписи, Истина);
	ДействияКВыполнению.Вставить(ДействияПроверкиПодписей().ЗакончитьПроверкуНаСервере, Истина);
	ДействияКВыполнению.Вставить(ДействияПроверкиПодписей().ПерезаполнитьСтроки, Истина);
	Контекст.Вставить("ДействияКВыполнению", ДействияКВыполнению);
	
	Контекст.Вставить("ИмеетсяРаботающееДействие", Ложь);
	
	Контекст.Вставить("Отказ", Ложь);
	
	Возврат Контекст;
	
КонецФункции

Функция ДействияПроверкиПодписей()
	
	ДействияПроверки = Новый Структура;
	ДействияПроверки.Вставить("ПолучитьСертификаты", "ПолучитьСертификаты");
	ДействияПроверки.Вставить("РасшифроватьДанные", "РасшифроватьДанные");
	ДействияПроверки.Вставить("ПроверитьПодписи", "ПроверитьПодписи");
	ДействияПроверки.Вставить("ЗакончитьПроверкуНаСервере", "ЗакончитьПроверкуНаСервере");
	ДействияПроверки.Вставить("ПерезаполнитьСтроки", "ПерезаполнитьСтроки");
	
	Возврат ДействияПроверки;
	
КонецФункции

Функция НеобходимоВыполнитьДействиеПроверкиПодписей(Действие, Контекст)
	
	Если Контекст.Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст.ИмеетсяРаботающееДействие Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст.ДействияКВыполнению[Действие] <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УбратьНеобходимостьВыполненияДействияПроверкиПодписей(Действие, Контекст)
	
	Контекст.ДействияКВыполнению[Действие] = Ложь;
	
КонецПроцедуры

Процедура УстановитьЗапускДействияПроверкиПодписей(Контекст)
	
	Контекст.ИмеетсяРаботающееДействие = Истина;
	
КонецПроцедуры

Процедура СброситьЗапускДействияПроверкиПодписей(Контекст)
	
	Контекст.ИмеетсяРаботающееДействие = Ложь;
	
КонецПроцедуры

Процедура УстановитьОтказПроверкиПодписей(Контекст)
	
	Контекст.Отказ = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьКонтекстПроверкиПоДаннымПодписей(Контекст, ДанныеПодписейОбъектов)
	
	Контекст.ДанныеПодписейОбъектов = ДанныеПодписейОбъектов;
	
	ПодписанныеОбъекты = Новый Массив;
	Для Каждого Элемент Из ДанныеПодписейОбъектов Цикл
		Объект = Элемент.Ключ;
		ПодписанныеОбъекты.Добавить(Объект);
	КонецЦикла;
	Контекст.ПодписанныеОбъекты = ПодписанныеОбъекты;
	
	ПараметрыПолучения = РаботаСЭПКлиентСервер.НовыеПараметрыПолученияДанныхОбъектовДляПроверкиПодписей();
	ПараметрыПолучения.ДанныеПодписейОбъектов = ДанныеПодписейОбъектов;
	ПараметрыПолучения.УникальныйИдентификаторФормы = Контекст.Форма.УникальныйИдентификатор;
	
	Контекст.ДанныеОбъектов = РаботаСЭПВызовСервера.ДанныеОбъектовДляПроверкиПодписей(ПараметрыПолучения);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныеСертификатовПодписей

Процедура ПолучитьДанныеСертификатовПодписей(Контекст)
	
	ДействиеПолученияСертификатов = ДействияПроверкиПодписей().ПолучитьСертификаты;
	
	Если Не НеобходимоВыполнитьДействиеПроверкиПодписей(ДействиеПолученияСертификатов, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ПодписиБезСертификата = Новый Соответствие;
	
	Для Каждого ЭлементОбъекта Из Контекст.ДанныеПодписейОбъектов Цикл
		
		Объект = ЭлементОбъекта.Ключ;
		ДанныеПодписейОбъекта = ЭлементОбъекта.Значение;
		
		Для Каждого ЭлементПодписи Из ДанныеПодписейОбъекта Цикл
			
			ИдентификаторПодписи = ЭлементПодписи.Ключ;
			ДанныеПодписи = ЭлементПодписи.Значение;
			
			Если Не ЗначениеЗаполнено(ДанныеПодписи.АдресСертификата)
				И ЗначениеЗаполнено(ДанныеПодписи.АдресПодписи) Тогда
				
				ДанныеПодписиБезСертификата = РаботаСЭПКлиентСервер.НовыеДанныеПодписиБезСертификата();
				ДанныеПодписиБезСертификата.Объект = Объект;
				ДанныеПодписиБезСертификата.ДанныеПодписи = ДанныеПодписи;
				
				ПодписиБезСертификата.Вставить(ИдентификаторПодписи, ДанныеПодписиБезСертификата);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПодписиБезСертификата.Количество() = 0 Тогда
		УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеПолученияСертификатов, Контекст);
		Возврат;
	КонецЕсли;
	
	ПроверятьЭлектронныеПодписиНаСервере = 
		ЭлектроннаяПодписьКлиент.ОбщиеНастройки().ПроверятьЭлектронныеПодписиНаСервере;
	
	Если ПроверятьЭлектронныеПодписиНаСервере Тогда
		ПолучитьСертификатыПодписейНаСервере(Контекст, ПодписиБезСертификата);
		Возврат;
	КонецЕсли;
	
	КонтекстПолученияСертификатов = КонтекстПолученияСертификатовПередПроверкой(Контекст, ПодписиБезСертификата);
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	ПолучитьСертификатыПодписейНаКлиенте(КонтекстПолученияСертификатов);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПодписейНаСервере(Контекст, ПодписиБезСертификата)
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	
	АдресаДанныхПодписей = Новый Соответствие;
	
	Для Каждого Элемент Из ПодписиБезСертификата Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ДанныеПодписиБезСертификата = Элемент.Значение;
		
		АдресаДанныхПодписей.Вставить(ИдентификаторПодписи, ДанныеПодписиБезСертификата.ДанныеПодписи.АдресПодписи);
		
	КонецЦикла;
	
	РезультатПолученияНаСервере = РаботаСЭПВызовСервера.ПолучитьСертификатыИзПодписейНаСервере(
		АдресаДанныхПодписей, Контекст.Форма.УникальныйИдентификатор);
	
	ДанныеПодписейОбъектов = Контекст.ДанныеПодписейОбъектов;
	
	Для Каждого Элемент Из РезультатПолученияНаСервере.ДанныеСертификатовПоПодписям Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ДанныеСертификата = Элемент.Значение;
		
		Объект = ПодписиБезСертификата[ИдентификаторПодписи].Объект;
		
		ДанныеПодписейОбъекта = ДанныеПодписейОбъектов[Объект];
		Если ДанныеПодписейОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписи = ДанныеПодписейОбъекта[ИдентификаторПодписи];
		Если ДанныеПодписи <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПодписи, ДанныеСертификата);
		КонецЕсли;
		
	КонецЦикла;
	
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(
		ДействияПроверкиПодписей().ПолучитьСертификаты, Контекст);
	СброситьЗапускДействияПроверкиПодписей(Контекст);
	
КонецПроцедуры

Функция КонтекстПолученияСертификатовПередПроверкой(КонтекстПроверки, ПодписиБезСертификата)
	
	Контекст = НовыйКонтекстПолученияСертификатов();
	
	Контекст.КонтекстПроверки = КонтекстПроверки;
	Контекст.ПодписиБезСертификата = ПодписиБезСертификата;
	
	Для Каждого Элемент Из ПодписиБезСертификата Цикл
		ИдентификаторПодписи = Элемент.Ключ;
		Контекст.ИдентификаторыПодписей.Добавить(ИдентификаторПодписи);
	КонецЦикла;
	
	Возврат Контекст;
	
КонецФункции

Функция НовыйКонтекстПолученияСертификатов()
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("КонтекстПроверки", НовыйКонтекстПроверкиПодписей());
	Контекст.Вставить("ПодписиБезСертификата", Новый Соответствие);
	
	Контекст.Вставить("ИдентификаторыПодписей", Новый Массив);
	
	Контекст.Вставить("ИндексТекущейПодписи", -1);
	Контекст.Вставить("ТекущийИдентификаторПодписи", УникальныйИдентификаторПустой());
	
	Контекст.Вставить("ТекущиеДанныеПодписиБезСертификата", РаботаСЭПКлиентСервер.НовыеДанныеПодписиБезСертификата());
	
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	
	Контекст.Вставить("ДанныеСертификатовПодписей", Новый Соответствие);
	Контекст.Вставить("ОшибкиПолученияСертификатов", Новый Соответствие);
	
	Возврат Контекст;
	
КонецФункции

Процедура ПолучитьСертификатыПодписейНаКлиенте(Контекст)
	
	ОбработчикПолучения = Новый ОписаниеОповещения("ПолучитьСертификатыПодписейПослеСозданияМенеджераКриптографии",
		ЭтотОбъект, Контекст);
	
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОбработчикПолучения, "ПолучениеСертификатов");
	
КонецПроцедуры

Процедура ПолучитьСертификатыПодписейПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		ЗавершитьЦиклПолученияСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии = Результат;
	
	НачатьЦиклПолученияСертификатов(Контекст);
	
КонецПроцедуры

Процедура НачатьЦиклПолученияСертификатов(Контекст)
	
	Если Не ИтерироватьЦиклПолученияСертификатов(Контекст) Тогда
		ЗавершитьЦиклПолученияСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	АдресДанныхПодписи = Контекст.ТекущиеДанныеПодписиБезСертификата.ДанныеПодписи.АдресПодписи;
	Если ТипЗнч(АдресДанныхПодписи) <> Тип("Строка")
		Или Не ЭтоАдресВременногоХранилища(АдресДанныхПодписи) Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Адрес данных подписи не является адресом временного хранилища'");
		
		Контекст.ОшибкиПолученияСертификатовПодписей.Вставить(Контекст.ТекущийИдентификаторПодписи, ОписаниеОшибки);
		НачатьЦиклПолученияСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеПодписи = ПолучитьИзВременногоХранилища(АдресДанныхПодписи);
	Если Не ЗначениеЗаполнено(ДанныеПодписи) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить двоичные данные подписи'");
		
		Контекст.ОшибкиПолученияСертификатовПодписей.Вставить(Контекст.ТекущийИдентификаторПодписи, ОписаниеОшибки);
		НачатьЦиклПолученияСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработчикПолучения = Новый ОписаниеОповещения(
		"ОбработатьПолучениеСертификатаПриПроверкеПодписей", ЭтотОбъект,
		Контекст,
		"ОбработатьОшибкуПолученияСертификатаПриПроверкеПодписей", ЭтотОбъект);
	
	Контекст.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(ОбработчикПолучения, ДанныеПодписи);
	
КонецПроцедуры

Функция ИтерироватьЦиклПолученияСертификатов(Контекст)
	
	ИдентификаторыПодписей = Контекст.ИдентификаторыПодписей;
	ПодписиБезСертификата = Контекст.ПодписиБезСертификата;
	КоличествоПодписей = ИдентификаторыПодписей.Количество();
	Индекс = Контекст.ИндексТекущейПодписи;
	
	Если (Индекс + 1) >= КоличествоПодписей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Индекс = Индекс + 1;
	
	Контекст.ИндексТекущейПодписи = Индекс;
	Контекст.ТекущийИдентификаторПодписи = ИдентификаторыПодписей[Индекс];
	Контекст.ТекущиеДанныеПодписиБезСертификата = ПодписиБезСертификата[Контекст.ТекущийИдентификаторПодписи];
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработатьОшибкуПолученияСертификатаПриПроверкеПодписей(ИнформацияОбОшибке, Контекст) Экспорт
	
	ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить сертификаты из подписи по причине: %1'"),
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Контекст.ОшибкиПолученияСертификатовПодписей.Вставить(Контекст.ТекущийИдентификаторПодписи, ОписаниеОшибки);
	НачатьЦиклПолученияСертификатов(Контекст);
	
КонецПроцедуры

Процедура ОбработатьПолучениеСертификатаПриПроверкеПодписей(Сертификаты, Контекст) Экспорт
	
	Если ТипЗнч(Сертификаты) <> Тип("Массив")
		Или Сертификаты.Количество() = 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить сертификаты из подписи: в данных подписи нет данных о сертификатах'");
		
		Контекст.ОшибкиПолученияСертификатовПодписей.Вставить(Контекст.ТекущийИдентификаторПодписи, ОписаниеОшибки);
		НачатьЦиклПолученияСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	Сертификат = КриптографияБЭДСлужебныйКлиентСервер.НайтиСертификатПодписавшейСтороныРекурсивно(Сертификаты);
	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить сертификат из подписи'");
		
		Контекст.ОшибкиПолученияСертификатовПодписей.Вставить(Контекст.ТекущийИдентификаторПодписи, ОписаниеОшибки);
		НачатьЦиклПолученияСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеСертификата = РаботаСЭПКлиентСервер.НовыйРезультатПолученияДанныхСертификатаИзПодписи();
	
	ДанныеСертификата.АдресСертификата =
		ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), Контекст.КонтекстПроверки.Форма.УникальныйИдентификатор);
	ДанныеСертификата.КомуВыданСертификат = ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта(Сертификат);
	ДанныеСертификата.Отпечаток = Base64Строка(Сертификат.Отпечаток);
	
	Контекст.ДанныеСертификатовПодписей.Вставить(Контекст.ТекущийИдентификаторПодписи, ДанныеСертификата);
	
	НачатьЦиклПолученияСертификатов(Контекст);
	
КонецПроцедуры

Процедура ЗавершитьЦиклПолученияСертификатов(Контекст)
	
	ДанныеСертификатовПодписей = Контекст.ДанныеСертификатовПодписей;
	РаботаСЭПВызовСервера.ЗанестиДанныеПолученияСертификатовИзПодписи(ДанныеСертификатовПодписей);
	
	КонтекстПроверки = Контекст.КонтекстПроверки;
	ДанныеПодписейОбъектов = КонтекстПроверки.ДанныеПодписейОбъектов;
	ПодписиБезСертификата = Контекст.ПодписиБезСертификата;
	
	Для Каждого Элемент Из ДанныеСертификатовПодписей Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ДанныеСертификата = Элемент.Значение;
		
		Объект = ПодписиБезСертификата[ИдентификаторПодписи].Объект;
		
		ДанныеПодписейОбъекта = ДанныеПодписейОбъектов[Объект];
		Если ДанныеПодписейОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписи = ДанныеПодписейОбъекта[ИдентификаторПодписи];
		Если ДанныеПодписи <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПодписи, ДанныеСертификата);
		КонецЕсли;
		
	КонецЦикла;
	
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(
		ДействияПроверкиПодписей().ПолучитьСертификаты, КонтекстПроверки);
	СброситьЗапускДействияПроверкиПодписей(КонтекстПроверки);
	ВыполнитьДействияДляПроверкиПодписей(КонтекстПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаДанных

Процедура РасшифроватьДанныеКПроверкеПодписей(Контекст)
	
	ДействиеРасшифровки = ДействияПроверкиПодписей().РасшифроватьДанные;
	
	Если Не НеобходимоВыполнитьДействиеПроверкиПодписей(ДействиеРасшифровки, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеОбъекты = Новый Массив;
	Для Каждого Элемент Из Контекст.ДанныеОбъектов Цикл
		
		Объект = Элемент.Ключ;
		ДанныеОбъекта = Элемент.Значение;
		Если ДанныеОбъекта.Зашифрован Тогда
			ЗашифрованныеОбъекты.Добавить(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗашифрованныеОбъекты.Количество() = 0 Тогда
		УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеРасшифровки, Контекст);
		Возврат;
	КонецЕсли;
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	
	КонтекстРасшифровки = НовыйКонтекстРасшифровкиДляПроверкиПодписей();
	КонтекстРасшифровки.КонтекстПроверки = Контекст;
	КонтекстРасшифровки.ЗашифрованныеОбъекты = ЗашифрованныеОбъекты;
	
	НачатьЦиклРасшифровкиДляПроверкиПодписей(КонтекстРасшифровки);
	
КонецПроцедуры

Функция НовыйКонтекстРасшифровкиДляПроверкиПодписей()
	
	Контекст = Новый Структура;
	Контекст.Вставить("КонтекстПроверки", Новый Структура);
	
	Контекст.Вставить("ЗашифрованныеОбъекты", Новый Массив);
	Контекст.Вставить("ИндексТекущегоОбъекта", -1);
	
	Контекст.Вставить("ТекущийОбъект", Неопределено);
	
	Контекст.Вставить("РасшифрованныеДанные", Новый Соответствие);
	
	Возврат Контекст;
	
КонецФункции

Процедура НачатьЦиклРасшифровкиДляПроверкиПодписей(КонтекстРасшифровки)
	
	Если Не ИтерироватьИндексыРасшифровкиДляПроверкиПодписей(КонтекстРасшифровки) Тогда
		ЗакончитьРасшифровкуДанныхКПроверкеПодписей(КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = ОписаниеДанныхРасшифровкиКПроверкеПодписей(КонтекстРасшифровки);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ОбработатьРасшифровкуДанныхКПроверкеПодписей",
		ЭтотОбъект, КонтекстРасшифровки);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(
		ОписаниеДанных, КонтекстРасшифровки.КонтекстПроверки.Форма, ОбработчикПродолжения);
	
КонецПроцедуры

Функция ИтерироватьИндексыРасшифровкиДляПроверкиПодписей(КонтекстРасшифровки)
	
	ИндексОбъекта = КонтекстРасшифровки.ИндексТекущегоОбъекта;
	Объекты = КонтекстРасшифровки.ЗашифрованныеОбъекты;
	КоличествоОбъектов = Объекты.Количество();
	
	Если ИндексОбъекта + 1 >= КоличествоОбъектов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИндексОбъекта = ИндексОбъекта + 1;
	Объект = Объекты[ИндексОбъекта];
	
	КонтекстРасшифровки.ИндексТекущегоОбъекта = ИндексОбъекта;
	КонтекстРасшифровки.ТекущийОбъект = Объект;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеДанныхРасшифровкиКПроверкеПодписей(КонтекстРасшифровки)
	
	КонтекстПроверки = КонтекстРасшифровки.КонтекстПроверки;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ИдентификаторФормы", КонтекстПроверки.Форма.УникальныйИдентификатор);
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Расшифровка данных к проверке подписей'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Зашифрованный объект'"));
	
	ТекущийОбъект = КонтекстРасшифровки.ТекущийОбъект;
	
	ДанныеОбъекта = КонтекстПроверки.ДанныеОбъектов[ТекущийОбъект];
	Данные = ПолучитьИзВременногоХранилища(ДанныеОбъекта.АдресДанных);
	
	ОписаниеДанных.Вставить("Данные", Данные);
	ОписаниеДанных.Вставить("СертификатыШифрования", ДанныеОбъекта.ОбъектШифрования);
	ОписаниеДанных.Вставить("Представление", ДанныеОбъекта.ОбъектШифрования);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	
	Возврат ОписаниеДанных;
	
КонецФункции

Процедура ОбработатьРасшифровкуДанныхКПроверкеПодписей(ОписаниеДанных, КонтекстРасшифровки) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		УстановитьОтказПроверкиПодписей(КонтекстРасшифровки.КонтекстПроверки);
		ЗакончитьРасшифровкуДанныхКПроверкеПодписей(КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	УИДФормы = КонтекстРасшифровки.КонтекстПроверки.Форма.УникальныйИдентификатор;
	
	АдресРасшифрованныхДанных = ПоместитьВоВременноеХранилище(
		ОписаниеДанных.РасшифрованныеДанные, УИДФормы);
	
	КонтекстРасшифровки.РасшифрованныеДанные.Вставить(
		КонтекстРасшифровки.ТекущийОбъект,
		АдресРасшифрованныхДанных);
	
	НачатьЦиклРасшифровкиДляПроверкиПодписей(КонтекстРасшифровки);
	
КонецПроцедуры

Процедура ЗакончитьРасшифровкуДанныхКПроверкеПодписей(КонтекстРасшифровки)
	
	КонтекстПроверки = КонтекстРасшифровки.КонтекстПроверки;
	КонтекстПроверки.РасшифрованныеДанныеОбъектов = КонтекстРасшифровки.РасшифрованныеДанные;
	
	Если КонтекстРасшифровки.РасшифрованныеДанные.Количество() > 0 Тогда
		
		ПараметрыПолучения = РаботаСЭПКлиентСервер.НовыеПараметрыПолученияДанныхОбъектовДляПроверкиПодписей();
		ПараметрыПолучения.ДанныеПодписейОбъектов = КонтекстПроверки.ДанныеПодписейОбъектов;
		ПараметрыПолучения.УникальныйИдентификаторФормы = КонтекстПроверки.Форма.УникальныйИдентификатор;
		ПараметрыПолучения.РасшифрованныеДанные = КонтекстРасшифровки.РасшифрованныеДанные;
		
		КонтекстПроверки.ДанныеОбъектов = РаботаСЭПВызовСервера.ДанныеОбъектовДляПроверкиПодписей(ПараметрыПолучения);
		
	КонецЕсли;
	
	ДействиеРасшифровки = ДействияПроверкиПодписей().РасшифроватьДанные;
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеРасшифровки, КонтекстПроверки);
	СброситьЗапускДействияПроверкиПодписей(КонтекстПроверки);
	ВыполнитьДействияДляПроверкиПодписей(КонтекстПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДействительностиПодписей

Процедура ПроверитьДействительностьПодписей(Контекст)
	
	ДействиеПроверки = ДействияПроверкиПодписей().ПроверитьПодписи;
	Если Не НеобходимоВыполнитьДействиеПроверкиПодписей(ДействиеПроверки, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьЭлектронныеПодписиНаСервере = 
		ЭлектроннаяПодписьКлиент.ОбщиеНастройки().ПроверятьЭлектронныеПодписиНаСервере;
	
	Если ПроверятьЭлектронныеПодписиНаСервере Тогда
		ПроверитьЭлектронныеПодписиНаСервере(Контекст);
		Возврат;
	КонецЕсли;
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	
	НачатьЦиклПроверкиДействительностиПодписей(Контекст);
	
КонецПроцедуры

Процедура ПроверитьЭлектронныеПодписиНаСервере(Контекст)
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	
	Контекст.ОбщийРезультатПроверки =
		РаботаСЭПВызовСервера.ПроверитьЭлектронныеПодписиНаСервере(
			Контекст.ДанныеПодписейОбъектов,
			Контекст.ДанныеОбъектов);
	
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(
		ДействияПроверкиПодписей().ПроверитьПодписи, Контекст);
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(
		ДействияПроверкиПодписей().ЗакончитьПроверкуНаСервере, Контекст);
	СброситьЗапускДействияПроверкиПодписей(Контекст);
	
КонецПроцедуры

Процедура НачатьЦиклПроверкиДействительностиПодписей(Контекст)
	
	Если Не ИтерироватьИндексыПодписиДляПроверки(Контекст) Тогда
		ЗакончитьПроверкуДействительностиПодписей(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеДляПроверки = ДанныеДляПроверкиДействительностиПодписи(Контекст);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПроверкуДействительностиПодписи", ЭтотОбъект, Контекст);
	
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		ОбработчикЗавершения,
		ДанныеДляПроверки.АдресДанных,
		ДанныеДляПроверки.АдресПодписи);
	
КонецПроцедуры

Функция ИтерироватьИндексыПодписиДляПроверки(Контекст)
	
	Если ИтерироватьИндексыПоДополнительнойПроверке(Контекст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИндексПодписи = Контекст.ИндексТекущейПодписи;
	ПодписиОбъекта = Контекст.ПодписиТекущегоОбъекта;
	
	ИндексПодписи = ИндексПодписи + 1;
	
	Если ИндексПодписи < ПодписиОбъекта.Количество() Тогда
		Контекст.ИндексТекущейПодписи = ИндексПодписи;
		Контекст.ТекущийИдентификаторПодписи = ПодписиОбъекта[ИндексПодписи];
		Возврат Истина;
	КонецЕсли;
	
	ИндексПодписи = 0;
	ИндексОбъекта = Контекст.ИндексТекущегоОбъекта;
	
	ИндексОбъекта = ИндексОбъекта + 1;
	Объекты = Контекст.ПодписанныеОбъекты;
	
	Если ИндексОбъекта >= Объекты.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = Объекты[ИндексОбъекта];
	ДанныеПодписейОбъектов = Контекст.ДанныеПодписейОбъектов[Объект];
	
	ПодписиОбъекта = Новый Массив;
	Для Каждого Элемент Из ДанныеПодписейОбъектов Цикл
		ПодписиОбъекта.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Контекст.ИндексТекущегоОбъекта = ИндексОбъекта;
	Контекст.ТекущийОбъект = Объект;
	
	Контекст.ПодписиТекущегоОбъекта = ПодписиОбъекта;
	
	Контекст.ИндексТекущейПодписи = ИндексПодписи;
	Контекст.ТекущийИдентификаторПодписи = ПодписиОбъекта[ИндексПодписи];
	
	Возврат Истина;
	
КонецФункции

Функция ИтерироватьИндексыПоДополнительнойПроверке(Контекст)
	
	Если Не Контекст.ПроверкаТекущегоОбъектаНеуспешна Тогда
		Контекст.ИндексДополнительнойПроверки = 0;
		Контекст.ПроверкаТекущегоОбъектаНеуспешна = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Объект = Контекст.ТекущийОбъект;
	ДанныеОбъекта = Контекст.ДанныеОбъектов[Объект];
	
	Если Не ДанныеОбъекта.РазныеВерсииПодписей Тогда
		Контекст.ИндексДополнительнойПроверки = 0;
		Контекст.ПроверкаТекущегоОбъектаНеуспешна = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторПодписи = Контекст.ТекущийИдентификаторПодписи;
	
	ДанныеПодписи = Контекст.ДанныеПодписейОбъектов[Объект][ИдентификаторПодписи];
	Версия = ДанныеПодписи.Версия;
	
	ВариантыДополнительныхПроверок = ДанныеОбъекта.ДвоичныеДанныеПоВерсиям[Версия];
	
	ИндексПроверки = Контекст.ИндексДополнительнойПроверки;
	
	Если ВариантыДополнительныхПроверок.Количество() <= ИндексПроверки + 1 Тогда
		Контекст.ИндексДополнительнойПроверки = 0;
		Контекст.ПроверкаТекущегоОбъектаНеуспешна = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Контекст.ИндексДополнительнойПроверки = ИндексПроверки + 1;
	Возврат Истина;
	
КонецФункции

Функция ДанныеДляПроверкиДействительностиПодписи(Контекст)
	
	ДанныеДляПроверки = Новый Структура;
	ДанныеДляПроверки.Вставить("АдресДанных", "");
	ДанныеДляПроверки.Вставить("АдресПодписи", "");
	
	Объект = Контекст.ТекущийОбъект;
	ИдентификаторПодписи = Контекст.ТекущийИдентификаторПодписи;
	
	ДанныеПодписи = Контекст.ДанныеПодписейОбъектов[Объект][ИдентификаторПодписи];
	
	АдресПодписи = ДанныеПодписи.АдресПодписи;
	
	ДанныеОбъекта = Контекст.ДанныеОбъектов[Объект];
	Версия = ДанныеПодписи.Версия;
	
	АдресДанных = "";
	Если Не ДанныеОбъекта.РазныеВерсииПодписей Тогда
		АдресДанных = ДанныеОбъекта.АдресДанных;
	Иначе
		ВариантыДополнительныхПроверок = ДанныеОбъекта.ДвоичныеДанныеПоВерсиям[Версия];
		АдресДанных = ВариантыДополнительныхПроверок[Контекст.ИндексДополнительнойПроверки];
	КонецЕсли;
	
	ДанныеДляПроверки.АдресПодписи = АдресПодписи;
	ДанныеДляПроверки.АдресДанных = АдресДанных;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

Процедура ОбработатьПроверкуДействительностиПодписи(Результат, Контекст) Экспорт
	
	РезультатПроверки = РаботаСЭПКлиентСервер.НовыйРезультатПроверкиПодписи();
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		
		РезультатПроверки.ПодписьВерна = Результат;
		РезультатПроверки.СертификатДействителен = Результат;
		РезультатПроверки.ТекстОшибкиПроверкиПодписи = "";
		РезультатПроверки.ТекстОшибкиПроверкиСертификата = "";
		
		Контекст.ПроверкаТекущегоОбъектаНеуспешна = Не Результат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
			РезультатПроверки.ПодписьВерна = Ложь;
			РезультатПроверки.ТекстОшибкиПроверкиПодписи = Результат.ТекстОшибкиПроверкиПодписи;
			
			Контекст.ПроверкаТекущегоОбъектаНеуспешна = Истина;
		Иначе
			РезультатПроверки.ПодписьВерна = Истина;
			РезультатПроверки.ТекстОшибкиПроверкиПодписи = "";
			
			Контекст.ПроверкаТекущегоОбъектаНеуспешна = Ложь;
		КонецЕсли;
		
		Если Результат.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
			РезультатПроверки.СертификатДействителен = Ложь;
			РезультатПроверки.ТекстОшибкиПроверкиСертификата = Результат.ТекстОшибкиПроверкиСертификата;
		Иначе
			РезультатПроверки.СертификатДействителен = Истина;
			РезультатПроверки.ТекстОшибкиПроверкиСертификата = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторПодписи = Контекст.ТекущийИдентификаторПодписи;
	
	РезультатыПроверки = Контекст.РезультатыПроверкиПодписей;
	
	РезультатыПроверки.Вставить(ИдентификаторПодписи, РезультатПроверки);
	
	НачатьЦиклПроверкиДействительностиПодписей(Контекст);
	
КонецПроцедуры

Процедура ЗакончитьПроверкуДействительностиПодписей(Контекст)
	
	ДействиеПроверки = ДействияПроверкиПодписей().ПроверитьПодписи;
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеПроверки, Контекст);
	СброситьЗапускДействияПроверкиПодписей(Контекст);
	ВыполнитьДействияДляПроверкиПодписей(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеПроверкиПодписейНаСервере

Процедура ЗавершитьПроверкуПодписейНаСервере(Контекст)
	
	ДействиеЗавершения = ДействияПроверкиПодписей().ЗакончитьПроверкуНаСервере;
	Если Не НеобходимоВыполнитьДействиеПроверкиПодписей(ДействиеЗавершения, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	
	РезультатПроверки = РаботаСЭПВызовСервера.ЗавершитьПроверкуПодписейНаСервере(
		Контекст.ДанныеПодписейОбъектов,
		Контекст.РезультатыПроверкиПодписей);
	
	Контекст.ОбщийРезультатПроверки = РезультатПроверки;
	
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеЗавершения, Контекст);
	СброситьЗапускДействияПроверкиПодписей(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ПерезаполенниеТекущихСтрок

Процедура ПерезаполнитьТекущиеСтроки(Контекст)
	
	ДействиеПерезаполнения = ДействияПроверкиПодписей().ПерезаполнитьСтроки;
	Если Не НеобходимоВыполнитьДействиеПроверкиПодписей(ДействиеПерезаполнения, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки <> Истина Тогда
		УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеПерезаполнения, Контекст);
		Возврат;
	КонецЕсли;
	
	УстановитьЗапускДействияПроверкиПодписей(Контекст);
	
	ПерезаполнитьДанныеВСтрокахПоРезультатамПроверкиПодписей(Контекст);
	
	УбратьНеобходимостьВыполненияДействияПроверкиПодписей(ДействиеПерезаполнения, Контекст);
	СброситьЗапускДействияПроверкиПодписей(Контекст);
	
КонецПроцедуры

Процедура ПерезаполнитьДанныеВСтрокахПоРезультатамПроверкиПодписей(Контекст)
	
	ПараметрыПроверки = Контекст.ПараметрыПроверки;
	Форма = Контекст.Форма;
	
	ИмяТаблицыЭП = ПараметрыПроверки.ИмяТаблицыЭП;
	ВыделенныеСтроки = ПараметрыПроверки.ВыделенныеСтроки;
	
	РезультатыПроверки = Контекст.ОбщийРезультатПроверки;
	
	НетВыделенныхСтрок =
		ТипЗнч(ВыделенныеСтроки) <> Тип("Массив")
		Или (ТипЗнч(ВыделенныеСтроки) = Тип("Массив")
			И ВыделенныеСтроки.Количество() = 0);
	
	Если НетВыделенныхСтрок Тогда
		
		ТаблицаЭП = Форма[ИмяТаблицыЭП];
		
		Если ТипЗнч(ТаблицаЭП) = Тип("ДанныеФормыДерево") Тогда
			ПерезаполнитьДанныеПоРезультатамПроверкиВКоллекцииДерева(ТаблицаЭП.ПолучитьЭлементы(), РезультатыПроверки);
		ИначеЕсли ТипЗнч(ТаблицаЭП) = Тип("ДанныеФормыКоллекция") Тогда
			
			Для Каждого Строка Из ТаблицаЭП Цикл
				ПерезаполнитьДанныеПоРезультатамПроверкиВСтроке(Строка, РезультатыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
				
				ДанныеСтроки = Форма[ИмяТаблицыЭП].НайтиПоИдентификатору(ВыделеннаяСтрока);
				ПерезаполнитьДанныеПоРезультатамПроверкиВСтроке(ДанныеСтроки, РезультатыПроверки);
				
				Если ТипЗнч(ДанныеСтроки) = Тип("ДанныеФормыЭлементДерева") Тогда
					ПерезаполнитьДанныеПоРезультатамПроверкиВКоллекцииДерева(
						ДанныеСтроки.ПолучитьЭлементы(), РезультатыПроверки);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВыделеннаяСтрока) = Тип("Структура") Тогда
				
				ПерезаполнитьДанныеПоРезультатамПроверкиВСтроке(ВыделеннаяСтрока, РезультатыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьДанныеПоРезультатамПроверкиВКоллекцииДерева(КоллекцияСтрокДерева, РезультатыПроверки)
	
	Для Каждого Строка Из КоллекцияСтрокДерева Цикл
		
		ПерезаполнитьДанныеПоРезультатамПроверкиВКоллекцииДерева(Строка.ПолучитьЭлементы(), РезультатыПроверки);
		
		ПерезаполнитьДанныеПоРезультатамПроверкиВСтроке(Строка, РезультатыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьДанныеПоРезультатамПроверкиВСтроке(Строка, РезультатыПроверки)
	
	УИДПодписи = Строка.УникальныйИдентификатор;
	
	РезультатПроверкиСтроки = РезультатыПроверки[УИДПодписи];
	Если РезультатПроверкиСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, РезультатПроверкиСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОкончаниеПроверки

Процедура ЗакончитьПроверкуПодписей(Контекст)
	
	Если Не МожноЗавершитьПроверкуПодписей(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = НовыйРезультатВыполеннияДействийПроверки();
	РезультатПроверки.ПроверенныеПодписи = Контекст.ОбщийРезультатПроверки;
	РезультатПроверки.Успех = Не (Контекст.Отказ = Истина);
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

Функция МожноЗавершитьПроверкуПодписей(Контекст)
	
	Если Контекст.ИмеетсяРаботающееДействие Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст.Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВозможныеДействия = ДействияПроверкиПодписей();
	
	ДействияПроверки = Новый Массив;
	ДействияПроверки.Добавить(ВозможныеДействия.РасшифроватьДанные);
	ДействияПроверки.Добавить(ВозможныеДействия.ПроверитьПодписи);
	ДействияПроверки.Добавить(ВозможныеДействия.ЗакончитьПроверкуНаСервере);
	ДействияПроверки.Добавить(ВозможныеДействия.ПерезаполнитьСтроки);
	
	Для Каждого Действие Из ДействияПроверки Цикл
		Если Контекст.ДействияКВыполнению[Действие] = Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйРезультатВыполеннияДействийПроверки()
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ПроверенныеПодписи", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Показывает текст и вызывает обработчик с заданным результатом.
//
Процедура ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Результат) Экспорт
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыОбработчика.Вставить("Результат",             Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры ВернутьРезультатПослеПоказаПредупреждения.
//
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура) Экспорт
	ВыполнитьОбработкуОповещения(Структура.ОбработчикРезультата, Структура.Результат);
КонецПроцедуры

// Показывает стандартное предупреждение.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПредставлениеКоманды - Строка - Необязательный. Имя команды, для выполнения которой необходимо расширение.
//
Процедура ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
	ОбработчикРезультата = Неопределено, ПредставлениеКоманды = "") Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Для выполнения команды ""%1"" необходимо
	                                 |установить расширение работы с криптографией.'");
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПредставлениеКоманды);
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, " ""%1""", "");
	КонецЕсли;
	ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Неопределено);
	
КонецПроцедуры

#Область РаботаСМЧД

Процедура ОбработатьВыборДоверенностиДляУказания(Элемент, Контекст) Экспорт
	
	Если Элемент = Неопределено Тогда
		Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РаботаСЭПВызовСервера.УстановитьДоверенностьДляЭлектроннойПодписи(Контекст.ИдентификаторПодписи, Элемент.Значение);
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДоверенности

Функция ДанныеДоверенностейДляСохранения(Контекст)
	
	ДанныеДляСохранения = Новый Структура;
	ДанныеДляСохранения.Вставить("Сохранять", Ложь);
	ДанныеДляСохранения.Вставить("ИмяФайла", "");
	ДанныеДляСохранения.Вставить("АдресДанных", "");
	
	ОписаниеПодписи = Контекст.ОписаниеПодписи;
	Если Не ЗначениеЗаполнено(ОписаниеПодписи.ДоверенностьСсылка) Тогда
		Возврат ДанныеДляСохранения;
	КонецЕсли;
	
	Доверенность = ОписаниеПодписи.ДоверенностьСсылка;
	
	Если Не Контекст.Свойство("ВыгруженныеДоверенности") Тогда
		Контекст.Вставить("ВыгруженныеДоверенности", Новый Соответствие);
	КонецЕсли;
	
	Если Контекст.ВыгруженныеДоверенности[Доверенность] <> Неопределено Тогда
		Возврат ДанныеДляСохранения;
	КонецЕсли;
	
	АдресДанных = ОписаниеПодписи.АдресДанныхВыгрузкиДоверенности;
	Если ТипЗнч(АдресДанных) <> Тип("Строка")
		Или Не ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		
		Возврат ДанныеДляСохранения;
	КонецЕсли;
	
	ДанныеДляВыгрузки = ПолучитьИзВременногоХранилища(АдресДанных);
	Если ТипЗнч(ДанныеДляВыгрузки) <> Тип("Структура")
		Или ДанныеДляВыгрузки.Выгружена <> Истина Тогда
		
		Возврат ДанныеДляСохранения;
	КонецЕсли;
	
	ДанныеДляСохранения.Сохранять = Истина;
	ДанныеДляСохранения.ИмяФайла = ДанныеДляВыгрузки.ИмяФайла;
	ДанныеДляСохранения.АдресДанных = ДанныеДляВыгрузки.АдресДанных;
	
	Контекст.ВыгруженныеДоверенности.Вставить(Доверенность, Истина);
	
	Возврат ДанныеДляСохранения;
	
КонецФункции

Процедура СохранитьДоверенностьВместеСЭППослеСохраненияФайла(Результат, Контекст) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПослеСохраненияДоверенностиВместеСПодписью(Контекст);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
