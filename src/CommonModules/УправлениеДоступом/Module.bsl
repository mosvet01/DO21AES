////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для проверки прав

// Проверяет, что у пользователя есть роль в одном из профилей
// тех групп доступа в которых он участвует, например,
// роль ПросмотрЖурналаРегистрации, роль ПечатьНепроведенныхДокументов.
//
// Если указан объект, тогда дополнительно проверяет, что группа доступа
// в профиле которой есть указанная роль также предоставляет право Чтение
// указанного объекта.
//
// Параметры:
//  Роль           - Строка - имя роли.
//
//  СсылкаНаОбъект - Ссылка на объект для которого заполняются наборы значений доступа
//                   для проверки права Чтение.
//                 - ТаблицаЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа) - произвольная
//                   таблица наборов значений доступа.
//                   Пустую подготовленную таблицу можно получить с помощью функции
//                   УправлениеДоступом.ТаблицаНаборыЗначенийДоступа() - колонки
//                   Чтение, Изменение, Добавление, Удаление не заполнять.
//
//  Пользователь   - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено.
//                   Если не заполнено, тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРоль(Знач Роль, Знач НаборыЗначенийДоступа = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль",         Роль);
	
	Если НаборыЗначенийДоступа = Неопределено ИЛИ НЕ ОграничиватьДоступНаУровнеЗаписей() Тогда
		// Проверка, что роль назначается пользователю через группу доступа по профилю.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь = &Пользователь)
		|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			И (СоставыГруппПользователей.Используется)
		|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль.Имя = &Роль)
		|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)";
	Иначе
		
		Если ТипЗнч(НаборыЗначенийДоступа) <> Тип("ТаблицаЗначений") Тогда
			СсылкаНаОбъект        = НаборыЗначенийДоступа;
			НаборыЗначенийДоступа = ТаблицаНаборыЗначенийДоступа();
			СсылкаНаОбъект.ПолучитьОбъект().ЗаполнитьНаборыЗначенийДоступа(НаборыЗначенийДоступа);
			// Выбор только наборов значений доступа предназначенных для проверки права Чтение.
			СтрокиНаборовЧтения = НаборыЗначенийДоступа.НайтиСтроки(Новый Структура("Чтение", Истина));
			НомераНаборов = Новый Соответствие;
			Для каждого Строка Из СтрокиНаборовЧтения Цикл
				НомераНаборов.Вставить(Строка.НомерНабора, Истина);
			КонецЦикла;
			Индекс = НаборыЗначенийДоступа.Количество()-1;
			Пока Индекс > 0 Цикл
				Если НомераНаборов[НаборыЗначенийДоступа[Индекс].НомерНабора] = Неопределено Тогда
					НаборыЗначенийДоступа.Удалить(Индекс);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
			НаборыЗначенийДоступа.ЗаполнитьЗначения(Ложь, "Чтение, Изменение, Добавление, Удаление") ;
		КонецЕсли;
		
		// Проверка, что роль назначается пользователю через группу доступа по профилю с разрешенными наборами значений доступа.
		
		Запрос.УстановитьПараметр("НаборыЗначенийДоступа", НаборыЗначенийДоступа);
		Запрос.УстановитьПараметр("СвойстваВидовДоступа",  УправлениеДоступомСлужебный.СвойстваВидаДоступа());
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа
		|ПОМЕСТИТЬ НаборыЗначенийДоступаБезСвойств
		|ИЗ
		|	&НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваВидовДоступа.ВидДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа
		|ПОМЕСТИТЬ СвойстваВидовДоступа
		|ИЗ
		|	&СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения))
		|			ТОГДА ЕСТЬNULL(Идентификаторы.ЗначениеПустойСсылки, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипЗначенияДоступа,
		|	Идентификаторы.Ссылка КАК Таблица
		|ПОМЕСТИТЬ НаборыЗначенийДоступа
		|ИЗ
		|	НаборыЗначенийДоступаБезСвойств КАК НаборыЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
		|		ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(Идентификаторы.ЗначениеПустойСсылки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|		ПО НаборыЗначенийДоступа.ВидДоступа = СвойстваВидовДоступа.ВидДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ПОМЕСТИТЬ ГруппыДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь = &Пользователь)
		|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			И (СоставыГруппПользователей.Используется)
		|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль.Имя = &Роль)
		|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Наборы.НомерНабора
		|				ИЗ
		|					НаборыЗначенийДоступа КАК Наборы
		|				) КАК НомераНаборов
		|			ГДЕ
		|				НЕ ЛОЖЬ В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ЛОЖЬ
		|						ИЗ
		|							НаборыЗначенийДоступа КАК НаборыЗначений
		|						ГДЕ
		|							НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
		|							И НЕ ВЫБОР
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|										ТОГДА НаборыЗначений.ЗначениеДоступа <> НЕОПРЕДЕЛЕНО
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа))
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Добавление = ИСТИНА)
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Изменение = ИСТИНА)
		|									КОГДА НаборыЗначений.ВидДоступаЧерезПраваПоЗначениямДоступа
		|										ТОГДА ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|															ПО
		|																ИерархияЗначений.ИспользоватьПраваСсылки
		|																	И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																	И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																	И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																	И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
		|																	И ПраваПоЗначениям.Чтение
		|																	И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|															ПО
		|																СоставыГруппПользователей.Пользователь = &Пользователь
		|																	И СоставыГруппПользователей.ГруппаПользователей = ПраваПоЗначениям.Пользователь
		|																	И СоставыГруппПользователей.Используется)
		|												И НЕ ЛОЖЬ В
		|														(ВЫБРАТЬ ПЕРВЫЕ 1
		|															ЛОЖЬ
		|														ИЗ
		|															РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|																ПО
		|																	ИерархияЗначений.ИспользоватьПраваСсылки
		|																		И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																		И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																		И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
		|																		И ПраваПоЗначениям.ЧтениеЗапрещено
		|																		И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|																ПО
		|																	СоставыГруппПользователей.Пользователь = &Пользователь
		|																		И СоставыГруппПользователей.ГруппаПользователей = ПраваПоЗначениям.Пользователь
		|																		И СоставыГруппПользователей.Используется)
		|									ИНАЧЕ (НаборыЗначений.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
		|											ИЛИ НЕ ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ГруппыЗначенийДоступа КАК ВидыЗначений
		|													ГДЕ
		|														ВидыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|														И ВидыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|														И ВидыЗначений.ТолькоВидДоступа = ИСТИНА))
		|											И ВЫБОР
		|												КОГДА ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступа = &ВидДоступаПользователи
		|																ТОГДА ИСТИНА В
		|																		(ВЫБРАТЬ ПЕРВЫЕ 1
		|																			ИСТИНА
		|																		ИЗ
		|																			РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
		|																		ГДЕ
		|																			ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступаПользователи
		|																			И ГруппыЗначенийДоступа.ЗначениеДоступа = &Пользователь
		|																			И ГруппыЗначенийДоступа.ГруппаЗначенийДоступа = НаборыЗначений.ЗначениеДоступа)
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|														ИЛИ ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступаБезГруппЗначенияДоступа
		|																ТОГДА ВЫБОР
		|																		КОГДА ИСТИНА В
		|																				(ВЫБРАТЬ
		|																					ИСТИНА
		|																				ИЗ
		|																					РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																				ГДЕ
		|																					Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																					И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																					И Значения.ТолькоВидДоступа = ЛОЖЬ
		|																					И Значения.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа)
		|																			ТОГДА ИСТИНА
		|																		ИНАЧЕ ЛОЖЬ
		|																	КОНЕЦ
		|															ИНАЧЕ ВЫБОР
		|																	КОГДА ИСТИНА В
		|																			(ВЫБРАТЬ ПЕРВЫЕ 1
		|																				ИСТИНА
		|																			ИЗ
		|																				РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																					ПО
		|																						ГруппыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И ГруппыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																							И Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																							И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И Значения.ТолькоВидДоступа = ГруппыЗначений.ТолькоВидДоступа
		|																							И Значения.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|																		ТОГДА ИСТИНА
		|																	ИНАЧЕ ЛОЖЬ
		|																КОНЕЦ
		|														КОНЕЦ = ВЫБОР
		|															КОГДА ИСТИНА В
		|																	(ВЫБРАТЬ
		|																		ИСТИНА
		|																	ИЗ
		|																		РегистрСведений.ЗначенияГруппДоступа КАК Виды
		|																	ГДЕ
		|																		Виды.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																		И Виды.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И Виды.ТолькоВидДоступа = ИСТИНА)
		|																ТОГДА ИСТИНА
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|													ТОГДА ИСТИНА
		|												ИНАЧЕ ЛОЖЬ
		|											КОНЕЦ
		|								КОНЕЦ))";
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для получения общих настроек подсистемы

// Возвращает значение ПараметрСеанса.ОграничиватьДоступПоВиду,
// установленное по значению Константа.ОграничиватьДоступНаУровнеЗаписей.
//
Функция ОграничиватьДоступНаУровнеЗаписей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с наборами значений доступа

// Проверяет предусмотрена ли для объекта метаданных
// процедура заполнения наборов значений доступа.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка.
//
// Возвращаемое значение:
//  Булево.
//
Функция ВозможноЗаполнитьНаборыЗначенийДоступа(Ссылка) Экспорт
	
	ТипОбъекта = Тип(ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка) + "Объект." + Ссылка.Метаданные().Имя);
	
	НаборыЗаполняются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа
		|ЗаписатьЗависимыеНаборыЗначенийДоступа").Получить(ТипОбъекта) <> Неопределено;
	
	Возврат НаборыЗаполняются;
	
КонецФункции

// Возвращает пустую таблицу, которая заполняется для передачи в функцию ЕстьРоль() и
// в процедуры ЗаполнитьНаборыЗначенийДоступа(Таблица), определенные прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
Функция ТаблицаНаборыЗначенийДоступа() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
	
КонецФункции

// Заполняет наборы значений доступа объекта, используя процедуру ЗаполнитьНаборыЗначенийДоступа(Таблица),
// созданную прикладным разработчиком в модуле объекта, тип которого задан в одной из подписок на событие
// ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 Если передана ссылка, то по ней будет получен объект.
//
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 Неопределено, тогда будет создана таблица значений
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), содержащая поля:
//                     НомерНабора     - Число                                     (необязательно, если набор один),
//                     ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//                     ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//                     Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  СсылкаНаПодчиненныйОбъект - ЛюбаяСсылка, используется, когда нужно заполнить наборы значений доступа объекта-владельца
//                 для подчиненного объекта.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Знач Объект, Таблица, Знач СсылкаНаПодчиненныйОбъект = Неопределено) Экспорт
	
КонецПроцедуры

// Позволяет добавить к одной таблице наборов значений доступа другую
// таблицу наборов значений доступа, либо логическим сложением, либо логическим умножением.
// Результат помещается в приемник.
//
// Параметры:
//  Приемник,
//  Источник     - ТабличнаяЧасть или ТаблицаЗначений
//                 с полями, как в таблице, возвращаемой функцией
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
//  Умножение    - Булево, определяет способ логического объединения наборов приемника и источника.
//
//  Упростить    - Булево, определяет требуется ли упрощение наборов после добавления.
//
Процедура ДобавитьНаборыЗначенийДоступа(Приемник, Знач Источник, Знач Умножение = Ложь, Знач Упростить = Ложь) Экспорт
	
КонецПроцедуры

// Выполняет обновление наборов значений доступа объекта, если они изменились.
//  Наборы обновляются в табличной части (если используется) и
// в регистре сведений НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка, ...
//
Процедура ОбновитьНаборыЗначенийДоступа(СсылкаНаОбъект) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в переопределяемом модуле

// Возвращает структуру для удобства описания поставляемых профилей.
//
//  Чтобы указать предустановленный вид доступа,
// нужно в представлении задать строку Предустановленный.
//
//  Чтобы добавить значение доступа нужно указать
// полное имя предопределенного элемента, например,
// "Справочник.РабочиеГруппы.ВсеПользователи".
// 
Функция НовоеОписаниеПрофиляГруппДоступа() Экспорт
	
	НовоеОписание = Новый Структура;
	НовоеОписание.Вставить("Имя",             ""); // ИмяПредопределенныхДанных используется для привязки
	                                               // поставляемых данных к предопределенному элементу.
	НовоеОписание.Вставить("Идентификатор",   ""); // ИдентификаторПоставляемыхДанных
	НовоеОписание.Вставить("Наименование",    "");
	НовоеОписание.Вставить("Описание",        "");
	НовоеОписание.Вставить("Роли",            Новый Массив);
	НовоеОписание.Вставить("Назначение",      Новый Массив);
	НовоеОписание.Вставить("ВидыДоступа",     Новый СписокЗначений);
	НовоеОписание.Вставить("ЗначенияДоступа", Новый СписокЗначений);
	
	Возврат НовоеОписание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые при обновлении информационной базы

// Возвращает ссылку на поставляемый профиль по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - имя или уникальный идентификатор поставляемого профиля.
//
Функция ПоставляемыйПрофильПоИдентификатору(Идентификатор) Экспорт
	
	Возврат Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для обновления вспомогательных данных

// Обновляет список ролей пользователей информационной базы
// по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  Пользователи - СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи.
//                 Массив значений указанных выше типов.
//               - Неопределено - обновить роли всех пользователей.
//               - Тип по которому будет найден объект метаданных:
//                 если будет найден Справочник.ВнешниеПользователи,
//                 то будут обновлены роли всех внешних пользователей,
//                 иначе будут обновлены роли всех пользователей.
//
//  ПарольПользователяСервиса - Строка - Пароль для авторизации в менеджере 
//                        сервиса
//
Процедура ОбновитьРолиПользователей(Знач Пользователи1 = Неопределено, Знач ПарольПользователяСервиса = Неопределено) Экспорт
	
	УправлениеДоступомСлужебный.ОбновитьРолиПользователей(Пользователи1, ПарольПользователяСервиса);
	
КонецПроцедуры

// Перезаписывает группы значения доступа и виды доступа значения доступа
// в РегистрСведений.ГруппыЗначенийДоступа.
// 
// Используется для начального заполнения иерархии папок файлов,
// например, когда ограничения по значениям доступа сделаны для старого
// справочника, который не ограничивался. Тогда требуется заполнить группы.
//
// Параметры:
//  Ссылка -  ссылка на значение доступа.
// 
Процедура ЗаписатьГруппыИВидыДоступа(Знач ЗначениеДоступа) Экспорт
	
КонецПроцедуры

// Выполняет последовательное заполнение и обновление данных, необходимых для работы
// подсистемы УправленияДоступом в режиме ограничения доступа на уровне записей.
// 
//  При включенном режиме ограничения доступа на уровне записей заполняет наборы
// значений доступа. Заполнение выполняется частями при каждом запуске, пока все
// наборы значений доступа не будут заполнены.
//  При отключении режима ограничения доступа на уровне записей наборы значений доступа
// (заполненные ранее) удаляются при перезаписи объектов, а не все сразу.
//  Независимо от режима ограничения доступа на уровне записей обновляет вторичные
// данные: группы значений доступа и дополнительные поля в существующих наборах значений доступа.
//  После завершения всех обновлений и заполнений отключает использование регламентного
// задания.
//
//  Сведения о состоянии работы записываются в журнал регистрации.
//
//  Возможно вызывать программно, например, при обновлении информационной базы.
// Также для целей обновления есть форма Справочник.ГруппыДоступа.ОбновлениеДанныхОграниченияДоступа,
// с помощью которой можно сделать интерактивное обновление данных ограничения доступа
// при обновлении информационной базы.
//
Процедура ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных = 0) Экспорт
	
	УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции для обратной совместимости,
// планируемые к удалению в новой редакции.

// Всегда возвращает Ложь (удаленный функционал).
Функция ДобавлятьРуководителямДоступПодчиненных() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Не выполняет никаких действий. Следует удалить вызовы - вместо имен ролей
// используются ссылки справочника ИдентификаторыОбъектовМетаданных, для
// которых в случае переименования подсистем и ролей реализация вписывается
// в процедуру ЗаполнитьТаблицуПереименованияОбъектовМетаданных
// общего модуля ОбщегоНазначенияПереопределяемый.
//
Процедура ОбновитьПереименованныеРоли(ПереименованныеРоли) Экспорт
	
КонецПроцедуры

// Не выполняет никаких действий. Следует удалить вызовы, а значения
// параметров, отличных от значений по умолчанию установить в параметре
// ПараметрыОбновления процедуры ЗаполнитьПоставляемыеПрофилиГруппДоступа
// общего модуля УправлениеДоступомПереопределяемый.
//
Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа(ТолькоНеИзмененные = Истина,
                                                    ОбновлятьГруппыДоступа = Истина,
                                                    УдаляемыеВидыДоступаБезНастройки = Истина) Экспорт
	
КонецПроцедуры