////////////////////////////////////////////////////////////////////////////////
// Помощник отправить: Содержит серверные процедуры и функции для работы с помощником Отправить.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру помощника Отправить, для построения дерева вариантов,
// получения их описания и параметров отправки.
//
// Для работы с помощником следует использовать процедуры из обл. ПрограммныйИнтерфейс.
// Другой варианта работы не предусмотрен.
//
//
// Возвращаемое значение:
//  Структура
//
Функция Помощник() Экспорт
	
	Помощник = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриСозданииПомощникаОтправки(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Помощник;
	КонецЕсли;
	
	// Общие свойства, помощника.
	
	Помощник.Вставить("РежимРаботы", "");
	Помощник.Вставить("ОбъектыОтправки", Новый Массив);
	
	Помощник.Вставить("ВозможныеВарианты", Новый Соответствие);
	
	Помощник.Вставить("ДеревоВариантов", Новый ДеревоЗначений);
	Помощник.ДеревоВариантов.Колонки.Добавить("Вариант");
	Помощник.ДеревоВариантов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Помощник.Вставить("НедоступныеВарианты", Новый Соответствие);
	
	// Дополнительные свойства для расчета особых вариантов.
	
	Помощник.Вставить("ОсновныеВариантыСозданияПроцессов", Новый Соответствие);
	
	Помощник.Вставить("ДопустимыеТипыПредметовВПроцессах", Новый Соответствие);
	Помощник.Вставить("ПредметыПроцесса", Новый Массив);
	Помощник.Вставить("ДопустимыеТипыВариантовДляПредметов", Новый Соответствие);
	
	Помощник.Вставить("ВариантыСозданияПроцессовПоУмолчанию", Новый Соответствие);
	Помощник.Вставить("ОбщиеВариантыСозданияПроцессов", Новый Соответствие);
	Помощник.Вставить("РекомендуемыеВариантыСозданияПроцессов", Новый Соответствие);
	Помощник.Вставить("ДругиеВариантыСозданияПроцессов", Новый Соответствие);
	
	Возврат Помощник;
	
КонецФункции

// Устанавливает помощнику режим работы.
//
// Параметры:
//  Помощник - Структура - см. Помощник()
//  РежимРаботы - Строка - режим работы помощника.
//
Процедура УстановитьРежимРаботы(Помощник, РежимРаботы) Экспорт
	
	Помощник.РежимРаботы = РежимРаботы;
	
КонецПроцедуры

// Заполняет объекты отправки в помощнике.
//
// Параметры:
//  Помощник - Структура - помощник.
//  ОбъектыОтправки - объекты отправки.
//    * Неопределено - нет объектов.
//    * Массив - список объектов
//
Процедура ЗаполнитьОбъектыОтправки(Помощник, ОбъектыОтправки) Экспорт
	
	Помощник.ОбъектыОтправки.Очистить();
	
	Если ОбъектыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Помощник.ОбъектыОтправки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыОтправки);
	
КонецПроцедуры

// Заполняет возможные варианты.
//
// Параметры:
//  Помощник - Структура - помощник.
//  ВозможныеВарианты - тип варианта или сам вариант.
//    * Неопределено - нет вариантов.
//    * Массив - список вариантов или их типов.
//
Процедура ЗаполнитьВозможныеВарианты(Помощник, ВозможныеВарианты) Экспорт
	
	Помощник.ВозможныеВарианты.Очистить();
	
	Если ВозможныеВарианты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Вариант Из ВозможныеВарианты Цикл
		Помощник.ВозможныеВарианты[Вариант] = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Заполнить дерево вариантов.
//
// Параметры:
//  Помощник - Структура - см. Помощник
//
// Возвращаемое значение:
//  ДеревоЗначений
//
Процедура ЗаполнитьДеревоВариантовОтправки(Помощник) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриЗаполненииДереваВариантовОтправки(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Помощник.НедоступныеВарианты.Очистить();
	Помощник.ДеревоВариантов.Строки.Очистить();
	
	ДобавитьВДеревоВариантСоздатьПисьмоНаОсновании(Помощник);
	ДобавитьВДеревоВариантыСозданияПроцессов(Помощник);
	
КонецПроцедуры

// Проверяет возможность отправки с помощью помощника.
// В случае невозможности (при отсутствии вариантов отправки),
// генерируется исключение с описанием ошибки.
//
// Параметры:
//  Помощник - Структура - см. Помощник
//
Процедура ПроверитьВозможностьОтправки(Помощник) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПроверкеВозможностиОтправки(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Помощник.ДеревоВариантов.Строки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяРежимОтправкаПодзадачи(Помощник) Тогда
		ТекстОшибки = НСтр("ru = 'Для создания подзадачи не предусмотрено вариантов.
			|При необходимости обратитесь к Администратору.'");
	ИначеЕсли ИспользуетсяРежимОтправкаПроцесса(Помощник) Тогда
		ТекстОшибки = НСтр("ru = 'Для создания процесса не предусмотрено вариантов.
			|При необходимости обратитесь к Администратору.'");
	ИначеЕсли ИспользуетсяРежимОтправкаПользователям(Помощник) Тогда
		ТекстОшибки = НСтр("ru = 'Для пользователей не предусмотрено вариантов отправки.
			|При необходимости обратитесь к Администратору.'");
	Иначе
		
		Если Помощник.ОбъектыОтправки.Количество() = 1 Тогда
			ПредставлениеОбъекта = """" + Помощник.ОбъектыОтправки[0] + """";
		Иначе
			ПредставлениеОбъекта = НСтр("ru = 'выбранных объектов'");
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'Для %1 не предусмотрено вариантов отправки.
			|При необходимости обратитесь к Администратору.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеОбъекта);
	КонецЕсли;
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Возвращает дерево вариантов отарпавки.
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  ДеревоЗначений
//   * Вариант - Вариант отправки.
//   * Представление - строковое представление варианта.
//
Функция ДеревоВариантовОтправки(Помощник) Экспорт
	
	Возврат Помощник.ДеревоВариантов;
	
КонецФункции

// Возвращает недоступные варианты.
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Соотвествие
//   * Ключ - вариант отправки.
//   * Значение - Булево - всегда Истина.
//
Функция НедоступныеВарианты(Помощник) Экспорт
	
	Возврат Помощник.НедоступныеВарианты;
	
КонецФункции

// Возвращает объекты отправки из помощника.
//
// Параметры:
//  Помощник - Структура - см. Помощник
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Объект
//   * Основной
//
Функция ОбъектыОтправки(Помощник) Экспорт
	
	Возврат Помощник.ОбъектыОтправки;
	
КонецФункции

// Возвращает заголовок помощника.
//
// Параметры:
//  Помощник - Структура - см. Помощник
//
// Возвращаемое значение:
//  Строка
//
Функция ЗаголовокПомощника(Помощник) Экспорт
	
	Заголовок = НСтр("ru = 'Выберите вариант для отправки'"); // Значение по умолчанию.
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииЗаголовкаПомощника(
		Помощник, Заголовок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Заголовок;
	КонецЕсли;
	
	Если ИспользуетсяРежимОтправкаПодзадачи(Помощник) Тогда
		Заголовок = НСтр("ru = 'Выберите вариант подзадачи'");
	ИначеЕсли ИспользуетсяРежимОтправкаПроцесса(Помощник) Тогда
		Заголовок = НСтр("ru = 'Создание процесса'");
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает заголовок команды выбора варианта помощника.
//
// Параметры:
//  Помощник - Структура - см. Помощник
//
// Возвращаемое значение:
//  Строка
//
Функция ЗаголовокКомандыВыбораВариантаПомощника(Помощник) Экспорт
	
	Заголовок = "";
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииЗаголовкаКомандыВыбораВариантаПомощника(
		Помощник, Заголовок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Заголовок;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Перейти к отправке'");
	Если Помощник.РежимРаботы = ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПодзадачи() Тогда
		Заголовок = НСтр("ru = 'Создать подзадачу'");
	ИначеЕсли Помощник.РежимРаботы = ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПроцесса() Тогда
		Заголовок = НСтр("ru = 'Создать процесс'");
	КонецЕсли;
	
КонецФункции

// Возвращает параметры варианта.
//
// Параметры:
//  Помощник - см. Помощник()
//  Вариант - Произвольный - вариант отправки.
//
// Возвращаемое значение:
//  Структура - состав полей зависит от варианта. Подробнее см. функции:
//              ПараметрыВариантаСоздатьПисьмоНаОсновании
//              
//
Функция ПараметрыВарианта(Вариант, Помощник) Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииПараметровВарианта(
		Вариант, Параметры, Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Если ПомощникОтправитьКлиентСервер.ЭтоВариантСоздатьПисьмоНаОсновании(Вариант) Тогда
		Параметры = ПараметрыВариантаСоздатьПисьмоНаОсновании(Помощник);
	ИначеЕсли ПомощникОтправитьКлиентСервер.ЭтоВариантСозданияПроцесса(Вариант) Тогда
		Параметры = ПараметрыВариантаСозданияПроцесса(Вариант, Помощник);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает описание варианта.
//
// Параметры:
//  Вариант - Произвольный - вариант отправки.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВарианта(Вариант) Экспорт
	
	ОписаниеВарианта = "";
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриФормированииОписанияВарианта(
		Вариант, ОписаниеВарианта, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ОписаниеВарианта;
	КонецЕсли;
	
	Если ПомощникОтправитьКлиентСервер.ЭтоВариантСоздатьПисьмоНаОсновании(Вариант) Тогда
		ОписаниеВарианта = ОписаниеВариантаСоздатьПисьмоНаОсновании();
	ИначеЕсли ПомощникОтправитьКлиентСервер.ЭтоВариантСозданияПроцесса(Вариант) Тогда
		ОписаниеВарианта = ОписаниеВариантаСозданияПроцесса(Вариант);
	КонецЕсли;
	
	Возврат ОписаниеВарианта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает признак использования режима работы ОтправкаОбъектов
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Булево
//
Функция ИспользуетсяРежимОтправкаОбъектов(Помощник) Экспорт
	
	Возврат (Помощник.РежимРаботы = ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаОбъектов());
	
КонецФункции

// Возвращает признак использования режима работы ОтправкаПроцесса
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Булево
//
Функция ИспользуетсяРежимОтправкаПроцесса(Помощник) Экспорт
	
	Возврат (Помощник.РежимРаботы = ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПроцесса());
	
КонецФункции

// Возвращает признак использования режима работы ОтправкаПодзадачи
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Булево
//
Функция ИспользуетсяРежимОтправкаПодзадачи(Помощник) Экспорт
	
	Возврат (Помощник.РежимРаботы = ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПодзадачи());
	
КонецФункции

// Возвращает признак использования режима работы ОтправкаПользователям
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Булево
//
Функция ИспользуетсяРежимОтправкаПользователям(Помощник) Экспорт
	
	Возврат (Помощник.РежимРаботы = ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПользователям());
	
КонецФункции

// Проверяет возможность добавления варианта в дерево вариантов.
//
// Параметры:
//  Помощник - см. Помощник()
//  Вариант - вариант отправки, или тип варианта.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноДобавлениеВарианта(Помощник, Вариант) Экспорт
	
	Если Не ЗначениеЗаполнено(Помощник.ВозможныеВарианты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Помощник.ВозможныеВарианты[Вариант] = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает html описание варианта.
//
// Параметры:
//  ОписаниеВарианта - Строка
//
// Возвращаемое значение:
//  Строка - html-описание.
//
Функция HTMLОписаниеВарианта(ОписаниеВарианта) Экспорт
	
	HTMLТекст = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body>";
	
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	HTMLТекст = HTMLТекст + СтрЗаменить(ОписаниеВарианта, Символы.ПС, "<br>");
	
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВариантСоздатьПисьмоНаОсновании

// Добавляет в дерево вариант создания письма на основании объекта.
//
// Параметры:
//  Помощник - см. Помощник()
//
Процедура ДобавитьВДеревоВариантСоздатьПисьмоНаОсновании(Помощник)
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриДобавленииВДеревоВариантаСозданияПисьма(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ВариантОтправкиПисьма = ПомощникОтправитьКлиентСервер.ВариантОтправкиСоздатьПисьмоНаОсновании();
	
	Если Не ВозможноДобавлениеВарианта(Помощник, ВариантОтправкиПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеЛегкойПочты() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПомощникОтправитьКлиентСервер.ЕстьОбъектыУказанныхТипов(
		Помощник.ОбъектыОтправки,
		ДопустимыеТипыОбъектовДляВариантаСоздатьПисьмоНаОсновании()) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаВарианта = Помощник.ДеревоВариантов.Строки.Добавить();
	СтрокаВарианта.Вариант = ВариантОтправкиПисьма;
	СтрокаВарианта.Представление = ПредставлениеВариантаСоздатьПисьмоНаОсновании(Помощник);
	
КонецПроцедуры

// Возвращает допустимые типы объектов для варианта СоздатьПисьмоНаОсновании.
//
// Возвращаемое значение:
//  Соответствие
//    * Ключ - Тип - тип объекта.
//    * Значение - Булево - всегда Истина.
//
Функция ДопустимыеТипыОбъектовДляВариантаСоздатьПисьмоНаОсновании() Экспорт
	
	ДопустимыеТипы = Новый Соответствие;
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииДопустимыхТиповДляСозданияПисьма(
		ДопустимыеТипы, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ДопустимыеТипы;
	КонецЕсли;
	
	ДопустимыеТипы[Тип("СправочникСсылка.ВнутренниеДокументы")] = Истина;
	ДопустимыеТипы[Тип("СправочникСсылка.ВходящиеДокументы")] = Истина;
	ДопустимыеТипы[Тип("СправочникСсылка.ИсходящиеДокументы")] = Истина;
	ДопустимыеТипы[Тип("СправочникСсылка.Пользователи")] = Истина;
	ДопустимыеТипы[Тип("СправочникСсылка.Файлы")] = Истина;
	
	Возврат ДопустимыеТипы;
	
КонецФункции

// Возвращает представление варианта создания письма на основании объекта.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаСоздатьПисьмоНаОсновании(Помощник) Экспорт
	
	Представление = "";
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииПредставленияВариантаСозданияПисьма(
		Представление, Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Представление;
	КонецЕсли;
	
	Представление = НСтр("ru = 'По почте'");
	
	Если ИспользуетсяРежимОтправкаПользователям(Помощник) Тогда
		Представление = НСтр("ru = 'Письмо'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает описание варианта создания письма на основании объекта.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВариантаСоздатьПисьмоНаОсновании() Экспорт
	
	Описание = НСтр("ru = 'Создание почтового сообщения для отправки.'");
	Возврат HTMLОписаниеВарианта(Описание);
	
КонецФункции

// Возвращает параметры для варианта создания письма на основании объекта.
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Структура:
//   * Объекты - Массив - объекты для отправки письмом.
//
Функция ПараметрыВариантаСоздатьПисьмоНаОсновании(Помощник) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Объекты", Помощник.ОбъектыОтправки);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВариантыСозданияПроцессов

// Возвращает тип варианта создания процесса.
//
// Параметры:
//  Вариант - СправочникСсылка.< Наименование шаблона >
//
// Возвращаемое значение:
//  Тип, Строка
//
Функция ТипВариантаСозданияПроцесса(Вариант) Экспорт
	
	ТипВарианта = ТипЗнч(Вариант);
	Если ТипВарианта = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		ТипВарианта = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Вариант, "ТипШаблона");
	КонецЕсли;
	
	Возврат ТипВарианта;
	
КонецФункции

// Добавляет варианты создания процессов.
//
// Параметры:
//  Помощник - см. Помощник()
//
Процедура ДобавитьВДеревоВариантыСозданияПроцессов(Помощник) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	// Очищаем основные варианты создания процессов.
	Помощник.ОсновныеВариантыСозданияПроцессов.Очистить();
	
	// Выполняем заполнение данных по предметам.
	ЗаполнитьДопустимыеТипыПредметовВПроцессах(Помощник);
	ЗаполнитьПредметыПроцесса(Помощник);
	
	Если ЗначениеЗаполнено(Помощник.ПредметыПроцесса)
		И Не ЕстьПредметыДопустимыеВПроцессах(Помощник) Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДопустимыеТипыВариантовДляПредметов(Помощник);
	
	// Вначале определяем все возможные варианты создания процессов,
	// с учетом предметов процессов в помощнике.
	
	ЗаполнитьВариантыСозданияПроцессовПоУмолчанию(Помощник);
	ЗаполнитьОбщиеВариантыСозданияПроцессов(Помощник);
	ЗаполнитьРекомендуемыеВариантыСозданияПроцессов(Помощник);
	ЗаполнитьДругиеВариантыСозданияПроцессов(Помощник);
	
	// После добавляем в дерево основные варианты создания процессов,
	// в отдельной группе остальные доступные варианты.
	
	ДобавитьВДеревоОсновныеВариантыСозданияПроцесса(Помощник);
	ДобавитьВДеревоОстальныеВариантыОтправки(Помощник);
	
КонецПроцедуры

// Заполняет ПредметыПроцесса в помощнике.
//
// Параметры:
//  Помощник - Структура - см. Помощник().
//
Процедура ЗаполнитьПредметыПроцесса(Помощник) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриЗаполненииПредметовПроцесса(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Помощник.ПредметыПроцесса.Очистить();
	
	// Для задач, в предметы процесса, добавляем предметы задач, если они есть.
	Если ИспользуетсяРежимОтправкаПодзадачи(Помощник) Тогда
		
		ПредметыЗадачи = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Помощник.ОбъектыОтправки[0], "Предметы").Выгрузить();
		
		Для Каждого СтрокаПредмет Из ПредметыЗадачи Цикл
			
			ТипПредмета = ТипЗнч(СтрокаПредмет.Предмет);
			
			ЭтоНеопределено = (ТипПредмета = Тип("Неопределено"));
			ЭтоФайл = (ТипПредмета = Тип("СправочникСсылка.Файлы"));
			ЭтоКонтрагент = (ТипПредмета = Тип("СправочникСсылка.Контрагенты"));
			
			Если ЭтоНеопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоФайл Тогда
				
				ВладелецФайла = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					СтрокаПредмет.Предмет, "ВладелецФайла");
				
				Если Не ЗначениеЗаполнено(ВладелецФайла)
					Или ОбщегоНазначения.ЭтоБизнесПроцесс(ВладелецФайла.Метаданные()) Тогда
					
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоКонтрагент Тогда
				Если ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					СтрокаПредмет.Предмет, "ЭтоГруппа") = Ложь Тогда
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Помощник.ПредметыПроцесса.Добавить(
				СтрокаПредмет.Предмет);
			
		КонецЦикла;
		
		Помощник.ПредметыПроцесса = 
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			Помощник.ПредметыПроцесса);
		
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяРежимОтправкаОбъектов(Помощник) Тогда
		Для Каждого ОбъектОтправки Из Помощник.ОбъектыОтправки Цикл
			Помощник.ПредметыПроцесса.Добавить(ОбъектОтправки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ДопустимыеТипыПредметовВПроцессах.
//
// Параметры:
//  Помощник - Структура - см. Помощник().
//
Процедура ЗаполнитьДопустимыеТипыПредметовВПроцессах(Помощник) Экспорт
	
	// Допустимые типы предметов процессов заполняем только если
	// они не заполнены. Они не меняются.
	Если ЗначениеЗаполнено(Помощник.ДопустимыеТипыПредметовВПроцессах) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИТипыДанных = Новый Соответствие;
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	Для Каждого МетаданныеПроцесса Из МетаданныеПроцессов Цикл
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			МетаданныеПроцесса.ПолноеИмя());
		
		ТипШаблонаСтрокой = МенеджерПроцесса.ТипШаблона();
		
		Если Не ЗначениеЗаполнено(ТипШаблонаСтрокой)
			Или ТипШаблонаСтрокой = "Справочник.ШаблоныПоручения" Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеПроцесса.Имя = ТипВариантаОбработкаВнутреннегоДокумента() Тогда
			ТипШаблонаСтрокой = ТипВариантаОбработкаВнутреннегоДокумента();
		ИначеЕсли МетаданныеПроцесса.Имя = ТипВариантаОбработкаВходящегоДокумента() Тогда
			ТипШаблонаСтрокой = ТипВариантаОбработкаВходящегоДокумента();
		ИначеЕсли МетаданныеПроцесса.Имя = ТипВариантаОбработкаИсходящегоДокумента() Тогда
			ТипШаблонаСтрокой = ТипВариантаОбработкаИсходящегоДокумента();
		КонецЕсли;
		
		ДопустимыеТипы = Новый Массив;
		Для Каждого Основание Из МетаданныеПроцесса.ВводитсяНаОсновании Цикл
			ДопустимыйТип = МетаданныеИТипыДанных[Основание];
			Если Не ЗначениеЗаполнено(ДопустимыйТип) Тогда
				
				ТипСсылка = "";
				ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Основание);
				Если ИмяБазовогоТипа = "Документы" Тогда
					ТипСсылка = "ДокументСсылка";
				ИначеЕсли ИмяБазовогоТипа = "Справочники" Тогда
					ТипСсылка = "СправочникСсылка";
				ИначеЕсли ИмяБазовогоТипа = "ПланыВидовХарактеристик" Тогда
					ТипСсылка = "ПланВидовХарактеристикСсылка";
				ИначеЕсли ИмяБазовогоТипа = "БизнесПроцессы" Тогда
					ТипСсылка = "БизнесПроцессСсылка";
				ИначеЕсли ИмяБазовогоТипа = "Задачи" Тогда
					ТипСсылка = "ЗадачаСсылка";
				КонецЕсли;
				
				ДопустимыйТип = Тип(СтрШаблон("%1.%2", ТипСсылка, Основание.Имя));
				МетаданныеИТипыДанных[Основание] = ДопустимыйТип;
			КонецЕсли;
			ДопустимыеТипы.Добавить(ДопустимыйТип);
		КонецЦикла;
		
		Помощник.ДопустимыеТипыПредметовВПроцессах[ТипШаблонаСтрокой] = ДопустимыеТипы;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ДопустимыеТипыВариантовДляПредметов в помощнике.
//
// Параметры:
//  Помощник - Структура - см. Помощник().
//
Процедура ЗаполнитьДопустимыеТипыВариантовДляПредметов(Помощник) Экспорт
	
	Помощник.ДопустимыеТипыВариантовДляПредметов.Очистить();
	
	Если Не ЗначениеЗаполнено(Помощник.ПредметыПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыПредметов = Новый Соответствие;
	Для Каждого Предмет Из Помощник.ПредметыПроцесса Цикл
		ТипыПредметов[ТипЗнч(Предмет)] = Истина;
	КонецЦикла;
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	ИмяСправочникаСоставныхШаблонов = "Справочник.ШаблоныСоставныхБизнесПроцессов";
	ТипыСоставныхШаблонов = Справочники.ШаблоныСоставныхБизнесПроцессов;
	
	Для Каждого КлючЗначение Из Помощник.ДопустимыеТипыПредметовВПроцессах Цикл
		
		ТипШаблонаСтрокой = КлючЗначение.Ключ;
		ТипыПредметовПроцесса = КлючЗначение.Значение;
		
		ТипВариантДопустим = Ложь;
		Для Каждого ТипПредметаПроцесса Из ТипыПредметовПроцесса Цикл
			Если ТипыПредметов[ТипПредметаПроцесса] <> Неопределено Тогда
				ТипВариантДопустим = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипВариантДопустим Тогда
			
			Если ТипШаблонаСтрокой = ТипВариантаОбработкаВнутреннегоДокумента() Тогда
				Помощник.ДопустимыеТипыВариантовДляПредметов[ТипВариантаОбработкаВнутреннегоДокумента()] = Истина;
			ИначеЕсли ТипШаблонаСтрокой = ТипВариантаОбработкаВходящегоДокумента() Тогда
				Помощник.ДопустимыеТипыВариантовДляПредметов[ТипВариантаОбработкаВходящегоДокумента()] = Истина;
			ИначеЕсли ТипШаблонаСтрокой = ТипВариантаОбработкаИсходящегоДокумента() Тогда
				Помощник.ДопустимыеТипыВариантовДляПредметов[ТипВариантаОбработкаИсходящегоДокумента()] = Истина;
			Иначе
				ТипШаблона = Тип(СтрЗаменить(ТипШаблонаСтрокой, "Справочник.", "СправочникСсылка."));
				Помощник.ДопустимыеТипыВариантовДляПредметов[ТипШаблона] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает допустимость предметов в процессах.
//
// Параметры:
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьПредметыДопустимыеВПроцессах(Помощник) Экспорт
	
	ДопустимыеТипы = Новый Соответствие;
	Для Каждого КлючЗначение Из Помощник.ДопустимыеТипыПредметовВПроцессах Цикл
		Для Каждого ТипПредмета Из КлючЗначение.Значение Цикл
			ДопустимыеТипы[ТипПредмета] = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ЕстьПредметы = Ложь;
	
	Для Каждого Предмет Из Помощник.ПредметыПроцесса Цикл
		
		ТипПредмета = ТипЗнч(Предмет);
		
		ЭтоНеопределено = (ТипПредмета = Тип("Неопределено"));
		ЭтоФайл = (ТипПредмета = Тип("СправочникСсылка.Файлы"));
		ЭтоКонтрагент = (ТипПредмета = Тип("СправочникСсылка.Контрагенты"));
		
		Если ЭтоНеопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоФайл Тогда
			
			ВладелецФайла = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Предмет, "ВладелецФайла");
			
			Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
				ЕстьПредметы = Истина;
				Прервать;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ЭтоБизнесПроцесс(ВладелецФайла.Метаданные()) Тогда
				ЕстьПредметы = Истина;
				Прервать;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЭтоКонтрагент Тогда
			Если ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Предмет, "ЭтоГруппа") = Ложь Тогда
			
				ЕстьПредметы = Истина;
				Прервать;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеТипы[ТипПредмета] = Истина Тогда
			ЕстьПредметы = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьПредметы;
	
КонецФункции

// Заполняет в помощнике ВариантыСозданияПроцессовПоУмолчанию.
//
// Параметры:
//  Помощник - см. Помощник()
//
Процедура ЗаполнитьВариантыСозданияПроцессовПоУмолчанию(Помощник) Экспорт
	
	// Варианты создания процессов по умолчанию заполняем только если
	// они не заполнены. Они не меняются при смене объектов отправки.
	Если ЗначениеЗаполнено(Помощник.ВариантыСозданияПроцессовПоУмолчанию) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблоныПоУмолчанию = ШаблоныБизнесПроцессовКлиентСервер.ШаблоныПроцессовПоУмолчанию();
	
	Помощник.ВариантыСозданияПроцессовПоУмолчанию = Новый Соответствие;
	
	Для Каждого ШаблонПоУмолчанию Из ШаблоныПоУмолчанию Цикл
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ШаблонПоУмолчанию).Чтение Тогда
			Продолжить;
		КонецЕсли;
		Помощник.ВариантыСозданияПроцессовПоУмолчанию[ШаблонПоУмолчанию] = 
			ТипВариантаСозданияПроцесса(ШаблонПоУмолчанию);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет общие варианты создания процессов.
//
// Параметры:
//  Помощник - см. Помощник
//
Процедура ЗаполнитьОбщиеВариантыСозданияПроцессов(Помощник) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриЗаполненииОбщихВариантовСозданияПроцессов(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Общие варианты создания процессов заполняем только если
	// они не заполнены, т.к. они не меняются при смене объектов отправки.
	Если ЗначениеЗаполнено(Помощник.ОбщиеВариантыСозданияПроцессов) Тогда
		Возврат;
	КонецЕсли;
	
	Помощник.ОбщиеВариантыСозданияПроцессов = Новый Соответствие;
	
	ТекстыЗапросов = Новый Массив;
	
	ШаблонЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныПроцессов.Ссылка КАК ШаблонПроцесса
		|ИЗ
		|	Справочник.ШаблоныИсполнения КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|		ПО ШаблоныПроцессов.Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
		|ГДЕ
		|	ШаблоныПроцессов.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныПроцессов.Предопределенный = ЛОЖЬ
		|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса ЕСТЬ NULL";
	
	ИмяТаблицыДляЗамены = "ШаблоныИсполнения";
	
	УдалитьКлючевоеСловоРазрешенные = Ложь;
	
	ИменаСправочников = ШаблоныБизнесПроцессовКлиентСервер.ИменаСправочниковШаблонов();
	
	Для Каждого ИмяСправочникаШаблона Из ИменаСправочников Цикл
		
		Если ИмяСправочникаШаблона = "ШаблоныПоручения" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, ИмяТаблицыДляЗамены, ИмяСправочникаШаблона);
		
		Если УдалитьКлючевоеСловоРазрешенные Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " РАЗРЕШЕННЫЕ", "");
		Иначе
			УдалитьКлючевоеСловоРазрешенные = Истина;
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		СтрСоединить(ТекстыЗапросов, Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" +Символы.ПС + Символы.ПС));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Помощник.ОбщиеВариантыСозданияПроцессов[Выборка.ШаблонПроцесса] =
			ТипВариантаСозданияПроцесса(Выборка.ШаблонПроцесса);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в помощнике РекомендуемыеВариантыСозданияПроцессов
//
// Параметры:
//  Помощник - см. Помощник
//
Процедура ЗаполнитьРекомендуемыеВариантыСозданияПроцессов(Помощник) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриЗаполненииРекомендуемыхВариантовСозданияПроцессов(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Помощник.РекомендуемыеВариантыСозданияПроцессов.Очистить();
	
	ОбъектыДляРасчета = Новый Массив;
	Если ИспользуетсяРежимОтправкаПользователям(Помощник) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДляРасчета, Помощник.ОбъектыОтправки);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДляРасчета, Помощник.ПредметыПроцесса);
	КонецЕсли;
	
	// Исключаем не заполненные объекты, по ним нельзя рассчитать назначенные шаблоны.
	Индекс = ОбъектыДляРасчета.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если Не ЗначениеЗаполнено(ОбъектыДляРасчета[Индекс]) Тогда
			ОбъектыДляРасчета.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если ОбъектыДляРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантов = ШаблоныБизнесПроцессов.ШаблоныПоОбъектам(ОбъектыДляРасчета);
	
	РекомендуемыеВарианты = Новый Соответствие;
	Для Каждого Вариант Из МассивВариантов Цикл
		Помощник.РекомендуемыеВариантыСозданияПроцессов[Вариант] = ТипВариантаСозданияПроцесса(Вариант);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в помощнике ДругиеВариантыСозданияПроцессов.
// Это все доступные, назначенные шаблоны процессов видам объектов,
// которых нет в ПредметыПроцесса.
//
// Параметры:
//  Помощник - см. Помощник
//
Процедура ЗаполнитьДругиеВариантыСозданияПроцессов(Помощник) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриЗаполненииДругихВариантовСозданияПроцессов(
		Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Помощник.ДругиеВариантыСозданияПроцессов = Новый Соответствие;
	
	КомуНазначеныШаблоны = Новый Соответствие;
	
	Если ИспользуетсяРежимОтправкаПользователям(Помощник) Тогда
		Для Каждого ОбъектОтправки Из Помощник.ОбъектыОтправки Цикл
			Если Не ЗначениеЗаполнено(ОбъектОтправки) Тогда
				Продолжить;
			КонецЕсли;
			КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектОтправки));
			КомуНазначеныШаблоны[КомуНазначен] = Истина;
		КонецЦикла;
	Иначе
		Для Каждого Предмет Из Помощник.ПредметыПроцесса Цикл
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
				Если Не ЗначениеЗаполнено(Предмет) Тогда
					Продолжить;
				КонецЕсли;
				ВидДокумента = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					Предмет, "ВидДокумента");
				Для Каждого ВидДокумента Из Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента) Цикл
					КомуНазначеныШаблоны[ВидДокумента] = Истина;
				КонецЦикла;
			Иначе
				КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Предмет));
				КомуНазначеныШаблоны[КомуНазначен] = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	
	ШаблонЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныПроцессов.Ссылка КАК ШаблонПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен КАК КомуНазначен
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныИсполнения КАК ШаблоныПроцессов
		|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка
		|ГДЕ
		|	ШаблоныПроцессов.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныПроцессов.Предопределенный = ЛОЖЬ
		|	И ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ";
	
	ИмяТаблицыДляЗамены = "ШаблоныИсполнения";
	
	УдалитьКлючевоеСловоРазрешенные = Ложь;
	
	ИменаСправочников = ШаблоныБизнесПроцессовКлиентСервер.ИменаСправочниковШаблонов();
	
	Для Каждого ИмяСправочникаШаблона Из ИменаСправочников Цикл
		
		Если ИмяСправочникаШаблона = "ШаблоныПоручения" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, ИмяТаблицыДляЗамены, ИмяСправочникаШаблона);
		
		Если УдалитьКлючевоеСловоРазрешенные Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " РАЗРЕШЕННЫЕ", "");
		Иначе
			УдалитьКлючевоеСловоРазрешенные = Истина;
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		СтрСоединить(ТекстыЗапросов, Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС));
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВариантыДляПредметовПроцессов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если КомуНазначеныШаблоны[Выборка.КомуНазначен] = Истина Тогда
			ВариантыДляПредметовПроцессов[Выборка.ШаблонПроцесса] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если ВариантыДляПредметовПроцессов[Выборка.ШаблонПроцесса] = Истина Тогда
			Продолжить;
		КонецЕсли;
		Помощник.ДругиеВариантыСозданияПроцессов[Выборка.ШаблонПроцесса] =
			ТипВариантаСозданияПроцесса(Выборка.ШаблонПроцесса);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает возможность добавления вариантов процессов обработки документов.
//
// Параметры:
//  Помощник - см. Помощник
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноДобавлениеВариантовСозданияПроцессаОбработкиДокументов(Помощник) Экспорт
	
	ДопустимыеТипы = Новый Соответствие;
	ДопустимыеТипы[Тип("СправочникСсылка.ВнутренниеДокументы")] = Истина;
	ДопустимыеТипы[Тип("СправочникСсылка.ВходящиеДокументы")] = Истина;
	ДопустимыеТипы[Тип("СправочникСсылка.ИсходящиеДокументы")] = Истина;
	
	Возврат ПомощникОтправитьКлиентСервер.ЕстьОбъектыУказанныхТипов(
		Помощник.ОбъектыОтправки, ДопустимыеТипы);
	
КонецФункции

// Добавляет в дерево основные варианты создания процессов.
//
// Параметры:
//  Помощник - см. Помощник
//
Процедура ДобавитьВДеревоОсновныеВариантыСозданияПроцесса(Помощник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Формируем общий список вариантов, добавляемых в корень дерева, из:
	// шаблонов по умолчанию, общих и рекомендуемых шаблонов.
	
	ВариантыСозданияПроцесса = Новый СписокЗначений;
	
	ЕстьПредметы = ЗначениеЗаполнено(Помощник.ПредметыПроцесса);
	
	Для Каждого КлючЗначение Из Помощник.ВариантыСозданияПроцессовПоУмолчанию Цикл
		
		Если Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Ключ)
			И Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПредметы И Помощник.ДопустимыеТипыВариантовДляПредметов[
			КлючЗначение.Значение] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЭтоВариантСозданияПроцессаОбработки(КлючЗначение.Значение)
			И Не ВозможноДобавлениеВариантовСозданияПроцессаОбработкиДокументов(Помощник) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Представление = ПредставлениеВариантаСозданияПроцессаПоУмолчанию(
			КлючЗначение.Ключ, Помощник);
		
		ВариантыСозданияПроцесса.Добавить(КлючЗначение.Ключ, Представление);
	КонецЦикла;
	
	Для Каждого КлючЗначение Из Помощник.ОбщиеВариантыСозданияПроцессов Цикл
		
		Если Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Ключ)
			И Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПредметы И Помощник.ДопустимыеТипыВариантовДляПредметов[
			КлючЗначение.Значение] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЭтоВариантСозданияПроцессаОбработки(КлючЗначение.Значение)
			И Не ВозможноДобавлениеВариантовСозданияПроцессаОбработкиДокументов(Помощник) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ВариантыСозданияПроцесса.Добавить(КлючЗначение.Ключ, Строка(КлючЗначение.Ключ));
	КонецЦикла;
	
	Для Каждого КлючЗначение Из Помощник.РекомендуемыеВариантыСозданияПроцессов Цикл
		
		Если Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Ключ)
			И Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПредметы И Помощник.ДопустимыеТипыВариантовДляПредметов[
			КлючЗначение.Значение] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЭтоВариантСозданияПроцессаОбработки(КлючЗначение.Значение)
			И Не ВозможноДобавлениеВариантовСозданияПроцессаОбработкиДокументов(Помощник) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ВариантыСозданияПроцесса.Добавить(КлючЗначение.Ключ, Строка(КлючЗначение.Ключ));
	КонецЦикла;
	
	ВариантыСозданияПроцесса.СортироватьПоПредставлению();
	
	Для Каждого ВариантСозданияПроцесса Из ВариантыСозданияПроцесса Цикл
		СтрокаВарианта = Помощник.ДеревоВариантов.Строки.Добавить();
		СтрокаВарианта.Вариант = ВариантСозданияПроцесса.Значение;
		СтрокаВарианта.Представление = ВариантСозданияПроцесса.Представление;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в дерево остальные варианты создания процессов,
// в отдельной группе "Другие варианты".
//
// Параметры:
//  Помощник - см. Помощник
//
Процедура ДобавитьВДеревоОстальныеВариантыОтправки(Помощник) Экспорт
	
	ВариантыСозданияПроцесса = Новый СписокЗначений;
	
	ЕстьПредметы = ЗначениеЗаполнено(Помощник.ПредметыПроцесса);
	
	Для Каждого КлючЗначение Из Помощник.ДругиеВариантыСозданияПроцессов Цикл
		
		Если Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Ключ)
			И Не ВозможноДобавлениеВарианта(Помощник, КлючЗначение.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПредметы И Помощник.ДопустимыеТипыВариантовДляПредметов[
			КлючЗначение.Значение] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЭтоВариантСозданияПроцессаОбработки(КлючЗначение.Значение)
			И Не ВозможноДобавлениеВариантовСозданияПроцессаОбработкиДокументов(Помощник) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ВариантыСозданияПроцесса.Добавить(КлючЗначение.Ключ, Строка(КлючЗначение.Ключ));
	КонецЦикла;
	
	ВариантыСозданияПроцесса.СортироватьПоПредставлению();
	
	Если ВариантыСозданияПроцесса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВарианта = Помощник.ДеревоВариантов.Строки.Добавить();
	СтрокаВарианта.Вариант = ПомощникОтправитьКлиентСервер.ГруппаДругихВариантовСозданияПроцессов();
	СтрокаВарианта.Представление = НСтр("ru = 'Другие варианты'");
	Помощник.НедоступныеВарианты[СтрокаВарианта.Вариант] = Истина;
	
	Для Каждого ВариантСоздания Из ВариантыСозданияПроцесса Цикл
		ПодчиненнаяСтрокаВариант = СтрокаВарианта.Строки.Добавить();
		ПодчиненнаяСтрокаВариант.Вариант = ВариантСоздания.Значение;
		ПодчиненнаяСтрокаВариант.Представление = ВариантСоздания.Представление;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает тип варианта создания процесса ОбработкаВнутреннегоДокумента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТипВариантаОбработкаВнутреннегоДокумента() Экспорт
	
	Возврат Справочники.ШаблоныСоставныхБизнесПроцессов.ТипШаблонаОбработкаВнутреннегоДокумента();
	
КонецФункции

// Возвращает тип варианта создания процесса ОбработкаВходящегоДокумента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТипВариантаОбработкаВходящегоДокумента() Экспорт
	
	Возврат Справочники.ШаблоныСоставныхБизнесПроцессов.ТипШаблонаОбработкаВходящегоДокумента();
	
КонецФункции

// Возвращает тип варианта создания процесса ОбработкаВходящегоДокумента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТипВариантаОбработкаИсходящегоДокумента() Экспорт
	
	Возврат Справочники.ШаблоныСоставныхБизнесПроцессов.ТипШаблонаОбработкаИсходящегоДокумента();
	
КонецФункции

// Проверяет принадлежность типа варианта к вариантам создания процессов обработки.
//
// Параметры:
//  ТипВарианта - тип варианта.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоВариантСозданияПроцессаОбработки(ТипВарианта)
	
	Возврат ТипВарианта = ТипВариантаОбработкаВнутреннегоДокумента()
		Или ТипВарианта = ТипВариантаОбработкаВходящегоДокумента()
		Или ТипВарианта = ТипВариантаОбработкаИсходящегоДокумента();
	
КонецФункции

// Возвращает представление варианта создания процесса по умолчанию в Еще.
//
// Параметры:
//  Вариант - СправочникСсылка - ссылка на шаблон процесса.
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаСозданияПроцессаПоУмолчанию(Вариант, Помощник)
	
	Представление = "";
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииПредставленияВариантаСозданияПроцессаПоУмолчанию(
		Представление, Вариант, Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Представление;
	КонецЕсли;
	
	ТипВарианта = Помощник.ВариантыСозданияПроцессовПоУмолчанию[Вариант];
	
	Если ТипВарианта = Неопределено Тогда
		Возврат Представление;
	КонецЕсли;
	
	Если ТипВарианта = ТипВариантаОбработкаВнутреннегоДокумента() Тогда
		Представление = ПредставлениеВариантаПоУмолчаниюОбработкиВнутреннегоДокумента();
	ИначеЕсли ТипВарианта = ТипВариантаОбработкаВходящегоДокумента() Тогда
		Представление = ПредставлениеВариантаПоУмолчаниюОбработкиВходящегоДокумента();
	ИначеЕсли ТипВарианта = ТипВариантаОбработкаИсходящегоДокумента() Тогда
		Представление = ПредставлениеВариантаПоУмолчаниюОбработкиИсходящегоДокумента();
	ИначеЕсли ТипВарианта = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		Представление = ПредставлениеВариантаИсполненияПоУмолчанию();
	ИначеЕсли ТипВарианта = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		Представление = ПредставлениеВариантаОзнакомленияПоУмолчанию();
	ИначеЕсли ТипВарианта = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		Представление = ПредставлениеВариантаРассмотренияПоУмолчанию();
	ИначеЕсли ТипВарианта = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Представление = ПредставлениеВариантаРегистрацииПоУмолчанию();
	ИначеЕсли ТипВарианта = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Представление = ПредставлениеВариантаСогласованияПоУмолчанию();
	ИначеЕсли ТипВарианта = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Представление = ПредставлениеВариантаУтвержденияПоУмолчанию();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает представление варианта по умолчанию обработки вн. документа.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаПоУмолчаниюОбработкиВнутреннегоДокумента() Экспорт
	
	Возврат НСтр("ru = 'Обработка внутреннего документа (новая)'");
	
КонецФункции

// Возвращает представление варианта по умолчанию обработки вх. документа.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаПоУмолчаниюОбработкиВходящегоДокумента() Экспорт
	
	Возврат НСтр("ru = 'Обработка входящего документа (новая)'");
	
КонецФункции

// Возвращает представление варианта по умолчанию обработки исх. документа.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаПоУмолчаниюОбработкиИсходящегоДокумента() Экспорт
	
	Возврат НСтр("ru = 'Обработка исходящего документа (новая)'");
	
КонецФункции

// Возвращает представление варианта исполнения по умолчанию.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаИсполненияПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Исполнение (новое)'");
	
КонецФункции

// Возвращает представление варианта ознакомления по умолчанию.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаОзнакомленияПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Ознакомление (новое)'");
	
КонецФункции

// Возвращает представление варианта рассмотрения по умолчанию.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаРассмотренияПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Рассмотрение (новое)'");
	
КонецФункции

// Возвращает представление варианта регистрации по умолчанию.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаРегистрацииПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Регистрация (новая)'");
	
КонецФункции

// Возвращает представление варианта согласования по умолчанию.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаСогласованияПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Согласование (новое)'");
	
КонецФункции

// Возвращает представление варианта утверждения по умолчанию.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВариантаУтвержденияПоУмолчанию() Экспорт
	
	Представление = "";
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриПолученииПредставленияВариантаУтвержденияПоУмолчанию(
		Представление, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Представление;
	КонецЕсли;
	
	Возврат НСтр("ru = 'Утверждение (новое)'");
	
КонецФункции

// Возвращает описание варианта создания процесса
//
// Параметры:
//  Вариант - Произвольное - вариант отправки.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВариантаСозданияПроцесса(Вариант) Экспорт
	
	ОписаниеВарианта = "";
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриФормированиеОписанияОписаниеВариантаСозданияПроцесса(
		Вариант, ОписаниеВарианта, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ОписаниеВарианта;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Вариант = ПомощникОтправитьКлиентСервер.ГруппаДругихВариантовСозданияПроцессов() Тогда
		ОписаниеВарианта = ОписаниеГруппыДругихВариантовСозданияПроцессов();
		Возврат HTMLОписаниеВарианта(ОписаниеВарианта);
	КонецЕсли;
	
	ШаблоныПроцессовПоУмолчанию = ШаблоныБизнесПроцессовКлиентСервер.ШаблоныПроцессовПоУмолчанию();
	Если ШаблоныПроцессовПоУмолчанию.Найти(Вариант) = Неопределено Тогда
		Возврат ОбзорПроцессовВызовСервера.ПолучитьОбзорШаблонаПроцесса(Вариант);
	КонецЕсли;
	
	ТипВарианта = ТипВариантаСозданияПроцесса(Вариант);
	
	Если ТипВарианта = ТипВариантаОбработкаВнутреннегоДокумента() Тогда
		ОписаниеВарианта = ОписаниеВариантаПоУмолчаниюОбработкиВнутреннегоДокумента();
	ИначеЕсли ТипВарианта = ТипВариантаОбработкаВходящегоДокумента() Тогда
		ОписаниеВарианта = ОписаниеВариантаПоУмолчаниюОбработкиВходящегоДокумента();
	ИначеЕсли ТипВарианта = ТипВариантаОбработкаИсходящегоДокумента() Тогда
		ОписаниеВарианта = ОписаниеВариантаПоУмолчаниюОбработкаИсходящегоДокумента();
	Иначе
		ОписаниеВарианта = ОписаниеВариантаПоУмолчаниюЛюбогоТипа();
	КонецЕсли;
	
	Возврат HTMLОписаниеВарианта(ОписаниеВарианта);
	
КонецФункции

// Возвращает описание варианта по умолчанию обработки вн. документов.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВариантаПоУмолчаниюОбработкиВнутреннегоДокумента() Экспорт
	
	Возврат НСтр("ru = 'Создание нового процесса обработки документа для заполнения вручную.
		|
		|Подготовьте цепочку действий, которые должен будет пройти документ. Например, согласование, утверждение, регистрация, рассмотрение, исполнение.'");
	
КонецФункции

// Возвращает описание варианта по умолчанию обработки вх. документов.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВариантаПоУмолчаниюОбработкиВходящегоДокумента() Экспорт
	
	Возврат НСтр("ru = 'Создание нового процесса обработки документа для заполнения вручную.
		|
		|Подготовьте цепочку действий, которые должен будет пройти документ. Например, рассмотрение и исполнение.'");
	
КонецФункции

// Возвращает описание варианта по умолчанию обработки исх. документов.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВариантаПоУмолчаниюОбработкаИсходящегоДокумента() Экспорт
	
	Возврат НСтр("ru = 'Создание нового процесса обработки документа для заполнения вручную.
		|
		|Подготовьте цепочку действий, которые должен будет пройти документ. Например, согласование, утверждение и регистрация.'");
	
КонецФункции

// Возвращает описание варианта по умолчанию любого типа.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеВариантаПоУмолчаниюЛюбогоТипа() Экспорт
	
	Возврат НСтр("ru = 'Создание нового процесса для заполнения вручную. 
		|
		|Вы можете указать исполнителей, установить сроки, добавить предмет или файл.'");
	
КонецФункции

// Возвращает описание для группы других вариантов.
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеГруппыДругихВариантовСозданияПроцессов() Экспорт
	
	Описание = НСтр("ru = 'Остальные доступные варианты формирования процессов.'");
	Возврат HTMLОписаниеВарианта(Описание);
	
КонецФункции

// Возвращает параметры варианта создания процесса.
//
// Параметры:
//  Вариант - СправочникСсылка - ссылка на шаблон процесса.
//  Помощник - см. Помощник()
//
// Возвращаемое значение:
//  Структура - поля структуры зависят от переданного варианта.
//   * Основание - Структура - основание заполенние.
//      ** Шаблон - ссылкан на шаблон процесса (вариант отправки).
//      ** ЗадачаИсполнителя - ссылка на задачу (объект отправки).
//      ** Исполнители - Массив - список пользователей.
//      ** Предметы - Массив - список предметов для создаваемого процесса.
//          *** Структура с полями: Предмет, ИмяПредмета, РольПредмета
//   * ИмяФормы - Строка
//
Функция ПараметрыВариантаСозданияПроцесса(Вариант, Помощник) Экспорт
	
	Параметры = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьПереопределяемый.ПриФормированиеПараметровВариантаСозданияПроцесса(
		Параметры, Вариант, Помощник, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Параметры;
	КонецЕсли;
	
	МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Вариант);
	ИмяПроцесса = МенеджерШаблона.ИмяПроцесса(Вариант);
	
	ТипШаблона = БизнесПроцессы[ИмяПроцесса].ТипШаблона();
	Если ИмяПроцесса = ТипВариантаОбработкаВнутреннегоДокумента() Тогда
		ТипШаблона = ТипВариантаОбработкаВнутреннегоДокумента();
	ИначеЕсли ИмяПроцесса = ТипВариантаОбработкаВходящегоДокумента() Тогда
		ТипШаблона = ТипВариантаОбработкаВходящегоДокумента();
	ИначеЕсли ИмяПроцесса = ТипВариантаОбработкаИсходящегоДокумента() Тогда
		ТипШаблона = ТипВариантаОбработкаИсходящегоДокумента();
	КонецЕсли;
	
	ПомощникОтправить.ЗаполнитьДопустимыеТипыПредметовВПроцессах(Помощник);
	ДопустимыеТипыПредметов = Помощник.ДопустимыеТипыПредметовВПроцессах[ТипШаблона];
	
	Основание = Новый Структура;
	Основание.Вставить("Шаблон", Вариант);
	
	Предметы = Новый Массив;
	ПоляСтрокиПредметов = "Предмет, ИмяПредмета, РольПредмета";
	ИсходныеИменаПредметов = Новый Массив;
	
	Если ИспользуетсяРежимОтправкаПодзадачи(Помощник) Тогда
		
		Основание.Вставить("ЗадачаИсполнителя", Помощник.ОбъектыОтправки[0]);
		
		Если Не ЗначениеЗаполнено(Помощник.ПредметыПроцесса) Тогда
			ПомощникОтправить.ЗаполнитьПредметыПроцесса(Помощник);
		КонецЕсли;
		
		ПредметыЗадачи = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Помощник.ОбъектыОтправки[0], "Предметы").Выгрузить();
		
		ИменаПредметов = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ПредметыЗадачи Цикл
			ИменаПредметов[СтрокаТаблицы.Предмет] = СтрокаТаблицы.ИмяПредмета;
		КонецЦикла;
		
		Для Каждого ПредметПроцесса Из Помощник.ПредметыПроцесса Цикл
			
			Если Не ЗначениеЗаполнено(ПредметПроцесса)
				Или ДопустимыеТипыПредметов.Найти(ТипЗнч(ПредметПроцесса)) = Неопределено Тогда
				
				Продолжить;
			КонецЕсли;
			
			СтрокаПредмета = Новый Структура(ПоляСтрокиПредметов);
			СтрокаПредмета.Предмет = ПредметПроцесса;
			СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
			
			СтрокаПредмета.ИмяПредмета = ИменаПредметов[ПредметПроцесса];
			
			Предметы.Добавить(СтрокаПредмета);
		КонецЦикла;
		
	ИначеЕсли ИспользуетсяРежимОтправкаПользователям(Помощник) Тогда
		Основание.Вставить("Исполнители", Помощник.ОбъектыОтправки);
	ИначеЕсли ИспользуетсяРежимОтправкаПроцесса(Помощник) Тогда
		// Дополнительные параметры не требуются.
	Иначе
		
		Для Каждого ОбъектОтправки Из Помощник.ОбъектыОтправки Цикл
			
			Если ДопустимыеТипыПредметов.Найти(ТипЗнч(ОбъектОтправки)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПредмета = Новый Структура(ПоляСтрокиПредметов);
			СтрокаПредмета.Предмет = ОбъектОтправки;
			СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
			
			СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.
				ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(СтрокаПредмета.Предмет, ИсходныеИменаПредметов);
			
			ИсходныеИменаПредметов.Добавить(СтрокаПредмета.ИмяПредмета);
			
			Предметы.Добавить(СтрокаПредмета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предметы) Тогда
		Основание.Вставить("Предметы", Предметы);
	КонецЕсли;
	
	Параметры.Вставить("Основание", Основание);
	
	МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Вариант);
	ИмяФормы = СтрШаблон("БизнесПроцесс.%1.Форма.ФормаБизнесПроцесса", ИмяПроцесса);
	Параметры.Вставить("ИмяФормы", ИмяФормы);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
