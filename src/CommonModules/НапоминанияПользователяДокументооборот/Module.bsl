////////////////////////////////////////////////////////////////////////////////
// Подсистема "Напоминания пользователя" (сервер) - переопределение в конфигурации Документооборот.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает из текстового описания интервал времени в секундах.
//
// Параметры:
//  СтрокаСоВременем - Строка - текстовое описание времени, где числа записаны цифрами,
//								а единицы измерения - строкой. 
//
// Возвращаемое значение:
//  Число - интервал времени в секундах.
// 
Функция ИнтервалВремени(Знач СтрокаСоВременем) Экспорт
	
	Если ПустаяСтрока(СтрокаСоВременем) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаСоВременем = НРег(СтрокаСоВременем);
	СтрокаСоВременем = СтрЗаменить(СтрокаСоВременем, Символы.НПП," ");
	СтрокаСоВременем = СтрЗаменить(СтрокаСоВременем, ".",",");
	СтрокаСоВременем = СтрЗаменить(СтрокаСоВременем, "+","");
	
	ПодстрокаСЦифрами = "";
	ПодстрокаСБуквами = "";
	
	ПредыдущийСимволЭтоЦифра = Ложь;
	ЕстьДробнаяЧасть = Ложь;
	
	Результат = 0;
	Для Позиция = 1 По СтрДлина(СтрокаСоВременем) Цикл
		ТекущийКодСимвола = КодСимвола(СтрокаСоВременем,Позиция);
		Символ = Сред(СтрокаСоВременем,Позиция,1);
		Если (ТекущийКодСимвола >= КодСимвола("0") И ТекущийКодСимвола <= КодСимвола("9"))
			ИЛИ (Символ="," И ПредыдущийСимволЭтоЦифра И Не ЕстьДробнаяЧасть) Тогда
			Если Не ПустаяСтрока(ПодстрокаСБуквами) Тогда
				ПодстрокаСЦифрами = СтрЗаменить(ПодстрокаСЦифрами,",",".");
				Результат = Результат + ?(ПустаяСтрока(ПодстрокаСЦифрами), 1, Число(ПодстрокаСЦифрами))
					* ЗаменитьЕдиницуИзмеренияНаМножитель(ПодстрокаСБуквами);
					
				ПодстрокаСЦифрами = "";
				ПодстрокаСБуквами = "";
				
				ПредыдущийСимволЭтоЦифра = Ложь;
				ЕстьДробнаяЧасть = Ложь;
			КонецЕсли;
			
			ПодстрокаСЦифрами = ПодстрокаСЦифрами + Сред(СтрокаСоВременем,Позиция,1);
			
			ПредыдущийСимволЭтоЦифра = Истина;
			Если Символ = "," Тогда
				ЕстьДробнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Если Символ = " " И ЗаменитьЕдиницуИзмеренияНаМножитель(ПодстрокаСБуквами) = "0" Тогда
				ПодстрокаСБуквами = "";
			КонецЕсли;
			
			ПодстрокаСБуквами = ПодстрокаСБуквами + Сред(СтрокаСоВременем,Позиция,1);
			ПредыдущийСимволЭтоЦифра = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ПодстрокаСБуквами) Тогда
		ПодстрокаСЦифрами = СтрЗаменить(ПодстрокаСЦифрами,",",".");
		Результат = Результат + ?(ПустаяСтрока(ПодстрокаСЦифрами), 1, Число(ПодстрокаСЦифрами))
			* ЗаменитьЕдиницуИзмеренияНаМножитель(ПодстрокаСБуквами);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует краткое описание напоминания.
//
// Параметры:
//  ВремяСобытия - Дата   - Дата предмета, по которой расчитан срок.
//  Описание     - Строка - Текст напоминания.
//
// Возвращаемое значение:
//  Строка - Краткое описание напоминания.
//
Функция КраткоеОписаниеНапоминания(ВремяСобытия, Описание) Экспорт
	
	КраткоеОписаниеНапоминания = НапоминанияПользователяДокументооборотКлиентСервер.КраткоеОписаниеНапоминания(
		ВремяСобытия,
		Описание,
		ТекущаяДатаСеанса());
	
	Возврат КраткоеОписаниеНапоминания;
	
КонецФункции

// Прекращает напоминания.
//
// Параметры:
//  ПрекращаемыеНапоминания - Массив - Напоминания, которые необходимо прекратить.
//                                     См. НапоминанияПользователяКлиентСервер.ОписаниеНапоминания().
// 
// Возвращаемое значение:
//  Массив - Результаты прекращения напоминаний.
//   * ПодключеноНовоеНапоминание - Булево                  - Было подключено новое напоминание, вместо прекращенного.
//   * НовоеНапоминание           - Структура, Неопределено - Новое напоминание, если оно было подключено.
//                                                            См. НапоминанияПользователяКлиентСервер.ОписаниеНапоминания().
//   * ИсточникНапоминания        - ЛюбаяСсылка             - Источник напоминания.
//
Функция ПрекратитьНапоминания(ПрекращаемыеНапоминания) Экспорт
	
	РезультатыПрекращенияНапоминаний = Новый Массив;
	Для Каждого ПрекращаемоеНапоминание Из ПрекращаемыеНапоминания Цикл
		РезультатПрекращенияНапоминания = ПрекратитьНапоминание(ПрекращаемоеНапоминание);
		РезультатыПрекращенияНапоминаний.Добавить(РезультатПрекращенияНапоминания);
	КонецЦикла;
	
	Возврат РезультатыПрекращенияНапоминаний;
	
КонецФункции

// Прекращает напоминание.
//
// Параметры:
//  ПрекращаемоеНапоминание - Структура - Напоминания, которые необходимо прекратить.
//                                        См. НапоминанияПользователяКлиентСервер.ОписаниеНапоминания().
// 
// Возвращаемое значение:
//  Структура - Результат прекращения напоминания.
//   * ПодключеноНовоеНапоминание - Булево                  - Было подключено новое напоминание, вместо прекращенного.
//   * НовоеНапоминание           - Структура, Неопределено - Новое напоминание, если оно было подключено.
//                                                            См. НапоминанияПользователяКлиентСервер.ОписаниеНапоминания().
//   * ИсточникНапоминания        - ЛюбаяСсылка             - Источник напоминания.
//
Функция ПрекратитьНапоминание(ПрекращаемоеНапоминание) Экспорт
	
	РезультатПрекращенияНапоминания =
		Новый Структура("ПодключеноНовоеНапоминание, НовоеНапоминание, ИсточникНапоминания");
	РезультатПрекращенияНапоминания.ПодключеноНовоеНапоминание = Ложь;
	РезультатПрекращенияНапоминания.ИсточникНапоминания = ПрекращаемоеНапоминание.Источник;
	Если ТипЗнч(ПрекращаемоеНапоминание.Источник) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(ПрекращаемоеНапоминание);
		Возврат РезультатПрекращенияНапоминания;
	КонецЕсли;
	
	ЗаписьКалендаря = ПрекращаемоеНапоминание.Источник;
	ТипЗаписиКалендаря = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "ТипЗаписиКалендаря");
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие
		И ПрекращаемоеНапоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета
		И ПрекращаемоеНапоминание.ИмяРеквизитаИсточника = "ДатаНачала" Тогда
		
		ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
		ОснованиеСледующейДатыНачала = Макс(ПрекращаемоеНапоминание.ВремяСобытия, ТекущаяДатаСеанса());
		СледующаяДатаНачала = ЗаписьКалендаряОбъект.ПолучитьСледующуюДатуНачала(ОснованиеСледующейДатыНачала);
		Если ЗначениеЗаполнено(СледующаяДатаНачала) Тогда
			РезультатПрекращенияНапоминания.ПодключеноНовоеНапоминание = Истина;
			РезультатПрекращенияНапоминания.НовоеНапоминание =
				ПодключитьНапоминаниеДоВремениПредмета(
					Строка(ЗаписьКалендаря),
					ПрекращаемоеНапоминание.ИнтервалВремениНапоминания,
					ЗаписьКалендаря,
					"ДатаНачала",
					СледующаяДатаНачала);
		КонецЕсли;
		
	КонецЕсли;
	
	НапоминанияПользователяСлужебный.ОтключитьНапоминание(ПрекращаемоеНапоминание);
	
	Возврат РезультатПрекращенияНапоминания;
	
КонецФункции

// Создает новое напоминание на время, рассчитанное относительно времени в предмете.
Функция ПодключитьНапоминаниеДоВремениПредмета(Текст, Интервал, Предмет, ИмяРеквизита,
	ВремяСобытия = Неопределено, Пользователь = Неопределено) Экспорт
	
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Описание", Текст);
	ПараметрыНапоминания.Вставить("Источник", Предмет);
	ПараметрыНапоминания.Вставить("ИмяРеквизитаИсточника", ИмяРеквизита);
	ПараметрыНапоминания.Вставить("ИнтервалВремениНапоминания", Интервал);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ПараметрыНапоминания.Вставить("Пользователь", Пользователь);
	КонецЕсли;
	
	Напоминание = НапоминанияПользователяСлужебный.СоздатьНапоминание(ПараметрыНапоминания, ВремяСобытия);
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(Напоминание);
	
	Возврат Напоминание;
	
КонецФункции

// Получает значение реквизита для любого объекта ссылочного типа
Функция ПолучитьЗначениеДатыНачалаЗаписиКалендаря(ЗаписьРабочегоКалендаря) Экспорт
	
	Результат = Неопределено;
	
	ЗаписьРабочегоКалендаряОбъект = ЗаписьРабочегоКалендаря.ПолучитьОбъект();
	Если ЗаписьРабочегоКалендаряОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Результат = ЗаписьРабочегоКалендаряОбъект.ПолучитьСледующуюДатуНачала(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ЗаписьРабочегоКалендаряОбъект.ДатаНачала;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет установку пометки удаления предметов, на которые есть пользовательская подписка,
// удаляет оповещение в случае необходимости.
Процедура ПроверитьУстановкуПометкиУдаления(Предмет) Экспорт
	
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ПометкаУдаления");
	
	Если Не ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Напоминания.Пользователь,
	|	Напоминания.ВремяСобытия,
	|	Напоминания.Источник,
	|	Напоминания.СрокНапоминания,
	|	Напоминания.Описание,
	|	Напоминания.СпособУстановкиВремениНапоминания,
	|	Напоминания.ИнтервалВремениНапоминания,
	|	Напоминания.ИмяРеквизитаИсточника,
	|	Напоминания.Расписание
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК Напоминания
	|ГДЕ
	|	Напоминания.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Предмет);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(СтрокаТаблицы, Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Анализирует слово на предмет соответствия единице времени и, если соответствие установлено,
// возвращает количество секунд, содержащееся в единице времени.
//
// Параметры:
//  Единица - Строка - анализируемое слово.
//
// Возвращаемое значение:
//  Число - количество секунд в Единице. Если единица не определена или пустая, то возвращается 0.
//
Функция ЗаменитьЕдиницуИзмеренияНаМножитель(Знач Единица)
	
	Результат = 0;
	Единица = НРег(Единица);
	
	ДопустимыеСимволы = НСтр("ru = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'"); // АПК:163; АПК:1036 (см. 456:1.1) символы, которые может вводить пользователь.
	ПосторонниеСимволы = СтрСоединить(СтрРазделить(Единица, ДопустимыеСимволы, Ложь), "");
	Если ПосторонниеСимволы <> "" Тогда
		Единица = СтрСоединить(СтрРазделить(Единица, ПосторонниеСимволы, Ложь), "");
	КонецЕсли;
	
	СловоформыНедели = СтрРазделить(НСтр("ru = 'нед,н'"), ",", Ложь);
	СловоформыДня = СтрРазделить(НСтр("ru = 'ден,дне,дня,дн,д'"), ",", Ложь);
	СловоформыЧаса = СтрРазделить(НСтр("ru = 'час,ч'"), ",", Ложь);
	СловоформыМинуты = СтрРазделить(НСтр("ru = 'мин,м'"), ",", Ложь);
	СловоформыСекунды = СтрРазделить(НСтр("ru = 'сек,с'"), ",", Ложь);
	
	ПервыеТриСимвола = Лев(Единица,3);
	Если СловоформыНедели.Найти(ПервыеТриСимвола) <> Неопределено Тогда
		Результат = 60*60*24*7;
	ИначеЕсли СловоформыДня.Найти(ПервыеТриСимвола) <> Неопределено Тогда
		Результат = 60*60*24;
	ИначеЕсли СловоформыЧаса.Найти(ПервыеТриСимвола) <> Неопределено Тогда
		Результат = 60*60;
	ИначеЕсли СловоформыМинуты.Найти(ПервыеТриСимвола) <> Неопределено Тогда
		Результат = 60;
	ИначеЕсли СловоформыСекунды.Найти(ПервыеТриСимвола) <> Неопределено Тогда
		Результат = 1;
	КонецЕсли;
	
	Возврат Формат(Результат,"ЧН=0; ЧГ=0");
	
КонецФункции

#КонецОбласти
