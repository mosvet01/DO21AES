#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолныеИменаОбъектов = Новый Массив;
	ПолныеИменаРегистров = Новый Массив;
	
	МетаданныеОбъекта = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	МетаданныеОбъекта = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ПолныеИменаОбъектов, ",");
	ПараметрыВыборки.ПолныеИменаРегистров = СтрСоединить(ПолныеИменаРегистров, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
	|ГДЕ
	|	МашиночитаемыеДоверенностиКонтрагентов.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|	И МашиночитаемыеДоверенностиКонтрагентов.Ссылка > &МЧДКонтрагентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|	И МашиночитаемыеДоверенностиОрганизаций.Ссылка > &МЧДОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ОтработаныВсеДанныеМЧДКонтрагентов = Ложь;
	ОтработаныВсеДанныеМЧДОрганизаций = Ложь;
	
	МЧДКонтрагентов = Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка();
	МЧДОрганизаций = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанныеМЧДКонтрагентов Или Не ОтработаныВсеДанныеМЧДОрганизаций Цикл
		
		Запрос.УстановитьПараметр("МЧДКонтрагентов", МЧДКонтрагентов);
		Запрос.УстановитьПараметр("МЧДОрганизаций", МЧДОрганизаций);
		
		ДанныеМЧДКонтрагентов = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ДанныеМЧДОрганизаций = Запрос.ВыполнитьПакет()[1].Выгрузить();
		
		КоличествоСтрокМЧДКонтрагентов = ДанныеМЧДКонтрагентов.Количество();
		КоличествоСтрокМЧДОрганизаций = ДанныеМЧДОрганизаций.Количество();
		
		Если КоличествоСтрокМЧДКонтрагентов < 500 Тогда
			ОтработаныВсеДанныеМЧДКонтрагентов = Истина;
		КонецЕсли;
		Если КоличествоСтрокМЧДОрганизаций < 500 Тогда
			ОтработаныВсеДанныеМЧДОрганизаций = Истина;
		КонецЕсли;
		
		Если КоличествоСтрокМЧДКонтрагентов > 0 Тогда
			МЧДКонтрагентов = ДанныеМЧДКонтрагентов[КоличествоСтрокМЧДКонтрагентов - 1].Ссылка;
		КонецЕсли;
		Если КоличествоСтрокМЧДОрганизаций > 0 Тогда
			МЧДОрганизаций = ДанныеМЧДОрганизаций[КоличествоСтрокМЧДОрганизаций - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧДКонтрагентов.ВыгрузитьКолонку("Ссылка"));
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧДОрганизаций.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъектаМЧДКонтрагентов = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	ПолноеИмяОбъектаМЧДКонтрагентов = МетаданныеОбъектаМЧДКонтрагентов.ПолноеИмя();
	
	МетаданныеОбъектаМЧДОрганизаций = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций;
	ПолноеИмяОбъектаМЧДОрганизаций = МетаданныеОбъектаМЧДОрганизаций.ПолноеИмя();
	
	ИменаМетаданных = Новый Массив;
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧДКонтрагентов);
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧДОрганизаций);
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, 
		"РегистрСведений.СертификатыУчетныхЗаписейЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаОбъект);
			Удалить = Ложь;
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				ОбработатьДанные_УдалитьЗаписиРегистраРезультатыПроверкиМЧДОператором(СсылкаНаОбъект);
				ОбработатьДанные_УдалитьЗаписиРегистраМашиночитаемыеДоверенностиЭД(СсылкаНаОбъект);
				ОбработатьДанные_УдалитьЗаписиРегистраЭлектронныеПодписиПоМЧД(СсылкаНаОбъект);
				ОбработатьДанные_ПроверитьНеобходимостьУдаленияДоверенности(Объект, Удалить);
			КонецЕсли;
			
			Если Удалить Тогда
				ОбновлениеИнформационнойБазы.УдалитьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать машиночитаемую доверенность ЭДО: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые машиночитаемые доверенности ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция машиночитаемых доверенностей ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ИменаМетаданных);
	
КонецПроцедуры

// Включает использование реестра доверенностей ФНС ЭДО.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ВключитьИспользованиеРеестраДоверенностейФНСЭДО(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта = Метаданные.Константы.ИспользоватьРеестрДоверенностейФНСЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Записать = Ложь;
		
		МенеджерЗначения = Константы.ИспользоватьРеестрДоверенностейФНСЭДО.СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		Если Не МенеджерЗначения.Значение Тогда
			МенеджерЗначения.Значение = Истина;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		Иначе
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(МенеджерЗначения, ПараметрыОтметкиВыполнения);
		КонецЕсли;
		
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения =
			НСтр("ru = 'Не удалось обработать константу ""Использовать реестр доверенностей ФНС ЭДО"" по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, МетаданныеОбъекта, , ТекстСообщения);
		
	КонецПопытки;
		
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать реестр доверенностей ФНС ЭДО"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Использовать реестр доверенностей ФНС ЭДО"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта, , ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет является ли ссылка доверенностью контрагента.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
// 	Булево
//  
Функция ЭтоМЧДКонтрагента(МЧД) Экспорт
	Возврат ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов");
КонецФункции

// Возвращает идентификатор пространства имен пилотного формата МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ПилотныйФорматМЧД() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_01";
КонецФункции

// Возвращает идентификатор пространства имен утвержденного в 2022г. формата МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_2022() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_01_01";
КонецФункции

// Определяет пространство имен XDTO объекта МЧД по его содержимому.
// 
// Параметры:
//  ДанныеXDTO - ОбъектXDTO
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаОбъектаМЧД(ДанныеXDTO) Экспорт
	
	Если ДанныеXDTO.Свойства().Получить("ИдФайл") <> Неопределено
		И СтрНайти(ДанныеXDTO.ИдФайл, ФорматыЭДО_ФНС.ПространствоИмен_МЧД()) > 0 Тогда
			
		Возврат ПилотныйФорматМЧД();
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.СвДов") <> Неопределено
		И РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.СвПолн") <> Неопределено Тогда
			
		Возврат ФорматМЧД_2022();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Проверяет, действительна ли доверенность.
// 
// Параметры:
//  СвойстваДоверенности - см. НовыеСвойстваДоверенности
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДатаПроверки) Экспорт
	
	ДействительнаПоСроку = ДатаПроверки > СвойстваДоверенности.ДатаВыдачи
		И ДатаПроверки < КонецДня(СвойстваДоверенности.ДатаОкончания);
	Отозвана = СвойстваДоверенности.Отозвана И ДатаПроверки >= СвойстваДоверенности.ДатаОтзыва;
	ДействительнаПоСтатусу = СтатусыДействительнойДоверенности().Найти(СвойстваДоверенности.СтатусВРеестреФНС) <> Неопределено;
		
	Возврат ДействительнаПоСроку И СвойстваДоверенности.Верна И Не Отозвана И ДействительнаПоСтатусу;
	
КонецФункции

// Возвращает результат проверки доверенности из протокола проверки
// 
// Параметры:
//  ПроверкаДоверенности - см. НовыйПротоколПроверкиМЧД
// 
// Возвращаемое значение:
//  Булево
//  
Функция ДоверенностьПроверенаУспешно(ПроверкаДоверенности) Экспорт
	Возврат НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаОператором)
				И НЕ ПроверкаДоверенности.ПроверкаОператором.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаОтзываМЧД)
				И НЕ ПроверкаДоверенности.ПроверкаОтзываМЧД.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаПериодаДействия)
				И НЕ ПроверкаДоверенности.ПроверкаПериодаДействия.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаПодписиМЧД)
				И НЕ ПроверкаДоверенности.ПроверкаПодписиМЧД.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС)
				И НЕ ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.СопоставлениеДоверителя)
				И НЕ ПроверкаДоверенности.СопоставлениеДоверителя.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.СопоставлениеПредставителя)
				И НЕ ПроверкаДоверенности.СопоставлениеПредставителя.Успех);
	
КонецФункции

// Возвращает снилс доверителей по переданному массиву ссылок МЧД организаций
// 
// Параметры:
//  МассивМЧД - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//      * Ключ     - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - СНИЛС подписанта (только цифры)
//  
Функция ДанныеСнилсПодписантов(МассивМЧД) Экспорт
	
	Результат = Новый Соответствие;
	
	ДанныеДоверенностей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивМЧД, "ЛицоБезДовФЛ_СНИЛС");
	
	Для Каждого ДанныеДоверенности Из ДанныеДоверенностей Цикл
		Результат.Вставить(ДанныеДоверенности.Ключ);
		Результат.Вставить(УбратьИзСтрокиВсеНеЦифры(ДанныеДоверенности.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ОтражениеВУчете

// Читает данные файла ЭД и формирует дерево ЭД
// 
// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  НовыйЭД - Структура
//  
Процедура ПрочитатьМЧД(ДанныеФайлаЭД, НовыйЭД) Экспорт

	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
	НовыйЭД.ИД = ДанныеФайлаЭД.Документ.СвДов.НомДовер;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;

	ДеревоДляСовместимостиСБЭД = Новый ДеревоЗначений;
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("Значение", Новый ОписаниеТипов);

	СтрокаЭДОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДОбъектXDTO.ПолныйПуть = "ОбъектXDTO";
	СтрокаЭДОбъектXDTO.Значение = ДанныеФайлаЭД;

	УзелСведений = ДанныеФайлаЭД.Документ.СвДов;

	СтрокаЭДДата = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДата.ПолныйПуть = "Дата";
	ДатаВыдДовер = УзелСведений.Свойства().Получить("ДатаВыдДовер");
	Если ДатаВыдДовер <> Неопределено Тогда
		Дата = УзелСведений.ДатаВыдДовер;
	Иначе
		Дата = УзелСведений.ДатаНач;
	КонецЕсли;
	СтрокаЭДДата.Значение = СтроковыеФункцииКлиентСервер.СтрокаВДату(Дата);

	СтрокаЭДДНомер = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДНомер.ПолныйПуть = "Номер";
	СтрокаЭДДНомер.Значение = УзелСведений.НомДовер;

	НовыйЭД.ЗначениеРеквизита = ДеревоДляСовместимостиСБЭД;

КонецПроцедуры

// Заполняет документ учета для типа ЭД - МашиночитаемаяДоверенность.
//
// Параметры:
//  ДанныеЭлектронногоДокумента - см. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  ДокументыУчета 	- Неопределено,
//  				- Массив из СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов, СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  СпособОбработки - Строка
//  ОписаниеОшибки  - Строка - описание ошибки создания МЧД. Может быть выведена пользователю.
//  
Процедура ОтразитьВУчете(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки = "", ОписаниеОшибки = "") Экспорт

	СпособыОтраженияВУчете = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();
	Если Не СпособыОтраженияВУчете.Свойство(СпособОбработки) Тогда
		СпособОбработки = СпособыОтраженияВУчете.МашиночитаемыеДоверенностиКонтрагентов;
	КонецЕсли;

	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	Если СпособОбработки = "МашиночитаемыеДоверенностиОрганизаций" Тогда
		СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	КонецЕсли;

	ДанныеФайла = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
	Если ДокументыУчета <> Неопределено И ДокументыУчета.Количество() > 0 Тогда
		Для Каждого МЧД Из ДокументыУчета Цикл
			РезультатЗагрузки = СправочникМЧД.ЗагрузитьМЧДИзФайла(ДанныеФайла.ДвоичныеДанные, МЧД);
			Если НЕ ЗначениеЗаполнено(РезультатЗагрузки.МЧД) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось записать машиночитаемую доверенность'");
				ВызватьИсключение(ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатЗагрузки = СправочникМЧД.ЗагрузитьМЧДИзФайла(ДанныеФайла.ДвоичныеДанные);
		МЧД = РезультатЗагрузки.МЧД;
		Если ЗначениеЗаполнено(МЧД) Тогда
			ДокументыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МЧД);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует список операций ЭД типа МашиночитаемаяДоверенность.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список операций типа документа
//  
Функция СписокОперацийТипаДокумента() Экспорт

	Операции = Новый СписокЗначений;
	Способы = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();

	Для Каждого Способ Из Способы Цикл
		Операции.Добавить(Способ.Ключ, Способ.Значение);
	КонецЦикла;

	Возврат Операции;

КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.МашиночитаемаяДоверенность);

КонецПроцедуры

// См. ИнтеграцияЭДО.СписокОперацийТипаДокумента
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт

	Способы = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();

	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Для Каждого Способ Из Способы Цикл
			СпособыОтраженияВУчете.Добавить(
				Способ.Ключ,
				Способ.Значение,
				Способ.Ключ = "МашиночитаемыеДоверенностиКонтрагентов");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Проверяет заполнение обязательных реквизитов в файле машиночитаемой доверенности.
//
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена
//  ЭтоДоверенностьОрганизации - Булево
//
// Возвращаемое значение:
//  Структура - Результат проверки:
// * ЕстьОшибки - Булево
// * ТекстОшибки - Строка
//
Функция ПроверитьКлючевыеРеквизитыДанныхФайлаДоверенности(ДанныеДоверенности, ЭтоДоверенностьОрганизации = Ложь) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьОшибки", Ложь);
	РезультатПроверки.Вставить("ТекстОшибки", "");
	
	Если ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		КлючевыеРеквизиты = "ДоверительФЛ_ИНН, ДоверительФЛ_СНИЛС";
	Иначе
		КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
	КонецЕсли;
	
	КлючевыеРеквизиты = КлючевыеРеквизиты + ",НомерДоверенности, ДатаВыдачи, ДатаОкончания";
	Если ЭтоДоверенностьОрганизации Тогда
		КлючевыеРеквизиты = КлючевыеРеквизиты + ",Организация, Представитель";
	КонецЕсли;
	
	КлючевыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеРеквизиты, , , Истина);
	
	ТекстОшибки = "";
	
	Для Каждого КлючевойРеквизит Из КлючевыеРеквизиты Цикл
		Если ДанныеДоверенности.Свойство(КлючевойРеквизит)
			И ЗначениеЗаполнено(ДанныеДоверенности[КлючевойРеквизит]) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КлючевойРеквизит = "Представитель" Тогда
				ТекстОшибки = НСтр("ru = 'Необходимо создать физическое лицо - представителя доверенности.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника'") + ":  " + КлючевойРеквизит;
			КонецЕсли;
		Иначе
			ТекстОшибки = ТекстОшибки + ", " + КлючевойРеквизит;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки.ТекстОшибки = ТекстОшибки;
	РезультатПроверки.ЕстьОшибки = ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Структура адреса сервера МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * АдресСервера - Строка
//  * РесурсКорняAPI - Строка
//  * ИспользоватьРасширенияAPI - Булево
//  
Функция СтруктураАдресаСервераМЧД() Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресСервера",				"https://1cpoagate.1c.ru/");
	СтруктураАдреса.Вставить("РесурсКорняAPI",				"/applications/MChD/api/clientpoa");
	СтруктураАдреса.Вставить("ИспользоватьРасширенияAPI",	Истина);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Формирует файл заявления на отмену МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ПричинаОтмены - Строка - Причина отмены доверенности
// 
// Возвращаемое значение:
//  Структура - Подготовленный файл:
//  * ИмяФайла - Строка - Имя файла
//  * Содержимое - Строка - Содержимое файла
//
Функция ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, ПричинаОтмены) Экспорт
	
	МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.НайтиПоРеквизиту("НомерДоверенности", НомерДоверенности);
	ДвоичныеДанныеМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "XMLфайлМЧД").Получить();
	ДанныеДоверенности = ДанныеИзФайлаОбмена(ДвоичныеДанныеМЧД);
	
	Если ДанныеДоверенности = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось распознать двоичные данные доверенности'");
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "001");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");

	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаяв");
	ЗаписьXML.ЗаписатьАтрибут("НомДовер", НомерДоверенности);
	ЗаписьXML.ЗаписатьАтрибут("ПричОтз", ПричинаОтмены);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаявит");
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РосОргДовер");
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		ЗаписьXML.ЗаписатьАтрибут("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		ЗаписьXML.ЗаписатьАтрибут("ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН);
		ЗаписьXML.ЗаписатьКонецЭлемента();
				
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда

		ЗаписьXML.ЗаписатьНачалоЭлемента("ИПДовер");
		ЗаписьXML.ЗаписатьАтрибут("НаимИП", ДанныеДоверенности.ДоверительЮЛ_НаимОрг);
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН);
		ЗаписьXML.ЗаписатьАтрибут("ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН);
		ЗаписьXML.ЗаписатьКонецЭлемента();

	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не поддерживается отзыв с типом доверителя:'") + ДанныеДоверенности.ТипОрганизации;
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат Новый Структура("ИмяФайла, Содержимое", "revoke.xml", ЗаписьXML.Закрыть());
	
КонецФункции

// Получает номер МЧД на сервере МЧД.
// 
// Параметры:
//  ТокенДоступа - Строка - Токен доступа к серверу МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат:
//   * НомерДоверенности - Строка - Номер доверенности
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьНомерМЧД(ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеНомераМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ТекстОтвета", 		"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен номер доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок = КодыОшибокДоступа();
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");		
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат регистрации:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * НомерДоверенности - Строка - Номер доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * ИННДоверителя - Строка - ИНН доверителя
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ЗарегистрироватьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.РегистрацияМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/contract/pre_validation/failed",
		СтрШаблон(
			НСтр("ru = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unknown-poa-type",
		СтрШаблон(
			НСтр("ru = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.signature_is_invalid",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_cn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_inner_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poa""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1.sig""
		|Content-Type: text/xml
		|
		|";
		
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает статус транзакции МЧД.
// 
// Параметры:
//  ИдентификаторТранзакции - Строка - Идентификатор транзакции
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
// 
// Возвращаемое значение:
//  Структура - Результат получения статуса транзакции МЧД:
//   * СтатусТранзакции - Строка - Статус транзакции
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ДатаВремяТранзакции - Дата, Неопределено - Дата и время транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьСтатусТранзакцииМЧД(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеСтатусаТранзакцииМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус обработки с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp"),
			СтруктураОтвета.timestamp, Неопределено);
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если ЗначениеЗаполнено(Результат.ДатаВремяТранзакции) Тогда
		Попытка
			Результат.ДатаВремяТранзакции = XMLЗначение(Тип("Дата"), Результат.ДатаВремяТранзакции);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось разобрать дату и время транзакции'");
			СтруктураПараметров = Новый Структура("ШаблонОшибкиИзИсключения", ТекстСообщения); 
			ВывестиИЗаписатьОшибкуМЧД(СтруктураПараметров, ОтветHTTP, , "ТолькоЗаписатьВЖурналРегистрации");
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Загружает и возвращает сведения доверенности с сервера МЧД.
// 
// Параметры:
//   НомерДоверенности - Строка - Номер доверенности
//   ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Неопределено, Структура: - Полученные сведения доверенности на сервере МЧД:
//   * ЧастичныеДанные - Структура - См. МашиночитаемыеДоверенности.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД
//   * ПолныеДанные - ДвоичныеДанные
//   * ДатаЗагрузкиИзРеестра - Дата - Текущая дата
// 
Функция ПолучитьСведенияДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
		
	РезультатЗагрузки = ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
							НомерДоверенности,
							ИННДоверителя,
							ТокенДоступа);
							
	ПолныеДанные = Неопределено;
	Если ЗначениеЗаполнено(РезультатЗагрузки.ДанныеВыгрузки) Тогда
		ПолныеДанные = РезультатЗагрузки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
	ЧастичныеДанные = ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа);
	Возврат Новый Структура(
		"ЧастичныеДанные, ПолныеДанные, ДатаЗагрузкиИзРеестра",
		ЧастичныеДанные, ПолныеДанные, ТекущаяДатаСеанса());
			
КонецФункции

// Получает частичные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура - Частичные данные доверенности:
//   * СтатусДоверенности - Строка - Статус доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * НомерДоверенности - Строка - Номер доверенности
//   * ДатаВыдачи - Дата, Неопределено - Дата выдачи доверенности
//   * ДатаОкончания - Дата, Неопределено - Дата окончания доверенности
//   * ПубличныйКлюч - Строка - Публичный ключ
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеЧастичныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poaopen?poaNumber=" + НомерДоверенности, "/poar-webapp/integration/poa/" + НомерДоверенности + "/public");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("id"),
			СтруктураОтвета.id, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ДатаВыдачи = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("startDate"),
			СтруктураОтвета.startDate, Неопределено);
		Результат.ДатаОкончания = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("endDate"),
			СтруктураОтвета.endDate, Неопределено);
		Результат.ПубличныйКлюч = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerPublicKey"),
			СтруктураОтвета.issuerPublicKey, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении статуса доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ХешДоверенности) И НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура - Полные данные доверенности:
//   * ДанныеВыгрузки - ДвоичныеДанные, Неопределено - Данные выгрузки
//   * ДанныеПодписи - ДвоичныеДанные, Неопределено - Данные подписи
//   * ДанныеАрхива - ДвоичныеДанные, Неопределено - Данные архива
//   * СтатусПолучения - Строка - Статус получения
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеПолныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеВыгрузки", 	Неопределено);
	Результат.Вставить("ДанныеПодписи", 	Неопределено);
	Результат.Вставить("ДанныеАрхива", 		Неопределено);
	Результат.Вставить("СтатусПолучения", 	"");
	Результат.Вставить("ТекстОтвета", 		"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус запроса данных доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении данных доверенности с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poazip?poaNumber=" + НомерДоверенности + ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя),
		"/poar-webapp/integration/poa/" + НомерДоверенности
			+ ?(ИННДоверителя = Неопределено, "", "/" + ИННДоверителя) + "/zip");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Если НРег(ОтветHTTP.Заголовки["Content-Type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["Content-Type"]) = "multipart"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "multipart"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["Content-Disposition"], 10)) = "attachment"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["content-disposition"], 10)) = "attachment" Тогда
		
		КаталогРаспаковки = "";
		Попытка
			
			Результат.ДанныеАрхива = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
			
			ОбъектЧтение = Новый ЧтениеZipФайла(Результат.ДанныеАрхива.ОткрытьПотокДляЧтения());
			Если ОбъектЧтение.Элементы.Количество() <> 0 Тогда
				КаталогРаспаковки = ПолучитьИмяВременногоФайла();
				КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРаспаковки);
				
				СоздатьКаталог(КаталогРаспаковки);
				Для каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл
					РасширениеЭлемента = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлементАрхива.Имя).Расширение;
					Если НРег(РасширениеЭлемента) = ".xml" ИЛИ НРег(РасширениеЭлемента) = ".sig"
						ИЛИ НРег(РасширениеЭлемента) = ".sign" Тогда
						
						ОбъектЧтение.Извлечь(ЭлементАрхива, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
						Если НРег(РасширениеЭлемента) = ".xml" Тогда
							Результат.ДанныеВыгрузки = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
						ИначеЕсли НРег(РасширениеЭлемента) = ".sig" ИЛИ НРег(РасширениеЭлемента) = ".sign" Тогда
							ДвоичныеДанныеBase64ИзФайла = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
							ДанныеПодписи = ПолучитьДвоичныеДанныеИзBase64ДвоичныхДанных(ДвоичныеДанныеBase64ИзФайла);
							Результат.ДанныеПодписи = ДанныеПодписи;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбъектЧтение.Закрыть();
		Исключение
			Если ЗначениеЗаполнено(КаталогРаспаковки) Тогда
				ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
			КонецЕсли;
			ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ШаблонОшибкиИзИсключения",
				НСтр("ru = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД: %1'")));
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецПопытки;
		ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
		
		Если Результат.ДанныеВыгрузки = Неопределено Тогда
			ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ТекстОшибкиПоУмолчанию",
				НСтр("ru = 'Не получены данные доверенности с сервера МЧД'")));
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусПолучения = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("reqStatus"),
			СтруктураОтвета.reqStatus, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.СтатусПолучения) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Отменяет МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат отмены:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ОтменитьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаВыгрузки;
		ОбъектДоверенность.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеВыгрузки,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.ЭлектроннаяПодписьЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеПодписи,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ОтменаМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор отзыва доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при отзыве доверенности на сервере МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-valid",
		СтрШаблон(
			НСтр("ru = 'Операция запрещена: данные в сертификате не совпадают с данными досрочно отзываемой доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_validation_exception",
		СтрШаблон(
			НСтр("ru = 'Электронная подпись запроса на досрочный отзыв доверенности номер ""%1"" невалидна'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/expired_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" истекла'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoked_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" уже отозвана'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_terminal_poa_status",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.revoke.revocable_poa_status_is_terminal",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как ОГРН/ОГРНИП доверителя в отзываемой доверенности не соответствуют ОГРН/ОГРНИП в сертификате электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_ogrn_or_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен ОГРН/ОГРНИП для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен СНИЛС владельца для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'ННе пройдена проверка полномочий подписанта, так как СНИЛС подписанта в отзываемой доверенности не соответствуют СНИЛС в сертификате электронной подписи для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_poa_revoke_xml",
		СтрШаблон(
			НСтр("ru = 'XML-файл отзыва доверенности не соответствует XSD-схеме для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poacancel", "/poar-webapp/integration/poa/revoke");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// Запись передаваемых данных
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poaRevoke""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1""
		|Content-Type: application/octet-stream
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при отмене доверенности на сервере МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Запускает длительную операцию по загрузке сведений МЧД.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры:
//   * ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы
//   * ДанныеМЧД - Массив из Структура:
//    ** НомерДоверенности - Строка - Номер доверенности
//    ** ИННДоверителя - Строка - ИНН Доверителя
// 
// Возвращаемое значение:
//  Структура - См. ДлительныеОперации.ВыполнитьФункцию
//
Функция НачатьЗагрузкуСведенийМЧД(СтруктураПараметров) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(СтруктураПараметров.ИдентификаторФормы);
	ДанныеМЧД = СтруктураПараметров.ДанныеМЧД;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностейНаСервереМЧД",
		ДанныеМЧД);
	
КонецФункции

// Возвращает URL информационной системы.
// 
// Возвращаемое значение:
//  Строка - url
// 
Функция СведенияОбИнформационнойСистеме() Экспорт
	Возврат "https://m4d.nalog.ru";
КонецФункции

// Определяет наличие у пользователя прав на изменение машиночитаемых доверенностей организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);
	
КонецФункции

// Возвращает таблицу значений с данными результатов проверки МЧД оператором ЭДО. 
//
// Параметры:
//  ПодписанныеОбъекты - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
// Возвращаемое значение:
// 	ТаблицаЗначений:
// 	 * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 	 * Отпечаток - Строка
// 	 * ДоверенностьВерна - Булево
//
Функция РезультатыПроверокМЧДОператоромЭДО(ПодписанныеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
	|	РезультатыПроверкиМЧД.Отпечаток КАК Отпечаток,
	|	РезультатыПроверкиМЧД.ДоверенностьВерна КАК ДоверенностьВерна
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧД
	|ГДЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект В (&ПодписанныеОбъекты)";
	
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Описывает пустую структуру сведений МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * ИННДоверителя - строка
//  * ИННПредставителя - строка
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * ДатаПолученияСведений - Дата
//  * Подписана - Булево
//  * Верна - Булево
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  
Функция НовыеСведенияМЧД() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("Ссылка", Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка());
	Сведения.Вставить("ИННДоверителя", "");
	Сведения.Вставить("ИННПредставителя", "");
	Сведения.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Сведения.Вставить("Подписана", Ложь);
	Сведения.Вставить("Верна", Ложь);
	Сведения.Вставить("Отозвана", Ложь);
	Сведения.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Сведения.Вставить("ДатаПолученияСведений",  Дата(1, 1, 1));
	
	Возврат Сведения;
	
КонецФункции

// Описывает пустую структуру статуса МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ошибка - Булево
//  * ОписаниеОшибки - Строка - причина по которой не удалось получить данные доверенности, заполняется при Ошибка = Истина
//  * Сведения - Неопределено, см. НовыеСведенияМЧД
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция НовыеДанныеСтатусаМЧД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Сведения", Неопределено); 
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о статусах доверенностей контрагентов.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейКонтрагентов(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает сведения о статусах доверенностей организаций.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура См. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейОрганизаций(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает общие свойства доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * Значение - См. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенностей(Доверенности) Экспорт
	
	СвойстваДоверенностей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_НаимОрг КАК Доверитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН КАК ИННДоверителя,
		|	МашиночитаемыеДоверенностиОрганизаций.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН КАК ИННПредставителя,
		|	МашиночитаемыеДоверенностиОрганизаций.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиОрганизаций.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва КАК ДатаОтзыва,
		|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС КАК СтатусВРеестреФНС
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|ГДЕ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка В (&Доверенности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.Доверитель КАК Доверитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДоверительИНН КАК ИННДоверителя,
		|	МашиночитаемыеДоверенностиКонтрагентов.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПредставительИНН КАК ИННПредставителя,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка В (&Доверенности)";
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Свойства = НовыеОбщиеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(Свойства, Выборка);
		СвойстваДоверенностей.Вставить(Выборка.Ссылка, Свойства);
	КонецЦикла;
	
	Возврат СвойстваДоверенностей;
	
КонецФункции

// Возвращает общие свойства доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Неопределено, См. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенности(Доверенность) Экспорт
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность);
	ОбщиеСвойстваДоверенностей = ОбщиеСвойстваДоверенностей(Доверенности);
	Возврат ОбщиеСвойстваДоверенностей[Доверенность];
КонецФункции

// Возвращает номера актуальных доверенностей по данным доверителя и представителя.
// 
// Параметры:
//  Доверитель - Структура:
//  * ИНН - Строка
//  * КПП - Строка
//  Представитель - Структура:
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  Массив из Строка
Функция НомераДоверенностейПоУчастникам(Доверитель, Представитель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва КАК ДатаОтзыва,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.ДоверительИНН = &ДоверительИНН
		|	И МашиночитаемыеДоверенностиКонтрагентов.ПредставительИНН = &ПредставительИНН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания,
		|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиОрганизаций.Верна,
		|	МашиночитаемыеДоверенностиОрганизаций.Отозвана,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва,
		|	2
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|ГДЕ
		|	(МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН = &ДоверительИНН
		|	ИЛИ МашиночитаемыеДоверенностиОрганизаций.ДоверительФЛ_ИНН = &ДоверительИНН)
		|	И МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН = &ПредставительИНН
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";

	Запрос.УстановитьПараметр("ДоверительИНН", Доверитель.ИНН);
	Запрос.УстановитьПараметр("ПредставительИНН", Представитель.ИНН);
	
	НомераДоверенностей = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НомераДоверенностей;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);
		Если ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ТекущаяДатаСеанса()) Тогда
			НомераДоверенностей.Добавить(Выборка.НомерДоверенности);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомераДоверенностей;
	
КонецФункции

// Записывает результат проверки в элемент справочника машиночитаемой доверенности.
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  Результат - Булево
//  ТекстОшибки - Строка
//
Процедура ОтразитьРезультатПроверкиМЧД(МЧД, Результат, ТекстОшибки) Экспорт
	
	МЧДОбъект = МЧД.ПолучитьОбъект();
	МЧДОбъект.Верна = Результат;
	МЧДОбъект.ТекстОшибкиПроверкиМЧД = ТекстОшибки;
	
	УстановитьПривилегированныйРежим(Истина);
	МЧДОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет реквизиты подписи в объекте справочника машиночитаемые доверенности.
//
// Параметры:
//  ОбъектМЧД - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций, СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД;
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Процедура ЗаполнитьПодписанаВерна(ОбъектМЧД, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте = Ложь) Экспорт
	
	Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		РезультатПроверкиДоверенности = ПроверитьДоверенность(ДанныеДляПроверки);
		РезультатВерна = РезультатПроверкиДоверенности.Результат;
		РезультатТекстОшибки = РезультатПроверкиДоверенности.ТекстОшибки;
	Иначе   
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
		РезультатВерна = Ложь;
		РезультатТекстОшибки = "";
	КонецЕсли;
	
	ДоверенностьПодписана = ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи) И ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеДоверенности);
	
	Подпись = Неопределено;
	Если ДоверенностьПодписана Тогда
		Подпись = Новый ХранилищеЗначения(ДанныеДляПроверки.ДанныеПодписи, Новый СжатиеДанных(9));
	КонецЕсли;
	
	ОбъектМЧД.ЭлектроннаяПодпись = Подпись;
	ОбъектМЧД.Подписана = ДоверенностьПодписана;
	ОбъектМЧД.Верна = РезультатВерна;
	ОбъектМЧД.ТекстОшибкиПроверкиМЧД = РезультатТекстОшибки;
			
КонецПроцедуры

// Возвращает данные файлов из архива с машиночитаемой доверенностью и подписью.
//
// Параметры:
//  ДанныеАрхива - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище.
//
// Возвращаемое значение:
//  Структура:
//   * ДанныеМЧД - ДвоичныеДанные - Данные файла машиночитаемой доверенности.
//   * ДанныеПодписи - ДвоичныеДанные - Данные подписи.
//  Неопределено - Если не удалось прочитать данные.
//
Функция ПрочитатьАрхивСДоверенностьюИПодписью(ДанныеАрхива) Экспорт
	
	Если ТипЗнч(ДанныеАрхива) = Тип("Строка") Тогда
		ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ДанныеАрхива);
	Иначе
		ДвоичныеДанныеАрхива = ДанныеАрхива;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Чтение архива машиночитаемой доверенности'");
	ШаблонОшибки = НСтр("ru = 'Ошибка при чтении архива: %1'");
	
	ВременныйКаталог = РаботаСФайламиБЭД.ВременныйКаталог();
	
	Попытка
		ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеАрхива.ОткрытьПотокДляЧтения());
		ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог);
		ЧтениеZipФайла.Закрыть();
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			Символы.ПС + ОписаниеОшибки());
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Неопределено;
	КонецПопытки;
	
	ФайлыXML = НайтиФайлы(ВременныйКаталог, "*.xml");
	Если ФайлыXML.Количество() <> 1 Тогда
		Если ФайлыXML.Количество() = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				НСтр("ru = 'нет файла xml'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				НСтр("ru = 'несколько файлов xml'"));
		КонецЕсли;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Неопределено;
	КонецЕсли;
	ДанныеМЧД = Новый ДвоичныеДанные(ФайлыXML[0].ПолноеИмя);
	
	ФайлыПодписей = НайтиФайлы(ВременныйКаталог, "*.p7s");
	Если ФайлыПодписей.Количество() <> 1 Тогда
		Если ФайлыПодписей.Количество() = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				НСтр("ru = 'нет файла подписи (*.p7s)'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				НСтр("ru = 'несколько файлов подписи (*.p7s)'"));
		КонецЕсли;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Неопределено;
	КонецЕсли;
	ДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписей[0].ПолноеИмя);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеМЧД", ДанныеМЧД);
	Результат.Вставить("ДанныеПодписи", ДанныеПодписи);
	
	Возврат Результат;
	
КонецФункции

// Возвращает сохраненные данные файла доверенности и электронную подпись, которой подписана доверенность.
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//
// Возвращаемое значение:
//  Структура - Данные файла доверенности и подписи:
//   * ДанныеФайла - ДвоичныеДанные
//   * ДанныеПодписи - ДвоичныеДанные
//
Функция ДанныеФайлаДоверенностиИПодписи(МЧД) Экспорт
	
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, "XMLфайлМЧД,ЭлектроннаяПодпись");
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", РеквизитыМЧД.XMLфайлМЧД.Получить());
	Результат.Вставить("ДанныеПодписи", РеквизитыМЧД.ЭлектроннаяПодпись.Получить());
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные доверенности из файла обмена.
// 
// Параметры:
//  ОписаниеФайлаОбмена - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайлаОбмена) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	
	ЭлементZipФайлаДанныхДоверенности = Неопределено;
	Поток = ОписаниеФайлаОбмена.ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(Поток);
	Для Каждого Элемент Из ЧтениеZip.Элементы Цикл
		Если НРег(Элемент.Расширение) = "xml"
			И ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(Элемент.Имя) Тогда
			ЭлементZipФайлаДанныхДоверенности = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементZipФайлаДанныхДоверенности = Неопределено Тогда
		ЧтениеZip.Закрыть();
		Поток.Закрыть();
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	ВременныйКаталог = "";
	
	Попытка
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ЧтениеZip.Извлечь(ЭлементZipФайлаДанныхДоверенности, ВременныйКаталог);
		ОписаниеФайла.ИмяФайла = ЭлементZipФайлаДанныхДоверенности.Имя;
		ОписаниеФайла.ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйКаталог + ЭлементZipФайлаДанныхДоверенности.Имя);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось извлечь файл %1 из архива %2 по причине:'"),
			ЭлементZipФайлаДанныхДоверенности.Имя, ОписаниеФайлаОбмена.ИмяФайла);
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецПопытки;
	
	ЧтениеZip.Закрыть();
	Поток.Закрыть();
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Возвращает признак использования распределенного реестра доверенностей ФНС.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьРеестрДоверенностейФНС() Экспорт
	
	Возврат Константы.ИспользоватьРеестрДоверенностейФНСЭДО.Получить();
	
КонецФункции

#Область ПроверкаПодписи

// Возвращает сведения для проверки подписей по МЧД.
// 
// Параметры:
//  ТекущийПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  РазмерПорции - Число
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - См. КриптографияБЭД.ХешПодписи
Функция ПорцияСведенийОПодписяхДляПроверки(ТекущийПодписанныйОбъект, РазмерПорции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗРЕШЕННЫЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи КАК ХешПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	НЕ ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена
		|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект > &ПодписанныйОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодписанныйОбъект";
	Если РазмерПорции <> 1000 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", СтрШаблон("ПЕРВЫЕ %1", РазмерПорции));
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ТекущийПодписанныйОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает новые параметры проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * ИННДоверителя - Строка - ИНН доверителя по данным файла электронного документа.
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * СведенияМЧД - см. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//  * ПроверкаОператором - См. НовыйПротоколПроверкиОператором
//  * ТекстОшибки - Строка 
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - Неопределено, см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//
Функция НовыеПараметрыПроверкиПодписи() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ИННДоверителя", "");
	Параметры.Вставить("СвойстваПодписи");
	Параметры.Вставить("СведенияМЧД");
	Параметры.Вставить("ПроверкаОператором");
	Параметры.Вставить("ТекстОшибки", "");
	Параметры.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь); 
	Параметры.Вставить("ДанныеДляПроверки", Неопределено);
	
	Возврат Параметры;
КонецФункции

// Возвращает новый результат проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * ПроверкаВыполнена - Булево
//  * ТребуетсяДоверенность - Булево
//  * Доверенность - Неопределено
//  			   - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			   - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * ДатаПроверки - Дата
//  * ПодписьВерна - Булево
//  * ПротоколПроверки - См. НовыйПротоколПроверкиПодписи
//	* ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция НовыйРезультатПроверкиПодписи() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПроверкаВыполнена", Ложь);
	Результат.Вставить("ТребуетсяДоверенность", Ложь);
	Результат.Вставить("Доверенность", Неопределено);
	Результат.Вставить("ДатаПроверки", '00010101');
	Результат.Вставить("ПодписьВерна", Ложь);
	Результат.Вставить("ПротоколПроверки", Неопределено);
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
	Возврат Результат;
КонецФункции

// Возвращает новый протокол проверки МЧД оператором.
// 
// Возвращаемое значение:
//  Структура:
// * ДоверенностьДействительна - Булево
// * ДоверенностьДействительнаОшибка - Строка
Функция НовыйПротоколПроверкиОператором() Экспорт
	Протокол = Новый Структура;
	Протокол.Вставить("ДоверенностьДействительна", Ложь);
	Протокол.Вставить("ДоверенностьДействительнаОшибка", "");
	Возврат Протокол;
КонецФункции

// Возвращает результат проверки подписей файла сообщения электронного документа по МЧД.
// 
// Параметры:
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
// 
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиПодписи
Функция ПроверитьПодпись(ПараметрыПроверки) Экспорт
	
	Результат = НовыйРезультатПроверкиПодписи();
	Результат.ПроверкаВыполнена = Истина;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ПараметрыПроверки.ТребуетсяПроверкаМЧДНаКлиенте;
	
	СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;
	ПротоколПроверки = НовыйПротоколПроверкиПодписи();
	
	ПроверкаПодписи = ПротоколПроверки.ПроверкаПодписиДокумента;
	ПроверкаПодписи.Выполнено = Истина;
	ПроверкаПодписи.ДатаПроверки = СвойстваПодписи.ДатаПроверкиПодписи;
	ПроверкаПодписи.Успех = СвойстваПодписи.ПодписьВерна;
	Если Не СвойстваПодписи.ПодписьВерна Тогда
		ПроверкаПодписи.Ошибка = СвойстваПодписи.Комментарий;
	КонецЕсли;
	
	ПроверкаДоверенности = ПротоколПроверки.ПроверкаМЧД;
	
	ИННПредставителя = "";
	Если ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
		СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(СертификатКриптографии);
		СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(СертификатКриптографии);
	
		Результат.ТребуетсяДоверенность = МашиночитаемыеДоверенностиКлиентСервер.ТребуетсяМашиночитаемаяДоверенность(
			ПараметрыПроверки.ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.СведенияМЧД) Тогда
		Результат.ПроверкаВыполнена = Ложь;
		ПроверкаДоверенности.Выполнена = Истина;
		ПроверкаДоверенности.ОшибкаВыполнения = ПараметрыПроверки.ТекстОшибки;
	ИначеЕсли Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
		Результат.Доверенность = ПараметрыПроверки.СведенияМЧД.Ссылка;
		ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя,
			СвойстваПодписи.ДатаПодписи);

		ПроверкаДоверенности.Выполнена = Ложь;
		ПроверкаДоверенности.ОшибкаВыполнения = ПараметрыПроверки.ТекстОшибки;
	Иначе
		Результат.Доверенность = ПараметрыПроверки.СведенияМЧД.Ссылка;
		ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя,
			СвойстваПодписи.ДатаПодписи);
	КонецЕсли;
	
	Результат.ПодписьВерна = ПроверкаПодписи.Успех
		И МашиночитаемыеДоверенности.ДоверенностьПроверенаУспешно(ПроверкаДоверенности);
	
	Результат.ПротоколПроверки = ПротоколПроверки;
	Результат.ДатаПроверки = ТекущаяДатаСеанса();
	
	Возврат Результат;
	
КонецФункции

// Записать результат проверки подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
//  РезультатПроверки - См. ПроверитьПодпись
Процедура ЗаписатьРезультатПроверкиПодписи(ПодписанныйОбъект, ХешПодписи, РезультатПроверки) Экспорт
	
	Если РезультатПроверки.ПроверкаВыполнена И Не РезультатПроверки.ТребуетсяДоверенность Тогда
		ОтключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи);
		ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект);
		Возврат;
	КонецЕсли;
	
	ПротоколПроверкиJSON = ОбщегоНазначенияБЭД.JSONСтрока(РезультатПроверки.ПротоколПроверки);
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ХешПодписи = ХешПодписи;
	МенеджерЗаписи.Доверенность = РезультатПроверки.Доверенность;
	МенеджерЗаписи.ПроверкаВыполнена = РезультатПроверки.ПроверкаВыполнена;
	МенеджерЗаписи.ДатаПроверки = РезультатПроверки.ДатаПроверки;
	МенеджерЗаписи.ПодписьВерна = РезультатПроверки.ПодписьВерна;
	Если ЗначениеЗаполнено(РезультатПроверки.Доверенность) И РезультатПроверки.ПроверкаВыполнена Тогда
		МенеджерЗаписи.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколПроверкиJSON, Новый СжатиеДанных(9));
	Иначе
		МенеджерЗаписи.ПротоколПроверки = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	ОбменСКонтрагентамиДОСлужебный.ЗаписатьЗаписьОДоверенностиВРегистрыДО(
		ПодписанныйОбъект, ХешПодписи, РезультатПроверки.Доверенность);
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект);
	
КонецПроцедуры

// Добавляет подпись в очередь на проверку по доверенности.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
Процедура ВключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ХешПодписи = ХешПодписи;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает результаты проверок подписей по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешиПодписей - Массив из см. КриптографияБЭД.ХешПодписи
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - См. КриптографияБЭД.ХешПодписи
//  * Значение - См. НовыйРезультатПроверкиПодписиПоМЧД
Функция РезультатыПроверокПодписей(ПодписанныйОбъект, ХешиПодписей) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи,
		|	ЭлектронныеПодписиПоМЧД.Доверенность,
		|	ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена,
		|	ЭлектронныеПодписиПоМЧД.ДатаПроверки,
		|	ЭлектронныеПодписиПоМЧД.ПодписьВерна,
		|	ЭлектронныеПодписиПоМЧД.ПротоколПроверки
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И ЭлектронныеПодписиПоМЧД.ХешПодписи В (&ХешиПодписей)";
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	Запрос.УстановитьПараметр("ХешиПодписей", ХешиПодписей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РезультатПроверки = НовыйРезультатПроверкиПодписи();
		РезультатПроверки.Доверенность = Выборка.Доверенность;
		РезультатПроверки.ДатаПроверки = Выборка.ДатаПроверки;
		РезультатПроверки.ПодписьВерна = Выборка.ПодписьВерна;
		ПротоколПроверкиJSON = Выборка.ПротоколПроверки.Получить();
		Если ПротоколПроверкиJSON <> Неопределено Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПротоколПроверкиJSON);
			РезультатПроверки.ПротоколПроверки = ПрочитатьJSON(ЧтениеJSON,,"ДатаПроверки");
			ЧтениеJSON.Закрыть();
		КонецЕсли;
		РезультатыПроверок.Вставить(Выборка.ХешПодписи, РезультатПроверки);
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Возвращает результат проверки подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - см. КриптографияБЭД.ХешПодписи
// 
// Возвращаемое значение:
//  - См. НовыйРезультатПроверкиПодписиПоМЧД
//  - Неопределено - если для подписи не требуется проверка по МЧД
Функция РезультатПроверкиПодписи(ПодписанныйОбъект, ХешПодписи) Экспорт
	
	ХешиПодписей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ХешПодписи);
	РезультатыПроверок = РезультатыПроверокПодписей(ПодписанныйОбъект, ХешиПодписей);
	Возврат РезультатыПроверок[ХешПодписи];
	
КонецФункции

#КонецОбласти

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_5

#Область МашиночитаемыеДоверенности_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "МашиночитаемыеДоверенности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.5.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("42b6ac9c-600e-4a65-a86a-d2c54413dc1c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "МашиночитаемыеДоверенности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление машиночитаемых доверенностей'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область МашиночитаемыеДоверенности_ВключитьИспользованиеРеестраДоверенностейФНСЭДО

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.5.9";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "МашиночитаемыеДоверенности.ВключитьИспользованиеРеестраДоверенностейФНСЭДО";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a711cb1-24ef-4a1d-aa6b-c787fbcf178d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьРеестрДоверенностейФНСЭДО";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьРеестрДоверенностейФНСЭДО";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий =
		НСтр("ru = '1С:Обмен с контрагентами: включение использования реестра доверенностей ФНС ЭДО'");
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриДобавленииПереименованийОбъектовМетаданных
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.9.5.8",
		"Роль.ДобавлениеИзменениеМашиночитаемыхДоверенностей",
		"Роль.ДобавлениеИзменениеМЧДОрганизацийЭДО",
		"БиблиотекаЭлектронныхДокументовДемо");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.9.5.8",
		"Роль.ЧтениеМашиночитаемыхДоверенностей",
		"Роль.ЧтениеМЧДЭДО",
		"БиблиотекаЭлектронныхДокументовДемо");
	
КонецПроцедуры

// Выгружает данные доверенности в zip архив, в составе которого содержатся xml файл доверенности, подпись
// и файл визуализации.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура - Выгрузить данные доверенности:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево - Истина, если выгрузить данные не удалось.
// * ТекстОшибки - Строка - заполнено, если свойство Ошибка = Истина.
Функция ВыгрузитьДанныеДоверенности(Ссылка) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	РезультатВыгрузки.Вставить("Ошибка", Ложь);
	РезультатВыгрузки.Вставить("ТекстОшибки", "");
	
	Если Ссылка.Пустая() Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ЭлектроннаяПодпись, XMLфайлМЧД");
	Подпись = ЗначенияРеквизитов.ЭлектроннаяПодпись.Получить();
	Если Подпись = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ДвоичныеДанныеДоверенности = ЗначенияРеквизитов.XMLфайлМЧД.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	ИмяВременногоКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	ИмяФайлаДоверенностьБезРасширения = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Ссылка);
	ИмяФайлаДоверенность = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".xml";
	ИмяФайлаПодпись = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".p7s";
	
	ДвоичныеДанныеДоверенности.Записать(ИмяФайлаДоверенность);
	Файлы.Добавить(ИмяФайлаДоверенность);
	
	Подпись.Записать(ИмяФайлаПодпись);
	Файлы.Добавить(ИмяФайлаПодпись);
		
	ИмяФайлаВизуализация = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".pdf";
	РезультатФормирования = МашиночитаемыеДоверенности.ТабличныйДокументМЧД(ДвоичныеДанныеДоверенности);
	
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента;
	Если ТабличныйДокумент <> Неопределено Тогда
		ТабличныйДокумент.Записать(ИмяФайлаВизуализация, ТипФайлаТабличногоДокумента.PDF);
		Файлы.Добавить(ИмяФайлаВизуализация);
	КонецЕсли;
	
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(Файлы);
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	РезультатВыгрузки.ОписаниеФайла.ИмяФайла = ИмяФайлаДоверенностьБезРасширения + ".zip";
	РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные = Архив;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Возвращает данные доверенности в виде строки XML.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - данные доверенности в виде строки XML.
Функция ВыгрузитьXML(Ссылка) Экспорт
	
	ХранилищеДанныхДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "XMLфайлМЧД");
	ДвоичныеДанныеДоверенности = ХранилищеДанныхДоверенности.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Поток = ДвоичныеДанныеДоверенности.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста(Поток);
	
	СтрокаXML = ЧтениеТекста.Прочитать();
	
	ЧтениеТекста.Закрыть();
	Поток.Закрыть();
	
	Если СтрокаXML = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

// Возвращает табличный документ МЧД.
// 
// Параметры:
//  ДвоичныеДанные - Представление МЧД.
// 
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеДокумента - Неопределено, ТабличныйДокумент -  табличный документ МЧД
//   * Успех - Булево - Табличный документ сформирован
Функция ТабличныйДокументМЧД(ДвоичныеДанные) Экспорт
	
	Если ДвоичныеДанные = Неопределено Тогда
		ТекстСообщения = НСтр(
				"ru = 'Ошибка формирования табличного документа МЧД'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;	
	КонецЕсли;				
	
	СтруктураДанных = ДанныеИзФайлаОбмена(ДвоичныеДанные);
	ДоверительФЛ_ФИО = "";
	
	Для каждого Строка Из СтруктураДанных.ФИО Цикл
		Если Строка.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ПредставительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
		ИначеЕсли Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительРук Тогда
			ДоверительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
		КонецЕсли; 
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяМакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("КарточкаМЧД_%1", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьМакет(ИмяМакета);

	ОбластьШапка 							= Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьЗаголовокСведенияДоверителя 		= Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияДоверителя");
	ОбластьСведенияОбОрганизацииДоверителя 	= Макет.ПолучитьОбласть("ОбластьСведенияОбОрганизацииДоверителя");
	ОбластьЗаголовокДовСвОрг 				= Макет.ПолучитьОбласть("ОбластьЗаголовокДовСвОрг");
	ОбластьДоверительИП						= Макет.ПолучитьОбласть("ОбластьДоверительИП");
	ОбластьСведенияОПодписанте 				= Макет.ПолучитьОбласть("ОбластьСведенияОПодписанте");
	ОбластьЗаголовокСведенияОПредставителе 	= Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияОПредставителе");
	ОбластьСведенияОДоверенномЛице 			= Макет.ПолучитьОбласть("ОбластьСведенияОДоверенномЛице");
	ОбластьПереченьПолномочий 				= Макет.ПолучитьОбласть("ОбластьПереченьПолномочий");
	ОбластьПредставительОрганизация 		= Макет.ПолучитьОбласть("ОбластьПредставительОрганизация");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураДанных);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияДоверителя);
	ТабличныйДокумент.Вывести(ОбластьЗаголовокДовСвОрг);
	
	Если СтруктураДанных.Свойство("ДоверительЮЛ_КПП") Тогда

		ОбластьСведенияОбОрганизацииДоверителя.Параметры.Заполнить(СтруктураДанных);
		
		СведенияЮрЛица = Новый Структура;
		СведенияЮрЛица.Вставить("ИНН", СтруктураДанных.ДоверительЮЛ_ИНН);
		СведенияЮрЛица.Вставить("КПП", СтруктураДанных.ДоверительЮЛ_КПП);
		СведенияЮрЛица.Вставить("ОГРН", СтруктураДанных.ДоверительЮЛ_ОГРН);

		ТабличныйДокумент.Вывести(ОбластьСведенияОбОрганизацииДоверителя);

		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ФИО = ДоверительФЛ_ФИО;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ИНН = СтруктураДанных.ЛицоБезДовФЛ_ИНН;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_СНИЛС = СтруктураДанных.ЛицоБезДовФЛ_СНИЛС;
		ОбластьСведенияОПодписанте.Параметры.ЗаголовокДолжность = НСтр("ru = 'Должность'");
		ОбластьСведенияОПодписанте.Параметры.ЛицоБезДовФЛ_Должность = СтруктураДанных.ЛицоБезДовФЛ_Должность;
		ДоверительФизЛицоИНН = СтруктураДанных.ЛицоБезДовФЛ_ИНН;

	Иначе
		
		ОбластьДоверительИП.Параметры.Заполнить(СтруктураДанных);
		ОбластьДоверительИП.Параметры.ДоверительФЛ_ФИО = ДоверительФЛ_ФИО;
		ТабличныйДокумент.Вывести(ОбластьДоверительИП);
		
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ФИО = ДоверительФЛ_ФИО;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ИНН = СтруктураДанных.ДоверительФЛ_ИНН;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_СНИЛС = СтруктураДанных.ДоверительФЛ_СНИЛС;
		ДоверительФизЛицоИНН = СтруктураДанных.ДоверительФЛ_ИНН;
			
	КонецЕсли;
	
	СведенияФизЛица = Новый Структура;
	СведенияФизЛица.Вставить("ИНН", ДоверительФизЛицоИНН);
	ДоверительФизЛицо = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияФизЛица);
	ОбластьСведенияОПодписанте.Параметры.ДоверительФизЛицо = ДоверительФизЛицо;
	
	ТабличныйДокумент.Вывести(ОбластьСведенияОПодписанте);
					
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителе);
	
	Если СтруктураДанных.Свойство("ПредставительЮЛ_НаимОрг") Тогда
		ОбластьПредставительОрганизация.Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластьПредставительОрганизация);	
	КонецЕсли;
	
	Для каждого Строка Из СтруктураДанных.УдостоверенияЛичности Цикл		
		Если Строка.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ПредставительФЛ_Удостоверение = ПолучитьПредставлениеУдостоверение(Строка);
		КонецЕсли;		
	КонецЦикла;
	
	ОбластьСведенияОДоверенномЛице.Параметры.Заполнить(СтруктураДанных);
	ОбластьСведенияОДоверенномЛице.Параметры.ПредставительФЛ_ФИО = ПредставительФЛ_ФИО;
	ОбластьСведенияОДоверенномЛице.Параметры.ПредФЛ_Документ = ПредставительФЛ_Удостоверение;
	
	СведенияФизЛица = Новый Структура;
	СведенияФизЛица.Вставить("ИНН", СтруктураДанных.ПредставительФЛ_ИНН);
	ПредставительФизЛицоСсылка = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(
		СведенияФизЛица);
	ОбластьСведенияОДоверенномЛице.Параметры.ПредставительФизЛицо = ПредставительФизЛицоСсылка;
	
	ТабличныйДокумент.Вывести(ОбластьСведенияОДоверенномЛице);
	
	ОбластьПолномочийТабличногоДокументаМЧД(СтруктураДанных, ТабличныйДокумент, ОбластьПереченьПолномочий);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ПредставлениеДокумента", ТабличныйДокумент);
	РезультатФормирования.Вставить("Успех", ТабличныйДокумент <> Неопределено);
	
	Возврат РезультатФормирования;
	
КонецФункции

#Область XDTO

// Возвращает объект XDTO, прочитанный из данных xml файла машиночитаемой доверенности.
// Вызывает исключение, если не удалось.
//
// Параметры:
//  ДанныеXML - ДвоичныеДанные - Двоичные данные xml файла машиночитаемой доверенности.
//
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO.
//
Функция ПрочитатьДанныеXML(Знач ДанныеXML) Экспорт
	
	ИмяТипа = "Файл";
	ПространствоИмен = ВерсияФорматаФайлаМЧД(ДанныеXML);
	
	Если ПространствоИмен = МашиночитаемыеДоверенности.ФорматМЧД_2022() Тогда
		ИмяТипа = "Доверенность";		
	КонецЕсли;
	
	Кодировка = ОбщегоНазначенияБЭД.КодировкаИзОбъявленияXML(ДанныеXML); // для поддержки устаревших версий МЧД
	Если ПустаяСтрока(Кодировка) Тогда
		Кодировка = "windows-1251";
	КонецЕсли;
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен, Кодировка);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, ИмяТипа, Кодировка);
	
	Возврат Объект;
	
КонецФункции

#КонецОбласти

// Возвращает пустую структуру данных доверенности.
// 
// Возвращаемое значение:
//  ДанныеДоверенности - Структура:
//  * НомерДоверенности - Строка
//  * ИННДоверителя - Строка
Функция НовыеДанныеДоверенности() Экспорт
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("ИННДоверителя", "");
	Возврат ДанныеДоверенности;
КонецФункции

// Добавляет к подписанному объекту МЧД контрагента.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  
Процедура ДобавитьДоверенностьКонтрагента(ПодписанныйОбъект, НомерДоверенности, ИННДоверителя) Экспорт
	
	ДанныеМЧД = НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = НомерДоверенности;
	ДанныеМЧД.ИННДоверителя = ИННДоверителя;
	Результат = Справочники.МашиночитаемыеДоверенностиКонтрагентов.НайтиСоздатьМЧД(ДанныеМЧД);
	Если Результат.Ошибка Тогда
		ИмяСобытия = НСтр("ru = 'Ошибка записи МЧД контрагента'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
	Иначе
		РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, Результат.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к подписанному объекту МЧД организации.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на МЧД организации
//  
Процедура ДобавитьДоверенностьОрганизации(ПодписанныйОбъект, МЧД) Экспорт
	РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, МЧД);
КонецПроцедуры

// Записывает результат проверки МЧД в информационную базу.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект.
//  Отпечаток - Строка
//  ДоверенностьВерна - Булево
//
Процедура ЗаписатьРезультатПроверкиМЧД(ПодписанныйОбъект, Отпечаток, ДоверенностьВерна) Экспорт
	
	Если ДоверенностьВерна <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.РезультатыПроверкиМЧДОператором.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
		МенеджерЗаписи.Отпечаток = Отпечаток;
		МенеджерЗаписи.ДоверенностьВерна = ДоверенностьВерна;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для отбора машиночитаемых доверенностей.
// 
// Возвращаемое значение:
//  Структура:
//   * Доверитель - ОпределяемыйТип.Организация - Организация предприятия
//   * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования, СертификатКриптографии - Сертификат
//                  доверенного лица.
// 
Функция НовыйОтборМЧД() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Доверитель", Неопределено);
	Отбор.Вставить("Сертификат", Неопределено);
	
	Возврат Отбор;
	
КонецФункции

// Возвращает массив ссылок МЧД 
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД 
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Функция ПолучитьДоверенностиОрганизации(Отбор) Экспорт
	
	Доверитель = Отбор.Доверитель;
	Сертификат = Отбор.Сертификат;
	
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	Иначе
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	КонецЕсли;
	
	ПредставительИНН = СвойстваСубъектаСертификата.ИНН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания,
	|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС,
	|	МашиночитаемыеДоверенностиОрганизаций.Верна,
	|	МашиночитаемыеДоверенностиОрганизаций.Отозвана,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Организация = &Организация
	|	И МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН = &ПредставительИНН
	|	И НЕ МашиночитаемыеДоверенностиОрганизаций.ПометкаУдаления
	|	И МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС В (&СтатусВРеестреФНС)";
	
	Запрос.УстановитьПараметр("Организация", Доверитель);
	Запрос.УстановитьПараметр("СтатусВРеестреФНС", СтатусыДействительнойДоверенности());
	Запрос.УстановитьПараметр("ПредставительИНН", ПредставительИНН);  
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);
		Если ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ТекущаяДатаСеанса()) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает ссылку на последнюю выданную МЧД. Если нет действующих доверенностей, то возвращает пустую ссылку.
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД 
//
// Возвращаемое значение:
//  СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Функция ПолучитьПоследнююВыданнуюДоверенностьОрганизации(Отбор) Экспорт
	
	Доверенности = ПолучитьДоверенностиОрганизации(Отбор);
	Если Доверенности.Количество() = 0 Тогда
		Возврат Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка В (&Доверенности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Ссылка;
	
	Возврат Результат;
	
КонецФункции

// Получить номера доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  КлючИЗначение:
//      * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - номер доверенности
Функция ПолучитьНомераДоверенностей(Доверенности) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Доверенности, "НомерДоверенности");
	
КонецФункции

// Возвращает данные, полученные из файла обмена.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
// 
// Возвращаемое значение:
//  - Неопределено - В случае невозможности прочитать из файла данные МЧД
//  - Структура
//
Функция ДанныеИзФайлаОбмена(ВходящиеДанные) Экспорт

	ДвоичныеДанныеМЧД = Неопределено;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеМЧД = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанныеМЧД = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанныеМЧД = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;

	ВерсияФормата = ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
	
	Если ВерсияФормата = ФорматМЧД_2022() Тогда
		Возврат ДанныеИзФайлаОбменаВУтвержденномФормате(ВходящиеДанные);
	ИначеЕсли  ВерсияФормата = ПилотныйФорматМЧД() Тогда
		Возврат ДанныеИзФайлаОбменаВПилотномФормате(ВходящиеДанные);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

// Возвращает ДокументDOM, полученный из двоичных данных.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные или адрес временного хранилища
// 
// Возвращаемое значение:
//  ДокументDOM - Возвращаемый документ дом по входящим данным
//
Функция ПодготовитьДокументDOM(ВходящиеДанные)

	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;

	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);

	Возврат ДокументDOM;

КонецФункции

// Возвращает найденные по выражению XPath элементы узла в виде массива
// 
// Параметры:
//  УзелВладелец - ДокументDOM
//  ТекстПоиска - Строка - выражение XPath
// 
// Возвращаемое значение:
//  Массив - Массив с найденными элементами DOM
//
Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)

	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);

	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает представление даты
// 
// Параметры:
//  ПредставлениеДаты - Строка
// 
// Возвращаемое значение:
//  Строка - представление даты
//
Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)

	Результат = ПредставлениеДаты;

	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);

	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ссылку на элемент справочника стран мира, найденную по коду
// 
// Параметры:
//  ПредставлениеСтраны - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира, Неопределено - Найденный элемент справочника стран мира
//
Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)

	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		ДанныеОСтране = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ПредставлениеСтраны);
		Если ДанныеОСтране <> Неопределено Тогда
			Результат = ДанныеОСтране.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает представление серии и номера документа в виде структуры
// 
// Параметры:
//  ПредставлениеСерияНомер - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Серия - Строка
//  * Номер - Строка
//
Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)

	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");

	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);

	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ссылку на физическое лицо по сведениям.
// 
// Параметры:
//  СписокСправочников - Строка - список справочников через запятую
//  ИНН - Строка
//  КПП - Строка
//  СНИЛС - Строка
// 
// Возвращаемое значение:
//  - СправочникСсылка.ФизическиеЛица
//  - Неопределено - если не элемент не найден в ИБ.
//
Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")

	Результат = Неопределено;

	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);

	Если МассивСправочников.Найти("Организации") <> Неопределено
		ИЛИ МассивСправочников.Найти("Контрагенты") <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтруктураПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		ИмяСправочника = ?(МассивСправочников.Найти("Организации") <> Неопределено, "Организации", "Контрагенты");
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Результат, СтруктураПоиска);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		
		СведенияФизлица = Новый Структура;
		СведенияФизлица.Вставить("ИНН", ИНН);
		Результат = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияФизлица);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
// Параметры:
//  УзелВладелец - Строка
//  ТекстПоиска - Строка
//  ЗначениеПоУмолчанию - Строка
// 
// Возвращаемое значение:
//  - Строка 
//  - Дата
//  - СправочникСсылка
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)

	Результат = ЗначениеПоУмолчанию;

	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);

	Если ВыборкаЭлементов.Количество() = 1 Тогда

		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;

		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		КонецЕсли;

		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// Добавляет сведения об участнике МЧД в коллекцию.
// 
// Параметры:
//  ФИО - ОбъектXDTO
//  ТипУчастника - ПеречислениеСсылка.СубъектыДоверенности 
//  МассивУчастников - Массив из Структура:
//  * Фамилия - Строка
//  * Имя - Строка
//  * Отчество - Строка
//  * Владелец - ПеречислениеСсылка.СубъектыДоверенности
Процедура ДобавитьСведенияОбУчастникеМЧД(ФИО, ТипУчастника, МассивУчастников)
	
	НоваяСтрока = Новый Структура;
	НоваяСтрока.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия", ""));
	НоваяСтрока.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя", ""));
	НоваяСтрока.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество", ""));
	НоваяСтрока.Вставить("Владелец", ТипУчастника);
	МассивУчастников.Добавить(НоваяСтрока);
			
КонецПроцедуры

// Инициализирует свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
// * ДатаВыдачи - Дата
// * ДатаОкончания - Дата
// * Отозвана - Булево
// * ДатаОтзыва - Дата
// * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
// * Верна - Булево
Функция НовыеСвойстваДоверенности()
	
	Свойства = Новый Структура;
	Свойства.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Свойства.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Свойства.Вставить("Отозвана", Ложь);
	Свойства.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Свойства.Вставить("СтатусВРеестреФНС",
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка"));
	Свойства.Вставить("Верна", Ложь);
	
	Возврат Свойства;
	
КонецФункции

// Возвращает данные, полученные из файла обмена в пилотном формате.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
// 
// Возвращаемое значение:
//  Структура - Данные из файла обмена.
//
Функция ДанныеИзФайлаОбменаВУтвержденномФормате(ВходящиеДанные)

	ДанныеДоверенности = Новый Структура;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'При загрузке файла МЧД возникла ошибка: %1'");
	
	Попытка
		ДанныеXDTO = ПрочитатьДанныеXML(ДвоичныеДанные);		
	Исключение
		Операция = НСтр("ru = 'Разбор МЧД'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла МЧД'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Возврат ДанныеДоверенности;
	КонецПопытки;

	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');

	Документ = ДанныеXDTO.Документ;	
	СведенияДоверенности = Документ.СвДов;
		
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");
	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");		
	ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(СведенияДоверенности.ПрПередов = "1", Истина, Ложь));
	
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	

	СведенияОДоверителе = Документ.СвДоверит[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипДовер);
	
	Если СведенияОДоверителе.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИО" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИнОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИПДовер;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛДовер;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрРФ);

		ЛицоБезДоверенности = СведенияДоверителя.ЛицоБезДов;
		СведенияПоФизическомуЛицу = ЛицоБезДоверенности.СвФЛ;
		СведенияОЮридическомЛице = ЛицоБезДоверенности.СвОрг;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "ИННФЛ", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ИННФЛ);		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", СведенияПоФизическомуЛицу.СНИЛС);		
		Гражданство = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу.СведФЛ, "Гражданство", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", Гражданство);		
		ДатаРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу.СведФЛ, "ДатаРожд", 
			'00010101', "Дата");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ДатаРожд);
		Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Должность", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", Должность);		
		ЛицоБезДовЮЛ_НаимОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "НаимОрг", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ЛицоБезДовЮЛ_НаимОрг);
		ЛицоБезДовЮЛ_ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ЛицоБезДовЮЛ_ИНН);
		ЛицоБезДовЮЛ_КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "КПП", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ЛицоБезДовЮЛ_КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ОГРН", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ОГРН);

		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
				ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
		КонецЕсли;

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияОДоверителе.Подписант[0],
			Перечисления.СубъектыДоверенности.ДоверительРук,
			ДанныеДоверенности.ФИО); 

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИО);
		ИННЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ИННЮЛ);
		КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "КПП", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", СведенияДоверителя.СтрРег);
		НаимРегОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "НаимРегОрг", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", НаимРегОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", СведенияДоверителя.РегНомер);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрСтрРег);

		СведенияОРуководителеОбособленногоПодразделения = СведенияДоверителя.СвРукОП;
		СведенияПоФизическомуЛицу = СведенияОРуководителеОбособленногоПодразделения.СведФЛ;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОРуководителеОбособленногоПодразделения, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		МестоРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "МестоРожд", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", МестоРожд);
		Пол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Пол", 1);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", Пол);
		ПризнакГражданства = СведенияПоФизическомуЛицу.ПрГражд;
		Если ПризнакГражданства = "1" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
		Иначе
			Гражданство = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", 
				Справочники.СтраныМира.ПустаяСсылка());
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Гражданство);
		КонецЕсли;

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
			
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);		
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;		
		
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ПризнакГражданства = СведенияПоФизическомуЛицу.ПрГражд;
		Если ПризнакГражданства = "1" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
		Иначе
			Гражданство = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", 
				Справочники.СтраныМира.ПустаяСсылка());
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Гражданство);
		КонецЕсли;

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);		

		ДобавитьСведенияОбУчастникеМЧД(
			СведенияОДоверителе.Подписант[0],
			Перечисления.СубъектыДоверенности.ДоверительРук,
			ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		
		Гражданство = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", 
			Справочники.СтраныМира.ПустаяСсылка());
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Гражданство);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

	КонецЕсли;

	СведенияОбУполномоченномПредставителе = Документ.СвУпПред[0];	
	ТипУполномоченногоПредставителя = СведенияОбУполномоченномПредставителе.ТипПред;
	ТипВладельца = ПредопределенноеЗначение("Перечисление.СубъектыДоверенности.ПредставительФЛ");
	СведенияОПредставителе = СведенияОбУполномоченномПредставителе.СвПред[0];
	
	Если ТипУполномоченногоПредставителя = "ЮЛ" Тогда
		
	    СведенияОрганизации = СведенияОПредставителе.СвОрг;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияОрганизации.НаимОрг);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияОрганизации.ИННЮЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", СведенияОрганизации.КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОрганизации, "ОГРН", "");
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ОГРН);
					
	ИначеЕсли ТипУполномоченногоПредставителя = "ИП" Тогда
			
		СведенияИП = СведенияОПредставителе.СведИП;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияИП.НаимИП);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияИП.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", СведенияИП.ОГРНИП);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияИП.ФИО,
			ТипВладельца,
			ДанныеДоверенности.ФИО); 
		
		СведенияПоФизическомуЛицу = СведенияИП.СведФЛ;	
		Гражданство = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", 
			Справочники.СтраныМира.ПустаяСсылка());
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", Гражданство);
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);			
		
	КонецЕсли;	
	
	СведенияФизЛица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПредставителе, "СведФизЛ", Неопределено);
	
	Если СведенияФизЛица <> Неопределено Тогда
		
		ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);			
				
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
	
		ПризнакГражданства = СведенияПоФизическомуЛицу.ПрГражд;
		
		Если ПризнакГражданства = 1 Тогда
			Гражданство = Справочники.СтраныМира.Россия;
		Иначе
			КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", "");
			Гражданство = ПодготовитьПредставлениеСтраны(КодСтраны);
		КонецЕсли;

		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", Гражданство);
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияФизЛица.ФИО,
			ТипВладельца,
			ДанныеДоверенности.ФИО); 
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ДокументИП = Новый Структура;
			СерияНомерДокумента = СтрРазделить(УдостоверениеЛичности.СерНомДок, " ", Ложь);
			Серия = ?(СерияНомерДокумента.Количество() > 0, СерияНомерДокумента[0], "");
			Номер = ?(СерияНомерДокумента.Количество() > 1, СерияНомерДокумента[1], "");
			ДокументИП.Вставить("СерНомДок", УдостоверениеЛичности.СерНомДок);
			ДокументИП.Вставить("СерДок", Серия);
			ДокументИП.Вставить("НомДок", Номер);
			ДатаДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УдостоверениеЛичности, "ДатаДок", '00010101');
			ДокументИП.Вставить("ДатаДок", ДатаДок);
			ВыдДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УдостоверениеЛичности, "ВыдДок", "");
			ДокументИП.Вставить("ВыдДок", ВыдДок);
			ДокументИП.Вставить("ВидДок", УдостоверениеЛичности.КодВидДок);
			ДокументИП.Вставить("КодВыдДок", УдостоверениеЛичности.КодВыдДок);
			ДокументИП.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОПолномочияхПредставителя = Документ.СвПолн;
	КодыПолномочий = Новый Массив;
	ТекстПолномочий = "";
	
	Для Каждого ПолномочиеПредставителя Из СведенияОПолномочияхПредставителя Цикл
		
		НоваяСтрока = Новый Структура;		
		ПредставлениеВида = СокрЛП(ПолномочиеПредставителя.КодПолн);
		КодыПолномочий.Добавить(ПредставлениеВида);
		
		Если ПредставлениеВида = "99" Тогда
			НоваяСтрока.Вставить("ПризнакПолныеПолномочия", Истина);
		ИначеЕсли СтрДлина(ПредставлениеВида) = 2 
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
			ВидПолномочия = Число(ПредставлениеВида);
			Если ВидПолномочия >= 1 И ВидПолномочия <= КоличествоВидовПолномочийПредставителя() Тогда
				НоваяСтрока.Вставить(ПредставлениеВидаПолномочия(ВидПолномочия), Истина);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДоверенности.ПолномочияПредставителя.Добавить(НоваяСтрока);		
		
		Если ЗначениеЗаполнено(ПолномочиеПредставителя.ТекстПолн) Тогда		
			ТекстПолномочий	= ТекстПолномочий + ПолномочиеПредставителя.ТекстПолн + Символы.ПС;
		КонецЕсли;	
		
	КонецЦикла;
	
	ДанныеДоверенности.Вставить("ТекстПолномочий", ТекстПолномочий);
	ДанныеДоверенности.Вставить("КодПолномочий", СтрСоединить(КодыПолномочий, Символы.ПС));
	
	Представитель = Неопределено;
	Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
			ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
	КонецЕсли;

	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;

	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) Тогда
		Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;

	ДанныеДоверенности.Вставить("Представитель", Представитель);
		 
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
	Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Если Не ЗначениеЗаполнено(ДанныеДоверенности.Представитель) Тогда
		ПредставительПоДаннымДО = ОбменСКонтрагентамиДОСлужебный.ПредставительФЛПоДаннымМЧД(ДанныеДоверенности);
		Если ЗначениеЗаполнено(ПредставительПоДаннымДО) Тогда
			ДанныеДоверенности.Представитель = ПредставительПоДаннымДО;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДоверенности; 

КонецФункции


// Возвращает данные, полученные из файла обмена в пилотном формате.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
// 
// Возвращаемое значение:
//  Структура - Данные из файла обмена.
//
Функция ДанныеИзФайлаОбменаВПилотномФормате(ВходящиеДанные)

	ДанныеДоверенности = Новый Структура;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ДокументОбработки = ПодготовитьДокументDOM(ВходящиеДанные);
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДов");

	Если СведенияДоверенности.Количество() = 1 Тогда

		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаОкон", '00010101'));
		ДанныеДоверенности.Вставить("СрокДействия", ПолучитьЗначениеДокумента(ЭлементВыборки, "СрокДейст", ""));
		ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"СведСистОтм", ""));
		ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"@НомПредДовер", ""));
		ПравоПередоверияСтрока = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПрПередов");
		ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(ПравоПередоверияСтрока = "1", Истина, Ложь));
	КонецЕсли;

	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");

	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/РосОргДовер");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ФЛДовер");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИнОргДовер");

	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	Иначе
		ДанныеДоверенности.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;

	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "@АдрРФ"));

			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@СНИЛС"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Должность"));

			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@НаимОрг"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@КПП"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ОГРН"));

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
					ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
					ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СтрРег",
				Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@НаимРегОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомер"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрСтрРег"));

			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@МестоРожд"));
			ДанныеДоверенности.Вставить(
				"ДоверительФЛ_Пол", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Пол", 1));
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			Иначе
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@ДатаРожд", '00010101'));

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

		КонецЕсли;

	КонецЕсли;

	СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвУпПред");
	Для Каждого СтрокаМассива Из СведенияУполномоченных Цикл
		КодыПолномочий = Новый Массив;
		НоваяСтрока = Новый Структура;
		ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ПрОблПолн");
		Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
			ПредставлениеВида = СокрЛП(ПолномочиеПредставителя.ТекстовоеСодержимое);
			КодыПолномочий.Добавить(ПредставлениеВида);
			Если ПредставлениеВида = "99" Тогда
				НоваяСтрока.Вставить("ПризнакПолныеПолномочия", Истина);
			ИначеЕсли СтрДлина(ПредставлениеВида) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
				ВидПолномочия = Число(ПредставлениеВида);
				Если ВидПолномочия >= 1 И ВидПолномочия <= КоличествоВидовПолномочийПредставителя() Тогда
					НоваяСтрока.Вставить(ПредставлениеВидаПолномочия(ВидПолномочия), Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеДоверенности.ПолномочияПредставителя.Добавить(НоваяСтрока);
		
		ТекстПолномочий = "";
		ВыборкаЭлементовТекстПолномочий = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ТекстПолн");
		Для каждого СтрокаПолномочий Из ВыборкаЭлементовТекстПолномочий Цикл
			ТекстПолномочий	= ТекстПолномочий + СтрокаПолномочий.ТекстовоеСодержимое + Символы.ПС;	
		КонецЦикла;
		ДанныеДоверенности.Вставить("ТекстПолномочий", ТекстПолномочий);
		ДанныеДоверенности.Вставить("КодПолномочий", СтрСоединить(КодыПолномочий, Символы.ПС));

		ТипВладельца = Перечисления.СубъектыДоверенности.ПредставительФЛ;
		ИнформацияОрганизации = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СвОрг");
		Если ИнформацияОрганизации.Количество() > 0 Тогда
			ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@НаимОрг"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@КПП"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ОГРН"));
		КонецЕсли;

		СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СведФизЛ");
		Если СведенияФЛ.Количество() > 0 Тогда
			СведенияФЛ = СведенияФЛ[0];
			ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@ДатаРожд", '00010101'));

			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Фамилия"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Имя"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Отчество"));
			НоваяСтрока.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);

			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВидДок"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
		КонецЕсли;

		Представитель = Неопределено;
		Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") И ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
		КонецЕсли;

		Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) И ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;

		Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) Тогда
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;

		ДанныеДоверенности.Вставить("Представитель", Представитель);

	КонецЦикла;

	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];

		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Фамилия"));
		НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Имя"));
		НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Отчество"));
		Если ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенности.ДоверительФЛ);
		Иначе
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенности.ДоверительРук);
		КонецЕсли;
		ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;

	РезультатПоиска = Неопределено;
	СтруктураПоиска = Новый Структура("ИНН, КПП");
	СтруктураПоиска.ИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	СтруктураПоиска.КПП = РеквизитыПоискаОрганизации.Получить("КПП");
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"Организации", РезультатПоиска, , СтруктураПоиска);
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);

	Возврат ДанныеДоверенности;

КонецФункции

// Отключает проверку подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
Процедура ОтключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи)
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Отбор.ХешПодписи.Установить(ХешПодписи);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет пространство имен файла МЧД по его содержимому.
// 
// Параметры:
//  ДвоичныеДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеМЧД.ОткрытьПотокДляЧтения());
	ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Возврат ВерсияФорматаОбъектаМЧД(ДанныеXDTO);
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок доступа
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокДоступа()
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неавторизованного пользователя'"));
	Результат.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	Возврат Результат;
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок отзыва
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок отзыва:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокОтзыва(НомерДоверенности)
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/not-found",
		СтрШаблон(НСтр("ru = 'Не найдена доверенность с номером ""%1""'"), НомерДоверенности));
	Возврат Результат;
	
КонецФункции

// Возвращает строку, из которой удалены все символы, не являющиеся цифрами
// 
// Параметры:
//  ИсходнаяСтрока - Строка
// 
// Возвращаемое значение:
//  Строка - Строка, состоящая только из цифр
//  
Функция УбратьИзСтрокиВсеНеЦифры(ИсходнаяСтрока)
	
	Результат = "";
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, НомерСимвола, 1);
		Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
			Результат = Результат + ТекущийСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак реестровой МЧД с необходимостью установки признака "Верна" и не требующего перезаполнения
//
//	Параметры:
//	 ДанныеДляПроверки - См.МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//	 ДанныеДоверенности - См. МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена
//
//	Возвращаемое значение:
//	 Булево.
//
Функция ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности) Экспорт
		
	ДоверенностьПодписана = ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи)
							И ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеДоверенности);
	СтатусВРеестреФНС = Неопределено;
	ДанныеДоверенности.Свойство("СтатусВРеестреФНС", СтатусВРеестреФНС);
	ДоверительныеСтатусы = ДоверительныеСтатусыВРеестреФНС();
	
	Возврат ДоверенностьПодписана И ДоверительныеСтатусы.Найти(СтатусВРеестреФНС) <> Неопределено;
	
КонецФункции

// Возвращает признак того что МЧД нуждается в перезаполнении и перепроверки на сервере
//
//	Параметры:
//	 ДанныеОбъектаДляПроверки - См.МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//	 ДанныеДляПроверки - См.МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//
//	Возвращаемое значение:
//	 Булево.
//
Функция ТребуетсяПерезаполнениеМЧД(ДанныеОбъектаДляПроверки, ДанныеДляПроверки) Экспорт
	
	ТребуетсяПерезаполнение = ДанныеОбъектаДляПроверки.ДанныеПодписи <> ДанныеДляПроверки.ДанныеПодписи 
		Или ДанныеОбъектаДляПроверки.ДанныеДоверенности <> ДанныеДляПроверки.ДанныеДоверенности;
	
	Возврат ТребуетсяПерезаполнение;
	
КонецФункции

Функция ДоверительныеСтатусыВРеестреФНС()
	
	ДоверительныеСтатусы = Новый Массив();
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила);
	
	Возврат ДоверительныеСтатусы;
	
КонецФункции

// Формирует пустую структуру данных физ лица.
// 
// Возвращаемое значение:
//  Структура:
// * ДатаРождения 		- Дата
// * ИНН 				- Строка
// * МестоРождения 		- Строка
// * Пол 				- Строка
// * СтраховойНомерПФР 	- Строка
// * ФИО 				- Строка
// * Фамилия 			- Строка
// * Имя 				- Строка
// * Отчество 			- Строка
// * Гражданство 		- СправочникСсылка.СтраныМира
// * КодФНС 			- Строка
// * Серия 				- Строка
// * Номер 				- Строка
// * ДатаВыдачи 		- Дата
// * КемВыдан 			- Строка
// * КодПодразделения 	- Строка
Функция НовыеДанныеФизЛица() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("ДатаРождения", Дата(1, 1, 1));
	Сведения.Вставить("ИНН", "");
	Сведения.Вставить("МестоРождения", "");
	Сведения.Вставить("Пол", "");
	Сведения.Вставить("СтраховойНомерПФР", "");
	Сведения.Вставить("ФИО", "");
	Сведения.Вставить("Фамилия", "");
	Сведения.Вставить("Имя", "");
	Сведения.Вставить("Отчество", "");
	Сведения.Вставить("Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	Сведения.Вставить("КодФНС", "");
	Сведения.Вставить("Серия", "");
	Сведения.Вставить("Номер", "");
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("КемВыдан", "");
	Сведения.Вставить("КодПодразделения", "");
	
	Возврат Сведения;
	
КонецФункции

// Формирует структуру с заполненными данными о физическом лице
//
//	Параметры:
//   ФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//
//	Возвращаемое значение:
//	 см. НовыеДанныеФизЛица
//
Функция ДанныеФизЛица(ФизЛицо) Экспорт
	
	Сведения = НовыеДанныеФизЛица();
	МашиночитаемыеДоверенностиПереопределяемый.ПриИзмененииДанныеФизЛица(ФизЛицо, Сведения);
	
	Возврат Сведения;
	
КонецФункции

// Возвращает представление объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций,
//           СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Строка - Представление объекта
//
Функция ПредставлениеОбъекта(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.НомерДоверенности) Тогда
		ЧастьНомераДоверенности = "*" + Прав(Объект.НомерДоверенности, 4) + " ";
	Иначе
		ЧастьНомераДоверенности = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
		ДатаВыдачиСтрокой = НСтр("ru = 'от'") + " " + Формат(Объект.ДатаВыдачи, "ДЛФ=D;");
	Иначе
		ДатаВыдачиСтрокой = "";
	КонецЕсли;
	
	Представление = ЧастьНомераДоверенности + ДатаВыдачиСтрокой;
	
	Возврат Представление;
	
КонецФункции

// Возвращает сведения о статусах доверенностей.
// 
// Параметры:
//  СправочникМЧД - СправочникМенеджер.МашиночитаемыеДоверенностиКонтрагентов,
//  				СправочникМенеджер.МашиночитаемыеДоверенностиОрганизаций 
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеДоверенности Из ДанныеМЧД Цикл
		
		
		НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
		РезультатСозданияМЧД = СправочникМЧД.НайтиСоздатьМЧД(ДанныеДоверенности);
		СтатусМЧД = НовыеДанныеСтатусаМЧД();
		
		Если РезультатСозданияМЧД.Ошибка Тогда
			
			СтатусМЧД.Ошибка = Истина;
			СтатусМЧД.ОписаниеОшибки = РезультатСозданияМЧД.ОписаниеОшибки;
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
			
		КонецЕсли;

		МЧД = РезультатСозданияМЧД.Ссылка;
		Реквизиты = "Подписана, СтатусВРеестреФНС";
		ДанныеДоверенностиМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
		ЭтоНереестроваяМЧД = ДанныеДоверенностиМЧД.Подписана И НЕ ЗначениеЗаполнено(ДанныеДоверенностиМЧД.СтатусВРеестреФНС);
		
		Если ЭтоНереестроваяМЧД Тогда
			
			СтатусМЧД.Сведения = СправочникМЧД.СведенияМЧД(МЧД);
			
		Иначе
			
			Сведения = ПолучитьСведенияДоверенностиНаСервереМЧД(
				ДанныеДоверенности.НомерДоверенности, ДанныеДоверенности.ИННДоверителя);
			
			Если Сведения = Неопределено ИЛИ ПустаяСтрока(Сведения.ЧастичныеДанные.СтатусДоверенности) Тогда
				
				СтатусМЧД.Ошибка = Истина;
				СтатусМЧД.ОписаниеОшибки = НСтр("ru = 'Ошибка загрузки из реестра'");
				
				Если ЗначениеЗаполнено(МЧД) Тогда
					СтатусМЧД.Сведения = СправочникМЧД.СведенияМЧД(МЧД);
				КонецЕсли; 
				
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				Продолжить;
				
			КонецЕсли;
			
			РезультатЗаполнения = СправочникМЧД.ЗаполнитьМЧД(МЧД, Сведения);
			
			Если РезультатЗаполнения.Ошибка Тогда
				
				СтатусМЧД.Ошибка = Истина;
				СтатусМЧД.ОписаниеОшибки = РезультатЗаполнения.ОписаниеОшибки;
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				Продолжить;
					
			КонецЕсли;
			
			СтатусМЧД.Сведения = РезультатЗаполнения.Сведения;
			СтатусМЧД.ТребуетсяПроверкаМЧДНаКлиенте = РезультатЗаполнения.ТребуетсяПроверкаМЧДНаКлиенте;
			
		КонецЕсли;
		
		Результат.Вставить(НомерДоверенности, СтатусМЧД);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Авторизуется на сервере МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат авторизации:
//   * ТокенДоступа - Строка - Токен доступа
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция АвторизоватьсяНаСервереМЧД()
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.АвторизацияНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_grant",
		НСтр("ru = 'Некорректная авторизация на сервере МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unsupported_grant_type",
		НСтр("ru = 'Некорректный тип авторизации на сервере МЧД распределенного реестра'"));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");

	ПараметрыРесурсаНаСервере = "";
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ТикетАутентификацииИлиДанныеПользователя =
			ИнтеграцияБИПБЭД.ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
		Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
			ТекстОшибкиПоУмолчанию =
			 	НСтр("ru = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС'"); 
			СтруктураОтвета = Новый Структура("ТекстОшибкиПоУмолчанию", ТекстОшибкиПоУмолчанию);
			ВывестиИЗаписатьОшибкуМЧД(Неопределено, , СтруктураОтвета);
			Возврат Результат;
		КонецЕсли;
		
		Если ТикетАутентификацииИлиДанныеПользователя.Свойство("Тикет") Тогда
			Тикет = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Тикет,
				СпособКодированияСтроки.КодировкаURL); 
			ПараметрыРесурсаНаСервере = СтрШаблон("?ticket=%1", Тикет);
		Иначе
			Логин = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Логин,
				СпособКодированияСтроки.КодировкаURL);
			Пароль = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Пароль,
				СпособКодированияСтроки.КодировкаURL);
			ПараметрыРесурсаНаСервере = СтрШаблон("?login=%1&password=%2", Логин, Пароль);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧД.Логин);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧД.Пароль);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗапросJSON = Новый ЗаписьJSON;
		ЗапросJSON.ОткрытьФайл(ИмяФайлаЗапроса, "utf-8");
		ЗаписатьJSON(ЗапросJSON, СтруктураЗапроса);
		ЗапросJSON.Закрыть();
		
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	КонецЕсли;
	
	Попытка
		ОписаниеСоединения = ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервера, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("access_token") Тогда
			Результат.ТокенДоступа = СтруктураОтвета.access_token;
		Иначе
			Результат.ТокенДоступа = "";
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСервераМЧД()
	
	Результат = МашиночитаемыеДоверенностиПовтИсп.СвойстваСервераМЧД();
	
	НачалоПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "://");
	КонецПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "@");
	Если НачалоПараметровАутентификации <> 0 И КонецПараметровАутентификации <> 0 Тогда
		Результат.АдресСервераБезАутентификации =
			Лев(Результат.АдресСервераБезАутентификации, НачалоПараметровАутентификации + 2)
			+ Сред(Результат.АдресСервераБезАутентификации, КонецПараметровАутентификации + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОшибкиHTTP(КодСостояния)
	
	Если КодСостояния < 300 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 300 Тогда
		Возврат НСтр("ru = 'Множественный выбор при отправке ответа сервера'");
	ИначеЕсли КодСостояния = 301 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен'");
	ИначеЕсли КодСостояния = 302 Тогда
		Возврат НСтр("ru = 'Ресурс временно перемещен'");
	ИначеЕсли КодСостояния = 303 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен на другой адрес'");
	ИначеЕсли КодСостояния = 304 Тогда
		Возврат НСтр("ru = 'Неожиданный ответ об отсутствии изменений страницы'");
	ИначеЕсли КодСостояния = 305 Тогда
		Возврат НСтр("ru = 'Для доступа к ресурсу требуется прокси'");
	ИначеЕсли КодСостояния = 306 Тогда
		Возврат НСтр("ru = 'Неиспользуемый код перенаправления запроса'");
	ИначеЕсли КодСостояния = 307 Тогда
		Возврат НСтр("ru = 'Временное перенаправление'");
	ИначеЕсли КодСостояния < 400 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка по перенаправлению запроса с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Неверный формат запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация'");
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат НСтр("ru = 'Требуется оплата'");
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат НСтр("ru = 'Доступ к ресурсу запрещен'");
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат НСтр("ru = 'Запрошенная страница не найдена'");
	ИначеЕсли КодСостояния = 405 Тогда
		Возврат НСтр("ru = 'Используемый метод запрещен'");
	ИначеЕсли КодСостояния = 406 Тогда
		Возврат НСтр("ru = 'Отсутствуют подходящие ответы'");
	ИначеЕсли КодСостояния = 407 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация прокси'");
	ИначеЕсли КодСостояния = 408 Тогда
		Возврат НСтр("ru = 'Лимит времени сервера при ожидании запроса исчерпан'");
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат НСтр("ru = 'Конфликт с текущим состоянием ресурса, требуется больше информации'");
	ИначеЕсли КодСостояния = 410 Тогда
		Возврат НСтр("ru = 'Ресурс более недоступен'");
	ИначеЕсли КодСостояния = 411 Тогда
		Возврат НСтр("ru = 'Требуется задание длины содержимого'");
	ИначеЕсли КодСостояния = 412 Тогда
		Возврат НСтр("ru = 'Ошибочные условия заголовочных полей'");
	ИначеЕсли КодСостояния = 413 Тогда
		Возврат НСтр("ru = 'Слишком большая длина запроса'");
	ИначеЕсли КодСостояния = 414 Тогда
		Возврат НСтр("ru = 'Запрошенный идентификатор слишком велик'");
	ИначеЕсли КодСостояния = 415 Тогда
		Возврат НСтр("ru = 'Неподдерживаемый тип данных запроса'");
	ИначеЕсли КодСостояния = 416 Тогда
		Возврат НСтр("ru = 'Запрошенный промежуток невыполним'");
	ИначеЕсли КодСостояния = 417 Тогда
		Возврат НСтр("ru = 'Несоответствие ожиданиям'");
	ИначеЕсли КодСостояния = 422 Тогда
		Возврат НСтр("ru = 'Необрабатываемый объект'");
	ИначеЕсли КодСостояния = 423 Тогда
		Возврат НСтр("ru = 'Заблокировано'");
	ИначеЕсли КодСостояния = 424 Тогда
		Возврат НСтр("ru = 'Сбой взаимосвязанного вызова'");
	ИначеЕсли КодСостояния = 449 Тогда
		Возврат НСтр("ru = 'Возврат запроса после необходимого действия'");
	ИначеЕсли КодСостояния < 500 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка клиента с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат НСтр("ru = 'Внутренняя ошибка сервера'");
	ИначеЕсли КодСостояния = 501 Тогда
		Возврат НСтр("ru = 'Процесс для данного запроса не поддерживается сервером'");
	ИначеЕсли КодСостояния = 502 Тогда
		Возврат НСтр("ru = 'Gateway-сервер получил ошибочный ответ'");
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат НСтр("ru = 'Сервер временно недоступен'");
	ИначеЕсли КодСостояния = 504 Тогда
		Возврат НСтр("ru = 'Превышено время ожидание ответа на запрос Gateway-сервера'");
	ИначеЕсли КодСостояния = 505 Тогда
		Возврат НСтр("ru = 'Версия HTTP не поддерживается сервером'");
	ИначеЕсли КодСостояния = 506 Тогда
		Возврат НСтр("ru = 'Вариантный тип содержит также вариант'");
	ИначеЕсли КодСостояния = 507 Тогда
		Возврат НСтр("ru = 'Переполнение хранилища'");
	ИначеЕсли КодСостояния = 510 Тогда
		Возврат НСтр("ru = 'Отсутствует поддержка расширений'");
	ИначеЕсли КодСостояния < 600 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка сервера с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 999 Тогда
		Возврат НСтр("ru = 'Разрушительный сбой сервера'");
	Иначе
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	КонецЕсли;

КонецФункции

Функция СтруктураШаблоновОшибокМЧД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстОшибкиПоУмолчанию", 		"");
	Результат.Вставить("ШаблонОшибкиИзИсключения", 		"");
	Результат.Вставить("ШаблонОшибкиДляКодаСостояния", 	"");
	Результат.Вставить("ШаблонОшибкиИзОтвета", 			"");
	Результат.Вставить("ШаблоныДляКодовОшибок", 		Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиИЗаписатьОшибкуМЧД(
		ШаблоныОшибок,
		ОтветHTTP = Неопределено,
		СтруктураОтвета = Неопределено,
		РежимВыводаИЗаписи = "")
	
	ШаблоныОшибокВызова = СтруктураШаблоновОшибокМЧД();
	Если ШаблоныОшибок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныОшибокВызова, ШаблоныОшибок);
	КонецЕсли;
	
	КодОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("type"),
		СтруктураОтвета.type, "");
	ЗаголовокОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
		СтруктураОтвета.title, "");
	ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("detail"),
		СтруктураОтвета.detail, "");
	
	Если ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки]) Тогда
		
		ТекстОшибки = ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки];
		
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокОшибки) ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(
			ШаблоныОшибокВызова.ШаблонОшибкиИзОтвета,
			ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "") + ТекстОшибки);
		
	Иначе
		ТекстОшибки = ?(ОтветHTTP = Неопределено, "", ОписаниеОшибкиHTTP(ОтветHTTP.КодСостояния));
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиДляКодаСостояния,
				ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			ТекстОшибки = ШаблоныОшибокВызова.ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоЗаписатьВЖурналРегистрации" Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоВывестиОшибку" Тогда
		ИмяСобытия = НСтр("ru = 'Машиночитаемые доверенности'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИспользуетсяРежимТестирования()
	Возврат МашиночитаемыеДоверенностиПовтИсп.ИспользуетсяРежимТестирования();
КонецФункции

Функция СтатусыДействительнойДоверенности()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	
	Возврат Статусы;
	
КонецФункции

Процедура ОбластьПолномочийТабличногоДокументаМЧД(СтруктураДанных, ТабличныйДокумент, ОбластьПереченьПолномочий)
	
	Если СтруктураДанных.Свойство("ТекстПолномочий") И СтруктураДанных.ТекстПолномочий <> "" Тогда
		ПереченьПолномочийПредставление = СтруктураДанных.ТекстПолномочий;
	Иначе
		Если СтруктураДанных.КодПолномочий = "99" Тогда 
			ПереченьПолномочийПредставление = "Все";
		ИначеЕсли  СтруктураДанных.КодПолномочий = "00" Тогда
		  	ПереченьПолномочийПредставление = "";
		Иначе
			МассивПолномочий = СтрРазделить(СтруктураДанных.КодПолномочий, Символы.ПС, Ложь);
			ПолномочияСтрокой = "";
			Для Каждого Строка Из МассивПолномочий Цикл
				Если МассивПолномочий.Найти(Строка) + 1 =  МассивПолномочий.Количество() Тогда
					ПолномочияСтрокой = ПолномочияСтрокой + Прав(Строка, 2) + ".";		
				Иначе
					ПолномочияСтрокой = ПолномочияСтрокой + Прав(Строка, 2) + ", ";
				КонецЕсли;
			КонецЦикла;
			ПереченьПолномочийПредставление = ПолномочияСтрокой;	
		КонецЕсли;		
	КонецЕсли;
	ОбластьПереченьПолномочий.Параметры.ПереченьПолномочий = ПереченьПолномочийПредставление;
	ТабличныйДокумент.Вывести(ОбластьПереченьПолномочий);
	
КонецПроцедуры	

// Полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  Ссылка 	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 	- ссылка на доверенность.
//  		- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов	- ссылка на доверенность.
//  Отказ - Булево - Отказ
// 
// Возвращаемое значение:
//  Неопределено, ДвоичныеДанные - Полные данные доверенности на сервере МЧД
Функция ПолныеДанныеДоверенностиНаСервереМЧД(Ссылка) Экспорт
	
	ДвоичныеДанные = Неопределено; 
	Если ТипЗнч(Ссылка.XMLфайлМЧД) <> Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = Ссылка.XMLфайлМЧД.Получить();
	Иначе
		ДвоичныеДанные = Ссылка.XMLфайлМЧД;
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда

		ДоверительИНН = "";
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
			ДоверительИНН = ?(ЗначениеЗаполнено(Ссылка.ДоверительЮЛ_ИНН), Ссылка.ДоверительЮЛ_ИНН,
				Ссылка.ДоверительФЛ_ИНН);
		Иначе
			ДоверительИНН = Ссылка.ДоверительИНН;
		КонецЕсли;

		СведенияДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
			Ссылка.НомерДоверенности, ДоверительИНН);

		Если СведенияДоверенности.СтатусПолучения = "PENDING" Тогда
			ТекстСообщения = НСтр(
				"ru = 'Запрос данных доверенности отправлен успешно, повторите попытку загрузки через несколько минут'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СведенияДоверенности.ДанныеВыгрузки) Тогда
			Возврат Неопределено;
		КонецЕсли;

		ДвоичныеДанные = СведенияДоверенности.ДанныеВыгрузки;

		Если ДвоичныеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Просмотр карточки МЧД невозможен. 
								  |Отсутствует прикрепленный xml файл доверенности. Доверенность
								  |должна быть подписана и отправлена или загружена из реестра.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;

	Возврат ДвоичныеДанные;

КонецФункции

Функция ПолучитьПредставлениеФИО(СтрокаФИО)

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаФИО.Фамилия) Тогда
		Представление = СтрокаФИО.Фамилия;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Имя) Тогда
		Представление = Представление + " " + СтрокаФИО.Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Отчество) Тогда
		Представление = Представление + " " + СтрокаФИО.Отчество;
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения)

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаУдостоверения.ВидДок) Тогда
		ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
		Представление = ВидыДокументов.Получить(СтрокаУдостоверения.ВидДок);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.СерДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.СерДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.НомДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.НомДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.ДатаДок) Тогда
		Представление = Представление + " " + НСтр("ru = 'выдан'") + " " + Формат(СтрокаУдостоверения.ДатаДок, "ДЛФ=ДД");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.ВыдДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.ВыдДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.КодВыдДок) Тогда
		Представление = Представление + ", " + НСтр("ru = 'код подразделения'") + ":" + СтрокаУдостоверения.КодВыдДок;
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Возвращает новые общие свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - Строка
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * Доверитель - Строка
//  * ИННДоверителя - Строка
//  * Представитель - Строка
//  * ИННПредставителя - Строка
//  * Верна - Булево
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  
Функция НовыеОбщиеСвойстваДоверенности()
	Свойства = Новый Структура;
	Свойства.Вставить("НомерДоверенности", "");
	Свойства.Вставить("ДатаВыдачи", '00010101');
	Свойства.Вставить("ДатаОкончания", '00010101');
	Свойства.Вставить("Доверитель", "");
	Свойства.Вставить("ДоверительИНН", "");
	Свойства.Вставить("Представитель", "");
	Свойства.Вставить("ПредставительИНН", "");
	Свойства.Вставить("Верна", Ложь);
	Свойства.Вставить("Отозвана", Ложь);
	Свойства.Вставить("ДатаОтзыва", '00010101');
	Свойства.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Возврат Свойства;
КонецФункции

#Область ПроверкаПодписи

// Возвращает новый результат проверки.
// 
// Возвращаемое значение:
//  Структура - Новый результат проверки:
// * Выполнено - Булево
// * ДатаПроверки - Дата
// * Успех - Булево
// * Ошибка - Строка
Функция НовыйРезультатПроверки()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Выполнено", Ложь);
	РезультатПроверки.Вставить("ДатаПроверки", '00010101');
	РезультатПроверки.Вставить("Успех", Ложь);
	РезультатПроверки.Вставить("Ошибка", "");
	
	Возврат РезультатПроверки;
	
КонецФункции

// Новый протокол проверки МЧД.
// 
// Возвращаемое значение:
//  Структура - Новый протокол проверки МЧД:
// * Выполнена - Булево
// * ОшибкаВыполнения - Строка
// * ПроверкаПодписиМЧД 	 - НовыйРезультатПроверки
// 							 - Неопределено - если проверка не требуется
// * ПроверкаОтзываМЧД		 - см. НовыйРезультатПроверки
// 							 - Неопределено - если проверка не требуется
// * ПроверкаОператором 	 - см. НовыйРезультатПроверки
// 							 - Неопределено - если нет данных проверки оператором
// * СопоставлениеПредставителя - см. НовыйРезультатПроверки
// 								- Неопределено - если проверка не требуется
// * СопоставлениеДоверителя - см. НовыйРезультатПроверки
// 							 - Неопределено - если проверка не требуется
// * ПроверкаПериодаДействия - см. НовыйРезультатПроверки,
// 							 - Неопределено - если проверка не требуется
// * ПроверкаСтатусаВРеестреФНС	- см. НовыйРезультатПроверки,
// 							 	- Неопределено - если проверка не требуется
Функция НовыйПротоколПроверкиМЧД()
	
	ПротоколПроверкиМЧД = Новый Структура;
	ПротоколПроверкиМЧД.Вставить("Выполнена", Ложь);
	ПротоколПроверкиМЧД.Вставить("ОшибкаВыполнения", "");
	ПротоколПроверкиМЧД.Вставить("ПроверкаПодписиМЧД", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаОтзываМЧД", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаОператором", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("СопоставлениеПредставителя", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("СопоставлениеДоверителя", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаПериодаДействия", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаСтатусаВРеестреФНС", НовыйРезультатПроверки());
	
	Возврат ПротоколПроверкиМЧД;
	
КонецФункции

// Новый протокол проверки подписи.
// 
// Возвращаемое значение:
//  Структура - Новый протокол проверки подписи:
// * ВерсияПротокола - Строка
// * ПроверкаПодписиДокумента - см. НовыйРезультатПроверки
// * ПроверкаМЧД - см. НовыйПротоколПроверкиМЧД
Функция НовыйПротоколПроверкиПодписи()
	Протокол = Новый Структура;
	Протокол.Вставить("ВерсияПротокола", "2.0");
	Протокол.Вставить("ПроверкаПодписиДокумента", НовыйРезультатПроверки());
	Протокол.Вставить("ПроверкаМЧД", НовыйПротоколПроверкиМЧД());
	Возврат Протокол;
КонецФункции

// Заполняет протокол проверки доверенности.
// 
// Параметры:
//  ПроверкаДоверенности - См. НовыйПротоколПроверкиМЧД
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
//  ИННПредставителя - Строка
//  ДатаПодписи - Дата
Процедура ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя, ДатаПодписи)
	
	ПроверкаДоверенности.Выполнена = Истина;
	ДатаПроверки = ТекущаяДатаСеанса();
	СведенияМЧД = ПараметрыПроверки.СведенияМЧД;
	ДатаПроверки = СведенияМЧД.ДатаПолученияСведений;
	
	ПроверкаПодписиМЧД = ПроверкаДоверенности.ПроверкаПодписиМЧД;
	ПроверкаПодписиМЧД.Выполнено = Истина;
	ПроверкаПодписиМЧД.ДатаПроверки = ДатаПроверки;
	ПроверкаПодписиМЧД.Успех = СведенияМЧД.Верна;
	Если НЕ ПроверкаПодписиМЧД.Успех Тогда
		ПроверкаПодписиМЧД.Ошибка = НСтр("ru='Подпись доверенности не верифицирована'");
	КонецЕсли;
	
	ПроверкаОтзываМЧД = ПроверкаДоверенности.ПроверкаОтзываМЧД;
	ПроверкаОтзываМЧД.Выполнено = Истина;
	ПроверкаОтзываМЧД.ДатаПроверки = ДатаПроверки;
	ПроверкаОтзываМЧД.Успех = НЕ (СведенияМЧД.Отозвана И СведенияМЧД.ДатаОтзыва <= НачалоДня(ДатаПроверки));
	
	Если ПроверкаОтзываМЧД.Успех Тогда
		Если ЗначениеЗаполнено(СведенияМЧД.ДатаОтзыва) 
			И СведенияМЧД.ДатаОтзыва < ДатаПодписи Тогда
				ПроверкаОтзываМЧД.Успех = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверкаОтзываМЧД.Успех Тогда
		ПроверкаОтзываМЧД.Ошибка = СтрШаблон(НСтр("ru='Доверенность отозвана %1'"), СведенияМЧД.ДатаОтзыва);
	КонецЕсли;

	ПроверкаОператором = ПараметрыПроверки.ПроверкаОператором;
	Если ЗначениеЗаполнено(ПроверкаОператором) И ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС) Тогда
		Проверка = ПроверкаДоверенности.ПроверкаОператором;
		Проверка.Выполнено = Истина;
		Проверка.ДатаПроверки = ДатаПроверки;
		Проверка.Успех = ПроверкаОператором.ДоверенностьДействительна;
		Если ПроверкаОператором.ДоверенностьДействительна Тогда
			Проверка.Ошибка = ПроверкаОператором.ДоверенностьДействительнаОшибка
		КонецЕсли; 
	Иначе
		ПроверкаДоверенности.ПроверкаОператором = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС) Тогда
		ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС = Неопределено
	Иначе
		
		ПроверкаСтатусаВРеестреФНС = ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС;
		ПроверкаСтатусаВРеестреФНС.Выполнено = Истина;
		ПроверкаСтатусаВРеестреФНС.ДатаПроверки = ДатаПроверки;
		ПроверкаСтатусаВРеестреФНС.Успех =
			СтатусыДействительнойДоверенности().Найти(СведенияМЧД.СтатусВРеестреФНС) <> Неопределено;

		Если ЗначениеЗаполнено(СведенияМЧД.ДатаОтзыва) 
			И СведенияМЧД.ДатаОтзыва > ДатаПодписи Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Истина;
		КонецЕсли;

		Если НЕ ПроверкаСтатусаВРеестреФНС.Успех Тогда
			ПроверкаСтатусаВРеестреФНС.Ошибка =
				СтрШаблон(НСтр("ru = 'Доверенность недействительна. Текущий статус: %1'"),
					СведенияМЧД.СтатусВРеестреФНС);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Ложь;
			ПроверкаСтатусаВРеестреФНС.Ошибка = ПараметрыПроверки.ТекстОшибки;	
		КонецЕсли;
		
	КонецЕсли;

	СопоставлениеДоверителя = ПроверкаДоверенности.СопоставлениеДоверителя;
	СопоставлениеДоверителя.Выполнено = Истина;
	СопоставлениеДоверителя.ДатаПроверки = ДатаПроверки;
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.ИННДоверителя) Тогда
		СопоставлениеДоверителя.Успех = Ложь;				
		СопоставлениеДоверителя.Ошибка = ПараметрыПроверки.ТекстОшибки; 
	ИначеЕсли СведенияМЧД.ИННДоверителя = ПараметрыПроверки.ИННДоверителя Тогда
		СопоставлениеДоверителя.Успех = Истина;
	Иначе
		СопоставлениеДоверителя.Успех = Ложь;
		СопоставлениеДоверителя.Ошибка = 
			СтрШаблон(НСтр("ru = 'ИНН %1 доверителя не соответствует ИНН %2 в содержании электронного документа.'"),
				СведенияМЧД.ИННПредставителя, ПараметрыПроверки.ИННДоверителя);
	КонецЕсли;
	
	СопоставлениеПредставителя = ПроверкаДоверенности.СопоставлениеПредставителя;
	СопоставлениеПредставителя.Выполнено = Истина;
	СопоставлениеДоверителя.ДатаПроверки = ДатаПроверки;
	Если Не ЗначениеЗаполнено(ИННПредставителя) Тогда
		СопоставлениеПредставителя.Успех = Ложь;
		СопоставлениеПредставителя.Ошибка = ПараметрыПроверки.ТекстОшибки;
	ИначеЕсли СведенияМЧД.ИННПредставителя = ИННПредставителя Тогда
		СопоставлениеПредставителя.Успех = Истина;
	Иначе
		СопоставлениеПредставителя.Успех = Ложь;
		СопоставлениеПредставителя.Ошибка = СтрШаблон(
			НСтр("ru = 'ИНН %1 представителя по доверенности не соответствует ИНН %2 владельца электронной подписи.'"),
				СведенияМЧД.ИННПредставителя, ИННПредставителя);
	КонецЕсли;
	
	ПроверкаПериодаДействия = ПроверкаДоверенности.ПроверкаПериодаДействия;
	ПроверкаПериодаДействия.Выполнено = Истина;
	ПроверкаПериодаДействия.ДатаПроверки = ДатаПроверки;
	ДатаПодписиНачалоДня = НачалоДня(ДатаПодписи);
	ПроверкаПериодаДействия.Успех = ДатаПодписиНачалоДня >= НачалоДня(СведенияМЧД.ДатаВыдачи)
									И ДатаПодписиНачалоДня <= НачалоДня(СведенияМЧД.ДатаОкончания);
	Если НЕ ПроверкаПериодаДействия.Успех Тогда
		ПроверкаПериодаДействия.Ошибка =
			НСтр("ru = 'Дата подписи документа не соответствует периоду действия доверенности.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикОбновления

// Удаляет устаревшие записи регистра "Результаты проверки МЧД оператором".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраРезультатыПроверкиМЧДОператором(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыПроверкиМЧДОператором.ПодписанныйОбъект,
		|	РезультатыПроверкиМЧДОператором.Отпечаток
		|ИЗ
		|	РегистрСведений.МашиночитаемыеДоверенностиЭД КАК МашиночитаемыеДоверенностиЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧДОператором
		|		ПО МашиночитаемыеДоверенностиЭД.ЭлектронныйДокумент = РезультатыПроверкиМЧДОператором.ПодписанныйОбъект
		|ГДЕ
		|	МашиночитаемыеДоверенностиЭД.МЧД = &МЧД";
	
	Запрос.УстановитьПараметр("МЧД", Доверенность);
	ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрыСведений.РезультатыПроверкиМЧДОператором);
	
КонецПроцедуры

// Удаляет устаревшие записи регистра "Машиночитаемые доверенности электронных документов".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраМашиночитаемыеДоверенностиЭД(Доверенность)
	
	НаборЗаписей = РегистрыСведений.МашиночитаемыеДоверенностиЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МЧД.Установить(Доверенность);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет устаревшие записи регистра "Электронные подписи по МЧД".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраЭлектронныеПодписиПоМЧД(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.Доверенность = &Доверенность";
	
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрыСведений.ЭлектронныеПодписиПоМЧД);
	
КонецПроцедуры

// Проверить необходимость удаления доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  Удалить - Булево
Процедура ОбработатьДанные_ПроверитьНеобходимостьУдаленияДоверенности(Доверенность, Удалить)
	
	Если Не ЗначениеЗаполнено(Доверенность.ДатаСоздания) Тогда
		Удалить = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет набор записей регистра сведений, полученный запросом.
// 
// Параметры:
//  Запрос - Запрос - текст запроса должен содержать все измерения регистра в выбираемых полях.
//  РегистрСведенийМенеджер - РегистрСведенийМенеджер.РезультатыПроверкиМЧДОператором
//                          - РегистрСведенийМенеджер.ЭлектронныеПодписиПоМЧД
Процедура ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрСведенийМенеджер)
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			НаборЗаписей.Отбор[Колонка.Имя].Установить(ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			НаборЗаписей.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Вызывается после подписания доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДанныеВыгрузки - ДвоичныеДанные - доверенность в формате xml.
//  СвойстваПодписи - Структура - одноименная структура, полученная в результате выполнения
//                    метода см. ЭлектроннаяПодписьКлиент.Подписать.
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Истина, если требуется проверить МЧД на клиенте.
//
Процедура ВыполнитьДействияПослеПодписания(Доверенность, ДанныеВыгрузки, СвойстваПодписи, 
		ТребуетсяПроверкаМЧДНаКлиенте = Ложь) Экспорт
	
	ИмяФайлаМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Доверенность);
	ОбъектДоверенность = Доверенность.ПолучитьОбъект();
	ОбъектДоверенность.ИмяФайлаВыгрузка = ИмяФайлаМЧД + ".xml";
	ОбъектДоверенность.XMLфайлМЧД = Новый ХранилищеЗначения(ДанныеВыгрузки, Новый СжатиеДанных(9));
	ОбъектДоверенность.ДатаПодписания = СвойстваПодписи.ДатаПодписи;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеВыгрузки;
	ДанныеДляПроверки.ДанныеПодписи = СвойстваПодписи.Подпись;
	
	РезультатПроверкиПодписи = Новый Структура;
	
	ЗаполнитьПодписанаВерна(ОбъектДоверенность, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте); 
	
	ОбъектДоверенность.Записать();
	ОбъектДоверенность.Разблокировать();

КонецПроцедуры

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителей(ДанныеДоверенности)
	
	Если ВерсияФорматаФайлаМЧД(ДанныеДоверенности) = ФорматМЧД_2022() Тогда
		Возврат ИННДоверителейВУтвержденномФормате(ДанныеДоверенности);
	Иначе
		Возврат ИННДоверителейВПилотномФормате(ДанныеДоверенности);	
	КонецЕсли;
		
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в пилотном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителейВПилотномФормате(ДанныеДоверенности)
	
	Поток = ДанныеДоверенности.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "СвДоверит"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Возврат НайтиИННДоверителей(ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Поток.Закрыть();
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в утвержденном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителейВУтвержденномФормате(ДанныеДоверенности)
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	
	Доверенность = ДанныеИзФайлаОбменаВУтвержденномФормате(ДанныеДоверенности);
	
	Если Доверенность.ТипОрганизации = "ЮЛ" Тогда
		Результат.ИННФЛ = Доверенность.ЛицоБезДовФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ИО" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ИП" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ФЛ" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Результат.ИННФЛ;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает значение атрибутов ИННФЛ, ИННЮЛ.
// 
// Параметры:
//  ЧтениеXML - ЧтениеXML
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка, 
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция НайтиИННДоверителей(ЧтениеXML) 
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	
	СведенияОДоверителе = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоСведенияОДоверителе = ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И (ЧтениеXML.Имя = "РосОргДовер" Или ЧтениеXML.Имя = "ИнОргДовер" Или ЧтениеXML.Имя = "ФЛДовер");
			
		Если ЭтоСведенияОДоверителе Тогда
			СведенияОДоверителе = ЧтениеXML.Имя;
		КонецЕсли;
		
		Если СведенияОДоверителе = "РосОргДовер" Тогда
			
			ИННЮЛ = ЧтениеXML.ЗначениеАтрибута("ИННЮЛ");
			ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвФЛ", "ИННФЛ");
			
		ИначеЕсли СведенияОДоверителе = "ИнОргДовер" Тогда
			
			ИННЮЛ = ЧтениеXML.ЗначениеАтрибута("ИННЮЛ");
			ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвРукОП", "ИННФЛ");
			
		ИначеЕсли СведенияОДоверителе = "ФЛДовер" Тогда
			
			ИННФЛ = ЧтениеXML.ЗначениеАтрибута("ИННФЛ");
			ИННЮЛ = ИННФЛ;
			
		КонецЕсли;
		
		Если ЭтоСведенияОДоверителе Тогда
			Результат.ИННФЛ = ИННФЛ;
			Результат.ИННЮЛ = ИННЮЛ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат выгрузки неподписанной доверенности.
// 
// Параметры:
//  РезультатВыгрузки - Структура:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево
// * ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево
// * ТекстОшибки - Строка
Функция РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки)
	
	РезультатВыгрузки.Ошибка = Истина;
	РезультатВыгрузки.ТекстОшибки = НСтр("ru = 'Выгружать в файл можно только подписанные доверенности. Подпишите и повторите выгрузку.'");
	Возврат РезультатВыгрузки;
	
КонецФункции

// Проверяет, действительна ли доверенность.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительна(Ссылка, ДатаПроверки) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ДатаВыдачи, ДатаОкончания, Отозвана, ДатаОтзыва, СтатусВРеестреФНС, Верна");
	СвойстваДоверенности = НовыеСвойстваДоверенности();
	ЗаполнитьЗначенияСвойств(СвойстваДоверенности, ЗначенияРеквизитов);
	
	Возврат ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДатаПроверки);
	
КонецФункции

// Возвращает количество видов полномочий представителя МЧД.
// 
// Возвращаемое значение:
//  Число
Функция КоличествоВидовПолномочийПредставителя()
	
	Возврат 25;
	
КонецФункции

// Возвращает представление вида полномочия представителя МЧД.
// 
// Возвращаемое значение:
//  Строка - Представление вида
Функция ПредставлениеВидаПолномочия(ВидПолномочия)
	
	Возврат "Признак" + ВидПолномочияСтрокой(ВидПолномочия);
	
КонецФункции

// Возвращает вид полномочия представителя МЧД по формату строки.
// 
// Возвращаемое значение:
//  Строка - Представление вида
Функция ВидПолномочияСтрокой(ВидПолномочия)
	
	Возврат Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
	
КонецФункции

// Проверяет, является ли сертификат сертификатом должностного лица казначейства.
// 
// Параметры:
//  Сертификат - СертификатКриптографии
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСертификатДолжностногоЛицаКазначейства(Сертификат)
	
	Если Сертификат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(Сертификат);
	
	Возврат МашиночитаемыеДоверенностиКлиентСервер.ЭтоСертификатДолжностногоЛицаКазначейства(
		СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	
КонецФункции

#Область ПроверкаДоверенности

// Проверяет корректность оформления доверенности.
// 
// Параметры:
//  ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатПроверкиДоверенности
Функция ПроверитьДоверенность(ДанныеДляПроверки, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатПроверкиПодписи = КриптографияБЭД.ПроверитьПодпись(Неопределено, ДанныеДляПроверки.ДанныеДоверенности,
		ДанныеДляПроверки.ДанныеПодписи, КонтекстДиагностики);
	
	Возврат РезультатПроверкиДоверенности(ДанныеДляПроверки.ДанныеДоверенности, РезультатПроверкиПодписи,
		КонтекстДиагностики);
	
КонецФункции

// Возвращает результат проверки доверенности.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные
//  РезультатПроверкиПодписи - см. КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//    * Результат - Булево - Истина, если доверенность оформлена верно.
//    * ТекстОшибки - Строка - свойство заполнено, если Результат - Ложь.
//    * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция РезультатПроверкиДоверенности(ДанныеДоверенности, РезультатПроверкиПодписи, КонтекстДиагностики) Экспорт
	
	СоответствуетФормату = Ложь;
	ИННПодписантаФЛ = "";
	ИННПодписантаЮЛ = "";
	ИННИздателяСертификата = "";
	Сертификат = Неопределено;
	СвойстваСубъектаСертификата = Неопределено;
	СвойстваИздателяСертификата = Неопределено;
	Ошибки = Новый Массив;
	
	ИННДоверителей = ИННДоверителей(ДанныеДоверенности);
	
	ИННДоверителяФЛ = ИННДоверителей.ИННФЛ;
	ИННДоверителяЮЛ = ИННДоверителей.ИННЮЛ;
	
	СвойстваПодписи = РезультатПроверкиПодписи.СвойстваПодписи;
	Если СвойстваПодписи.Сертификат <> Неопределено Тогда
		Сертификат = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		СвойстваСубъектаСертификата = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
		
		ИННПодписантаФЛ = СвойстваСубъектаСертификата.ИНН;
		ИННПодписантаЮЛ = СвойстваСубъектаСертификата.ИННЮЛ;
	КонецЕсли;
	
	ПодписьВерна = РезультатПроверкиПодписи.СвойстваПодписи.ПодписьВерна;
	Если РезультатПроверкиПодписи.ОписаниеОшибки = "" Тогда
		СертификатДействителен = Истина;
	Иначе
		СертификатДействителен = Ложь;
		Ошибки.Добавить(РезультатПроверкиПодписи.ОписаниеОшибки);
	КонецЕсли;
	
	Попытка
		ПрочитатьДанныеXML(ДанныеДоверенности);
		СоответствуетФормату = Истина;
	Исключение
		ВидОперации = НСтр("ru = 'Проверка машиночитаемой доверенности.'");
		ТекстОшибки = НСтр("ru = 'Ошибка проверки файла доверенности: файл не соответствует формату ФНС.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		
		ТекстОшибки = НСтр("ru = 'Доверенность не соответствует формату ФНС.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецПопытки;
	
	ДоверенностьПодписанаДоверителем = ИННПодписантаФЛ = ИННДоверителяФЛ;
	Если Не ДоверенностьПодписанаДоверителем И ЗначениеЗаполнено(ИННПодписантаФЛ)
		И ЗначениеЗаполнено(ИННДоверителяФЛ) Тогда
		ТекстОшибки = НСтр("ru = 'Доверенность подписана лицом, которое не является доверителем по данной доверенности.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ДоверенностьВыданаКазначейством = МашиночитаемыеДоверенностиКлиентСервер.ЭтоИННКазначейства(ИННДоверителяЮЛ);
	ЭтоДоверенностьОтИП = ИННДоверителяФЛ = ИННДоверителяЮЛ;
	ДоверительЯвляетсяУполномоченнымПредставителемОрганизации =
		ЭтоДоверенностьОтИП
		ИЛИ (ИННПодписантаЮЛ = ИННДоверителяЮЛ)
		Или (ДоверенностьВыданаКазначейством
		И ЭтоСертификатДолжностногоЛицаКазначейства(Сертификат));
		
	Если Не ДоверительЯвляетсяУполномоченнымПредставителемОрганизации Тогда
		ТекстОшибки = НСтр("ru = 'Доверенность подписана лицом, которое не является уполномоченным представителем организации.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Результат = ПодписьВерна И СертификатДействителен И ДоверенностьПодписанаДоверителем
		И ДоверительЯвляетсяУполномоченнымПредставителемОрганизации И СоответствуетФормату;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Результат", Результат);
	РезультатПроверки.Вставить("ТекстОшибки", СтрСоединить(Ошибки, Символы.ПС));
	РезультатПроверки.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
