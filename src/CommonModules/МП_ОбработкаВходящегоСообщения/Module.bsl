///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Читает и обрабатывает данные СообщенияИнтегрированныхСистем.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.ПользователиМобильныхПриложений
//  Сообщение - СправочникСсылка.СообщенияИнтегрированныхСистем
// 
// Возвращаемое значение:
//  Булево - Истина, если обработка завершена без ошибок.
//
Процедура ЗаписатьИОбработатьВходящиеСообщения(МобильноеПриложение, СтруктурыВходящихСообщений,
	ПараметрыСинхронизации) Экспорт
	
	// Помещение сообщения от клиента во входящую очередь для последующей обработки в фоновом задании.
	Для каждого СтруктураВходящегоСообщения Из СтруктурыВходящихСообщений Цикл
		МП_Служебный.ЗаписатьВходящееСообщение(МобильноеПриложение, СтруктураВходящегоСообщения);
	КонецЦикла;
	
	Сообщения = ОбменСМобильнымиСервер.ПолучитьВходящиеНеобработанныеСообщения(МобильноеПриложение);
	
	Для каждого Сообщение Из Сообщения Цикл
		Данные = МП_СлужебныйПовтИсп.ДанныеСообщения(Сообщение);
		
		Если Данные = Неопределено 
			Или ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СвязиКУстановке = Новый Массив;
		
		ПисьмаКОтправке = Новый Массив;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		Данные.Записать(ИмяВременногоФайла);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
		
		Попытка
			
			ОбъектыКОбработке = ПрочитатьJSON(ЧтениеJSON);
			
			Для каждого ОбъектКОбработке Из ОбъектыКОбработке Цикл
				
				Попытка
					
					МП_ОбработкаВходящегоСообщения.ОбработатьДанныеОбъекта(ОбъектКОбработке, ПараметрыСинхронизации,
						СвязиКУстановке, ПисьмаКОтправке);
					
				Исключение
					
					Инфо = ИнформацияОбОшибке();
					
					Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
						
						МП_Служебный.ПометитьСообщениеОбработанным(Сообщение);
						
						ВызватьИсключение;
						
					КонецЕсли;
					
					Если СтрНайти(НРег(Инфо.Описание), "info:") > 0 Тогда
						
						РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
							Инфо.Описание, Ложь, МобильноеПриложение);
						
					КонецЕсли;
						
					Если СтрНайти(НРег(Инфо.Описание), "warning:") > 0 Тогда
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Предупреждение'", Метаданные.ОсновнойЯзык.КодЯзыка),
							УровеньЖурналаРегистрации.Предупреждение, ,Строка(МобильноеПриложение),
							ПодробноеПредставлениеОшибки(Инфо));
						МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, Инфо);
						
					Иначе
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Ошибка'", Метаданные.ОсновнойЯзык.КодЯзыка),
							УровеньЖурналаРегистрации.Ошибка, ,Строка(МобильноеПриложение),
							ПодробноеПредставлениеОшибки(Инфо));
						МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, Инфо);
						
					КонецЕсли;
					
				КонецПопытки; 
				
			КонецЦикла;
			
			МП_ОбработкаВходящегоСообщения.УстановкаСвязейПисем(МобильноеПриложение, СвязиКУстановке);
			
			МП_ОбработкаВходящегоСообщения.ЗафиксироватьПисьмаКОтправке(МобильноеПриложение, ПисьмаКОтправке);
			
			МП_Служебный.ПометитьСообщениеОбработанным(Сообщение);
			
			ЧтениеJSON.Закрыть();
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			
			ЧтениеJSON.Закрыть();
			
			УдалитьФайлы(ИмяВременногоФайла);
			
			ВызватьИсключение Инфо.Описание;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку одного объекта .
//
// Параметры:
//  ДанныеОбъекта			 - Структура - Прочитанные данные объекта который нужно обработать;
//  ПисьмаКОтправке			 - Массив - Массив ссылок на письма, которые необходимо отправить после обработки всех XDTO сообщения;
//  СвязиКУстановке			 - Массив - Массив связей которые нужно установить между объектами;
//  ПараметрыСинхронизации	 - Структура - кешированные параметры обмена
//
Процедура ОбработатьДанныеОбъекта(ДанныеОбъекта, ПараметрыСинхронизации, СвязиКУстановке, ПисьмаКОтправке) Экспорт
	
	МобильноеПриложение = ПараметрыСинхронизации.МобильноеПриложение;
	
	ЗначенияСвойств = Неопределено;
	
	Если ДанныеОбъекта.Свойство("Connect", ЗначенияСвойств) Тогда
		ПодключитьНовоеУстройство(ЗначенияСвойств, МобильноеПриложение, ПараметрыСинхронизации);

	ИначеЕсли ДанныеОбъекта.Свойство("Disconnect") Тогда
		ОтключитьУстройство(МобильноеПриложение);
 
	ИначеЕсли ДанныеОбъекта.Свойство("ClientInfo", ЗначенияСвойств) Тогда
		ЗаписатьИнформациюОКлиенте(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство("ProblemReportFromUser", ЗначенияСвойств) Тогда
		ЗаписатьСообщениеОПроблемеОтПользователя(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("ObjectDeletion", ЗначенияСвойств) Тогда
		ЗаписатьУдалениеОбъекта(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипАдресат(), ЗначенияСвойств) Тогда
		ЗаписатьАдресатаПочтовыхСообщений(ЗначенияСвойств);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипЗаписьКалендаря(), ЗначенияСвойств) Тогда
		ЗаписатьЗаписьРабочегоКалендаря(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипКонтроль(), ЗначенияСвойств) Тогда
		ЗаписатьКонтроль(ЗначенияСвойств);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипПроцессИсполнения(), ЗначенияСвойств) Тогда
		ЗаписатьПроцессИсполнение(ЗначенияСвойств, МобильноеПриложение, ПараметрыСинхронизации);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипФайл(), ЗначенияСвойств) Тогда
		ЗаписатьФайл(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипШаблонТекста(), ЗначенияСвойств) Тогда
		ЗаписатьШаблонТекстаПисьма(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипИсходящееПисьмо(), ЗначенияСвойств) Тогда
		ЗаписатьИсходящееПисьмо(ЗначенияСвойств, ПисьмаКОтправке, СвязиКУстановке, МобильноеПриложение,
			ПараметрыСинхронизации);
			
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипМоеОтсутствие(), ЗначенияСвойств) Тогда
		ЗаписатьМоеОтсутствие(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипМоеСамочувствие(), ЗначенияСвойств) Тогда
		ЗаписатьМоеСамочувствие(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство("MailFolderSynchronizationSettings", ЗначенияСвойств) Тогда
		ЗаписатьНастройкиСинхронизацииПапок(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("DataExpirationSettings", ЗначенияСвойств) Тогда
		ЗаписатьНастройкиУстареванияДанных(ЗначенияСвойств);
		ПараметрыСинхронизации.СрокУстареванияДанных = ЗначенияСвойств;
		
	ИначеЕсли ДанныеОбъекта.Свойство("MaxFileSizeToDownloadSetting", ЗначенияСвойств) Тогда
		ЗаписатьНастройкуМаксимальныйРазмерФайлов(ЗначенияСвойств);
		ПараметрыСинхронизации.МаксимальныйРазмерФайлов = ЗначенияСвойств;
		
	ИначеЕсли ДанныеОбъекта.Свойство("MailFooterSettings", ЗначенияСвойств) Тогда
		ЗаписатьНастройкиПодписейКПисьмам(ЗначенияСвойств);

	ИначеЕсли ДанныеОбъекта.Свойство("TaskRedirection", ЗначенияСвойств)Тогда
		ЗаписатьПеренаправлениеЗадачи(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("TaskAcception", ЗначенияСвойств) Тогда
		ЗаписатьПринятиеЗадачиНаИсполнение(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("TaskExecution", ЗначенияСвойств)  Тогда
		ЗаписатьРезультатВыполненияЗадачи(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("ProcessStateChange", ЗначенияСвойств) Тогда
		ЗаписатьСостояниеПроцесса(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("ObjectInFolder", ЗначенияСвойств) Тогда
		ЗаписатьОбъектВПапке(ЗначенияСвойств);

	ИначеЕсли ДанныеОбъекта.Свойство("ObjectReadState", ЗначенияСвойств) Тогда
		ЗаписатьУстановкуСостоянияПрочтенности(ЗначенияСвойств, МобильноеПриложение);

	ИначеЕсли ДанныеОбъекта.Свойство("ObjectFlag", ЗначенияСвойств) Тогда
		ЗаписатьФлагОбъекта(ЗначенияСвойств);
		
	ИначеЕсли ДанныеОбъекта.Свойство("JournalRecord", ЗначенияСвойств) Тогда
		
		ЗаписатьСобытиеПротокола(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипКлючеваяОперация(), ЗначенияСвойств) Тогда
		
		ЗаписатьКлючевуюОперацию(ЗначенияСвойств);
		
	ИначеЕсли ДанныеОбъекта.Свойство("NotificationSubscriberID", ЗначенияСвойств) Тогда
		
		ЗаписатьИдентификаторПодписчика(ЗначенияСвойств, МобильноеПриложение);
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипСостояниеПриглашения(), ЗначенияСвойств) Тогда
		
		ЗаписатьСостояниеПриглашенияНаМероприятие(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипТрудозатраты(), ЗначенияСвойств) Тогда
		
		ЗаписатьТрудозатрату(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипЕжедневныйОтчет(), ЗначенияСвойств) Тогда
		
		ЗаписатьЕжедневныйОтчет(ЗначенияСвойств, МобильноеПриложение);
		
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипЕженедельныйОтчет(), ЗначенияСвойств) Тогда
		
		ЗаписатьЕженедельныйОтчет(ЗначенияСвойств, МобильноеПриложение);
	
	ИначеЕсли ДанныеОбъекта.Свойство(МП_СлужебныйПовтИсп.ТипПроцессРВВЗ(), ЗначенияСвойств) Тогда
		
		ЗаписатьПроцессВопрос(ЗначенияСвойств, МобильноеПриложение);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманд

#Область ПодключитьНовоеУстройство

Процедура ПодключитьНовоеУстройство(ЗначенияСвойств, МобильноеПриложение, ПараметрыСинхронизации)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подключения нового клиента'"),
		Ложь, МобильноеПриложение);
	
	Версия = ЗначенияСвойств[0];
	
	Если Версия = "1" Тогда
		ПодключитьНовоеУстройствоВерсия1(ЗначенияСвойств, МобильноеПриложение, ТекущийПользователь,
			ПараметрыСинхронизации);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПапкиПисемДляСинхронизации = РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.
		ПолучитьПапкиДляСинхронизации(ТекущийПользователь, Истина);
	
	РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПапкиПисемДляСинхронизации, 
		ТекущийПользователь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Процедура подготовки данных для первой загрузки завершена'"),
		Ложь, МобильноеПриложение);

КонецПроцедуры

Процедура ПодключитьНовоеУстройствоВерсия1(ЗначенияСвойств, МобильноеПриложение, 
	ТекущийПользователь, ПараметрыСинхронизации)
	
	ПериодПервичнойЗагрузки = ЗначенияСвойств[1];
	
	Если Не ЗначениеЗаполнено(ПериодПервичнойЗагрузки) Тогда
		ПериодПервичнойЗагрузки = 7;
	КонецЕсли;
	
	СрокУстареванияДанных = ЗначенияСвойств[3];

	Если СрокУстареванияДанных < ПериодПервичнойЗагрузки И СрокУстареванияДанных <> 0 Тогда
		ПериодПервичнойЗагрузки = СрокУстареванияДанных;
	КонецЕсли; 
	
	ПараметрыСинхронизации.ПериодПервичнойЗагрузки = ПериодПервичнойЗагрузки;
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ТекущийПользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки, 
		ПериодПервичнойЗагрузки);
	
	МаксимальныйРазмерФайлов = ЗначенияСвойств[2];
	
	ПараметрыСинхронизации.МаксимальныйРазмерФайлов = МаксимальныйРазмерФайлов;
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ТекущийПользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов,
		МаксимальныйРазмерФайлов);
	
	ПараметрыСинхронизации.СрокУстареванияДанных = СрокУстареванияДанных;
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ТекущийПользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных,
		СрокУстареванияДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ОтключитьУстройство

Процедура ОтключитьУстройство(МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Отключения мобильного приложения'"), Ложь, МобильноеПриложение);
	
	МобильноеПриложение.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
	ВызватьИсключение "СтопДальнейшейОбработки";

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииЗагрузкиДанных

#Область ИнформацияОКлиенте

Процедура ЗаписатьИнформациюОКлиенте(ЗначенияСвойств, МобильноеПриложение)
	
	Версия  = ЗначенияСвойств[0];
	
	Если Версия >= "1" Тогда
		ЗаписатьИнформациюОКлиентеВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОКлиентеВерсия1(ЗначенияСвойств, МобильноеПриложение);
	
	ВерсияПриложения = ЗначенияСвойств[1];
	Система = ЗначенияСвойств[2];
	Память = ЗначенияСвойств[3];
	ИмяУстройства = ЗначенияСвойств[4];
	РазмерЭкрана = ЗначенияСвойств[5];
	
	ПредставлениеУстройства = СтрШаблон(НСтр("ru = 'Версия:%1, ОС:%2, ОЗУ:%3, WS:%4, Экран:%5""'"),
		ВерсияПриложения, Система, Память, ИмяУстройства, РазмерЭкрана);
	
	РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьСведенияОКлиенте(
		МобильноеПриложение, ТекущаяДатаСеанса(), ПредставлениеУстройства, ВерсияПриложения);
	

КонецПроцедуры

#КонецОбласти

#Область СообщениеОПроблемеОтПользователя

Процедура ЗаписатьСообщениеОПроблемеОтПользователя(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьСообщениеОПроблемеОтПользователяВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСообщениеОПроблемеОтПользователяВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	Перем ЗаписиПротокола;
	Перем ЗначенияЗаписиПротокола;
	// Добавление клиентских записей в протокол работы
	ТекстОшибки = ЗначенияСвойств[1];
	
	ЗаписиПротокола = ЗначенияСвойств[2];
		
	Для Каждого СтрЗаписьПротокола Из ЗаписиПротокола  Цикл
		
		Если СтрЗаписьПротокола.Свойство("JournalRecord", ЗначенияЗаписиПротокола) Тогда
			ЗаписатьСобытиеПротокола(ЗначенияЗаписиПротокола, МобильноеПриложение);
		КонецЕсли; 
		
	КонецЦикла;

	// Отправка уведомления ответственным за разбор сообщений
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПользователей = РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ОбменСМобильными);
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОписания = Новый Массив;
	
	СтрокиОписания.Добавить(
		СтрШаблон(НСтр("ru='Ошибка мобильного клиента (от %1):
			|%2'"), Строка(ПользователиКлиентСервер.ТекущийПользователь()), ТекстОшибки));
	
	СтрокиОписания.Добавить(Символы.ПС);
	СтрокиОписания.Добавить(Символы.ПС);
	
	СтрокиОписания.Добавить(
		НСтр("ru = 'Информация:
			|Протокол работы мобильного клиента этого пользователя можно посмотреть 
			|в разделе ""Настройка и администрирование""'"));
	
	Описание = СтрСоединить(СтрокиОписания, "");
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
			Описание,
			Пользователь);
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти 


#Область УдалениеОбъекта 

Процедура ЗаписатьУдалениеОбъекта(ЗначенияСвойств, МобильноеПриложение)
	
	Ссылка = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ЗначенияСвойств[1], 
		ЗначенияСвойств[0]);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
	
		ОбъектКУдалению = Ссылка.ПолучитьОбъект();
		ОбъектКУдалению.УстановитьПометкуУдаления(Истина);
		
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Ссылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным.Обработка сообщения. Установка пометки удаления'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка, ,Строка(МобильноеПриложение),
			ПодробноеПредставлениеОшибки(Инфо));
		
	КонецПопытки;

	
КонецПроцедуры 

#КонецОбласти


#Область АдресатыПочтовыхСообщений

Процедура ЗаписатьАдресатаПочтовыхСообщений(ЗначенияСвойств)
	Версия = ЗначенияСвойств[0];
	
	Если Версия >= "1" Тогда
		ЗаписатьАдресатаПочтовыхСообщенийВерсия1(ЗначенияСвойств);
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаписатьАдресатаПочтовыхСообщенийВерсия1(ЗначенияСвойств)

	УстановитьПривилегированныйРежим(Истина);

	Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
		ЗначенияСвойств[3], ЗначенияСвойств[2], Новый УникальныйИдентификатор(ЗначенияСвойств[1]));

КонецПроцедуры 

#КонецОбласти 

#Область ЗаписьРабочегоКалендаря

Процедура ЗаписатьЗаписьРабочегоКалендаря(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьЗаписьРабочегоКалендаряВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЗаписьРабочегоКалендаряВерсия1(ЗначенияСвойств, МобильноеПриложение)

	УстановитьПривилегированныйРежим(Истина);

	// Получение ссылки на запись календаря или создание новой
	Ссылка = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначенияСвойств[1]));
	Объект = Ссылка.ПолучитьОбъект();
	Описание = ЗначенияСвойств[3];
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);

	Иначе
		ЕстьИзмененияПозжеГраницыОтправленныхДанных = ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Ссылка);
		
		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных Тогда
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Запись календаря ""%1"" не была передана, т.к. она была изменена на сервере.'"),
					Описание);
					
			ВызватьИсключение ТекстПредупреждения;
		
		КонецЕсли;
	КонецЕсли;

	НовоеСостояние = ОбменСМобильнымиСерверПовтИсп.ПолучитьСостояниеЗаписиПоПредставлению(ЗначенияСвойств[8]);

	Цвет = ОбменСМобильнымиСерверПовтИсп.ПолучитьЦветПоПредставлению(ЗначенияСвойств[7]);

	// Для связанных записей изменяем только 
	Отработана = ЗначенияСвойств[10];
	ЭтоСвязаннаяЗапись = ЗначенияСвойств[11];

	Если ЭтоСвязаннаяЗапись Тогда

		Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда

			РегистрыСведений.УчастникиМероприятия.ИзменитьСостояниеПриглашения(
				Объект.Предмет, МобильноеПриложение.Пользователь, НовоеСостояние);

		КонецЕсли;

		РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(Объект.Ссылка, Отработана);
		РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Объект.Ссылка, Цвет);

		Возврат;

	КонецЕсли;

	Объект.Состояние = НовоеСостояние;

	// записываем данные объекта
	Объект.Описание = Описание;
	Объект.ВесьДень = ЗначенияСвойств[4];
	Объект.ДатаНачала = Дата(ЗначенияСвойств[5]);
	Объект.ДатаОкончания = Дата(ЗначенияСвойств[6]);

	ТипЗаписи = ЗначенияСвойств[9];
	
	Объект.ТипЗаписиКалендаря = 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьТипаЗаписиКалендаряПоПредставлению(ТипЗаписи);

	СсылкаПредмет = Неопределено;
	Если ЗначениеЗаполнено(ЗначенияСвойств[12]) Тогда
		СсылкаПредмет = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ЗначенияСвойств[13], ЗначенияСвойств[12]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаПредмет) И Не ЗначениеЗаполнено(Объект.Предмет) Тогда
		Объект.Предмет = СсылкаПредмет;
	КонецЕсли;

	Если СтрСравнить(ТипЗаписи, "recurrence") = 0 Тогда

		Объект.ДатаНачалаПовторения = Дата(ЗначенияСвойств[14]);

		Объект.ДатаОкончанияПовторения = Дата(ЗначенияСвойств[15]);
			
		Объект.ИнтервалПовторения = ЗначенияСвойств[16];

		Объект.ПовторениеПоДнямМесяца  = ЗначенияСвойств[17];
			
		Объект.ПовторениеПоМесяцам = ЗначенияСвойств[18];

		Объект.КоличествоПовторов = ЗначенияСвойств[19];
			
		Объект.ЧастотаПовторения = ОбменСМобильнымиСерверПовтИсп.ПолучитьЧастотуПоПредставлению(
			ЗначенияСвойств[20]);

		Объект.ПравилоОкончанияПовторения = 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьПравилоОкончанияПовторенияПоПредставлению(
				ЗначенияСвойств[21]);

		Объект.ПовторениеПоДням.Очистить();
		
		ДниПовторения = Новый Массив;
		
		ЗначенияСвойств[22].Свойство("RecurrenceDays", ДниПовторения);
		
		Если ДниПовторения.Количество() > 0 Тогда
			Для каждого ДеньПовторения Из ДниПовторения Цикл
				СвойстваДня = Новый Массив;
				ДеньПовторения.Свойство("Day", СвойстваДня);
				Если СвойстваДня.Количество() > 0 Тогда
					НоваяСтрока = Объект.ПовторениеПоДням.Добавить();
					НоваяСтрока.ДеньНедели = СвойстваДня[0];
					НоваяСтрока.НомерВхождения = СвойстваДня[1];
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Объект.ИсключенияПовторения.Очистить();
		ДатыИсключений = Новый Массив;
		ЗначенияСвойств[23].Свойство("RecurrenceExceptions", ДатыИсключений);
		Если ДатыИсключений.Количество() > 0 Тогда
			Для каждого ДатаИсключения Из ДатыИсключений Цикл
				СвойстваДаты = Новый Массив;
				ДатаИсключения.Свойство("Exception", СвойстваДаты);
				
				Если СвойстваДаты.Количество() > 0 Тогда
					НоваяСтрока = Объект.ИсключенияПовторения.Добавить();
					НоваяСтрока.ДатаИсключения = СвойстваДаты[1];
					
					Если ЗначениеЗаполнено(СвойстваДаты[0]) Тогда
						НоваяСтрока.ЗаписьИсключения = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(
							Новый УникальныйИдентификатор(СвойстваДаты[0]));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	Объект.Записать();

	РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(Объект.Ссылка, Отработана);
	
	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Объект.Ссылка, Цвет);

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Объект.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область Контроль

Процедура ЗаписатьКонтроль(ЗначенияСвойств)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьКонтрольВерсия1(ЗначенияСвойств);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаписатьКонтрольВерсия1(ЗначенияСвойств)

	УстановитьПривилегированныйРежим(Истина);

	ОбъектНайденНаСервере = Истина;

	КонтрольСсылка = Справочники.Контроль.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ЗначенияСвойств[1]));
	
	КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();

	Если КонтрольОбъект = Неопределено Тогда
		ОбъектНайденНаСервере = Ложь;
		КонтрольОбъект = Справочники.Контроль.СоздатьЭлемент();
		КонтрольОбъект.УстановитьСсылкуНового(КонтрольСсылка);
		КонтрольОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Наименование = ЗначенияСвойств[3];
	
	Если ОбъектНайденНаСервере и КонтрольОбъект.СнятСКонтроля Тогда
		
		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Контроль ""%1"" не был передан, т.к. объект был снят с контроля на сервере.'"), Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;	

	КонтрольОбъект.Наименование = Наименование;
	
	ИДАвтора = ЗначенияСвойств[5];
	
	Если ЗначениеЗаполнено(ИДАвтора) Тогда
		КонтрольОбъект.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДАвтора));	
	КонецЕсли; 
	
	КонтрольОбъект.ДатаПостановкиНаКонтроль = Дата(ЗначенияСвойств[6]); 

	КонтрольОбъект.ПоставленНаКонтроль = ЗначенияСвойств[8];

	КонтрольОбъект.ДатаСнятияСКонтроля = Дата(ЗначенияСвойств[7]);
	
	КонтрольОбъект.СнятСКонтроля = ЗначенияСвойств[9];

	КонтрольОбъект.Описание = ЗначенияСвойств[4];
		
	КонтрольОбъект.СрокИсполнения = Дата(ЗначенияСвойств[10]);

	Если Не ОбъектНайденНаСервере Тогда
		
		ТипИсточника = ЗначенияСвойств[14];
				
		ИДИсточника = ЗначенияСвойств[13];
		
		СсылкаИсточник = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ТипИсточника, 
			ИДИсточника);
		
		Если Не СсылкаИсточник = Неопределено Тогда

			ТипИсточника = ЗначенияСвойств[14];
			
			Если СтрСравнить(ТипИсточника, "IncomingMail") = 0
				Или СтрСравнить(ТипИсточника, "OutgoingMail") = 0 Тогда
				КонтрольОбъект.Источник = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(СсылкаИсточник);
			Иначе
				КонтрольОбъект.Источник = СсылкаИсточник;
			КонецЕсли;

		КонецЕсли;

		СсылкаПредмет = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ЗначенияСвойств[16], 
			ЗначенияСвойств[15]);

		Если Не СсылкаПредмет = Неопределено Тогда

			ТипПредмета = ЗначенияСвойств[16];

			Если СтрСравнить(ТипПредмета, "IncomingMail") = 0
				Или СтрСравнить(ТипПредмета, "OutgoingMail") = 0 Тогда

				КонтрольОбъект.Предмет = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(СсылкаПредмет);

			Иначе
				КонтрольОбъект.Предмет = СсылкаПредмет;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	КонтролерТип = ЗначенияСвойств[12];
	КонтролерИД = ЗначенияСвойств[11];
	
	Если ЗначениеЗаполнено(КонтролерИД) И ЗначениеЗаполнено(КонтролерТип) Тогда
		Контролер = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(КонтролерТип, КонтролерИД); 		
	КонецЕсли; 
	
	КонтрольОбъект.Контролер = 
		?(Контролер = Неопределено,
			ПользователиКлиентСервер.ТекущийПользователь(), Контролер);

	КонтролируемыеИсполнители = Новый Массив();
	
	ЗначенияСвойств[17].Свойство("ControlPerformers", КонтролируемыеИсполнители);
	
	Если КонтролируемыеИсполнители.Количество() > 0 Тогда
		
		Для Каждого КонтролируемыйИсполнитель Из КонтролируемыеИсполнители Цикл

			ДанныеСтроки = Новый Массив;
			
			КонтролируемыйИсполнитель.Свойство("ControlPerformer", ДанныеСтроки);

			Если ДанныеСтроки.Количество() > 0 Тогда
				
				Исполнитель = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ДанныеСтроки[7], ДанныеСтроки[6]);
				
				СтрокаНайдена = Ложь;
				
				Для Каждого Строка Из КонтрольОбъект.Исполнители Цикл
					
					Если Не Строка.Исполнитель = Исполнитель Тогда
						Продолжить;
					КонецЕсли;
					
					Строка.ДатаКонтроля = Дата(ДанныеСтроки[4]);
					
					Строка.Проконтролировано =  ДанныеСтроки[5];
					
					СтрокаНайдена = Истина;
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если СтрокаНайдена Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = КонтрольОбъект.Исполнители.Добавить();

			НоваяСтрока.Ответственный  =  ДанныеСтроки[1];

			НоваяСтрока.ДатаКонтроля   = Дата(ДанныеСтроки[4]);

			НоваяСтрока.Проконтролировано = ДанныеСтроки[5];

			НоваяСтрока.Исполнено      = ДанныеСтроки[2];

			НоваяСтрока.ДатаИсполнения = Дата(ДанныеСтроки[3]);

			НоваяСтрока.Исполнитель = Исполнитель;
			
			Если Не ОбъектНайденНаСервере Тогда
				НоваяСтрока.Источник = 
					МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ДанныеСтроки[9], ДанныеСтроки[8]);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	КонтрольОбъект.Записать();

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(КонтрольОбъект.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область ПроцессИсполнение

Процедура ЗаписатьПроцессИсполнение(ЗначенияСвойств, МобильноеПриложение, ПараметрыСинхронизации)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьПроцессИсполнениеВерсия1(ЗначенияСвойств, МобильноеПриложение);	
	КонецЕсли;
	

КонецПроцедуры

Процедура ЗаписатьПроцессИсполнениеВерсия1(ЗначенияСвойств, МобильноеПриложение)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	ИД = ЗначенияСвойств[1];
	
	Имя = ЗначенияСвойств[3];

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;
	
	Ссылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(Новый УникальныйИдентификатор(ИД));

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Исполнение.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Процесс = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		Процесс.УстановитьСсылкуНового(Ссылка);
	Иначе
		
		Процесс = Ссылка.ПолучитьОбъект();
		
		ОбъектНайденНаСервере = Истина;

		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Ссылка) Тогда

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. 
								|Настройка процесса на данном устройстве заменена версией с сервера.'"), Имя);

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначенияСвойств[11]) Тогда
		
		ИДГлавнойЗадачи = Новый УникальныйИдентификатор(ЗначенияСвойств[11]);
		
		СсылкаНаГлавнуюЗадачу = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИДГлавнойЗадачи);

		Если Не СсылкаНаГлавнуюЗадачу = Неопределено Тогда

			ГлавнаяЗадачаОбъект = СсылкаНаГлавнуюЗадачу.ПолучитьОбъект();
			
			Если Не ГлавнаяЗадачаОбъект = Неопределено Тогда

				Процесс.ГлавнаяЗадача = СсылкаНаГлавнуюЗадачу;
				Для Каждого ПредметЗадачи Из ГлавнаяЗадачаОбъект.Предметы Цикл
					НоваяСтрока = Процесс.Предметы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредметЗадачи);
				КонецЦикла;

				ТочкиМаршрута = Новый Массив;
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить);
				ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);

				Для Каждого ПредметЗадачи Из Процесс.Предметы Цикл
					Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
						НоваяСтрока = Процесс.ПредметыЗадач.Добавить();
						НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
						НоваяСтрока.ИмяПредмета   = ПредметЗадачи.ИмяПредмета;
					КонецЦикла;
				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли; 

	Процесс.Наименование   = Имя;
	Процесс.Описание       = ЗначенияСвойств[4];
	Процесс.Автор          = ТекущийПользователь;
	Процесс.Проверяющий    = ТекущийПользователь;
	Процесс.СрокИсполненияПроцесса = Дата(ЗначенияСвойств[5]);
	Процесс.КоличествоИтераций = 1;

	Важность = ЗначенияСвойств[6];
	Если СтрСравнить(Важность, "low") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли СтрСравнить(Важность, "high") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Процесс.Дата = Дата(ЗначенияСвойств[7]);
	Если Процесс.Дата = Дата(1,1,1) Тогда
		Процесс.Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Процесс);
	
	Исполнители = Новый Массив;
	
	ЗначенияСвойств[12].Свойство("ExecutionPerformers", Исполнители); 
	
	Если Исполнители.Количество() > 0 Тогда
		ЗагрузитьТабличнуюЧастьИсполнители(Процесс, Исполнители, СтарыеУчастникиПроцесса);	
	КонецЕсли; 

	Процесс.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;

	Процесс.Записать();
	Если Процесс.Стартован Тогда
		Процесс.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);
	КонецЕсли;

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Процесс.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Процесс.Ссылка);
	КонецЕсли;

	Если ЗначениеЗаполнено(Дата(ЗначенияСвойств[8]))
		И Не Процесс.Стартован Тогда

		Процесс.Старт();

		ПараметрыЗаписи = Новый Структура("Старт", Истина);
		ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(
			Процесс.Ссылка, ПараметрыЗаписи);

	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));

КонецПроцедуры 

Процедура ЗагрузитьТабличнуюЧастьИсполнители(Процесс, Исполнители, СтарыеУчастникиПроцесса)

	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();

	ЗагружаемыеУчастники = Новый ТаблицаЗначений();
	ЗагружаемыеУчастники.Колонки.Добавить("Исполнитель");
	ЗагружаемыеУчастники.Колонки.Добавить("Идентификатор");

	Для Каждого Исполнитель Из Исполнители Цикл

		ДанныеИсполнителя = Новый Массив;
		
		Исполнитель.Свойство("Performer", ДанныеИсполнителя);
		
		Если ДанныеИсполнителя.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		ТипИсполнителя      = ДанныеИсполнителя[1];
		ИДИсполнителя = Новый УникальныйИдентификатор(ДанныеИсполнителя[0]);
		
		Исполнитель = Неопределено;
		Если СтрСравнить(ТипИсполнителя, "User") = 0 Тогда
			Исполнитель = Справочники.Пользователи.ПолучитьСсылку(ИДИсполнителя);

		ИначеЕсли СтрСравнить(ТипИсполнителя, "Role") = 0 Тогда
			Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				Справочники.РолиИсполнителей.ПолучитьСсылку(ИДИсполнителя), Неопределено, Неопределено);
		КонецЕсли;

		ИДСтроки = ДанныеИсполнителя[2];

		СтрокаУчастника = ЗагружаемыеУчастники.Добавить();
		СтрокаУчастника.Исполнитель   = Исполнитель;
		СтрокаУчастника.Идентификатор = ИДСтроки;
		
	КонецЦикла;

	МассивКУдалению = Новый Массив();
	Для каждого СтрокаИсполнителя Из Процесс.Исполнители Цикл

		Строка = ЗагружаемыеУчастники.Найти(
			СтрокаИсполнителя.ИдентификаторИсполнителя, "Идентификатор");

		Если Строка = Неопределено Тогда
			МассивКУдалению.Добавить(СтрокаИсполнителя);
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаИсполнителя Из МассивКУдалению Цикл
		Процесс.Исполнители.Удалить(СтрокаИсполнителя);
	КонецЦикла;

	Для каждого СтрокаИсполнителя Из ЗагружаемыеУчастники Цикл

		Строка = Процесс.Исполнители.Найти(
			СтрокаИсполнителя.Идентификатор, "ИдентификаторИсполнителя");

		Если Не Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Процесс.Исполнители.Добавить();
		НоваяСтрока.Исполнитель = СтрокаИсполнителя.Исполнитель;
		НоваяСтрока.ИдентификаторИсполнителя = СтрокаИсполнителя.Идентификатор;

		НоваяСтрока.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;

		НоваяСтрока.СрокИсполнения = Процесс.СрокИсполненияПроцесса;

		СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			НоваяСтрока.СрокИсполнения,
			НоваяСтрока.СрокИсполненияДни,
			НоваяСтрока.СрокИсполненияЧасы,
			НоваяСтрока.СрокИсполненияМинуты,
			ИспользоватьДатуИВремяВСрокахЗадач,
			НоваяСтрока.ВариантУстановкиСрокаИсполнения)

	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область Файл

Процедура ЗаписатьФайл(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьФайлВерсия1(ЗначенияСвойств);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьФайлВерсия1(ЗначенияСвойств)

	Имя = ЗначенияСвойств[2];
	
	Расширение = ЗначенияСвойств[3];
	
	Если СтрНайти(Имя, Расширение) > 0 Тогда
		Имя = СтрЗаменить(Имя, "." + Расширение, "");
	КонецЕсли;

	ИДФайла = Новый УникальныйИдентификатор(ЗначенияСвойств[1]);
	ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(ИДФайла);

	Попытка
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		Если Не ФайлОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

	ВладелецТип = ЗначенияСвойств[8];
	ВладелецИДСтрокой = ЗначенияСвойств[7];

	ВладелецФайла = Неопределено;
	
	ВладелецФайла = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ВладелецТип, ВладелецИДСтрокой);
	
	Если ВладелецТип = МП_СлужебныйПовтИсп.ТипЗадача() Тогда
		// получаем по id Задачу. А по задаче - процесс владелец
		Задача = ВладелецФайла;
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
	КонецЕсли;

	ДанныеФайла = XMLЗначение(Тип("ХранилищеЗначения"), ЗначенияСвойств[6]);
	
	ТолькоЗаголовок = ЗначенияСвойств[5]; 
	
	Если ЗначениеЗаполнено(ЗначенияСвойств[9]) Тогда
		ИДБазовыйФайл = Новый УникальныйИдентификатор(ЗначенияСвойств[9]);	
	КонецЕсли; 

	Если ЗначениеЗаполнено(ИДБазовыйФайл) Тогда

		ИсходныйФайл = Справочники.Файлы.ПолучитьСсылку(ИДБазовыйФайл);
		РаботаСФайламиВызовСервера.СкопироватьФайл(ИсходныйФайл, ВладелецФайла, ИДФайла);

	ИначеЕсли Не ТолькоЗаголовок И ДанныеФайла <> Неопределено Тогда

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДанныеФайла.Получить().Записать(ИмяВременногоФайла);

		Файл = РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ВладелецФайла, ИмяВременногоФайла, Имя, ИДФайла, 
			Истина);

		Если ЗначениеЗаполнено(Задача) Тогда
			МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(Задача,
				ВладелецФайла, Файл, ИДФайла);

		ИначеЕсли ВладелецТип = МП_СлужебныйПовтИсп.ТипПроцессИсполнения() Или
			ВладелецТип = МП_СлужебныйПовтИсп.ТипПроцессРВВЗ() Тогда
			
			ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Файл);
			Мультипредметность.ЗаписатьПредметБизнесПроцесса(ВладелецФайла, ИмяПредмета, Файл);
			
		КонецЕсли;

		УдалитьФайлы(ИмяВременногоФайла);

	КонецЕсли;

	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ФайлСсылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ФайлСсылка));

КонецПроцедуры 

#КонецОбласти 

#Область ШаблонТекстаПисьма

Процедура ЗаписатьШаблонТекстаПисьма(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];
	
	Если Версия >= "1" Тогда
		ЗаписатьШаблонТекстаПисьмаВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаписатьШаблонТекстаПисьмаВерсия1(ЗначенияСвойств, МобильноеПриложение)

	ШаблонСсылка = Справочники.ШаблоныТекстов.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначенияСвойств[1]));

	ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();

	ЭтоНовый = Ложь;
	Если ШаблонОбъект = Неопределено Тогда
		ШаблонОбъект = Справочники.ШаблоныТекстов.СоздатьЭлемент();
		ШаблонОбъект.УстановитьСсылкуНового(ШаблонСсылка);
	ЭтоНовый = Истина;	
	КонецЕсли;

	Если Не ЭтоНовый Тогда
		
		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ШаблонСсылка) Тогда

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Шаблон ""%1"" не был передан, т.к. он был изменен на сервере. '"), ШаблонОбъект.Наименование);

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;
	
	КонецЕсли; 
		
	ШаблонОбъект.Наименование = ЗначенияСвойств[2];
	ШаблонОбъект.Шаблон = ЗначенияСвойств[3];
	ШаблонОбъект.Автор  = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ШаблонОбъект.Ссылка));

КонецПроцедуры 

#КонецОбласти 


#Область ИсходящееПисьмо

Процедура ЗаписатьИсходящееПисьмо(ЗначенияСвойств, ПисьмаКОтправке, СвязиКУстановке, 
	МобильноеПриложение, ПараметрыСинхронизации)

	Версия = ЗначенияСвойств[0];

	Если Версия  >= "1" Тогда
		ЗаписатьИсходящееПисьмоВерсия1(ЗначенияСвойств, МобильноеПриложение, ПисьмаКОтправке, 
			СвязиКУстановке, ПараметрыСинхронизации);
			
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИсходящееПисьмоВерсия1(ЗначенияСвойств, МобильноеПриложение, ПисьмаКОтправке, 
	СвязиКУстановке, ПараметрыСинхронизации)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;

	Ссылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначенияСвойств[1]));

	Объект = Ссылка.ПолучитьОбъект(); 
	
	Тема = ЗначенияСвойств[5];
	
	Если Объект = Неопределено Тогда

		Письмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
		Письмо.УстановитьСсылкуНового(Ссылка);

	Иначе

		ОбъектНайденНаСервере = Истина;

		Письмо = Объект;
		
		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Ссылка) Тогда

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(НСтр("ru = 'Исходящее письмо ""%1"" не было передано, т.к. оно было изменено на сервере.'"), 
					Тема);

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	// Заполнение реквизитов письма
	Важность = ЗначенияСвойств[4];
	
	Если СтрСравнить(Важность, "Низкая") = 0 Тогда
		Письмо.Важность = Перечисления.ВажностьПисем.Низкая;
	ИначеЕсли СтрСравнить(Важность, "Высокая") = 0 Тогда
		Письмо.Важность = Перечисления.ВажностьПисем.Высокая;
	Иначе
		Письмо.Важность = Перечисления.ВажностьПисем.Обычная;
	КонецЕсли;
	
	Письмо.Автор = ТекущийПользователь;
	
	Письмо.Дата = ТекущаяДатаСеанса();
	
	Письмо.ЕстьВложения = ЗначенияСвойств[6];
	
	Письмо.Тема = Тема;
	
	Письмо.ТекстХранилище = XMLЗначение(Тип("ХранилищеЗначения"), ЗначенияСвойств[16]);

	Письмо.ОтправительКонтакт = ТекущийПользователь;
	
	Письмо.УчетнаяЗапись = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор(
			ЗначенияСвойств[15]));

	// заполнение получателей письма
	Письмо.ПолучателиПисьма.Очистить();
	
	Письмо.ПолучателиКопий.Очистить();
	
	Письмо.ПолучателиСкрытыхКопий.Очистить();

	Кому = СтрРазделить(ЗначенияСвойств[17], ";", Ложь);
	
	Для каждого Адресат Из Кому Цикл
		ЗаполнитьСтрокуАдресата(Письмо.ПолучателиПисьма, Адресат);
	КонецЦикла;

	Копии = СтрРазделить(ЗначенияСвойств[18], ";", Ложь);
	
	Для каждого Адресат Из Копии Цикл
		ЗаполнитьСтрокуАдресата(Письмо.ПолучателиКопий, Адресат);
	КонецЦикла;

	Скрытые = СтрРазделить(ЗначенияСвойств[19], ";", Ложь);
	Для каждого Адресат Из Скрытые Цикл
		ЗаполнитьСтрокуАдресата(Письмо.ПолучателиСкрытыхКопий, Адресат);
	КонецЦикла;

	Письмо.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(Письмо.ПолучателиПисьма);

	ИДОснования = ЗначенияСвойств[21];
	ТипОснования = ЗначенияСвойств[22];
	
	Если ЗначениеЗаполнено(ИДОснования) И ЗначениеЗаполнено(ТипОснования) Тогда
		
		ПисьмоОснованиеСсылка = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ТипОснования, ИДОснования);
			// заполнение реквизитов для истории переписки
		Если ПисьмоОснованиеСсылка.ПолучитьОбъект() <> Неопределено Тогда
		
			ТипОтветаСтрока = ЗначенияСвойств[20]; 
			Если ЗначениеЗаполнено(ТипОтветаСтрока) Тогда
				ТипОтвета = Перечисления.ТипыОтвета[ТипОтветаСтрока];
				Письмо.ТипОтвета       = ТипОтвета;	
			КонецЕсли;
			Письмо.ПисьмоОснование = ПисьмоОснованиеСсылка;
		
		КонецЕсли;

	КонецЕсли; 
	
	Письмо.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	
	Письмо.Записать();

	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Ссылка);

	// Если письмо было отправлено на мобильном клиенте, то запоминаем это.
	// Такие письма будут отправлены после полной обработки сообщения от мобильного клиента.
	
	ПодготовленоКОтправке = Дата(ЗначенияСвойств[12]);
	
	Если НЕ ПодготовленоКОтправке = Неопределено Тогда
		Если ПодготовленоКОтправке > ТекущаяДатаСеанса() Тогда
			//Если дата подготовки письма к отправке больше текущей, значит письмо подготовлено
			//в другом часовом поясе, но отправиться должно сейчас. Отложенной отправки в мобильном нет.
			ПодготовленоКОтправке = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодготовленоКОтправке) Тогда

		// Подготовка письма к отправке
		ПисьмоКОтправке = Новый Структура();
		ПисьмоКОтправке.Вставить("Ссылка" , Письмо.Ссылка);
		ПисьмоКОтправке.Вставить("ПодготовленоКОтправке", ПодготовленоКОтправке);

		ПисьмаКОтправке.Добавить(ПисьмоКОтправке);

		// установка связей для истории переписки
		Если ПисьмоОснованиеСсылка <> Неопределено И ТипОтвета <> Неопределено Тогда

			Если ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда

				СвязьКУстановке = Новый Структура();
				СвязьКУстановке.Вставить("Объект", Письмо.Ссылка);
				СвязьКУстановке.Вставить("СвязанныйОбъект", ПисьмоОснованиеСсылка);
				СвязьКУстановке.Вставить("ТипСвязи", Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
				СвязиКУстановке.Добавить(СвязьКУстановке);

			ИначеЕсли ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда

				СвязьКУстановке = Новый Структура();
				СвязьКУстановке.Вставить("Объект", Письмо.Ссылка);
				СвязьКУстановке.Вставить("СвязанныйОбъект", ПисьмоОснованиеСсылка);
				СвязьКУстановке.Вставить("ТипСвязи", Справочники.ТипыСвязей.ПересылкаПисьма);
				СвязиКУстановке.Добавить(СвязьКУстановке);

			КонецЕсли;

			
		КонецЕсли;

		Если Письмо.ПолучателиПисьма.Количество() + Письмо.ПолучателиКопий.Количество() <= 50 Тогда

			Для Каждого Строка Из Письмо.ПолучателиПисьма Цикл

				Если ЗначениеЗаполнено(Строка.Адресат) Тогда

					МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Адресат = Строка.Адресат;
					МенеджерЗаписи.Пользователь = ТекущийПользователь;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
					МенеджерЗаписи.Записать();

				КонецЕсли;

			КонецЦикла;

			Для Каждого Строка Из Письмо.ПолучателиКопий Цикл

				Если ЗначениеЗаполнено(Строка.Адресат) Тогда
					
					МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Адресат = Строка.Адресат;
					МенеджерЗаписи.Пользователь = ТекущийПользователь;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
					МенеджерЗаписи.Записать();
					
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Письмо.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Письмо.Ссылка);
	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Письмо.Ссылка));

КонецПроцедуры 

Процедура ЗаполнитьСтрокуАдресата(ТабличнаяЧасть, Адресат)

	ДанныеАдресата =
		РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Адресат);

	АдресатСсылка =
		ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
			ДанныеАдресата.Адрес, ДанныеАдресата.ОтображаемоеИмя);

	Если ЗначениеЗаполнено(АдресатСсылка) Тогда

		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Адресат = АдресатСсылка;

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти


#Область НастройкаУстареванияДанных

Процедура ЗаписатьНастройкиУстареванияДанных(Значение)
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных,
		Значение);

КонецПроцедуры

#КонецОбласти

#Область НастройкаМаксимальныйРазмерФайла

Процедура ЗаписатьНастройкуМаксимальныйРазмерФайлов(Значение)

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов,
		Значение);

КонецПроцедуры

#КонецОбласти

#Область НастройкиСинхронизацииПапок

Процедура ЗаписатьНастройкиСинхронизацииПапок(ЗначенияСвойств, МобильныйКлиент)
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПапкиДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			ТекущийПользователь);

	Папки = ЗначенияСвойств;
	Если Папки.Количество() = 0 Тогда
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
			ТекущийПользователь, Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты, Ложь);
		Возврат;
	КонецЕсли;

	ПереданныеПапки = Новый Массив;
	Для Каждого ИдПапки Из Папки Цикл

		Попытка
			УИД = Новый УникальныйИдентификатор(ИдПапки);
		Исключение
			Продолжить;
		КонецПопытки;

		ПапкаСсылка = Справочники.ПапкиПисем.ПолучитьСсылку(УИД);
		ПереданныеПапки.Добавить(ПапкаСсылка);

	КонецЦикла;

	// Поиск удаленных папок
	УдаленныеПапки = Новый Массив;
	Для Каждого СтараяПапка Из ПапкиДляСинхронизации Цикл
		Если ПереданныеПапки.Найти(СтараяПапка) = Неопределено Тогда
			УдаленныеПапки.Добавить(СтараяПапка);
		КонецЕсли;
	КонецЦикла;

	// Поиск добавленных папок
	ДобавленныеПапки = Новый Массив;
	Для Каждого НоваяПапка Из ПереданныеПапки Цикл
		Если ПапкиДляСинхронизации.Найти(НоваяПапка) = Неопределено Тогда
			ДобавленныеПапки.Добавить(НоваяПапка);
		КонецЕсли;
	КонецЦикла;

	// Сохранение принятого от клиента списка синхронизируемых папок
	РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПереданныеПапки);

	// Если список синхронизируемых папок изменился, то отметим этот факт, чтобы изменения передались на другие
	//	мобильные клиенты текущего пользователя
	Если УдаленныеПапки.Количество() > 0 Или ДобавленныеПапки.Количество() > 0 Тогда
		РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(
			ТекущийПользователь,
			Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизацияПапокПисем);
	КонецЕсли;

	
КонецПроцедуры


#КонецОбласти

#Область НастройкаПодписейКПисьмам

Процедура ЗаписатьНастройкиПодписейКПисьмам(ЗначенияСвойств)

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		Пользователь.ИдентификаторПользователяИБ);

	Если ПользовательИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УУИДДляНового = Новый УникальныйИдентификатор(ЗначенияСвойств[0]);

	УУИДДляОтвета = Новый УникальныйИдентификатор(ЗначенияСвойств[1]);

	Если УУИДДляНового = УникальныйИдентификаторПустой() Тогда
		ПодписьНовыхПисем = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Иначе
		ПодписьНовыхПисем = 
			Справочники.ШаблоныТекстов.ПолучитьСсылку(УУИДДляНового);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВстроеннаяПочта",
		"ПодписьДляНовыхПисем",	ПодписьНовыхПисем, ,ПользовательИБ.Имя);

	Если УУИДДляОтвета = УникальныйИдентификаторПустой() Тогда
		ПодписьОтветныхПисем = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Иначе
		ПодписьОтветныхПисем = 
			Справочники.ШаблоныТекстов.ПолучитьСсылку(УУИДДляОтвета);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВстроеннаяПочта", 
		"ПодписьПриОтветеИПересылке", ПодписьОтветныхПисем, ,ПользовательИБ.Имя);

КонецПроцедуры

#КонецОбласти

#Область ПапкиОбъектов

Процедура ЗаписатьОбъектВПапке(ЗначенияСвойств)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьОбъектВПапкеВерсия1(ЗначенияСвойств);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОбъектВПапкеВерсия1(ЗначенияСвойств)

	УстановитьПривилегированныйРежим(Истина);

	ИДПапки = ЗначенияСвойств[3];
	Папка = Справочники.ПапкиПисем.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДПапки));

	ТипОбъекта = ЗначенияСвойств[2];
	ИДОбъекта  = ЗначенияСвойств[1];

	Ссылка = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ТипОбъекта, ИДОбъекта);
	
	Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'В объекте MailFolder объект не может иметь тип ""%1""'"),
			ИДОбъекта);
		ВызватьИсключение ТекстИсключения;	
	КонецЕсли; 

	СообщениеОбОшибке = "";

	ВстроеннаяПочтаСервер.ПоместитьПисьмоВПапку(Ссылка, Папка, СообщениеОбОшибке);

	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Ссылка);
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));

	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 

#Область ПеренаправлениеЗадачи

Процедура ЗаписатьПеренаправлениеЗадачи(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьПеренаправлениеЗадачиВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПеренаправлениеЗадачиВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(Новый УникальныйИдентификатор
		(ЗначенияСвойств[1]));

	УстановитьПривилегированныйРежим(Истина);

	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"Выполнена, СостояниеБизнесПроцесса, ПринятаКИсполнению, ПометкаУдаления, Наименование");

	// Выполняем провеверку, что задача доступна пользователю по ролям и делегированию.
	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(ЗадачаСсылка);
	
	Если РезультатЗапроса.Пустой() Тогда

		// на указанный мобильный клиент, т.к. задача на нем больше не нужна
		
		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
							|т.к. задача более не доступна пользователю.'"),
				РеквизитыЗадачи.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	Запрос.УстановитьПараметр("Исполнитель", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.ВерсияДанных
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Исполнитель, ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка = Задачи.Ссылка
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ЗадачаСсылка) Тогда
			
			ДополнениеРасширенногоПротокола = "задача была изменена на сервере до момента синхронизации";
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
								|т.к. ранее задача была изменена на сервере.'"),
					РеквизитыЗадачи.Наименование);
		ИначеЕсли РеквизитыЗадачи.Выполнена Тогда
			ДополнениеРасширенногоПротокола = "задача выполнена ранее";
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
								|т.к. ранее задача была выполнена.'"),
					РеквизитыЗадачи.Наименование);
					
		Иначе
			ДополнениеРасширенногоПротокола = "задача уже перенаправлена";
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, 
								|т.к. ранее задача уже была перенаправлена.'"),
					РеквизитыЗадачи.Наименование);
		КонецЕсли;

		ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);

		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;

	ТипИсполнителя      = ЗначенияСвойств[5];
	ИДИсполнителя = Новый УникальныйИдентификатор(ЗначенияСвойств[4]);
	
	Если СтрСравнить(ТипИсполнителя, "User") = 0 Тогда
		НовыйИсполнитель = Справочники.Пользователи.ПолучитьСсылку(ИДИсполнителя);
	ИначеЕсли СтрСравнить(ТипИсполнителя, "Role") = 0 Тогда
		НовыйИсполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Справочники.РолиИсполнителей.ПолучитьСсылку(ИДИсполнителя),
			Неопределено,
			Неопределено);
	Иначе

		Возврат;

	КонецЕсли;

	Попытка
		ОбменСМобильнымиСервер.ПроверитьВозможностьПереадресацииЗадачи(ЗадачаСсылка, НовыйИсполнитель);
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПереадресацияПользователю = ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.Пользователи");

	СтруктураПеренаправления = Новый Структура;
	СтруктураПеренаправления.Вставить("Исполнитель", 
		?(ПереадресацияПользователю, НовыйИсполнитель, Неопределено));

	СтруктураПеренаправления.Вставить("РольИсполнителя", 
		?(ПереадресацияПользователю, Неопределено, НовыйИсполнитель));

	СтруктураПеренаправления.Вставить("Комментарий", ЗначенияСвойств[3]);

	Попытка

		БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(
			ЗадачаСсылка, СтруктураПеренаправления, Новый УникальныйИдентификатор());

	Исключение

		Инфо = ИнформацияОбОшибке();
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'warning:Не удалось перенаправить задачу ""%1"" на ""%2"". %3. Задача возвращена.'"),
			Строка(ЗадачаСсылка),
			Строка(НовыйИсполнитель),
			Инфо.Описание);

		ВызватьИсключение ТекстСообщения;

	КонецПопытки;

	ПротоколированиеРаботыПользователей.ЗаписатьПеренаправлениеЗадачи(ЗадачаСсылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗадачаСсылка));

КонецПроцедуры 

#КонецОбласти 

#Область ПротоколСобытий

Процедура ЗаписатьСобытиеПротокола(ЗначенияСвойств, МобильноеПриложение) Экспорт
	
	Версия = ЗначенияСвойств[0];
	
	Если Версия >= "1" Тогда
		ЗаписатьСобытиеПротоколаВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаписатьСобытиеПротоколаВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	ТипЗаписи = ЗначенияСвойств[1];
	
	Если СтрСравнить(ТипЗаписи, "Warning") = 0 Тогда
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Предупреждение;
	ИначеЕсли СтрСравнить(ТипЗаписи, "Error") = 0 Тогда
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Ошибка;
	Иначе
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Информация;
	КонецЕсли;
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьЗаписьВПротоколСКлиента(
		МобильноеПриложение, ЗначенияСвойств[6], ЗначенияСвойств[5], ЗначенияСвойств[2],
		ЗначенияСвойств[4], ЗначенияСвойств[3], ТипСобытия);
		
КонецПроцедуры	
#КонецОбласти 

Процедура ЗаписатьКлючевуюОперацию(ЗначенияСвойств) Экспорт
	
	Если Не ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат;
	КонецЕсли;
	
	Версия = ЗначенияСвойств[0];
	
	Если Версия >= "1" Тогда
		ЗаписатьКлючевуюОперациюВерсия1(ЗначенияСвойств);
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаписатьКлючевуюОперациюВерсия1(ЗначенияСвойств) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючеваяОперация = ОценкаПроизводительностиПовтИсп.ПолучитьКлючевуюОперациюПоИмени(ЗначенияСвойств[1]);
	
	Длительность = Число(ЗначенияСвойств[4]);
	ДатаНачалаКлючевойОперации = ЗначенияСвойств[3] * 1000;
	Комментарий = ЗначенияСвойств[2];
	
	Запись = РегистрыСведений.ЗамерыВремени.СоздатьМенеджерЗаписи();
	
	Запись.КлючеваяОперация = КлючеваяОперация;
	Запись.ДатаНачалаЗамера = ДатаНачалаКлючевойОперации;
	Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
	Запись.ВремяВыполнения = ?(Длительность = 0, 0.001, Длительность); // Длительность меньше разрешения таймера
	Запись.ДатаЗаписи = Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	Запись.ДатаЗаписиНачалоЧаса = НачалоЧаса(Запись.ДатаЗаписи);
	Если ЗначениеЗаполнено(ДатаНачалаКлючевойОперации) Тогда
		Запись.ДатаОкончания = Длительность*1000 + ДатаНачалаКлючевойОперации;
	КонецЕсли;
	Запись.Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Запись.ДатаЗаписиЛокальная = ТекущаяДатаСеанса();
	Запись.Комментарий = Комментарий;
	Запись.ВесЗамера = 1;
	Запись.ВыполненСОшибкой = Ложь;
	
	Запись.Записать();
	
КонецПроцедуры

#Область РезультатВыполненияЗадачи

Процедура ЗаписатьРезультатВыполненияЗадачи(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьРезультатВыполненияЗадачиВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьРезультатВыполненияЗадачиВерсия1(ЗначенияСвойств, МобильноеПриложение)

	УстановитьПривилегированныйРежим(Истина);

	ИД = ЗначенияСвойств[1];
	
	КомментарийВыполнения =  ЗначенияСвойств[5];

	Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(Новый УникальныйИдентификатор(ИД));
	ВерсияДанных = ЗначенияСвойств[2];
	ЗадачаОбъект = Задача.ПолучитьОбъект();

	Если ЗадачаОбъект = Неопределено Тогда

		ТекстПредупреждения = 
			"warning:" + НСтр("ru = 'Результат выполнения одной из задач не был передан, 
									|т.к. задача была удалена на сервере.'");

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибкуПоОбъекту(
			НСтр("ru = 'Ошибка при выполнении задачи. Объект не найден на сервере.'"),
			"Task", ИД, Ложь, МобильноеПриложение);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	РеквизитыЗадачи = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, 
			"Ссылка,ВерсияДанных,Выполнена,ПометкаУдаления,Наименование,
			|СостояниеБизнесПроцесса,ПринятаКИсполнению,ТочкаМаршрута");

	ТекстПредупреждения = "";

	// Выполняем провеверку, что задача доступна пользователю по ролям и делегированию.
	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(Задача);
	
	Если РезультатЗапроса.Пустой() Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
							|т.к. задача более не доступна пользователю.'"),
				РеквизитыЗадачи.Наименование);

	ИначеЕсли РеквизитыЗадачи.Выполнена Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
					|была выполнена ранее.'"),
				РеквизитыЗадачи.Наименование); 

	ИначеЕсли РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
					|т.к. родительский бизнес-процесс не активен.'"),
				РеквизитыЗадачи.Наименование); 

	ИначеЕсли ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Задача) Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
					|т.к. задача ранее уже была изменена на сервере.'"),
				РеквизитыЗадачи.Наименование);

	КонецЕсли;

	ЗадачаОбъект.РезультатВыполнения = КомментарийВыполнения;
	
	Попытка
		
		ЗадачаОбъект.Записать();
		
	Исключение
		
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, по причине:%2'"),
			РеквизитыЗадачи.Наименование, ОписаниеОшибки());
		
	КонецПопытки;
	
	РезультатПроверки = РаботаСБизнесПроцессамиВызовСервера.ПроверитьУсловияЗапретаВыполнения(Задача);
	
	ТекстПредупреждения = РезультатПроверки.ТекстПредупреждения;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ВызватьИсключение СтрШаблон("warning:%1", ТекстПредупреждения);

	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	ЗадачаОбъект.РезультатВыполнения = КомментарийВыполнения;

	Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда

		РезультатВыполнения = ЗначенияСвойств[4];

		Если РезультатВыполнения = 1 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		ИначеЕсли РезультатВыполнения = 2 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
		ИначеЕсли РезультатВыполнения = 3 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
		КонецЕсли;

		СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		СогласованиеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"        , Задача);
		СогласованиеОбъект.ДополнительныеСвойства.Вставить("РезультатСогласования", РезультатСогласования);
		СогласованиеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда

		СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);

		РезультатВыполнения = ЗначенияСвойств[4];

		СогласованиеОбъект.ПовторитьСогласование = РезультатВыполнения = 2;

		НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеСогласование = РезультатВыполнения = 2;

		СогласованиеОбъект.Записать();
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда

		РезультатВыполнения = ЗначенияСвойств[4];

		Если РезультатВыполнения = 1 Тогда
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
		ИначеЕсли РезультатВыполнения = 2 Тогда
			РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
		КонецЕсли;

		УтверждениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("РезультатУтверждения", РезультатУтверждения);
		УтверждениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда

		РезультатВыполнения = ЗначенияСвойств[4];

		УтверждениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача",Задача);
		УтверждениеОбъект.ДополнительныеСвойства.Вставить(
			"ПовторитьУтверждение", РезультатВыполнения = 2);

		УтверждениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда

		РассмотрениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();

		// сформируем дополнительные свойства для передачи данных объекту
		
		ДанныеЗаполнения    = Новый Структура();

		РезультатВыполнения = ЗначенияСвойств[4];
		
		Если РезультатВыполнения = 1 Тогда
			ДанныеЗаполнения.Вставить("ВариантРассмотрения", 
				Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
		Иначе
			ДанныеЗаполнения.Вставить("ВариантРассмотрения", 
				Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение);

			РассмотрениеОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
			РассмотрениеОбъект.ВажностьИсполнения = РассмотрениеОбъект.Важность;
		КонецЕсли;

		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"      , Задача);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения"   , ДанныеЗаполнения);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("РезультатВыполнения", КомментарийВыполнения);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"    , Истина);
		РассмотрениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда

		РассмотрениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ДанныеЗаполнения   = Новый Структура();
		ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции", 
			Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);

		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"   , Задача);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		РассмотрениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда

		РезультатВыполнения = ЗначенияСвойств[4];

		ВозвратНаДоработку = РезультатВыполнения = 2;

		Если ВозвратНаДоработку Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ИсполнениеРезультатыПроверки.НомерИтерации КАК НомерИтерации,
				|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
				|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего КАК ЗадачаПроверяющего,
				|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку КАК ОтправленоНаДоработку,
				|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК КомментарийПроверяющего,
				|	ВЫБОР
				|		КОГДА ИсполнениеРезультатыПроверки.ЗадачаИсполнителя.ТочкаМаршрута = 
				|			&ТочкаМаршрутаОтвИсполнение ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ОтвИсполнение
				|ИЗ
				|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
				|ГДЕ
				|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего";

			Запрос.УстановитьПараметр("ЗадачаПроверяющего", Задача);
			Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", 
				БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);

			Исполнители = Запрос.Выполнить().Выгрузить();

			ИсполнениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			Для каждого Исполнитель Из Исполнители Цикл
				Исполнитель.ОтправленоНаДоработку = Истина;
				Исполнитель.КомментарийПроверяющего = КомментарийВыполнения;
			КонецЦикла;

			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("Исполнители"  , Исполнители);
			ИсполнениеОбъект.Записать();

		КонецЕсли;

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда

		РезультатВыполнения = ЗначенияСвойств[4];

		ВозвратНаДоработку = РезультатВыполнения = 2;

		ПоручениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПоручениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПоручениеОбъект.ДополнительныеСвойства.Вставить("ОтправленоНаДоработку", ВозвратНаДоработку);
		ПоручениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли Задачаобъект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда

		РезультатВыполнения = ЗначенияСвойств[4];
		
		Если РезультатВыполнения = 1 Тогда
			РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано;
		Иначе
			РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
		КонецЕсли;

		РегистрацияОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"       , Задача);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"     , Истина);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("РезультатРегистрации", РезультатРегистрации);
		РегистрацияОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда

		РезультатВыполнения = ЗначенияСвойств[4];

		ПовторитьРегистрацию = Истина;
		Если РезультатВыполнения = 1 Тогда
			ПовторитьРегистрацию = Ложь;
		КонецЕсли;

		РегистрацияОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"       , Задача);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"     , Истина);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ПовторитьРегистрацию", ПовторитьРегистрацию);
		РегистрацияОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда

		РезультатВыполнения = ЗначенияСвойств[4];
		
		РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято;
		Если РезультатВыполнения = 1 Тогда
			РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято;
		КонецЕсли;

		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача"       , Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу"     , Истина);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("РезультатПриглашения", РезультатПриглашения);
		ПриглашениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда

		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);

		РезультатВыполнения = ЗначенияСвойств[4];

		Если РезультатВыполнения = 1 Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПодтвердитьПриглашение", Истина);

		ИначеЕсли РезультатВыполнения = 2 Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПовторитьПриглашение", Истина);

		Иначе
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ОтложитьПриглашение", Истина);

		КонецЕсли;

		ПриглашениеОбъект.Записать();
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда

		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		ПриглашениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда

		ПроцессРассмотрениеВопроса = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("РезультатВыполнения", КомментарийВыполнения);
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		ПроцессРассмотрениеВопроса.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда

		ПроцессРассмотрениеВопроса = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("РезультатВыполнения", КомментарийВыполнения);
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		ПроцессРассмотрениеВопроса.ДополнительныеСвойства.Вставить("ОтправитьНаУточнение",
			ЗначениеЗаполнено(КомментарийВыполнения));
		ПроцессРассмотрениеВопроса.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЕсли;

	Если ЗадачаОбъект.Выполнена Тогда

		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ЗадачаОбъект.Ссылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗадачаОбъект.Ссылка));

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 

#Область СведенияОПрочтенииОбъекта

Процедура ЗаписатьУстановкуСостоянияПрочтенности(ЗначенияСвойств, МобильныйКлиент)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьУстановкуСостоянияПрочтенностиВерсия1(ЗначенияСвойств);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьУстановкуСостоянияПрочтенностиВерсия1(ЗначенияСвойств)

	УстановитьПривилегированныйРежим(Истина);

	ОбъектСсылка = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ЗначенияСвойств[2], ЗначенияСвойств[1]); 
		
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		
		РаботаСПрочтениями.УстановитьСвойствоПрочтен(ОбъектСсылка, 
			ЗначенияСвойств[3]);

		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ОбъектСсылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСсылка));

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти 

#Область ФлагОбъекта

Процедура ЗаписатьФлагОбъекта(ЗначенияСвойств)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьФлагОбъектаВерсия1(ЗначенияСвойств);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьФлагОбъектаВерсия1(ЗначенияСвойств)

	УстановитьПривилегированныйРежим(Истина);

	ОбъектСсылка = МП_СлужебныйПовтИсп.СсылкаПоТипуИИД(ЗначенияСвойств[2], ЗначенияСвойств[1]); 
	
	Цвет = ЗначенияСвойств[3];
	Флаг = МП_СлужебныйПовтИсп.ФлагПоПредставлению(Цвет);
	
	РегистрыСведений.ФлагиОбъектов.УстановитьФлаг(ОбъектСсылка,
		ПользователиКлиентСервер.ТекущийПользователь(), Флаг);

КонецПроцедуры 

#КонецОбласти 

#Область СостояниеПроцесса

Процедура ЗаписатьСостояниеПроцесса(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьСостояниеПроцессаВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСостояниеПроцессаВерсия1(ЗначенияСвойств, МобильноеПриложение)

	Тип = ЗначенияСвойств[1];
	
	УИД = Новый УникальныйИдентификатор(ЗначенияСвойств[2]);
	
	Если СтрСравнить(Тип, "ExecutionProcess") = 0 Тогда
		ПроцессСсылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(УИД);
	Иначе
		Возврат;
	КонецЕсли;
	
	ПроцессОбъект = ПроцессСсылка.ПолучитьОбъект();
	Если ПроцессОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ПроцессСсылка) Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. 
							|Настройка процесса на данном устройстве заменена версией с сервера.'"),
				ПроцессОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Если ПроцессОбъект.Завершен Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было завершено на сервере %2. 
							|Настройка процесса на данном устройстве заменена версией с сервера.'"),
				ПроцессОбъект.Наименование, ПроцессОбъект.ДатаЗавершения);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Попытка
		ПроцессОбъект.Заблокировать();
	Исключение

		ТекстПредупреждения = 
			СтрШаблон(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было 
							|заблокировано другим пользователем на сервере.'"),
				ПроцессОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецПопытки;

	ТекущееСостояние = ПроцессОбъект.Состояние;
	
	НовоеСостояние = ЗначенияСвойств[5];

	Если СтрСравнить(НовоеСостояние, "Active") = 0
		И Не ТекущееСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда

		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ПроцессОбъект.Записать();

	ИначеЕсли СтрСравнить(НовоеСостояние, "Stopped") = 0
		И Не ТекущееСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда

		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
		ПроцессОбъект.Записать();

	ИначеЕсли СтрСравнить(НовоеСостояние, "Terminated") = 0
		И Не ТекущееСостояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда

		ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(ПроцессОбъект.Ссылка);

		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
		ПроцессОбъект.ПричинаПрерывания = ЗначенияСвойств[4];
		ПроцессОбъект.Записать();

	КонецЕсли;

	ПроцессОбъект.Разблокировать();

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПроцессОбъект.Ссылка));

КонецПроцедуры 

#КонецОбласти 

#Область ПринятиеЗадачиНаИсполнение

Процедура ЗаписатьПринятиеЗадачиНаИсполнение(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьПринятиеЗадачиНаИсполнениеВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПринятиеЗадачиНаИсполнениеВерсия1(ЗначенияСвойств, МобильноеПриложение)

	УстановитьПривилегированныйРежим(Истина);

	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ЗначенияСвойств[1]));

	ПринятаКИсполнению = ЗначенияСвойств[3];
	
	ДатаПринятия = Дата(ЗначенияСвойств[2]);
		
	РеквизитыЗадачи = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗадачаСсылка, 
			"Ссылка,ВерсияДанных,Выполнена,ПометкаУдаления,Наименование,
			|СостояниеБизнесПроцесса,ПринятаКИсполнению,ТочкаМаршрута");

	// Выполняем провеверку, что задача доступна пользователю по ролям и делегированию.
	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(ЗадачаСсылка);
	
	Если РезультатЗапроса.Пустой() Тогда

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, 
							|т.к. задача более не доступна пользователю.'"),
				РеквизитыЗадачи.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;

	Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ЗадачаСсылка) Тогда

		Если РеквизитыЗадачи.Выполнена Тогда
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
								|т.к. задача была выполнена ранее.'"),
					ЗадачаСсылка.Наименование);
					
		Иначе
			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
								|т.к. задача уже была перенаправлена ранее.'"),
					ЗадачаСсылка.Наименование);
		КонецЕсли;


		ВызватьИсключение ТекстПредупреждения;
	КонецЕсли;
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	
	Попытка
		ЗадачаОбъект.Заблокировать();
	Исключение

		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
				НСтр("ru = 'Принятие задачи на исполнение ""%1"" не было передано, 
							|т.к. ранее задача была изменена на сервере.'"),
				РеквизитыЗадачи.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецПопытки;

	Если ПринятаКИсполнению Тогда
		
		Если РеквизитыЗадачи.Выполнена
			Или РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
			Или РеквизитыЗадачи.ПринятаКИсполнению
			Или РеквизитыЗадачи.ПометкаУдаления Тогда

			Возврат;

		КонецЕсли;

		ЗадачаОбъект.ПринятаКИсполнению = Истина;
		ЗадачаОбъект.ДатаПринятияКИсполнению = ДатаПринятия;

		Если ЗадачаОбъект.Исполнитель.Пустая() Тогда
			ЗадачаОбъект.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;

		ЗадачаОбъект.Записать();
	Иначе

		Если ЗадачаОбъект.Выполнена
			Или Не ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен
			Или Не ЗадачаОбъект.ПринятаКИсполнению
			Или ЗадачаОбъект.ПометкаУдаления Тогда
			Возврат;

		КонецЕсли;

		ЗадачаОбъект.ПринятаКИсполнению = Ложь;
		ЗадачаОбъект.ДатаПринятияКИсполнению = "00010101000000";

		Если Не ЗадачаОбъект.РольИсполнителя.Пустая() Тогда
			ЗадачаОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;

		ЗадачаОбъект.Записать();

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область ЗаписьОтстуствия

Процедура ЗаписатьМоеОтсутствие(ЗначенияСвойств, МобильноеПриложение)
	
	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьМоеОтсутствиеВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьМоеОтсутствиеВерсия1(ЗначенияСвойств, МобильноеПриложение)
	УстановитьПривилегированныйРежим(Истина);

	ОтсутствиеСсылка = Документы.Отсутствие.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ЗначенияСвойств[1]));
		
	ОтсутствиеОбъект = ОтсутствиеСсылка.ПолучитьОбъект();
	
	Если ОтсутствиеОбъект = Неопределено Тогда
		
		ОтсутствиеОбъект = Документы.Отсутствие.СоздатьДокумент();
		ОтсутствиеОбъект.УстановитьСсылкуНового(ОтсутствиеСсылка);
		
	ИначеЕсли ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ОтсутствиеСсылка) Тогда
			
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Отсутствие ""%1"" не было передано, 
			|т.к. было изменено ранее на сервере.'"), Строка(ОтсутствиеСсылка));
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;
	
	ОтсутствиеОбъект.ОбменДанными.Загрузка = Истина;
	ОтсутствиеОбъект.Автор = Пользователи.ТекущийПользователь();
	ОтсутствиеОбъект.Дата = ТекущаяДатаСеанса();
	ОтсутствиеОбъект.БудуРазбиратьЗадачи = ЗначенияСвойств[2];
	ОтсутствиеОбъект.ВесьДень = ЗначенияСвойств[3];
	ОтсутствиеОбъект.ВидОтсутствия = Справочники.ВидыОтсутствий.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ЗначенияСвойств[4]));
	ОтсутствиеОбъект.ДатаНачала = Дата(ЗначенияСвойств[5]);
	ОтсутствиеОбъект.ДатаОкончания = Дата(ЗначенияСвойств[6]);
	ОтсутствиеОбъект.Комментарий = ЗначенияСвойств[7];
	ОтсутствиеОбъект.ПериодСтрокой = ЗначенияСвойств[8];
	ОтсутствиеОбъект.Сотрудник = ОтсутствиеОбъект.Автор;
	Заместители = ЗначенияСвойств[9];
	ОтсутствиеОбъект.Заместители.Очистить();
	Для Каждого ЭлементЗаместитель Из Заместители Цикл
		НоваяСтрокаЗаместители = ОтсутствиеОбъект.Заместители.Добавить();
		НоваяСтрокаЗаместители.Заместитель = Справочники.Пользователи.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ЭлементЗаместитель[0]));
		НоваяСтрокаЗаместители.Комментарий = ЭлементЗаместитель[1];
			
	КонецЦикла;
	
	ОтсутствиеОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьСамочувствия
Процедура ЗаписатьМоеСамочувствие(ЗначенияСвойств, МобильноеПриложение)
	
	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьМоеСамочувствиеВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьМоеСамочувствиеВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);

	СамочувствиеСсылка = Документы.СамочувствиеСотрудника.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ЗначенияСвойств[1]));
		
	СамочувствиеОбъект = СамочувствиеСсылка.ПолучитьОбъект();
	
	Если СамочувствиеОбъект = Неопределено Тогда
		
		СамочувствиеОбъект = Документы.СамочувствиеСотрудника.СоздатьДокумент();
		СамочувствиеОбъект.УстановитьСсылкуНового(СамочувствиеСсылка);
		
	ИначеЕсли ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, СамочувствиеСсылка) Тогда
			
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Самочувствие ""%1"" не было передано, 
			|т.к. было изменено ранее на сервере.'"), Строка(СамочувствиеСсылка));
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;
	
	ДатаЗамера = Дата(ЗначенияСвойств[6]);
	
	СамочувствиеОбъект.Создал = Пользователи.ТекущийПользователь();
	СамочувствиеОбъект.Сотрудник = СамочувствиеОбъект.Создал;
	СамочувствиеОбъект.Дата = ЗначенияСвойств[2];
	СамочувствиеОбъект.Температура = ЗначенияСвойств[3];
	СамочувствиеОбъект.Самочувствие = ЗначенияСвойств[4];
	СамочувствиеОбъект.ПовышеннаяТемпература = ЗначенияСвойств[5];
	СамочувствиеОбъект.ДатаЗамера = ДатаЗамера;
	IDТочкаЗамера = Новый УникальныйИдентификатор(ЗначенияСвойств[7]);
	СсылкаТочкаЗамера = Справочники.ГрафикУчетаСамочувствияСотрудников.ПолучитьСсылку(IDТочкаЗамера);
	СамочувствиеОбъект.ТочкаЗамера = СсылкаТочкаЗамера;
		
	Попытка
		СамочувствиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		СамочувствиеОбъект.Записать();
		
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Самочувствие ""%1"" не было проведено по причине %2'"), Строка(СамочувствиеСсылка),
			ОписаниеОшибки());
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область ЗаписьИзмененногоСостоянияПриглашения
Процедура ЗаписатьСостояниеПриглашенияНаМероприятие(ЗначенияСвойств, МобильноеПриложение);
	
	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьСостояниеПриглашенияНаМероприятиеВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;
	
КонецПроцедуры		

Процедура ЗаписатьСостояниеПриглашенияНаМероприятиеВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);

	Мероприятие = Справочники.Мероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ЗначенияСвойств[1]));
	МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
	Если МероприятиеОбъект = Неопределено Тогда
		
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Мероприятие ""%1"" удалено или более недоступно'"), Строка(Мероприятие));
			
		ВызватьИсключение ТекстПредупреждения;
		

	ИначеЕсли ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Мероприятие) Тогда
			
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Приглашение ""%1"" не было передано, 
			|т.к. мероприятие было изменено ранее на сервере.'"), Строка(Мероприятие));
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;
	
	СостояниеПриглашениеСтрока = ЗначенияСвойств[2];
	
	Попытка 
		
		Если ЗначениеЗаполнено(СостояниеПриглашениеСтрока) Тогда
			ИзмененноеСостояние = Перечисления.СостоянияПриглашения[СостояниеПриглашениеСтрока];
		Иначе
			ИзмененноеСостояние = Перечисления.СостоянияПриглашения.ПустаяСсылка();
		КонецЕсли;
		
		РегистрыСведений.УчастникиМероприятия.ИзменитьСостояниеПриглашения(Мероприятие, 
			ПользователиКлиентСервер.ТекущийПользователь(), ИзмененноеСостояние);
	Исключение
		
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Состояние приглашения на мероприятие ""%1"" не было передано по причине %2'"), Строка(Мероприятие),
			ОписаниеОшибки());
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецПопытки
		
КонецПроцедуры
#КонецОбласти

// Процедура - Записать подробную информацию о событии обмена
//
// Параметры:
//  ПараметрыСинхронизации	 - Структура - 
//   * ПодробныйПротоколОбмена - Булево - вести подробный протокол обмена с мобильным клиентом
//   * ПротоколируемыеТипы     - Соответствие - типы данных, для которых ведется расширенное протоколирование
//  МобильныйКлиент			 - ПланОбменаСсылка.Мобильный - 
//  Объект					 - Ссылка - Ссылка на объект, для которого записывается информация
//  ТекстСообщения			 - Строка - Информация об операции
//  СКлиента				 - Булево - Признак того, что информация формируется при записи данных полученных с клиента
//
Процедура ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильноеПриложение, 
	Объект, ТекстСообщения, СКлиента = Ложь) Экспорт

	Если Не ПараметрыСинхронизации.ПодробныйПротоколОбмена Тогда
		Возврат;
	КонецЕсли;

	ТипОбъекта= МП_СлужебныйПовтИсп.ТипПоСсылке(Объект);

	Если ПараметрыСинхронизации.ПротоколируемыеТипы.Найти(ТипОбъекта) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформациюПоОбъекту(
		ТекстСообщения, ТипОбъекта, Объект.УникальныйИдентификатор(), СКлиента,
		МобильноеПриложение);

КонецПроцедуры

Процедура ЗаписатьИдентификаторПодписчика(ЗначенияСвойств, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПользователиМобильногоПриложения");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		МобильноеПриложениеОбъект = МобильноеПриложение.ПолучитьОбъект();
		ИдентификаторКлиента = XMLЗначение(Тип("ХранилищеЗначения"), ЗначенияСвойств[1]);
		МобильноеПриложениеОбъект.ИдентификаторКлиента = ИдентификаторКлиента;
		
		Если ИдентификаторКлиента.Получить() = Неопределено Тогда
			МобильноеПриложениеОбъект.ИдентификаторУстановлен = Ложь;
		Иначе
			МобильноеПриложениеОбъект.ИдентификаторУстановлен = Истина;
		КонецЕсли;
		
		МобильноеПриложениеОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации("Идентификатор подписчика push-уведомления не был передан", 
			УровеньЖурналаРегистрации.Предупреждение, , , Строка(МобильноеПриложение));
		
	КонецПопытки;
	

КонецПроцедуры

#Область УчетВремени

Процедура ЗаписатьТрудозатрату(ЗначенияСвойств, МобильноеПриложение)
	
	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьТрудозатратуВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьТрудозатратуВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	День = Дата(ЗначенияСвойств[1]);

	НомерДобавления = ЗначенияСвойств[3];
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	РаботыЗаДень = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(День, ТекущийПользователь);
	
	ЕстьРаботыЗаДень = (РаботыЗаДень.Количество() = 0);
	
	Если ЕстьРаботыЗаДень И РегистрыСведений.МП_ИзмененныеТрудозатраты.ЕстьИзмененияПозжеГраницыОтправленныхДанных(
		МобильноеПриложение, ТекущийПользователь, День, НомерДобавления) Тогда
			
			// не продолжаем запись
			ТекстПредупреждения =
				"warning:" + СтрШаблон(
				НСтр("ru = 'Трудозатрата за день: ""%1"" с номером: ""%2"" не была передана, 
				|т.к. на сервере она была добавлена ранее.'"), формат(День,"ДФ='dd MMM yyyy'"), НомерДобавления);
				
			ВызватьИсключение ТекстПредупреждения;
	
	КонецЕсли;
	
	Подразделение = ПодразделениеПользователя(ТекущийПользователь);
	
	ЕжедневныйОтчет = ЕжОтчет("ЕжедневныйОтчет", День, ТекущийПользователь, Подразделение, ЗначенияСвойств[2]);
	
	НаборЗаписей = РегистрыСведений.ФактическиеТрудозатраты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.ДатаДобавления.Установить(КонецДня(День));
	НаборЗаписей.Отбор.НомерДобавления.Установить(НомерДобавления);
	Удалена = ЗначенияСвойств[10];
	Если Удалена Тогда
		МП_ИзмененияВызовСервера.ЗафиксироватьУдалениеЗаписиОТрудозатрате(ТекущийПользователь, День,
			НомерДобавления);

		НаборЗаписей.Записать();
		
	Иначе
		ЗаписьТрудозатрата = НаборЗаписей.Добавить();
		ЗаписьТрудозатрата.Пользователь = ТекущийПользователь;
		ЗаписьТрудозатрата.Подразделение = Подразделение;
		ЗаписьТрудозатрата.ДатаДобавления = КонецДня(День);
		ЗаписьТрудозатрата.НомерДобавления = НомерДобавления;
		
		ВидРабот = Справочники.ВидыРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначенияСвойств[4]));
		ЗаписьТрудозатрата.ВидРабот = ВидРабот;
		ЗаписьТрудозатрата.Начало = ЗначенияСвойств[5];
		ЗаписьТрудозатрата.Окончание = ЗначенияСвойств[6];
		
		Если ЗначениеЗаполнено(ЗначенияСвойств[7]) Тогда
			ПроектID = Новый УникальныйИдентификатор(ЗначенияСвойств[7]);
			Если ПроектID <> УникальныйИдентификаторПустой() Тогда
				Проект = Справочники.Проекты.ПолучитьСсылку(ПроектID);
				ЗаписьТрудозатрата.Проект = Проект;
			КонецЕсли;
		КонецЕсли;
		ЗаписьТрудозатрата.ОписаниеРаботы = ЗначенияСвойств[8];
		ЗаписьТрудозатрата.Длительность = ЗначенияСвойств[9];
		ЗаписьТрудозатрата.ЕжедневныйОтчет = ЕжедневныйОтчет;
		ЗаписьТрудозатрата.Источник = ЕжедневныйОтчет;
		ЗаписьТрудозатрата.Удалена = Удалена;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЕжедневныйОтчет(ЗначенияСвойств, МобильноеПриложение)
	
	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьЕжедневныйОтчетВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЕжедневныйОтчетВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	День = Дата(ЗначенияСвойств[1]);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ЕжедневныйОтчет = ЕжОтчет("ЕжедневныйОтчет", День, ТекущийПользователь);
		
	Если Не ЗначениеЗаполнено(ЕжедневныйОтчет) Тогда
		
		ЕжедневныйОтчет = Документы.ЕжедневныйОтчет.ПолучитьСсылку(Новый УникальныйИдентификатор(
			ЗначенияСвойств[2]));
			
		ЕжедневныйОтчетОбъект = Документы.ЕжедневныйОтчет.СоздатьДокумент();
		ЕжедневныйОтчетОбъект.УстановитьСсылкуНового(ЕжедневныйОтчет);
		ЕжедневныйОтчетОбъект.Подразделение = ПодразделениеПользователя(ТекущийПользователь);
	Иначе
		
		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ЕжедневныйОтчет) Тогда
			
			ТекстПредупреждения =
				"warning:" + СтрШаблон(
				НСтр("ru = 'Ежедневный отчет ""%1"" не был принят, так как был ранее изменен на сервере.'"),
				Строка(ЕжедневныйОтчет));
			
			ВызватьИсключение ТекстПредупреждения;
			
		КонецЕсли;

		ЕжедневныйОтчетОбъект = ЕжедневныйОтчет.ПолучитьОбъект();
	КонецЕсли;
	ЕжедневныйОтчетОбъект.Пользователь = ТекущийПользователь;
	ЕжедневныйОтчетОбъект.Дата = КонецДня(День);
	ЕжедневныйОтчетОбъект.ДлительностьРабот = ЗначенияСвойств[3];
	ЕжедневныйОтчетОбъект.ДлительностьРабочая = ЗначенияСвойств[4];
	ЕжедневныйОтчетОбъект.НачалоДня = Дата(ЗначенияСвойств[5]);
	ЕжедневныйОтчетОбъект.НекорректнаяДлительность = ЗначенияСвойств[6];
	ЕжедневныйОтчетОбъект.ОкончаниеДня = Дата(ЗначенияСвойств[7]);
	
	СпособыУказанияВремениСтрока = ЗначенияСвойств[8];
	Попытка
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени[СпособыУказанияВремениСтрока];
	Исключение
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность;
	КонецПопытки;
	
	ЕжедневныйОтчетОбъект.СпособУказанияВремени = СпособУказанияВремени;
	
	Попытка
		ЕжедневныйОтчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ЕжедневныйОтчетОбъект.Записать();
		
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Ежедневный отчет ""%1"" не был проведен по причине %2'"), Строка(ЕжедневныйОтчет),
			ОписаниеОшибки());
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецПопытки;

	
КонецПроцедуры

Процедура ЗаписатьЕженедельныйОтчет(ЗначенияСвойств, МобильноеПриложение)
	
	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьЕженедельныйОтчетВерсия1(ЗначенияСвойств, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЕженедельныйОтчетВерсия1(ЗначенияСвойств, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	День = Дата(ЗначенияСвойств[1]);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Подразделение = ПодразделениеПользователя(ТекущийПользователь);
	
	ЕженедельныйОтчет = ЕжОтчет("ЕженедельныйОтчет", День, ТекущийПользователь);
		
	Если Не ЗначениеЗаполнено(ЕженедельныйОтчет) Тогда
		
		ЕженедельныйОтчет = Документы.ЕженедельныйОтчет.ПолучитьСсылку(Новый УникальныйИдентификатор(
			ЗначенияСвойств[2]));
			
		ЕженедельныйОтчетОбъект = Документы.ЕженедельныйОтчет.СоздатьДокумент();
		ЕженедельныйОтчетОбъект.УстановитьСсылкуНового(ЕженедельныйОтчет);
		
		СведенияОПользователе = РегистрыСведений.СведенияОПользователяхДокументооборот.ПолучитьСведенияОПользователе(
			ТекущийПользователь);
		
		Если СведенияОПользователе.Свойство("Подразделение") Тогда
			Подразделение = СведенияОПользователе.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		ЕженедельныйОтчетОбъект.Подразделение = Подразделение;
		
	Иначе
		
		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, ЕженедельныйОтчет) Тогда
			
			ТекстПредупреждения =
				"warning:" + СтрШаблон(
				НСтр("ru = 'Еженедельный отчет ""%1"" не был принят, так как был ранее изменен на сервере.'"),
				Строка(ЕженедельныйОтчет));
			
			ВызватьИсключение ТекстПредупреждения;
			
		КонецЕсли;

		ЕженедельныйОтчетОбъект = ЕженедельныйОтчет.ПолучитьОбъект();
	КонецЕсли;
	
	ЕженедельныйОтчетОбъект.Пользователь = ТекущийПользователь;
	ЕженедельныйОтчетОбъект.Дата = КонецДня(День);
	ЕженедельныйОтчетОбъект.ДлительностьРабот = ЗначенияСвойств[3];
	ЕженедельныйОтчетОбъект.ДлительностьРабочая = ЗначенияСвойств[4];
	ЕженедельныйОтчетОбъект.Достижения = ЗначенияСвойств[5];
	ЕженедельныйОтчетОбъект.Неудачи = ЗначенияСвойств[6];
	ЕженедельныйОтчетОбъект.Планы = ЗначенияСвойств[7];
	
	ДниНеделиМассивом = ЗначенияСвойств[8];
	
	Если ДниНеделиМассивом.Количество() > 0 Тогда
		
		ЕженедельныйОтчетОбъект.ДниНедели.Очистить();
		Для Каждого ДеньНеделиЭлемент Из ДниНеделиМассивом Цикл
			НоваяСтрока = ЕженедельныйОтчетОбъект.ДниНедели.Добавить();
			НоваяСтрока.ВидДня = Перечисления.ВидыДней[ДеньНеделиЭлемент[0]];
			НоваяСтрока.Дата = Дата(ДеньНеделиЭлемент[1]);
			НоваяСтрока.ДеньНедели = Перечисления.ДниНедели[ДеньНеделиЭлемент[2]];
			
			IDЕжедневногоОтчета = ДеньНеделиЭлемент[3];
			Если ЗначениеЗаполнено(IDЕжедневногоОтчета) Тогда
				НоваяСтрока.ЕжедневныйОтчет = ЕжОтчет("ЕжедневныйОтчет", НоваяСтрока.Дата, ТекущийПользователь, Подразделение,
					IDЕжедневногоОтчета);
			КонецЕсли;
			
			НоваяСтрока.НачалоДня = Дата(ДеньНеделиЭлемент[4]);
			НоваяСтрока.ОкончаниеДня = Дата(ДеньНеделиЭлемент[5]);
			НоваяСтрока.ДлительностьРабот = ДеньНеделиЭлемент[6];
			НоваяСтрока.ДлительностьРабочая = ДеньНеделиЭлемент[7];
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ЕженедельныйОтчетОбъект.Записать();
	Исключение
		
		ТекстПредупреждения =
			"warning:" + СтрШаблон(
			НСтр("ru = 'Ежедневный отчет ""%1"" не удалось записать по причине %2'"), Строка(ЕженедельныйОтчет),
			ОписаниеОшибки());
			
		ВызватьИсключение ТекстПредупреждения;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьПроцессВопрос(ЗначенияСвойств, МобильноеПриложение)

	Версия = ЗначенияСвойств[0];

	Если Версия >= "1" Тогда
		ЗаписатьПроцессВопросВерсия1(ЗначенияСвойств, МобильноеПриложение);	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПроцессВопросВерсия1(ЗначенияСвойств, МобильноеПриложение)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	ИД = ЗначенияСвойств[1];
	НаименованиеПроцесса = ЗначенияСвойств[2];
	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;
	
	Ссылка = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ПолучитьСсылку(Новый УникальныйИдентификатор(ИД));

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РешениеВопросовВыполненияЗадач.Ссылка
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Процесс = БизнесПроцессы.РешениеВопросовВыполненияЗадач.СоздатьБизнесПроцесс();
		Процесс.УстановитьСсылкуНового(Ссылка);
	Иначе
		
		Процесс = Ссылка.ПолучитьОбъект();
		
		ОбъектНайденНаСервере = Истина;

		Если ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Ссылка) Тогда

			ТекстПредупреждения = 
				"warning:" + 
				СтрШаблон(
					НСтр("ru = 'Вопрос ""%1"" не было передан, т.к. он был изменен на сервере. 
								|Настройка процесса на данном устройстве заменена версией с сервера.'"), НаименованиеПроцесса);

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

	КонецЕсли;

	ГлавнаяЗадачаСтрока = ЗначенияСвойств[9];
	
	Если Не ЗначениеЗаполнено(ГлавнаяЗадачаСтрока) Тогда
		
		ТекстПредупреждения = 
			"warning:" + 
			СтрШаблон(
			НСтр("ru = 'Вопрос ""%1"" не был передан, т.к. не указана задача'"), НаименованиеПроцесса);
		
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;

	
	ИДГлавнойЗадачи = Новый УникальныйИдентификатор(ГлавнаяЗадачаСтрока);
		
	СсылкаНаГлавнуюЗадачу = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИДГлавнойЗадачи);

	Процесс.ГлавнаяЗадача = СсылкаНаГлавнуюЗадачу;
	Процесс.ПредметРассмотрения = СсылкаНаГлавнуюЗадачу;
	
	Процесс.Наименование   = НаименованиеПроцесса;
	Процесс.Описание       = ЗначенияСвойств[3];
	Процесс.Автор          = ТекущийПользователь;
	Процесс.СрокИсполнения = Дата(ЗначенияСвойств[4]);
	
	Важность = ЗначенияСвойств[5];
	Если СтрСравнить(Важность, "low") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли СтрСравнить(Важность, "high") = 0 Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Процесс.Дата = Дата(ЗначенияСвойств[6]);
	Если Процесс.Дата = Дата(1,1,1) Тогда
		Процесс.Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	ТипИсполнителя      = ЗначенияСвойств[11];
	ИДИсполнителя = Новый УникальныйИдентификатор(ЗначенияСвойств[10]);
	
	Исполнитель = Неопределено;
	Если СтрСравнить(ТипИсполнителя, "User") = 0 Тогда
		Исполнитель = Справочники.Пользователи.ПолучитьСсылку(ИДИсполнителя);
		
	ИначеЕсли СтрСравнить(ТипИсполнителя, "Role") = 0 Тогда
		Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
		Справочники.РолиИсполнителей.ПолучитьСсылку(ИДИсполнителя), Неопределено, Неопределено);
	КонецЕсли;

	Процесс.ИнициаторПроцесса = Исполнитель;
	
	ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач[ЗначенияСвойств[12]];
	
	Процесс.ВидВопроса = ВидВопроса;
	Процесс.Записать();
	
	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Процесс.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Процесс.Ссылка);
	КонецЕсли;

	Если ЗначенияСвойств[8] = "Active"
		И Не Процесс.Стартован Тогда

		Процесс.Старт();

		ПараметрыЗаписи = Новый Структура("Старт", Истина);
		ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(
			Процесс.Ссылка, ПараметрыЗаписи);

	КонецЕсли;

	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПустаяСтруктураДанныхПостОбработки() Экспорт
	
	// Массив для пометки писем как готовых о отправке после полной обработки сообщения.
	// В этот массив записываются письма, отправленные на мобильном клиенте.
	ПисьмаКОтправке = Новый Массив;
	
	// Массив для сохранения информации о том, какие связи необходимо будет установить между объектами
	// после обработки данного сообщения.
	СвязиКУстановке = Новый Массив;
	
	ВходящиеСообщения = Новый Массив;
	
	СтруктураДанныхПостОбработки = Новый Структура();
	СтруктураДанныхПостОбработки.Вставить("ПисьмаКОтправке", ПисьмаКОтправке);
	СтруктураДанныхПостОбработки.Вставить("СвязиКУстановке", СвязиКУстановке);
	СтруктураДанныхПостОбработки.Вставить("ВходящиеСообщения", ВходящиеСообщения);
	
	Возврат СтруктураДанныхПостОбработки;
	
КонецФункции

функция ЕстьИзмененияПозжеГраницыОтправленныхДанных(МобильноеПриложение, Ссылка) Экспорт

	ЕстьИзмененияПозжеГраницыОтправленныхДанных = 
		РегистрыСведений.МП_ОтправленныеСсылочныеДанные.ЕстьИзмененияПозжеГраницыОтправленныхДанных(
			МобильноеПриложение, Ссылка);
	
	Возврат ЕстьИзмененияПозжеГраницыОтправленныхДанных;

КонецФункции

Процедура УстановкаСвязейПисем(МобильноеПриложение, СвязиКУстановке) Экспорт
	
	Если СвязиКУстановке.Количество() > 0 Тогда
		ОбменСМобильнымиСервер.УстановитьСвязиПисемПолученныхСМобильногоКлиента(МобильноеПриложение, СвязиКУстановке);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗафиксироватьПисьмаКОтправке(МобильноеПриложение, МассивПисем) Экспорт
	
	Если МассивПисем.Количество() > 0 Тогда
		ОбменСМобильнымиПочтаСервер.ОтправитьПисьмаПолученныеСМобильногоКлиента(МобильноеПриложение, МассивПисем);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕжОтчет(ИмяТипа, Период, Пользователь, Подразделение = Неопределено, ID = Неопределено)
	
	//Поиск ежедневного отчета за день:
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕжОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	&ЕжОтчет КАК ЕжОтчет
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЕжОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&День, ДЕНЬ)
		|	И НЕ ЕжОтчет.ПометкаУдаления
		|	И ЕжОтчет.Пользователь = &Пользователь";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕжОтчет", СтрШаблон("Документ.%1", ИмяТипа));
	Запрос.УстановитьПараметр("День", Период);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Если ID <> Неопределено Тогда
		ЕжОтчет = Документы[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
		ЕжОтчетОбъект = Документы[ИмяТипа].СоздатьДокумент();
		ЕжОтчетОбъект.УстановитьСсылкуНового(ЕжОтчет);
		Если Подразделение <> Неопределено Тогда
			ЕжОтчетОбъект.Подразделение = Подразделение;
		КонецЕсли;
		ЕжОтчетОбъект.Пользователь = Пользователь;
		ЕжОтчетОбъект.Дата = КонецДня(Период);
		ЕжОтчетОбъект.ОбменДанными.Загрузка = Истина;
		ЕжОтчетОбъект.Записать();
		Возврат ЕжОтчетОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПодразделениеПользователя(Пользователь)
	
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	СведенияОПользователе = 
		РегистрыСведений.СведенияОПользователяхДокументооборот.ПолучитьСведенияОПользователе(Пользователь);
	СведенияОПользователе.Свойство("Подразделение", Подразделение);
	
	Возврат Подразделение;
	
КонецФункции

#КонецОбласти




