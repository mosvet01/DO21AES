////////////////////////////////////////////////////////////////////////////////
// Помощник отправить (клиент): Содержит клиентские процедуры и функции для работы с помощником Отправить.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму помощника отправки для объектов.
//
// Параметры:
//  Объекты - Массив - список объектов для отправки.
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма из которой инициирована отправка.
//
Процедура ОтправитьОбъекты(Объекты, ФормаВладелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	РежимыРаботы = ПомощникОтправитьКлиентСервер;
	ПараметрыФормы.Вставить("РежимРаботы", РежимыРаботы.РежимРаботыОтправкаОбъектов());
	
	ПараметрыФормы.Вставить("ОбъектыОтправки", Объекты);
	
	ОткрытьФорму("ОбщаяФорма.ПомощникОтправить",
		ПараметрыФормы,
		ФормаВладелец);
	
КонецПроцедуры

// Открывает форму помощника для отправки процессов.
//
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма из которой инициирована отправка.
//  ТипыПроцессов - Массив, Строка, Неопределено - типы процессов в виде наименований процессов,
//                                                 доступные для выбора в помощнике.
//
Процедура ОтправитьПроцесс(ФормаВладелец, ТипыПроцессов = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьКлиентПереопределяемый.ПриОтправкеПроцесса(
		ФормаВладелец, ТипыПроцессов, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботы",
		ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПроцесса());
	
	Если ТипЗнч(ТипыПроцессов) = Тип("Массив") Тогда
		ТипыДляОбработки = ТипыПроцессов;
	ИначеЕсли ТипЗнч(ТипыПроцессов) = Тип("Строка") Тогда
		ТипыДляОбработки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипыПроцессов);
	Иначе
		ТипыДляОбработки = Новый Массив;
	КонецЕсли;
	
	ВозможныеВарианты = Новый Массив;
	
	Для Каждого ОбрабатываемыйТип Из ТипыДляОбработки Цикл
		
		Если ОбрабатываемыйТип = "ОбработкаВнутреннегоДокумента"
			Или ОбрабатываемыйТип = "ОбработкаВходящегоДокумента"
			Или ОбрабатываемыйТип = "ОбработкаИсходящегоДокумента" Тогда
			
			ВозможныеВарианты.Добавить(ОбрабатываемыйТип);
			Продолжить;
		КонецЕсли;
		
		Если ОбрабатываемыйТип = "Исполнение" Тогда
			ТипШаблона = Тип("СправочникСсылка.ШаблоныИсполнения");
		ИначеЕсли ОбрабатываемыйТип = "Ознакомление" Тогда
			ТипШаблона = Тип("СправочникСсылка.ШаблоныОзнакомления");
		ИначеЕсли ОбрабатываемыйТип = "Рассмотрение" Тогда
			ТипШаблона = Тип("СправочникСсылка.ШаблоныРассмотрения");
		ИначеЕсли ОбрабатываемыйТип = "Регистрация" Тогда
			ТипШаблона = Тип("СправочникСсылка.ШаблоныРегистрации");
		ИначеЕсли ОбрабатываемыйТип = "Согласование" Тогда
			ТипШаблона = Тип("СправочникСсылка.ШаблоныСогласования");
		ИначеЕсли ОбрабатываемыйТип = "Утверждение" Тогда
			ТипШаблона = Тип("СправочникСсылка.ШаблоныУтверждения");
		КонецЕсли;
		
		ВозможныеВарианты.Добавить(ТипШаблона);
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ВозможныеВарианты", ВозможныеВарианты);
	
	ОткрытьФорму("ОбщаяФорма.ПомощникОтправить",
		ПараметрыФормы,
		ФормаВладелец);
	
КонецПроцедуры

// Открывать форму помощника для отправки подзадачи по исходной задаче.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма из которой инициирована отправка.
//
Процедура ОтправитьПодзадачу(Задача, ФормаВладелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботы",
		ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПодзадачи());
	ПараметрыФормы.Вставить("ОбъектыОтправки", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача));
	
	ОткрытьФорму("ОбщаяФорма.ПомощникОтправить",
		ПараметрыФормы,
		ФормаВладелец);
	
КонецПроцедуры

// Открывать форму помощника для отправки пользователям.
//
// Параметры:
//  Пользователи - Массив - ссылки на пользователей.
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма из которой инициирована отправка.
//
Процедура ОтправитьПользователям(Пользователи, ФормаВладелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботы",
		ПомощникОтправитьКлиентСервер.РежимРаботыОтправкаПользователям());
	
	ПараметрыФормы.Вставить("ОбъектыОтправки", Пользователи);
	
	ОткрытьФорму("ОбщаяФорма.ПомощникОтправить",
		ПараметрыФормы,
		ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает выбор варианта отправки.
//
// Параметры:
//  Вариант - Произвольный - вариант отправки.
//  Параметры - Структура - см. ПомощникОтправить.ПараметрыВарианта
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма из которой инициирована обработка.
//
Процедура ОбработатьВыборВарианта(Вариант, Параметры, ФормаВладелец) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьКлиентПереопределяемый.ПриОбработкеВыбораВарианта(
		Вариант, Параметры, ФормаВладелец, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомощникОтправитьКлиентСервер.ЭтоВариантСоздатьПисьмоНаОсновании(Вариант) Тогда
		ОтправитьПоВариантуСоздатьПисьмоНаОсновании(Параметры);
	ИначеЕсли ПомощникОтправитьКлиентСервер.ЭтоВариантСозданияПроцесса(Вариант) Тогда
		ОтправитьПоВариантуСозданияПроцесса(Параметры);
	КонецЕсли;
	
	Оповестить("ЗакрытьФормуПомощникаОтправки",, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняется при нажатые на описание варианта в форме ПомощникОтправить.
//
Процедура ПриНажатииНаОписаниеВарианта(Элемент, ДанныеСобытия, СтандартнаяОбработка, Форма) Экспорт
	
	ОбзорПроцессовКлиент.ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВариантСоздатьПисьмоНаОсновании

// Инициирует отправку по варианту СоздатьПисьмоНаОсновании на клиенте.
//
// Параметры:
//  Параметры - Структура
//   * Объекты - Массив - объекты для отправки письмом.
//
Процедура ОтправитьПоВариантуСоздатьПисьмоНаОсновании(Параметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПомощникОтправитьКлиентПереопределяемый.ПриОтправкеПоВариантуСоздатьПисьмоНаОсновании(
		Параметры, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Объекты.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрано ни одного документа или файла!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объекты", Параметры.Объекты);
	ОткрытьФорму(
		"Обработка.ПочтовоеСообщение.Форма.Форма",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВариантыСозданияПроцессов

// Инициирует отправку по варианту создания процесса на клиенте.
//
// Параметры:
//  Параметры - Структура - поля структуры зависят от переданного варианта.
//   * Основание - Структура - основание заполенние.
//      ** Шаблон - ссылкан на шаблон процесса (вариант отправки).
//      ** ЗадачаИсполнителя - ссылка на задачу (объект отправки).
//      ** Исполнители - Массив - список пользователей.
//      ** Предметы - Массив - список предметов для создаваемого процесса.
//          *** Структура с полями: Предмет, ИмяПредмета, РольПредмета
//   * ИмяФормы - Строка
//
Процедура ОтправитьПоВариантуСозданияПроцесса(Параметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Основание", Параметры.Основание);
	
#Если МобильныйКлиент Тогда
	Если Параметры.ИмяФормы = "БизнесПроцесс.КомплексныйПроцесс.Форма.ФормаБизнесПроцесса" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Создание комплексного процесса не поддерживается в мобильном клиенте.'"));
		Возврат;
	КонецЕсли;
#КонецЕсли

	ОткрытьФорму(Параметры.ИмяФормы, ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти