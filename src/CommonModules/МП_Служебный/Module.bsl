///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Инициирует обработку входящего сообщения и заполнения ответного сообщения.
//
// Параметры:
//  МобильноеПриложение	 - ссылка на элемент справочника ПользователиМобильныхПриложений;
//  ИсходящееСообщение	 - Ссылка на элемент справочника СообщенияИнтегрированныхСистем.
//
Процедура ВыполнитьСинхронизациюДанных(МобильноеПриложение, СтруктурыВходящихСообщений,
	ФормироватьПакетыОбмена = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСинхронизации = МП_СлужебныйПовтИсп.ПараметрыСинхронизации(МобильноеПриложение);
	
	Попытка
		
		МП_ОбработкаВходящегоСообщения.ЗаписатьИОбработатьВходящиеСообщения(МобильноеПриложение,
			СтруктурыВходящихСообщений, ПараметрыСинхронизации);
			
		Если формироватьПакетыОбмена Тогда
			ЕстьСинхронизируемыеОбласти = МП_Служебный.УКлиентаЕстьСинхронизируемыеОбласти();
			
			Если Не ЕстьСинхронизируемыеОбласти Тогда
				ТекстПредупреждения = СтрШаблон("warning:%1",
					НСтр("ru = 'Не включена синхронизация данных с мобильным клиентом.
					|C сервера на мобильный клиент не передаются никакие данные.
					|Необходимо зайти в персональные настройки в настольном клиенте и включить синхронизацию.'"));
					
				Попытка
					
					ВызватьИсключение ТекстПредупреждения;
					
				Исключение
					
					Инфо = ИнформацияОбОшибке();
					
					МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение,
						Инфо);
					
				КонецПопытки;
			КонецЕсли;

			МП_ФормированиеИсходящегоСообщения.ЗапуститьФормированиеСообщенийОбмена(МобильноеПриложение,
				ПараметрыСинхронизации);
			
		КонецЕсли;
		
	Исключение

		Инфо = ИнформацияОбОшибке();

		Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
			Возврат;
		КонецЕсли;

		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Ошибка'", 
			Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка, ,
			Строка(МобильноеПриложение),
			ПодробноеПредставлениеОшибки(Инфо));
			
		МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, Инфо);

		УстановитьПривилегированныйРежим(Истина);

		ВызватьИсключение Инфо;

	КонецПопытки;
	
КонецПроцедуры

// Проверяет наличие у клиента синхронизируемых областей данных.
// 
// Возвращаемое значение:
//  Булево - Истина если есть что синхронизировать.
//
Функция УКлиентаЕстьСинхронизируемыеОбласти() Экспорт

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СинхронизироватьПочту =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты);

	Если СинхронизироватьПочту Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьЗадачи =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач);

	Если СинхронизироватьЗадачи Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьКалендарь =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря);

	Если СинхронизироватьКалендарь Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьКонтроль =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКонтроля);

	Если СинхронизироватьКонтроль Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьОтсутствия =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияОтсутствий);

	Если СинхронизироватьОтсутствия Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьСамочувствия =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияСамочувствий);

	Если СинхронизироватьСамочувствия Тогда
		Возврат Истина;
	КонецЕсли;
	
	СинхронизироватьМероприятия =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияМероприятий);

	Если СинхронизироватьМероприятия Тогда
		Возврат Истина;
	КонецЕсли;
	
	СинхронизироватьУчетВремени =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияУчетаВремени);

	Если СинхронизироватьУчетВремени Тогда
		Возврат Истина;
	КонецЕсли;
	
	СинхронизироватьАдреснуюКнигу =
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияАдреснойКниги);

	Если СинхронизироватьАдреснуюКнигу Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область РаботаССообщениямиОбмена

// Выполняет запуск фонового задания обработки данных с мобильного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  ИмяМетода       - Строка - Имя метода который будет запущен как фоновое задание.
//
Процедура ЗапуститьФоновоеЗадание(МобильноеПриложение, ПараметрыФоновогоЗадания, ИмяМетода) Экспорт

	// В клиент-серверном варианте и в файловом 8.3 сообщение принимается и готовится в 
	// фоновом задании. Это позволяет избежать таймаутов на стороне мобильного клиента, 
	// т.к. сообщение может долго приниматься и готовиться.
	
	СтруктураОтбора = Новый Структура("Наименование, Состояние, ИмяМетода", МобильноеПриложение.Код, СостояниеФоновогоЗадания.Активно, 
		ИмяМетода);
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);

	ЕстьАктивноеЗадание = МассивЗаданий.Количество() > 0;
	
	Если Не ЕстьАктивноеЗадание Тогда
		
		ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыФоновогоЗадания, 
			Новый УникальныйИдентификатор(), МобильноеПриложение.Код); // наименование фонового задания

	КонецЕсли;

КонецПроцедуры

// Создание нового сообщения интегрированных систем и помещение его в очередь. У сообщения 
// устанавливается признак того, что оно находится в стадии подготовки (процент готовности = 0).
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщенияИнтегрированныхСистем - Ссылка на сообщение.
//
Функция СоздатьИДобавитьСообщениеВОчередь(МобильноеПриложение) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Новый УникальныйИдентификатор;
	Сообщение.Входящее = Ложь;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();
    Сообщение.Записать();

	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(Сообщение, 0);
	
	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(МобильноеПриложение,
		Сообщение);
	
	Возврат Сообщение.Ссылка;
	
КонецФункции

// Записывает в очередь входящее сообщение
//
// Параметры:
//  МобильныйКлиент 	 - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  СообщениеОтСервера	 - ОбъектXDTO - Полученные сервером данные.
//
Процедура ЗаписатьВходящееСообщение(МобильноеПриложение, СтруктураВходящегоСообщения) Экспорт

	ДанныеСообщения = СтруктураВходящегоСообщения.ExchangeData;
	
	Если ДанныеСообщения = Неопределено Или ТипЗнч(ДанныеСообщения) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;

	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = СтруктураВходящегоСообщения.ID;
	Сообщение.Входящее = Истина;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();
	
	Сообщение.ДанныеСообщения = 
			Новый ХранилищеЗначения(ДанныеСообщения, Новый СжатиеДанных(9));
			
	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(МобильноеПриложение,
		Сообщение);

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьРазмер(Сообщение.Ссылка,
		ДанныеСообщения.Размер());

КонецПроцедуры

// Помечает сообщение обмена обработанным
//
// Параметры:
//  Сообщение - Справочник.СообщенияИнтегрированныхСистем - Сообщение обмена данными.
//
Процедура ПометитьСообщениеОбработанным(Сообщение) Экспорт

	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	Если Не СообщениеОбъект = Неопределено Тогда
		
		СообщениеОбъект.ДатаОбработки = ТекущаяДатаСеанса();
		СообщениеОбъект.ПометкаУдаления = Истина;
		СообщениеОбъект.Записать();

	КонецЕсли;

КонецПроцедуры 

#КонецОбласти // Работа с сообщениями обмена

#Область СлужебныеПроцедурыИФункции

//Используется для просмотра сообщения из списка справочника "СообщенияИнтегрированныхСистем"
Функция ПреобразоватьЗначениеВJSON(Значение, Отступ = "") Экспорт
	
	Разделитель = "";
   
    ТипЗн = ТипЗнч(Значение);

    Если ТипЗн = Тип("Строка") Тогда
        Стр = """" + Маскировать(Значение) + """";
		
	ИначеЕсли ТипЗн = Тип("Число") Или ТипЗнч(Значение) = Тип("Булево") Или ТипЗн = Тип("ДвоичныеДанные") 
		Или ТипЗн = Тип("ХранилищеЗначения") Тогда
			
		Стр = """" + XMLСтрока(Значение) + """";

    ИначеЕсли ТипЗн = Тип("Дата") Тогда
        Стр = """" +?(ЗначениеЗаполнено(Значение), XMLСтрока(Значение), "")+"""";

    ИначеЕсли ТипЗн = Тип("Структура") Тогда
		
		Стр = "{";
		
		Для Каждого Параметр Из Значение Цикл
			
			Стр = Стр + Разделитель + Символы.ПС + Отступ + """" + Параметр.Ключ + """:" + 
				ПреобразоватьЗначениеВJSON(Параметр.Значение, Отступ + Символы.Таб);
				
			Разделитель = ",";
			
		КонецЦикла;
		
		Стр = Стр + Символы.ПС + Отступ + "}";
		
	ИначеЕсли ТипЗн = Тип("Массив") Тогда
		
		Стр = "[";
		Для Каждого Элемент Из Значение Цикл
			
			Стр = Стр + Разделитель + Символы.ПС + Отступ + ПреобразоватьЗначениеВJSON(Элемент, Отступ);
			Разделитель = ",";
			
		КонецЦикла;
		
		Стр = Стр + Символы.ПС + Отступ + "]";
		
	ИначеЕсли ТипЗн = Тип("ТаблицаЗначений") Тогда
		
		Колонки = Значение.Колонки;
		
		Массив = Новый Массив;
		
		Для Каждого СтрокаТЗ Из Значение Цикл
            Структура=Новый Структура;
            Для Каждого Колонка Из Колонки Цикл
                Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя])
            КонецЦикла;
            Массив.Добавить(Структура);
        КонецЦикла;
		
		Стр = ПреобразоватьЗначениеВJSON(Массив, Отступ)

    ИначеЕсли Значение=Неопределено Тогда
		
		Стр = "null"
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗн) Тогда
		
		Если ОбщегоНазначения.ЭтоСправочник(Значение.Метаданные()) Тогда
			Массив = Новый Массив;
			Массив.Добавить(Значение.Метаданные().Имя);
			Массив.Добавить(Строка(Значение.УникальныйИдентификатор()));
			Массив.Добавить(Строка(Значение.Наименование));
			Стр = ПреобразоватьЗначениеВJSON(Массив, Отступ);
			
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(Значение.Метаданные()) Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(Значение.Метаданные().Имя);
			Массив.Добавить(Строка(Значение.УникальныйИдентификатор()));
			Массив.Добавить(Строка(Значение.Дата));
			Массив.Добавить(Строка(Значение.Номер));
			Стр = ПреобразоватьЗначениеВJSON(Массив, Отступ);
			
		КонецЕсли; 
		
	Иначе
		Стр = """" + Маскировать(Значение) + """";
    КонецЕсли;

    Возврат Стр
КонецФункции

Функция Маскировать(Знач Стр)
  
	Стр=СтрЗаменить(Стр,Символы.ПС,"\n");
    Стр=СтрЗаменить(Стр,Символы.ВК,"\r");
    Стр=СтрЗаменить(Стр,"""","\""");
    Стр=СтрЗаменить(Стр,"'","\'");
    Возврат Стр

КонецФункции

Функция РазделительПакетногоЗапроса() Экспорт
	
	Возврат "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";	
		
Конецфункции	

Функция ЭтоМобильноеПриложениеВерсии22(МобильноеПриложение) Экспорт
	
	 Возврат
	 	Лев(РегистрыСведений.СведенияОМобильныхКлиентах.ВерсияМобильногоПриложения(МобильноеПриложение), 3) = "2.2";
	
КонецФункции

Функция ОпределитьДатуУстареванияДанных(МобильноеПриложение, ПараметрыСинхронизации = Неопределено) Экспорт
	
	СрокУстареванияДанных = 0;
	
	Если ПараметрыСинхронизации <> Неопределено Тогда
		
		//ПервичнаяСинхронизация
		Если Не ЗначениеЗаполнено(ПараметрыСинхронизации.ПредыдущаяГраницаСборки) Тогда
			
			ДатаПервоначальнойЗагрузки =
				НачалоДня(ТекущаяДатаСеанса() - ПараметрыСинхронизации.ПериодПервичнойЗагрузки*86400);
			
			РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьДатуПервоначальнойЗагрузкиДанных(
				МобильноеПриложение,
				ДатаПервоначальнойЗагрузки);
			
			Возврат ДатаПервоначальнойЗагрузки;
			
		Иначе
			
			// из сохраненной пользовательской настройки
			СрокУстареванияДанных = ПараметрыСинхронизации.СрокУстареванияДанных;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		
		СрокУстареванияДанных = РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			ТекущийПользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных);
			
	КонецЕсли;
	
	ДатаУстареванияДанных = НачалоДня(ТекущаяДатаСеанса() - (СрокУстареванияДанных * 86400));
	
	ДатаПервоначальнойЗагрузки = РегистрыСведений.СведенияОМобильныхКлиентах.ДатаПервоначальнойЗагрузки(
		МобильноеПриложение);
		
	Если ДатаУстареванияДанных < ДатаПервоначальнойЗагрузки Или СрокУстареванияДанных = 0 Тогда
		
		ДатаУстареванияДанных = ДатаПервоначальнойЗагрузки;
		
	КонецЕсли; 
		
	Возврат ДатаУстареванияДанных;
	
КонецФункции

Функция HTMLОписаниеМероприятия(Мероприятие) Экспорт
	
	ВТаблице = Перечисления.ТипыПрограммыПротокола.ВТаблице;
	
	РеквизитыМероприятия = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие,
		"ТипПротокола, ТипПрограммы, ВидМероприятия");
		
	ТипПротокола = РеквизитыМероприятия.ТипПротокола;
	ТипПрограммы = РеквизитыМероприятия.ТипПрограммы;
	ПротокольноеМероприятие = РеквизитыМероприятия.ВидМероприятия.ПротокольноеМероприятие;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьДатуИМестоПроведения", Истина);
	ПараметрыПечати.Вставить("ВыводитьУчастников", Истина);
	ПараметрыПечати.Вставить("ВыводитьОрганизацию", Истина);
	ПараметрыПечати.Вставить("ВыводитьОрганизатора", Истина);
	
	Если ПротокольноеМероприятие Тогда 
		ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Истина);
	Иначе
		ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Ложь);
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьПрограмму", ТипПрограммы = ВТаблице);
		
	ПараметрыПечати.Вставить("ВыводитьПротокол", (ТипПротокола = ВТаблице И ПротокольноеМероприятие));
	
	РезультатHTML = 
		"<html>
		|<head>
		|	<meta name=""viewport"" %content% http-equiv=""Content-Type""/>
		|</head>
		|<body>
		|	<div style = ""font-family:Arial;font-size:14px;"">";
	РезультатHTML = СтрЗаменить(РезультатHTML, "%content%", "content = ""text/html, width=320, initial-scale=1""");

	РезультатHTML  = РезультатHTML + "<style type=""text/css"">
		|TABLE {
		|border-collapse: collapse; /* Убираем двойные линии между ячейками */
		|}
		|TD, TH {
		|padding: 3px; /* Поля вокруг содержимого таблицы */
		| border: 1px solid black; /* Параметры рамки */
		|}
		|TH {
		| background: #b0e0e6; /* Цвет фона */
		|}
		|</style>
		|<body contentEditable=false>";

	// Получаем запросом необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТМероприятия
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Ссылка = &Мероприятие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.Наименование + "" ("" + ВидыМероприятий.Наименование + "")"" КАК Наименование,
		|	Мероприятия.МестоПроведения КАК МестоПроведения,
		|	Мероприятия.ДатаНачалаФакт КАК ДатаНачалаФакт,
		|	Мероприятия.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
		|	Мероприятия.Председатель КАК Председатель,
		|	Мероприятия.Секретарь КАК Секретарь,
		|	Мероприятия.ДатаНачала КАК ДатаНачала,
		|	Мероприятия.ДатаОкончания КАК ДатаОкончания,
		|	Мероприятия.Организатор КАК Организатор,
		|	ВТМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	ВТМероприятия КАК ВТМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыМероприятий КАК ВидыМероприятий
		|			ПО Мероприятия.ВидМероприятия = ВидыМероприятий.Ссылка
		|		ПО ВТМероприятия.Ссылка = Мероприятия.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Программа.НомерПункта КАК НомерПункта,
		|	Программа.Содержание КАК Содержание,
		|	Программа.Исполнитель КАК Исполнитель,
		|	Программа.Ссылка КАК Ссылка,
		|	Программа.ВремяПлан КАК ВремяПлан,
		|	Программа.Начало КАК Начало,
		|	Программа.Окончание КАК Окончание,
		|	Программа.ВремяФакт КАК ВремяФакт
		|ИЗ
		|	Справочник.Мероприятия.Программа КАК Программа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМероприятия КАК ВТМероприятия
		|		ПО Программа.Ссылка = ВТМероприятия.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	НомерПункта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПротоколМероприятия.Ссылка КАК Ссылка,
		|	ПротоколМероприятия.НомерСтроки КАК НомерСтроки,
		|	ПротоколыМероприятий.Ответственный КАК Исполнитель,
		|	ПротоколыМероприятий.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
		|	ПротоколыМероприятий.Слушали КАК Слушали,
		|	ПротоколыМероприятий.Выступили КАК Выступили,
		|	ПротоколыМероприятий.Решили КАК Решили,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса КАК СрокИсполнения,
		|	0 КАК НомерПунктаПротокола,
		|	ПротоколыМероприятий.Ссылка КАК Протокол,
		|	ПротоколыМероприятий.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Мероприятия.Протокол КАК ПротоколМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ПО (ПротоколМероприятия.ПунктПротокола = ПротоколыМероприятий.Ссылка)
		|		И (ПротоколМероприятия.Ссылка = ПротоколыМероприятий.Владелец)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМероприятия КАК ВТМероприятия
		|		ПО (ПротоколМероприятия.Ссылка = ВТМероприятия.Ссылка)
		|ГДЕ
		|	ПротоколыМероприятий.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	ПротоколМероприятия.НомерПунктаПрограммы,
		|	ПротоколМероприятия.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиМероприятия.Исполнитель КАК Исполнитель,
		|	УчастникиМероприятия.СостояниеПриглашения КАК СостояниеПриглашения
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМероприятия КАК ВТМероприятия
		|		ПО УчастникиМероприятия.Мероприятие = ВТМероприятия.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Исполнитель
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаголовок = Результаты[1].Выбрать();
	Программа = Результаты[2].Выгрузить();
	ТаблицаПротокол = Результаты[3].Выгрузить();
	
	Участники = Результаты[4].Выбрать();
		
	ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
	
	Если Не ВыборкаЗаголовок.Следующий() Тогда
		Возврат РезультатHTML;
	КонецЕсли;
		
	// Вывод заголовка
	Если ПараметрыПечати.ВыводитьОрганизацию Тогда
		НаименованиеПредприятия = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(ВыборкаЗаголовок.Организация);
		Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Организация'; en = 'Organization'"), НаименованиеПредприятия); 
		КонецЕсли;	
			
	КонецЕсли;
	
	РезультатHTML = РезультатHTML + "<b>" + ВыборкаЗаголовок.Наименование + "</b>";
	
	// Вывод тела
	Если ПараметрыПечати.ВыводитьДатуИМестоПроведения Тогда 
		
		// Вывод даты и места
		МестнаяДатаНачала = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаЗаголовок.ДатаНачала);
		МестнаяДатаОкончания = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаЗаголовок.ДатаОкончания);
		Если НачалоДня(МестнаяДатаОкончания) - НачалоДня(МестнаяДатаНачала) = 0 Тогда
			ДатаПроведения = Формат(МестнаяДатаНачала, "ДФ=dd.MM.yyyy");
			ВремяПроведения = Формат(МестнаяДатаНачала, "ДФ=ЧЧ:мм")
				+ " - "
				+ Формат(МестнаяДатаОкончания, "ДФ=ЧЧ:мм");
				
			Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
				ВремяПроведения = ВремяПроведения + " " + ПредставлениеМестногоЧасовогоПояса;
			КонецЕсли;
			
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Дата проведения'; en = 'The date of the'"), 
				ДатаПроведения);
				
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Время проведения'; en = 'Spend time'"), 
				ВремяПроведения);
				
		Иначе
			ДатаНачала = Формат(МестнаяДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
				ДатаНачала = ДатаНачала + " " + ПредставлениеМестногоЧасовогоПояса;
			КонецЕсли;
			ДатаОкончания = Формат(МестнаяДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Дата'; en = 'Date'"), 
				Строка(ДатаНачала + " - "+ ДатаОкончания));

		КонецЕсли;
		
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Место проведения'; en = 'Location'"), 
			ВыборкаЗаголовок.МестоПроведения);
			
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
		// Вывод председателя и секретаря
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Председатель'; en = 'Сhairman'"), 
			Строка(ВыборкаЗаголовок.Председатель));
			
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Секретарь'; en = 'Secretary'"), 
			Строка(ВыборкаЗаголовок.Секретарь));
		
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьОрганизатора Тогда 
		// Вывод организатора
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Организатор'; en = 'Organizer'"), 
			Строка(ВыборкаЗаголовок.Организатор));
		
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьУчастников Тогда 
		// Вывод участников
		НачатьГруппировкуHTML(РезультатHTML, НСтр("ru = 'Участники:'; en = 'Members'"));
		
		РезультатHTML = РезультатHTML + "<table>
			|<tr>
			|<th style = ""font-family:Arial;font-size:14px;""> № </th>
			|<th style = ""font-family:Arial;font-size:14px;""> Участник </th>
			|<th style = ""font-family:Arial;font-size:14px;""> Приглашение </th>
			|</tr>";
		Сч = 1;	
		Пока Участники.Следующий() Цикл
			
			РезультатHTML = РезультатHTML +
			    СтрШаблон(
				"<tr>
				|<td style = ""font-family:Arial;font-size:14px;""> %1 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %2 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %3 </td>
				|<tr>", Сч, Участники.Исполнитель, Участники.СостояниеПриглашения);
			
			Сч = Сч + 1;
		КонецЦикла;
		
		РезультатHTML = РезультатHTML + "</table>";
		
		ЗакончитьГруппировкуHTML(РезультатHTML);
		
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьПрограмму И Программа.Количество() Тогда 
		
		// Вывод программы
		НачатьГруппировкуHTML(РезультатHTML, НСтр("ru = 'Программа:'; en = 'Program'"));
		РезультатHTML = РезультатHTML + "<table>
				|<tr>
				|<th style = ""font-family:Arial;font-size:14px;""> № </th>
				|<th style = ""font-family:Arial;font-size:14px;""> Содержание </th>
				|<th style = ""font-family:Arial;font-size:14px;""> Исполнитель </th>
				|<th style = ""font-family:Arial;font-size:14px;""> Время </th>
				|</tr>";
			
		Для Каждого СтрокаПрограммы Из Программа Цикл
			
			МестнаяНачало = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(СтрокаПрограммы.Начало);
			МестнаяОкончание = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(СтрокаПрограммы.Окончание);
			Если ЗначениеЗаполнено(МестнаяНачало) И ЗначениеЗаполнено(МестнаяОкончание) Тогда 
				Время =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'с %1 по %2'; en = ''"),
						Формат(МестнаяНачало, "ДФ=ЧЧ:мм"),
						Формат(МестнаяОкончание, "ДФ=ЧЧ:мм"));
			ИначеЕсли ЗначениеЗаполнено(СтрокаПрограммы.ВремяПлан) Тогда
				Время = 
					НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремени(СтрокаПрограммы.ВремяПлан, Ложь, Ложь);
			КонецЕсли;

			РезультатHTML = РезультатHTML +
			    СтрШаблон(
				"<tr>
				|<td style = ""font-family:Arial;font-size:14px;""> %1 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %2 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %3 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %4 </td>
				|<tr>", СтрокаПрограммы.НомерПункта, СтрокаПрограммы.Содержание, Строка(СтрокаПрограммы.Исполнитель), Время);
			
		КонецЦикла;
				
		РезультатHTML = РезультатHTML + "</table>";
		
		ЗакончитьГруппировкуHTML(РезультатHTML);
		
	КонецЕсли;
		
	Если ПараметрыПечати.ВыводитьПротокол И ТаблицаПротокол.Количество() Тогда 
		
		НачатьГруппировкуHTML(РезультатHTML, НСтр("ru = 'Протокол:'; en = 'Protocol:'"));
		УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(ТаблицаПротокол);
		
		Для Каждого СтрокаПротокола Из ТаблицаПротокол Цикл
			
			СтрокаПункта = Программа.Найти(СтрокаПротокола.НомерПунктаПротокола, "НомерПункта");
			
			Если СтрокаПункта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НачатьГруппировкуHTML(РезультатHTML,
				Строка(СтрокаПункта.НомерПункта) + ". " + """" + СтрокаПункта.Содержание + """",
				Ложь);

			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Слушали'; en = 'Listened'"), 
				СтрокаПротокола.Слушали, Истина);
				
			Если ЗначениеЗаполнено(СтрокаПротокола.Выступили) Тогда
				РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Выступили'; en = 'Made'"), 
					СтрокаПротокола.Выступили, Истина);
			КонецЕсли;
				
			Решили = СтрокаПротокола.Решили;
			Если ЗначениеЗаполнено(СтрокаПротокола.Исполнитель) Тогда 
				Решили = Решили +
					НСтр("ru = 'Ответственный:'; en = 'Responsible'") +
					" " +
					Строка(СтрокаПротокола.Исполнитель);
				
				Если ЗначениеЗаполнено(СтрокаПротокола.СрокИсполнения) Тогда 
					Решили = Решили 
					+ НСтр("ru = 'Срок:'; en = 'Term'") + " "
					+ Формат(СтрокаПротокола.СрокИсполнения, "ДЛФ=D");
				КонецЕсли;		
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(Решили) Тогда
				РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Решили'; en = 'Have decided'"), 
					Решили,
					Истина);
			КонецЕсли;
				
			ЗакончитьГруппировкуHTML(РезультатHTML);
			
		КонецЦикла;
		
		ЗакончитьГруппировкуHTML(РезультатHTML);
		
	КонецЕсли;
		
	РезультатHTML = РезультатHTML + "</html>";
	
	Возврат РезультатHTML;
	
КонецФункции

Функция РеквизитВHtml(ИмяРеквизита, ЗначениеРеквизита, Вертикально = Ложь, Картинка = Неопределено)

	ЗначениеРеквизитаСтр = "&nbsp;";

	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда

		Если ТипЗнч(ЗначениеРеквизита) <> Тип("Строка") Тогда
			ЗначениеРеквизитаСтр = Строка(ЗначениеРеквизита);
		Иначе
			ЗначениеРеквизитаСтр = ЗначениеРеквизита;
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(Картинка) Тогда
		Если ТипЗнч(Картинка) = Тип("Картинка") Тогда
			ДвоичныеДанныеФото = Картинка.ПолучитьДвоичныеДанные();
			Формат = Строка(Картинка.Формат());
		Иначе
			ДвоичныеДанныеФото = Неопределено;
			Формат = ФорматКартинки.НеизвестныйФормат;
		КонецЕсли;

		СтрокаИсточника = "data:image/" + Формат + ";base64," + Base64Строка(ДвоичныеДанныеФото);
		ЗначениеКартинки = СтрШаблон("<img border=""0"" src=""%1"" height = ""#height"">", СтрокаИсточника);
	Иначе
		ЗначениеКартинки = "";
	КонецЕсли;

	Если Вертикально Тогда
		Результат = "<p><b>" + ИмяРеквизита + ":</b></p><p>" + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	Иначе
		Результат = "<p><b>" + ИмяРеквизита + ":</b> " + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура НачатьГруппировкуHTML(ТекстHTML, Заголовок, Открыть = Истина)
	
	ТекстHTML = ТекстHTML + "<details" + ?(Открыть, " open = ""open""", "")+ ">
		|<summary> <b> <u>" + ВРег(Заголовок) + " </u> </b> </summary>";
	
КонецПроцедуры

Процедура ЗакончитьГруппировкуHTML(ТекстHTML)
	
	ТекстHTML = ТекстHTML + "</details> <br>";
	
КонецПроцедуры

//Прибавляет к общему тексту запроса поле "КонтактнаяИнформация"
//Параметры:
//	ТекстЗапроса - Строка - исходный текст запроса
//	ИмяТаблицыВладельца - Строка - имя таблицы справочника, содержащего ТЧ "КонтактнаяИнформация"
//	ИмяПараметраЗамены - Строка - Имя параметра, который нужно заменить для добавления поля
функция ПолеКИВТекстЗапроса(ТекстЗапроса, ИмяТаблицыВладельца, ИмяПараметраЗамены = "&КонтактнаяИнформация") Экспорт
	
	ТекстЗапросаКИ = СтрШаблон(" %1.КонтактнаяИнформация.(
		|	Тип КАК Тип,
		|	Представление КАК Представление,
		|	НомерТелефона КАК НомерТелефона
		|	) КАК КонтактнаяИнформация", ИмяТаблицыВладельца);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметраЗамены, ТекстЗапросаКИ);
	
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

