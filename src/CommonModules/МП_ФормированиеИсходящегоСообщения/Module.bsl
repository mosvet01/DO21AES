
#Область фомированиеПакетовОбмена
// Выполняет запуск фоновых заданий по формированию сообщений обмена
//  Параметры:
//  МобильноеПриложение
// ПараметрыСинхронизации - Инициализированные параметры синхронизации в начале выполнения
//   синхронизации
Процедура ЗапуститьФормированиеСообщенийОбмена(МобильноеПриложение, ПараметрыСинхронизации) Экспорт
	
	ЭтоПервоначальнаяВыгрузка = Не ЗначениеЗаполнено(ПараметрыСинхронизации.ПредыдущаяГраницаСборки);

	Если Не ЭтоПервоначальнаяВыгрузка Тогда
		//Проверим версию приложения
		ВерсияПриложения = РегистрыСведений.СведенияОМобильныхКлиентах.ВерсияМобильногоПриложения(
			МобильноеПриложение);
		
		Если Не ЗначениеЗаполнено(ВерсияПриложения) Тогда
			
			ТекстПредупреждения = СтрШаблон("warning!%1", 
				НСтр("ru = 'Не удалось определить версию данных указанную клиентом в сообщении.
				|Необходимо выполнить синхронизацию заново.'"));
			
			ВызватьИсключение ТекстПредупреждения;
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МобильноеПриложение, "ПометкаУдаления") Тогда
			
			ТекстПредупреждения = СтрШаблон("warning!%1", 
				НСтр("ru = 'Мобильное приложение было отключено от сервера!'"));
			
			ВызватьИсключение ТекстПредупреждения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Если ЭтоПервоначальнаяВыгрузка Тогда
			//Запускаем 1 фоновое задание
			МП_Служебный.ЗапуститьФоновоеЗадание(МобильноеПриложение,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСинхронизации),
				"МП_ФормированиеИсходящегоСообщения.СформироватьПакетОбменаПервоначальнаяВыгрузкаДанных"); 
		Иначе 
			// получаем структуру изменений заголовки
			СтруктураРезультатовЗапросаЗаголовки = МП_Изменения.ИзмененияТолькоЗаголовки(
				ПараметрыСинхронизации);
			
			//Формируем пакет обмена "Только заголовки" в фоновом режиме
			МассивПараметровФоновогоЗадания = Новый Массив;
			МассивПараметровФоновогоЗадания.Добавить(СтруктураРезультатовЗапросаЗаголовки);
			МассивПараметровФоновогоЗадания.Добавить(ПараметрыСинхронизации);
			МП_Служебный.ЗапуститьФоновоеЗадание(МобильноеПриложение, МассивПараметровФоновогоЗадания,
				"МП_ФормированиеИсходящегоСообщения.СформироватьПакетОбменаЗаголовки");
			
			//Формируем пакет обмена "Остальное" в фоновом режим
			МП_Служебный.ЗапуститьФоновоеЗадание(МобильноеПриложение, МассивПараметровФоновогоЗадания,
				"МП_ФормированиеИсходящегоСообщения.СформироватьПакетОбменаОстальное");
		КонецЕсли;
		
	Исключение

		Инфо = ИнформацияОбОшибке();

		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным.Формирование сообщения'",
			Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , Строка(МобильноеПриложение), 
			ПодробноеПредставлениеОшибки(Инфо));
			
		ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, Инфо);

		ВызватьИсключение Инфо.Описание;

	КонецПопытки;

КонецПроцедуры

// Выполняет формирование сообщения для первичной выгрузки данных
//
// Параметры:
//  ПараметрыСинхронизации - Структура - Инициализированные параметры синхронизации в начале выполнения
//   синхронизации
//
Процедура СформироватьПакетОбменаПервоначальнаяВыгрузкаДанных(ПараметрыСинхронизации) Экспорт
	
	МобильноеПриложение = ПараметрыСинхронизации.МобильноеПриложение;
	Попытка
		
		ГраницаСборки = ПараметрыСинхронизации.ТекущаяГраницаСборки;
	
		ВыгруженныеДанные = МП_ПервоеПодключение.ПервоначальнаяВыгрузкаДанных(ПараметрыСинхронизации);
		
		ЗафиксироватьГраницуСборкиОтправленныхДанных(МобильноеПриложение,
			ВыгруженныеДанные,
			ГраницаСборки);
			
		РегистрыСведений.СведенияОМобильныхКлиентах.ОбновитьГраницуСборкиДанных(МобильноеПриложение, ГраницаСборки);
		
	Исключение
		
		МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение,
			ИнформацияОбОшибке());
			
	КонецПопытки;
	
КонецПроцедуры

// Выполняет формирование сообщения со всеми измененными с момента последней синхронизации данными
//  для части "ЗАГОЛОВКИ"
//
// Параметры:
//  ЗаголовкиДанных - Структура заголовков данных, переданных из процедуры - источника;
//  ПараметрыСинхронизации - Инициализированные параметры синхронизации в начале выполнения 
//   синхронизации
Процедура СформироватьПакетОбменаЗаголовки(ЗаголовкиДанных, ПараметрыСинхронизации) Экспорт
	
	Попытка
		
		МобильноеПриложение = ПараметрыСинхронизации.МобильноеПриложение;
			
		СтруктураСериализованныхДанных = ВыгружаемыеДанныеВJS(ЗаголовкиДанных);
		
		КоличествоОбъектов = СтруктураСериализованныхДанных.КоличествоОбъектов;
		
		Если КоличествоОбъектов > 0 Тогда
		
			МП_ФормированиеИсходящегоСообщения.ПоместитьДанныеВСообщениеОбмена(МобильноеПриложение,
				СтруктураСериализованныхДанных.ТекстJSON,
				СведенияОбИсходящемСообщении(КоличествоОбъектов));
		
		КонецЕсли;
		
	Исключение
			
		МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение,
			ИнформацияОбОшибке());
		
	КонецПопытки

КонецПроцедуры

// Выполняет формирование сообщения со всеми измененными с момента последней синхронизации данными
//  для части "ВСЕ ОСТАЛЬНОЕ"
//
// Параметры:
//  ЗаголовкиДанных - Структура заголовков данных, переданных из процедуры - источника;
//  ПараметрыСинхронизации - Инициализированные параметры синхронизации в начале выполнения 
//   синхронизации
Процедура СформироватьПакетОбменаОстальное(ЗаголовкиДанных, ПараметрыСинхронизации) Экспорт

	Попытка
		
		МобильноеПриложение = ПараметрыСинхронизации.МобильноеПриложение;

		КоличествоОбъектов = 0;
		
		//Необходимо получить изменения части "Все остальное"
		ОстальнаяЧастьДанных = МП_Изменения.ИзмененияВсеОстальное(ПараметрыСинхронизации, ЗаголовкиДанных);
		
		СтруктураСериализованныхДанных = ВыгружаемыеДанныеВJS(ОстальнаяЧастьДанных);
		
		КоличествоОбъектов = СтруктураСериализованныхДанных.КоличествоОбъектов;
		
		ТекущаяГраницаСборки = ПараметрыСинхронизации.ТекущаяГраницаСборки;
		
		Если КоличествоОбъектов > 0 Тогда
			
			МП_ФормированиеИсходящегоСообщения.ПоместитьДанныеВСообщениеОбмена(МобильноеПриложение, 
				СтруктураСериализованныхДанных.ТекстJSON, СведенияОбИсходящемСообщении(КоличествоОбъектов));
				
			ЗафиксироватьГраницуСборкиОтправленныхДанных(МобильноеПриложение,
				ЗаголовкиДанных,
				ТекущаяГраницаСборки);
			
			ЗафиксироватьГраницуСборкиОтправленныхДанных(МобильноеПриложение,
				ОстальнаяЧастьДанных,
				ТекущаяГраницаСборки);
			
		КонецЕсли;
		
		РегистрыСведений.СведенияОМобильныхКлиентах.ОбновитьГраницуСборкиДанных(МобильноеПриложение,
			ПараметрыСинхронизации.ТекущаяГраницаСборки);
			
	Исключение
			
		МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение,
			ИнформацияОбОшибке());
		
	КонецПопытки

КонецПроцедуры

#КонецОбласти

#Область ФормированиеСообщенияОбОшибке

// Формирует сообщение об ошибке и помещает его в очередь сообщений для мобильного клиента.
//  Клиент получит это сообщение и отобразит его пользователю.
//
// Параметры:
//  МобильноеПриложение - ссылка на элемент справочника "ПользователиМобильныхПриложений"
//  ИнформацияОбОшибке  - объект, содержащий информацию о произошедшей ошибке
//
Процедура ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, ИнформацияОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ЗаписатьОшибкуВПротоколПриОбмене(МобильноеПриложение, ИнформацияОбОшибке);

	ТипСобытиеПротокола = МП_СлужебныйПовтИсп.ТипСобытиеПротокола();
	
	СтруктураВыгружаемыхДанных = Новый Структура(ТипСобытиеПротокола, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураСобытиеПротокола(ИнформацияОбОшибке)));
		
	ЗаписьJS = Новый ЗаписьJSON;
	ЗаписьJS.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJS, СтруктураВыгружаемыхДанных);
	
	КоличествоОбъектов = 1;
	
	ПоместитьДанныеВСообщениеОбмена(МобильноеПриложение, ЗаписьJS.Закрыть(),
		СведенияОбИсходящемСообщении(КоличествоОбъектов));
	
КонецПроцедуры

// Записать ошибку произошедшую во время обмена в протокол работы с пользователем.
//
// Параметры:
//  МобильноеПриложение - ссылка на элемент справочника "ПользователиМобильныхПриложений"
//  ИнформацияОбОшибке  - объект, содержащий информацию о произошедшей ошибке
Процедура ЗаписатьОшибкуВПротоколПриОбмене(МобильноеПриложение, ИнформацияОбОшибке)

	Если ТипЗнч(ИнформацияОбОшибке) <> Тип("Строка") Тогда
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ПредставлениеОшибки = ИнформацияОбОшибке;
	КонецЕсли; 

	Если СтрНайти(ПредставлениеОшибки, "info:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрЗаменить(ПредставлениеОшибки, "info:", ""), Ложь, МобильноеПриложение);

	ИначеЕсли СтрНайти(ПредставлениеОшибки, "warning:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрЗаменить(ПредставлениеОшибки, "warning:", ""), Ложь, МобильноеПриложение);
			
	Иначе
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(ПредставлениеОшибки, 
			Ложь, МобильноеПриложение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПустыеСтруктурыКонструкторы

Функция ПустаяСтруктураСведенияОбИсходящемСообщенииИС() Экспорт
	
	Возврат Новый Структура("РазмерЧасти, НачалоПодготовки, КоличествоОбъектов");
	
КонецФункции

Функция ПустаяСтруктураПоТипу(Тип) Экспорт
	
	Если Тип = МП_СлужебныйПовтИсп.ТипСобытиеПротокола() Тогда 
		
		Возврат ПустаяСтруктураСобытиеПротокола();
	
	ИначеЕсли Тип = МП_СлужебныйПовтИсп.ТипПредметПроцесса() тогда 
		
		Возврат ПустаяСтруктураПредметПроцесса();
		
	ИначеЕсли Тип = МП_СлужебныйПовтИсп.ТипНастройкиСинхронизации() Тогда
		
		Возврат ПустаяСтруктураНастройкиСинхронизации();
		
	ИначеЕсли Тип = МП_СлужебныйПовтИсп.ТипФайл() Тогда
		
		Возврат ПустаяСтруктураФайл();
		
	ИначеЕсли Тип = МП_СлужебныйПовтИсп.ТипШаблонТекста() Тогда
		
		Возврат ПустаяСтруктураШаблонТекста();
		
	ИначеЕсли Тип = МП_СлужебныйПовтИсп.ТипПроцессИсполнения() Тогда
		
		Возврат ПустаяСтруктураПроцессИсполнения();
		
	ИначеЕсли Тип = МП_СлужебныйПовтИсп.ТипПроцессРВВЗ() Тогда
		
		Возврат ПустаяСтруктураПроцессВопрос();
	
	КонецЕсли;
	
КонецФункции

Функция ПустаяСтруктураПроцессИсполнения()
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка");
	Структура.Вставить("ПометкаУдаления");
	Структура.Вставить("Наименование");
	Структура.Вставить("Важность");
	Структура.Вставить("ДатаЗавершения");
	Структура.Вставить("ДатаСоздания");
	Структура.Вставить("ДатаСтарта");
	Структура.Вставить("Описание");
	Структура.Вставить("Остановлен");
	Структура.Вставить("Флаг");
	
	Возврат Структура;

КонецФункции

Функция ПустаяСтруктураПроцессВопрос()
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка");
	Структура.Вставить("ПометкаУдаления");
	Структура.Вставить("Наименование");
	Структура.Вставить("Важность");
	Структура.Вставить("ДатаЗавершения");
	Структура.Вставить("ДатаСоздания");
	Структура.Вставить("ДатаНачала");
	Структура.Вставить("Описание");
		
	Возврат Структура;

КонецФункции

Функция ПустаяСтруктураСобытиеПротокола() Экспорт
	
	Возврат Новый Структура("ТипСобытия, Описание");
	
КонецФункции

Функция ПустаяСтруктураФайл() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка");
	Структура.Вставить("ПометкаУдаления");
	Структура.Вставить("Наименование");
	Структура.Вставить("ВладелецФайла");
	Структура.Вставить("ТипВладельца");
	Структура.Вставить("Данные");
	Структура.Вставить("Размер");
	Структура.Вставить("Тип");
	Структура.Вставить("ФайлОснование");
	Структура.Вставить("ТолькоЗаголовок");
	Структура.Вставить("ИдентификаторПочтовогоВложения");
	Возврат Структура;

КонецФункции

Функция ПустаяСтруктураПредметПроцесса() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка");
	Структура.Вставить("ПометкаУдаления");
	Структура.Вставить("Детали");
	Структура.Вставить("ТипФайлаСДеталями");
	Структура.Вставить("НаКонтроле");
	Структура.Вставить("Наименование");
	
	Возврат Структура;

КонецФункции

Функция ПустаяСтруктураНастройкиСинхронизации() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ВидНастройки");
	Структура.Вставить("Значение");
	Структура.Вставить("НастройкаСтрокой");
	
	Возврат Структура;

КонецФункции

Функция ПустаяСтруктураШаблонТекста() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка");
	Структура.Вставить("ПометкаУдаления");
	Структура.Вставить("Наименование");
	Структура.Вставить("Шаблон");
	Структура.Вставить("ПодписьДляНовыхПисем");
	Структура.Вставить("ПодписьПриОтветеИПересылке");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область ЗаполняемыеСтруктурыДанных

Функция СведенияОбИсходящемСообщении(КоличествоОбъектов = Неопределено, РазмерЧасти = Неопределено) Экспорт
	
	СведенияОСообщении = ПустаяСтруктураСведенияОбИсходящемСообщенииИС();
	
	//Сообщения будет разделено на части согласно указанного размера части
	Если РазмерЧасти = Неопределено Тогда
		//по умолчанию - 5 МБ
		РазмерЧасти = 5 * 1024 * 1024;
	КонецЕсли; 
	
	СведенияОСообщении.РазмерЧасти = РазмерЧасти;
	
	Если КоличествоОбъектов = Неопределено Тогда
		КоличествоОбъектов = 1;
	КонецЕсли; 
	
	СведенияОСообщении.КоличествоОбъектов = КоличествоОбъектов;
	
	СведенияОСообщении.НачалоПодготовки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Возврат СведенияОСообщении
	
КонецФункции

// Выгружает полученные данные в структуру c ключами: "ТекстJSON", "КоличествоОбъектов"
//
// Параметры:
//  ВыгружаемыеДанные - Структура с выгружаемыми данными;
Функция ВыгружаемыеДанныеВJS(ВыгружаемыеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоОбъектов = 0;
	
	ЗаписьJS = Новый ЗаписьJSON;
	
	ЗаписьJS.УстановитьСтроку();
	
	ЗаписьJS.ЗаписатьНачалоОбъекта();
	
	Для Каждого КлючИЗначение Из ВыгружаемыеДанные Цикл
		
		ВыгружаемыйТипДанных = КлючИЗначение.Ключ;
		
		ВыгружаемаяТаблица = КлючИЗначение.Значение;
		
		Если ТипЗнч(ВыгружаемаяТаблица) = Тип("РезультатЗапроса") Тогда
			ВыгружаемаяТаблица = ВыгружаемаяТаблица.Выгрузить();
		КонецЕсли;

		ЗаписьJS.ЗаписатьИмяСвойства(ВыгружаемыйТипДанных);
		
		СериализоватьТаблицуВJS(ЗаписьJS, ВыгружаемаяТаблица);
		
		КоличествоОбъектов = КоличествоОбъектов + ВыгружаемаяТаблица.Количество();
		
	КонецЦикла; 
	
	ЗаписьJS.ЗаписатьКонецОбъекта();
	
	ТекстJSON = ЗаписьJS.Закрыть();
	
	Возврат Новый Структура("ТекстJSON, КоличествоОбъектов", ТекстJSON, КоличествоОбъектов);
	
КонецФункции

// Производит сериализацию переденной таблицы в JSON
//
// Параметры:
// ЗаписьJS - ЗаписьJSON - открытая в методе - источнике;
// Таблица = Исходная таблица значений для сериализации
Процедура СериализоватьТаблицуВJS(ЗаписьJS, Таблица)
	
	ЗаписьJS.ЗаписатьНачалоМассива();
	
	Колонки = Таблица.Колонки;
	
	ЕстьКолонкаВходящее = Колонки.Найти("Входящее") <> Неопределено;

	ЕстьКолонкаПометкаУдаления =  Колонки.Найти("ПометкаУдаления") <> Неопределено;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ЗаписьJS.ЗаписатьНачалоОбъекта();
		
		Если ЕстьКолонкаПометкаУдаления И СтрокаТаблицы.ПометкаУдаления = Истина Тогда
			//Если это пометка удаления, то сериализовать объект полностью - не нужно, записываем только
			// несколько свойств, необходимых для того, чтобы приемник понял - что будет удаление объекта.
			ДобавитьИнформациюОбУдаленииОбъекта(ЗаписьJS, СтрокаТаблицы);
			
			//Письма делятся на "Входящие" и "Исходящие". У таблицы таких объектов есть заполненная колонка "Входящее"
			Если ЕстьКолонкаВходящее Тогда
				ЗаписьJS.ЗаписатьИмяСвойства("Входящее");
				ЗаписьJS.ЗаписатьЗначение(СтрокаТаблицы.Входящее)
			КонецЕсли
			
		Иначе
			
			Для Каждого Колонка Из Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ЗначенияСвойства = СтрокаТаблицы[ИмяКолонки];
				
				ЗаписьJS.ЗаписатьИмяСвойства(ИмяКолонки);
				
				Если ТипЗнч(ЗначенияСвойства) = Тип("ТаблицаЗначений") Тогда
					
					СериализоватьТаблицуВJS(ЗаписьJS, СтрокаТаблицы[ИмяКолонки])
					
				Иначе
					
					ЗаписьJS.ЗаписатьЗначение(XMLСтрока(СтрокаТаблицы[ИмяКолонки]));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаписьJS.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьJS.ЗаписатьКонецМассива();
	
КонецПроцедуры

// Производит сериализацию объекта удаления
//
// Параметры:
// ЗаписьJS - ЗаписьJSON - открытая в методе - источнике;
// Таблица = Исходная таблица значений для сериализации
Процедура ДобавитьИнформациюОбУдаленииОбъекта(ЗаписьJS, Строка)
	
	//Передаем объект удаления
	ЗаписьJS.ЗаписатьИмяСвойства("Ссылка");
	
	ЗаписьJS.ЗаписатьЗначение(XMLСтрока(Строка["Ссылка"]));
	
	ЗаписьJS.ЗаписатьИмяСвойства("ПометкаУдаления");
	
	ЗаписьJS.ЗаписатьЗначение(Истина);
	
КонецПроцедуры

Функция СтруктураСобытиеПротокола(ЭлементДанных) Экспорт

	// Подготовка данных
	ТипЗаписи = "Error";
	Если ТипЗнч(ЭлементДанных) = Тип("Строка") Тогда
		ОписаниеОшибки = ЭлементДанных;
	Иначе
		Если СтрНайти(ЭлементДанных.Описание, "info:") Тогда
			ТипЗаписи = "Information";
		ИначеЕсли СтрНайти(ЭлементДанных.Описание, "warning:") Тогда
			ТипЗаписи = "Warning";
		КонецЕсли;
		ОписаниеОшибки = ЭлементДанных.Описание;
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "info:", "");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "warning:", "");
	КонецЕсли; 
	
	Если СтрСравнить(ТипЗаписи, "Error") = 0 Тогда

		Если ТипЗнч(ЭлементДанных) <> Тип("Строка") Тогда
			ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ЭлементДанных);
			ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "info:", "");
			ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "warning:", "");	
		КонецЕсли; 
		
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'При синхронизации на сервере произошла ошибка:
				|%1
				|
				|#Текст ошибки (для администратора):#
				|%2'"),
			ОписаниеОшибки, ПодробноеОписаниеОшибки);

	КонецЕсли;
	
	СтруктураДанных = ПустаяСтруктураПоТипу(МП_СлужебныйПовтИсп.ТипСобытиеПротокола());
	СтруктураДанных.ТипСобытия = ТипЗаписи;
	СтруктураДанных.Описание = ОписаниеОшибки;
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область ПомещениеВыгружаемыхДанныхВСообщениеОбмена

Процедура ПоместитьДанныеВСообщениеОбмена(МобильноеПриложение, СериализованныеДанные,
	СведенияОбИсходящемСообщении) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьДанных = Новый ЗаписьДанных(ИмяВременногоФайла);
	
	ЗаписьДанных.ЗаписатьСтроку(СериализованныеДанные, КодировкаТекста.UTF8);
	
	ЗаписьДанных.Закрыть();
	
	ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ЧастиДД = РазделитьДвоичныеДанные(ДД, СведенияОбИсходящемСообщении.РазмерЧасти);
	
	РазмерФайла = ДД.Размер();
	
	// Запись массива частей файла в содержательную часть сообщения интегрированных систем
	СообщениеОбъект = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	СообщениеОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
	СообщениеОбъект.Входящее = Ложь;
	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(ЧастиДД, Новый СжатиеДанных(9));
	СообщениеОбъект.ДатаСоздания = ТекущаяДата();
	ОкончаниеЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	СообщениеОбъект.Записать();
	
	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(МобильноеПриложение,
		СообщениеОбъект);
	
	ИсходящееСообщение = СообщениеОбъект.Ссылка;
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(НСтр("ru = 'Подготовлено сообщение %1 объемом %2 байт, количество объектов: %3'"),
			ИдентификаторСообщения, Строка(РазмерФайла), СведенияОбИсходящемСообщении.КоличествоОбъектов), 
			Ложь, МобильноеПриложение);
	
	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
		ИсходящееСообщение, РазмерФайла, СведенияОбИсходящемСообщении.КоличествоОбъектов);

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьВремяФормирования(ИсходящееСообщение,
		(ОкончаниеЗаполнения - СведенияОбИсходящемСообщении.НачалоПодготовки)/1000);

	УдалитьФайлы(ИмяВременногоФайла);

КонецПроцедуры

#КонецОбласти

//Фиксирует границу сборки отправленных данных
// Параметры:
//  ОтправленныеДанные - РезультатЗапроса, ТаблицаЗначений - Данные, помещенные в сообщение к выгрузке
//  МобильноеПриложение - СправочникСсылка.ПользователиМобильногоПриложения - Текущее мобильное приложение
//  ГраницаСборки - Число(15) - Универальная дата (в мс) в формате Число- граница сборки текущего сообщения
//
Процедура ЗафиксироватьГраницуСборкиОтправленныхДанных(МобильноеПриложение, ОтправленныеДанные, ГраницаСборки) Экспорт
	
	Для каждого КлючИЗначение Из ОтправленныеДанные Цикл
		
		ДанныеИзменений = КлючИЗначение.Значение;
		
		Если ТипЗнч(ДанныеИзменений) = Тип("РезультатЗапроса") Тогда
			ДанныеИзменений = ДанныеИзменений.Выгрузить();
		КонецЕсли; 
		
		Если ДанныеИзменений.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			//фиксируем границу сборки для отправленных данных
			РегистрыСведений.МП_ОтправленныеСсылочныеДанные.ДобавитьНаборЗаписейИзТаблицы(МобильноеПриложение,
				ДанныеИзменений,
				ГраницаСборки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


