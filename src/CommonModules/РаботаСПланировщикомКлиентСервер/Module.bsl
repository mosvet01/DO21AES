////////////////////////////////////////////////////////////////////////////////
// Работа с планировщиком (клиент-сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает выделенные даты в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
//
// Возвращаемое значение:
//  Массив - Выделенные даты.
//
Функция ВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции

// Возвращает дату начала периода.
//
// Параметры:
//  ПериодОтображения - ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//  ДатаПериода - Дата - Дата периода.
// 
// Возвращаемое значение:
//  Дата - Дата начала периода.
//
Функция ДатаНачалаПериода(ПериодОтображения, ДатаПериода) Экспорт
	
	ДатаНачалаПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(ДатаПериода));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Если НачалоДня(ДатаПериода) = НачалоДня(ТекущаяДата()) Тогда
			ДатаНачалаПериода = НачалоДня(ДатаПериода) - 2 * 86400; // 86400 - число секунд в сутках
		Иначе
			ДатаНачалаПериода = НачалоДня(ДатаПериода);
		КонецЕсли;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаНачалаПериода = НачалоДня(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаНачалаПериода = НачалоДня(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПериода = НачалоДня(ДатаПериода);
		
	КонецЕсли;
	
	Возврат ДатаНачалаПериода;
	
КонецФункции

// Возвращает дату окончания периода.
//
// Параметры:
//  ПериодОтображения - ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//  ДатаПериода - Дата - Дата периода.
// 
// Возвращаемое значение:
//  Дата - Дата окончания периода.
//
Функция ДатаОкончанияПериода(ПериодОтображения, ДатаПериода) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(ДатаПериода) + 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(ДатаПериода));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(ДатаПериода) + 6 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаОкончанияПериода = КонецДня(ДатаПериода) + 2 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаОкончанияПериода = КонецДня(ДатаПериода);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаОкончанияПериода = (НачалоДня(ДатаПериода) - 1) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный период отображения %1'"),
			ПериодОтображения);
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции

// Настраивает отображение планировщика.
// 
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
//
Процедура НастроитьПланировщик(Планировщик, НастройкиОтображения) Экспорт
	
	Планировщик.ОтображениеВремениЭлементов = НастройкиОтображения.НастройкаОтображениеВремениЭлементов;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	
	ПериодОтображения = ПериодОтображения(НастройкиОтображения);
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ОтображатьТекущуюДату = Истина;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		
	КонецЕсли;
	
	НастроитьТекущиеПериодыОтображения(Планировщик, НастройкиОтображения);
	НастроитьФонОбластиОтображения(Планировщик, НастройкиОтображения);
	НастроитьШкалуВремени(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Формирует пустое значение элемента планировщика.
// 
// Возвращаемое значение:
//  Структура - Значение элемента планировщика.
//   * Ссылка - ЛюбаяСсылка - Объект, представленный элементом.
//   * ДатаНачала - Дата - Дата начала.
//   * ДатаОкончания - Дата - Дата окончания.
//
Функция НовыйЗначениеЭлементаПланировщика() Экспорт
	
	ЭлементЗаписиКалендаря = Новый Структура("Ссылка, ДатаНачала, ДатаОкончания, ВесьДень");
	ЭлементЗаписиКалендаря.Ссылка = Неопределено;
	ЭлементЗаписиКалендаря.ВесьДень = Ложь;
	ЭлементЗаписиКалендаря.ДатаНачала = Дата(1, 1, 1);
	ЭлементЗаписиКалендаря.ДатаОкончания = Дата(1, 1, 1);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Формирует новый элемент дополнительного представления.
// 
// Возвращаемое значение:
//  Структура - Элемент дополнительного представления.
//   * ДополнительныйРеквизит - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Дополнительный реквизит.
//   * ЗначениеРеквизита - СправочникСсылка.ЗначенияСвойствОбъектов, СправочникСсылка.ЗначенияСвойствОбъектовИерархия - Значение реквизита.
//   * Представление - Строка - Представление.
//   * ИмяКартинки - Строка - Имя картинки.
//
Функция НовыйЭлементДополнительногоПредставления() Экспорт
	
	ЭлементПредставления = Новый Структура("ДополнительныйРеквизит, ЗначениеРеквизита, Представление, ИмяКартинки");
	ЭлементПредставления.ДополнительныйРеквизит = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка");
	ЭлементПредставления.ЗначениеРеквизита = Неопределено;
	ЭлементПредставления.Представление = "";
	ЭлементПредставления.ИмяКартинки = "";
	
	Возврат ЭлементПредставления;
	
КонецФункции

// Рассчитывает отступ с начала переноса шкалы времени планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
// 
// Возвращаемое значение:
//  Число - Отступ с начала переноса шкалы времени планировщика.
//
Функция ОтступСНачалаПереносаШкалыВремени(Планировщик, НастройкиОтображения) Экспорт
	
	ОтображатьВремяС = НастройкиОтображения.ОтображатьВремяС;
	Если Не НастройкиОтображения.ОтображатьСкрытыеЭлементы Тогда
		Возврат ОтображатьВремяС;
	КонецЕсли;
	
	Для Каждого Событие Из Планировщик.Элементы Цикл
		
		Если ОтображатьВремяС = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Событие.Значение.ВесьДень Тогда
			Продолжить;
		КонецЕсли;
		
		// Определяем час начала и окончания.
		// Если окончание приходится на начало дня - то час окончания 24.
		ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
		ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
		
		// Определяем минимальное время для отображения.
		// Час начала берем как есть.
		// Час окончания берем предыдущий.
		МинВремя = Мин(ЧасНачала, Макс(ЧасОкончания - 1, 0));
		Если МинВремя < ОтображатьВремяС Тогда
			ОтображатьВремяС = МинВремя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтображатьВремяС;
	
КонецФункции

// Рассчитывает отступ с конца переноса шкалы времени планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
// 
// Возвращаемое значение:
//  Число - Отступ с конца переноса шкалы времени планировщика.
//
Функция ОтступСКонцаПереносаШкалыВремени(Планировщик, НастройкиОтображения) Экспорт
	
	ОтображатьВремяПо = НастройкиОтображения.ОтображатьВремяПо;
	Если Не НастройкиОтображения.ОтображатьСкрытыеЭлементы Тогда
		Возврат ОтображатьВремяПо;
	КонецЕсли;
	
	Для Каждого Событие Из Планировщик.Элементы Цикл
		
		Если ОтображатьВремяПо = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Событие.Значение.ВесьДень Тогда
			Продолжить;
		КонецЕсли;
		
		// Определяем час начала и окончания.
		// Если окончание приходится на начало дня - то час окончания 24.
		ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
		ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
		
		// Определеяем максимальное время для отображения.
		// Час начала берем следующий.
		// Час окончания берем как есть, если час окончания приходится на начало часа, иначе следующий.
		СмещениеЧасаОкончания = ?(Событие.Конец = НачалоЧаса(Событие.Конец), 0, 1);
		МаксВремя = Макс(Мин(ЧасНачала + 1, 24), Мин(ЧасОкончания + СмещениеЧасаОкончания, 24));
		ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
		Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
			ОтображатьВремяПо = 24 - МаксВремя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтображатьВремяПо;
	
КонецФункции

// Возвращает период отображения с учетом настроек отображения.
//
// Параметры:
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//
Функция ПериодОтображения(НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ВыделенныеДаты.Количество() > 1 Тогда
		Если НастройкиОтображения.ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень");
		Иначе
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		КонецЕсли;
	Иначе
		ПериодОтображения = НастройкиОтображения.ПериодОтображения;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПериодОтображения) Тогда
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц");
	КонецЕсли;
	
	Возврат ПериодОтображения;
	
КонецФункции

// Возвращает период отображения соответсвующий виду просмотра.
//
// Параметры:
//  ВидПросмотра - ПеречислениеСсылка.ВидыПросмотраСпискаОбъектов - Вид просмотра.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//
Функция ПериодОтображенияПоВидуПросмотра(ВидПросмотра) Экспорт
	
	ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПустаяСсылка");
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень") Тогда
		
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю") Тогда
		
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя");
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц") Тогда
		
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц");
		
	Иначе
		
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц");
		
	КонецЕсли;
	
	Возврат ПериодОтображения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает общую дату начала для всех отображаемых периодов планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
// 
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ДатаНачалаОбщая(НастройкиОтображения)
	
	ДатаНачалаОбщая = Неопределено;
	ПериодОтображения = ПериодОтображения(НастройкиОтображения);
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты(НастройкиОтображения) Цикл
		
		ОтображаемаяДатаНачала = ДатаНачалаПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаНачалаОбщая = Неопределено Тогда
			ДатаНачалаОбщая = ОтображаемаяДатаНачала;
		Иначе
			ДатаНачалаОбщая = Мин(ДатаНачалаОбщая, ОтображаемаяДатаНачала);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаНачалаОбщая;
	
КонецФункции

// Возвращает общую дату окончания для всех отображаемых периодов планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
// 
// Возвращаемое значение:
//  Дата - Общая дата окончания.
//
Функция ДатаОкончанияОбщая(НастройкиОтображения)
	
	ДатаОкончанияОбщая = Неопределено;
	ПериодОтображения = ПериодОтображения(НастройкиОтображения);
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты(НастройкиОтображения) Цикл
		
		ОтображаемаяДатаОкончания = ДатаОкончанияПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаОкончанияОбщая = Неопределено Тогда
			ДатаОкончанияОбщая = ОтображаемаяДатаОкончания;
		Иначе
			ДатаОкончанияОбщая = Макс(ДатаОкончанияОбщая, ОтображаемаяДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОкончанияОбщая;
	
КонецФункции

// Настраивает текущие периоды отображения планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
//
Процедура НастроитьТекущиеПериодыОтображения(Планировщик, НастройкиОтображения)
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	ПериодОтображения = ПериодОтображения(НастройкиОтображения);
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты(НастройкиОтображения) Цикл
		Планировщик.ТекущиеПериодыОтображения.Добавить(
			ДатаНачалаПериода(ПериодОтображения, ВыделеннаяДата),
			ДатаОкончанияПериода(ПериодОтображения, ВыделеннаяДата));
	КонецЦикла;
	
КонецПроцедуры

// Настраивает фон области отображения планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
//
Процедура НастроитьФонОбластиОтображения(Планировщик, НастройкиОтображения)
	
	ДатаНачалаОбщая = ДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = ДатаОкончанияОбщая(НастройкиОтображения);
	Если Не ЗначениеЗаполнено(ДатаНачалаОбщая) Или Не ЗначениеЗаполнено(ДатаОкончанияОбщая) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалУжеНастроен = Ложь;
	Для Каждого ИнтервалФона Из Планировщик.ИнтервалыФона Цикл
		
		Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветФонаОбластиОтображения
			И ИнтервалФона.Начало = ДатаНачалаОбщая
			И ИнтервалФона.Конец = ДатаОкончанияОбщая Тогда
			ИнтервалУжеНастроен = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Если ИнтервалУжеНастроен Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалФонаОбластиОтображения = Планировщик.ИнтервалыФона.Добавить(ДатаНачалаОбщая, ДатаОкончанияОбщая);
	ИнтервалФонаОбластиОтображения.Цвет = НастройкиОтображения.ЦветФонаОбластиОтображения;
	
КонецПроцедуры

// Настаривает шкалу времени планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения планировщика. См. РаботаСПланировщиком.НастройкиОтображения().
//
Процедура НастроитьШкалуВремени(Планировщик, НастройкиОтображения)
	
	ПериодОтображения = ПериодОтображения(НастройкиОтображения);
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			Планировщик.ШкалаВремени.Элементы.Удалить(
				Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = НСтр("ru = 'ДФ=''ddd, d MMM yyyy'''");
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтступСНачалаПереносаШкалыВремени =
			ОтступСНачалаПереносаШкалыВремени(Планировщик, НастройкиОтображения);
		Планировщик.ОтступСКонцаПереносаШкалыВремени =
			ОтступСКонцаПереносаШкалыВремени(Планировщик, НастройкиОтображения);
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		ШкалаВремениЧас.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениЧас.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
		ШкалаВремениМинута.Формат = "";
		ШкалаВремениМинута.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениМинута.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ЦветФона = Новый Цвет();
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ddd, d MMM yyyy'";
		ШкалаВремени.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремени.ЦветФона = Новый Цвет();
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный период отображения %1'"),
			ПериодОтображения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти