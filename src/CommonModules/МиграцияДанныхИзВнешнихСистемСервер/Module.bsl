
#Область Выгрузка

// Регламентная выгрузка. Рег задание
Процедура РегламентнаяВыгрузка() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = КэшНастроек();
	
	Если Не Настройки.Выгружать Тогда
		УстановитьИспользованиеЗадания(Ложь);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемВыгрузка, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыгрузкаИстории(1, Настройки, Истина);
	Исключение
		Журналировать(НСтр("ru = 'Выгрузка.История'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузкаИзменений(1, Настройки);
	Исключение
		Журналировать(НСтр("ru = 'Выгрузка.Изменения'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
		Возврат;
	КонецПопытки;
	
	ДатаПоследняя = Константы.ДатаПоследнегоОбновленияВсегоЗаписейДляВыгрузки.Получить();
	Если ДатаПоследняя < ТекущаяДатаСеанса() - 86400 Тогда // прошло более суток
	
		// в РС заполним число Всего объектов.
		// потом запросом его найдем и выгрузим
		
		ЧислоВсего = 0;
		ЗаполнитьОчередьЧислоВсего(ЧислоВсего);
		
		ЗаписатьStartTxt(ЧислоВсего);
		
		Константы.ДатаПоследнегоОбновленияВсегоЗаписейДляВыгрузки.Установить(ТекущаяДата());
		
	КонецЕсли;	
	
КонецПроцедуры

// Выгрузка предисловия.
// 
// Параметры:
//  Очерёдность - Структура, Неопределено - Очерёдность:
// * ЭтоИзменения - Булево -
// * КоличествоВыгружено - Число -
// * Последовательность - Число -
// * Периодичность - Булево -
// * Порция - Число -
// * Объект 
// * ГраницаПорции 
// * НомерСообщения 
// * ВременныеТаблицы 
// * Изменение 
//  Настройки - Структура, Неопределено - Настройки:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
Процедура ВыгрузкаПредисловия(Очерёдность = Неопределено, Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;
	
	Буфер = Новый Структура();
	МиграцияДанныхИзВнешнихСистемСобытия.ЗаполнитьПредисловие(Буфер, Настройки,
		?(Очерёдность <> Неопределено И Очерёдность.ЭтоИзменения, Очерёдность.ВременныеТаблицы, Неопределено));
	
	Если Буфер.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Очерёдность <> Неопределено И Очерёдность.ЭтоИзменения Тогда
		НомерСообщения = Очерёдность.НомерСообщения;
	Иначе
		НомерСообщения = 0; 
	КонецЕсли;
	
	Для Каждого Выгрузка Из Буфер Цикл
		
		ИмяФайла = СтрШаблон("%1%2.%3.%4.%5.%6.%7.json",
			ТекущийКаталог(Очерёдность, Настройки),
			Формат(НомерСообщения, "ЧН=0; ЧГ=0"),
			"1",
			"0",
			"0",
			"0",
			Выгрузка.Ключ);
		
		Запись = Новый ЗаписьJSON();
		Запись.ОткрытьФайл(ИмяФайла,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
		СериализаторXDTO.ЗаписатьJSON(Запись, Выгрузка.Значение, НазначениеТипаXML.Явное);
		Запись.Закрыть();
		
		Выгрузка.Значение.Очистить();
	КонецЦикла;
	
	Буфер.Очистить();
	
КонецПроцедуры

// Выгрузка истории.
// 
// Параметры:
//  Поток - Число - Поток
//  Настройки - Структура, Неопределено - Настройки:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
//  ВыгружатьИзменения - Булево - Выгружать изменения
Процедура ВыгрузкаИстории(Поток = 0, Настройки = Неопределено, ВыгружатьИзменения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Настройки.Каталог) Тогда
		ВызватьИсключение(НСтр("ru = 'Не заполнен каталог выгрузки'"));		
	КонецЕсли;
	
	Если Настройки.Стадия = 3 Тогда
		ВыгрузкаПредисловия(, Настройки);
		Константы.ПереходСтадия.Установить(4);
		Настройки.Стадия = 4;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Очередь.Объект КАК Объект,
		|	Очередь.Объект.ПолноеИмя КАК ПолноеИмя,
		|	Очередь.Последовательность КАК Последовательность,
		|	Очередь.Периодичность КАК Периодичность,
		|	Очередь.ГраницаПорции КАК ГраницаХранилище,
		|	Очередь.ГраницаПериода КАК ГраницаПериода,
		|	Очередь.ПолеПериода КАК ПолеПериода,
		|	Очередь.ПолеПериодаОбязательное КАК ПолеПериодаОбязательное,
		|	Очередь.Порция КАК Порция,
		|	Очередь.ТочкаОстановки КАК ТочкаОстановки,
		|	Очередь.КоличествоВыгружено КАК КоличествоВыгружено,
		|	Очередь.ДатаЗаписи КАК ДатаЗаписи,
		|	ЛОЖЬ КАК ЭтоИзменения
		|ИЗ
		|	РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты КАК Очередь
		|ГДЕ
		|	Очередь.Выгружать = ИСТИНА
		|	И Очередь.Выгружено = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР КОГДА Очередь.Периодичность ТОГДА НАЧАЛОПЕРИОДА(Очередь.ГраницаПериода, ДЕНЬ) ИНАЧЕ ДАТАВРЕМЯ(3999,12,31) КОНЕЦ УБЫВ,
		|	Последовательность,
		|	Номер");
	
	ТекДата = ТекущаяУниверсальнаяДата();
	ВремяОбновления = ТекДата + 60;
	ВремяИзменений = ?(Константы.ПереходГраницаИзменений.Получить() = 0, ТекДата, '00010101' + Цел(Константы.ПереходГраницаИзменений.Получить()/1000)) + 3600;
	ВремяПерерыва = ТекДата + 3600*3;
	ПрерватьОчередь = Ложь;
	КлючБлокировки = Новый Структура("Объект,Последовательность");
	ИДБлокировки = Новый УникальныйИдентификатор();
	Кэш = Неопределено;
	ИменаМетаданных = Новый Соответствие;
	
	Очередь = Запрос.Выполнить().Выгрузить();
	Пока Очередь.Количество() Цикл
		
		Очередь.Колонки.Добавить("ГраницаПорции");
		Трафик = 0;
		
		Для Каждого Очерёдность Из Очередь Цикл
			
			Доступно = Истина;
			ЗаполнитьЗначенияСвойств(КлючБлокировки, Очерёдность);
			Попытка
				ЗаблокироватьДанныеДляРедактирования(
					РегистрыСведений.МиграцияДанныхИзВнешнихСистемОбъекты.СоздатьКлючЗаписи(КлючБлокировки),,
					ИДБлокировки);
			Исключение
				Доступно = Ложь;	
			КонецПопытки;
						
			Если Доступно Тогда
				Попытка
					
					ВсёВыгружено = Ложь;
					Очерёдность.ГраницаПорции = Очерёдность.ГраницаХранилище.Получить();
										
					Пока Не ВсёВыгружено Цикл
						
						ВсёВыгружено = ВыгрузитьОбъект(Очерёдность.ПолноеИмя, Очерёдность, Настройки, Кэш);
						ИменаМетаданных[Очерёдность.ПолноеИмя] = 1;
						
						Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемОбъекты.СоздатьНаборЗаписей();
						Набор.Отбор.Объект.Установить(Очерёдность.Объект);
						Набор.Отбор.Последовательность.Установить(Очерёдность.Последовательность);
						Набор.Прочитать();
						
						Если Набор.Количество() <> 1 Тогда
							ВремяОбновления = ТекДата;
							Прервать;
						КонецЕсли;
						
						Запись = Набор[0];
						Запись.Выгружено = ВсёВыгружено И Не ЗначениеЗаполнено(Очерёдность.ГраницаПериода);
						Запись.КоличествоВыгружено = Очерёдность.КоличествоВыгружено;
						Запись.ГраницаПериода = Очерёдность.ГраницаПериода;
						Запись.ГраницаПорции = Новый ХранилищеЗначения(Очерёдность.ГраницаПорции);
						ЗаписатьСлужебныеДанные(Набор);
						
						Трафик = Трафик + Очерёдность.КоличествоВыгружено;
						
					КонецЦикла;
				
				Исключение
					
					Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					РазблокироватьДанныеДляРедактирования(,ИДБлокировки);
					
					//Переход к следующему в пределах последовательности.
					ПрерватьОчередь = Истина;
					Если Поток > 0 И Очередь.Индекс(Очерёдность) < (Очередь.Количество()-1) Тогда
						Следующая = Очередь[Очередь.Индекс(Очерёдность)+1];
						Если Следующая.Последовательность = Очерёдность.Последовательность
							И Следующая.ГраницаПериода = Очерёдность.ГраницаПериода Тогда
							Журналировать(НСтр("ru = 'Выгрузка'"), Причина, Истина);
							ПрерватьОчередь = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если ПрерватьОчередь Тогда
						ВызватьИсключение Причина;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(,ИДБлокировки);
			
			Очерёдность.ГраницаПорции = Неопределено;
			Если Кэш <> Неопределено Тогда
				Кэш.Очистить();
				Кэш = Неопределено;
			КонецЕсли;
						
			Если Очерёдность.ТочкаОстановки Тогда
				Журналировать(НСтр("ru = 'Остановка'"),,, Очерёдность.Объект);
				Константы.ПереходСтадия.Установить(2);
				УстановитьИспользованиеЗадания(Ложь);
				ПрерватьОчередь = Истина;
				Прервать;
			КонецЕсли;
			
			ТекДата = ТекущаяУниверсальнаяДата();
			
			Если ВыгружатьИзменения И ТекДата >= ВремяИзменений Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекДата >= ВремяОбновления Тогда
				Если ТекДата >= ВремяПерерыва Тогда
					ПрерватьОчередь = Истина;
					Прервать;
				КонецЕсли;
				
				Настройки = КэшНастроек();
			
				Если Не Настройки.Выгружать Тогда
					ПрерватьОчередь = Истина;
					Прервать;
				КонецЕсли;
				
				ОбновитьПовторноИспользуемыеЗначения();
				ВремяОбновления = ТекДата + 60;
				Прервать;
			КонецЕсли;
									
		КонецЦикла;
		
		Если ПрерватьОчередь Тогда
			Очередь.Очистить();
			Возврат;
		КонецЕсли;
		
		Если ВыгружатьИзменения И ТекДата >= ВремяИзменений 
			И ИменаМетаданных.Количество() > 400 Тогда
			Попытка
				ВыгрузкаИзменений(Поток, Настройки);
				ВремяИзменений = ТекДата + 3600;
			Исключение
				Журналировать(НСтр("ru = 'Выгрузка.Изменения'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
			КонецПопытки;
		КонецЕсли;
			
		//Если НайтиФайлы(Настройки.КаталогИстории).Количество() > ?(Трафик <= 1000, 100, 10) Тогда
		//	Возврат;
		//КонецЕсли;
		
		Очередь = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

// Выгрузка изменений.
// 
// Параметры:
//  Поток - Число - Поток
//  Настройки - Структура, Неопределено - Настройки:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
Процедура ВыгрузкаИзменений(Поток = 0, Настройки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;
	Порция = 100;
	
	Очерёдность = Новый Структура;
	Очерёдность.Вставить("ЭтоИзменения", Истина);
	Очерёдность.Вставить("КоличествоВыгружено", 0);
	Очерёдность.Вставить("Последовательность", 0);
	Очерёдность.Вставить("Периодичность", Ложь);
	Очерёдность.Вставить("Порция", 0);
	Очерёдность.Вставить("Объект");
	Очерёдность.Вставить("ГраницаПорции");
	Очерёдность.Вставить("НомерСообщения");
	Очерёдность.Вставить("ВременныеТаблицы");
	Очерёдность.Вставить("Изменение");
	
	ОтборОбъектов = Новый Структура;
	ОтборОбъектов.Вставить("Таблица", "РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты");
	ОтборОбъектов.Вставить("ПолеОбъекта", "Объект");
	ОтборОбъектов.Вставить("ПоляВыборки", "Последовательность");
	ОтборОбъектов.Вставить("Условия", "_.Изменения = ИСТИНА И _.Выгружать = ИСТИНА");
	ОтборОбъектов.Вставить("Параметры");
	
	ЗапросКонстант = Новый Запрос(
		"ВЫБРАТЬ
		|	ПереходНомерСообщения.Значение КАК НомерСообщения,
		|	ПереходГраницаИзменений.Значение КАК ГраницаИзменений
		|ИЗ
		|	Константа.ПереходНомерСообщения КАК ПереходНомерСообщения,
		|	Константа.ПереходГраницаИзменений КАК ПереходГраницаИзменений");
	
	Продолжать = Истина;
	Пока Продолжать Цикл
	
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить("Константа.ПереходНомерСообщения");
			Блокировка.Добавить("Константа.ПереходГраницаИзменений");
			Блокировка.Заблокировать();
			
			Выборка = ЗапросКонстант.Выполнить().Выбрать();
			Выборка.Следующий();
						
			НомерСообщения = Выборка.НомерСообщения + 1;
			ГраницаИзменений = Выборка.ГраницаИзменений;
			ВременныеТаблицы = Новый МенеджерВременныхТаблиц();
			КоличествоИзменений = 0;
			
			Изменения = ОтметкиВремени.ВыбратьИзменения(ГраницаИзменений, ОтборОбъектов,,, ВременныеТаблицы, Порция);
			
			Если Изменения.Количество() Тогда
				
				Очерёдность.НомерСообщения = НомерСообщения;
				Очерёдность.ВременныеТаблицы = ВременныеТаблицы;
				
				ВыгрузкаПредисловия(Очерёдность, Настройки);
				
				Для Каждого Объект Из Изменения Цикл
					Очерёдность.Объект = Объект.Объект;
					Очерёдность.Последовательность = Объект._Последовательность;
					Очерёдность.Изменение = Объект;
									
					ВыгрузитьОбъект(Объект.ОбъектИмя, Очерёдность, Настройки);
					
					КоличествоИзменений = КоличествоИзменений + Объект.Количество;
					ГраницаИзменений = Макс(ГраницаИзменений, Объект.Граница);
				КонецЦикла;
				
				Запись = Константы.ПереходНомерСообщения.СоздатьМенеджерЗначения();
				Запись.Значение = НомерСообщения;
				ЗаписатьСлужебныеДанные(Запись);
				
				Запись = Константы.ПереходГраницаИзменений.СоздатьМенеджерЗначения();
				Запись.Значение = ГраницаИзменений;
				ЗаписатьСлужебныеДанные(Запись);
				
				//Файл метки окончания выгрузки пакета.
				Запись = Новый ЗаписьТекста(СтрШаблон("%1%2.0.tmp",
					ТекущийКаталог(Неопределено, Настройки),
					Формат(НомерСообщения, "ЧН=0; ЧГ=0")));
				Запись.Закрыть();
			
			КонецЕсли;
			
			Изменения.Очистить();
			ВременныеТаблицы.Закрыть();
			Если КоличествоИзменений < Порция Тогда
				Продолжать = Ложь;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение;
			
		КонецПопытки;
	
		Если ЗначениеЗаполнено(КоличествоИзменений) Тогда	
			ОтметкиВремени.РазобратьОчередь();
		КонецЕсли;
							
	КонецЦикла;
	
	Очерёдность.Очистить();
	ОтборОбъектов.Очистить();
	
КонецПроцедуры

// Выгрузить объект.
// 
// Параметры:
//  ПолноеИмя - Произвольный - Полное имя
//  Очерёдность - СтрокаТаблицыЗначений, Структура, Неопределено - Очерёдность:
// * ЭтоИзменения - Булево -
// * КоличествоВыгружено - Число -
// * Последовательность - Число -
// * Периодичность - Булево -
// * Порция - Число -
// * Объект 
// * ГраницаПорции 
// * НомерСообщения 
// * ВременныеТаблицы 
// * Изменение 
//  Настройки - Структура, Неопределено - Настройки:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
//  Кэш - Неопределено - Кэш
//  Отбор - Неопределено - Отбор
// 
// Возвращаемое значение:
//  Булево - Выгрузить объект
Функция ВыгрузитьОбъект(ПолноеИмя, Очерёдность = Неопределено, Настройки = Неопределено, Кэш = Неопределено, Отбор = Неопределено) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;
	
	Если Очерёдность = Неопределено Тогда
		Очерёдность = Новый Структура(
			"ЭтоИзменения,КоличествоВыгружено,Последовательность,Периодичность,Порция,ГраницаПорции, ПолеПериода, ГраницаПериода, ПолеПериодаОбязательное, ДатаЗаписи", 
			Ложь, 0, 0, Ложь, 0);
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Очередь.Последовательность,
			|	Очередь.Порция,
			|	Очередь.Периодичность,
			|	Очередь.ПолеПериода,
			|	Очередь.ГраницаПериода,
			|	Очередь.ПолеПериодаОбязательное,
			|	Очередь.ДатаЗаписи
			|ИЗ
			|	РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты КАК Очередь
			|ГДЕ
			|	Очередь.Объект = &Объект");
		Запрос.УстановитьПараметр("Объект", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Очерёдность, Выборка);
			Если ЗначениеЗаполнено(Отбор) Тогда
				Очерёдность.Периодичность = Ложь;	
			КонецЕсли;
		Иначе
			ВызватьИсключение(СтрШаблон(НСтр("ru = 'Объект %1 не доступен для выгрузки'"), ПолноеИмя));
		КонецЕсли;
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		ЗапросВыгрузки = ЗапросВыгрузки(ПолноеИмя, Очерёдность, Настройки, Кэш, Отбор);
		
		Если Очерёдность.Периодичность Тогда
			Если Очерёдность.ГраницаПериода = '39991231235959' И Не Очерёдность.ПолеПериодаОбязательное Тогда
				//Первый подход по пустой дате.
				ЗапросВыгрузки.УстановитьПараметр("_С", '00010101');
				ЗапросВыгрузки.УстановитьПараметр("_ПО", '00010101');
				
			ИначеЕсли Очерёдность.ГраницаПериода >= '39991231' Тогда
				//За текущий период.
				ЗапросВыгрузки.УстановитьПараметр("_С", НачалоМесяца(ДобавитьМесяц(Очерёдность.ДатаЗаписи, -1)));
				ЗапросВыгрузки.УстановитьПараметр("_ПО", '39991231235959');
				
			ИначеЕсли Очерёдность.ГраницаПериода = '00010101' Тогда
				//Последний подход. За все старые периоды.
				Если Очерёдность.ПолеПериодаОбязательное Тогда
					ЗапросВыгрузки.УстановитьПараметр("_С", '00010101');
				Иначе
					ЗапросВыгрузки.УстановитьПараметр("_С", '00010101000001');
				КонецЕсли;
				ЗапросВыгрузки.УстановитьПараметр("_ПО", КонецМесяца(ДобавитьМесяц(Очерёдность.ДатаЗаписи, -36)));
				
			Иначе //За конкретный месяц.
				ЗапросВыгрузки.УстановитьПараметр("_С", НачалоМесяца(ДобавитьМесяц(Очерёдность.ГраницаПериода, -1)));
				ЗапросВыгрузки.УстановитьПараметр("_ПО", КонецМесяца(ЗапросВыгрузки.Параметры._С));
				Если ЗапросВыгрузки.Параметры._С <= НачалоМесяца(ДобавитьМесяц(Очерёдность.ДатаЗаписи, -36)) Тогда
					//Слишком старые объединяем в один подход.
					ЗапросВыгрузки.УстановитьПараметр("_С", '00010101000001');
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ЗапросВыгрузки = Кэш.Запрос;
	КонецЕсли;
	
	Если Очерёдность.ГраницаПорции <> Неопределено Тогда
		ЗапросВыгрузки.Текст = СтрЗаменить(ЗапросВыгрузки.Текст, "//Граница", "");
		
		Если ТипЗнч(Очерёдность.ГраницаПорции) = Тип("Структура") Тогда
			Для Каждого Поле Из Очерёдность.ГраницаПорции Цикл
				ЗапросВыгрузки.УстановитьПараметр(Поле.Ключ, Поле.Значение);
			КонецЦикла;
		Иначе
			ЗапросВыгрузки.УстановитьПараметр(Кэш.Измерения, Очерёдность.ГраницаПорции);
		КонецЕсли;
	КонецЕсли;
	
	Если Очерёдность.ЭтоИзменения Тогда
		НомерСообщения = Очерёдность.НомерСообщения;
	Иначе
		НомерСообщения = НовыйНомерСообщения();
	КонецЕсли;
	
	ОтметкаВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Результат = ЗапросВыгрузки.Выполнить().Выгрузить();
	
	ВсёВыгружено = Кэш.ЕстьКонстанта Или Очерёдность.Порция = 0 Или Результат.Количество() < Очерёдность.Порция;
	
	Если Очерёдность.ЭтоИзменения Тогда
		//Десериализованные отборы удаленных наборов.
		Если ЗначениеЗаполнено(Очерёдность.Изменение.УдаленныеКлючи) Тогда
			Для Каждого Строка Из Результат.НайтиСтроки(Новый Структура("_Удаление", Истина)) Цикл
				Выборка = Очерёдность.Изменение.УдаленныеКлючи.Получить(Строка[Очерёдность.Изменение.ПолеИсточника]);
				Если Выборка <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Строка, Выборка);
				ИначеЕсли Строка[Кэш.Ключ] = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка() Тогда
					//Полное удаление
				Иначе
					Результат.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Количество() = 0 Тогда
			Возврат ВсёВыгружено;
		КонецЕсли;
		
	ИначеЕсли ВсёВыгружено Тогда
		Очерёдность.ГраницаПорции = Неопределено;
		
		Если Очерёдность.Периодичность Тогда
			Если Очерёдность.ГраницаПериода = '39991231235959' И Не Очерёдность.ПолеПериодаОбязательное Тогда
				//Первый подход по пустой дате. Сразу грузим текущий период для синхронности.
				ВсёВыгружено = Ложь;
				Очерёдность.ГраницаПериода = '39991231';
				ЗапросВыгрузки.УстановитьПараметр("_С", НачалоМесяца(ДобавитьМесяц(Очерёдность.ДатаЗаписи, -1)));
				ЗапросВыгрузки.УстановитьПараметр("_ПО", '39991231235959');
				Если Результат.Количество() = 0 Тогда
					Возврат ВсёВыгружено;
				КонецЕсли;
			Иначе
				Очерёдность.ГраницаПериода = НачалоДня(ЗапросВыгрузки.Параметры._С);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Выборка = Результат[Результат.Количество()-1];
		Если Кэш.Количество = 1 Тогда
			Очерёдность.ГраницаПорции = Выборка[Кэш.Измерения];	
		ИначеЕсли ТипЗнч(Очерёдность.ГраницаПорции) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Очерёдность.ГраницаПорции, Выборка);
		Иначе
			Очерёдность.ГраницаПорции = Новый Структура(Кэш.Измерения);
			ЗаполнитьЗначенияСвойств(Очерёдность.ГраницаПорции, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Выгрузка = Кэш.Шаблон.Скопировать();
		
	Если Кэш.ЕстьСсылка Тогда
		//Ссылки текущего объекта в формат уникального идентификатора.
		Для Каждого Выборка Из Результат Цикл
			Запись = Выгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись._Отметка = ОтметкаВремени;
			Запись.Ссылка = Выборка.Ссылка.УникальныйИдентификатор();
			Если Кэш.ЕстьРодитель Тогда
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					Запись.Родитель = Выборка.Родитель.УникальныйИдентификатор();
				Иначе
					Запись.Родитель = Неопределено;
				КонецЕсли;
			КонецЕсли;
			Если Кэш.ЕстьТаблицы Тогда
				Для Каждого Поле Из Кэш.Шаблоны Цикл
					Если ЗначениеЗаполнено(Выборка[Поле.Ключ]) Тогда
						Запись[Поле.Ключ] = Поле.Значение.Скопировать();
						Для Каждого Строка Из Выборка[Поле.Ключ] Цикл
							ЗаполнитьЗначенияСвойств(Запись[Поле.Ключ].Добавить(), Строка);
						КонецЦикла;
						Если Запись[Поле.Ключ].Колонки.Найти("НомерСтроки") <> Неопределено Тогда
							Запись[Поле.Ключ].Сортировать("НомерСтроки");
							Запись[Поле.Ключ].Колонки.Удалить("НомерСтроки");
						КонецЕсли;
					Иначе
						Запись[Поле.Ключ] = Null;
					КонецЕсли;
					Выборка[Поле.Ключ].Очистить();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Выборка Из Результат Цикл
			Запись = Выгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись._Отметка = ОтметкаВремени;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Очистить(); 
	Результат = Неопределено; 
	Выборка = Неопределено;
		
	Если Кэш.ЕстьРегистратор И (Не ВсёВыгружено Или Очерёдность.Периодичность) И Выгрузка.Количество() <> 0 Тогда
		//Округляем до целого набора.
		
		Подгрузить = Новый Массив;
		Последнее = Выгрузка[Выгрузка.Количество()-1];
		Если Выгрузка[0].НомерСтроки <> 1 Тогда
			Подгрузить.Добавить(Выгрузка[0].Регистратор);
			Подгрузить.Добавить(Последнее.Регистратор);
		Иначе
			Запрос = Новый Запрос(СтрШаблон(
				"ВЫБРАТЬ
				|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки
				|ИЗ
				|	%1 КАК Т
				|ГДЕ
				|	Т.Регистратор = &Регистратор",
			ПолноеИмя));
			Запрос.УстановитьПараметр("Регистратор", Последнее.Регистратор);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Последнее.НомерСтроки <> Выборка.НомерСтроки Тогда
				Подгрузить.Добавить(Последнее.Регистратор);
			КонецЕсли;
		КонецЕсли;
		
		Если Подгрузить.Количество() Тогда
			Для Каждого Ссылка Из Подгрузить Цикл
				Для Каждого Строка Из Выгрузка.НайтиСтроки(Новый Структура("Регистратор", Ссылка)) Цикл
					Выгрузка.Удалить(Строка);				
				КонецЦикла;
			КонецЦикла;
			
			Если Кэш.Свойство("ЗапросПодгрузки") Тогда
				ЗапросПодгрузки = Кэш.ЗапросПодгрузки;
			Иначе
				Строки = СтрРазделить(ЗапросВыгрузки.Текст, Символы.ПС);
				Строки[0] = "ВЫБРАТЬ";
				Н = Строки.Найти("ГДЕ");
				Если Н <> Неопределено Тогда
					Н = Н +1;
					Пока Н < Строки.Найти("УПОРЯДОЧИТЬ ПО") Цикл
						Строки.Удалить(Н);
					КонецЦикла;
					Строки.Вставить(Н, "Т.Регистратор В (&Регистратор)");
				КонецЕсли;
			
				ЗапросПодгрузки = Новый Запрос(СтрСоединить(Строки, Символы.ПС));
				Кэш.Вставить("ЗапросПодгрузки", ЗапросПодгрузки);
			КонецЕсли;
			ЗапросПодгрузки.УстановитьПараметр("Регистратор", Подгрузить);
			
			Если Подгрузить.Количество() = 1 Тогда
				Подгрузить.Вставить(0, Неопределено);
			КонецЕсли;
			
			Выборка = ЗапросПодгрузки.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Регистратор = Подгрузить[0] Тогда
					Строка = Выгрузка.Вставить(Выборка.НомерСтроки-1);
				Иначе
					Строка = Выгрузка.Добавить();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПолноеИмя = "Справочник.Пользователи" Или ПолноеИмя = "Справочник.ВнешниеПользователи" Тогда
		//Данные пользователя ИБ.
		Выгрузка.Колонки.Добавить("_ДанныеПользователяИБ");
		Для Каждого Строка Из Выгрузка Цикл
			Строка._ДанныеПользователяИБ = ВыгрузитьПользователяИБ(Строка);
		КонецЦикла;
		
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "ПланВидовХарактеристик.") Тогда
		//Выделение ссылочных типов для возможной замены.
		Выгрузка.Колонки.Добавить("_ТипЗначения_СсылочныеОбъекты");
		Удаление = Новый Массив;
		Для Каждого Строка Из Выгрузка Цикл
			Для Каждого Тип Из Строка.ТипЗначения.Типы() Цикл
				О = Метаданные.НайтиПоТипу(Тип);
				Если О <> Неопределено Тогда
					Удаление.Добавить(Тип);
					Если Строка._ТипЗначения_СсылочныеОбъекты = Неопределено Тогда
						Строка._ТипЗначения_СсылочныеОбъекты = Новый Массив;
					КонецЕсли;
					Строка._ТипЗначения_СсылочныеОбъекты.Добавить(О.ПолноеИмя());
				КонецЕсли;					
			КонецЦикла;
			Если Удаление.Количество() Тогда
				Строка.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначения,, Удаление);
				Удаление.Очистить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Метаданное = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	МиграцияДанныхИзВнешнихСистемСобытия.ПередВыгрузкой(Метаданное, Выгрузка);
		
	Если Выгрузка.Количество() Тогда
		
		ИмяФайла = СтрШаблон("%1%2.%3.%4.%5.%6.%7.json",
			ТекущийКаталог(Очерёдность, Настройки),
			Формат(НомерСообщения, "ЧН=0; ЧГ=0"),
			Формат(Очерёдность.Последовательность, "ЧН=0; ЧГ=0"),
			?(Очерёдность.Периодичность, Формат(Очерёдность.ГраницаПериода, "ДФ=yyyyMM; ДП=000101"), "0"),
			Формат((ВсёВыгружено И Не Очерёдность.ЭтоИзменения), "БЛ=0; БИ=1"),
			Кэш.КодКласса,
			СтрРазделить(ПолноеИмя, ".")[1]);
			
		Запись = Новый ЗаписьJSON();
		Запись.ОткрытьФайл(ИмяФайла,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
		Если Выгрузка.Количество() Тогда
			СериализаторXDTO.ЗаписатьJSON(Запись, Выгрузка, НазначениеТипаXML.Явное);
		КонецЕсли;
		Запись.Закрыть();
		Запись = Неопределено;
		ИмяФайла = Неопределено;
		
	КонецЕсли;
	
	Очерёдность.КоличествоВыгружено = Очерёдность.КоличествоВыгружено + Выгрузка.Количество();

	Если Не Очерёдность.ЭтоИзменения Тогда
		Журналировать(НСтр("ru = 'Выгрузка.История'"),
			?(Очерёдность.Периодичность, Формат(Очерёдность.ГраницаПериода, "ДФ=yyyy-MM"), "0"),,
			ПолноеИмя,, НомерСообщения,
			Новый Структура("Последовательность,Количество,Продолжительность", Очерёдность.Последовательность, Выгрузка.Количество(), ПродолжительностьОперации(ВремяНачала)));
	Иначе
			
		Журналировать(НСтр("ru = 'Выгрузка.Изменения'"),
			,,
			ПолноеИмя,, НомерСообщения,
			Новый Структура("Последовательность,Количество,Продолжительность", Очерёдность.Последовательность, Выгрузка.Количество(), ПродолжительностьОперации(ВремяНачала)));
			
	КонецЕсли;
	
	Если Кэш.ЕстьТаблицы Тогда
		Для Каждого Строка Из Выгрузка Цикл
			Для Каждого Поле Из Кэш.Шаблоны Цикл
				
				// Колонки могут использоваться для формирования промежуточных данных.
				// Если впоследствии они были удалены - то не обрабатываем их.
				// См. МиграцияДанныхИзВнешнихСистемСобытия.ПередВыгрузкой() - метаданное Отсутствия, таблица Заместители.
				Если Выгрузка.Колонки.Найти(Поле.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка[Поле.Ключ]) Тогда
					Строка[Поле.Ключ].Очистить();
					Строка[Поле.Ключ] = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Выгрузка.Очистить();
	Выгрузка = Неопределено;
	Строка = Неопределено;
	
	Возврат ВсёВыгружено;
	
КонецФункции

// Запрос выгрузки.
// 
// Параметры:
//  ПолноеИмя - Произвольный - Полное имя
//  Очерёдность - Структура, СтрокаТаблицыЗначений, Неопределено - Очерёдность:
// * ЭтоИзменения - Булево -
// * КоличествоВыгружено - Число -
// * Последовательность - Число -
// * Периодичность - Булево -
// * Порция - Число -
// * Объект 
// * ГраницаПорции 
// * НомерСообщения 
// * ВременныеТаблицы 
// * Изменение 
//  Настройки - Неопределено, Структура - Настройки:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
//  Кэш - Неопределено - Кэш
//  Отбор - Неопределено - Отбор
// 
// Возвращаемое значение:
//  Запрос - Запрос выгрузки
Функция ЗапросВыгрузки(ПолноеИмя, Очерёдность, Настройки, Кэш = Неопределено, Отбор = Неопределено) Экспорт
	
	Метаданное = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	Поля = Новый ТаблицаЗначений;
	Поля.Колонки.Добавить("Имя");
	Поля.Колонки.Добавить("Путь");
	Поля.Колонки.Добавить("ТаблицаИмя");
	Поля.Колонки.Добавить("ТаблицаПуть");
	Поля.Колонки.Добавить("Ключевое", Новый ОписаниеТипов("Булево"));
	Поля.Колонки.Добавить("Уникальное", Новый ОписаниеТипов("Булево"));
	Поля.Колонки.Добавить("Большое", Новый ОписаниеТипов("Булево"));
	Поля.Колонки.Добавить("Пропустить", Новый ОписаниеТипов("Булево"));
	Поля.Колонки.Добавить("Реквизит");
	Поля.Колонки.Добавить("ИмяПредопределенныхДанных");
	
	Запрос = Новый Запрос;
	ЕстьСсылка = Ложь;
	ЕстьРегистратор = Ложь;
	ЕстьПериод = Ложь;
	Кэш = Новый Структура("Запрос,Ключ,Измерения,Количество,ЕстьСсылка,ЕстьРодитель,ЕстьРегистратор,ЕстьКонстанта,ЕстьТаблицы",
						   Запрос,  "", 	  "", 		  1,      Ложь,        Ложь,           Ложь,         Ложь,       Ложь);
	Кэш.Вставить("КодКласса", КлассОбъектаВЧисло(ПолноеИмя));
	Кэш.Вставить("Шаблон", Новый ТаблицаЗначений);
	Кэш.Шаблон.Колонки.Добавить("_Отметка");
	
	Если Метаданные.Константы.Содержит(Метаданное) Тогда
		Кэш.ЕстьКонстанта = Истина;
		Кэш.Шаблон.Колонки.Добавить("Значение");
		Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	Т.Значение
		|ИЗ %1 КАК Т",
		ПолноеИмя);
		
		Возврат Запрос;		
	КонецЕсли;
	
	Если Очерёдность.ЭтоИзменения Тогда
		Кэш.Шаблон.Колонки.Добавить("_Удаление");
	КонецЕсли;
		
	Для Каждого Реквизит Из Метаданное.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "ВерсияДанных" Или Реквизит.Имя = "Предопределенный" Тогда
			Продолжить;
		ИначеЕсли Реквизит.Имя = "Ссылка" Тогда
			ЕстьСсылка = Истина;
			Кэш.Вставить("Ключ", Реквизит.Имя);
			Кэш.Вставить("Измерения", Реквизит.Имя);
			Кэш.Вставить("ЕстьСсылка", ЕстьСсылка);
		ИначеЕсли Реквизит.Имя = "Регистратор" Тогда
			ЕстьРегистратор = Истина;
			Кэш.Вставить("Ключ", Реквизит.Имя);
			Кэш.Вставить("Измерения", Реквизит.Имя);
			Кэш.Вставить("ЕстьРегистратор", ЕстьРегистратор);
		ИначеЕсли Реквизит.Имя = "Родитель" Тогда
			Кэш.Вставить("ЕстьРодитель", Истина);
		ИначеЕсли Реквизит.Имя = "Период" Тогда
			ЕстьПериод = Истина;
		КонецЕсли;
		
		Поле = Поля.Добавить();
		Поле.Имя = Реквизит.Имя;
		Поле.Ключевое = Кэш.Ключ = Реквизит.Имя;
		Поле.Уникальное = Кэш.Ключ = Реквизит.Имя Или Реквизит.Имя = "НомерСтроки";
		Поле.Реквизит = Реквизит;
	КонецЦикла;
	
	Если ЕстьСсылка И Метаданные.Задачи.Содержит(Метаданное) Тогда
		Для Каждого Реквизит Из Метаданное.РеквизитыАдресации Цикл
			Поле = Поля.Добавить();
			Поле.Имя = Реквизит.Имя;
			Поле.Реквизит = Реквизит;
		КонецЦикла;
	КонецЕсли;
			
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если Реквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			Продолжить;
		КонецЕсли;
		Поле = Реквизит.Состав.Найти(Метаданное);
		Если Поле = Неопределено
			Или Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
			Или (Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто 
				И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		Поле = Поля.Добавить();
		Поле.Имя = Реквизит.Имя;
		Поле.Реквизит = Реквизит;
		Если Реквизит.Имя = "ОтметкиВремениИдентификаторНабораЗаписей" И Кэш.Ключ = "" Тогда
			Кэш.Ключ = Реквизит.Имя;
			Поле.Ключевое = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьСсылка Тогда
		Если Не ЕстьРегистратор И ЕстьПериод Тогда
			Поле = Поля.Найти("Период", "Имя");
			Поле.Уникальное = Истина;
			Если Кэш.Ключ = ""
				И Метаданное.Измерения.Количество() = 0 Тогда
				Кэш.Ключ = Реквизит.Имя;
				Поле.Ключевое = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Реквизит Из Метаданное.Измерения Цикл
			Поле = Поля.Добавить();
			Поле.Имя = Реквизит.Имя;
			Поле.Уникальное = Не ЕстьРегистратор;
			Поле.Реквизит = Реквизит;
			
			Если Кэш.Ключ = "" И Не ЕстьПериод Тогда
				Кэш.Ключ = Реквизит.Имя;
				Поле.Ключевое = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Реквизит Из Метаданное.Ресурсы Цикл
			Поле = Поля.Добавить();
			Поле.Имя = Реквизит.Имя;
			Поле.Реквизит = Реквизит;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из Метаданное.Реквизиты Цикл
		Поле = Поля.Добавить();
		Поле.Имя = Реквизит.Имя;
		Поле.Реквизит = Реквизит;
	КонецЦикла;
	
	Если ЕстьСсылка Тогда
		
		Для Каждого Таблица Из Метаданное.ТабличныеЧасти Цикл
			Для Каждого Реквизит Из Таблица.Реквизиты Цикл
				Поле = Поля.Добавить();
				Поле.Имя = Реквизит.Имя;
				Поле.Реквизит = Реквизит;
				Поле.ТаблицаИмя = Таблица.Имя;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСобытия.ПриОпределенииПолейВыгрузки(Метаданное, Поля);	
		
	//Компоновка запроса
	ПоляВыборки = Новый Массив;
	Соединения = Новый Массив;
	Таблицы = Неопределено;
	Для Каждого Поле Из Поля Цикл
		Если Поле.Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		//Спец.значения
		Если Поле.Реквизит <> Неопределено Тогда
			Если Поле.Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")) Тогда
				
				СтрокаИмяПоля = "Т.";
				Если ЗначениеЗаполнено(Поле.ТаблицаИмя) Тогда
					СтрокаИмяПоля = СтрокаИмяПоля + Поле.ТаблицаИмя + ".";
				КонецЕсли;	
				СтрокаИмяПоля = СтрокаИмяПоля + Поле.Имя;
				
					Поле.ИмяПредопределенныхДанных = 
						СтрШаблон("ВЫБОР КОГДА %1 ССЫЛКА Справочник.ИдентификаторыОбъектовМетаданных ТОГДА ВЫРАЗИТЬ(%1 КАК Справочник.ИдентификаторыОбъектовМетаданных).ПолноеИмя КОНЕЦ", 
						СтрокаИмяПоля);	
			КонецЕсли;
			
			Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				Если Поле.Имя <> "Сертификат"
					И Поле.Имя <> "Подпись"
					И Поле.Имя <> "СвойстваПользователяИБ" Тогда 
					Поле.Большое = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Поле.ТаблицаИмя <> Неопределено Тогда
			Если Таблицы = Неопределено Тогда 
				Таблицы = Новый Массив;
				Таблицы.Добавить(Поле.ТаблицаИмя);
			ИначеЕсли Таблицы.Найти(Поле.ТаблицаИмя) = Неопределено Тогда
				Таблицы.Добавить(Поле.ТаблицаИмя);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
			
		Если Очерёдность.ЭтоИзменения И Очерёдность.Изменение.ПолеИсточника = Поле.Имя Тогда
			
			Если Поле.Ключевое И Очерёдность.Изменение.ПолеКлюча = "Ключ" Тогда
				
				ПоляВыборки.Добавить(
					СтрШаблон("ВЫБОР КОГДА Т.%1 ЕСТЬ NULL И _.%2 = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка) ТОГДА NULL ИНАЧЕ _.%3 КОНЕЦ КАК %4", 
					Поле.Имя, Очерёдность.Изменение.ПолеКлюча, Очерёдность.Изменение.ПолеКлюча, Поле.Имя));
					
			Иначе	
				ПоляВыборки.Добавить(СтрШаблон("_.%1 КАК %2", Очерёдность.Изменение.ПолеКлюча, Поле.Имя));
			КонецЕсли;	
					
		ИначеЕсли Поле.Путь = Неопределено Тогда
			ПоляВыборки.Добавить(СтрШаблон("Т.%1 КАК %2", Поле.Имя, Поле.Имя));
			
		Иначе
			ПоляВыборки.Добавить(СтрШаблон("%1 КАК %2", Поле.Путь, Поле.Имя));
			
		КонецЕсли;
		
		Кэш.Шаблон.Колонки.Добавить(Поле.Имя);
				
		Если Поле.ИмяПредопределенныхДанных <> Неопределено Тогда
			ПоляВыборки.Добавить(СтрШаблон("%1 КАК %2__", Поле.ИмяПредопределенныхДанных, Поле.Имя));
			Кэш.Шаблон.Колонки.Добавить(Поле.Имя + "__", ,".Имя");
		КонецЕсли;
	КонецЦикла;
	
	Если Таблицы <> Неопределено Тогда
		Для Каждого Таблица Из Таблицы Цикл
			ВложенныеПоля = Новый Массив;
			Для Каждого Поле Из Поля.НайтиСтроки(Новый Структура("ТаблицаИмя", Таблица)) Цикл
				Если Поле.Пропустить Тогда
					Продолжить;
				КонецЕсли;
				
				Если Поле.ТаблицаПуть = Неопределено Тогда
					//Табличная часть.
					Если Поле.Путь = Неопределено Тогда
						ВложенныеПоля.Добавить(Поле.Имя);
					Иначе
						ВложенныеПоля.Добавить(СтрШаблон("%1 КАК %2", Поле.Путь, Поле.Имя));
					КонецЕсли;
					
					Кэш.ЕстьТаблицы = Истина;
					Если Не Кэш.Свойство("Шаблоны") Тогда
						Кэш.Вставить("Шаблоны", Новый Структура);
					КонецЕсли;
					Если Не Кэш.Шаблоны.Свойство(Таблица) Тогда
						Кэш.Шаблоны.Вставить(Таблица, Новый ТаблицаЗначений);
					КонецЕсли;
					Кэш.Шаблоны[Таблица].Колонки.Добавить(Поле.Имя);
										
					Если Поле.ИмяПредопределенныхДанных <> Неопределено Тогда
						ВложенныеПоля.Добавить(СтрШаблон("%1 КАК %2__", Поле.ИмяПредопределенныхДанных, Поле.Имя));
						Кэш.Шаблоны[Таблица].Колонки.Добавить(Поле.Имя + "__",, ".Имя");
					КонецЕсли;
				ИначеЕсли ТипЗнч(Поле.ТаблицаПуть) = Тип("Структура") Тогда
					//Доп.поля из соединения.
					ПоляВыборки.Добавить(СтрШаблон("%1 КАК %2", Поле.Путь, Поле.Имя));
					Если Поле.ИмяПредопределенныхДанных <> Неопределено Тогда
						ПоляВыборки.Добавить(СтрШаблон("%1 КАК %2__", Поле.ИмяПредопределенныхДанных, Поле.Имя));
						Кэш.Шаблон.Колонки.Добавить(Поле.Имя + "__",,".Имя");	
					КонецЕсли;
					Если Соединения.Найти(Поле.ТаблицаПуть.Соединение) = Неопределено Тогда
						Соединения.Добавить(Поле.ТаблицаПуть.Соединение);
						Если ЗначениеЗаполнено(Поле.ТаблицаПуть.Параметры) Тогда
							Для Каждого Эл Из Поле.ТаблицаПуть.Параметры Цикл
								Запрос.УстановитьПараметр(Эл.Ключ, Эл.Значение);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Поле.ТаблицаПуть = Неопределено
				И Кэш.Свойство("Шаблоны") И Кэш.Шаблоны.Свойство(Таблица) Тогда
			//Табличная часть.
				Кэш.Шаблоны[Таблица].Колонки.Добавить("НомерСтроки");
			КонецЕсли;	
			
			Если ВложенныеПоля.Количество() Тогда
				ВложенныеПоля.Добавить("НомерСтроки");
				
				ПоляВыборки.Добавить(СтрШаблон("Т.%1.(%2) КАК %1",
					Таблица,
					СтрСоединить(ВложенныеПоля, ",
					|	")));
				Кэш.Шаблон.Колонки.Добавить(Таблица,,"*");
			КонецЕсли;
		КонецЦикла;
		Таблицы.Очистить();
	КонецЕсли;
	
	//Отборы
	ПоляОтбора = Новый Массив;
	Если Очерёдность.Периодичность Тогда
		//Выборка в пределах периода.
		ПоляОтбора.Добавить(СтрШаблон("ГДЕ
			|	Т.%1 МЕЖДУ &_С И &_ПО",
			Очерёдность.ПолеПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		Если ПоляОтбора.Количество() = 0 Тогда
			ПоляОтбора.Добавить("ГДЕ
			|");
		Иначе
			ПоляОтбора.Добавить("
			|	И ");
		КонецЕсли;
		
		Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Иначе //Значение ключа
			ПоляОтбора.Добавить(СтрШаблон("Т.%1 = &%1", Кэш.Ключ));
			Запрос.УстановитьПараметр(Кэш.Ключ, Отбор);
		КонецЕсли;
	КонецЕсли;	
	
	//Отбор порции
	Если ПоляОтбора.Количество() Тогда
		ПоляОтбора.Добавить("
		|	//ГраницаИ ");
	Иначе
		ПоляОтбора.Добавить("//ГраницаГДЕ ");
	КонецЕсли;
	
	Если ЕстьСсылка Тогда
		
		ПоляОтбора.Добавить(СтрШаблон("Т.%1 > &%1", "Ссылка"));
		ПолеСортировки = "Т.Ссылка";
			 
	ИначеЕсли ЕстьРегистратор Тогда
		
		ПоляОтбора.Добавить(СтрШаблон("Т.%1 > &%1", "Регистратор"));
		ПолеСортировки = "Т.Регистратор, Т.НомерСтроки";
					
	Иначе
		
		Если Поля.Найти(Истина, "Ключевое") <> Неопределено
			И Кэш.Ключ <> Поля.Найти(Истина, "Ключевое").Имя Тогда
			Кэш.Ключ = Поля.Найти(Истина, "Ключевое").Имя;
		КонецЕсли;
	
		Измерения = Поля.НайтиСтроки(Новый Структура("Уникальное", Истина));
		
		Если Измерения.Количество() Тогда
			ПоляОтбора.Добавить(УсловиеОтбораПорции(Измерения));
				
			ПолеСортировки = Новый Массив;
			Для Каждого Поле Из Измерения Цикл
				ПолеСортировки.Добавить(Поле.Имя);
			КонецЦикла;
			Кэш.Измерения = СтрСоединить(ПолеСортировки, ",");
			Кэш.Количество = Измерения.Количество();
			
			ПолеСортировки.Очистить();	
			Для Каждого Поле Из Измерения Цикл
				ПолеСортировки.Добавить("Т." + Поле.Имя);
			КонецЦикла;
			ПолеСортировки = СтрСоединить(ПолеСортировки, ",
				|	");
		Иначе
			Кэш.Количество = 0;
		КонецЕсли;
		
		Измерения.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Кэш.Измерения) И Не ЗначениеЗаполнено(Кэш.Ключ) Тогда
		//Регистр без измерений.
		Если Очерёдность.ЭтоИзменения Тогда
			Запрос.Текст = СтрШаблон(
				"ВЫБРАТЬ
				|	Т.%1 ЕСТЬ NULL КАК _Удаление,
				|	%2
				|ИЗ Изменённые КАК _
				|	ЛЕВОЕ СОЕДИНЕНИЕ %3 КАК Т
				|		%4
				|	ПО ИСТИНА
				|ГДЕ
				|	_.Объект = &Объект",
				Поля[0].Имя,
				СтрСоединить(ПоляВыборки, "," + Символы.ПС),
				Метаданное.ПолноеИмя(),
				СтрСоединить(Соединения, Символы.ПС));
			Запрос.УстановитьПараметр("Объект", Очерёдность.Объект);
			Запрос.МенеджерВременныхТаблиц = Очерёдность.ВременныеТаблицы;
			
		Иначе
			Запрос.Текст = СтрШаблон(
				"ВЫБРАТЬ
				|	%1
				|ИЗ %2 КАК Т
				|	%3",
				СтрСоединить(ПоляВыборки, "," + Символы.ПС),
				Метаданное.ПолноеИмя(),
				СтрСоединить(Соединения, Символы.ПС));
		КонецЕсли;
		
	ИначеЕсли Очерёдность.ЭтоИзменения Тогда
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ
			|	Т.%1 ЕСТЬ NULL КАК _Удаление,
			|	%2
			|ИЗ Изменённые КАК _
			|	ЛЕВОЕ СОЕДИНЕНИЕ %3 КАК Т
			|		%4
			|	ПО _.%6 = Т.%1
			|ГДЕ
			|	_.Объект = &Объект
			|УПОРЯДОЧИТЬ ПО
			|	_Удаление УБЫВ,
			|	_.Отметка,
			|	%5",
			Очерёдность.Изменение.ПолеИсточника,
			СтрСоединить(ПоляВыборки, "," + Символы.ПС),
			Метаданное.ПолноеИмя(),
			СтрСоединить(Соединения, Символы.ПС),
			ПолеСортировки,
			Очерёдность.Изменение.ПолеКлюча);
		Запрос.УстановитьПараметр("Объект", Очерёдность.Объект);
		Запрос.МенеджерВременныхТаблиц = Очерёдность.ВременныеТаблицы;
		
	Иначе
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ ПЕРВЫЕ %1
			|	%2
			|ИЗ %3 КАК Т
			|	%4
			|%5
			|УПОРЯДОЧИТЬ ПО
			|	%6",
			Формат(?(Очерёдность.Порция <= 0, 100, Очерёдность.Порция), "ЧГ=0"),
			СтрСоединить(ПоляВыборки, "," + Символы.ПС),
			Метаданное.ПолноеИмя(),
			СтрСоединить(Соединения, Символы.ПС),
			СтрСоединить(ПоляОтбора, ""),
			ПолеСортировки);
	КонецЕсли;
			
	Поля.Очистить();
	ПоляВыборки.Очистить();
	ПоляОтбора.Очистить();
	Соединения.Очистить();
	Поле = Неопределено;
	
	Возврат Запрос;
	
КонецФункции

// Выгрузить пользователя ИБ.
// 
// Параметры:
//  Владелец Владелец
// 
// Возвращаемое значение:
//  Неопределено, ХранилищеЗначения - Выгрузить пользователя ИБ
Функция ВыгрузитьПользователяИБ(Владелец) Экспорт
	
	Если Не ЗначениеЗаполнено(Владелец.ИдентификаторПользователяИБ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Источник = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Владелец.ИдентификаторПользователяИБ);	
	
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Приемник = Новый Структура(
	"АдресЭлектроннойПочты,
	|АутентификацияOpenID,
	|АутентификацияОС,
	|АутентификацияСтандартная,
	|ЗапрещеноВосстанавливатьПароль,
	|ЗапрещеноИзменятьПароль,
	|Имя,
	|ПарольУстановлен,
	|ПоказыватьВСпискеВыбора,
	|ПолноеИмя,
	|ПользовательОС,
	|СохраняемоеЗначениеПароля");
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	Приемник.Вставить("Роли", Новый Массив);
	Для Каждого Роль Из Источник.Роли Цикл
		Приемник.Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	Если Источник.ОсновнойИнтерфейс <> Неопределено Тогда
		Приемник.Вставить("ОсновнойИнтерфейс", Источник.ОсновнойИнтерфейс.ПолноеИмя());
	Иначе
		Приемник.Вставить("ОсновнойИнтерфейс", Неопределено);
	КонецЕсли;
	
	Если Источник.РежимЗапуска <> Неопределено Тогда
		Приемник.Вставить("РежимЗапуска", СтрЗаменить(ТРег(Источник.РежимЗапуска), " ", ""));
	Иначе
		Приемник.Вставить("РежимЗапуска", Неопределено);
	КонецЕсли;
	
	Если Источник.Язык <> Неопределено Тогда
		Приемник.Вставить("Язык", Источник.Язык.ПолноеИмя());
	Иначе
		Приемник.Вставить("Язык", Неопределено);
	КонецЕсли;
		
	Возврат Новый ХранилищеЗначения(Приемник, Новый СжатиеДанных(9));
	
КонецФункции

// Установить использование заданий.
// 
// Параметры:
//  Использование Использование
Процедура УстановитьИспользованиеЗаданий(Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Событие = НСтр("ru = 'Приостановка заданий'");
	
	Если Использование Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.Ключ КАК Ключ
			|ИЗ
			|	РегистрСведений.МиграцияДанныхИзВнешнихСистемЖурнал КАК Т
			|ГДЕ
			|	Т.Событие = &Событие
			|
			|УПОРЯДОЧИТЬ ПО
			|	Т.Период УБЫВ");
		
		Запрос.УстановитьПараметр("Событие", Событие);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого ИД Из СтрРазделить(Выборка.Ключ, ";", Ложь) Цикл
				Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИД));
				Если Задание <> Неопределено И Задание.Использование = Ложь Тогда
					Задание.Использование = Истина;
					Задание.Записать();	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РегламентныеЗаданияСлужебный.УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(Истина);
		
	Иначе
		НачатьТранзакцию();
			
		Попытка
			
			Представление = Новый Массив;
			ИД = Новый Массив;
			Для Каждого Задание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Использование", Истина)) Цикл
				Если Задание.Метаданные <> Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемВыгрузка Тогда
					Задание.Использование = Ложь;
					Задание.Записать();
					
					Представление.Добавить(?(ПустаяСтрока(Задание.Наименование), Строка(Задание.Метаданные), Задание.Наименование));
					ИД.Добавить(Задание.УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			
			Если ИД.Количество() Тогда
				РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.Добавить(Новый Структура(
				"Событие,Описание,Ключ", Событие, СтрСоединить(Представление, "; "), СтрСоединить(ИД, ";")));
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОчередьВыгрузки

// Заполнить очередь.
// 
// Параметры:
//  ТолькоОбновление - Булево - Только обновление
Процедура ЗаполнитьОчередьЧислоВсего(ЧислоВсего) Экспорт
	
	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемОбъекты.СоздатьНаборЗаписей();
	
	Набор.Прочитать();
	
	ЧислоВсего = 0;
	
	Если Набор.Количество() Тогда
		
		Для Каждого Запись Из Набор Цикл
			
			Если Запись.Выгружать Тогда
				
				Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(1) ИЗ " + Запись.Объект.ПолноеИмя);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				Запись.КоличествоВсего = Выборка[0];
				
				ЧислоВсего = ЧислоВсего + Запись.КоличествоВсего;
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьСлужебныеДанные(Набор);
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

// Заполнить очередь.
// 
// Параметры:
//  ТолькоОбновление - Булево - Только обновление
Процедура ЗаполнитьОчередь(ТолькоОбновление = Ложь) Экспорт
	
	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемОбъекты.СоздатьНаборЗаписей();
	
	Если ТолькоОбновление Тогда
		Набор.Прочитать();
		
		Если Набор.Количество() Тогда
			
			Для Каждого Запись Из Набор Цикл
				Запись.Выгружено = Ложь;
				Запись.КоличествоВыгружено = 0;
				Если Запись.Периодичность Тогда
					Запись.ГраницаПериода = '39991231235959';
				КонецЕсли;
				
				Если Запись.Выгружать Тогда
					Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(1) ИЗ " + Запись.Объект.ПолноеИмя);
					Выборка = Запрос.Выполнить().Выбрать();
					Выборка.Следующий();
					Запись.КоличествоВсего = Выборка[0];
					
				КонецЕсли;
			КонецЦикла;
			
			ЗаписатьСлужебныеДанные(Набор);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
		
	Лишние = МиграцияДанныхИзВнешнихСистемСобытия.ЛишниеОбъекты();
	
	ТекДата = ТекущаяДатаСеанса();
	
	Записи = Набор.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Идентификаторы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы";
	Таблица = Запрос.Выполнить().Выгрузить();	
		
	Для Каждого Выборка Из Таблица Цикл
		
		ИОМ = Выборка.Ссылка;
		Если Не ОбработатьОдинОбъектМетаданных(ИОМ, Лишние, Записи, ТекДата) Тогда
			Продолжить;
		КонецЕсли;	
		
						
	КонецЦикла;
	
	Записи.Сортировать("Последовательность,Номер");
	Н = 0;
	Для Каждого Запись Из Записи Цикл
		Н = Н + 1;
		Запись.Номер = Н;
	КонецЦикла;
	Набор.Загрузить(Записи);
	
	ЗаписатьСлужебныеДанные(Набор);
	
КонецПроцедуры

Функция ОбработатьОдинОбъектМетаданных(ИОМ, Лишние, Записи, ТекДата)
	
	ЭтоКонстанта = Ложь;
					
	Попытка				
		Метаданное = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИОМ, Ложь);
		Если Метаданное = Null Или Метаданное = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ЭтоКонстанта = ОбщегоНазначения.ЭтоКонстанта(Метаданное);
	
		Если Не ОбщегоНазначения.ЭтоКонстанта(Метаданное) 
			И Не ОбщегоНазначения.ЭтоПланОбмена(Метаданное) 
			И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(Метаданное)
			И Не ОбщегоНазначения.ЭтоПланСчетов(Метаданное)
			И Не ОбщегоНазначения.ЭтоПланВидовРасчета(Метаданное) 
			И Не ОбщегоНазначения.ЭтоСправочник(Метаданное)
			И Не ОбщегоНазначения.ЭтоДокумент(Метаданное)
			И Не ОбщегоНазначения.ЭтоБизнесПроцесс(Метаданное) 
			И Не ОбщегоНазначения.ЭтоЗадача(Метаданное)
			И Не ОбщегоНазначения.ЭтоРегистрСведений(Метаданное)
			И Не ОбщегоНазначения.ЭтоРегистрНакопления(Метаданное) 
			И Не ОбщегоНазначения.ЭтоРегистрБухгалтерии(Метаданное)
			И Не ОбщегоНазначения.ЭтоРегистрРасчета(Метаданное) Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;	
				
	Отказ = Лишние.Найти(Метаданное) <> Неопределено;
	Последовательность = Неопределено;
	Периодичность = Неопределено;
	ПолеПериода = Неопределено;
	Порция = Неопределено;
	
	МиграцияДанныхИзВнешнихСистемСобытия.ПриЗаполненииОчередности(Метаданное, Отказ, Последовательность, Периодичность, ПолеПериода, Порция);
				
	Запись = Записи.Добавить();
	Запись.Выгружать = Не Отказ;
	Запись.Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданное);
	Запись.ДатаЗаписи = ТекДата;
	Запись.Номер = Записи.Количество();

	Если ЗначениеЗаполнено(Последовательность) Тогда
		Запись.Последовательность = Последовательность;
	Иначе
		Запись.Последовательность = ПоследовательностьПоУмолчанию(Метаданное, Периодичность);				
	КонецЕсли;
	
	Запись.Изменения = ОтметкиВремени.СодержитОбъект(Метаданное);
	Если Не Запись.Изменения И Запись.Выгружать Тогда
		Сообщить(СтрШаблон(НСтр("ru = 'Объект %1 не включен в подсистему регистрации изменений %2'"),
			Метаданное.ПолноеИмя(),
			Метаданные.Подсистемы.НастройкаИАдминистрирование.Подсистемы.ОтметкиВремени),
			СтатусСообщения.Важное);
	КонецЕсли;
	
	Если ЭтоКонстанта Тогда
		Если Запись.Выгружать Тогда
			Запись.КоличествоВсего = 1;
		КонецЕсли;
		Запись.Порция = 1;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порция) Тогда
		Запись.Порция = Порция;
	Иначе
		Запись.Порция = ПорцияПоУмолчанию(Метаданное);
	КонецЕсли;
	
	Если Периодичность = Истина И ПолеПериода = Неопределено Тогда
		ПолеПериода = ПолеПериодаПоУмолчанию(Метаданное);
	КонецЕсли;
	Если Периодичность = Истина И ПолеПериода <> Неопределено Тогда
		Запись.Периодичность = Истина;
		Запись.ГраницаПериода = '39991231235959';
		Запись.ПолеПериода = ПолеПериода.Имя;
		Запись.ПолеПериодаОбязательное = ПолеПериода.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
	КонецЕсли;
	
	Если Запись.Выгружать Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(1) ИЗ " + Метаданное.ПолноеИмя());
		ВыборкаВнутр = Запрос.Выполнить().Выбрать();
		ВыборкаВнутр.Следующий();
		Запись.КоличествоВсего = ВыборкаВнутр[0];
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполнить очередь по одному объекту.
// 
// Параметры:
//  ИОМ - СправочникССылка.ИдентификаторыОбъектовМетаданных
Процедура ЗаполнитьОчередьОдинОбъект(ИОМ) Экспорт
	
	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемОбъекты.СоздатьНаборЗаписей();
	
	Лишние = МиграцияДанныхИзВнешнихСистемСобытия.ЛишниеОбъекты();
	
	ТекДата = ТекущаяДатаСеанса();
	
	Записи = Набор.ВыгрузитьКолонки();
	
	Если Не ОбработатьОдинОбъектМетаданных(ИОМ, Лишние, Записи, ТекДата) Тогда
		Возврат;
	КонецЕсли;	
	
	Записи.Сортировать("Последовательность,Номер");
	Н = 0;
	Последовательность = 0;
	Для Каждого Запись Из Записи Цикл
		Н = Н + 1;
		Запись.Номер = Н;
		Последовательность = Запись.Последовательность;
	КонецЦикла;
	Набор.Загрузить(Записи);
	
	Набор.Отбор.Объект.Установить(ИОМ);
	Набор.Отбор.Последовательность.Установить(Последовательность);
	
	ЗаписатьСлужебныеДанные(Набор);
	
КонецПроцедуры

// Поле периода по умолчанию.
// 
// Параметры:
//  Метаданное - Null, ОбъектМетаданных, Произвольный, Неопределено - Метаданное
//  ПолеПериода - Неопределено - Поле периода
// 
// Возвращаемое значение:
//  Неопределено - Поле периода по умолчанию
Функция ПолеПериодаПоУмолчанию(Метаданное, ПолеПериода = Неопределено) Экспорт
	
	Если ПолеПериода <> Неопределено Тогда
		Возврат ПолеПериода;
	КонецЕсли;
		
	Для Каждого Поле Из Метаданное.СтандартныеРеквизиты Цикл
		Если Поле.Тип.СодержитТип(Тип("Дата")) Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

// Последовательность по умолчанию.
// 
// Параметры:
//  Метаданное - Null, ОбъектМетаданных, Произвольный, Неопределено - Метаданное
//  Периодичность - Неопределено - Периодичность
// 
// Возвращаемое значение:
//  Число - Последовательность по умолчанию
Функция ПоследовательностьПоУмолчанию(Метаданное, Периодичность) Экспорт
	
	Если Метаданные.Справочники.Содержит(Метаданное) Тогда
		
		Если Периодичность = Истина Тогда
			Возврат 800;
		Иначе
			Возврат 100;
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Метаданное) Тогда
		Если Периодичность = Истина Тогда
			Возврат 300;
		Иначе
			Возврат 200;
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(Метаданное)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(Метаданное)
		Или Метаданные.ПланыСчетов.Содержит(Метаданное)
		Или Метаданные.ПланыВидовРасчета.Содержит(Метаданное) Тогда
		Возврат 10;
		
	ИначеЕсли Метаданные.Константы.Содержит(Метаданное) Тогда
		Возврат 50;
		
	ИначеЕсли Метаданные.Документы.Содержит(Метаданное) Тогда
		Возврат 500;
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Метаданное) Тогда
		Возврат 600;
		
	ИначеЕсли Метаданные.Задачи.Содержит(Метаданное) Тогда
		Возврат 800;
		
	Иначе
		Возврат 300;
		
	КонецЕсли;
	
КонецФункции

// Порция по умолчанию.
// 
// Параметры:
//  Метаданное - Null, ОбъектМетаданных, Произвольный, Неопределено - Метаданное
// 
// Возвращаемое значение:
//  Число - Порция по умолчанию
Функция ПорцияПоУмолчанию(Метаданное) Экспорт
	
	Если Метаданные.Константы.Содержит(Метаданное) Тогда
		Возврат 1;
	КонецЕсли;
	
	Для Каждого Поле Из Метаданное.Реквизиты Цикл
		Если Поле.Тип.СодержитТип(Тип("ХранилищеЗначения"))
			И Поле.Имя <> "СвойстваПользователяИБ" Тогда
			Возврат 100;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоСсылочныйОбъект(Метаданное) Тогда
		
		Если Метаданное.Реквизиты.Количество() > 30 Тогда
			Возврат 100;
		КонецЕсли;
		
		Для Каждого ТЧ Из Метаданное.ТабличныеЧасти Цикл
			Если ТЧ.Имя = "ДополнительныеРеквизиты"
				Или ТЧ.Имя = "КонтактнаяИнформация" Тогда
			Иначе
				Для Каждого Поле Из ТЧ.Реквизиты Цикл
					Если Поле.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
						Возврат 100;
					КонецЕсли;
				КонецЦикла;
				Возврат 1000;
			КонецЕсли;
		КонецЦикла;
				
		Если Метаданное.Реквизиты.Количество() < 10 Тогда
			Возврат 10000;
		КонецЕсли;
				
		Возврат 1000;
		
	Иначе
		Для Каждого Поле Из Метаданное.Ресурсы Цикл
			Если Поле.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				Возврат 100;
			КонецЕсли;
		КонецЦикла;
		
		Возврат 10000;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ОбменСВнешнимиРерурсами

Функция БлокироватьОбменСВнешнимиРесурсами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ВнешнийОбменВНовойВерсии.Получить()
		И Константы.МиграцияНаНовуюВерсию.Получить();
	
КонецФункции

Процедура ПриНачалеРаботыРегламентногоЗадания(РегламентноеЗадание, Отказ = Неопределено) Экспорт
	
	Если Не БлокироватьОбменСВнешнимиРесурсами() Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентноеЗаданиеВыполняетОбменСВнешнимиРесурсами(РегламентноеЗадание) Тогда
		ТекстСообщения = НСтр("ru = 'Обмен с внешними ресурсами выполняется в новой версии программы.
			|Работа регламентного задания прекращена, проверьте выполнение регламентного задания в новой версии.'");
		РегламентныеЗаданияСервер.ОтменитьВыполнениеЗадания(РегламентноеЗадание, ТекстСообщения);
		Отказ = Истина;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция РегламентноеЗаданиеВыполняетОбменСВнешнимиРесурсами(РегламентноеЗадание)
	
	РегламентныеЗаданияВыполняющиеОбмен = Новый Соответствие;
	
	// Задания почты
	Для ПотокПриемаПочты = 1 По 10 Цикл
		ИмяРегЗадания = СтрШаблон("ПриемОтправкаПочты%1", ПотокПриемаПочты);
		РегламентныеЗаданияВыполняющиеОбмен.Вставить(
			Метаданные.РегламентныеЗадания[ИмяРегЗадания], Истина);
	КонецЦикла;
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ВыполнениеЗадачПоПочте, Истина);
	
	// Загрузка файлов
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаФайлов, Истина);
	
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.Распознавание, Истина);
	
	// Обмен ЭДО
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхДокументов, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументов, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПроверкаНовыхЭлектронныхДокументов, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.СозданиеДокументовДОПоВходящимЭД, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.СозданиеОбъектовЭДОПоДокументамДО, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.РассылкаУведомленийОПроблемахЭДО, Истина);

	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПовторениеБизнесПроцессов, Истина);
	
	Если РегламентныеЗаданияВыполняющиеОбмен.Получить(РегламентноеЗадание) = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если Регистрация документов будет выполняться в 1С:ДО 3.0.
// 
// Возвращаемое значение:
//  Булево - Истина, если Регистрация документов будет выполняться в 1С:ДО 3.0.
//
Функция РегистрацияВ1СДО30() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПолучитьФункциональнуюОпцию("МиграцияНаНовуюВерсию")
		И ПолучитьФункциональнуюОпцию("РегистрацияВ1СДО30");
	
КонецФункции	

// Возвращает регистрационные данные из ДО 3.0, после регистрации документа.
// 
// Параметры:
//  Документ - СправочникОбъект.ВнутренниеДокументы, СправочникОбъект.ВходящиеДокументы, 
//  	СправочникОбъект.ИсходящиеДокументы - регистрируемый документ  
//  СообщениеОбОшибке - Строка - Сообщение об ошибке
// 
// Возвращаемое значение:
//  Структура - Регистрационные данные из ДО 3.0:
// * РегистрационныйНомер - Строка - Рег. номер
// * ДатаРегистрации - Дата - Дата регистрации
// * ЧисловойНомер - Число - номер
//
Функция РегистрационныеДанныеИзДО30(Документ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("РегистрационныйНомер", "");
	РегистрационныеДанные.Вставить("ДатаРегистрации", Дата(1, 1, 1));
	РегистрационныеДанные.Вставить("ЧисловойНомер", 0);
		
	АдресПубликации = "";
	ИмяПользователя = "";
	Пароль = "";
	
	ПрочитатьНастройкиВебСервиса30(СообщениеОбОшибке, 
		АдресПубликации, ИмяПользователя, Пароль);
		
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат РегистрационныеДанные;
	КонецЕсли;
	
	// Установим ссылку, если ее еще нет
	Если Не ЗначениеЗаполнено(Документ.Ссылка) Тогда
		СсылкаДокумента = УправлениеДоступомДокументооборот.ПолучитьСсылкуОбъекта(Документ);
	Иначе
		СсылкаДокумента = Документ.Ссылка;
	КонецЕсли;
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Документ);
	СвязанныйДокумент = Неопределено;
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураПараметров);
	РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор,
		"ТипСвязи, НезависимаяНумерацияПоСвязанномуДокументу");
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда 
			СвязанныйДокумент = СвязиДокументов.ПолучитьСвязанныйДокумент(
				СтруктураПараметров.Ссылка, РеквизитыНумератора.ТипСвязи);
		Иначе
			ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(РеквизитыНумератора.ТипСвязи);
			Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураПараметров.Свойство(ИмяТипаСвязи) Тогда 
				СвязанныйДокумент = СтруктураПараметров[ИмяТипаСвязи];
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СвязанныйДокумент) 
			И СтруктураПараметров.Свойство("СвязанныйДокумент") Тогда
			СвязанныйДокумент = СтруктураПараметров.СвязанныйДокумент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для документа ведется независимая нумерация по связанному документу. 
			 		|Не указан связанный документ с типом связи ""%1""'"),
				РеквизитыНумератора.ТипСвязи);
				
			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			СообщениеОбОшибке = ТекстСообщения;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат РегистрационныеДанные;
	КонецЕсли;

	ТипDocumentInfo = ФабрикаXDTO.Тип("http://www.1c.ru/DMReg", "DMDocumentInfo");
	DMDocumentInfo = ФабрикаXDTO.Создать(ТипDocumentInfo);
	
	DMDocumentInfo.DocumentID = Строка(СсылкаДокумента.УникальныйИдентификатор());
	DMDocumentInfo.DocumentName = Документ.Наименование;
	DMDocumentInfo.DocumentHeader = Документ.Заголовок;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	DMDocumentInfo.RegisteredByID = Строка(ТекущийПользователь.УникальныйИдентификатор());
	DMDocumentInfo.RegisteredByIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
		ТекущийПользователь);
	DMDocumentInfo.DocumentTypeID = Строка(СтруктураПараметров.ВидДокумента.УникальныйИдентификатор());
	DMDocumentInfo.DocumentTypeIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
		СтруктураПараметров.ВидДокумента);
	DMDocumentInfo.Date = СтруктураПараметров.ДатаРегистрации;
	DMDocumentInfo.DocumentClass = СокрЛП(ТипЗнч(СсылкаДокумента));
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда 
		DMDocumentInfo.CompanyID = Строка(СтруктураПараметров.Организация.УникальныйИдентификатор());
		DMDocumentInfo.CompanyIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Подразделение) Тогда 
		DMDocumentInfo.DepartmentID = Строка(СтруктураПараметров.Подразделение.УникальныйИдентификатор());
		DMDocumentInfo.DepartmentIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.Подразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ВопросДеятельности) Тогда 
		DMDocumentInfo.QuestionActivityByID = Строка(СтруктураПараметров.ВопросДеятельности.УникальныйИдентификатор());
		DMDocumentInfo.QuestionActivityIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.ВопросДеятельности);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда 
		DMDocumentInfo.CounterpartyByID = Строка(СтруктураПараметров.Контрагент.УникальныйИдентификатор());
		DMDocumentInfo.CounterpartyIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.НоменклатураДел) Тогда 
		DMDocumentInfo.CaseFileCatalogID = Строка(СтруктураПараметров.НоменклатураДел.УникальныйИдентификатор());
		DMDocumentInfo.CaseFileCatalogIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.НоменклатураДел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Проект) Тогда 
		DMDocumentInfo.ProjectByID = Строка(СтруктураПараметров.Проект.УникальныйИдентификатор());
		DMDocumentInfo.ProjectByIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.Проект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Ответственный) Тогда 
		DMDocumentInfo.ResponsibleID = Строка(СтруктураПараметров.Ответственный.УникальныйИдентификатор());
		DMDocumentInfo.ResponsibleIndex = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(
			СтруктураПараметров.Ответственный);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		DMDocumentInfo.RelatedDocumentID = Строка(СвязанныйДокумент.УникальныйИдентификатор());
		DMDocumentInfo.RelatedDocumentNumber = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СвязанныйДокумент, "РегистрационныйНомер");
	КонецЕсли;
	
	Прокси = СоздатьПрокси30(АдресПубликации, ИмяПользователя, Пароль);
	
	Ответ = Прокси.RegisterDocument(DMDocumentInfo);
	
	// Если вернулась ошибка, то прерываем регистрацию 
	Если Ответ.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/DMReg", "DMRegError") Тогда
		СообщениеОбОшибке = Ответ.Description;
		Возврат РегистрационныеДанные;
	КонецЕсли;
	
	РегистрационныеДанные.Вставить("РегистрационныйНомер", Ответ.Number);
	РегистрационныеДанные.Вставить("ДатаРегистрации", Ответ.Date);
	РегистрационныеДанные.Вставить("ЧисловойНомер", Ответ.DigitalNumber);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция СоздатьПрокси30(АдресПубликации, ИмяПользователя, Пароль)
	
	Определение = Новый WSОпределения(АдресПубликации + "/ws/DMReg.1cws?wsdl", ИмяПользователя, Пароль);
	Прокси = Новый WSПрокси(Определение, "http://www.1c.ru/DMReg", "DMReg", "DMRegSoap");
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции	

// Получить очередной номер штрихкода из до 30.
// 
// Параметры:
//  СообщениеОбОшибке - Строка - Сообщение об ошибке
// 
// Возвращаемое значение:
//  Число - очередной номер штрихкода из до 30:
Функция ОчереднойНомерШтрихкодаИзДО30(СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресПубликации = "";
	ИмяПользователя = "";
	Пароль = "";
	
	ПрочитатьНастройкиВебСервиса30(СообщениеОбОшибке, 
		АдресПубликации, ИмяПользователя, Пароль);
		
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат 0;
	КонецЕсли;
	
	Прокси = СоздатьПрокси30(АдресПубликации, ИмяПользователя, Пароль);
	
	Ответ = Прокси.GetNewBarCodeNum();

	Если ТипЗнч(Ответ) = Тип("Число") Тогда
		Возврат Ответ;
	КонецЕсли;	
	
	// Если вернулась ошибка, то прерываем регистрацию 
	Если Ответ.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/DMReg", "DMRegError") Тогда
		СообщениеОбОшибке = Ответ.Description;
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Служебные

// Записать служебные данные.
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.МиграцияДанныхИзВнешнихСистемЖурнал, КонстантаМенеджерЗначения.ПереходНомерСообщения, РегистрСведенийНаборЗаписей.МиграцияДанныхИзВнешнихСистемОбъекты, КонстантаМенеджерЗначения.ПереходГраницаИзменений - Источник
//  Замещение - Булево, Неопределено - Замещение
Процедура ЗаписатьСлужебныеДанные(Источник, Замещение = Неопределено) Экспорт
	
	Источник.ОбменДанными.Загрузка = Истина;
	Источник.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Источник.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	
	Если Замещение = Ложь Тогда
		Источник.Записать(Ложь);
	Иначе
		Источник.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Журналировать.
// 
// Параметры:
//  Событие - Строка - Событие
//  Описание - Строка - Описание
//  Ошибка - Булево - Ошибка
//  Источник - Произвольный, Неопределено - Источник
//  Ключ - Неопределено - Ключ
//  НомерСообщения - Произвольный, Число, Неопределено - Номер сообщения
//  Показатели - Структура, Неопределено - Показатели:
// * Последовательность 
// * Количество 
// * Продолжительность - Число -
Процедура Журналировать(Событие = "", Описание = "", Ошибка = Ложь, Источник = Неопределено, Ключ = Неопределено, НомерСообщения = Неопределено,
	Показатели = Неопределено) Экспорт
	
	Если Ошибка Тогда
		
		Если Описание = "" Тогда
			Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход'") + "." + Событие,
			УровеньЖурналаРегистрации.Ошибка,,
			?(ЗначениеЗаполнено(Ключ), Ключ, Источник),
			Описание);
			
		ОбщегоНазначенияДокументооборот.УведомитьОтветственныхОПроблеме(
			Событие,
			Описание,
			НСтр("ru = 'Переход'") + "." + Событие);
			
	КонецЕсли;
	
	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Момент = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запись.Сеанс = НомерСоединенияИнформационнойБазы();
	Запись.Идентификатор = Новый УникальныйИдентификатор();
	Запись.Ошибка = Ошибка;
	Запись.Описание = Описание;
	Запись.Событие = Событие;
	Запись.НомерСообщения = НомерСообщения;
	Запись.Источник = Источник;
	Запись.Ключ = Ключ;
		
	Если ЗначениеЗаполнено(Показатели) Тогда
		ЗаполнитьЗначенияСвойств(Запись, Показатели);
	КонецЕсли;
	
	ЗаписатьСлужебныеДанные(Набор, Ложь);
		
КонецПроцедуры

// Кэш настроек.
// 
// Параметры:
//  Текущие - Неопределено - Текущие
// 
// Возвращаемое значение:
//  Структура, Неопределено - Кэш настроек:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
Функция КэшНастроек(Текущие = Неопределено)
	
	Если Текущие = Неопределено Тогда
		Кэш = Новый Структура;
	Иначе
		Кэш = Текущие;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	""Стадия"" КАК Имя,
		|	ПереходСтадия.Значение КАК Значение
		|ИЗ
		|	Константа.ПереходСтадия КАК ПереходСтадия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Каталог"",
		|	ПереходКаталог.Значение
		|ИЗ
		|	Константа.ПереходКаталог КАК ПереходКаталог");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Кэш.Вставить(Выборка.Имя, Выборка.Значение);
	КонецЦикла;
	 
	Кэш.Вставить("Выгружать", Кэш.Стадия >= 3);
	
	Слэш = ПолучитьРазделительПути();
	Кэш.Вставить("Слэш", Слэш);
	Кэш.Вставить("КаталогВыгрузки", Кэш.Каталог + Слэш);
	Кэш.Вставить("КаталогИзменений", Кэш.Каталог + Слэш + "0" + Слэш);
	
	Возврат Кэш;
	
КонецФункции

// Условие отбора порции.
// 
// Параметры:
//  Поля - Массив из СтрокаТаблицыЗначений - Поля
// 
// Возвращаемое значение:
//  Строка - Условие отбора порции
Функция УсловиеОтбораПорции(Поля)
	
	Если Поля.Количество() = 1 Тогда
		Возврат СтрШаблон("Т.%1 > &%1", Поля[0].Имя);
	Иначе
		ОтборИ = Новый Массив;
		ОтборИли = Новый Массив;
		Для Каждого Поле Из Поля Цикл
			ОтборИ.Очистить();
			Для Каждого Ключ Из Поля Цикл
				Если Поле = Ключ Тогда
					ОтборИ.Добавить(СтрШаблон("Т.%1 > &%1", Ключ.Имя));
					Прервать;
				Иначе
					ОтборИ.Добавить(СтрШаблон("Т.%1 = &%1", Ключ.Имя));
				КонецЕсли;			
			КонецЦикла;
			ОтборИли.Добавить(СтрСоединить(ОтборИ, " И "));
		КонецЦикла;
		ОтборИ.Очистить();
		Возврат СтрШаблон("Т.%1 >= &%1 И (%2)", Поля[0].Имя, СтрСоединить(ОтборИли, " ИЛИ ")); 
	КонецЕсли;
			
КонецФункции

// Новый номер сообщения.
// 
// Возвращаемое значение:
//  Произвольный, Число - Новый номер сообщения
Функция НовыйНомерСообщения() Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Константа.ПереходНомерСообщения");
		Блокировка.Заблокировать();
		
		Запись = Константы.ПереходНомерСообщения.СоздатьМенеджерЗначения();
		Запись.Прочитать();
		НомерСообщения = Запись.Значение + 1;
		Запись.Значение = НомерСообщения;
		
		ЗаписатьСлужебныеДанные(Запись);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат НомерСообщения;
	
КонецФункции

// Текущий каталог.
// 
// Параметры:
//  Очерёдность - Структура, Неопределено, СтрокаТаблицыЗначений - Очерёдность:
// * ЭтоИзменения - Булево -
// * КоличествоВыгружено - Число -
// * Последовательность - Число -
// * Периодичность - Булево -
// * Порция - Число -
// * ГраницаПорции 
// * ПолеПериода 
// * ГраницаПериода 
// * ПолеПериодаОбязательное 
// * ДатаЗаписи 
//  Настройки - Структура, Неопределено - Настройки:
// * Выгружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
// 
// Возвращаемое значение:
//  Строка, ФорматированнаяСтрока - Текущий каталог
Функция ТекущийКаталог(Очерёдность, Настройки)
	
	Если Очерёдность <> Неопределено И Очерёдность.ЭтоИзменения Тогда
		Путь = Настройки.КаталогИзменений + Формат(Очерёдность.НомерСообщения, "ЧН=0; ЧГ=0");
				
	Иначе
		//Последний каталог пачки
		Пачки = Новый СписокЗначений;
		Для Каждого Файл Из НайтиФайлы(Настройки.КаталогВыгрузки, "*") Цикл
			
			Если Файл.Имя <> "0" И Файл.Имя = Файл.ИмяБезРасширения Тогда
					
				Если СтрНайти("123456789", Лев(Файл.Имя, 1)) <> 0 Тогда
					Попытка
						Пачки.Добавить(Число(Файл.Имя), Файл.ПолноеИмя);
					Исключение
						Продолжить;	
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Пачки.Количество() Тогда
			Пачки.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			
			Если НайтиФайлы(Пачки[0].Представление, "*").Количество() < 1000 Тогда
				Возврат Пачки[0].Представление + Настройки.Слэш;
			Иначе
				Н = Пачки[0].Значение;
				Пачки.Очистить();
			КонецЕсли;
			
		Иначе
			Н = 0;
		КонецЕсли;
		
		Н = Н + 1;
		Путь = Настройки.КаталогВыгрузки + Настройки.Слэш + Формат(Н, "ЧН=0; ЧГ=0");
		
	КонецЕсли;
	
	СоздатьКаталог(Путь);
		
	Возврат Путь + Настройки.Слэш;
	
КонецФункции

// Установить использование задания.
// 
// Параметры:
//  Использование - Булево - Использование
Процедура УстановитьИспользованиеЗадания(Использование) Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемВыгрузка);
	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;

	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОтметкиВремениОбработка);
	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеПереходныхРабочихГрупп);
	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Найти реквизит метаданных.
// 
// Параметры:
//  Метаданное Метаданное
//  Имя Имя
//  ВключаяТаблицы - Булево - Включая таблицы
// 
// Возвращаемое значение:
//  
Функция НайтиРеквизитМетаданных(Метаданное, Имя, ВключаяТаблицы = Ложь) Экспорт
	
	Поле = Метаданное.Реквизиты.Найти(Имя);
	Если Поле <> Неопределено Тогда
		Возврат Поле;
	КонецЕсли;
	
	ЕстьСсылка = Ложь;
	Для Каждого Поле Из Метаданное.СтандартныеРеквизиты Цикл
		Если НРег(Поле.Имя) = НРег(Имя) Тогда
			Возврат Поле;
		ИначеЕсли Поле.Имя = "Ссылка" Тогда
			ЕстьСсылка = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Если ЕстьСсылка Тогда
		
		Если Метаданные.Задачи.Содержит(Метаданное) Тогда
			Поле = Метаданное.РеквизитыАдресации.Найти(Имя);
			Если Поле <> Неопределено Тогда
				Возврат Поле;
			КонецЕсли;
		КонецЕсли;
		
		Если ВключаяТаблицы Тогда
			Поле = Метаданное.ТабличныеЧасти.Найти(Имя);
			Если Поле <> Неопределено Тогда
				Возврат Поле;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Поле = Метаданное.Измерения.Найти(Имя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
		Поле = Метаданное.Ресурсы.Найти(Имя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Класс объекта в число.
// 
// Параметры:
//  Имя - Произвольный - Имя
// 
// Возвращаемое значение:
//  Строка - Класс объекта в число
Функция КлассОбъектаВЧисло(Имя) Экспорт
	
	Начало = СтрРазделить(Имя, ".")[0];
	
	Если Начало = "Справочник" Тогда
		Возврат "1";
		
	ИначеЕсли Начало = "Документ" Тогда
		Возврат "2";
		
	ИначеЕсли Начало = "БизнесПроцесс" Тогда
		Возврат "3";
		
	ИначеЕсли Начало = "Задача" Тогда
		Возврат "4";
		
	ИначеЕсли Начало = "Перечисление" Тогда
		Возврат "5";
		
	ИначеЕсли Начало = "ПланВидовХарактеристик" Тогда
		Возврат "6";
		
	ИначеЕсли Начало = "ПланСчетов" Тогда
		Возврат "7";
			
	ИначеЕсли Начало = "ПланВидовРасчетов" Тогда
		Возврат "8";
			
	ИначеЕсли Начало = "ПланОбмена" Тогда
		Возврат "9";
		
	ИначеЕсли Начало = "Константа" Тогда
		Возврат "10";
		
	ИначеЕсли Начало = "РегистрСведений" Тогда
		Возврат "11";
		
	ИначеЕсли Начало = "РегистрНакопления" Тогда
		Возврат "12";
		
	ИначеЕсли Начало = "РегистрБухгалтерии" Тогда
		Возврат "13";
		
	ИначеЕсли Начало = "РегистрРасчетов" Тогда
		Возврат "14";
		
	Иначе
		Возврат "0";
		
	КонецЕсли;
	
КонецФункции

// Класс объекта из числа.
// 
// Параметры:
//  Код Код
// 
// Возвращаемое значение:
//  Строка - Класс объекта из числа
Функция КлассОбъектаИзЧисла(Код) Экспорт
	
	Если Код = "1" Тогда
		Возврат "Справочник";
		
	ИначеЕсли Код = "2" Тогда
		Возврат "Документ";
		
	ИначеЕсли Код = "3" Тогда
		Возврат "БизнесПроцесс";
		
	ИначеЕсли Код = "4" Тогда
		Возврат "Задача";
		
	ИначеЕсли Код = "5" Тогда
		Возврат "Перечисление";
		
	ИначеЕсли Код = "6" Тогда
		Возврат "ПланВидовХарактеристик";
		
	ИначеЕсли Код = "7" Тогда
		Возврат "ПланСчетов";
			
	ИначеЕсли Код = "8" Тогда
		Возврат "ПланВидовРасчетов";
		
	ИначеЕсли Код = "9" Тогда
		Возврат "ПланОбмена";
		
	ИначеЕсли Код = "10" Тогда
		Возврат "Константа";
		
	ИначеЕсли Код = "11" Тогда
		Возврат "РегистрСведений";
		
	ИначеЕсли Код = "12" Тогда
		Возврат "РегистрНакопления";
		
	ИначеЕсли Код = "13" Тогда
		Возврат "РегистрБухгалтерии";
		
	ИначеЕсли Код = "14" Тогда
		Возврат "РегистрРасчетов";
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Это ссылочный объект.
// 
// Параметры:
//  Метаданное - Null, ОбъектМетаданных, Произвольный, Неопределено - Метаданное
// 
// Возвращаемое значение:
//  Булево - Это ссылочный объект
Функция ЭтоСсылочныйОбъект(Метаданное) Экспорт
	
	Попытка
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Метаданное, "СтандартныеРеквизиты") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого Реквизит Из Метаданное.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Или Реквизит.Имя = "Ссылка" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		// не бросаем исключения, сюда может прийти другой объект, это не ошибка.
	КонецПопытки;		
	
	Возврат Ложь;
	
КонецФункции

// Имя формы списка.
// 
// Параметры:
//  Объект Объект
// 
// Возвращаемое значение:
//  Строка - Имя формы списка
Функция ИмяФормыСписка(Объект) Экспорт
	
	Метаданное = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект, Истина);
	
	Если Метаданные.Константы.Содержит(Метаданное) Тогда
		Возврат Метаданное.ПолноеИмя() + ".ФормаКонстант";
	Иначе
		Возврат Метаданное.ПолноеИмя() + ".ФормаСписка";
	КонецЕсли;
	
КонецФункции

// Продолжительность операции.
// 
// Параметры:
//  ВремяНачала - Число - Время начала
// 
// Возвращаемое значение:
//  Число - Продолжительность операции
Функция ПродолжительностьОперации(ВремяНачала) Экспорт
	
	Возврат (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000;
	
КонецФункции

// Записать файл start txt.
// 
// Параметры:
//  ЧислоОбъектов Число объектов
Процедура ЗаписатьStartTxt(ЧислоОбъектов) Экспорт
	
	Каталог = Константы.ПереходКаталог.Получить();
	Слэш = ПолучитьРазделительПути();
	
	Запись = Новый ЗаписьТекста(Каталог + Слэш + "Start.txt");
	Запись.ЗаписатьСтроку(Метаданные.Имя);
	Запись.ЗаписатьСтроку(Метаданные.Версия);
	Запись.ЗаписатьСтроку(Формат(ЧислоОбъектов, "ЧГ=0"));
	Запись.Закрыть();
	
КонецПроцедуры	

Процедура ПрочитатьНастройкиВебСервиса30(СообщениеОбОшибке, 
	АдресПубликации, ИмяПользователя, Пароль)
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресПубликации = МиграцияДанныхИзВнешнихСистемСерверПовтИсп.АдресПубликации1СДО30();
	ИмяПользователя = МиграцияДанныхИзВнешнихСистемСерверПовтИсп.ИмяПользователя1СДО30();
	
	ИмяПользователяМетаданное = Метаданные.Константы.ИмяПользователя1СДО30;
	
	ВладелецХранилища = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		ИмяПользователяМетаданное);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецХранилища);
	
	ШаблонОшибки = НСтр("ru = 'Не указано значение константы ""%1""'");
	
	Если Не ЗначениеЗаполнено(АдресПубликации) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонОшибки,
			Метаданные.Константы.АдресПубликации1СДО30.Имя);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонОшибки,
			ИмяПользователяМетаданное.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
