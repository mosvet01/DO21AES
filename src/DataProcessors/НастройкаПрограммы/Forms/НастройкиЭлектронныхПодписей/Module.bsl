
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвтовизуализацияЭП = Константы.АвтовизуализацияЭП.Получить();
	РасположениеШтампаЭПВPdf = Константы.РасположениеШтампаЭПВPdf.Получить();
	СпособВставкиШтампаЭПВPDF = Константы.СпособВставкиШтампаЭПВPDF.Получить();
	
	Элементы.РасположениеШтампаЭПВPdf.Доступность = АвтовизуализацияЭП;
	Элементы.СпособВставкиШтампаЭПВPDF.Доступность = АвтовизуализацияЭП;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ПроверятьЭлектронныеПодписиНаСервере.Видимость = Ложь;
		Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость = Ложь;
	КонецЕсли;

	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	ДоступнаУсовершенствованнаяПодпись = МодульЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
	Элементы.ГруппаУсовершенствованнаяПодпись.Видимость = ДоступнаУсовершенствованнаяПодпись;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбщегоНазначения.КлиентПодключенЧерезВебСервер() Тогда
		Элементы.ГруппаАвтоматическаяОбработкаПодписей.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаСерверовМетокВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьМеткиВремениАвтоматическиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиСДатыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаАвтоматическаяОбработкаПодписейРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиАвтоматическиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьйКлиент.ОткрытьОтчетПродлениеСрокаДействияЭлектронныхПодписей("ТребуетсяУсовершенствоватьПодписи")
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура АвтовизуализацияЭППриИзменении(Элемент)
	
	УстановитьАвтовизуализацияЭПНаСервере(АвтовизуализацияЭП);
	
	Элементы.РасположениеШтампаЭПВPdf.Доступность = АвтовизуализацияЭП;
	Элементы.СпособВставкиШтампаЭПВPDF.Доступность = АвтовизуализацияЭП;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьАвтовизуализацияЭПНаСервере(АвтовизуализацияЭП)
	
	Если АвтовизуализацияЭП Тогда
	ИспользоватьImageMagick = Константы.ИспользоватьImageMagickДляРаспознаванияPDF.Получить();
		Если Не ИспользоватьImageMagick Тогда
			АвтовизуализацияЭП = Ложь;
			Сообщить(НСтр("ru = 'Для включения автоматической вставки штампов ЭП 
			|сперва необходимо включить настройку ""Использовать ImageMagick"" (в разделе ""Работа с файлами"")'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.АвтовизуализацияЭП)
	 	Или Константы.АвтовизуализацияЭП.Получить() = АвтовизуализацияЭП) Тогда
		
		Возврат;
	КонецЕсли;
	
	Константы.АвтовизуализацияЭП.Установить(АвтовизуализацияЭП);

	Если Не ЗначениеЗаполнено(Константы.РасположениеШтампаЭПВPdf.Получить()) Тогда
		РасположениеШтампаЭПВPdf = Перечисления.ВариантыПечатиШтампаЭП.ПравыйНижний;
		Константы.РасположениеШтампаЭПВPdf.Установить(РасположениеШтампаЭПВPdf);		 
	КонецЕсли;	
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеШтампаЭПВPdfПриИзменении(Элемент)
	РасположениеШтампаЭПВPdfНаСервере(РасположениеШтампаЭПВPdf);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасположениеШтампаЭПВPdfНаСервере(РасположениеШтампаЭПВPdf)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.РасположениеШтампаЭПВPdf)
	 	Или Константы.РасположениеШтампаЭПВPdf.Получить() = РасположениеШтампаЭПВPdf) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасположениеШтампаЭПВPdf) Тогда
		РасположениеШтампаЭПВPdf = Перечисления.ВариантыПечатиШтампаЭП.ПравыйНижний; 
	КонецЕсли;	
	
	Константы.РасположениеШтампаЭПВPdf.Установить(РасположениеШтампаЭПВPdf);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВставкиШтампаЭПВPDFПриИзменении(Элемент)
	СпособВставкиШтампаЭПВPDFНаСервере(СпособВставкиШтампаЭПВPDF);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СпособВставкиШтампаЭПВPDFНаСервере(СпособВставкиШтампаЭПВPDF)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.СпособВставкиШтампаЭПВPDF)
	 	Или Константы.СпособВставкиШтампаЭПВPDF.Получить() = СпособВставкиШтампаЭПВPDF) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособВставкиШтампаЭПВPDF) Тогда
		СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.Встроенный; 
	КонецЕсли;	
	
	Константы.СпособВставкиШтампаЭПВPDF.Установить(СпособВставкиШтампаЭПВPDF);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	Если НавигационнаяСсылкаФорматированнойСтроки = "Программы" Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Сертификаты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КонстантаИмя = ЧастиИмени[1];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
	ИначеЕсли ЧастиИмени.Количество() = 1 И НРег(Лев(РеквизитПутьКДанным, 9)) = НРег("Константа") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 10);
		КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Константы[КонстантаИмя].Получить() <> КонстантаЗначение Тогда
		Константы[КонстантаИмя].Установить(КонстантаЗначение);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьДополнительныеРеквизитыИСведения" И КонстантаЗначение = Ложь Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи" Или РеквизитПутьКДанным
		= "НаборКонстант.ИспользоватьШифрование" Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаУсовершенствованнаяПодпись.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
		Элементы.ГруппаПроверятьПодписиНаСервере.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
			Или НаборКонстант.ИспользоватьШифрование;
		
		Если НаборКонстант.ИспользоватьЭлектронныеПодписи И (РеквизитПутьКДанным
			= "НаборКонстант.ИспользоватьЭлектронныеПодписи" Или РеквизитПутьКДанным = "") Тогда
			Если ДоступнаУсовершенствованнаяПодпись Тогда
				КонстантаАдресаСерверовМетокВремени = Константы["АдресаСерверовМетокВремени"].Получить();
				КонстантаУсовершенствоватьПодписиАвтоматически = Константы["УсовершенствоватьПодписиАвтоматически"].Получить();
				КонстантаДобавлятьМеткиВремениАвтоматически = Константы["ДобавлятьМеткиВремениАвтоматически"].Получить();
				КонстантаТипПодписиКриптографииПоУмолчанию = Константы["ТипПодписиКриптографииПоУмолчанию"].Получить();
				КонстантаУсовершенствоватьПодписиСДаты = Константы["УсовершенствоватьПодписиСДаты"].Получить();
				УстановитьЗаголовокПодсказкиУсовершенствования();
			КонецЕсли;
			Если Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость Тогда
				КонстантаСоздаватьЭлектронныеПодписиНаСервере = Константы["СоздаватьЭлектронныеПодписиНаСервере"].Получить();
			КонецЕсли;
			Если Элементы.ПроверятьЭлектронныеПодписиНаСервере.Видимость Тогда
				КонстантаПроверятьЭлектронныеПодписиНаСервере = Константы["ПроверятьЭлектронныеПодписиНаСервере"].Получить();
			КонецЕсли;
		КонецЕсли;
		УстановитьЗаголовокЭлектроннаяПодписьНаСервере();
	ИначеЕсли (РеквизитПутьКДанным = "КонстантаТипПодписиКриптографииПоУмолчанию" Или РеквизитПутьКДанным
		= "КонстантаУсовершенствоватьПодписиАвтоматически") И ДоступнаУсовершенствованнаяПодпись Тогда
		УстановитьЗаголовокПодсказкиУсовершенствования();
		КонстантаТипПодписиКриптографииПоУмолчанию = Константы["ТипПодписиКриптографииПоУмолчанию"].Получить();
		КонстантаУсовершенствоватьПодписиАвтоматически = Константы["УсовершенствоватьПодписиАвтоматически"].Получить();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") 
		И ДоступнаУсовершенствованнаяПодпись
		И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS" Или РеквизитПутьКДанным = "") Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭтоМодельСервисаСДоступнымУсовершенствованием = МодульЭлектроннаяПодпись.ОбщиеНастройки().ЭтоМодельСервисаСДоступнымУсовершенствованием;
			Элементы.ГруппаАвтоматическаяОбработкаПодписей.Видимость = ЭтоМодельСервисаСДоступнымУсовершенствованием;
			Элементы.ГруппаДобавлятьМеткиАвтоматически.Видимость = Ложь;
			Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			Если ЭтоМодельСервисаСДоступнымУсовершенствованием Тогда
				Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
				Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
				МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
				МодульЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(
					Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора, "Настройки");
				Элементы.ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru = 'В приложении в Интернете архивная подпись по умолчанию недоступна, этот тип подписи можно выбрать при подписании <a href=Сертификаты>сертификатом</a>, установленным на компьютер при установленой <a href=Программы>программе электронной подписи</a>.'"));
			Иначе
				Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Ложь;
				Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Истина;
				Элементы.ТипПодписиКриптографииПоУмолчанию1РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru = 'В приложении в Интернете по умолчанию установлен тип подписи Базовая, типы подписи с метками времени можно выбрать при подписании <a href=Сертификаты>сертификатом</a>, установленным на компьютер при установленой <a href=Программы>программе электронной подписи</a>.'"));
			КонецЕсли;
		Иначе 
			МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
			МодульЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(
				Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора, "Настройки");
			Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
			Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Если РеквизитПутьКДанным = "" И ДоступнаУсовершенствованнаяПодпись Тогда
			Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
			Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
			МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
			МодульЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(
				Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора, "Настройки");
		КонецЕсли;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьШифрование"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS"
		ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		
		ДоступностьОблачнойПодписи = (НаборКонстант.ИспользоватьЭлектронныеПодписи ИЛИ НаборКонстант.ИспользоватьШифрование)
			И (НаборКонстант.ИспользоватьСервисDSS);
			
		Элементы.ОбработкаУправлениеПодключениемDSSСерверыОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		Элементы.ОбработкаУправлениеПодключениемDSSУчетныеЗаписиОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПодсказкиУсовершенствования()
	
	Если ЗначениеЗаполнено(КонстантаТипПодписиКриптографииПоУмолчанию) Тогда
		
		Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			Возврат;
		КонецЕсли;
		
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		Элементы.ГруппаУсовершенствоватьПодписи.Доступность = 
			МодульЭлектроннаяПодписьСлужебный.ДоступностьНастроекУсовершенствованияПодписи(КонстантаТипПодписиКриптографииПоУмолчанию);
		
		Если Элементы.ГруппаУсовершенствоватьПодписи.Доступность Тогда
			
			Элементы.ДекорацияУсовершенствованиеРасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подписи, добавленные ранее и полученные извне, будут усовершенствованы для длительного хранения до выбранного типа: %1.'"),
				КонстантаТипПодписиКриптографииПоУмолчанию);
			
		Иначе
			Элементы.ДекорацияУсовершенствованиеРасширеннаяПодсказка.Заголовок = 
				НСтр("ru = 'Подписи, добавленные ранее и полученные извне, будут усовершенствованы для длительного хранения до выбранного типа.'");
		КонецЕсли;
		
	Иначе
		Элементы.ДекорацияУсовершенствованиеРасширеннаяПодсказка.Заголовок = 
			НСтр("ru = 'Не выбран тип подписи для документов.'");
		Элементы.ГруппаУсовершенствоватьПодписи.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЭлектроннаяПодписьНаСервере()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если НаборКонстант.ИспользоватьЭлектронныеПодписи Тогда
		ЗаголовокФлажка = НСтр("ru = 'Проверять подписи и сертификаты на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи на компьютер пользователя для проверки электронных подписей и сертификатов.'");
	Иначе
		ЗаголовокФлажка = НСтр("ru = 'Проверять сертификаты на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи на компьютер пользователя для проверки сертификатов.'");
	КонецЕсли;
	
	Элементы.ПроверятьЭлектронныеПодписиНаСервере.Заголовок = ЗаголовокФлажка;
	
	Если ИнформационнаяБазаФайловая Тогда
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на компьютер, где работает веб-сервер, подключенный к файловой информационной базе, должна быть установлена хотя бы одна %1.'"),
			НСтр("ru = '<a href=Программы>программа электронной подписи</a> из списка'"));
	Иначе
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на каждый компьютер, где работает сервер 1С:Предприятия, должна быть установлена хотя бы одна %1.'"), 
			НСтр("ru = '<a href=Программы>программа электронной подписи</a> из списка'"));
	КонецЕсли;
	
	ПодсказкаФлажка = ПодсказкаФлажка + Символы.ПС + Символы.ПС + ПодсказкаНаСервере;
	
	Элементы.ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказка.Заголовок = 
		СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаФлажка);
	
	Если Не НаборКонстант.ИспользоватьЭлектронныеПодписи Тогда
		ЗаголовокФлажка = НСтр("ru = 'Шифровать и расшифровывать на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для шифрования и расшифровки.'");
		
	ИначеЕсли Не НаборКонстант.ИспользоватьШифрование Тогда
		ЗаголовокФлажка = НСтр("ru = 'Подписывать на сервере'");
			ПодсказкаФлажка =
		НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для подписания.'");
	Иначе
		ЗаголовокФлажка = НСтр("ru = 'Подписывать и шифровать на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для подписания, шифрования и расшифровки.'");
	КонецЕсли;
		
	Элементы.СоздаватьЭлектронныеПодписиНаСервере.Заголовок = ЗаголовокФлажка;
	
	Если ИнформационнаяБазаФайловая Тогда
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на компьютер, где работает веб-сервер, подключенный к файловой информационной базе, должна быть установлена %1 и %2.'"),
			НСтр("ru = '<a href=Программы>программа электронной подписи</a>'"),
			НСтр("ru = '<a href=Сертификаты>сертификат</a> с закрытым ключом'"));
	Иначе
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на каждый компьютер, где работает сервер 1С:Предприятия, должна быть установлена %1 и %2.'"), 
			НСтр("ru = '<a href=Программы>программа электронной подписи</a>'"),
			НСтр("ru = '<a href=Сертификаты>сертификат</a> с закрытым ключом'"));	
	КонецЕсли;
	
	ПодсказкаФлажка = ПодсказкаФлажка + Символы.ПС + Символы.ПС + ПодсказкаНаСервере;
	Элементы.СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказка.Заголовок = 
		СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаФлажка);
		
КонецПроцедуры

#КонецОбласти
