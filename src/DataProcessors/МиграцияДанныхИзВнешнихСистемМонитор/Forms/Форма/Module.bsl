
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьПривилегированныйРежим(Истина);	
	Каталог = Константы.ПереходКаталог.Получить();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ОпределитьСостояние());
	
	ОбновитьТекСостояние();
	УстановитьПривилегированныйРежим(Ложь);
	
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.СписокОчередьЗаполнить.Доступность = Ложь;
		Элементы.ГруппаКоманды.Доступность = Ложь;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСостояние", 50);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТекСостояние()
	
	Если Константы.ПереходСтадия.Получить() >= 3 Тогда
		
		ДатаНачала = Константы.ДатаНачалаВыгрузкиВоВнешнююСистему.Получить();
		ТекущееСостояние = СтрШаблон(НСтр("ru = 'Состояние: Выгрузка начата (%1)'"), 
			Формат(ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		
		Элементы.Начать.Доступность = Ложь;
		Элементы.СписокОчередьЗаполнить.Доступность = Ложь; // если идет обмен, нельзя Заполнить объекты
	Иначе
		ТекущееСостояние = "";
		Элементы.Начать.Доступность = Истина;
		Элементы.СписокОчередьЗаполнить.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояние()
	
	Если ЭтаФорма.ВводДоступен() Тогда
		
		КаталогСохр = Элементы.Каталог.ТекстРедактирования;
		
		Результат = ОпределитьСостояние();
		Прогресс = Результат.Прогресс;
		
		Каталог = КаталогСохр;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьСостояние()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура();
	
	//Прогресс.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(Т.КоличествоВсего) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(Т.КоличествоВыгружено) * 100 / СУММА(Т.КоличествоВсего) КАК ЧИСЛО(3, 0))
	|	КОНЕЦ КАК Процент,
	|	МИНИМУМ(Т.Выгружено) КАК Выгружено
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты КАК Т
	|ГДЕ
	|	Т.Выгружать = ИСТИНА");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.Выгружено = Истина Тогда
		Результат.Вставить("Прогресс", 100);
		
	ИначеЕсли Не ЗначениеЗаполнено(Выборка.Процент) Тогда
		Результат.Вставить("Прогресс", 0);
		
	ИначеЕсли Выборка.Процент >= 100 Тогда
		Результат.Вставить("Прогресс", 99);
				
	Иначе
		Результат.Вставить("Прогресс", Выборка.Процент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НачатьНаСервере()

	Если Константы.ПереходСтадия.Получить() >= 3 Тогда
		ВызватьИсключение НСтр("ru = 'Выгрузка уже начата'");
	КонецЕсли;
	
	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо заполнить каталог для файлов выгрузки'");	
	КонецЕсли;
	
	ЗаписатьНаСервере();
	
	Попытка
		СоздатьКаталог(Каталог);
		УдалитьФайлы(Каталог, "*");
		Слэш = ?(Найти(Каталог, "/"), "/", "\");
		СоздатьКаталог(Каталог + Слэш + "0"); //Изменения
		
		Если Константы.ПереходСтадия.Получить() < 1 Тогда
			//Новая попытка.
			
			РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.СоздатьНаборЗаписей().Записать();
			
			МиграцияДанныхИзВнешнихСистемСервер.Журналировать(НСтр("ru = 'Начало'"));
			
			Константы.ПереходНомерСообщения.Установить(0);
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.ДатаЗаписи КАК ДатаЗаписи
			|ИЗ
			|	РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты КАК Т
			|ГДЕ
			|	Т.Модифицированность = ИСТИНА");
			МиграцияДанныхИзВнешнихСистемСервер.ЗаполнитьОчередь(Не Запрос.Выполнить().Пустой());
			
			Константы.ПереходСтадия.Установить(1);
		КонецЕсли;
		
		Если Константы.ПереходСтадия.Получить() < 2 Тогда
			
			МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Ложь);
			
			Если Константы.ИспользоватьОтметкиВремени.Получить() = Ложь Тогда
							
				Если Не МонопольныйРежим() Тогда
					Попытка
						УстановитьМонопольныйРежим(Истина);
						
					Исключение
						
						ВызватьИсключение 
							НСтр("ru = 'Для начала выгрузки необходимо временно завершить все параллельные сеансы и повторить попытку'");
							
					КонецПопытки;
				КонецЕсли;
				
				Константы.ИспользоватьОтметкиВремени.Установить(Истина);
				
				УстановитьМонопольныйРежим(Ложь);
				
			КонецЕсли;
			
			Константы.ПереходГраницаИзменений.Установить(ОтметкиВремени.ТекущаяГраница(, Истина));
			Константы.ПереходСтадия.Установить(2);
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПереходОбъекты.КоличествоВсего), 0) КАК КоличествоВсего
		|ИЗ
		|	РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты КАК ПереходОбъекты");
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьStartTxt(Выборка[0]);
		
		МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Истина);
		
		Константы.ДатаПоследнегоОбновленияВсегоЗаписейДляВыгрузки.Установить(ТекущаяДата());
		Константы.ДатаНачалаВыгрузкиВоВнешнююСистему.Установить(ТекущаяДата());
		
		Константы.ПереходСтадия.Установить(3);
		ОбновитьТекСостояние();
		
	Исключение
		
		Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		МиграцияДанныхИзВнешнихСистемСервер.Журналировать(НСтр("ru = 'Начало'"), Причина, Истина);
		ВызватьИсключение Причина;
								
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Начать(Команда)
	
	Каталог = Элементы.Каталог.ТекстРедактирования;
	
	НачатьНаСервере();
	
	ОбновитьТекСостояние();
	ОбновитьСостояние();
	
	ПоказатьПредупреждение(, НСтр("ru = 'Начата выгрузка данных в Документооборот 3.0.'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗавершитьНаСервере(Подтверждено = Неопределено)
	
	ПолнаяВыгрузка = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Выгружено КАК Выгружено
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемОбъекты КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ПереходСтадия КАК ПереходСтадия
	|		ПО ПереходСтадия.Значение >= 2
	|ГДЕ
	|	Т.Выгружено = ЛОЖЬ
	|	И Т.Выгружать = ИСТИНА");
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Если Подтверждено <> Истина Тогда
			Возврат НСтр("ru = 'Ещё не все данные выгружены. Завершить выгрузку?'");
		Иначе
			ПолнаяВыгрузка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Ложь);
	
	Если ПолнаяВыгрузка Тогда
		//Довыгружаем все изменения.
		
		НачатьТранзакцию();
		
		Попытка
			
			ОтметкиВремени.ЗаблокироватьНовыеИзменения();
			
			МиграцияДанныхИзВнешнихСистемСервер.ВыгрузкаИзменений();
			
			МиграцияДанныхИзВнешнихСистемСервер.Журналировать(НСтр("ru = 'Завершение'"));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МиграцияДанныхИзВнешнихСистемСервер.Журналировать(НСтр("ru = 'Завершение'"),,Истина);
						
		КонецПопытки;
	КонецЕсли;
	
	Каталог = Константы.ПереходКаталог.Получить();
	Если ЗначениеЗаполнено(Каталог) Тогда
		Слэш = ?(Найти(Каталог, "/"), "/", "\");
				
		Запись = Новый ЗаписьТекста(Каталог + Слэш + "Finish.txt");
		Запись.ЗаписатьСтроку(Формат(ПолнаяВыгрузка, "БЛ=0; БИ=1"));
		Запись.Закрыть();
	КонецЕсли;
		
	Константы.ПереходСтадия.Установить(0);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Завершить(Команда, Подтверждение = Неопределено) Экспорт
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЗавершитьНаСервере(Подтверждение);
	ОбновитьТекСостояние();
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Оповещение = Новый ОписаниеОповещения("Завершить", ЭтаФорма, Истина);
				
		Ответы = Новый СписокЗначений;
		Ответы.Добавить(Истина, НСтр("ru = 'Продолжить'"));
		Ответы.Добавить(Неопределено, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(Оповещение, Результат, Ответы);
	Иначе
			
		ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка данных в Документооборот 3.0 прекращена.'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОстановитьНаСервере()
	
	Константы.ПереходСтадия.Установить(2);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Ложь);
	
	ОбновитьТекСостояние();
		
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	ОстановитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Записать(Команда);
	
	ПереходСтадия = ПолучитьПереходСтадия();
	Если ПереходСтадия < 3 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка еще не начата.'"));
		Возврат;
	КонецЕсли;	
	
	Путь = СтрРазделить(ЭтаФорма.ИмяФормы, ".");
	Путь[Путь.ВГраница()] = "ФильтрВыгрузки";
	ОткрытьФорму(СтрСоединить(Путь, "."),, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаполнитьОчередь();
	
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
	Элементы.СписокОчередь.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбъект(Команда)
	
	ИОМ = ПредопределенноеЗначение("Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка");
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьОбъектПродолжение",
		ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, ИОМ, "Выберите объект метаданных", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбъектПродолжение(ИОМ, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ИОМ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОбъектНаСервере(ИОМ);
	Элементы.СписокОчередь.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектНаСервере(ИОМ)
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаполнитьОчередьОдинОбъект(ИОМ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	Если ЭтаФорма.Модифицированность Тогда
		Каталог = СокрЛП(Каталог);
		Если Найти("\/", Прав(Каталог, 1)) Тогда
			Каталог = Лев(Каталог, СтрДлина(Каталог) - 1);
		КонецЕсли;
		
		Константы.ПереходКаталог.Установить(Каталог);
		
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКаталог(Знач КаталогАргумент)
	
	Каталог = СокрЛП(КаталогАргумент);
	Если Найти("\/", Прав(Каталог, 1)) Тогда
		Каталог = Лев(Каталог, СтрДлина(Каталог) - 1);
	КонецЕсли;
	
	Константы.ПереходКаталог.Установить(Каталог);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ЗаписатьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЖурналОчиститьНаСервере()
	
	РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.СоздатьНаборЗаписей().Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОчистить(Команда)
	ЖурналОчиститьНаСервере();
	Элементы.СписокЖурнал.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыСписка(ИОМ)
	
	Возврат МиграцияДанныхИзВнешнихСистемСервер.ИмяФормыСписка(ИОМ);
	
КонецФункции

&НаКлиенте
Процедура ОбъектОткрыть(Команда)
	
	Если Элементы.СписокОчередь.ТекущиеДанные <> Неопределено
		И Элементы.СписокОчередь.ТекущиеДанные.Свойство("Объект")
		И ЗначениеЗаполнено(Элементы.СписокОчередь.ТекущиеДанные.Объект) Тогда
		ОткрытьФорму(ИмяФормыСписка(Элементы.СписокОчередь.ТекущиеДанные.Объект));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокОчередьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокОчередьКоличествоВсего" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элементы.СписокОчередь.ТекущиеДанные.Объект) Тогда
			ОткрытьФорму(ИмяФормыСписка(Элементы.СписокОчередь.ТекущиеДанные.Объект));
		КонецЕсли;
	ИначеЕсли Поле.Имя = "СписокОчередьКоличествоВыгружено" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элементы.СписокОчередь.ТекущиеДанные.Объект) Тогда
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПриИзменении(Элемент)
	
	ЗаписатьКаталог(Каталог);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Проводник = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Проводник.Каталог = Каталог;
	Проводник.Показать(Новый ОписаниеОповещения("КаталогОкончаниеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОшибкиПриИзменении(Элемент)
	ТолькоОшибкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТолькоОшибкиПриИзмененииНаСервере()
	
	Если ТолькоОшибки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЖурнал, "Ошибка", Истина,
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			СписокЖурнал, "Ошибка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Каталог = ВыбранныеФайлы[0];
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПереходСтадия()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПереходСтадия.Получить();
	
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	
	Результат = ОпределитьСостояние();
	Прогресс = Результат.Прогресс;
	
	ОбновитьТекСостояние();
	
КонецПроцедуры


&НаКлиенте
Процедура ВключитьРегЗадания(Команда)
	ВключитьРегЗаданияНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРегЗадания(Команда)
	ВключитьРегЗаданияНаСервере(Ложь);
КонецПроцедуры

&НаСервере
Процедура ВключитьРегЗаданияНаСервере(Использование)
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Использование);
КонецПроцедуры

#КонецОбласти