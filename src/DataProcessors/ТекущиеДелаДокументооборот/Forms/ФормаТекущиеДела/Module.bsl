
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаСтроки.Видимость = Ложь;
		Элементы.ГруппаКомандыИВремяОбновления.Видимость = Ложь;
		Элементы.НавигаторМобильныйКлиент.Видимость = Истина;
		НастроитьЭлементыФормыДляМобильногоУстройства();
		Возврат;
	КонецЕсли;
	
	НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
	
	// Заполнение виджетов при открытии формы
	ПрочитатьНастройкиВиджетов = Истина;
	ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов);
	
	ЦветНепринятаяВерсия = ЦветаСтиля.НепринятаяВерсия;
	
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшКартинокФормыТекущиеДела(ЭтаФорма);
	
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшЗначенийФормыТекущиеДела(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьАвтообновлениеФормы();
	
	ОбновитьВремяОбновленияФормы();
	ПодключитьОбработчикОжидания("ОтобразитьВремяОбновленияФормы", 1);
	
	ПодключитьОбработчикОжидания("ОтобразитьИконкуНастройкиHTML", 0.1, Истина);
	СкрытьИконкуНастройкиHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекущиеДелаДокументооборотКлиент.ОбработкаОповещенияФормыТекущиеДела(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастроитьАвтообновлениеНажатие(Элемент)
	
	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОтобразитьИконкуНастройкиHTML();
	СкрытьИконкуНастройкиHTML();
	
	ТекущиеДелаДокументооборотКлиент.HTMLПриНажатии(
		Этаформа, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ТекущиеДелаДокументооборотКлиент.ДиаграммаОбработкаРасшифровки(
		ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	ИндексТекущегоВиджета = ИндексТекущегоВиджета();
	
	Если Не ЗначениеЗаполнено(ИндексТекущегоВиджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = ЭтаФорма["Виджет" + ИндексТекущегоВиджета];
	
	ТекущиеДелаДокументооборотКлиент.ОбработатьНажатиеНаОбластьМеню(
		ТекущийВиджет, ЭтаФорма, Элемент, ИндексТекущегоВиджета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ПодключитьОбработчикОжидания("ЗаполнитьВиджетыОтложено", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕжедневныйОтчетЗаСегодня(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОтчетЗаСегодня = ПолучитьЕжедневныеОтчетыТекущейДаты();
	Если ЗначениеЗаполнено(ОтчетЗаСегодня) Тогда 
		ПараметрыФормы.Вставить("Ключ", ОтчетЗаСегодня);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЕжедневныйОтчет.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйОбъектКонтроля(Команда)
	
	ОткрытьФорму("Справочник.Контроль.Форма.ФормаНового");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйПроцессИсполнение(Команда)
	
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Запускает заполнение виджетов. Используется для запуска по обработчику ожидания.
//
&НаКлиенте
Процедура ЗаполнитьВиджетыОтложено()
	
	ЗаполнитьВиджеты();
	ОбновитьВремяОбновленияФормы();
	ОтобразитьВремяОбновленияФормы();
	
КонецПроцедуры

// Заполняет виджеты по настройкам пользователя.
//
// Параметры:
//   ПрочитатьНастройкиВиджетов - Булево - признак необходимости чтения настроек, перед заполнением виджетов.
//   Виджеты - Массив - массив виджетов, которые следует заполнить, если ничего не передается, то заполняются
//                      все виджеты.
//
&НаСервере
Процедура ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов = Ложь, Виджеты = Неопределено) Экспорт
	
	Если ПрочитатьНастройкиВиджетов = Истина Тогда
		// Загрузка настроек формы Текущие дела.
		Настройки = РегистрыСведений.НастройкиТекущихДел.ПолучитьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	
	ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты);
	
	ТекущийВиджетДиаграмма = "";
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета() Экспорт
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,3);
	
	Если Сред(ИндексТекущегоВиджета, 2, 1) <> "_" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВремяОбновленияФормы() Экспорт
	
	ВремяОбновленияФормы = ТекущаяДата();
	
КонецПроцедуры

// Заполняет время последнего обновления формы.
//
&НаКлиенте
Процедура ОтобразитьВремяОбновленияФормы() Экспорт
	
	КоличествоСекунд = ТекущаяДата() - ВремяОбновленияФормы;
	
	КоличествоЧасов  = Цел(КоличествоСекунд / 3600);
	КоличествоМинут  = Цел((КоличествоСекунд - КоличествоЧасов * 3600) / 60);
			
	Если КоличествоЧасов = 0 И КоличествоМинут = 0 Тогда
		ВремяПрописью = НСтр("ru = 'меньше минуты'");
	Иначе	
		ПредставлениеМинут	= НСтр("ru = 'минуту'") 
			+ "," + НСтр("ru = 'минуты'")  
			+ "," + НСтр("ru = 'минут'");
			
		ПредставлениеЧасов	= НСтр("ru = 'час'")
			+ "," + НСтр("ru = 'часа'")
			+ "," + НСтр("ru = 'часов'");
			
		МинутыПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоМинут, 
			ПредставлениеМинут);
			
		ЧасыПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоЧасов, 
			ПредставлениеЧасов);
				
		Если КоличествоЧасов > 0 Тогда
			ВремяПрописью = ЧасыПрописью + " " + МинутыПрописью;
		Иначе
			ВремяПрописью = МинутыПрописью;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеВремениОбновленияФормы = СтрШаблон(
		НСтр("ru = 'Обновлено %1 назад'"),ВремяПрописью);
	
	ВремяОбновленияФормыСтрокой = ОписаниеВремениОбновленияФормы;
	
КонецПроцедуры

// Отображать иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура ОтобразитьИконкуНастройкиHTML()
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(НовыйТекущийВиджет) Тогда
		ИмяРеквизитаHTML = "HTML" + НовыйТекущийВиджет;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:hidden;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:hidden;}",
				".visibility_img{visibility:visible;}");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура СкрытьИконкуНастройкиHTML()
	
	ПодключитьОбработчикОжидания("СкрытьИконкуНастройкиHTML", 0.1, Истина);
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ТекущийВиджетHTML = НовыйТекущийВиджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВиджетHTML) Тогда
		ИмяРеквизитаHTML = "HTML" + ТекущийВиджетHTML;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:visible;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:visible;}",
				".visibility_img{visibility:hidden;}");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВиджетHTML = НовыйТекущийВиджет;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЕжедневныеОтчетыТекущейДаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕжедневныйОтчет.Ссылка
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|ГДЕ
	|	ЕжедневныйОтчет.Сотрудник = &Сотрудник
	|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И НЕ ЕжедневныйОтчет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыДляМобильногоУстройства()
	
	// Заполняем адаптированные разделы с учетом ФО.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Элементы.НавигаторМК1_1_1.Картинка = БиблиотекаКартинок.МКНавигаторЗадачиМне;
		Элементы.НавигаторМК1_1_1.УстановитьДействие("Нажатие", "Подключаемый_МКЗадачиМнеНажатие");
		Элементы.НавигаторМК1_1_2.ТекстНевыбраннойКартинки = НСтр("ru='Задачи мне'");
		Элементы.НавигаторМК1_1_2.УстановитьДействие("Нажатие", "Подключаемый_МКЗадачиМнеНажатие");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЕженедельныеОтчеты")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты") Тогда
		Элементы.НавигаторМК1_2_1.Картинка = БиблиотекаКартинок.МКНавигаторУчетВремени;
		Элементы.НавигаторМК1_2_1.УстановитьДействие("Нажатие", "Подключаемый_МоиОтчетыНажатие");
		Элементы.НавигаторМК1_2_2.ТекстНевыбраннойКартинки = НСтр("ru='Мои отчеты'");
		Элементы.НавигаторМК1_2_2.УстановитьДействие("Нажатие", "Подключаемый_МоиОтчетыНажатие");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		Элементы.НавигаторМК1_3_1.Картинка = БиблиотекаКартинок.МКНавигаторОтсутствия;
		Элементы.НавигаторМК1_3_1.УстановитьДействие("Нажатие", "Подключаемый_ОтсутствияНажатие");
		Элементы.НавигаторМК1_3_2.ТекстНевыбраннойКартинки = НСтр("ru='Отсутствия'");
		Элементы.НавигаторМК1_3_2.УстановитьДействие("Нажатие", "Подключаемый_ОтсутствияНажатие");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Элементы.НавигаторМК2_1_1.Картинка = БиблиотекаКартинок.МКНавигаторКонтроль;
		Элементы.НавигаторМК2_1_1.УстановитьДействие("Нажатие", "Подключаемый_КонтрольНажатие");
		Элементы.НавигаторМК2_1_2.ТекстНевыбраннойКартинки = НСтр("ru='Контроль'");
		Элементы.НавигаторМК2_1_2.УстановитьДействие("Нажатие", "Подключаемый_КонтрольНажатие");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Элементы.НавигаторМК2_2_1.Картинка = БиблиотекаКартинок.МКНавигаторКалендарь;
		Элементы.НавигаторМК2_2_1.УстановитьДействие("Нажатие", "Подключаемый_КалендарьНажатие");
		Элементы.НавигаторМК2_2_2.ТекстНевыбраннойКартинки = НСтр("ru='Календарь'");
		Элементы.НавигаторМК2_2_2.УстановитьДействие("Нажатие", "Подключаемый_КалендарьНажатие");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту") Тогда
		Элементы.НавигаторМК2_3_1.Картинка = БиблиотекаКартинок.МКНавигаторПочта;
		Элементы.НавигаторМК2_3_1.УстановитьДействие("Нажатие", "Подключаемый_ПочтаНажатие");
		Элементы.НавигаторМК2_3_2.ТекстНевыбраннойКартинки = НСтр("ru='Почта'");
		Элементы.НавигаторМК2_3_2.УстановитьДействие("Нажатие", "Подключаемый_ПочтаНажатие");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МКЗадачиМнеНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/Задача.ЗадачаИсполнителя.Команда.ЗадачиМне");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МоиОтчетыНажатие(Элемент)
	
	ОткрытьФорму("ЖурналДокументов.УчетРабочегоВремени.Форма.ЖурналСвоихОтчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтсутствияНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("e1cib/list/Документ.Отсутствие");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтрольНажатие(Элемент)
	
	ОткрытьФорму("Справочник.Контроль.Форма.НаКонтроле");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КалендарьНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/Справочник.ЗаписиРабочегоКалендаря.Команда.ОткрытьКалендарь");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПочтаНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/ОбщаяКоманда.ЭлектроннаяПочта");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Автообновление

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли

	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или Не НастройкиАвтообновления.Автообновление Тогда
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ЗаполнитьВиджеты();
		ОбновитьВремяОбновленияФормы();
		ОтобразитьВремяОбновленияФормы();
		ОтобразитьИконкуНастройкиHTML();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

