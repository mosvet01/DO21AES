
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Параметры.Свойство("ТекущийПользователь", ТекущийПользователь);

	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Элементы.ТекущийПользователь.Видимость = РольДоступна(Метаданные.Роли.ПолныеПрава);
	
	Настройки = МП_СлужебныйПовтИсп.НайстройкиПользователя(ТекущийПользователь);

	ЗаполнитьЗначенияЭлементовПоНастройкам(Настройки);
	
	QRКодНастроек(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	
	ЗаполнитьЗначенияЭлементовПоНастройкам();
	
	ЗапомнитьЗначения();
	
	QRКодНастроек();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапомнитьЗначения();
	
	СинхронизироватьПочтуПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНастройкиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму("Обработка.НастройкиМобильногоПриложения.Форма.ОбщиеНастройки", ПараметрыФормы, ЭтаФорма, , , ,
		Новый ОписаниеОповещения("ОбщиеНастройкиНажатиеЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНастройкиНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		//Переформируем QR-код
		QRКодНастроек();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапкиСинхронизацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму("Обработка.НастройкиМобильногоПриложения.Форма.ПапкиСинхронизации",
		ПараметрыФормы, ЭтаФорма, , , ,
			Новый ОписаниеОповещения("ВыбратьПапкиСинхронизацииНажатиеЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапкиСинхронизацииНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзмененыПапки = Результат;
	
	Если ИзмененыПапки = Истина Тогда
		ЗаполнитьЗначенияЭлементовПоНастройкам();
	КонецЕсли;
	
	НастроитьДоступностьНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьПочтуПриИзменении(Элемент)
	
	НастроитьДоступностьНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизацияУчетаВремениПриИзменении(Элемент)
	
	НастроитьДоступностьНадписей();
	
	Если Не СинхронизацияУчетаВремени Тогда
		УдалитьПроектыИзСинхронизацииПриНеобходимости(ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПроектыИзСинхронизацииПриНеобходимости(Пользователь)
	
	РегистрыСведений.МП_СинхронизацияПроектов.УдалитьВсеПроектыИзСинхронизацииПриНеобходимости(Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроектыСинхронизацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму("Обработка.НастройкиМобильногоПриложения.Форма.ВыборПроектовСинхронизации",
		ПараметрыФормы, ЭтаФорма, , , ,
			Новый ОписаниеОповещения("ВыбратьПроектыСинхронизацииНажатиеЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроектыСинхронизацииНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзмененыПроекты = Результат;
	
	Если ИзмененыПроекты = Истина Тогда
		ЗаполнитьЗначенияЭлементовПоНастройкам();
	КонецЕсли;
	
	НастроитьДоступностьНадписей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)

	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле  = "ТекущийПользователь";
		Сообщение.Текст = "Не выбран пользователь";
		Сообщение.Сообщить();

		Возврат;

	КонецЕсли;

	ЗаписатьНастройкиСинхронизацииПоРазделам();
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУведомленияПоPush(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПодпискиПользователя", Новый Структура("Пользователь", ТекущийПользователь));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкачатьПриложениеНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиМобильногоПриложения.Форма.ВариантыЗагрузки", , ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастроитьДоступностьНадписей()
	
	Элементы.НадписьПапкиСинхронизации.Доступность = (СинхронизацияПочты = Истина);
	Элементы.НадписьПроектыСинхронизации.Доступность = (СинхронизацияУчетаВремени = Истина);
	
КонецПроцедуры

&НаСервере
Функция QRКодНастроек(Настройки = Неопределено)

	Если Настройки = Неопределено Тогда
		Настройки = МП_СлужебныйПовтИсп.НайстройкиПользователя(ТекущийПользователь);;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийПользователь, "ИдентификаторПользователяИБ"));
	
	АдресПодключения = СокрЛП(Константы.АдресПубликацииНаВебСервере.Получить());
	
	Если ПользовательИБ = Неопределено Тогда
		ИмяПользователя = Строка(ТекущийПользователь);
		ПарольУстановлен = 1;
	Иначе
		ИмяПользователя  = ПользовательИБ.Имя;
		ПарольУстановлен = ?(ПользовательИБ.ПарольУстановлен, 1, 0);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПодробныйПротокол = ?(Настройки.ПодробныйПротоколОбменаСМобильнымУстройством, 1, 0);
	
	СсылкаПараметры = СтрШаблон("%1;%2;%3;%4;%5;%6", 
		АдресПодключения, ИмяПользователя, ПарольУстановлен,
		ПодробныйПротокол, Настройки.СрокУстареванияДанных,
		Настройки.МаксимальныйРазмерФайлов);

	// формируем QR-код
	
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(СсылкаПараметры, 0, 250);

	КодНастроек = ПоместитьВоВременноеХранилище(ДанныеQRКода, УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗапомнитьЗначения();
	
	СинхронизируемыеРазделы = Новый Структура;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		
		ИмяЭлемента = ЭлементФормы.Имя;
		
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") И ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
			СинхронизируемыеРазделы.Вставить(ИмяЭлемента, ЭтаФорма[ИмяЭлемента]);
		КонецЕсли;
		
	КонецЦикла;

	АдресРазделовСинхронизацииПриОткрытии = ПоместитьВоВременноеХранилище(СинхронизируемыеРазделы,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСинхронизацииПоРазделам()
	
	РазделыСинхронизацииПриОткрытии = ПолучитьИзВременногоХранилища(
		АдресРазделовСинхронизацииПриОткрытии);
		
	НастройкиИзменены = Ложь;
	ИзмененныеРазделы = Новый Массив;
	Для Каждого КлючИЗначение Из РазделыСинхронизацииПриОткрытии Цикл
		
		ИмяРаздела = КлючИЗначение.Ключ;
		
		Если ЭтаФорма[ИмяРаздела] <> КлючИЗначение.Значение Тогда
			НастройкиИзменены = Истина;
			ТипНастройки = Перечисления.ОбменСМобильнымиТипыНастроекПользователей[ИмяРаздела];
			
			РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
				ТекущийПользователь, ТипНастройки, ЭтаФорма[ИмяРаздела]);
				
			РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(ТекущийПользователь, 
				ТипНастройки);
			
			ИзмененныеРазделы.Добавить(ИмяРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
	//Совместимость с более старыми версиями мобильного приложения
	Если ИзмененыПапки Или НастройкиИзменены Тогда
		
		ОбнулитьОтметкуПриложенийПользователя();
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		Узлы = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзлыОбменаПоВладельцу(ТекущийПользователь);
		
		Для Каждого ИзмененныйРаздел Из ИзмененныеРазделы Цикл
		
			ЗарегистрироватьПервичныеДанныеДляВыгрузки(Узлы, ИзмененныйРаздел);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПервичныеДанныеДляВыгрузки(Узлы, ИзмененныйРаздел)
	
	ПараметрыСинхронизации =
		МП_СлужебныйПовтИсп.НайстройкиПользователя(ТекущийПользователь);

	Для Каждого Узел Из Узлы Цикл
		
		Если ИзмененныйРаздел = "СинхронизацияЗадач" Тогда
			ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьЗадачиДляПервичнойЗагрузки(
				Узел, ПараметрыСинхронизации);
		КонецЕсли;
		
		Если ИзмененныйРаздел = "СинхронизацияПочты" Тогда
			ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьПочтуДляПервичнойЗагрузки(
				Узел, ПараметрыСинхронизации);
		КонецЕсли;
		
		Если ИзмененныйРаздел = "СинхронизацияКалендаря" Тогда
			ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьКалендарьДляПервичнойЗагрузки(
				Узел, ПараметрыСинхронизации);
		КонецЕсли;
		
		Если ИзмененныйРаздел = "СинхронизацияКонтроля" Тогда
			ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьКонтрольДляПервичнойЗагрузки(
				Узел, ПараметрыСинхронизации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьОтметкуПриложенийПользователя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОМобильныхКлиентах.МобильныйКлиент КАК МобильноеПриложение
		|ИЗ
		|	РегистрСведений.СведенияОМобильныхКлиентах КАК СведенияОМобильныхКлиентах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
		|		ПО СведенияОМобильныхКлиентах.МобильныйКлиент = ПользователиМобильногоПриложения.Ссылка
		|ГДЕ
		|	ПользователиМобильногоПриложения.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МЗ = РегистрыСведений.СведенияОМобильныхКлиентах.СоздатьМенеджерЗаписи();
		МЗ.МобильныйКлиент = ВыборкаДетальныеЗаписи.МобильноеПриложение;
		МЗ.Прочитать();
		МЗ.УдалитьОтметкаВремениСборкиДанных = "";
		МЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияЭлементовПоНастройкам(Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		Настройки = МП_СлужебныйПовтИсп.НайстройкиПользователя(ТекущийПользователь);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	
КонецПроцедуры

#КонецОбласти
