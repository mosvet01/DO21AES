
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Используем универсальную дату, т.к. важно, чтобы даты учитывались на одной временной шкале.
	// И в списке подсветились те же проблемы, о которых уведомил механизм контроля проблем с распознаванием. 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ТекущаяДата", УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс()), Истина);
	
	НастроитьУсловноеОформлениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьТекущуюДатуВСписке", 300);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Файлы = Новый Массив;
	СтрокиСписка = Новый Соответствие;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ДатаСеансаУниверсальная = УниверсальноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
	ПоправкаКУниверсальномуВремени = ДатаСеансаУниверсальная - ДатаСеанса;
	
	Для Каждого СтрокаСписка Из Строки Цикл
		Файлы.Добавить(СтрокаСписка.Ключ.Файл);
		СтрокиСписка[СтрокаСписка.Ключ.Файл] = СтрокаСписка;
		
		СтрокаСписка.Значение.Данные.ДатаПередачиНаРаспознавание = 
			СтрокаСписка.Значение.Данные.ДатаПередачиНаРаспознавание - ПоправкаКУниверсальномуВремени;
		
		СтрокаСписка.Значение.Данные.ДатаПоследнейПроверкиРезультата = 
			СтрокаСписка.Значение.Данные.ДатаПоследнейПроверкиРезультата - ПоправкаКУниверсальномуВремени;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Владелец КАК Владелец,
		|	ВерсииФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка В(&Файлы)";
	Запрос.УстановитьПараметр("Файлы", Файлы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСписка = СтрокиСписка[Выборка.Ссылка];
		Если СтрокаСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСписка.Значение.Данные.СсылкаНаФайл1 = Выборка.Владелец;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторитьРаспознавание(Команда)
	
	ВыделенныеФайлы = ВыделенныеФайлыВСписке();
	Если ВыделенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для повторения следует выделить файлы в списке.'"));
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется возобновление распознавания файлов в сервисе.'"));
	
	ВозобновитьРаспознаваниеФайловВСервисе(ВыделенныеФайлы);
	
	Состояние(НСтр("ru = 'Возобновление распознавания файлов в сервисе завершено.'"));
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьРаспознавание(Команда)
	
	ВыделенныеФайлы = ВыделенныеФайлыВСписке();
	Если ВыделенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для прерывания следует выделить файлы в списке.'"));
		Возврат;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"ЗавершитьПрерываниеРаспознавания", ЭтотОбъект, ВыделенныеФайлы);
	
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
		ОбработчикЗавершения,
		НСтр("ru = 'Распознавание выделенных файлов будет прервано.
			|
			|Продолжить?'"),
		НСтр("ru = 'Да'"),
		НСтр("ru = 'Нет'"));
	
КонецПроцедуры

// Продолжение ПрерватьРаспознавание.
//
&НаКлиенте
Процедура ЗавершитьПрерываниеРаспознавания(Ответ, Файлы) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется прерывание распознавания файлов в сервисе.'"));
	
	ПрерватьРаспознаваниеФайловВСервисе(Файлы);
	
	Состояние(НСтр("ru = 'Распознавания файлов в сервисе прервано.'"));
	
	Элементы.Список.Обновить()
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	// Используем универсальную дату, т.к. важно, чтобы даты учитывались на одной временной шкале.
	// И в списке подсветились те же проблемы, о которых уведомил механизм контроля проблем с распознаванием. 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ТекущаяДата", ОбщегоНазначенияКлиент.ДатаУниверсальная(), Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьУсловноеОформлениеСписка()
	
	Список.УсловноеОформление.Элементы.Очистить();
	
	// ФайлДавноПереданНаРаспознавание
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлДавноПереданНаРаспознавание");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДатаПередачиНаРаспознавание");
	
	// ПоФайлуДавноНеПроверялсяРезультат
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоФайлуДавноНеПроверялсяРезультат");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДатаПоследнейПроверкиРезультата");
	
	// КоличествоПопыток, ОписаниеОшибки
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоПопыток");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = 3;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("КоличествоПопыток");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ОписаниеОшибки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюДатуВСписке()
	
	// Используем универсальную дату, т.к. важно, чтобы даты учитывались на одной временной шкале.
	// И в списке подсветились те же проблемы, о которых уведомил механизм контроля проблем с распознаванием. 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ТекущаяДата", ОбщегоНазначенияКлиент.ДатаУниверсальная(), Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеФайлыВСписке()
	
	ВыделенныеФайлы = Новый Массив;
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		ВыделенныеФайлы.Добавить(ДанныеСтроки.СсылкаНаФайл2);
	КонецЦикла;
	
	Возврат ВыделенныеФайлы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВозобновитьРаспознаваниеФайловВСервисе(Знач Файлы) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		РаботаСФайламиВызовСервера.ВозобновитьРаспознаваниеФайлаВСервисе(Файл);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрерватьРаспознаваниеФайловВСервисе(Знач Файлы)
	
	Для Каждого Файл Из Файлы Цикл
		РаботаСФайламиВызовСервера.ПрерватьРаспознаваниеФайлаВСервисе(Файл);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти