#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет файл в регистр.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//  ИдентификаторЗадания - Строка
//
Процедура ДобавитьФайл(Файл, ИдентификаторЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Файл = Файл;
	Запись.ИдентификаторЗадания = ИдентификаторЗадания;
	
	// Используем универсальную дату, т.к. файл может передаваться на распознавание
	// как с клиента, так и с сервера. Важно, чтобы даты учитывались на одной временной шкале.
	// Это нужно для корректной работы механизма контроля проблем с распознаванием.
	Запись.ДатаПередачиНаРаспознавание = УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс());
	Запись.ДатаПоследнейПроверкиРезультата = Запись.ДатаПередачиНаРаспознавание;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет запись из регистра.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
Процедура УдалитьЗапись(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает идентификатор задания распознавания файла.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторЗаданияРаспознавания(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФайлыНаРаспознавании.ИдентификаторЗадания КАК ИдентификаторЗадания
		|ИЗ
		|	РегистрСведений.ФайлыНаРаспознавании КАК ФайлыНаРаспознавании
		|ГДЕ
		|	ФайлыНаРаспознавании.Файл = &Файл";
	Запрос.УстановитьПараметр("Файл", Файл);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторЗадания;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Фиксирует ошибку распознавания файла, увеличивая количество попыток.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//  ОписаниеОшибки - Строка
//
Процедура ЗафиксироватьОшибкуПриРаспознавании(Файл, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].КоличествоПопыток = НаборЗаписей[0].КоличествоПопыток + 1;
	НаборЗаписей[0].ОписаниеОшибки = ОписаниеОшибки;
	
	// Используем универсальную дату, т.к. файл может передаваться на распознавание
	// как с клиента, так и с сервера. Важно, чтобы даты учитывались на одной временной шкале.
	// Это нужно для корректной работы механизма контроля проблем с распознаванием.
	НаборЗаписей[0].ДатаПоследнейПроверкиРезультата = УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет дату последней проверки результата распознавания файла.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
Процедура ОбновитьДатуПоследнейПроверкиРезультата(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Прочитать();
	
	// Используем универсальную дату, т.к. файл может передаваться на распознавание
	// как с клиента, так и с сервера. Важно, чтобы даты учитывались на одной временной шкале.
	// Это нужно для корректной работы механизма контроля проблем с распознаванием.
	НаборЗаписей[0].ДатаПоследнейПроверкиРезультата = УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает количество попыток распознавания файла.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоПопыток(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФайлыНаРаспознавании.КоличествоПопыток КАК КоличествоПопыток
		|ИЗ
		|	РегистрСведений.ФайлыНаРаспознавании КАК ФайлыНаРаспознавании
		|ГДЕ
		|	ФайлыНаРаспознавании.Файл = &Файл";
	Запрос.УстановитьПараметр("Файл", Файл);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПопыток;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Сбрасывает ошибку распознавания файла и обнуляет счетчик попыток.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
Процедура СброситьОшибку(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].КоличествоПопыток = 0;
	НаборЗаписей[0].ОписаниеОшибки = "";
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Устанавливает блокировку в регистре по файлу.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
Процедура ЗаблокироватьФайл(Файл) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(
		СоздатьКлючЗаписи(Новый Структура("Файл", Файл)));
	
КонецПроцедуры

// Снимает блокировку в регистре по файлу.
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл
//
Процедура РазблокироватьФайл(Файл) Экспорт
	
	РазблокироватьДанныеДляРедактирования(
		СоздатьКлючЗаписи(Новый Структура("Файл", Файл)));
	
КонецПроцедуры

// Возвращает количество файлов файлов на распознавании.
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоФайловНаРаспознавании() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	РегистрСведений.ФайлыНаРаспознавании КАК ФайлыНаРаспознавании";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

// Возвращает наличие файлов, длительность распознавания которых превысила 30 минут.
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьФайлыНаРаспознаванииБолее30Мин() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФайлыНаРаспознавании.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ФайлыНаРаспознавании КАК ФайлыНаРаспознавании
		|ГДЕ
		|	ФайлыНаРаспознавании.ДатаПередачиНаРаспознавание <= &ДатаПередачиНаРаспознавание
		|	И ФайлыНаРаспознавании.ДатаПередачиНаРаспознавание <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ДатаПередачиНаРаспознавание",
		УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс()) - 1800);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает наличие файлов распознавание которых остановлено.
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьФайлыРаспознаваниеКоторыхОстановленоПоОшибке() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФайлыНаРаспознавании.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ФайлыНаРаспознавании КАК ФайлыНаРаспознавании
		|ГДЕ
		|	ФайлыНаРаспознавании.КоличествоПопыток >= &МаксКоличествоПопыток";
	
	Запрос.УстановитьПараметр("МаксКоличествоПопыток",
		МаксимальноеКоличествоНеудачныхПопытокОбработки());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает максимально допустимое количество неудачных попыток обработки файла
// на распознавании.
//
// Возвращаемое значение:
//  Число
//
Функция МаксимальноеКоличествоНеудачныхПопытокОбработки() Экспорт
	
	Возврат 3;
	
КонецФункции

#КонецОбласти

#КонецЕсли