#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
		Для Каждого Запись Из ЭтотОбъект Цикл
			Запись.Организация = Организация;
		КонецЦикла;
	КонецЕсли;

	// У разных организаций не могут между собой пересекаться каталоги отправки и получения, иначе не понятно, по какой
	// организации загружать.
	// 
	Для Каждого Запись Из ЭтотОбъект Цикл
		ПроверитьСовпадениеКаталогов(Запись, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.КаталогОтправки) 
			И Не МЭДО.ПроверитьСуществуетЛиКаталог(Запись.КаталогОтправки, Неопределено) Тогда
			Отказ = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(Запись.КаталогПолучения) 
			И Не МЭДО.ПроверитьСуществуетЛиКаталог(Запись.КаталогПолучения, Неопределено) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСовпадениеКаталогов(Запись, Отказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Настройки.Организация
		|ИЗ
		|	РегистрСведений.НастройкиОрганизацийМЭДО КАК Настройки
		|ГДЕ
		|	Настройки.Организация <> &Организация
		|	И (
		|		Настройки.КаталогОтправки = &КаталогОтправки
		|		ИЛИ Настройки.КаталогПолучения = &КаталогПолучения
		|	)");
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Запрос.УстановитьПараметр("КаталогОтправки", Запись.КаталогОтправки);
	Запрос.УстановитьПараметр("КаталогПолучения", Запись.КаталогПолучения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Обнаружено совпадение каталогов обмена с %1'"), Выборка.Организация),
			Выборка.Организация, , , Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе

#Область Инициализация

ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");

#Конецобласти

#КонецЕсли