#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает набор записей в регистр сведений с отбором по объекту
//
Процедура ЗаписатьНаборПоОбъекту(Объект, ТаблицаИсточник) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.РабочиеГруппыДляПерехода.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект);
	
	Для каждого ИсточникСтрока Из ТаблицаИсточник Цикл
		
		Если Не ЗначениеЗаполнено(ИсточникСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ИсточникСтрока);
		Запись.Объект = Объект;
		
	КонецЦикла;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

#Область ПереходНаВерсию3_0

// Сформировать и записать рабочие группы по объектам выгрузки.
// 
// Параметры:
//  Ссылки - Массив
//  Метаданное - ОбъектМетаданных
Процедура СформироватьИЗаписатьРабочиеГруппыПоОбъектамВыгрузки(Ссылки, Метаданное) Экспорт
	
	РабочиеГруппы = РабочиеГруппыОбъектовДляПерехода(Ссылки, Метаданное);
	ЗаписатьРабочиеГруппыДляПерехода(РабочиеГруппы);
	
КонецПроцедуры

// Записать рабочие группы для перехода.
// 
// Параметры:
//  РабочиеГруппы - Соответствие - Рабочие группы
Процедура ЗаписатьРабочиеГруппыДляПерехода(РабочиеГруппы) Экспорт
	
	Для Каждого КлючИЗначение Из РабочиеГруппы Цикл
		ЗаписатьНаборПоОбъекту(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Рабочие группы объектов для перехода.
// 
// Параметры:
//  Ссылки Ссылки
//  Метаданное Метаданное
// 
// Возвращаемое значение:
//  Соответствие - Рабочие группы объектов для перехода
Функция РабочиеГруппыОбъектовДляПерехода(Ссылки, Метаданное) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочиеГруппы = Новый Соответствие;
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	ТаблицаУчастников.Колонки.Добавить("Объект", 
		Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Ссылки[0]))));

	// Все потенциальные участники РГ по переданным объектам.
	ЗапросУчастников = Новый Запрос;
	ЗапросУчастников.Текст = ТекстЗапросаУчастниковПоМетаданному(Метаданное);
	ЗапросУчастников.УстановитьПараметр("Ссылки", Ссылки);
	
	ТаблицыУчастников = ЗапросУчастников.ВыполнитьПакет();
	
	Для Каждого Таблица Из ТаблицыУчастников Цикл
		
		Участники = Таблица.Выгрузить();
		Для Каждого Строка Из Участники Цикл
			Для Каждого Колонка Из Участники.Колонки Цикл
				
				Если Колонка.Имя = "Источник" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
					НовСтр = ТаблицаУчастников.Добавить();
					НовСтр.Объект = Строка.Источник;
					НовСтр.Участник = Строка[Колонка.Имя];
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаУчастников.Свернуть("Объект, Участник, Изменение");
	ВсеУчастники = ТаблицаУчастников.ВыгрузитьКолонку("Участник");
	
	ЗапросСлужебных = Новый Запрос;
	ЗапросСлужебных.Текст = "Выбрать
	|	Ссылка
	|Из
	|	Справочник.Пользователи
	|Где
	|	Служебный
	|	И Ссылка В (&Участники)";
	ЗапросСлужебных.УстановитьПараметр("Участники", ВсеУчастники);
	Служебные = ЗапросСлужебных.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
 	// разыменуем полные роли, подразделения, рабочие группы
	ЗапросРазыменования = Новый Запрос;
	ЗапросРазыменования.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель КАК РазыменованныйУчастник,
	|	ИсполнителиЗадач.РольИсполнителя КАК Участник
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя В (&Участники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Подразделение
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Подразделение В (&Участники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РабочиеГруппыСостав.Пользователь,
	|	РабочиеГруппыСостав.Ссылка
	|ИЗ
	|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
	|ГДЕ
	|	РабочиеГруппыСостав.Ссылка В (&Участники)";
	ЗапросРазыменования.УстановитьПараметр("Участники", ВсеУчастники);
	РазыменованныеУчастники = ЗапросРазыменования.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУчастники, 
		РазыменованныеУчастники.ВыгрузитьКолонку("РазыменованныйУчастник"), Истина);
	
	
	// Соберем права на изменение	
	ЗапросПрав = Новый Запрос;
	ЗапросПрав.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваПоДескрипторамДоступаОбъектов.Пользователь КАК Участник,
	|	ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
	|	ДескрипторыДляОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
	|		ПО (ПраваПоДескрипторамДоступаОбъектов.Дескриптор = ДескрипторыДляОбъектов.Дескриптор)
	|		И (ДескрипторыДляОбъектов.Объект В (&Объекты))
	|ГДЕ
	|	ПраваПоДескрипторамДоступаОбъектов.Пользователь В (&Участники)
	|	И ПраваПоДескрипторамДоступаОбъектов.Изменение
	|	И НЕ ДескрипторыДляОбъектов.Отключен
	|	И НЕ ПраваПоДескрипторамДоступаОбъектов.Пользователь.Служебный";
	ЗапросПрав.УстановитьПараметр("Участники", ВсеУчастники);
	ЗапросПрав.УстановитьПараметр("Объекты", ТаблицаУчастников.ВыгрузитьКолонку("Объект"));
	ПраваНаИзменение = ЗапросПрав.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("Объект, Участник");
	Для Каждого Строка Из ПраваНаИзменение Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		
		СтрокиУчастников = ТаблицаУчастников.НайтиСтроки(Отбор);
		Если СтрокиУчастников.Количество() = 0 Тогда
			// Возможно, участник был разыменован, а в РГ он в составе контейнера
			Неразыменованный = РазыменованныеУчастники.Найти(Строка.Участник, "РазыменованныйУчастник");
			Если Неразыменованный <> Неопределено Тогда
				Отбор.Участник = Неразыменованный.Участник;
			КонецЕсли;
			СтрокиУчастников = ТаблицаУчастников.НайтиСтроки(Отбор); 
		КонецЕсли;
		
		Для Каждого СтрокаУчастника Из СтрокиУчастников Цикл
			СтрокаУчастника.Изменение = Строка.Изменение;
		КонецЦикла;
		
	КонецЦикла;
	
	// Разберем рабочие группы по объектам
	Для Каждого Строка Из ТаблицаУчастников Цикл
		Если РабочиеГруппы[Строка.Объект] = Неопределено Тогда
			РабочиеГруппы[Строка.Объект] = Новый Массив;
		КонецЕсли;
		Если Служебные.Найти(Строка.Участник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РабочиеГруппы[Строка.Объект].Добавить(Строка);
	КонецЦикла;

	Возврат РабочиеГруппы;
	
КонецФункции

// Текст запроса участников по метаданному.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное по которому нужен текст запроса для получения участников
// 
// Возвращаемое значение:
//  Строка - Текст запроса участников по метаданному
Функция ТекстЗапросаУчастниковПоМетаданному(Метаданное) Экспорт
	
	НужныПроекты = Ложь;
	НужныМероприятия = Ложь;
	НужныПисьма = Ложь;
	НуженЖурналПередачи = Ложь;
	НужныБизнесПроцессы = Истина;
	НужныЭП = Истина;
	НужныРезолюции = Истина;
	НуженКонтроль = Истина;
	
	МетаданныеСИменамиТаблиц = ТаблицаМетаданныхДляПереходнойРГ();
	ИмяТаблицы = МетаданныеСИменамиТаблиц.Найти(Метаданное).ИмяТаблицы;
	
	ТекстыЗапросов = Новый Массив;
	РазделительЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Объект КАК Источник,
		|	РабочиеГруппы.Участник
		|ИЗ
		|	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	ВЫРАЗИТЬ(РабочиеГруппы.Объект КАК " + ИмяТаблицы + ") В (&Ссылки)");

	// Вместо метода ДобавитьУчастниковИзИсточника получим всех участников одним запросом
	Если Метаданное = Метаданные.Справочники.ВнутренниеДокументы Тогда
		
		НужныПроекты = Истина;
		НуженЖурналПередачи = Истина;
		НужныПисьма = Истина;
		НужныМероприятия = Истина;
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Источник,
			|	Документы.Ответственный,
			|	Документы.Зарегистрировал,
			|	Документы.Подготовил,
			|	Документы.Подписал,
			|	Документы.Адресат,
			|	Документы.Создал
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК Документы
			|Где
			|	Документы.Ссылка В (&Ссылки)");
		
		ТекстыЗапросов.Добавить( 
			"ВЫБРАТЬ
			|	ВнутренниеДокументыСтороны.Подписал,
			|	ВнутренниеДокументыСтороны.Ссылка КАК Источник
			|ИЗ
			|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
			|Где
			|	ВнутренниеДокументыСтороны.Ссылка В (&Ссылки)
			|	И ТИПЗНАЧЕНИЯ(ВнутренниеДокументыСтороны.Подписал) = ТИП(Справочник.Пользователи)");
			
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ВнутренниеДокументыГрифыУтверждения.Ссылка КАК Источник,
			|	ВнутренниеДокументыГрифыУтверждения.АвторУтверждения
			|ИЗ
			|	Справочник.ВнутренниеДокументы.ГрифыУтверждения КАК ВнутренниеДокументыГрифыУтверждения
			|Где
			|	ВнутренниеДокументыГрифыУтверждения.Ссылка В (&Ссылки)");
			
	ИначеЕсли Метаданное = Метаданные.Справочники.ВходящиеДокументы Тогда
		
		НужныПроекты = Истина;
		НуженЖурналПередачи = Истина;
		НужныПисьма = Истина;
		НужныМероприятия = Истина;
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Источник,
			|	Документы.Ответственный,
			|	Документы.Зарегистрировал,
			|	Документы.Подписал,
			|	Документы.Адресат,
			|	Документы.Создал
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК Документы
		  	|Где
			|	Документы.Ссылка В (&Ссылки)");
		
	ИначеЕсли Метаданное = Метаданные.Справочники.ИсходящиеДокументы Тогда
		
		НужныПроекты = Истина;
		НуженЖурналПередачи = Истина;
		НужныПисьма = Истина;
		НужныМероприятия = Истина;
		НужныРезолюции = Ложь;
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Источник,
			|	Документы.Ответственный,
			|	Документы.Зарегистрировал,
			|	Документы.Подписал,
			|	Документы.Подготовил,
			|	Документы.Создал
			|ИЗ
			|	Справочник.ИсходящиеДокументы КАК Документы
			|Где
			|	Документы.Ссылка В (&Ссылки)");
		
	ИначеЕсли Метаданное = Метаданные.Справочники.Проекты Тогда
		
		НужныРезолюции = Ложь;
		НужныЭП = Ложь;
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Проекты.Руководитель КАК Участник,
			|	Проекты.Ссылка КАК Источник
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.Ссылка В (&Ссылки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПроектыПроектнаяКоманда.Исполнитель,
			|	ПроектыПроектнаяКоманда.Ссылка
			|ИЗ
			|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
			|ГДЕ
			|	ПроектыПроектнаяКоманда.Ссылка В (&Ссылки)");
		
		// проектные задачи
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Владелец КАК Источник,
			|	ПроектныеЗадачиИсполнители.Исполнитель
			|ИЗ
			|	Справочник.ПроектныеЗадачи.Исполнители КАК ПроектныеЗадачиИсполнители
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|		ПО ПроектныеЗадачиИсполнители.Ссылка = ПроектныеЗадачи.Ссылка
			|ГДЕ
			|	ПроектныеЗадачи.Владелец В (&Ссылки)");
		
	ИначеЕсли Метаданное = Метаданные.Справочники.Мероприятия Тогда
		
		НужныПроекты = Истина;
		НужныПисьма = Истина;
		НужныРезолюции = Ложь;
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Мероприятия.Ссылка КАК Источник,
			|	Мероприятия.Организатор,
			|	Мероприятия.Секретарь,
			|	Мероприятия.Председатель,
			|	Мероприятия.Куратор,
			|	Мероприятия.Подготовил
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.Ссылка В (&Ссылки)");
		
		// исполнители протокола мероприятия
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ПротоколыМероприятий.Владелец КАК Источник,
			|	ПротоколыМероприятий.Ответственный КАК Участник
			|ИЗ
			|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|ГДЕ
			|	ПротоколыМероприятий.Владелец В (&Ссылки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПротоколыМероприятий.Владелец,
			|	ПротоколыМероприятийИсполнители.Исполнитель
			|ИЗ
			|	Справочник.ПротоколыМероприятий.Исполнители КАК ПротоколыМероприятийИсполнители
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|		ПО ПротоколыМероприятийИсполнители.Ссылка = ПротоколыМероприятий.Ссылка
			|ГДЕ
			|	ПротоколыМероприятий.Владелец В (&Ссылки)");
		
	Иначе
		
		НужныБизнесПроцессы = Ложь;
		НужныЭП = Ложь;
		НужныРезолюции = Ложь;
		НуженКонтроль = Ложь;
		
	КонецЕсли;
	
	Если НужныЭП Тогда
		ТекстыЗапросов.Добавить( 
			"ВЫБРАТЬ
			|	ЭП.Объект КАК Источник,
			|	ЭП.УстановившийПодпись
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|ГДЕ
			|	ВЫРАЗИТЬ(ЭП.Объект КАК " + ИмяТаблицы + ") В (&Ссылки)");
	КонецЕсли;

	Если НужныРезолюции Тогда	
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Резолюции.ПометкаУдаления,
			|	Резолюции.АвторРезолюции,
			|	Резолюции.ВнесРезолюцию,
			|	Резолюции.Документ КАК Источник
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|ГДЕ
			|	ВЫРАЗИТЬ(Резолюции.Документ КАК " + ИмяТаблицы + ") В (&Ссылки)
			|	И Резолюции.ПометкаУдаления = Ложь");
	КонецЕсли;
	
	Если НуженКонтроль Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Контроль.Предмет КАК Источник
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	ВЫРАЗИТЬ(Контроль.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)
			|	И НЕ Контроль.ПометкаУдаления");
	КонецЕсли;
	
	// Проект
	Если НужныПроекты Тогда
			
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Проекты.Руководитель КАК Участник,
			|	Документы.Ссылка КАК Источник
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Документы
			|		ПО Документы.Ссылка В (&Ссылки)
			|		И Документы.Проект = Проекты.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПроектыПроектнаяКоманда.Исполнитель,
			|	Документы.Ссылка
			|ИЗ
			|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Документы
			|		ПО Документы.Ссылка В (&Ссылки)
			|		И Документы.Проект = ПроектыПроектнаяКоманда.Ссылка");
		
	КонецЕсли;
	
	// Журнал передачи
	Если НуженЖурналПередачи Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ЖурналПередачиДокументов.Пользователь,
			|	ЖурналПередачиДокументов.Документ КАК Источник
			|ИЗ
			|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
			|ГДЕ
			|	ВЫРАЗИТЬ(ЖурналПередачиДокументов.Документ КАК " + ИмяТаблицы + ") В (&Ссылки)");
	КонецЕсли;
	
	// Письма
	Если НужныПисьма Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	СведенияОбАдресатах.Контакт,
			|	ИсходящееПисьмо.Предмет КАК Источник
			|ИЗ
			|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо.ПолучателиПисьма КАК ИсходящееПисьмоПолучателиПисьма
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
			|			ПО ИсходящееПисьмоПолучателиПисьма.Ссылка = ИсходящееПисьмо.Ссылка
			|		ПО СведенияОбАдресатах.АдресатСообщения = ИсходящееПисьмоПолучателиПисьма.Адресат
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
			|	И ВЫРАЗИТЬ(ИсходящееПисьмо.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СведенияОбАдресатах.Контакт,
			|	ИсходящееПисьмо.Предмет
			|ИЗ
			|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо.ПолучателиКопий КАК ИсходящееПисьмоПолучателиКопий
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
			|			ПО ИсходящееПисьмоПолучателиКопий.Ссылка = ИсходящееПисьмо.Ссылка
			|		ПО СведенияОбАдресатах.АдресатСообщения = ИсходящееПисьмоПолучателиКопий.Адресат
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
			|	И ВЫРАЗИТЬ(ИсходящееПисьмо.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)");
	КонецЕсли;
	
	// Мероприятия по предмету
	Если НужныМероприятия Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Мероприятия.Организатор,
			|	Мероприятия.Секретарь,
			|	Мероприятия.Председатель,
			|	Мероприятия.Куратор,
			|	Мероприятия.Подготовил,
			|	Мероприятия.Предмет КАК Источник
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	ВЫРАЗИТЬ(Мероприятия.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)");
		
		// еще исполнители протокола мероприятия
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ПротоколыМероприятий.Ответственный,
			|	ПротоколыМероприятий.Исполнители.(
			|		Исполнитель),
			|	Мероприятия.Предмет КАК Источник
			|ИЗ
			|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
			|		ПО ПротоколыМероприятий.Владелец = Мероприятия.Ссылка
			|		И ВЫРАЗИТЬ(Мероприятия.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)");
	КонецЕсли;
	
	Если НужныБизнесПроцессы Тогда
		// Бизнес-процессы по предметам
		ИсключенияБП = Новый Массив;
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.КомплексныйПроцесс);
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.ОбработкаВнутреннегоДокумента);
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.ОбработкаВходящегоДокумента);
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.ОбработкаИсходящегоДокумента);
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.РешениеВопросовВыполненияЗадач);
		
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.Поручение); // реквизиты БП
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.Рассмотрение); // две ТЧ
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.Регистрация); // Реквизиты БП
		ИсключенияБП.Добавить(Метаданные.БизнесПроцессы.Утверждение); // Реквизиты БП
		
		ЗапросБП = "";
		Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
			
			Если ИсключенияБП.Найти(БизнесПроцесс) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗапросБП <> "" Тогда
				ЗапросБП = ЗапросБП + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|";
			КонецЕсли;
			
			ЗапросБП = ЗапросБП + 
				"ВЫБРАТЬ
				|	Предметы.Предмет КАК Источник,
				|	Исполнители.Исполнитель
				|ИЗ
				|	БизнесПроцесс." + БизнесПроцесс.Имя + ".Исполнители КАК Исполнители
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс." + БизнесПроцесс.Имя + ".Предметы КАК Предметы
				|		ПО Исполнители.Ссылка = Предметы.Ссылка
				|		И Предметы.Предмет В (&Ссылки)
				|ГДЕ
				|	ВЫРАЗИТЬ(Предметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)";
			
		КонецЦикла;
		
		ТекстыЗапросов.Добавить(ЗапросБП);
		
		// поручение
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Поручение.Исполнитель,
			|	Поручение.Контролер,
			|	Поручение.Проверяющий,
			|	ПоручениеПредметы.Предмет Как Источник
			|ИЗ
			|	БизнесПроцесс.Поручение.Предметы КАК ПоручениеПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Поручение КАК Поручение
			|		ПО ПоручениеПредметы.Ссылка = Поручение.Ссылка
			|		И ВЫРАЗИТЬ(ПоручениеПредметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)"); 
	
		// рассмотрение
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	РассмотрениеИсполнителиИсполнения.Исполнитель,
			|	РассмотрениеПредметы.Предмет КАК Источник
			|ИЗ
			|	БизнесПроцесс.Рассмотрение.ИсполнителиИсполнения КАК РассмотрениеИсполнителиИсполнения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Рассмотрение.Предметы КАК РассмотрениеПредметы
			|		ПО РассмотрениеПредметы.Ссылка = РассмотрениеИсполнителиИсполнения.Ссылка
			|		И ВЫРАЗИТЬ(РассмотрениеПредметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РассмотрениеИсполнителиОзнакомления.Исполнитель,
			|	РассмотрениеПредметы.Предмет
			|ИЗ
			|	БизнесПроцесс.Рассмотрение.ИсполнителиОзнакомления КАК РассмотрениеИсполнителиОзнакомления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Рассмотрение.Предметы КАК РассмотрениеПредметы
			|		ПО РассмотрениеПредметы.Ссылка = РассмотрениеИсполнителиОзнакомления.Ссылка
			|		И ВЫРАЗИТЬ(РассмотрениеПредметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)"); 
		
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Рассмотрение.Исполнитель,
			|	Рассмотрение.КонтролерИсполнения,
			|	Рассмотрение.ПроверяющийИсполнения,
			|	РассмотрениеПредметы.Предмет КАК Источник
			|ИЗ
			|	БизнесПроцесс.Рассмотрение.Предметы КАК РассмотрениеПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Рассмотрение КАК Рассмотрение
			|		ПО РассмотрениеПредметы.Ссылка = Рассмотрение.Ссылка
			|		И ВЫРАЗИТЬ(РассмотрениеПредметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)");
		
		// регистрация
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Регистрация.Исполнитель,
			|	РегистрацияПредметы.Предмет КАК Источник
			|ИЗ
			|	БизнесПроцесс.Регистрация.Предметы КАК РегистрацияПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация КАК Регистрация
			|		ПО РегистрацияПредметы.Ссылка = Регистрация.Ссылка
			|		И ВЫРАЗИТЬ(РегистрацияПредметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)");
		
		// утверждение
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Утверждение.Исполнитель,
			|	УтверждениеПредметы.Предмет КАК Источник
			|ИЗ
			|	БизнесПроцесс.Утверждение.Предметы КАК УтверждениеПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Утверждение КАК Утверждение
			|		ПО УтверждениеПредметы.Ссылка = Утверждение.Ссылка
			|		И ВЫРАЗИТЬ(УтверждениеПредметы.Предмет КАК " + ИмяТаблицы + ") В (&Ссылки)");
	
	КонецЕсли;
	
	// Политики доступа - возьмем права по основным дескрипторам
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ПраваПоДескрипторамДоступаОбъектов.Пользователь КАК Пользователь,
		|	ДескрипторыДляОбъектов.Объект КАК Источник
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|			ПО (ДескрипторыДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка)
		|		ПО (ПраваПоДескрипторамДоступаОбъектов.Дескриптор = ДескрипторыДляОбъектов.Дескриптор)
		|		И (ДескрипторыДляОбъектов.Объект В (&Ссылки))
		|ГДЕ
		|	ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = НЕОПРЕДЕЛЕНО
		|	И ДескрипторыДляОбъектов.ТипДескриптора = 0
		|	И НЕ ДескрипторыДляОбъектов.Отключен
		|	И НЕ ПраваПоДескрипторамДоступаОбъектов.Пользователь.Служебный");
	
	Возврат СтрСоединить(ТекстыЗапросов, РазделительЗапросов);
	
КонецФункции

// Возвращает таблицу с перечислением метаданных, которым нужна отдельная РГ для выгрузки
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица метаданных для переходной РГ:
// * Метаданное - ОбъектМетаданных - ОбъектМетаданных
// * ИмяТаблицы - Строка - Имя для запросов
// * ИдентификаторОбъектаМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//
Функция ТаблицаМетаданныхДляПереходнойРГ() Экспорт
	
	МетаданныеДляПереходнойРГ = Новый ТаблицаЗначений;
	МетаданныеДляПереходнойРГ.Колонки.Добавить("Метаданное");
	МетаданныеДляПереходнойРГ.Колонки.Добавить("ИмяТаблицы");
	МетаданныеДляПереходнойРГ.Колонки.Добавить("ИдентификаторОбъектаМетаданных");
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.ВнутренниеДокументы;
	НовСтр.ИмяТаблицы = "Справочник.ВнутренниеДокументы";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.ВходящиеДокументы;
	НовСтр.ИмяТаблицы = "Справочник.ВходящиеДокументы";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.ИсходящиеДокументы;
	НовСтр.ИмяТаблицы = "Справочник.ИсходящиеДокументы";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.ШаблоныВнутреннихДокументов;
	НовСтр.ИмяТаблицы = "Справочник.ШаблоныВнутреннихДокументов";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.ШаблоныВходящихДокументов;
	НовСтр.ИмяТаблицы = "Справочник.ШаблоныВходящихДокументов";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.ШаблоныИсходящихДокументов;
	НовСтр.ИмяТаблицы = "Справочник.ШаблоныИсходящихДокументов";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.Проекты;
	НовСтр.ИмяТаблицы = "Справочник.Проекты";
	
	НовСтр = МетаданныеДляПереходнойРГ.Добавить();
	НовСтр.Метаданное = Метаданные.Справочники.Мероприятия;
	НовСтр.ИмяТаблицы = "Справочник.Мероприятия";
	
	
	ВсеИОМ = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(
		МетаданныеДляПереходнойРГ.ВыгрузитьКолонку("Метаданное"));
	
	Для Каждого КлючИЗначение Из ВсеИОМ Цикл
		Строка = МетаданныеДляПереходнойРГ.Найти(КлючИЗначение.Ключ);
		Строка.ИдентификаторОбъектаМетаданных = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат МетаданныеДляПереходнойРГ;
	
КонецФункции

// Записать РГ при записи объекта доступа.
// 
// Параметры:
//  Источник - ЛюбаяСсылка - Ссылка на объект доступа с РГ
//
Процедура ЗаписатьРГПриЗаписиОбъектаДоступа(Источник) Экспорт
	
	ИдетПереход = ЗначениеЗаполнено(Константы.ПереходСтадия.Получить())
		И ЗначениеЗаполнено(Константы.ПереходКаталог.Получить());

	Если Не ИдетПереход Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДляПереходныхРГ = ТаблицаМетаданныхДляПереходнойРГ();
	МетаданныеИсточника = Источник.Метаданные();
	ВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник);
	
	Если МетаданныеДляПереходныхРГ.Найти(МетаданныеИсточника) <> Неопределено Тогда
		СформироватьИЗаписатьРабочиеГруппыПоОбъектамВыгрузки(ВМассиве, МетаданныеИсточника);
	Иначе
		СкопироватьРабочиеГруппыПоОбъектам(ВМассиве);
	КонецЕсли;
		
КонецПроцедуры

Процедура СкопироватьРабочиеГруппыПоОбъектам(Ссылки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РабочиеГруппы.Участник КАК Участник,
	|	РабочиеГруппы.Изменение КАК Изменение,
	|	РабочиеГруппы.Объект
	|ИЗ
	|	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
	|ГДЕ
	|	РабочиеГруппы.Объект В (&Объект)";
	Запрос.УстановитьПараметр("Объект", Ссылки);
	
	РГ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Ссылка Из Ссылки Цикл
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		
		СтрокиРГ = РГ.НайтиСтроки(Новый Структура("Объект", Ссылка));
		Для Каждого СтрокаРГ Из СтрокиРГ Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), СтрокаРГ);
		КонецЦикла;
		
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
