
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Делает запись в регистр.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//  Владелец - СправочникСсылка.Файлы,Строка - Файл или идентификатор
//  Отношение - ПеречислениеСсылка.ОтношенияСлужебныхФайлов - пока только одно значение - HTML представление
//  Файл - HTML файл
//
Процедура ЗаписатьФайл(Документ, Владелец, Отношение, Файл, ДополнительныеСведения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.СлужебныеФайлыДокументов.СоздатьМенеджерЗаписи();
	
	Запись.Документ = Документ;
	Запись.Владелец = Владелец;
	Запись.Отношение = Отношение;
	Запись.Файл = Файл;
	Запись.ДополнительныеСведения = Новый ХранилищеЗначения(ДополнительныеСведения);
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Получает служебный файл из регистра. 
// Назначает и неявно возвращает параметр ДополнительныеСведения, если есть. 
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы, СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы - Документ
//  Владелец - СправочникСсылка.Файлы - doc файл
//  Отношение - ПеречислениеСсылка.ОтношенияСлужебныхФайлов - Отношение (назначение) служебного файла по отношению к владельцу
//  ДополнительныеСведения - Структура - Дополнительные сведения о файле, назначается и возвращается обратно. 
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы - служебный файл
Функция ПолучитьСлужебныйФайл(Документ, Владелец, Отношение, ДополнительныеСведения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Файл КАК Файл,
		|	СлужебныеФайлыДокументов.ДополнительныеСведения КАК ДополнительныеСведения
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Владелец = &Владелец
		|	И СлужебныеФайлыДокументов.Отношение = &Отношение
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владелец", ?(ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) <> Тип("Строка") И ТипЗнч(Владелец) <> Тип("СправочникСсылка.Файлы"), Строка(Владелец), Владелец));
	Запрос.УстановитьПараметр("Отношение", Отношение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.ДополнительныеСведения <> Неопределено Тогда
		ДополнительныеСведения = Выборка.ДополнительныеСведения.Получить();
	КонецЕсли;
	
	Возврат Выборка.Файл;
	
КонецФункции

// Для служебного файла получает мастер файл из регистра.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//  Файл - СправочникСсылка.Файлы - служебный файл
//
// Возвращаемое значение:
//  СправочникСсылка.Файлы - файл-владелец
Функция ПолучитьМастерФайл(Документ, Файл) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Файл = &Файл
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Файл", Файл);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Владелец;
	
КонецФункции

// Возвращает файлы пунктов предмета с учетом пометки удаления.
Функция ФайлыВсехПунктов(Предмет) Экспорт
	
	ФайлыВсехПунктов = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ФайлыВсехПунктов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Владелец КАК Пункт,
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Предмет
		|	И СлужебныеФайлыДокументов.Отношение = ЗНАЧЕНИЕ(Перечисление.ОтношенияСлужебныхФайлов.ФайлПункта)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФайлыПункта = ФайлыВсехПунктов[Выборка.Пункт];
		Если ФайлыПункта = Неопределено Тогда
			ФайлыВсехПунктов.Вставить(Выборка.Пункт, Новый Массив);
			ФайлыПункта = ФайлыВсехПунктов[Выборка.Пункт];
		КонецЕсли;
		
		ФайлыПункта.Добавить(Выборка.Файл);
		
	КонецЦикла;
	
	Возврат ФайлыВсехПунктов;
	
КонецФункции

// Возвращает файлы пунктов предмета.
Функция ФайлыПунктов(Предмет) Экспорт
	
	ФайлыПунктов = Новый Массив;
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ФайлыПунктов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Предмет
		|	И СлужебныеФайлыДокументов.Отношение = ЗНАЧЕНИЕ(Перечисление.ОтношенияСлужебныхФайлов.ФайлПункта)
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ФайлыПунктов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Файл");
	
	Возврат ФайлыПунктов;
	
КонецФункции

// Возвращает файлы пункта предмета.
Функция ФайлыПункта(Предмет, Пункт) Экспорт
	
	ФайлыПунктов = Новый Массив;
	Если Не ЗначениеЗаполнено(Предмет) Или Не ЗначениеЗаполнено(Пункт) Тогда
		Возврат ФайлыПунктов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Предмет
		|	И СлужебныеФайлыДокументов.Владелец = &Пункт
		|	И СлужебныеФайлыДокументов.Отношение = ЗНАЧЕНИЕ(Перечисление.ОтношенияСлужебныхФайлов.ФайлПункта)
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Пункт", Пункт);
	
	ФайлыПункта = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Файл");
	
	Возврат ФайлыПункта;
	
КонецФункции

// Устанавливает файл пункта предмета.
Процедура УстановитьФайлПункта(Предмет, Пункт, Файл) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Или Не ЗначениеЗаполнено(Пункт) Или Не ЗначениеЗаполнено(Файл) Тогда
		Возврат;
	КонецЕсли;
	
	Отношение = Перечисления.ОтношенияСлужебныхФайлов.ФайлПункта;
	ЗаписатьФайл(Предмет, Пункт, Отношение, Файл);
	
КонецПроцедуры

// Удаляет записи из регистра
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//  Файл - файл
//
Процедура УдалитьФайл(Документ, Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Файл = &Файл";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Файл", Файл);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Владелец = Выборка.Владелец;
	
	МенеджерЗаписи = РегистрыСведений.СлужебныеФайлыДокументов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Владелец = Владелец;
	МенеджерЗаписи.Файл = Файл;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;	
	
КонецПроцедуры

// Помечает на удаление служебные файлы по документу и владельцу
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//  Владелец - СправочникСсылка.Файлы - doc файл
//
Процедура УдалитьПоДокументуИВладельцу(Документ, Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Владелец = &Владелец";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	
	// удалим все - и Штамп, и Визуализацию
	Пока Выборка.Следующий() Цикл
		Файл = Выборка.Файл;	
		
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
		ФайлОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры

// Помечает на удаление служебные файлы картинок документа
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//
Процедура ОчиститьКартинки(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Владелец КАК Владелец,
		|	СлужебныеФайлыДокументов.Документ КАК Документ,
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Отношение = &Отношение";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Отношение", Перечисления.ОтношенияСлужебныхФайлов.Картинка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	
	Попытка
		
		НачатьТранзакцию();
	
		Пока Выборка.Следующий() Цикл
			
			ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;	
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
	
	КонецПопытки;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти

#КонецЕсли
