#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет объект в очередь.
//
// Параметры:
//  Объект - СправочникСсылка - Ссылка на оъект.
//  Приоритет - Число, Неопределено - приоритет обработки добавляемой записи.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры обработки записи.
//
Процедура Добавить(Объект, Приоритет = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДатаВремя = ТекущаяДата();
	ДатаВМиллиСекундах = ОбщегоНазначенияДокументооборот.ТекущаяДатаВМиллисекундах();
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.Объект = Объект;
	Запись.Дата = ДатаВремя;
	Запись.ДатаВМиллиСекундах = ДатаВМиллиСекундах;
	Запись.Приоритет = ?(Приоритет = Неопределено, 10, Приоритет);
	Если ДополнительныеПараметры = Неопределено
			Или ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запись.ДополнительныеПараметры = ДополнительныеПараметрыВJSON(ДополнительныеПараметры);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип значения ""ДополнительныеПараметры""'");
	КонецЕсли;
	Запись.Записать(Истина);
	
	// Включение регламентного задания для обработки очереди.
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбновлениеОбсуждений);
	Если Не РеглЗадание.Использование Тогда
		РеглЗадание.Использование = Истина;
		РеглЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет объект из очереди.
//
// Параметры:
//  Объект - СправочникСсылка - Ссылка на объект.
//  ДатаВМиллиСекундах - Число - дата в мс.
//
Процедура Удалить(Объект, ДатаВМиллиСекундах) Экспорт
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект);
	Набор.Отбор.ДатаВМиллиСекундах.Установить(ДатаВМиллиСекундах);
	Набор.Записать();
	
КонецПроцедуры

// Обрабатывает порцию объектов из очереди.
//
Функция ОбработатьОчередь() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОбновленияОбсуждений.Объект КАК Объект,
		|	ОчередьОбновленияОбсуждений.ДатаВМиллиСекундах КАК ДатаВМиллиСекундах,
		|	ОчередьОбновленияОбсуждений.ДополнительныеПараметры КАК ДополнительныеПараметрыJSON
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияОбсуждений КАК ОчередьОбновленияОбсуждений
		|ГДЕ
		|	ОчередьОбновленияОбсуждений.КоличествоПопытокОбработки < 3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьОбновленияОбсуждений.Приоритет УБЫВ,
		|	ОчередьОбновленияОбсуждений.ДатаВМиллиСекундах";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Объект;
		ДатаВМиллиСекундах = Выборка.ДатаВМиллиСекундах;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбновленияОбсуждений");
		ЭлементБлокировки.УстановитьЗначение("Объект", Объект);
		ЭлементБлокировки.УстановитьЗначение("ДатаВМиллиСекундах", ДатаВМиллиСекундах);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			НачатьТранзакцию();
			Блокировка.Заблокировать();
			ДополнительныеПараметры = СтрокаJSONВДополнительныеПараметры(Выборка.ДополнительныеПараметрыJSON);
			ОбработатьЭлементОчереди(Объект, ДополнительныеПараметры);
			Удалить(Объект, ДатаВМиллиСекундах);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗафиксироватьНеудачнуюПопыткуОбработки(Объект, ДатаВМиллиСекундах, ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Выборка.Количество();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьЭлементОчереди(Ссылка, ДополнительныеПараметры)
	
	ТипСсылки = ТипЗнч(Ссылка);
	Если ТипСсылки = Тип("СправочникСсылка.Пользователи") Тогда
		
		ОбсужденияДокументооборот.ОбновитьПользователя(Ссылка, Истина);
		
	ИначеЕсли ТипСсылки = Тип("ПеречислениеСсылка.ЗаданияОчередиОбновленияОбсуждений") Тогда
		
		Если Ссылка = Перечисления.ЗаданияОчередиОбновленияОбсуждений.ДобавитьНедостающихУчастниковВАвтоОбсуждения Тогда
			ОбсужденияДокументооборот.АктуализироватьСоставАвтообсуждений(Истина);
		ИначеЕсли Ссылка = Перечисления.ЗаданияОчередиОбновленияОбсуждений.ВыполнитьОбработчикОбновления Тогда
			ПараметрыОбработчика = Новый Массив;
			ПараметрыОбработчика.Добавить(Истина); // Немедленно.
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(
				ДополнительныеПараметры.ИмяОбработчика, ПараметрыОбработчика);
		ИначеЕсли Ссылка = Перечисления.ЗаданияОчередиОбновленияОбсуждений.ОбработатьПодключениеОбсуждений Тогда
			ОбсужденияДокументооборот.ПриИзмененииСостоянияПодключения(Истина);
		КонецЕсли;
		
	Иначе // Контейнер авточата.
		
		Операция = Неопределено;
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Свойство("Операция", Операция);
		КонецЕсли;
		Если Операция = Неопределено Тогда
			ОбсужденияДокументооборот.ОбновитьОбсужденияПоКонтейнеру(Ссылка, ДополнительныеПараметры, Истина);
		ИначеЕсли Операция = "ОбновитьЗаголовкиАвточатов" Тогда
			ОбсужденияДокументооборот.ОбновитьЗаголовкиАвточатов(
				Ссылка, ДополнительныеПараметры.СтароеПредставление, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьНеудачнуюПопыткуОбработки(Ссылка, ДатаВМиллиСекундах, ТекстОшибки)
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Ссылка;
	МенеджерЗаписи.ДатаВМиллиСекундах = ДатаВМиллиСекундах;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ТекстОшибки = ТекстОшибки;
	МенеджерЗаписи.КоличествоПопытокОбработки = МенеджерЗаписи.КоличествоПопытокОбработки + 1;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ДополнительныеПараметрыВJSON(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДополнительныеПараметры, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СтрокаJSONВДополнительныеПараметры(СтрокаJSON)
	
	Если Не ЗначениеЗаполнено(СтрокаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
