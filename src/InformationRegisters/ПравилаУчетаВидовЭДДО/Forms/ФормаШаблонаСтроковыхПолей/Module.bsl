
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("МаксимальнаяДлинаСтроки") Тогда
		МаксимальнаяДлинаСтроки = Параметры.МаксимальнаяДлинаСтроки;
	КонецЕсли;
	
	Если Параметры.Свойство("РазрешенПереносСтрок") Тогда
		РазрешенПереносСтрок = Параметры.РазрешенПереносСтрок;
	КонецЕсли;
	
	Если Параметры.Свойство("ШаблонСтроки") Тогда
		ШаблонСтроки = Параметры.ШаблонСтроки;
		ФорматированныйДокументШаблона.Добавить(ШаблонСтроки);
	КонецЕсли;
	
	Если Параметры.Свойство("НаименованиеПоля") Тогда
		Заголовок = Параметры.НаименованиеПоля;
		Элементы.ФорматированныйДокументШаблона.Заголовок = Параметры.НаименованиеПоля;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяМакетаДереваПараметров") Тогда
		ИмяМакета = Параметры.ИмяМакетаДереваПараметров;
	КонецЕсли;
	
	ЗаполнитьДеревоРеквизитов(ИмяМакета);
	
	ФорматированныйДокументШаблона.УстановитьФорматированнуюСтроку(
		ПолучитьФорматированнуюСтрокуПараметров(ДеревоПараметров, ШаблонСтроки));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоПараметровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ВыбранноеЗначение = Элементы.ДеревоПараметров.ТекущиеДанные;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Выполнение = Ложь;
	Иначе
		
		Если Не ВыбранноеЗначение.ДоступноДляВыбора Тогда
			
			Выполнение = Ложь;
			
		Иначе
		
			ПараметрыПеретаскивания.Значение = "[" + ВыбранноеЗначение.ПредставлениеПолное + "]";
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьВыбранныйПараметр();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированныйДокументШаблонаПриИзменении(Элемент)
	НачалоВыделения = Неопределено;
	КонецВыделения = Неопределено;
	
	Элементы.ФорматированныйДокументШаблона.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
	
	ОбработатьСтрокуШаблона(НачалоВыделения, КонецВыделения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПараметр(Команда)
	ДобавитьВыбранныйПараметр();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Закрыть(ШаблонСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоРеквизитов(ИмяМакета)
	
	ДеревоПараметровЗаполнения = ОбменСКонтрагентамиДОСервер.ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета);
	
	ДеревоПараметров.ПолучитьЭлементы().Очистить();
	
	Для Каждого СтрокаПараметров Из ДеревоПараметровЗаполнения.Строки Цикл
		
		НовСтрДереваПараметров = ДеревоПараметров.ПолучитьЭлементы().Добавить();
		
		СкопироватьСтрокиДереваЗначений(НовСтрДереваПараметров, СтрокаПараметров);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьСтрокиДереваЗначений(СтрокаДереваФормы, СтрокаДереваЗначений)
	
	ЗаполнитьЗначенияСвойств(СтрокаДереваФормы, СтрокаДереваЗначений);
	
	Если СтрокаДереваФормы.ДоступноДляВыбора Тогда
		СтрокаДереваФормы.ИндексКартинкиСтроки = 2;
	Иначе
		СтрокаДереваФормы.ИндексКартинкиСтроки = 1;
	КонецЕсли;
	
	Для Каждого ДочерняяСтрокаДереваЗначений Из СтрокаДереваЗначений.Строки Цикл
		
		НоваяСтрокаДереваФормы = СтрокаДереваФормы.ПолучитьЭлементы().Добавить();
		
		СкопироватьСтрокиДереваЗначений(НоваяСтрокаДереваФормы, ДочерняяСтрокаДереваЗначений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранныйПараметр()
	
	ВыбранноеЗначение = Элементы.ДеревоПараметров.ТекущиеДанные;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	Иначе
		
		Если Не ВыбранноеЗначение.ДоступноДляВыбора Тогда
			Возврат;
		Иначе
			
			ТекстВставки = "[" + ВыбранноеЗначение.ПредставлениеПолное + "]";
			
			ДобавитьПараметрВШаблон(ТекстВставки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрВШаблон(Параметр)
	
	НачалоВыделения = Неопределено;
	КонецВыделения = Неопределено;
	
	Элементы.ФорматированныйДокументШаблона.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
	
	ФорматированныйДокументШаблона.Удалить(НачалоВыделения, КонецВыделения);
	
	ДлинаПараметра = СтрДлина(Параметр);
	
	ФорматированныйДокументШаблона.Вставить(
		НачалоВыделения,
		Параметр,
		ТипЭлементаФорматированногоДокумента.Текст);
	
	КонецВыделения = ФорматированныйДокументШаблона.ПолучитьЗакладкуПоПозиции(
		ФорматированныйДокументШаблона.ПолучитьПозициюПоЗакладке(НачалоВыделения) + ДлинаПараметра);
	
	ОбработатьСтрокуШаблона(НачалоВыделения, КонецВыделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуШаблона(НачалоВыделения = Неопределено, КонецВыделения = Неопределено)
	
	ПозицияНачала = 0;
	Если НачалоВыделения <> Неопределено Тогда
		ПозицияНачала = ФорматированныйДокументШаблона.ПолучитьПозициюПоЗакладке(НачалоВыделения);
	КонецЕсли;
	
	ПозицияКонца = ПозицияНачала;
	Если КонецВыделения <> Неопределено Тогда
		ПозицияКонца = ФорматированныйДокументШаблона.ПолучитьПозициюПоЗакладке(КонецВыделения);
	КонецЕсли;
	
	ШаблонСтроки = ФорматированныйДокументШаблона.ПолучитьТекст();
	
	Если Не РазрешенПереносСтрок Тогда
		ШаблонСтроки = СтрЗаменить(ШаблонСтроки, Символы.ПС, " ");
	КонецЕсли;
	
	Если МаксимальнаяДлинаСтроки > 0 Тогда
		ШаблонСтроки = Лев(ШаблонСтроки, МаксимальнаяДлинаСтроки);
		
		Если ПозицияКонца > МаксимальнаяДлинаСтроки Тогда
			ПозицияКонца = МаксимальнаяДлинаСтроки;
		КонецЕсли;
	КонецЕсли;
	
	ФорматированныйДокументШаблона.Удалить();
	ФорматированныйДокументШаблона.УстановитьФорматированнуюСтроку(
		ПолучитьФорматированнуюСтрокуПараметров(ДеревоПараметров,
		ШаблонСтроки));
	
	ЗакладкаНачало = ФорматированныйДокументШаблона.ПолучитьЗакладкуПоПозиции(ПозицияНачала);
	ЗакладкаКонец = ФорматированныйДокументШаблона.ПолучитьЗакладкуПоПозиции(ПозицияКонца);
	
	Элементы.ФорматированныйДокументШаблона.УстановитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьФорматированнуюСтрокуПараметров(ДеревоПараметров, Строка)
	
	МассивПараметров = Новый Массив;
	
	Для Каждого СтрДерева Из ДеревоПараметров.ПолучитьЭлементы() Цикл
		ДобавитьПараметрыИзСтрокиДереваВМассив(СтрДерева, МассивПараметров);
	КонецЦикла;
	
	МассивФорматированныхСрок = Новый Массив;
	
	Индекс = 1;
	ПоложениеНачалаУчастка = 1;
	СкобкаОткрыта = Ложь;
	
	ДлинаСтроки = СтрДлина(Строка);
	
	Пока Индекс <= ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(Строка, Индекс, 1);
		
		Если ТекущийСимвол = "[" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				УчастокТекста = Сред(
					Строка,
					ПоложениеНачалаУчастка,
					Индекс - ПоложениеНачалаУчастка);
				
				ФорматированнаяСтрока = Новый ФорматированнаяСтрока(УчастокТекста);
				МассивФорматированныхСрок.Добавить(ФорматированнаяСтрока);
				
				ПоложениеНачалаУчастка = Индекс + 1;
				СкобкаОткрыта = Истина;
				
			Иначе
				
				УчастокТекста = Сред(
					Строка,
					ПоложениеНачалаУчастка - 1,
					Индекс - ПоложениеНачалаУчастка + 1);
				
				ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
					УчастокТекста,
					Новый Шрифт(, , Истина),
					WebЦвета.Красный);
				
				МассивФорматированныхСрок.Добавить(ФорматированнаяСтрока);
				
				ПоложениеНачалаУчастка = Индекс + 1;
			
			КонецЕсли;
			
		ИначеЕсли ТекущийСимвол = "]" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				УчастокТекста = Сред(
					Строка,
					ПоложениеНачалаУчастка,
					Индекс - ПоложениеНачалаУчастка + 1);
				
				ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
					УчастокТекста,
					Новый Шрифт(, , Истина),
					WebЦвета.Красный);
				
				МассивФорматированныхСрок.Добавить(ФорматированнаяСтрока);
				
				ПоложениеНачалаУчастка = Индекс + 1;
				
			Иначе
			
				СкобкаОткрыта = Ложь;
				
				Если Индекс - ПоложениеНачалаУчастка <= 2 Тогда
					
					УчастокТекста = Сред(
						Строка,
						ПоложениеНачалаУчастка - 1,
						Индекс - ПоложениеНачалаУчастка + 2);
					
					ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
						УчастокТекста,
						Новый Шрифт(, , Истина),
						WebЦвета.Красный);
					
					МассивФорматированныхСрок.Добавить(ФорматированнаяСтрока);
					
				Иначе
					
					СтрокаПараметра = Сред(
						Строка,
						ПоложениеНачалаУчастка,
						Индекс - ПоложениеНачалаУчастка);
					
					УчастокТекста = Сред(
						Строка,
						ПоложениеНачалаУчастка - 1,
						Индекс - ПоложениеНачалаУчастка + 2);
					
					Если МассивПараметров.Найти(СтрокаПараметра) = Неопределено Тогда
						ЦветПараметра = WebЦвета.Красный;
					Иначе
						ЦветПараметра = WebЦвета.Синий;
					КонецЕсли;
					
					ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
						УчастокТекста,
						Новый Шрифт(, , Истина),
						ЦветПараметра);
					
					МассивФорматированныхСрок.Добавить(ФорматированнаяСтрока);
					
				КонецЕсли;
				
				ПоложениеНачалаУчастка = Индекс + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если Индекс >= ДлинаСтроки И ПоложениеНачалаУчастка < ДлинаСтроки Тогда
		
		УчастокТекста = Сред(
			Строка,
			ПоложениеНачалаУчастка,
			ДлинаСтроки - ПоложениеНачалаУчастка + 1);
		
		Если СкобкаОткрыта Тогда
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				УчастокТекста,
				Новый Шрифт(, , Истина),
				WebЦвета.Красный);
		Иначе
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				УчастокТекста);
		КонецЕсли;
		
		МассивФорматированныхСрок.Добавить(ФорматированнаяСтрока);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированныхСрок);
	
КонецФункции // ПолучитьФорматированнуюСтрокуПараметров()

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьПараметрыИзСтрокиДереваВМассив(СтрокаДерева, МассивПараметров)
	
	Если СтрокаДерева.ДоступноДляВыбора Тогда
		МассивПараметров.Добавить(СтрокаДерева.ПредставлениеПолное);
	КонецЕсли;
	
	Для Каждого СтрДочерняя Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ДобавитьПараметрыИзСтрокиДереваВМассив(СтрДочерняя, МассивПараметров);
	КонецЦикла;
	
КонецФункции // ДобавитьПараметрыИзДереваВМассив()

#КонецОбласти