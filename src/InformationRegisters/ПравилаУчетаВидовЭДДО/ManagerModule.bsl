
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработкаПереходаНаНовуюВерсию

Процедура ЗаполнитьВидДокументаЭДОВПравилахУчета(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ПравилаУчетаВидовЭДДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "Справочник.ВидыДокументовЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаУчетаВидовЭДДО.Организация КАК Организация,
	|	ПравилаУчетаВидовЭДДО.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
	|ГДЕ
	|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
	|	И ПравилаУчетаВидовЭДДО.УдалитьВидЭД <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ПустаяСсылка)";
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	ОбъектовКОбработке = ВыборкаДанных.Количество();
	
	СоответствиеВидовДокументов = ОбменСКонтрагентамиИнтеграция.СоответствиеВидовЭДВидамДокументовЭДО();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Записать = Ложь;
			
			НаборЗаписей = РегистрыСведений.ПравилаУчетаВидовЭДДО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ВыборкаДанных.Организация);
			НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаДанных.Контрагент);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() Тогда
				
				ЗаполнитьВидДокументаЭДОПриОбновлении(
					НаборЗаписей,
					СоответствиеВидовДокументов,
					Записать);
				
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать настройки приема документов по ЭДО для: %1 от %2 по причине:
				|%3'"), ВыборкаДанных.Организация, ВыборкаДанных.Контрагент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта, , ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые настройки приема по ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция настроек приема по ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбъектовКОбработке <= ОбъектовОбработано;
	
КонецПроцедуры

Процедура ЗаменитьПараметрыЗаполненияТекстовыхПолей(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ПравилаУчетаВидовЭДДО;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаУчетаВидовЭДДО.Организация КАК Организация,
	|	ПравилаУчетаВидовЭДДО.Контрагент КАК Контрагент,
	|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО КАК ВидДокументаЭДО
	|ИЗ
	|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
	|ГДЕ
	|	ПравилаУчетаВидовЭДДО.ШаблонНаименования <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПравилаУчетаВидовЭДДО.Организация КАК Организация,
	|	ПравилаУчетаВидовЭДДО.Контрагент КАК Контрагент,
	|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО КАК ВидДокументаЭДО
	|ИЗ
	|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
	|ГДЕ
	|	ВЫРАЗИТЬ(ПравилаУчетаВидовЭДДО.ШаблонСодержания КАК СТРОКА(100)) <> """"";
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	ОбъектовКОбработке = ВыборкаДанных.Количество();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Записать = Ложь;
			
			НаборЗаписей = РегистрыСведений.ПравилаУчетаВидовЭДДО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ВыборкаДанных.Организация);
			НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаДанных.Контрагент);
			НаборЗаписей.Отбор.ВидДокументаЭДО.Установить(ВыборкаДанных.ВидДокументаЭДО);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				ШаблонНаименования = Запись.ШаблонНаименования;
				
				ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "[ВидЭД]", "[ВидДокументаЭДО]");
				ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "[ТипЭД]", "");
				ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "[ДатаДокументаОтправителя]", "[ДатаДокумента]");
				ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "[НомерДокументаОтправителя]", "[НомерДокумента]");
				ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "[НаименованиеДокументаОтправителя]", "");
				
				Если ШаблонНаименования <> Запись.ШаблонНаименования Тогда
					Записать = Истина;
					Запись.ШаблонНаименования = ШаблонНаименования;
				КонецЕсли;
				
				ШаблонСодержания = Запись.ШаблонСодержания;
				
				ШаблонСодержания = СтрЗаменить(ШаблонСодержания, "[ВидЭД]", "[ВидДокументаЭДО]");
				ШаблонСодержания = СтрЗаменить(ШаблонСодержания, "[ТипЭД]", "");
				ШаблонСодержания = СтрЗаменить(ШаблонСодержания, "[ДатаДокументаОтправителя]", "[ДатаДокумента]");
				ШаблонСодержания = СтрЗаменить(ШаблонСодержания, "[НомерДокументаОтправителя]", "[НомерДокумента]");
				ШаблонСодержания = СтрЗаменить(ШаблонСодержания, "[НаименованиеДокументаОтправителя]", "");
				
				Если ШаблонСодержания <> Запись.ШаблонСодержания Тогда
					Записать = Истина;
					Запись.ШаблонСодержания = ШаблонСодержания;
				КонецЕсли;
			КонецЦикла;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать настройки приема документов по ЭДО для: %1 от %2 по причине:
				|%3'"), ВыборкаДанных.Организация, ВыборкаДанных.Контрагент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта, , ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые настройки приема по ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция настроек приема по ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбъектовКОбработке <= ОбъектовОбработано;
	
КонецПроцедуры

Процедура ЗаполнитьГрифДоступаПоУмолчанию() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	ГрифДоступаПоУмолчанию = Константы.ГрифДоступаПоУмолчанию.Получить();
	
	Если Не ЗначениеЗаполнено(ГрифДоступаПоУмолчанию) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.СоздаватьАвтоматически И Не ЗначениеЗаполнено(Запись.ГрифДоступа) Тогда
			Запись.ГрифДоступа = ГрифДоступаПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получает параметры настройки соответствия видов ЭД и видов документов 1С:Документооборот
//
// Парамтеры:
//  ВидЭД - ПеречислениеСсылка.ТипыДокументовЭДО - Вид электронного документа
//  Организация - СправочникСсылка.Организации - Организация, принимающая документ.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым ведется ЭДО.
Функция ПараметрыДокументаПоВидуЭДО(ВидДокументаЭДО, Организация, Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДокументаЭДО", ВидДокументаЭДО);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаУчетаВидовЭДДО.ВидДокумента КАК ВидДокумента,
		|	ПравилаУчетаВидовЭДДО.Шаблон КАК Шаблон,
		|	ПравилаУчетаВидовЭДДО.Ответственный КАК Ответственный,
		|	ПравилаУчетаВидовЭДДО.Папка КАК Папка,
		|	ПравилаУчетаВидовЭДДО.ГрифДоступа КАК ГрифДоступа,
		|	ПравилаУчетаВидовЭДДО.ВопросДеятельности КАК ВопросДеятельности,
		|	ПравилаУчетаВидовЭДДО.ШаблонНаименования КАК ШаблонНаименования,
		|	ПравилаУчетаВидовЭДДО.ШаблонСодержания КАК ШаблонСодержания
		|ИЗ
		|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
		|ГДЕ
		|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО = &ВидДокументаЭДО
		|	И ПравилаУчетаВидовЭДДО.Контрагент = &Контрагент
		|	И ПравилаУчетаВидовЭДДО.Организация = &Организация
		|	И ПравилаУчетаВидовЭДДО.Принимать";
	
	ПараметрыДокументаПоВидуЭДО = Новый Структура;
	ПараметрыДокументаПоВидуЭДО.Вставить("ВидДокумента");
	ПараметрыДокументаПоВидуЭДО.Вставить("Шаблон");
	ПараметрыДокументаПоВидуЭДО.Вставить("Ответственный");
	ПараметрыДокументаПоВидуЭДО.Вставить("Папка");
	ПараметрыДокументаПоВидуЭДО.Вставить("ГрифДоступа");
	ПараметрыДокументаПоВидуЭДО.Вставить("ВопросДеятельности");
	ПараметрыДокументаПоВидуЭДО.Вставить("ШаблонНаименования");
	ПараметрыДокументаПоВидуЭДО.Вставить("ШаблонСодержания");
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыДокументаПоВидуЭДО, Выборка);
	КонецЕсли;
	
	Возврат ПараметрыДокументаПоВидуЭДО;
	
КонецФункции

Функция НастройкиПриемаДокументов(Организация, Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВходящиеДокументы = НастройкиПриемаПоУмолчанию();
	
	ВходящиеДокументы.ЗаполнитьЗначения(Организация, "Организация");
	ВходящиеДокументы.ЗаполнитьЗначения(Контрагент, "Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаУчетаВидовЭДДО.УдалитьВидЭД КАК ВидЭД,
		|	ПравилаУчетаВидовЭДДО.УдалитьТипЭД КАК ТипЭД,
		|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО КАК ВидДокументаЭДО,
		|	ПравилаУчетаВидовЭДДО.ВидДокумента КАК ВидДокумента,
		|	ПравилаУчетаВидовЭДДО.ВопросДеятельности КАК ВопросДеятельности,
		|	ПравилаУчетаВидовЭДДО.Ответственный КАК Ответственный,
		|	ПравилаУчетаВидовЭДДО.Папка КАК Папка,
		|	ПравилаУчетаВидовЭДДО.ГрифДоступа КАК ГрифДоступа,
		|	ПравилаУчетаВидовЭДДО.Шаблон КАК Шаблон,
		|	ПравилаУчетаВидовЭДДО.ШаблонНаименования КАК ШаблонНаименования,
		|	ПравилаУчетаВидовЭДДО.ШаблонСодержания КАК ШаблонСодержания,
		|	ПравилаУчетаВидовЭДДО.Принимать КАК Принимать
		|ИЗ
		|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
		|ГДЕ
		|	ПравилаУчетаВидовЭДДО.Организация = &Организация
		|	И ПравилаУчетаВидовЭДДО.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ВыборкаЗаписанных = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписанных.Следующий() Цикл
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ВидДокументаЭДО", ВыборкаЗаписанных.ВидДокументаЭДО);
		
		СтрокиНастроек = ВходящиеДокументы.НайтиСтроки(ОтборСтрок);
		
		Для Каждого Строка Из СтрокиНастроек Цикл
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаЗаписанных);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВходящиеДокументы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкиПриемаПоУмолчанию()
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	ВходящиеДокументы = Новый ТаблицаЗначений;
	
	ВходящиеДокументы.Колонки.Добавить("Организация"        , Метаданные.ОпределяемыеТипы.Организация.Тип);
	ВходящиеДокументы.Колонки.Добавить("Контрагент"         , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ВходящиеДокументы.Колонки.Добавить("ВидДокументаЭДО"    , Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ВходящиеДокументы.Колонки.Добавить("ВидЭД"              , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ВходящиеДокументы.Колонки.Добавить("ТипЭД"              , Новый ОписаниеТипов("ПеречислениеСсылка.УдалитьТипыПроизвольныхДокументовЭДО"));
	
	ВходящиеДокументы.Колонки.Добавить("Принимать"          , ОписаниеТипаБулево);
	ВходящиеДокументы.Колонки.Добавить("ВидДокумента"       , Новый ОписаниеТипов("СправочникСсылка.ВидыВнутреннихДокументов"));
	ВходящиеДокументы.Колонки.Добавить("ВопросДеятельности" , Новый ОписаниеТипов("СправочникСсылка.ВопросыДеятельности"));
	ВходящиеДокументы.Колонки.Добавить("Ответственный"      , Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ВходящиеДокументы.Колонки.Добавить("Папка"              , Новый ОписаниеТипов("СправочникСсылка.ПапкиВнутреннихДокументов"));
	ВходящиеДокументы.Колонки.Добавить("ГрифДоступа"        , Новый ОписаниеТипов("СправочникСсылка.ГрифыДоступа"));
	ВходящиеДокументы.Колонки.Добавить("Шаблон"             , Новый ОписаниеТипов("СправочникСсылка.ШаблоныВнутреннихДокументов"));
	ВходящиеДокументы.Колонки.Добавить("ШаблонНаименования" , ОписаниеТипаСтрока);
	ВходящиеДокументы.Колонки.Добавить("ШаблонСодержания"   , ОписаниеТипаСтрока);
	
	АктуальныеТипыДокументов = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(
		АктуальныеТипыДокументов);
	
	ТипыДокументов = Новый Массив;
	Для Каждого Элемент Из АктуальныеТипыДокументов Цикл
		ТипыДокументов.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ЗапросВидов = Новый Запрос;
	ЗапросВидов.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В(&АктуальныеТипыДокументов)
		|	И НЕ ВидыДокументовЭДО.ПометкаУдаления";
	ЗапросВидов.УстановитьПараметр("АктуальныеТипыДокументов", ТипыДокументов);
	
	ВыборкаВидов = ЗапросВидов.Выполнить().Выбрать();
	
	НастройкаПоУмолчанию = Новый Структура;
	НастройкаПоУмолчанию.Вставить("Принимать"          , Ложь);
	НастройкаПоУмолчанию.Вставить("ВидДокумента"       , Неопределено);
	НастройкаПоУмолчанию.Вставить("ВопросДеятельности" , Неопределено);
	НастройкаПоУмолчанию.Вставить("Ответственный"      , Неопределено);
	НастройкаПоУмолчанию.Вставить("Шаблон"             , Неопределено);
	НастройкаПоУмолчанию.Вставить("ШаблонНаименования" , "");
	НастройкаПоУмолчанию.Вставить("ШаблонСодержания"   , "");
	
	Пока ВыборкаВидов.Следующий() Цикл
		
		ВидДокументаЭДО = ВыборкаВидов.ВидДокумента;
		ТипДокументаЭДО = ВыборкаВидов.ТипДокумента;
		
		НастройкиТипа = АктуальныеТипыДокументов.Получить(ТипДокументаЭДО);
		
		Если НастройкиТипа = Неопределено
			Или НастройкиТипа.ИспользоватьДляВходящих <> Истина Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВходящиеДокументы.Добавить();
		НоваяСтрока.ВидДокументаЭДО = ВидДокументаЭДО;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаПоУмолчанию);
		
	КонецЦикла;
	
	Возврат ВходящиеДокументы;
	
КонецФункции

#Область Обновление

Процедура ЗаполнитьВидДокументаЭДОПриОбновлении(НаборЗаписей, СоответствиеВидовДокументов, Записывать)
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.УдалитьВидЭД = Перечисления.ТипыДокументовЭДО.ПустаяСсылка() Тогда
			Продолжить;
		ИначеЕсли Запись.УдалитьВидЭД = Перечисления.ТипыДокументовЭДО.УдалитьПроизвольный Тогда
			ТипЭДО = ТипЭДОПоТипуПроизвольногоЭД(Запись.УдалитьТипЭД);
		Иначе
			ТипЭДО = Запись.УдалитьВидЭД;
		КонецЕсли;
		
		ВидДокументаЭДО = СоответствиеВидовДокументов.Получить(ТипЭДО);
		
		Если ВидДокументаЭДО <> Неопределено Тогда
			Запись.ВидДокументаЭДО = ВидДокументаЭДО;
			Записывать = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТипЭДОПоТипуПроизвольногоЭД(ТипЭД)
	
	Если ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктВзаимозачета Тогда
		Возврат Перечисления.ТипыДокументовЭДО.АктВзаимозачета;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктВыполненныхРабот Тогда
		Возврат Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктСверки Тогда
		Возврат Перечисления.ТипыДокументовЭДО.АктСверки;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Ведомость Тогда
		Возврат Перечисления.ТипыДокументовЭДО.Ведомость;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ГарантийноеПисьмо Тогда
		Возврат Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Договор Тогда
		Возврат Перечисления.ТипыДокументовЭДО.Договор;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ДополнительноеСоглашение Тогда
		Возврат Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС11 Тогда
		Возврат Перечисления.ТипыДокументовЭДО.КС11;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС2 Тогда
		Возврат Перечисления.ТипыДокументовЭДО.КС2;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС3 Тогда
		Возврат Перечисления.ТипыДокументовЭДО.КС3;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Отчет Тогда
		Возврат Перечисления.ТипыДокументовЭДО.Отчет;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ПлатежноеПоручение Тогда
		Возврат Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ПриложениеКАкту Тогда
		Возврат Перечисления.ТипыДокументовЭДО.ПриложениеКАкту;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Прочее Тогда
		Возврат Перечисления.ТипыДокументовЭДО.Прочее;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.СоглашениеОбЭДО Тогда
		Возврат Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Спецификация Тогда
		Возврат Перечисления.ТипыДокументовЭДО.Спецификация;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.СчетНаОплату Тогда
		Возврат Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ТоварнаяНакладная Тогда
		Возврат Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	ИначеЕсли ТипЭД = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Уведомление Тогда
		Возврат Перечисления.ТипыДокументовЭДО.Уведомление;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
