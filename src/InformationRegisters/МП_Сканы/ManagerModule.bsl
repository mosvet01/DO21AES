
#Область ПрограммныйИнтерфейс

//Удаляет запись для указанного пользователя, тем самым освобождая место для нового скана
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется выполнить действие
//
Процедура УдалитьСкан(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать();
	
КонецПроцедуры

//Помещает скан для указанного пользователя в регистр 
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется выполнить действие
//  Скан - ДвоичныеДанные - Двоичные данные скана
//
Процедура ДобавитьСкан(Пользователь, Скан) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Менеджер = СоздатьМенеджерЗаписи();
	Менеджер.Пользователь = Пользователь;
	Менеджер.Скан = Новый ХранилищеЗначения(Скан);
	Менеджер.Записать(Истина);
	
КонецПроцедуры

//Возвращает двоичные данные скана, если запись с ним существует
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется выполнить действие
//
//  Возвращаемое значение:
//   Двоичные данные скана или неопределено
//
Функция ПолучитьСкан(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МП_Сканы.Пользователь КАК Пользователь,
		|	МП_Сканы.Скан КАК Скан
		|ИЗ
		|	РегистрСведений.МП_Сканы КАК МП_Сканы
		|ГДЕ
		|	МП_Сканы.Пользователь = &Пользователь";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Скан.Получить();

	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти