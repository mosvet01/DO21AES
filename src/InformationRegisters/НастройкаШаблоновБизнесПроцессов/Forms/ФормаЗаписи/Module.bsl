
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервереРедакцииКонфигурации();
	
	ЗаполнитьСведенияОТипахОбъектов();
	
	ЗаполнитьТипыШаблоновПроцессов();
	
	ЗаполнитьСписокСобытий();
	
	Элементы.ВидИнтерактивногоСобытия.Доступность = Запись.ИнтерактивныйЗапуск;
	
	Если Параметры.Ключ.Пустой() Тогда 
		Если ЗначениеЗаполнено(Запись.КомуНазначен) И Не ЗначениеЗаполнено(Запись.ШаблонБизнесПроцесса) Тогда 
			Элементы.КомуНазначен.ТолькоПросмотр = Истина;
			Элементы.ШаблонБизнесПроцесса.АктивизироватьПоУмолчанию = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.ШаблонБизнесПроцесса) И Не ЗначениеЗаполнено(Запись.КомуНазначен) Тогда 
			Элементы.ШаблонБизнесПроцесса.ТолькоПросмотр = Истина;
			Элементы.КомуНазначен.АктивизироватьПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;	
	Элементы.ГруппаАвтостарт.Заголовок = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьКомуНазначенСтрокой();
	НастроитьВидимостьОрганизации();
	НастроитьВидимостьУсловия();
	УстановитьЗаголовокЗакладкиАвтоСтарта();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СобытияАвтоСтарта = "";
	
	Для Каждого СтрокаТаблицы Из ВидыБизнесСобытий Цикл
		Если Не СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(ТекущийОбъект.СобытияАвтоСтарта) Тогда
			ТекущийОбъект.СобытияАвтоСтарта = СтрокаТаблицы.Представление;
		Иначе
			ТекущийОбъект.СобытияАвтоСтарта = ТекущийОбъект.СобытияАвтоСтарта + ", " + СтрокаТаблицы.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//  делается запись в регистр ПодпискиАвтоматическогоЗапускаБизнесПроцессов.
		
	Для Каждого Строка Из ВсеВидыБизнесСобытий Цикл
		
		Если ЗначениеЗаполнено(КомуНазначенПриОткрытии) И ЗначениеЗаполнено(ШаблонБизнесПроцессаПриОткрытии) Тогда
			БизнесСобытияВызовСервера.УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
				Строка.Значение, ШаблонБизнесПроцессаПриОткрытии, КомуНазначенПриОткрытии, ОрганизацияПриОткрытии);
		КонецЕсли;	
		
		БизнесСобытияВызовСервера.УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
			Строка.Значение,
			Запись.ШаблонБизнесПроцесса,
			Запись.КомуНазначен,
			Запись.Организация);
			
		Отбор = Новый Структура("Значение", Строка.Значение);
		МассивСтрок = ВидыБизнесСобытий.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 1 Тогда
			
			Если МассивСтрок[0].Пометка Тогда
				БизнесСобытияВызовСервера.СохранитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
					Строка.Значение,
					Запись.ШаблонБизнесПроцесса,
					Запись.КомуНазначен,
					МассивСтрок[0].Условие, 
					Запись.Организация);
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;
			
	КонецЦикла;
		
	ЗаполнитьСписокСобытий();
	
	ТекстПредупреждения = "";
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВидыБизнесСобытий Цикл
		
		ВидСобытия = Строка.Значение;
		
		НастройкиДляПустойОрганизации = ПолучитьНастройкиАвтозапускаПроцессов(Истина, ВидСобытия);
		НастройкиДляНеПустойОрганизации = ПолучитьНастройкиАвтозапускаПроцессов(Ложь, ВидСобытия);
		
		Если НастройкиДляПустойОрганизации.Количество() <> 0 
			И НастройкиДляНеПустойОрганизации.Количество() <> 0 Тогда
			
			Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС;
			КонецЕсли;
			
			СтрокаПолей = "";
			МассивОрганизаций = НастройкиДляНеПустойОрганизации.ВыгрузитьКолонку("ОрганизацияИсточникаБизнесСобытия");
			Для Каждого Организация Из МассивОрганизаций Цикл
				Если ЗначениеЗаполнено(СтрокаПолей) Тогда
					СтрокаПолей = СтрокаПолей + "; ";
				КонецЕсли;
				СтрокаПолей = СтрокаПолей + Строка(Организация);
			КонецЦикла;	

			Если НастройкиДляНеПустойОрганизации.Количество() = 1 Тогда
				ТекстПредупреждения = ТекстПредупреждения 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Автозапуск процессов уже настроен для всех организаций. 
						|Настройка для конкретной организации (""%1"") при этом недействительна. 
						|Проверьте настройки еще раз.'"),
						СтрокаПолей);
			Иначе
				ТекстПредупреждения = ТекстПредупреждения 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Автозапуск процессов уже настроен для всех организаций. 
						|Настройка для конкретных организаций (""%1"") при этом недействительна. 
						|Проверьте настройки еще раз.'"),
						СтрокаПолей);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ТекстПредупреждения = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ШаблонБизнесПроцессаПриОткрытии = ТекущийОбъект.ШаблонБизнесПроцесса;
	ОрганизацияПриОткрытии = ТекущийОбъект.Организация;
	КомуНазначенПриОткрытии = ТекущийОбъект.КомуНазначен;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Запись.КомуНазначен) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Кому назначен""!'"),,
			"КомуНазначенСтрокой",, 
			Отказ);
	КонецЕсли;
	
	Если Запись.ИнтерактивныйЗапуск И Не ЗначениеЗаполнено(Запись.ВидИнтерактивногоСобытия) Тогда	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Действие""!'"),,
			"Запись.ВидИнтерактивногоСобытия",, 
			Отказ);
		
	КонецЕсли;	
	
	ЕстьПомеченные = Ложь;
	Для Каждого Строка Из ВидыБизнесСобытий Цикл
		
		Если Строка.Пометка Тогда
			ЕстьПомеченные = Истина;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЕстьПомеченные И ЗначениеЗаполнено(Запись.ШаблонБизнесПроцесса) Тогда
		
		ДоступностьШаблона = ШаблоныБизнесПроцессов.ДоступностьШаблона(Запись.ШаблонБизнесПроцесса);
		Если Не ДоступностьШаблона.АвтоматическийЗапуск Тогда
			Текст = НСтр("ru = 'Шаблон недоступен для автоматического запуска процессов.
				|Выполните проверку в карточке шаблона.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"Запись.ШаблонБизнесПроцесса");
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Запись.ШаблонБизнесПроцесса) И ЗначениеЗаполнено(Запись.КомуНазначен) Тогда
		Если Не ПроверитьСовместимостьШаблонаИВидаДокумента(
				Запись.ШаблонБизнесПроцесса, 
				Запись.КомуНазначен) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Данный предмет не может быть использован в указанном процессе.'"),,
				"КомуНазначенСтрокой",, 
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КомуНазначенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтароеЗначениеКомуНазначен", Запись.КомуНазначен);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыбораКомуНазначенПослеВыбораТипаОбъекта",
		ЭтотОбъект,
		ДопПараметры);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, ТипыОбъектов, Элемент);
	
КонецПроцедуры

// Продолжение КомуНазначенНачалоВыбора
//
&НаКлиенте
Процедура ПродолжениеВыбораКомуНазначенПослеВыбораТипаОбъекта(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись.КомуНазначен = ВыбранноеЗначение.Значение;
	ЗаполнитьКомуНазначенСтрокой();
	
	Модифицированность = Истина;
	
	СтрокиСФормой = ФормыВыбораВидовОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта", Запись.КомуНазначен));
	Если СтрокиСФормой.Количество() = 0 Тогда
		НастроитьВидимостьОрганизации();
		НастроитьВидимостьУсловия();
		ЗаполнитьСписокСобытий();
		УстановитьЗаголовокЗакладкиАвтоСтарта();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыбораКомуНазначенПослеВыбораВидаОбъекта",
		ЭтотОбъект,
		ДопПараметры);
	
	ОткрытьФорму(
		СтрокиСФормой[0].Форма,
		СтрокиСФормой[0].ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение ПродолжениеВыбораКомуНазначенПослеВыбораТипаОбъекта.
//
&НаКлиенте
Процедура ПродолжениеВыбораКомуНазначенПослеВыбораВидаОбъекта(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		// Восстанавливаем прежние значения КомуНазначен, если 
		// был отказ от выбора вида объекта.
		Запись.КомуНазначен = ДопПараметры.СтароеЗначениеКомуНазначен;
	Иначе
		Запись.КомуНазначен = ВыбранноеЗначение;
		НастроитьВидимостьОрганизации();
		НастроитьВидимостьУсловия();
		ЗаполнитьСписокСобытий();
		УстановитьЗаголовокЗакладкиАвтоСтарта();
	КонецЕсли;
	
	ЗаполнитьКомуНазначенСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомуНазначенОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Запись.КомуНазначен) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ПоказатьЗначение(, КомуНазначенСтрокой);
	Иначе
		ПоказатьЗначение(, Запись.КомуНазначен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуНазначенОчистка(Элемент, СтандартнаяОбработка)
	
	Запись.КомуНазначен = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонБизнесПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ШаблонБизнесПроцессаНачалоВыбораПродолжение",
		ЭтотОбъект,
		Новый Структура("Элемент", Элемент));
			
	ПоказатьВыборИзМеню(ОписаниеОповещения, ТипыШаблоновПроцессов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонБизнесПроцессаНачалоВыбораПродолжение(ВыбранныйТип, Параметры) Экспорт 

	Если ВыбранныйТип <> Неопределено Тогда 
		ОткрытьФорму("Справочник." + ВыбранныйТип.Значение + ".ФормаВыбора", , Параметры.Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредлагатьЗапускПользователюПриИзменении(Элемент)
	
	Элементы.ВидИнтерактивногоСобытия.Доступность = Запись.ИнтерактивныйЗапуск;
	Если Запись.ИнтерактивныйЗапуск Тогда 
		Если Не ЗначениеЗаполнено(Запись.ВидИнтерактивногоСобытия) Тогда 
			СписокВыбора = Элементы.ВидИнтерактивногоСобытия.СписокВыбора;
			Если СписокВыбора.Количество() > 0 Тогда 
				Запись.ВидИнтерактивногоСобытия = СписокВыбора[0].Значение;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБизнесСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ВидыБизнесСобытий.ТекущиеДанные.Пометка Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.ВидыБизнесСобытийУсловие Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборУсловияМаршрутизации", ЭтотОбъект);
			
		ОткрытьФорму("Справочник.УсловияМаршрутизации.ФормаВыбора", , Элементы.ВидыБизнесСобытийУсловие,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		Возврат;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыБизнесСобытийВыборПродолжение(Результат, Параметры) Экспорт  
	
	ЗаполнитьСписокСобытий();

КонецПроцедуры

&НаКлиенте
Процедура ВыборУсловияМаршрутизации(Результат, Параметры) Экспорт  
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Элементы.ВидыБизнесСобытий.ТекущиеДанные.Условие = Результат;
		Модифицированность = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВидыБизнесСобытийПометкаПриИзменении(Элемент)
	
	УстановитьЗаголовокЗакладкиАвтоСтарта();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизиты формы: ТипыОбъектов, ФормыВыбораВидовОбъектов, ТипыОбъектовСУсловиями
//
&НаСервере
Процедура ЗаполнитьСведенияОТипахОбъектов()
	
	ТипыОбъектов.Очистить();
	ФормыВыбораВидовОбъектов.Очистить();
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ВнутренниеДокументы");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	СтрокаТаблицы = ФормыВыбораВидовОбъектов.Добавить();
	СтрокаТаблицы.ТипОбъекта = ТипОбъекта;
	СтрокаТаблицы.Форма = "Справочник.ВидыВнутреннихДокументов.ФормаВыбора";
	СтрокаТаблицы.ПараметрыФормы = Новый Структура(
		"ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ВходящиеДокументы");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	СтрокаТаблицы = ФормыВыбораВидовОбъектов.Добавить();
	СтрокаТаблицы.ТипОбъекта = ТипОбъекта;
	СтрокаТаблицы.Форма = "Справочник.ВидыВходящихДокументов.ФормаВыбора";
	СтрокаТаблицы.ПараметрыФормы = Новый Структура(
		"ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ИсходящиеДокументы");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	СтрокаТаблицы = ФормыВыбораВидовОбъектов.Добавить();
	СтрокаТаблицы.ТипОбъекта = ТипОбъекта;
	СтрокаТаблицы.Форма = "Справочник.ВидыИсходящихДокументов.ФормаВыбора";
	СтрокаТаблицы.ПараметрыФормы = Новый Структура(
		"ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.УведомленияПрограммы");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ТемыОбсуждений");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.СообщенияОбсуждений");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контрагенты");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВходящееПисьмо");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИсходящееПисьмо");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Файлы");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.Бронь");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Мероприятия");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Проекты");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПроектныеЗадачи");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	ТипыОбъектовСУсловиями.Добавить(ТипОбъекта);
	
	ТипОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Пользователи");
	ТипыОбъектов.Добавить(ТипОбъекта, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипОбъекта, "Синоним"));
	
	ТипыОбъектов.СортироватьПоПредставлению();
	
КонецПроцедуры

// Заполняет реквизит КомуНазначенСтрокой.
//
&НаКлиенте
Процедура ЗаполнитьКомуНазначенСтрокой()
	
	КомуНазначенСтрокой = Строка(Запись.КомуНазначен);
	Если ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		
		НайденноеЗначение = ТипыОбъектов.НайтиПоЗначению(Запись.КомуНазначен);
		Если НайденноеЗначение <> Неопределено Тогда
			КомуНазначенСтрокой = НайденноеЗначение.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Настраивает видимость организации в зависимости от объекта назначения.
//
&НаКлиенте
Процедура НастроитьВидимостьОрганизации()
	
	ТипОбъекта = ТипЗнч(Запись.КомуНазначен);
	
	Если Не ТипОбъекта = Тип("СправочникСсылка.ВидыВходящихДокументов")
		И Не ТипОбъекта = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
		И Не ТипОбъекта = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		
		Элементы.Организация.Видимость = Ложь;
		Запись.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Иначе
		Элементы.Организация.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Настраивает видимость поля Условие.
//
&НаКлиенте
Процедура НастроитьВидимостьУсловия()
	
	ТипОбъекта = ТипЗнч(Запись.КомуНазначен);
	
	Если ТипыОбъектовСУсловиями.НайтиПоЗначению(Запись.КомуНазначен) = Неопределено
		И Не ТипОбъекта = Тип("СправочникСсылка.ВидыВходящихДокументов")
		И Не ТипОбъекта = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
		И Не ТипОбъекта = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		
		Запись.Условие = ПредопределенноеЗначение("Справочник.УсловияМаршрутизации.ПустаяСсылка");
		Элементы.Условие.Видимость = Ложь;
	Иначе
		Элементы.Условие.Видимость = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет реквизит ТипыШаблоновПроцессов.
//
&НаСервере
Процедура ЗаполнитьТипыШаблоновПроцессов()
	
	ТипыШаблоновПроцессов.Очистить();
	
	ТипыОбъекта = Метаданные.РегистрыСведений.НастройкаШаблоновБизнесПроцессов.Измерения.ШаблонБизнесПроцесса.Тип.Типы();
	
	Для Каждого ТипОбъекта Из ТипыОбъекта Цикл
		ОбъектСсылка = Новый(ТипОбъекта);
		ТипыШаблоновПроцессов.Добавить(ОбъектСсылка.Метаданные().Имя, ОбъектСсылка.Метаданные().Синоним);
	КонецЦикла;	
	ТипыШаблоновПроцессов.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСобытий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоступныИнтерактивныеСобытия = Ложь;
	ДоступныСобытияОбъектов = Ложь;
	
	// Интерактивные события
	Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Очистить();
	Если ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Добавить(Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВнутреннегоДокумента);
		Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Добавить(Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВнутреннегоДокумента);
		ДоступныИнтерактивныеСобытия = Истина;
	ИначеЕсли ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Добавить(Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВходящегоДокумента);
		Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Добавить(Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВходящегоДокумента);
		ДоступныИнтерактивныеСобытия = Истина;
	ИначеЕсли ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Добавить(Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоИсходящегоДокумента);
		Элементы.ВидИнтерактивногоСобытия.СписокВыбора.Добавить(Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияИсходящегоДокумента);
		ДоступныИнтерактивныеСобытия = Истина;
	КонецЕсли;
	
	Если Не ДоступныИнтерактивныеСобытия
		
		Или (Запись.ИнтерактивныйЗапуск
			И Элементы.ВидИнтерактивногоСобытия.СписокВыбора.НайтиПоЗначению(
				Запись.ВидИнтерактивногоСобытия) = Неопределено) Тогда
		
		Запись.ИнтерактивныйЗапуск = Ложь;
		Запись.ВидИнтерактивногоСобытия = 
			ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ПустаяСсылка");
		
	КонецЕсли;
	
	// События объектов.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия КАК ВидБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса
		|	И (ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия = &Организация
		|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
		|	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия = &КлассИсточникаБизнесСобытия";
				
	Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", Запись.ШаблонБизнесПроцесса);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Иначе
		Запрос.УстановитьПараметр("Организация", Неопределено);
	КонецЕсли;
	Запрос.УстановитьПараметр("КлассИсточникаБизнесСобытия", Запись.КомуНазначен);
	
	// Если из базы значения не прочитали, то пытаемся сохранить установленные значения в форме.
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Для Каждого СтрокаВидаСобытия Из ВидыБизнесСобытий Цикл
			Если Не СтрокаВидаСобытия.Пометка Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы.ВидБизнесСобытия = СтрокаВидаСобытия.Значение;
			СтрокаТаблицы.Условие = СтрокаВидаСобытия.Условие;
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Справочники.ВидыБизнесСобытий.Выбрать();
	
	ВидыБизнесСобытий.Очистить();
	ВсеВидыБизнесСобытий.Очистить();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЭтоГруппа Тогда
			
			ВсеВидыБизнесСобытий.Добавить(Выборка.Ссылка);
			
			ВидСобытияИмя = Выборка.Ссылка.Наименование;
			НужноДобавить = Ложь;
			
			Если ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				
				Если Выборка.Ссылка = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента Тогда
					НужноДобавить = Истина;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				
				Если Выборка.Ссылка = Справочники.ВидыБизнесСобытий.СозданиеВходящегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента Тогда
					НужноДобавить = Истина;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(Запись.КомуНазначен) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				
				Если Выборка.Ссылка = Справочники.ВидыБизнесСобытий.СозданиеИсходящегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента Тогда
					НужноДобавить = Истина;
				ИначеЕсли Выборка.Ссылка = Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента Тогда
					НужноДобавить = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НужноДобавить Тогда
				Строка = ВидыБизнесСобытий.Добавить();
				Строка.Значение = Выборка.Ссылка;
				Строка.Представление = Выборка.Наименование;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДоступныСобытияОбъектов = ВидыБизнесСобытий.Количество() > 0;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Отбор = Новый Структура("Значение", СтрокаТаблицы.ВидБизнесСобытия);
		МассивСтрок = ВидыБизнесСобытий.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 1 Тогда
			МассивСтрок[0].Пометка = Истина;
			МассивСтрок[0].Загружено = Истина;
			МассивСтрок[0].Условие = СтрокаТаблицы.Условие;
		КонецЕсли;
	
	КонецЦикла;	
	
	Элементы.ГруппаРучнойСтарт.Видимость = ДоступныИнтерактивныеСобытия;
	Элементы.ГруппаАвтостарт.Видимость = ДоступныСобытияОбъектов;
	
	Если ДоступныИнтерактивныеСобытия И ДоступныСобытияОбъектов Тогда
		Элементы.ГруппаНастройкиАвтостарта.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаНастройкиАвтостарта.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Элементы.ВидИнтерактивногоСобытия.Доступность = Запись.ИнтерактивныйЗапуск;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиАвтозапускаПроцессов(ТолькоДляПустойОрганизации, ВидСобытия)
	
	Запрос = Новый Запрос;
	
	// в запросе объединяем данные для конкретной и для пустой организации
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия КАК ОрганизацияИсточникаБизнесСобытия
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия
		|	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса
		|	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия = &КлассИсточникаБизнесСобытия";
		
	Если ТолькоДляПустойОрганизации = Истина Тогда
		Запрос.Текст = Запрос.Текст + 
			"	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Иначе		
		Запрос.Текст = Запрос.Текст + 
			"	И ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ВидБизнесСобытия", ВидСобытия);
	Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", Запись.ШаблонБизнесПроцесса);
	Запрос.УстановитьПараметр("КлассИсточникаБизнесСобытия", Запись.КомуНазначен);
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	Возврат Таблица;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПроверитьСовместимостьШаблонаИВидаДокумента(Шаблон, КомуНазначен)
	
	МенеджерШаблонаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон);
	ИмяПроцесса = МенеджерШаблонаПроцесса.ИмяПроцесса(Шаблон);
	МетаданныеПроцесса = Метаданные.БизнесПроцессы.Найти(ИмяПроцесса);	
	Если ТипЗнч(КомуНазначен) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.ВнутренниеДокументы);
	ИначеЕсли ТипЗнч(КомуНазначен) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.ВходящиеДокументы);
	ИначеЕсли ТипЗнч(КомуНазначен) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.ИсходящиеДокументы);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.УведомленияПрограммы") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.УведомленияПрограммы);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ТемыОбсуждений") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.ТемыОбсуждений);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.СообщенияОбсуждений") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.СообщенияОбсуждений);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контрагенты") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.Контрагенты);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВходящееПисьмо") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Документы.ВходящееПисьмо);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИсходящееПисьмо") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Документы.ИсходящееПисьмо);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Файлы") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.Файлы);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.Бронь") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Документы.Бронь);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Мероприятия") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.Мероприятия);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Проекты") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.Проекты);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПроектныеЗадачи") Тогда
		Возврат ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, Метаданные.Справочники.ПроектныеЗадачи);
	ИначеЕсли КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Пользователи") Тогда
		Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроцессМожетСоздаватьсяПоПредмету(МетаданныеПроцесса, МетаданныеДокумента)
	
	Для Каждого ЭлементМетаданных Из МетаданныеПроцесса.ВводитсяНаОсновании Цикл
		Если ЭлементМетаданных = МетаданныеДокумента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокЗакладкиАвтоСтарта()
	
	ГруппаАвтостартЗаголовок = НСтр("ru = 'Автоматический запуск'");
	Количество = 0;
	Для Каждого СтрокаТаблицы Из ВидыБизнесСобытий Цикл
		Если СтрокаТаблицы.Пометка Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	Если Количество > 0 Тогда
		ГруппаАвтостартЗаголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоматический запуск (%1)'"),
				Строка(Количество));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРедакцииКонфигурации()	
	
	Элементы.Организация.Заголовок = РедакцииКонфигурацииКлиентСервер.ДействуетДляОрганизации();
	Элементы.Организация.ПодсказкаВвода = РедакцииКонфигурацииКлиентСервер.ВсеОрганизации();
		
КонецПроцедуры

#КонецОбласти
