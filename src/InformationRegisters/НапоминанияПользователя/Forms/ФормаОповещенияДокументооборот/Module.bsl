#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Напоминание") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Напоминание = Параметры.Напоминание;
	ЗаписьКалендаря = Напоминание.Источник;
	УстановитьСрокПовторногоОповещения();
	ЗаполнитьСрокиПовторногоОповещения();
	ОбновитьДанныеЗаписиКалендаря();
	ОтложитьНапоминаниеПриЗакрытии = Истина;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьЭлементыФормыДляМобильногоУстройства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьКогда", 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря" И Параметр = ЗаписьКалендаря Тогда
		ОбновитьДанныеЗаписиКалендаря();
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуНапоминания" И Открыта() Тогда
		ЗакрытьФорму();
	ИначеЕсли ИмяСобытия = "Запись_НапоминанияПользователя_Документооборот"
		И Источник = ЗаписьКалендаря Тогда
		ЗакрытьФорму();
	ИначеЕсли ИмяСобытия = "Удаление_НапоминанияПользователя_Документооборот"
		И Источник = ЗаписьКалендаря Тогда
		ЗакрытьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтложитьНапоминаниеПриЗакрытии Тогда
		ОтложитьНапоминание();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГиперссылкаПерейтиКЗаписиКалендаряНажатие(Элемент)
	
	ПоказатьЗначение(, ЗаписьКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКПредметуНажатие(Элемент)
	
	ПоказатьЗначение(, Предмет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Прекратить(Команда)
	
	ПрекращаемыеНапоминания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Напоминание);
	НапоминанияПользователяДокументооборотКлиент.ПрекратитьНапоминания(ПрекращаемыеНапоминания);
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ОтложитьНапоминание();
	ЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтложитьНапоминание()
	
	ИнтервалВремени = НапоминанияПользователяКлиент.ПолучитьИнтервалВремениИзСтроки(СрокПовторногоОповещения);
	
	Напоминание.СрокНапоминания = ТекущаяДата() + ИнтервалВремени;
	ПодключитьНапоминание(Напоминание);
	НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Напоминание);
	Оповестить("Запись_НапоминанияПользователя_Документооборот", Напоминание, Напоминание.Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЗаписиКалендаря()
	
	ЗаписьКалендаряТипЗаписиКалендаря = ЗаписьКалендаря.ТипЗаписиКалендаря;
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	РеквизитыЗаписиКалендаря = ЗаписьКалендаряОбъект.ПолучитьРеквизитыЗаписиКалендаря(Напоминание.ВремяСобытия);
	Если ЗначениеЗаполнено(РеквизитыЗаписиКалендаря) Тогда
		ЗаписьКалендаряОписание = РеквизитыЗаписиКалендаря.Описание;
		ЗаписьКалендаряДатаНачала = РеквизитыЗаписиКалендаря.ДатаНачала;
		ЗаписьКалендаряДатаОкончания = РеквизитыЗаписиКалендаря.ДатаОкончания;
	Иначе
		// Нет повторяющегося события на дату напоминания
		ЗаписьКалендаряОписание = ЗаписьКалендаря.Описание;
		ЗаписьКалендаряДатаНачала = ЗаписьКалендаря.ДатаНачала;
		ЗаписьКалендаряДатаОкончания = ЗаписьКалендаря.ДатаОкончания;
	КонецЕсли;
	
	КраткоеОписаниеНапоминания = НапоминанияПользователяДокументооборот.КраткоеОписаниеНапоминания(
		ЗаписьКалендаряДатаНачала,
		ЗаписьКалендаряОписание);
	Заголовок = СтрШаблон("%1: %2",
		НСтр("ru = 'Напоминание'"),
		КраткоеОписаниеНапоминания);
	
	ЦветТабличногоДокумента = РаботаСРабочимКалендаремСервер.ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря);
	Если ЦветТабличногоДокумента <> Перечисления.ЦветаРабочегоКалендаря.Нет Тогда
		Элементы.ЗаписьКалендаряОписание.ЦветФона =
			РаботаСРабочимКалендаремСервер.ПолучитьЦветТабличногоДокумента(ЦветТабличногоДокумента);
	КонецЕсли;
	
	ОтобразитьКогда(ЗаписьКалендаряДатаНачала, ЗаписьКалендаряДатаОкончания, Когда, ТекущаяДатаСеанса());
	Если ЗаписьКалендаряДатаНачала < ТекущаяДатаСеанса()
		И ЗаписьКалендаряДатаОкончания < ТекущаяДатаСеанса() Тогда
		Элементы.Когда.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе
		Элементы.Когда.ЦветТекста =Новый Цвет();
	КонецЕсли;
	
	// Надпись "Перейти к предмету"
	Если ЗначениеЗаполнено(ЗаписьКалендаря.Предмет) Тогда
		
		Предмет = ЗаписьКалендаря.Предмет;
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда
			ПредставлениеПредмета = НСтр("ru = 'проекту'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			ПредставлениеПредмета = НСтр("ru = 'входящему письму'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПредставлениеПредмета = НСтр("ru = 'задаче'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			ПредставлениеПредмета = НСтр("ru = 'исходящему письму'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'файлу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'входящему документу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'внутреннему документу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'исходящему документу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			ПредставлениеПредмета = НСтр("ru = 'мероприятию'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ПредставлениеПредмета = НСтр("ru = 'проектной задаче'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.Отсутствие") Тогда
			ПредставлениеПредмета = НСтр("ru = 'отсутствию'");
		Иначе
			ПредставлениеПредмета = НСтр("ru = 'предмету'");
		КонецЕсли;
		Если ЗаписьКалендаря.Связанная Тогда
			Элементы.ГиперссылкаПерейтиКЗаписиКалендаря.Видимость = Ложь;
			Элементы.ДекорацияПерейти.Видимость = Ложь;
			ПредставлениеПредмета = СтрШаблон("%1 %2",
				НСтр("ru = 'Перейти к'"),
				ПредставлениеПредмета);
		КонецЕсли;
		Элементы.ГиперссылкаПерейтиКПредмету.Заголовок = ПредставлениеПредмета;
		
	Иначе
		
		Элементы.ДекорацияПерейти.Видимость = Ложь;
		Элементы.ГиперссылкаПерейтиКПредмету.Видимость = Ложь;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКогда()
	
	ОтобразитьКогда(ЗаписьКалендаряДатаНачала, ЗаписьКалендаряДатаОкончания, Когда, ТекущаяДата());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьКогда(ДатаНачала, ДатаОкончания, Когда, ТекущееВремя)
	
	КоличествоСекундДо = ДатаНачала - ТекущееВремя;
	КоличествоЧасовДо  = Цел(КоличествоСекундДо / 3600);
	КоличествоМинутДо  = Цел((КоличествоСекундДо - КоличествоЧасовДо * 3600) / 60);
	КоличествоДнейДо = Цел(КоличествоСекундДо / 86400); // 86400 - число секунд в сутках
	
	КоличествоСекундПосле = ТекущееВремя - ДатаОкончания;
	КоличествоЧасовПосле  = Цел(КоличествоСекундПосле / 3600);
	КоличествоМинутПосле  = Цел((КоличествоСекундПосле - КоличествоЧасовПосле * 3600) / 60);
	КоличествоДнейПосле = Цел(КоличествоСекундПосле / 86400); // 86400 - число секунд в сутках
	
	ПредставлениеДней = НСтр("ru = 'день'")
		+ "," + НСтр("ru = 'дня'")
		+ "," + НСтр("ru = 'дней'");
	ПредставлениеЧасов = НСтр("ru = 'час'")
		+ "," + НСтр("ru = 'часа'")
		+ "," + НСтр("ru = 'часов'");
	ПредставлениеМинут = НСтр("ru = 'минута'")
		+ "," + НСтр("ru = 'минуты'")
		+ "," + НСтр("ru = 'минут'");
		
	Если КоличествоСекундДо > 0 Тогда
		
		Если КоличествоДнейДо > 0 Тогда
			
			Если КоличествоДнейДо = 1 Тогда
				ОсталосьПрописью = НСтр("ru = 'остался'");
			Иначе
				ОсталосьПрописью = НСтр("ru = 'осталось'");
			КонецЕсли;
			
			ДнейДоПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоДнейДо, 
				ПредставлениеДней);
			
			ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" (%1 %2)", 
				ОсталосьПрописью,
				ДнейДоПрописью);
			
		ИначеЕсли КоличествоЧасовДо > 0 Тогда
			
			Если КоличествоЧасовДо = 1 Тогда
				ОсталосьПрописью = НСтр("ru = 'остался'");
			Иначе
				ОсталосьПрописью = НСтр("ru = 'осталось'");
			КонецЕсли;
			
			ЧасовДоПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоЧасовДо, 
				ПредставлениеЧасов);
			
			МинутДоПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоМинутДо, 
				ПредставлениеМинут);
			
			ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" (%1 %2 %3)", 
				ОсталосьПрописью,
				ЧасовДоПрописью,
				МинутДоПрописью);
			
		ИначеЕсли КоличествоМинутДо > 0 Тогда
			
			Если КоличествоМинутДо = 1 Тогда
				ОсталосьПрописью = НСтр("ru = 'осталась'");
			Иначе
				ОсталосьПрописью = НСтр("ru = 'осталось'");
			КонецЕсли;
			
			МинутДоПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоМинутДо, 
				ПредставлениеМинут);
			
			ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" (%1 %2)", 
				ОсталосьПрописью,
				МинутДоПрописью);
			
		Иначе
			
			ПредставлениеСрока = НСтр("ru = '(осталось меньше минуты)'");
			
		КонецЕсли;
		
	ИначеЕсли КоличествоСекундДо <= 0  И КоличествоСекундПосле <= 0 Тогда
		
		ПредставлениеСрока = НСтр("ru = '(сейчас)'");
		
	ИначеЕсли КоличествоСекундПосле > 0 Тогда
		
		Если КоличествоДнейПосле > 0 Тогда
			
			Если КоличествоДнейПосле = 1 Тогда
				ПрошлоПрописью = НСтр("ru = 'прошел'");
			Иначе
				ПрошлоПрописью = НСтр("ru = 'прошло'");
			КонецЕсли;
			
			ДнейПослеПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоДнейПосле, 
				ПредставлениеДней);
			
			ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" (%1 %2)", 
				ПрошлоПрописью,
				ДнейПослеПрописью);
			
		ИначеЕсли КоличествоЧасовПосле > 0 Тогда
			
			Если КоличествоЧасовПосле = 1 Тогда
				ПрошлоПрописью = НСтр("ru = 'прошел'");
			Иначе
				ПрошлоПрописью = НСтр("ru = 'прошло'");
			КонецЕсли;
			
			ЧасовПослеПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоЧасовПосле, 
				ПредставлениеЧасов);
			
			МинутПослеПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоМинутПосле, 
				ПредставлениеМинут);
			
			ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" (%1 %2 %3)", 
				ПрошлоПрописью,
				ЧасовПослеПрописью,
				МинутПослеПрописью);
			
		ИначеЕсли КоличествоМинутПосле > 0 Тогда
			
			Если КоличествоМинутПосле = 1 Тогда
				ПрошлоПрописью = НСтр("ru = 'прошла'");
			Иначе
				ПрошлоПрописью = НСтр("ru = 'прошло'");
			КонецЕсли;
			
			МинутПослеПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоМинутПосле, 
				ПредставлениеМинут);
			
			ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" (%1 %2)", 
				ПрошлоПрописью,
				МинутПослеПрописью);
			
		Иначе
			
			ПредставлениеСрока = НСтр("ru = '(прошло меньше минуты)'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачалоДня(ДатаНачала) = НачалоДня(ТекущееВремя) Тогда
		Когда = Формат(ДатаНачала, "ДФ=ЧЧ:мм") + НСтр("ru = ', сегодня'") + ПредставлениеСрока;
	Иначе
		Когда = Формат(ДатаНачала, "ДФ='ЧЧ:мм, дд ММММ'") + ПредставлениеСрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокПовторногоОповещения()
	
	ВремяДоСобытияМинут = (Напоминание.ВремяСобытия - ТекущаяДатаСеанса())/60;
	
	Если ВремяДоСобытияМинут <= 15 И ВремяДоСобытияМинут > 10 Тогда
		СрокПовторногоОповещения = НСтр("ru = '10 минут'");
	ИначеЕсли ВремяДоСобытияМинут <= 10 И ВремяДоСобытияМинут > 5 Тогда
		СрокПовторногоОповещения = НСтр("ru = '5 минут'");
	Иначе
		СрокПовторногоОповещения = НСтр("ru = '15 минут'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьНапоминание(ПараметрыНапоминания)
	
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Если Открыта() Тогда
		ОтложитьНапоминаниеПриЗакрытии = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСрокиПовторногоОповещения()
	
	Элементы.СрокПовторногоОповещения.СписокВыбора.Очистить();
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '5 минут'; en = '5 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '10 минут'; en = '10 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '15 минут'; en = '15 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '20 минут'; en = '20 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '30 минут'; en = '30 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '45 минут'; en = '45 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '1 час'; en = '1 hour'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '2 часа'; en = '2 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '3 часа'; en = '3 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '6 часов'; en = '6 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '12 часов'; en = '12 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '1 день'; en = '1 day'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '3 дня'; en = '3 days'"));
	
	Если Элементы.СрокПовторногоОповещения.СписокВыбора.НайтиПоЗначению(СрокПовторногоОповещения) = Неопределено Тогда
		Элементы.СрокПовторногоОповещения.СписокВыбора.Вставить(0, СрокПовторногоОповещения);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура НастроитьЭлементыФормыДляМобильногоУстройства()
	
	Элементы.ПустаяНадписьКнопки.Видимость = Ложь;
	Элементы.ГруппаКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.ГруппаОтложитьНаМК.Видимость = Истина;
	Элементы.Переместить(Элементы.КнопкаОтложить,Элементы.ГруппаОтложитьНаМК);
	Элементы.Переместить(Элементы.ГруппаСрокМК,Элементы.ГруппаОтложитьНаМК);
	
	Элементы.КнопкаОтложить.Шрифт = Новый Шрифт(,8,Истина,,,);
	Элементы.КнопкаПрекратить.Шрифт = Элементы.КнопкаОтложить.Шрифт;
	
	Элементы.СрокПовторногоОповещения.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.СрокПовторногоОповещения.Ширина = 7;
	
	Элементы.НадписьНа.РастягиватьПоГоризонтали = Истина;
	Элементы.НадписьНа.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.НадписьНа.Ширина = 5;
	
	Элементы.ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	Элементы.ГруппаКоманды.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	Элементы.КнопкаОтложить.Ширина = 10;
	
КонецПроцедуры

#КонецОбласти