
#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеВидовИТипов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоНастройкиОбмена = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	
	ТолькоПросмотр = Не ЕстьПравоНастройкиОбмена;
	Элементы.ФормаУдалить.Доступность = ЕстьПравоНастройкиОбмена;
	
	УстановитьУсловноеОформление();
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	
	Параметры.Свойство("Организация"             , Организация);
	Параметры.Свойство("Контрагент"              , Контрагент);
	Параметры.Свойство("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Параметры.Свойство("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Создание = Неопределено;
	
	Если Параметры.Свойство("СоздатьНовыйПоИдентификаторам") И Параметры.СоздатьНовыйПоИдентификаторам <> Неопределено Тогда
		
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Организация);
		Если Параметры.СоздатьНовыйПоИдентификаторам  Тогда
			ТипНастройки = 2;
		Иначе
			ТипНастройки = 1;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Создание", Создание) Тогда
		
		Элементы.Организация.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Ложь;
		ТипНастройки = 0;
		
	Иначе
		
		ОпределятьТипНастройкиПриЧтении = Истина;
	КонецЕсли;
	
	СоответствиеВидовИТипов = Новый Соответствие;
	ЗаполнитьПоШаблонуНаСервере(ИнтеграцияЭДО.ПрофилиНастроекОтраженияВходящихДокументов().ПервоначальноеЗаполнение,
		СоответствиеВидовИТипов);
	АдресСоответствияВидовИТипов  = ПоместитьВоВременноеХранилище(СоответствиеВидовИТипов,УникальныйИдентификатор);
	
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;
	
	ЗагрузитьТекущиеНастройкиНаСервере();
	
	УстановитьОграниченияВыбораВидовДокументов();
	
	Если МиграцияДанныхИзВнешнихСистемСервер.БлокироватьОбменСВнешнимиРесурсами() Тогда
		УстановитьВидимостьДоступностьПоПереходуНаНовуюВерсию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствияВидовИТипов) Тогда
		СоответствиеВидовИТипов = ПолучитьИзВременногоХранилища(АдресСоответствияВидовИТипов);
	КонецЕсли;
	
	ОбновитьДоступностьИдентификаторов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) <> ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Нужно либо указать оба идентификатора (для частной настройки), либо не указывать ни одного (для частной)'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Отказ = Отказ ИЛИ Не НастройкиОтраженияДОКорректны();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки отражения в учете не сохранены. Завершить работу с программой?'")
		Иначе
			Описание = Новый ОписаниеОповещения("ПередЗакрытиемОкнаФормы", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр("ru = 'Настройки отражения в учете изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриИзмененииОрганизации(Элемент)
	
	ЗагрузитьТекущиеНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗагрузитьТекущиеНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеДокументыДО

&НаКлиенте
Процедура ВходящиеДокументыДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВходящиеДокументыДОНастройкиСозданияДокументов" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Принимать Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ВидДокумента) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = ПараметрыФормыНастройкиСозданияДокументов();
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДанныеСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаДокументооборотаПродолжить", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("РегистрСведений.ПравилаУчетаВидовЭДДО.Форма.НастройкаСозданияВнутреннихДокументов", 
			ПараметрыФормы,
			ВладелецФормы, , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыДОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыДОПриниматьПриИзменении(Элемент)
	
	ТекДанные = Элементы.ВходящиеДокументыДО.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНастройкуСозданияДокументов(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыДОВидДокументаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ВходящиеДокументыДО.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНастройкуСозданияДокументов(ТекДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	Если СохранитьНастройки() Тогда
		Модифицированность = Ложь;
		Заголовок = ПолучитьЗаголовокОкна();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение:'"),, НСтр("ru = 'Настройки успешно сохранены'"),
			БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если СохранитьНастройки() Тогда
		Модифицированность = Ложь;
		Заголовок = ПолучитьЗаголовокОкна();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	ТолькоПросмотр = Истина;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииУдаленияНастроекОтправки", ЭтотОбъект);
	НастройкиОтраженияВУчетеЭДОСлужебныйКлиент.УдалитьНастройкуОтраженияВУчете(Организация, Контрагент,
		ИдентификаторОрганизации, ИдентификаторКонтрагента, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеДокументыДОНастройкиСозданияДокументов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеДокументыДО.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеДокументыДО.Принимать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеДокументыДОНастройкиСозданияДокументов.Имя);
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеДокументыДОВидДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеДокументыДО.Принимать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеДокументыДОНастройкиСозданияДокументов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеДокументыДО.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеДокументыДОВидДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеДокументыДО.Принимать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеДокументыДО.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Знач ИмяШаблона, СоответствиеВидовИТипов)
	
	Профиль = ИнтеграцияЭДО.ПрофилиНастроекОтраженияВходящихДокументов()[ИмяШаблона];
	ТаблицаПредопределенногоПрофиля = ЭлектронныеДокументыЭДО.ШаблонНастроекОтраженияВУчете(Профиль);
	ТаблицаПредопределенногоПрофиля.Сортировать("ВидДокумента");
	ВходящиеДокументы.Загрузить(ТаблицаПредопределенногоПрофиля);
	ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов)

	СоответствиеВидовИТипов.Очистить();
	Для Каждого СтрокаВидаЭД Из ВходящиеДокументы Цикл
		ВидЭД = СтрокаВидаЭД.ВидДокумента;
		СписокВыбора = ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента(ВидЭД, Истина,
			НСтр("ru = 'Автоматически'") + " - ");
		СоответствиеВидовИТипов.Вставить(ВидЭД, СписокВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекущиеНастройкиНаСервере(НеПроверять = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя";
	
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("Отправитель", Контрагент);
	Запрос.УстановитьПараметр("Получатель", Организация);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	// Проверяем настройку на "Общую" для организации
	Если НеПроверять И РезультатыЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("ИдентификаторОтправителя", "");
		ИдентификаторКонтрагента = "";
		РезультатыЗапроса = Запрос.Выполнить();
	КонецЕсли;

	Если РезультатыЗапроса.Пустой() Тогда
		Шаблон = НСтр("ru = '%1 (Создание)'");
		Заголовок = СтрШаблон(Шаблон, ПолучитьЗаголовокОкна());
	Иначе
		Если ОпределятьТипНастройкиПриЧтении Тогда
			ОпределитьТипСуществующейНастройки(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторПолучателя;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВидДокумента"    , ВыборкаДетальныеЗаписи.ВидДокумента);
		
		НайденныеСтроки = ВходящиеДокументы.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВыборкаДетальныеЗаписи.Количество() <> ВходящиеДокументы.Количество() Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Идентификаторы = СинхронизацияЭДО.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
	
	Элементы.ИдентификаторОрганизации.РежимВыбораИзСписка = Идентификаторы.ИдентификаторыОтправителя.Количество() > 0;
	Элементы.ИдентификаторОрганизации.СписокВыбора.Очистить();
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыОтправителя Цикл
		Элементы.ИдентификаторОрганизации.СписокВыбора.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Значение = Элементы.ИдентификаторОрганизации.СписокВыбора.НайтиПоЗначению(ИдентификаторОрганизации);
		Если Значение = Неопределено Тогда 
			Элементы.ИдентификаторОрганизации.СписокВыбора.Добавить(ИдентификаторОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ИдентификаторКонтрагента.РежимВыбораИзСписка = Идентификаторы.ИдентификаторыПолучателя.Количество() > 0;
	Элементы.ИдентификаторКонтрагента.СписокВыбора.Очистить();
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыПолучателя Цикл
		Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление);
	КонецЦикла;

	Если ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		Значение = Элементы.ИдентификаторКонтрагента.СписокВыбора.НайтиПоЗначению(ИдентификаторКонтрагента);
		Если Значение = Неопределено Тогда 
			Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(ИдентификаторКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из ВходящиеДокументы Цикл
		Строка.СпособОбработки = "Вручную";
	КонецЦикла;
	
	ПравилаУчетаДО = РегистрыСведений.ПравилаУчетаВидовЭДДО.НастройкиПриемаДокументов(Организация, Контрагент);
	
	ПравилаУчетаДО.Колонки.Добавить("ПредставлениеВидаДокументаЭДО");
	Для Каждого Строка Из ПравилаУчетаДО Цикл
		Строка.ПредставлениеВидаДокументаЭДО = Строка(Строка.ВидДокументаЭДО);
	КонецЦикла;
	ПравилаУчетаДО.Сортировать("ПредставлениеВидаДокументаЭДО");
	
	ВходящиеДокументыДО.Загрузить(
		ПравилаУчетаДО);
	
	ЗаполнитьПредставлениеНастроекСозданияДокументов(ВходящиеДокументыДО);
	ЗаполнитьСтатусПроверокНастроекСозданияДокументов(ВходящиеДокументыДО);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеНастроекСозданияДокументов(ВходящиеДокументыДО)
	
	Для Каждого СтрокаТаблицы Из ВходящиеДокументыДО Цикл
		ЗаполнитьСтрокуПредставлениеСозданияДокументов(СтрокаТаблицы);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатусПроверкиИПредставленияНастроекСтроки(Строка)
	
	ЗаполнитьСтрокуПредставлениеСозданияДокументов(Строка);
	ЗаполнитьСтатусПроверокНастроекСозданияДокументов(Строка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПредставлениеСозданияДокументов(Строка)
	
	Если Не Строка.Принимать Тогда
		Строка.НастройкиСозданияДокументов = "";
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.ВидДокумента) Тогда
		Строка.НастройкиСозданияДокументов = "Укажите вид документа";
		Возврат;
	КонецЕсли;
	
	СтрШаблона = ?(ЗначениеЗаполнено(Строка.Шаблон),
		СтрШаблон(НСтр("ru = 'По шаблону: %1'"), Строка.Шаблон),
		"");
	
	СтрПапки = ?(ЗначениеЗаполнено(Строка.Папка),
		СтрШаблон(НСтр("ru = 'Папка: %1'"), Строка.Папка),
		"");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		СтрГрифаДоступа = ?(ЗначениеЗаполнено(Строка.ГрифДоступа),
			СтрШаблон(НСтр("ru = 'Гриф доступа: %1'"), Строка.ГрифДоступа),
			"");
	КонецЕсли;
	
	СтрВопроса = ?(ЗначениеЗаполнено(Строка.ВопросДеятельности),
		СтрШаблон(НСтр("ru = 'Вопрос: %1'"), Строка.ВопросДеятельности),
		"");
	
	СтрОтветственного = ?(ЗначениеЗаполнено(Строка.Ответственный),
		СтрШаблон(НСтр("ru = 'Ответственный: %1'"), Строка.Ответственный),
		"");
	
	СтрокиКСоединению = Новый Массив;
	
	Если ЗначениеЗаполнено(СтрШаблона) Тогда
		СтрокиКСоединению.Добавить(СтрШаблона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрПапки) Тогда
		СтрокиКСоединению.Добавить(СтрПапки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрГрифаДоступа) Тогда
		СтрокиКСоединению.Добавить(СтрГрифаДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрВопроса) Тогда
		СтрокиКСоединению.Добавить(СтрВопроса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрОтветственного) Тогда
		СтрокиКСоединению.Добавить(СтрОтветственного);
	КонецЕсли;
	
	Строка.НастройкиСозданияДокументов =
		СтрСоединить(СтрокиКСоединению, "; ");
	
	Если Не ЗначениеЗаполнено(Строка.НастройкиСозданияДокументов) Тогда
		Строка.НастройкиСозданияДокументов = "Настроить...";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатусПроверокНастроекСозданияДокументов(НастройкиСозданияДокументов)
	
	Если ТипЗнч(НастройкиСозданияДокументов) = Тип("ДанныеФормыКоллекция") Тогда
		
		МассивШаблонов = НастройкиСозданияДокументов.Выгрузить().ВыгрузитьКолонку("Шаблон");
		МассивВидовДокументов = НастройкиСозданияДокументов.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
		
		МассивШаблонов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивШаблонов);
		МассивВидовДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВидовДокументов);
		
		ПараметрыНастроекЭДО = НастройкиСозданияДокументов;
		
	ИначеЕсли ТипЗнч(НастройкиСозданияДокументов) = Тип("Структура") Тогда
		
		МассивШаблонов = Новый Массив;
		МассивШаблонов.Добавить(НастройкиСозданияДокументов.Шаблон);
		
		МассивВидовДокументов = Новый Массив;
		МассивВидовДокументов.Добавить(НастройкиСозданияДокументов.ВидДокумента);
		
		ПараметрыНастроекЭДО = Новый Массив;
		ПараметрыНастроекЭДО.Добавить(НастройкиСозданияДокументов);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Шаблоны.Ссылка КАК Шаблон,
		|	Шаблоны.Папка КАК Папка,
		|	Шаблоны.ГрифДоступа КАК ГрифДоступа,
		|	Шаблоны.Ответственный КАК Ответственный,
		|	Шаблоны.ВопросДеятельности КАК ВопросДеятельности
		|ИЗ
		|	Справочник.ШаблоныВнутреннихДокументов КАК Шаблоны
		|ГДЕ
		|	Шаблоны.Ссылка В(&Шаблоны)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента,
		|	ВидыДокументов.ОбязательноеУказаниеОтветственного КАК ОбязательноеУказаниеОтветственного
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.Ссылка В(&ВидыДокументов)";
	Запрос.УстановитьПараметр("Шаблоны", МассивШаблонов);
	Запрос.УстановитьПараметр("ВидыДокументов", МассивВидовДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитовШаблонов = МассивРезультатов[0].Выгрузить();
	ТаблицаСвойствВидовДокументов = МассивРезультатов[1].Выгрузить();
	
	ДеревоПараметровШаблоновСтрок = ОбменСКонтрагентамиДОСервер.ДеревоПараметровЗаполненияСтроковыхПолей("ДеревоПараметровСозданияДокумента");
	
	Для каждого СтрНастроек Из ПараметрыНастроекЭДО Цикл
		
		Если Не СтрНастроек.Принимать Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 0;
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрНастроек.ВидДокумента) Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 0;
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДанныхШаблона = ТаблицаРеквизитовШаблонов.Найти(СтрНастроек.Шаблон, "Шаблон");
		
		Если Не ЗначениеЗаполнено(СтрНастроек.Папка) Тогда
			Если СтрокаДанныхШаблона = Неопределено
					ИЛИ Не ЗначениеЗаполнено(СтрокаДанныхШаблона.Папка) Тогда
				
				СтрНастроек.ИндексКартинкиОтраженияВДО = 1;
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрНастроек.ГрифДоступа)
			И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			
			Если СтрокаДанныхШаблона = Неопределено
					ИЛИ Не ЗначениеЗаполнено(СтрокаДанныхШаблона.ГрифДоступа) Тогда
				
				СтрНастроек.ИндексКартинкиОтраженияВДО = 1;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаВидаДокумента = ТаблицаСвойствВидовДокументов.Найти(СтрНастроек.ВидДокумента);
		
		ОбязательноеУказаниеОтветственного = Ложь;
		Если СтрокаВидаДокумента <> Неопределено
			И СтрокаВидаДокумента.ОбязательноеУказаниеОтветственного Тогда
			
			ОбязательноеУказаниеОтветственного = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрНастроек.Ответственный) И ОбязательноеУказаниеОтветственного Тогда
			Если СтрокаДанныхШаблона = Неопределено
					ИЛИ Не ЗначениеЗаполнено(СтрокаДанныхШаблона.Ответственный) Тогда
				
				СтрНастроек.ИндексКартинкиОтраженияВДО = 1;
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрНастроек.ВопросДеятельности) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
			
			Если СтрокаДанныхШаблона = Неопределено
					ИЛИ Не ЗначениеЗаполнено(СтрокаДанныхШаблона.ВопросДеятельности) Тогда
				
				СтрНастроек.ИндексКартинкиОтраженияВДО = 1;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНастроек.ШаблонНаименования = "" Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 2;
			Продолжить;
			
		КонецЕсли;
		
		РезультатРазбораПараметров =
			ОбменСКонтрагентамиДОСервер.ПараметрыВШаблонеСтроковогоПоля(СтрНастроек.ШаблонНаименования);
		
		Если Не РезультатРазбораПараметров.Успех Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 2;
			Продолжить;
			
		КонецЕсли;
		
		ВсеПараметрыНайдены = Истина;
		
		Для каждого Параметр Из РезультатРазбораПараметров.МассивПараметров Цикл
		
			ОписаниеПараметра =
				ДеревоПараметровШаблоновСтрок.Строки.Найти(Параметр, "ПредставлениеПолное", Истина);
			
			Если ОписаниеПараметра = Неопределено Тогда
				
				ВсеПараметрыНайдены = Ложь;
				Продолжить
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если Не ВсеПараметрыНайдены Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 2;
			Продолжить;
			
		КонецЕсли;
		
		РезультатРазбораПараметров =
			ОбменСКонтрагентамиДОСервер.ПараметрыВШаблонеСтроковогоПоля(СтрНастроек.ШаблонСодержания);
		
		Если Не РезультатРазбораПараметров.Успех Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 2;
			Продолжить;
			
		КонецЕсли;
		
		ВсеПараметрыНайдены = Истина;
		
		Для каждого Параметр Из РезультатРазбораПараметров.МассивПараметров Цикл
		
			ОписаниеПараметра =
				ДеревоПараметровШаблоновСтрок.Строки.Найти(Параметр, "ПредставлениеПолное", Истина);
			
			Если ОписаниеПараметра = Неопределено Тогда
				
				ВсеПараметрыНайдены = Ложь;
				Продолжить
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если Не ВсеПараметрыНайдены Тогда
			
			СтрНастроек.ИндексКартинкиОтраженияВДО = 2;
			Продолжить;
			
		КонецЕсли;
		
		СтрНастроек.ИндексКартинкиОтраженияВДО = 3;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруСтрокиНастроекЭДО()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВидДокументаЭДО");
	СтруктураСтроки.Вставить("ВидДокумента");
	СтруктураСтроки.Вставить("Шаблон");
	СтруктураСтроки.Вставить("Папка");
	СтруктураСтроки.Вставить("ГрифДоступа");
	СтруктураСтроки.Вставить("Ответственный");
	СтруктураСтроки.Вставить("ВопросДеятельности");
	СтруктураСтроки.Вставить("ШаблонНаименования");
	СтруктураСтроки.Вставить("ШаблонСодержания");
	СтруктураСтроки.Вставить("НастройкиСозданияДокументов");
	СтруктураСтроки.Вставить("ИндексКартинкиОтраженияВДО");
	СтруктураСтроки.Вставить("Принимать");
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНастройкуСозданияДокументов(НастройкаСоздания)
	
	СтруктураСтроки = ПолучитьСтруктуруСтрокиНастроекЭДО();;
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, НастройкаСоздания);
	
	ЗаполнитьСтатусПроверкиИПредставленияНастроекСтроки(СтруктураСтроки);
	
	ЗаполнитьЗначенияСвойств(НастройкаСоздания, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормыНастройкиСозданияДокументов()
	
	ПараметрыИнициализации = Новый Структура;
	ПараметрыИнициализации.Вставить("ВидДокумента");
	ПараметрыИнициализации.Вставить("ВидДокументаЭДО");
	ПараметрыИнициализации.Вставить("ВопросДеятельности");
	ПараметрыИнициализации.Вставить("Ответственный");
	ПараметрыИнициализации.Вставить("Папка");
	ПараметрыИнициализации.Вставить("ГрифДоступа");
	ПараметрыИнициализации.Вставить("Шаблон");
	ПараметрыИнициализации.Вставить("ШаблонНаименования");
	ПараметрыИнициализации.Вставить("ШаблонСодержания");
	
	Возврат ПараметрыИнициализации;

КонецФункции

&НаКлиенте
Процедура НастройкаДокументооборотаПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ВходящиеДокументыДО.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат);
	
	Модифицированность = Макс(Модифицированность, Результат.Модифицированность); 
	
	ПроверитьНастройкуСозданияДокументов(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьИдентификаторов()
	
	Элементы.ИдентификаторКонтрагента.ТолькоПросмотр = ТипНастройки = 1;
	Элементы.ИдентификаторОрганизации.ТолькоПросмотр = ТипНастройки = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьТипСуществующейНастройки(Форма)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторКонтрагента) И ЗначениеЗаполнено(Форма.ИдентификаторОрганизации) Тогда
		Форма.ТипНастройки = 2;
	Иначе 
		Форма.ТипНастройки = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройки()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = СохранитьНастройкиНаСервере(ВходящиеДокументы, ВходящиеДокументыДО,
		Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента);
	
	Если Результат Тогда
		ОпределятьТипНастройкиПриЧтении = Истина;
		ОпределитьТипСуществующейНастройки(ЭтотОбъект);
		ОбновитьДоступностьИдентификаторов();
		
		Оповестить("ОбновитьТекущиеДелаЭДО");
		ТекстЗаголовка = НСтр("ru = 'Успех'");
		ТекстСообщения = НСтр("ru = 'Настройки получения сохранены успешно'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьНастройкиНаСервере(Знач ВходящиеДокументы, Знач ВходящиеДокументыДО, Знач Получатель,
	Знач Отправитель, Знач ИдентификаторПолучателя, Знач ИдентификаторОтправителя)
	
	Возврат НастройкиОтраженияВУчетеЭДОСлужебный.СохранитьНастройкиОтраженияВУчете(ВходящиеДокументы.Выгрузить(),
		Получатель, Отправитель, ИдентификаторПолучателя, ИдентификаторОтправителя, ВходящиеДокументыДО.Выгрузить());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОкна()

	Возврат НСтр("ru = 'Настройка отражения документов в учете'");

КонецФункции

&НаКлиенте
Процедура ПриЗавершенииУдаленияНастроекОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		Оповестить("ОбновитьСостояниеЭД");
		Оповестить("ОбновитьТекущиеДелаЭДО");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОкнаФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Элементы.ФормаЗаписатьИЗакрыть);
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияВыбораВидовДокументов()
	
	СписокВыбораВидов = Элементы.ВходящиеДокументыДОВидДокумента.СписокВыбора;
	СписокВыбораВидов.Очистить();
	
	ДоступныеВиды = Новый Соответствие;
	
	ВидыДоступныеДляОтраженияПоЭДО = ОбменСКонтрагентамиДОСлужебный.ВидыДокументовДоступныеДляОтраженияВходящихЭДО();
	Для Каждого ДоступныйВидДокумента Из ВидыДоступныеДляОтраженияПоЭДО Цикл
		ДоступныеВиды.Вставить(ДоступныйВидДокумента, Истина);
		СписокВыбораВидов.Добавить(ДоступныйВидДокумента);
	КонецЦикла;
	
	ДоступныеВидыДокументов = Новый ФиксированноеСоответствие(ДоступныеВиды);
	
КонецПроцедуры

&НаСервере
Функция НастройкиОтраженияДОКорректны()
	
	// Проверяем заполненность настроек отражения документов по индексу картинки.
	// Для начала обновим индекс, а потом получим итоговый по минимальному
	// 0 -- не заполнен вид документа
	// 1 -- есть ошибки
	// 2 -- возможны проблемы при создании
	// 3 -- все хорошо
	
	ЗаполнитьСтатусПроверокНастроекСозданияДокументов(ВходящиеДокументыДО);
	
	ИтоговыйИндекс = 4;
	
	Для каждого СтрокаНастроек Из ВходящиеДокументыДО Цикл
		
		Если Не СтрокаНастроек.Принимать Тогда
			Продолжить;
		КонецЕсли;
		
		ИтоговыйИндекс = Мин(ИтоговыйИндекс, СтрокаНастроек.ИндексКартинкиОтраженияВДО);
		
		Если СтрокаНастроек.ИндексКартинкиОтраженияВДО = 0 Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для вида документа ЭДО %1 не указан вид документа 1С:Документооборот.'"),
				СтрокаНастроек.ВидДокументаЭДО);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ,
				СтрШаблон("ВходящиеДокументыДО[%1].ВидДокумента",
					ВходящиеДокументыДО.Индекс(СтрокаНастроек)));
			
		ИначеЕсли СтрокаНастроек.ИндексКартинкиОтраженияВДО = 1 Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для вида документа ЭДО %1 есть ошибки в настройках отражения в 1С:Документооборот.'"),
				СтрокаНастроек.ВидДокументаЭДО);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ,
				СтрШаблон("ВходящиеДокументыДО[%1].НастройкиСозданияДокументов",
					ВходящиеДокументыДО.Индекс(СтрокаНастроек)));
			
		ИначеЕсли СтрокаНастроек.ИндексКартинкиОтраженияВДО = 2 Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для вида документа ЭДО %1 настройки отражения в 1С:Документооборот указаны не полностью.'"),
				СтрокаНастроек.ВидДокументаЭДО) +
				Символы.ПС +
				НСтр("ru = 'Внутренние документы могут не создаться или создаться с ошибками.'");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ,
				СтрШаблон("ВходящиеДокументыДО[%1].НастройкиСозданияДокументов",
					ВходящиеДокументыДО.Индекс(СтрокаНастроек)));
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИтоговыйИндекс < 2 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьПоПереходуНаНовуюВерсию()
	
	ТолькоПросмотр = Истина;
	Элементы.ГруппаМиграцияНаНовуюВерсию.Видимость = Истина;
	Элементы.ФормаУдалить.Доступность = Ложь;
	
	Элементы.НадписьМиграцияНаНовуюВерсию.Заголовок =
		НСтр("ru = 'Обмен с контрагентами по ЭДО выполняется и настраивается в новой версии программы. Настройки создания документов необходимо производить в новой версии программы.'");
	
КонецПроцедуры

#КонецОбласти


