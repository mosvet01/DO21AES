
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	Если Объект.Ссылка.Пустая() И Объект.Контролер = Неопределено Тогда 
		Объект.Контролер = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	ИспользоватьАвтоподстановки = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
			Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		КонецЕсли;
		
		Если Не ИспользоватьСхемуПроцесса И Не ЗначениеЗаполнено(Объект.ВариантМаршрутизации) Тогда
			Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
		КонецЕсли;
	КонецЕсли;
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Настройки старта
	СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	ЗаполнитьДатыЗавершенияЭтапов();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если Объект.Стартован Или Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ДатаОтсчетаДляРасчетаСроков = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(Объект);
	КонецЕсли;
	
	Элементы.СрокИсполненияЭтапаПредставление.Ширина =
		СрокиИсполненияПроцессовКОРП.ШиринаПоляСрокИсполненияДействияКомплексногоПроцесса(ЭтаФорма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'");
			
		Элементы.СрокИсполненияЭтапаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияЭтапаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
			
		Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
		
	КонецЕсли;
	
	ОбновитьСрокиИсполненияНаСервере();
	ЗаполнитьСостояниПроцесса();
	УстановитьДоступность();
	
	Если Не ИспользоватьСхемуПроцесса Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(
			ЭтаФорма, 
			Объект.Ссылка.Пустая());
	КонецЕсли;
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Вычисления права на объект
	ПравоНаИзменениеБизнесПроцесса = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПравоНаИзменениеБизнесПроцесса = 
			ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение;
	КонецЕсли;
	
	// Настройка дерева задач и списка активных задач
	РаботаСБизнесПроцессамиВызовСервера.ДеревоПроцессовИЗадач_ПриСозданииНаСервере(ЭтаФорма, Объект.Ссылка, Не Объект.Ссылка.Пустая());
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
	// Видимость поля Контролер.
	Элементы.Контролер.Видимость = ПолучитьФункциональнуюОпциюФормы("ИспользоватьКонтрольОбъектов");
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Схема не поддерживается в МК, поэтому покажем картинку.
	Если ИспользоватьСхемуПроцесса Тогда
		КартинкаСхемы = ПолучитьКартинкуСхемы();
	КонецЕсли;
	
	// Скроем Порядок и Этапы если их нет.
	Элементы.ГруппаКартинкаСхемы.Видимость = ИспользоватьСхемуПроцесса;
	Элементы.ГруппаЭтапы.Видимость = Не ИспользоватьСхемуПроцесса;
	
	// Установим доступность картинки схемы если она есть.
	Если Не ЗначениеЗаполнено(Объект.Схема) Тогда
		
	КонецЕсли;
	
	// Добавим условное оформление по важности для таблицы этапов.
	УстановитьУсловноеОформлениеСписокЭтапов();
	
	// Общая адаптация для карточки процесса.
	// Выполним общие действия по адаптации.
	ПараметрыАдаптациии = МобильныйКлиентАдаптацияИнтерфейсаСервер.НовыеПараметрыАдаптацииФормыКарточкиПроцесса();
	
	// Вызовем общую адаптацию.
	ПараметрыАдаптациии.ЭлементНаименование = Элементы.Наименование;
	ПараметрыАдаптациии.ЭлементВажность = Элементы.Важность;
	ПараметрыАдаптациии.ЭлементОписание = Элементы.Описание_БезПредметов;
	ПараметрыАдаптациии.ЭлементГруппаИсполнители = Элементы.ГруппаЭтапы;
	ПараметрыАдаптациии.ЭлементИсполнители = Элементы.Этапы;
	ПараметрыАдаптациии.ЭлементГруппаСтраницы = Элементы.ГруппаСтраницы;
	ПараметрыАдаптациии.ЭлементСтраницаГлавное = Элементы.ГруппаГлавное;
	ПараметрыАдаптациии.ЭлементСтраницаДополнительно = Элементы.ГруппаДополнительно;
	ПараметрыАдаптациии.ЭлементСтраницаЗадачи = Элементы.ГруппаЗадачи;
	ПараметрыАдаптациии.ЭлементПредметы = Элементы.Предметы;
	ПараметрыАдаптациии.ЭлементАктивныеЗадачи = Элементы.СписокАктивныхЗадач;
	ПараметрыАдаптациии.ЭлементЗадачиИПроцессы = Элементы.ДеревоЗадач;
	ПараметрыАдаптациии.ЭлементЗадачиИПроцессыРезультатВыполнения = Элементы.ДеревоЗадачРезультатВыполнения;
	МобильныйКлиентАдаптацияИнтерфейсаСервер.АдаптироватьЭлементыФормыКарточкиПроцесса(ЭтотОбъект, ПараметрыАдаптациии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ИнициализироватьСхемуПроцесса(ЭтаФорма);
	//ПодключитьОбработчикОжидания("ВыбратьВариантРедактированияМаршрута", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" 
		И БизнесПроцессыИЗадачиКлиент.ЭтоОповещениеОПеренаправленииЗадачиЭтогоПроцесса(Источник, Объект.Ссылка) Тогда
		
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаВыполнена" 
		ИЛИ ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		
		ОбработатьЗавершениеЗадачи(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" 
		И Параметр.Предмет = Объект.Ссылка
		И Параметр.Свойство("Контролер") 
		И Параметр.Контролер <> Объект.Контролер Тогда 
		
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессамиВызовСервера.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);
	
	// Схема не поддерживается в МК, поэтому покажем картинку.
	Если ИспользоватьСхемуПроцесса Тогда
		КартинкаСхемы = ПолучитьКартинкуСхемы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаГлавное
		И РеквизитСИзмененнымСроком = "Схема" Тогда
		
		ОбновитьСрокиИсполненияОтложенно();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоПроцессовЗадач", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеОбработкаНавигационнойСсылки(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_ПроектЗадача

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Предметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПередНачаломИзменения(
		Элемент, Отказ, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСпискаЗадачДляОтображенияМКПриИзменении(Команда)
	
	ЕстьРеквизит =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидСпискаЗадачДляОтображенияМК");
	
	Если ЕстьРеквизит Тогда
		
		ПоказыватьТекущие = (ЭтотОбъект.ВидСпискаЗадачДляОтображенияМК = "ЗадачиВРаботе");
		Элементы.СписокАктивныхЗадач.Видимость = ПоказыватьТекущие;
		Элементы.ДеревоЗадач.Видимость = Не ПоказыватьТекущие;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандФормы_ДеревоПроцессовИЗадач

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоПроцессовЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуОбъекту(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПерейтиКТекущемуОбъекту(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступность()
	
	// Установить только просмотр.
	ЭтаФорма.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеЗадачи(Задача)
	
	Если Не ИспользоватьСхемуПроцесса Тогда
		СрокиЭтапов = СрокиИсполненияПроцессов.СрокиДействийПроцесса(Объект.Этапы, "ИдентификаторЭтапа");
	КонецЕсли;
	
	Прочитать();
	
	Если Не ИспользоватьСхемуПроцесса Тогда
		
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма, Ложь);
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиВТаблицеДействий(СрокиЭтапов, Объект.Этапы, "ИдентификаторЭтапа");
		
	КонецЕсли;
	
	ЗаполнитьДатыЗавершенияЭтапов();
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниПроцесса()
	
	// Заполнение группы ГруппаСостояниеПроцесса
	Элементы.ДекорацияСостояния.Видимость = Ложь;
	Элементы.ДекорацияОписание.Гиперссылка = Ложь;
	Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.ГруппаСостояниеПроцесса.Видимость = Ложь;
	
	Если Не ЭтоНовый И Объект.Завершен Тогда
		Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Элементы.ДекорацияСостояния.Видимость = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	РезультатыВыполненияПроцессовИЗадач.Результат
			|ИЗ
			|	РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|ГДЕ
			|	РезультатыВыполненияПроцессовИЗадач.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Положительный;
				
			Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата();
			Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли Выборка.Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Отрицательный;
			Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата();
			Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		ИначеЕсли Выборка.Результат = Перечисления.
			ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
			Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_ПоложительныйСЗамечаниями;
				
			Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата();
			Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
			
			ПредставлениеРезультата = НСтр("ru = 'Завершен %1'");
				
			ПредставлениеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРезультата, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
			
			Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата;
			
		КонецЕсли;
	ИначеЕсли Не ЭтоНовый И Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Элементы.ДекорацияСостояния.Видимость = Истина;
		Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
		
		Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Остановлен'");
	ИначеЕсли Не ЭтоНовый И Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Элементы.ДекорацияСостояния.Видимость = Истина;
		Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПрерванПроцесс;
		
		РаботаСБизнесПроцессамиВызовСервера.ОтобразитьНаФормеПричинуПрерывания(ЭтаФорма);
		Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;
		Элементы.ДекорацияОписание.Гиперссылка = Истина;
	ИначеЕсли Не ЭтоНовый И Объект.Стартован Тогда
		Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		
		Элементы.ДекорацияСостояния.Видимость = Истина;
		Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		
		Элементы.ДекорацияОписание.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется с %1'"), Формат(Объект.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"));
		
	ИначеЕсли ЗначениеЗаполнено(НастройкаСтарта)
		И ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
		
		Если Не ЗначениеЗаполнено(НастройкаСтарта.Состояние) Тогда
			
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЧасыПроцессОтложен;
			
			ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
			ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд ММММ гггг, ЧЧ:мм'", "ДФ='дд ММММ гггг'");
			
			ТекстыДекорации = Новый Массив;
			
			ТекстДатаОтсчета = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Дата старта: '"),, ЦветаСтиля.ИнформационнаяНадпись);
			ТекстыДекорации.Добавить(ТекстДатаОтсчета);
			
			СсылкаНаДатуОтложенногоСтарта = Новый ФорматированнаяСтрока(
				Формат(НастройкаСтарта.ДатаОтложенногоСтарта, ФорматДаты),,
				ЦветаСтиля.ИнформационнаяНадпись,,
				"ВыбратьДатуОтложенногоСтарта");
			ТекстыДекорации.Добавить(СсылкаНаДатуОтложенногоСтарта);
			
			ТекстыДекорации.Добавить("  ");
			
			КартинкаУдаленияНастройки = Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.УдалитьНастройкуОтложенногоСтарта,,,, "ОчиститьДатуОтложенногоСтарта");
			ТекстыДекорации.Добавить(КартинкаУдаленияНастройки);
			
			Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(ТекстыДекорации);
			
		ИначеЕсли НастройкаСтарта.Состояние =
			Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту Тогда
			
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЧасыПроцессОтложен;
			
			ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
			ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд ММММ гггг, ЧЧ:мм'", "ДФ='дд ММММ гггг'");
			
			ТекстыДекорации = Новый Массив;
			
			ТекстСтартОтложенДо = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Старт отложен до '"),, ЦветаСтиля.ИнформационнаяНадпись);
			ТекстыДекорации.Добавить(ТекстСтартОтложенДо);
			
			ПредставлениеДатыОтложенногоСтарта = Новый ФорматированнаяСтрока(
				Формат(НастройкаСтарта.ДатаОтложенногоСтарта, ФорматДаты),,
				ЦветаСтиля.ИнформационнаяНадпись,,);
			ТекстыДекорации.Добавить(ПредставлениеДатыОтложенногоСтарта);
			
			ТекстыДекорации.Добавить("  ");
			
			КартинкаУдаленияНастройки = Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.УдалитьНастройкуОтложенногоСтарта,,,, "УдалитьНастройкуОтложенногоСтарта");
			ТекстыДекорации.Добавить(КартинкаУдаленияНастройки);
			
			Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(ТекстыДекорации);
			
		ИначеЕсли НастройкаСтарта.Состояние = 
			Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен Тогда
			
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			Элементы.ДекорацияСостояния.Картинка =
				БиблиотекаКартинок.ЧасыСВосклицательнымЗнакомПроцессОтложен;
			
			Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(
				НастройкаСтарта.ПричинаОтменыСтарта,,
				ЦветаСтиля.ПоясняющийОшибкуТекст,,
				"ОткрытьОписаниеОшибкиОтложенногоСтарта");
			
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НастройкаСтарта)
		И ЗначениеЗаполнено(НастройкаСтарта.Состояние)
		И Не ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
		
		Если НастройкаСтарта.Состояние =
			Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту Тогда
			
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияОписание.Заголовок = 
				НСтр("ru = 'Процесс находится в очереди для запуска. Его старт произойдет автоматически в ближайшее время.'");
			Элементы.ДекорацияОписание.Гиперссылка = Ложь;
			
		ИначеЕсли НастройкаСтарта.Состояние = 
			Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен Тогда
			
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияОписание.Заголовок =
				НастройкаСтарта.ПричинаОтменыСтарта;
			Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Элементы.ДекорацияОписание.Гиперссылка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Не ЭтоНовый Тогда
		Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
		Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Не стартован'");
		Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Контролер", Истина);
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеРезультата() Экспорт
	
	ПредставлениеРезультата = НСтр("ru = 'Завершен %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПредставлениеРезультата, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
	
КонецФункции

&НаСервере
Функция ПолучитьКартинкуСхемы()
	
	Если ЗначениеЗаполнено(Объект.Схема) Тогда
		ПеремСхемаКомплексногоПроцесса = Объект.Схема.ПолучитьОбъект();
		ПеремСхема = ПеремСхемаКомплексногоПроцесса.Схема.Получить();
		ПеремКартинкаСхемы = ПеремСхема.ПолучитьКартинку();
		ПеремАдресКартинки = ПоместитьВоВременноеХранилище(ПеремКартинкаСхемы,УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ПеремАдресКартинки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Этапы

&НаСервере
Процедура УстановитьУсловноеОформлениеСписокЭтапов()
	
	// Добавим условное оформление цвет по важности.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 1;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЭтапыЗадачаЭтапа");
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ЦветВысокойВажности.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 2;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЭтапыЗадачаЭтапа");
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ЦветНизкойВажности.Значение; 
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Предметы

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	Если ВестиУчетПоПроектам
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначенияДокументооборот.
					ЗначениеРеквизитаОбъектаВПривилегированномРежиме(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДеревоПроцессовИЗадач

// Обновляет и разворачивает дерево процессов и задач.
//
&НаКлиенте
Процедура ОбновитьДеревоПроцессовЗадач() Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачи Тогда
		ЗаполнитьДеревоПроцессовИЗадач();
		РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоПроцессовИЗадач(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево процессов и задач.
//
&НаСервере
Процедура ЗаполнитьДеревоПроцессовИЗадач() Экспорт
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПроцессыИЗадачиПоПредмету(ЭтаФорма, Объект.Ссылка);
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
КонецПроцедуры

// Находит текущую списка СписокАктивныхЗадач в дереве задач.
//
&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	РассчитатьОтносительныйСрок = РассчитыватьОтносительныйСрок(ЭтаФорма);
	РассчитьтатьТочныйСрок = Ложь;
	
	Если Не Объект.Стартован
		И Не Объект.ПометкаУдаления
		И ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
		
	ИначеЕсли Объект.Стартован
		И Не Объект.ПометкаУдаления
		И Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен
		И ЗначениеЗаполнено(РеквизитСИзмененнымСроком) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
	КонецЕсли;
	
	Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
	
	Если РассчитатьОтносительныйСрок Тогда
		
		Если ИспользоватьСхемуПроцесса Тогда
			
			СрокиИсполненияПроцессовКлиентСерверКОРП.
				ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
					СхемаКомплексногоПроцесса.ПараметрыДействий,
					СхемаКомплексногоПроцесса.ЭлементыСхемы,
					КэшДанныхДействий);
				
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				СхемаКомплексногоПроцесса, Смещение);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				Объект, Смещение);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДлительностьИсполнения);
		
	КонецЕсли;
	
	Если РассчитьтатьТочныйСрок Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		ПараметрыДляРасчетаСроков.Смещение = Смещение;
		
		Если ИспользоватьСхемуПроцесса Тогда
			СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцессаВКарточке(
				Объект, СхемаКомплексногоПроцесса, ПараметрыДляРасчетаСроков,, ПроцессыСхемыДляПрерывания);
		Иначе
			СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцессаВКарточке(
				Объект,, ПараметрыДляРасчетаСроков, ИдентификаторыИзмененныхДействий.ВыгрузитьЗначения());
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РассчитатьОтносительныйСрок И Не РассчитьтатьТочныйСрок Тогда
		Если ИспользоватьСхемуПроцесса Тогда
			СрокиИсполненияПроцессовКлиентСерверКОРП.
				ЗаполнитьСрокиВПараметрахДействийСхемыКомплексногоПроцесса(
					СхемаКомплексногоПроцесса.ПараметрыДействий,
					СхемаКомплексногоПроцесса.ЭлементыСхемы,
					КэшДанныхДействий);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитСИзмененнымСроком = "";
	ИдентификаторыИзмененныхДействий.Очистить();
	
	СрокиИсполненияПроцессовКлиентСерверКОРП.
		ЗаполнитьПредставлениеСроковИсполненияВФормеКомплексногоПроцесса(ЭтаФорма);
	
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно()
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаКлиенте
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	ОбновитьФормуПослеПереносаСроковИсполненияНаСервере();
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий на сервере.
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполненияНаСервере() Экспорт
	
	Прочитать();
	Если Не ИспользоватьСхемуПроцесса Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	КонецЕсли;
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Возвращает необходимость расчета относительного срока.
//
// Параметры:
//  ФормаКлиентскогоПриложения - текущая форма.
//
&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьОтносительныйСрок(Форма)
	
	Если Не Форма.Объект.Стартован
		И Не Форма.Объект.ПометкаУдаления
		И ЗначениеЗаполнено(Форма.Объект.Шаблон)
		И Не ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения действия истек (Этапы)'"),
		"Объект.Этапы.СрокИсполненияПроцессаИстек",
		"СрокИсполненияЭтапаПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	Если ИспользоватьСхемуПроцесса Тогда
		
		// Для схемы обновляем признак истекшего срока процесса.
		// Остальное выполняется при обновлении описания элементов в схеме.
		
		Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		
			СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
				Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
			
		Иначе
			СрокИсполненияПроцессаИстек = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			
			Для Каждого Этап Из Объект.Этапы Цикл
				
				Этап.СрокИсполненияПроцессаИстек = Ложь;
				
				Если Не ЗначениеЗаполнено(Этап.СрокИсполненияПроцесса) Тогда
					Продолжить;
				КонецЕсли;
				
				ДатаЗавершенияЭтапа = ТекущаяДатаСеанса;
				
				Отбор = Новый Структура;
				Отбор.Вставить("Действие", Этап.ЗапущенныйБизнесПроцесс);
				
				НайденныеДатыЗавершения = ДатыЗавершенияЭтапов.НайтиСтроки(Отбор);
				Если НайденныеДатыЗавершения.Количество() <> 0
					И ЗначениеЗаполнено(НайденныеДатыЗавершения[0].ДатаЗавершения) Тогда
					
					ДатаЗавершенияЭтапа = НайденныеДатыЗавершения[0].ДатаЗавершения;
				КонецЕсли;
				
				Если Этап.СрокИсполненияПроцесса < ДатаЗавершенияЭтапа Тогда
					Этап.СрокИсполненияПроцессаИстек = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
				Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
		Иначе
			Для Каждого Этап Из Объект.Этапы Цикл
				Этап.СрокИсполненияПроцессаИстек = Ложь;
			КонецЦикла;
			СрокИсполненияПроцессаИстек = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу дат завершения этапов (ДатыЗавершенияЭтапов).
//
&НаСервере
Процедура ЗаполнитьДатыЗавершенияЭтапов()
	
	Если ИспользоватьСхемуПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыЗавершенияЭтапов.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДействияИДатыЗавершения = 
		СрокиИсполненияПроцессовКОРП.ДатыЗавершенияДействийКомплексногоПроцесса(Объект.Ссылка);
	
	Для Каждого ДействиеИДатаЗавершения Из ДействияИДатыЗавершения Цикл
		СтрокаТаблицы = ДатыЗавершенияЭтапов.Добавить();
		СтрокаТаблицы.Действие = ДействиеИДатаЗавершения.Ключ;
		СтрокаТаблицы.ДатаЗавершения = ДействиеИДатаЗавершения.Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
