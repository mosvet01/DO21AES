&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиВызовСервера.ФормаЗадачиПриСозданииНаСервере(ЭтаФорма, Объект);
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьУсловноеОФормлениеПодзадачи(ЭтаФорма, Объект);
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПодзадачи(ЭтаФорма, Объект);
	
	// сведения о резолюции	
	Резолюция = Объект.БизнесПроцесс.Резолюция;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
	|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";	
	Запрос.УстановитьПараметр("БизнесПроцесс", 	Объект.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Рассмотрел = Выборка.Исполнитель;
		ДатаРассмотрения = Выборка.ДатаИсполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Рассмотрел) Тогда
		Элементы.РезолюцияЗаголовок.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Резолюция (%1, %2):'"),
			Строка(Рассмотрел),
			Формат(ДатаРассмотрения, "ДЛФ=D"));
	Иначе
		Элементы.РезолюцияЗаголовок.Заголовок = НСтр("ru = 'Резолюция:'");
	КонецЕсли;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
	БизнесПроцессыИЗадачиВызовСервера.ЗаписатьСобытиеОткрытаКарточкаИОбращениеКОбъекту(Объект.Ссылка);
	
	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
	Если Не ПраваПоОбъекту.Изменение Тогда
		ТолькоПросмотр = Истина;
		Элементы.Обработано.Доступность = Ложь;
		
		Элементы.ДеревоПриложений.ИзменятьПорядокСтрок = Ложь;
		Элементы.ДеревоПриложений.ИзменятьСоставСтрок = Ложь;
		
		Элементы.Перенаправить.Доступность = Ложь;
		Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
		Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
		Элементы.ГруппаКомандыВыполнения.Доступность = Ложь;
		Элементы.ИзменитьДатуВыполнения.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
		Или Объект.Выполнена Тогда
		
		Элементы.ДеревоПриложений.ИзменятьПорядокСтрок = Ложь;
		Элементы.ДеревоПриложений.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
	ВариантОбработкиРезолюцииНеНаправлять = Перечисления.ВариантыОбработкиРезолюции.НеНаправлять;
	ВариантОбработкиРезолюцииНаправитьНаИсполнение = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
	ВариантОбработкиРезолюцииНаправитьНаОзнакомление = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление;
	
	ВедущийБизнесПроцесс = Объект.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс;
	Если ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		Или ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") Тогда
		Элементы.Обработано.Доступность = Ложь;
	КонецЕсли;
	
	// Заполнение настроек процессов Исполнения и Ознакомления.
	СтрокаРеквизитовРассмотрения = 
		"ВариантОбработкиРезолюции, 
		|ШаблонИсполнения, ШаблонОзнакомления,
		|НаименованиеИсполнения, НаименованиеОзнакомления,
		|ОписаниеИсполнения, ОписаниеОзнакомления, ВажностьИсполнения, ВажностьОзнакомления,
		|ВариантИсполнения,
		|СрокИсполненияПроцессаИсполнения, СрокИсполненияПроцессаОзнакомления,
		|СрокОбработкиРезультатовИсполнения,
		|СрокОбработкиРезультатовДниИсполнения,
		|СрокОбработкиРезультатовЧасыИсполнения,
		|СрокОбработкиРезультатовМинутыИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		|КоличествоИтерацийИсполнения,
		|ТрудозатратыПланИсполнителяОзнакомления,
		|КонтролерИсполнения, 
		|ПроверяющийИсполнения, ТрудозатратыПланПроверяющего,
		|ИсполнителиИсполнения, ИсполнителиОзнакомления";
		
	РеквизитыРассмотрения =
		ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.БизнесПроцесс, СтрокаРеквизитовРассмотрения);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыРассмотрения,, "ИсполнителиИсполнения, ИсполнителиОзнакомления");
	ИсполнителиИсполнения.Загрузить(РеквизитыРассмотрения.ИсполнителиИсполнения.Выгрузить());
	ИсполнителиОзнакомления.Загрузить(РеквизитыРассмотрения.ИсполнителиОзнакомления.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ВажностьИсполнения) Тогда 
		ВажностьИсполнения = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВажностьОзнакомления) Тогда 
		ВажностьОзнакомления = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоИсполнителейИсполнения = ИсполнителиИсполнения.Количество();
	КоличествоИсполнителейОзнакомления = ИсполнителиОзнакомления.Количество();
	
	СрокИсполненияДляПодчиненныхПроцессов = Неопределено;
	Если КоличествоИсполнителейИсполнения = 0
		Или КоличествоИсполнителейОзнакомления = 0 Тогда
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыДокументов, Истина);
		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Если ЗначениеЗаполнено(Предмет.СрокИсполнения) Тогда 
				СрокИсполненияДляПодчиненныхПроцессов = КонецДня(Предмет.СрокИсполнения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияДляПодчиненныхПроцессов) Тогда
		Если КоличествоИсполнителейИсполнения = 0 Тогда
			
			ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
			
			СтрИсполнитель = ИсполнителиИсполнения.Добавить();
			СтрИсполнитель.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			СтрИсполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
			
			СтрИсполнитель.СрокИсполнения = СрокИсполненияДляПодчиненныхПроцессов;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		КонецЕсли;
		Если КоличествоИсполнителейОзнакомления = 0 Тогда
			
			СтрИсполнитель = ИсполнителиОзнакомления.Добавить();
			СтрИсполнитель.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			СтрИсполнитель.СрокИсполнения = СрокИсполненияДляПодчиненныхПроцессов;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		КонецЕсли;
		
		КоличествоИтерацийИсполнения = 1;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатратПроцессаИсполнения.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	Элементы.ОписаниеТрудозатратПроцессаОзнакомления.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
	
	Если ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНеНаправлять Тогда 
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаСведенияОЗадаче;
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Рассмотрение;
		
	ИначеЕсли ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаИсполнение Тогда 
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаНаИсполнение;
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Исполнение;
		
		Если Не ЗначениеЗаполнено(НаименованиеИсполнения) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда 
				НаименованиеИсполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнить %1'"),
					ПредметыСтрокой);
			Иначе	
				НаименованиеИсполнения = НСтр("ru = 'Исполнить'") + " ";
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаОзнакомление Тогда 
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаОзнакомление;
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Ознакомление;
		
		Если Не ЗначениеЗаполнено(НаименованиеОзнакомления) Тогда 
			УстановитьПривилегированныйРежим(Истина);
			ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда 
				НаименованиеОзнакомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ознакомиться %1'"),
					ПредметыСтрокой);
			Иначе	
				НаименованиеОзнакомления = НСтр("ru = 'Ознакомиться'") + " ";
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантИсполнения) Тогда
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КонецЕсли;
	ПредыдущийВариантИсполнения = ВариантИсполнения;
	
	// Сроки исполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	ВозможенВыборТочнойДатыВСроках = Истина;
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	ПодсказкаВвода = СрокиИсполненияПроцессов.ПодсказкаВводаПоляСрокИсполнения(ЭтаФорма);
	Элементы.ИсполнителиСрокИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
	Элементы.СрокОбработкиРезультатовИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
	Элементы.ИсполнителиОзнакомленияСрокИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
	
	ШиринаПоляСрокИсполнения = СрокиИсполненияПроцессов.ШиринаПоляСрокИсполнения(ЭтаФорма);
	Элементы.ИсполнителиСрокИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
	Элементы.СрокОбработкиРезультатовИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
	Элементы.ИсполнителиОзнакомленияСрокИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
	
	ОбновитьСрокиИсполненияНаСервере(Истина);
	
	// Установка доступности
	УстановитьДоступностьПоШаблонуИсполнения();
	УстановитьДоступностьПоШаблонуОзнакомления();
	УстановитьДоступность();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьЭлементыФормыДляМобильногоУстройства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРеквизитыНевыполненныхЗадач" И Параметр = Объект.БизнесПроцесс И Не Объект.Выполнена Тогда 
		
		ДатаИсполнения = Объект.ДатаИсполнения;
		Прочитать();
		Объект.ДатаИсполнения = ДатаИсполнения;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "ФайлЗанятДляРедактирования" Тогда
		
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		
		МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(
			Объект.Ссылка, Объект.БизнесПроцесс, Параметр.Файл, УникальныйИдентификатор);
		
		Прочитать();
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И Источник <> ЭтаФорма
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		РаботаСФлагамиОбъектовКлиентСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ПерейтиКГруппеНаИсполнение" Тогда
		
		ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаИсполнение;
		
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаНаИсполнение;
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Исполнение;
		
		Если Не ЗначениеЗаполнено(НаименованиеИсполнения) Тогда 
			НаименованиеИсполнения = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Исполнить'"), Объект.Предметы); 
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПерейтиКГруппеОзнакомление" Тогда
		
		ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаОзнакомление;
		
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаОзнакомление;
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Ознакомление;
		
		Если Не ЗначениеЗаполнено(НаименованиеОзнакомления) Тогда 
			НаименованиеОзнакомления = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Ознакомиться'"), Объект.Предметы); 
		КонецЕсли;
			
	ИначеЕсли ИмяСобытия = "СозданНовыйВопросВыполненияЗадачи" И Параметр = Объект.Ссылка Тогда
		
		БизнесПроцессыИЗадачиКлиентСервер.ЗаполнитьЗаголовокКомандыЗадатьВопрос(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма Тогда
		
		ПрочитатьДанныеЗадачиВФорму = Ложь;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ПрочитатьДанныеЗадачиВФорму = Параметр.Найти(Объект.Ссылка) <> Неопределено;
		Иначе
			ПрочитатьДанныеЗадачиВФорму = (Параметр = Объект.Ссылка);
		КонецЕсли;
		
		Если ПрочитатьДанныеЗадачиВФорму Тогда
			Прочитать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" 
		И Источник.Получить(Объект.Ссылка) <> Неопределено Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
		
	ИначеЕсли (ИмяСобытия = "БизнесПроцессСтартован" Или ИмяСобытия = "ФоновыйСтартПроцесса") 
		И Параметр.Свойство("ГлавнаяЗадача") И Параметр.ГлавнаяЗадача = Объект.Ссылка Тогда
		
		ОбновитьПодзадачи();
		
	ИначеЕсли (ИмяСобытия = "ЗадачаВыполнена" 
		И РаботаСБизнесПроцессамиКлиент.ЗадачаЕстьВТаблицеЗадач(ЭтаФорма, Параметр)) Тогда
		
		ОбновитьПодзадачи();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Мультипредметность.ИзмененыПредметыЗадачи(Объект.Ссылка) Тогда
			ОбновитьДеревоПриложенийСервер();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(ЭтаФорма);
	
	Если Не Объект.Выполнена Тогда
		Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РаботаСФлагамиОбъектовСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ИсполнителиИсполнения, "Исполнитель");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ИсполнителиОзнакомления, "Исполнитель");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессами.ФормаЗадачиПередЗаписьюНаСервере(
		ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// сформируем дополнительные свойства для передачи данных объекту
	РеквизитыЗаполнения =
		"ВариантОбработкиРезолюции, 
		|ШаблонИсполнения, ШаблонОзнакомления,
		|НаименованиеИсполнения, НаименованиеОзнакомления,
		|ОписаниеИсполнения, ОписаниеОзнакомления, ВажностьИсполнения, ВажностьОзнакомления,
		|ВариантИсполнения,
		|СрокИсполненияПроцессаИсполнения, СрокИсполненияПроцессаОзнакомления,
		|СрокОбработкиРезультатовИсполнения,
		|СрокОбработкиРезультатовДниИсполнения,
		|СрокОбработкиРезультатовЧасыИсполнения,
		|СрокОбработкиРезультатовМинутыИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		|КоличествоИтерацийИсполнения,
		|ТрудозатратыПланИсполнителяОзнакомления,
		|КонтролерИсполнения,
		|ПроверяющийИсполнения, ТрудозатратыПланПроверяющего";
	ДанныеЗаполнения = Новый Структура(РеквизитыЗаполнения);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЭтаФорма);
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	
	ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.БизнесПроцесс);
	РассмотрениеОбъект = ТекущийОбъект.БизнесПроцесс.ПолучитьОбъект();
	
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача",Объект.Ссылка);
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения",ДанныеЗаполнения);
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ИсполнителиИсполнения",ИсполнителиИсполнения.Выгрузить());
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ИсполнителиОзнакомления",ИсполнителиОзнакомления.Выгрузить());
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(РассмотрениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыФоновогоВыполнения = Новый Структура;
	
	Если ПараметрыЗаписи.Свойство("ВыполнитьЗадачуФоново")
		И ПараметрыЗаписи.ВыполнитьЗадачуФоново Тогда
		
		ПараметрыФоновогоВыполнения.Вставить("ДанныеЗаполнения", ПараметрыЗаписи.ДанныеЗаполнения);
		ПараметрыФоновогоВыполнения.Вставить("ИсполнителиИсполнения", ИсполнителиИсполнения.Выгрузить());
		ПараметрыФоновогоВыполнения.Вставить("ИсполнителиОзнакомления", ИсполнителиОзнакомления.Выгрузить());
		
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ФормаЗадачиПриЗаписиНаСервере(
		ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, ПараметрыФоновогоВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессамиВызовСервера.ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(ЭтаФорма);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСФлагамиОбъектовСервер.СохранитьФлагОбъектаИзФормы(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьПредставлениеСроковИсполненияОзнакомления(ЭтаФорма);
	ОбновитьПризнакиИстекшихСроков();
	
	ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗадачаИзменена", Объект.Ссылка, ЭтаФорма);
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаСведенияОЗадаче Тогда 
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Рассмотрение;
		
		ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНеНаправлять;
		
	ИначеЕсли Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаНаИсполнение Тогда 
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Исполнение;
		
		Если Не ЗначениеЗаполнено(НаименованиеИсполнения) Тогда 
			НаименованиеИсполнения = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Исполнить'"), Объект.Предметы); 
		КонецЕсли;
		
		ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаИсполнение;
		
	ИначеЕсли Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаОзнакомление Тогда 
		Элементы.ГруппаКомандыВыполнения.ТекущаяСтраница = Элементы.Ознакомление;
		
		Если Не ЗначениеЗаполнено(НаименованиеОзнакомления) Тогда 
			НаименованиеОзнакомления = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Ознакомиться'"), Объект.Предметы); 
		КонецЕсли;
		
		ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаОзнакомление;
		
	КонецЕсли;
	
	ЗаполнитьПредставлениеСроковИсполненияОзнакомления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбзорЗадачКлиент.ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопрос(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ЗадатьВопрос(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИтерацийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.КоличествоИтерацийПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратПроцессаИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ВариантМаршрутизацииЗадач", ВариантИсполнения);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	Настройки.Вставить("ИмяРеквизитаОбъекта", "");
	Настройки.Вставить("ИмяТаблицыИсполнители", "ИсполнителиИсполнения");
	
	Для Каждого СтрИсполнитель ИЗ ИсполнителиИсполнения Цикл
		
		ТрудозатратыИсполнителя = РаботаСБизнесПроцессамиКлиент.
			СтруктураСтрокиТрудозатратУчастникаПроцесса(
				НСтр("ru = 'Исполнитель'"),
				"ТрудозатратыПланИсполнителя",
				СтрИсполнитель.ТрудозатратыПланИсполнителя,
				СтрИсполнитель.Исполнитель,
				СтрИсполнитель.Шаг,
				СтрИсполнитель.НомерСтроки);
		Настройки.Участники.Добавить(ТрудозатратыИсполнителя);
		
	КонецЦикла;
	
	ТрудозатратыКонтролера = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Контролер'"),
			"ТрудозатратыПланКонтролера",
			ТрудозатратыПланКонтролера,
			КонтролерИсполнения);
	Настройки.Участники.Добавить(ТрудозатратыКонтролера);
	
	ТрудозатратыПроверяющего = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Проверяющий'"),
			"ТрудозатратыПланПроверяющего",
			ТрудозатратыПланПроверяющего,
			ПроверяющийИсполнения);
	Настройки.Участники.Добавить(ТрудозатратыПроверяющего);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратПроцессаОзнакомленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	Настройки.Вставить("ИмяРеквизитаОбъекта", "");
	
	ТрудозатратыИсполнителей = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Исполнители'"),
			"ТрудозатратыПланИсполнителяОзнакомления",
			ТрудозатратыПланИсполнителяОзнакомления);
	Настройки.Участники.Добавить(ТрудозатратыИсполнителей);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_ВариантИсполнения

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ВариантИсполненияПриИзмененииПроцессаИсполнения(
		ЭтаФорма, Элементы.ИсполнителиИсполнения,
		ВариантИсполнения, ПредыдущийВариантИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Проверяющий

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	ОбновитьСрокиИсполненияОтложенно("ПроверяющийИсполнения");

КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, ПроверяющийИсполнения, СтандартнаяОбработка, ЭтаФорма, "ПроверяющийИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СрокОбработкиРезультатовПредставление

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтаФорма;
	ДопПараметры.Поле = "СрокОбработкиРезультатовИсполненияПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокОбработкиРезультатов";
	ДопПараметры.Исполнитель = ПроверяющийИсполнения;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		СрокОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовИсполненияПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтаФорма;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокОбработкиРезультатовИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокОбработкиРезультатовДниИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокОбработкиРезультатовЧасыИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокОбработкиРезультатовМинутыИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаОбработкиРезультатовИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокОбработкиРезультатовИсполненияПредставление";
	ПараметрыВыбораСрока.СрокиПредшественников = ИсполнителиИсполнения;
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.Участник = ПроверяющийИсполнения;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтаФорма,
		СрокОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		СрокОбработкиРезультатовИсполненияПредставление,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		Направление,
		"СрокОбработкиРезультатов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	ОбновитьСрокиИсполненияОтложенно("КонтролерИсполнения");

КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, КонтролерИсполнения, СтандартнаяОбработка, ЭтаФорма, "КонтролерИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ДеревоПриложений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ПараметрыОбработчикаОповещения = Новый Структура();
		ПараметрыОбработчикаОповещения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДеревоПриложенийВыборПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчикаОповещения);         
			
		Если Не МультипредметностьКлиент.ДобавитьПредметЗадачи(ЭтаФорма, СообщениеОбОшибке, 
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка, СтандартнаяОбработка, ОписаниеОповещения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,, "ДеревоПриложений");
			Возврат;
		КонецЕсли;
	Иначе
		РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
			ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийВыборПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоПриложений();
		УстановитьПредметСервер();	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтаФорма.ТолькоПросмотр Или Элементы.ДеревоПриложений.ТолькоПросмотр Или Объект.Выполнена Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.БизнесПроцесс;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Предмет", НСтр("ru = 'Предмет'"));
	СписокВыбора.Добавить("Файл", НСтр("ru = 'Файл'"));
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДеревоПриложенийПередНачаломДобавления_Завершение", ЭтаФорма);
	
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломДобавления_Завершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = Неопределено;
	
	Если РезультатВыбора.Значение = "Файл" Тогда
		Предмет = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");
	КонецЕсли;
	
	ДеревоПриложенийДобавлениеНаКлиенте(Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ДеревоПриложенийУдалениеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИсполнителиИсполнения

&НаКлиенте
Процедура ИсполнителиИсполненияПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиИсполненияПриАктивизацииСтроки(
		ЭтаФорма, Элементы.ИсполнителиИсполнения,
		Элементы.ИсполнителиСрокИсполненияПредставление, ИсполнителиИсполнения,
		ДоступностьПоШаблонуИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтаФорма, НоваяСтрока,
		Элементы.ИсполнителиИсполнения,
		ИсполнителиИсполнения,
		ВариантИсполнения,
		"ПорядокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтаФорма, НоваяСтрока, ОтменаРедактирования, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиИсполненияПослеУдаления(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительИсполненияНачалоВыбора(
		ЭтаФорма, СтандартнаяОбработка, Элементы.ИсполнителиИсполнения,
		ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		ЭтаФорма, ВыбранноеЗначение, Элементы.ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ПорядокИсполнения

&НаКлиенте
Процедура ПорядокИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ПорядокИсполненияПриИзмененииТаблицыИсполнители(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, Направление, ВариантИсполнения);
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "НаименованиеИсполнение",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "ОписаниеИсполнение",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИсполнениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИсполнениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		НаименованиеИсполнения = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Область = ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеОписание");
	ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона описания'");
	ИмяОбработчика = "ИсполнителиОписаниеНачалоВыбораПродолжение";
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок", 
		Область,
		ЗаголовокФормыВыбора);
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтаФорма);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		ИмяОбработчика,
		ЭтотОбъект,
		ДопПараметры);
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Элементы.ИсполнителиИсполнения.ТекущиеДанные.Описание = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
	КонецЕсли;	
		
КонецПроцедуры	

// Шаблоны текста для наименования и описания

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИсполнителиОзнакомления

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриАктивизацииСтроки(
		ЭтаФорма,
		Элементы.ИсполнителиОзнакомления,
		Элементы.ИсполнителиОзнакомленияСрокИсполненияПредставление,
		ДоступностьПоШаблонуОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтаФорма, НоваяСтрока,
		Элементы.ИсполнителиОзнакомления,
		ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтаФорма, НоваяСтрока, ОтменаРедактирования, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПослеУдаления(ЭтаФорма, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// ИсполнительОзнакомления

&НаКлиенте
Процедура ИсполнительОзнакомленияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтаФорма, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительНачалоВыбора(
		ЭтаФорма, СтандартнаяОбработка,
		Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		ЭтаФорма, ВыбранноеЗначение, Элементы.ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ИсполнителиОзнакомленияСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиОзнакомленияСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтаФорма, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтаФорма, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтаФорма, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления, Направление);
		
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "НаименованиеОзнакомления",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "ОписаниеОзнакомления",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОзнакомленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОзнакомленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		НаименованиеОзнакомления = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры
// Шаблоны текста для наименования и описания

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ОчиститьСообщения();
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить(Команда)
	
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.Перенаправить(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачуКИсполнению(ЭтаФорма, ТекущийПользователь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ПоказатьЗначение(, Объект.БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуВыполнения(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ИзменитьДатуВыполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	Если Объект.Выполнена Тогда
		ДатаОтчета = Объект.ДатаИсполнения;
	КонецЕсли;	
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Объект.Выполнена,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

// Процесс Исполнения

&НаКлиенте
Процедура ЗаполнитьПоШаблонуИсполнение(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	ШаблоныИсполнения = Новый СписокЗначений;
	ШаблоныИсполнения.ЗагрузитьЗначения(
		ШаблоныБизнесПроцессов.ШаблоныПоОбъектам(Предметы, Тип("СправочникСсылка.ШаблоныИсполнения")));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуИсполнениеПродолжение",
		ЭтотОбъект);
		
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныИсполнения", ШаблоныИсполнения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуИсполнениеПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьИсполнениеПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;	
	КонецЕсли;
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	
КонецПроцедуры

// Процесс Ознакомление

&НаКлиенте
Процедура ЗаполнитьПоШаблонуОзнакомление(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	ШаблоныОзнакомления = Новый СписокЗначений;
	ШаблоныОзнакомления.ЗагрузитьЗначения(
		ШаблоныБизнесПроцессов.ШаблоныПоОбъектам(Предметы, Тип("СправочникСсылка.ШаблоныОзнакомления")));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуОзнакомлениеПродолжение",
		ЭтотОбъект);
		
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныОзнакомления", ШаблоныОзнакомления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуОзнакомлениеПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьОзнакомлениеПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Команды выполнения задачи

&НаКлиенте
Процедура Обработано(Команда)
	
	ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНеНаправлять;
	ОбработатьВыполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура Ознакомить(Команда)
	
	ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаОзнакомление;
	ОбработатьВыполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура Исполнить(Команда)
	
	ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаИсполнение;
	ОбработатьВыполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ИсполнителиИсполнения

&НаКлиенте
Процедура ПодобратьИсполнителейИсполнения(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителейИсполнения(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьИсполнителяПроцессаИсполнения(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьИсполнителяПроцессаИсполнения(
		ЭтаФорма, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
		ЭтаФорма,
		Элементы.ИсполнителиИсполнения,
		ИсполнителиИсполнения,
		ВариантИсполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ИсполнителиОзнакомления

&НаКлиенте
Процедура ПодобратьИсполнителейОзнакомления(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителей(
		ЭтаФорма, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_РаботаСФлагами

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		БиблиотекаКартинок.КрасныйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		БиблиотекаКартинок.СинийФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		БиблиотекаКартинок.ЖелтыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		БиблиотекаКартинок.ЗеленыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		БиблиотекаКартинок.ОранжевыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		БиблиотекаКартинок.ЛиловыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка"),
		БиблиотекаКартинок.ПустойФлаг);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ДеревоПриложений

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	ДеревоПриложенийДобавлениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ДеревоПриложенийДобавлениеНаКлиенте(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ДеревоПриложенийУдалениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляПросмотра(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура Редактировать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.РедактироватьТекущийФайл(
		ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеТекущегоФайла(
		ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	РаботаСБизнесПроцессамиКлиент.СохранитьТекущийФайл(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаОбновитьДеревоПриложений(Команда)
	
	ОбновитьДеревоПриложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленныеПриложения(Команда)
	
	ОтображатьУдаленныеПриложения = Не ОтображатьУдаленныеПриложения;
	Элементы.ДеревоПриложенийКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленныеПриложения;
	
	ТекущаяСсылкаВДереве = Неопределено;
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСсылкаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
	КонецЕсли;	
	
	ОтображатьУдаленныеПриложенияСервер();
	
	Если ТекущаяСсылкаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСсылкаВДереве);
	КонецЕсли;	
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Подзадачи

&НаКлиенте
Процедура ПодзадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодзадачиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСБизнесПроцессамиКлиент.ОткрытьПодзадачу(ЭтаФорма, Элемент, ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступность() Экспорт
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;	

	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблонуИсполнения()
		
	СтруктураПредметов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс,"Предметы, ПредметыЗадач");
		
	СтруктураДоступности = Новый Структура("Шаблон, Ссылка, ВедущаяЗадача, Предметы, ПредметыЗадач", 
		ШаблонИсполнения, 
		Объект.БизнесПроцесс, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "ВедущаяЗадача"),
		СтруктураПредметов.Предметы.Выгрузить(),
		СтруктураПредметов.ПредметыЗадач.Выгрузить());
		
	ДоступностьПоШаблонуИсполнения = Истина;
	
	Если Не ЗначениеЗаполнено(СтруктураДоступности.Шаблон) Тогда
		Возврат;
	КонецЕсли;
		
	ДоступностьПоШаблонуИсполнения = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(СтруктураДоступности);
	
	Если ЗначениеЗаполнено(КонтролерИсполнения) Тогда 
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда 
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВажностьИсполнения) Тогда 
		Элементы.ВажностьИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.ВажностьИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() > 0 Тогда
		Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
		Элементы.ПодобратьИсполнение.Доступность = ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Ложь;
		Элементы.ПодобратьИсполнение.Доступность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
	ПараметрыДоступности = 
		СрокиИсполненияПроцессовКлиентСервер.ПараметрыДоступностиЭлементаУправления();
	ПараметрыДоступности.ДоступностьПоШаблону = ДоступностьПоШаблонуИсполнения;
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.СрокОбработкиРезультатовИсполненияПредставление,
		СрокОбработкиРезультатовИсполненияПредставление,
		ПараметрыДоступности);
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.КоличествоИтерацийИсполнения,
		КоличествоИтерацийИсполнения,
		ПараметрыДоступности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнениеПоШаблонуНаСервере(Шаблон)
	
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Дата = ТекущаяДатаСеанса();
	ИсполнениеОбъект.Автор = Рассмотрел;
	
	Мультипредметность.ПередатьПредметыПроцессу(ИсполнениеОбъект, Объект.Предметы);
	
	ИсполнениеОбъект.ЗаполнитьПоШаблону(Шаблон);
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Наименование) Тогда 
		НаименованиеИсполнения = ИсполнениеОбъект.Наименование;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Описание) Тогда 
		ОписаниеИсполнения = ИсполнениеОбъект.Описание;
	КонецЕсли;	
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ИсполнениеОбъект.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения = 
			ИсполнениеОбъект.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДниИсполнения = ИсполнениеОбъект.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасыИсполнения = ИсполнениеОбъект.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинутыИсполнения = ИсполнениеОбъект.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ИсполнениеОбъект.КоличествоИтераций) Тогда
		КоличествоИтерацийИсполнения = ИсполнениеОбъект.КоличествоИтераций;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Важность) Тогда 
		ВажностьИсполнения = ИсполнениеОбъект.Важность;
	КонецЕсли;
	
	КонтролерИсполнения = ИсполнениеОбъект.Контролер;
	
	ПроверяющийИсполнения = ИсполнениеОбъект.Проверяющий;
	
	ИсполнителиИсполнения.Загрузить(ИсполнениеОбъект.Исполнители.Выгрузить());
	ШаблонИсполнения = Шаблон;
	
	ВариантИсполнения = ИсполнениеОбъект.ВариантИсполнения;
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	УстановитьДоступностьПоШаблонуИсполнения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблонуОзнакомления()
	
	СтруктураПредметов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс,"Предметы, ПредметыЗадач");
		
	СтруктураДоступности = Новый Структура("Шаблон, Ссылка, ВедущаяЗадача, Предметы, ПредметыЗадач", 
		ШаблонОзнакомления, 
		Объект.БизнесПроцесс, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "ВедущаяЗадача"),
		СтруктураПредметов.Предметы.Выгрузить(),
		СтруктураПредметов.ПредметыЗадач.Выгрузить());
		
	ДоступностьПоШаблонуОзнакомления = Истина;
	
	Если Не ЗначениеЗаполнено(СтруктураДоступности.Шаблон) Тогда
		Возврат;
	КонецЕсли;
		
	ДоступностьПоШаблонуОзнакомления = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(СтруктураДоступности);
	
	Если ЗначениеЗаполнено(ВажностьОзнакомления) Тогда 
		Элементы.ВажностьОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблонуОзнакомления;
	Иначе
		Элементы.ВажностьОзнакомления.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИсполнителиОзнакомления.Количество() > 0 Тогда
		Элементы.ИсполнителиОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблонуОзнакомления;
		Элементы.ПодобратьИсполнителейОзнакомления.Доступность = ДоступностьПоШаблонуОзнакомления;
	Иначе
		Элементы.ИсполнителиОзнакомления.ТолькоПросмотр = Ложь;
		Элементы.ПодобратьИсполнителейОзнакомления.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОзнакомлениеПоШаблонуНаСервере(Шаблон)
	
	ОзнакомлениеОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	ОзнакомлениеОбъект.Дата = ТекущаяДатаСеанса();
	ОзнакомлениеОбъект.Автор = Рассмотрел;
	Мультипредметность.ПередатьПредметыПроцессу(ОзнакомлениеОбъект, Объект.Предметы);
	
	ОзнакомлениеОбъект.ЗаполнитьПоШаблону(Шаблон);
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Наименование) Тогда 
		НаименованиеОзнакомления = ОзнакомлениеОбъект.Наименование;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Описание) Тогда 
		ОписаниеОзнакомления = ОзнакомлениеОбъект.Описание;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Важность) Тогда 
		ВажностьОзнакомления = ОзнакомлениеОбъект.Важность;
	КонецЕсли;
	
	ИсполнителиОзнакомления.Загрузить(ОзнакомлениеОбъект.Исполнители.Выгрузить());
	ШаблонОзнакомления = Шаблон;
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	УстановитьДоступностьПоШаблонуОзнакомления();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	// Трудозатраты для процесса Исполнения
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Контролер", Истина);
	ПараметрыОписания.Вставить("Проверяющий", Истина);
	ПараметрыОписания.Вставить("Исполнители", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителей", НСтр("ru = 'Исполнители'"));
	
	ПараметрыОписания.Вставить("ИмяРеквизитаОбъекта", "");
	ПараметрыОписания.Вставить("ИмяТаблицыИсполнители", "ИсполнителиИсполнения");
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(
		Форма, ПараметрыОписания, "ОписаниеТрудозатратПроцессаИсполнения");
	
	// Трудозатраты для процесса Ознакомления
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Исполнитель", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителя", НСтр("ru = 'Исполнители (для каждого)'"));
	
	ПараметрыОписания.Вставить("ИмяРеквизитаОбъекта", "");
	ПараметрыОписания.Вставить("ИмяРеквизитаТрудозатратыПланИсполнителя",
		"ТрудозатратыПланИсполнителяОзнакомления");
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(
		Форма, ПараметрыОписания, "ОписаниеТрудозатратПроцессаОзнакомления");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнение()
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполненияИзФормы(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Подзадачи.Количество() <> 0 Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(Объект.Ссылка);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыполнениеПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				Объект.Ссылка, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОбработатьВыполнениеПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ОбработатьВыполнениеПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(Объект.Ссылка);
		ОбработатьВыполнениеПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьОбработкуВыполнения", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		Объект.Исполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры


&НаКлиенте
Процедура ПродолжитьОбработкуВыполнения(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> Объект.Исполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		ИсполнителиИсполнения, "Исполнитель");
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		ИсполнителиОзнакомления, "Исполнитель");
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьНомерСтрокиВТаблицеИсполнителей(
		ИсполнителиОзнакомления);
	
	Если ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаИсполнение Тогда 
		
		Если ПустаяСтрока(НаименованиеИсполнения) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
				"НаименованиеИсполнения",,Отказ);
		КонецЕсли;	
		
		Если ИсполнителиИсполнения.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
				"ИсполнителиИсполнения",,Отказ);
		КонецЕсли;	
		
		Для Каждого Строка Из ИсполнителиИсполнения Цикл
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
					ИсполнителиИсполнения.Индекс(Строка)+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,"ИсполнителиИсполнения["+ИсполнителиИсполнения.Индекс(Строка)+"].Исполнитель",,Отказ);
			КонецЕсли;	
		КонецЦикла;	
		
	ИначеЕсли ВариантОбработкиРезолюции = ВариантОбработкиРезолюцииНаправитьНаОзнакомление Тогда 
		
		Если ПустаяСтрока(НаименованиеОзнакомления) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
				"НаименованиеОзнакомления",,Отказ);
		КонецЕсли;
		
		Если ИсполнителиОзнакомления.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
				"ИсполнителиОзнакомления",,Отказ);
		КонецЕсли;
		
		Для Каждого Строка Из ИсполнителиОзнакомления Цикл
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
					ИсполнителиОзнакомления.Индекс(Строка)+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,"ИсполнителиОзнакомления["+ИсполнителиОзнакомления.Индекс(Строка)+"].Исполнитель",,Отказ);
			КонецЕсли;	
		КонецЦикла;	
		
		// Проверка исполнителей на дубли
		РаботаСБизнесПроцессамиКлиентСервер.ПроверитьНаДублиТаблицуИсполнителей(
			ИсполнителиОзнакомления, "ИсполнителиОзнакомления", Отказ, Ложь);
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка корректности заполнения сроков
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьПослеПроверкиКорректностиЗаполненияСроков",
		ЭтотОбъект);
	
	СтруктураСроков = СтруктураСроковДляПроверкиКорректностиЗаполнения();
	СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
		ЭтаФорма, СтруктураСроков, Новый Структура, Отказ, ОписаниеОповещения);
	
	Если Не Отказ Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеПроверкиКорректностиЗаполненияСроков(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеПроверкиНаЗанятыеФайлы",
		ЭтотОбъект);
		
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеПроверкиНаЗанятыеФайлы(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПослеПроверкиОтсутствия",
		ЭтотОбъект);
	Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоЗадачеОбработкиРезолюции(ЭтаФорма, ОписаниеОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеПроверкиОтсутствия(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполнениеЗадачКлиент.ВыполнитьЗадачуИзФормы(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеВводаВремени",
		ЭтотОбъект);
	
	УчетВремениКлиент.ДобавитьВОтчетПослеВыполненияЗадачи(ОпцияИспользоватьУчетВремени,
		Объект.ДатаИсполнения, Объект.Ссылка, ВключенХронометраж, 
		ДатаНачалаХронометража, ДатаКонцаХронометража,
		ВидыРабот, СпособУказанияВремени, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеВводаВремени(Результат, Параметры) Экспорт
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена", Объект.Ссылка);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 70, 100);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодзадачи()
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПодзадачи(ЭтаФорма, Объект);
	
КонецПроцедуры	
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура НастроитьЭлементыФормыДляМобильногоУстройства()
	
	// Настроим свойства и положение некоторых специфичных элементов.
	Элементы.ГруппаРеквизитыЗадачи.Видимость = Ложь;
	// Предметы показываем всегда, чтобы была возможность добавить новый.
	Элементы.ДеревоПриложений.Видимость = Истина;
	
	// Настроим резолюцию.
	Элементы.Резолюция.Высота = 2;
	
	// Настроим заголовоки для шаблонов.
	Элементы.ЗаполнитьПоШаблонуОзнакомление.Заголовок = НСтр("ru = 'Заполнить по шаблону'");
	Элементы.ЗаполнитьПоШаблонуИсполнение.Заголовок = Элементы.ЗаполнитьПоШаблонуОзнакомление.Заголовок;
	
	// Настроим заголовок для наименования и описания.
	Элементы.НаименованиеИсполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.НаименованиеИсполнения.ПодсказкаВвода = "";
	
	Элементы.НаименованиеОзнакомления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.НаименованиеОзнакомления.ПодсказкаВвода = "";
	
	Элементы.ОписаниеИсполнение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.ОписаниеИсполнение.ПодсказкаВвода = "";
	
	Элементы.ОписаниеОзнакомление.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.ОписаниеОзнакомление.ПодсказкаВвода = "";
	
	// Установим картинки у кнопок выполнения задачи.
	Элементы.Обработано.Картинка = БиблиотекаКартинок.ЗадачаУспешноеВыполнение;
	Элементы.Исполнить.Картинка = БиблиотекаКартинок.ЗадачаУспешноеВыполнение;
	Элементы.Ознакомить.Картинка = БиблиотекаКартинок.ЗадачаУспешноеВыполнение;
	
	// Уберем заголовки для страниц с командами.
	Элементы.Рассмотрение.Заголовок = "";
	Элементы.Исполнение.Заголовок = "";
	Элементы.Ознакомление.Заголовок = "";
	
	// Переместим некоторые элементы формы, для того чтобы было похоже на карточки процессов.
	// Выровняем некоторые элементы.
	ВыравниваниеЭлементаМК(Элементы.КонтролерИсполнения);
	ВыравниваниеЭлементаМК(Элементы.ПроверяющийИсполнения);
	ВыравниваниеЭлементаМК(Элементы.СрокОбработкиРезультатовИсполненияПредставление);
	ВыравниваниеЭлементаМК(Элементы.СрокИсполненияПроцессаОзнакомленияПредставление);
	ВыравниваниеЭлементаМК(Элементы.ВариантИсполнения);
	Элементы.СрокОбработкиРезультатовИсполненияПредставление.МногострочныйРежим = Истина;
	
	// Вертикальная группировка некоторых элементов.
	Элементы.КП_ИсполнителиИсполненияИВариантИсполнения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаКоличествоИтерацийСрокПроцесса.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Включим группы для отображения заголовков для таблицы Исполнителей.
	Элементы.ИсполнителиИсполненияМК.Видимость = Истина;
	Элементы.ИсполнителиИсполнения.Шапка = Ложь;
	Элементы.ИсполнителиИсполненияМК.ШрифтЗаголовка = Элементы.ГруппаКонтрольныйСрокПроцесса.ШрифтЗаголовка;
	Элементы.Переместить(Элементы.КП_ИсполнителиИсполнения, Элементы.ИсполнителиИсполненияМК);
	Элементы.Переместить(Элементы.ИсполнителиИсполнения, Элементы.ИсполнителиИсполненияМК);
	Элементы.Переместить(Элементы.ВариантИсполнения, Элементы.ИсполнителиИсполненияМК);
	
	Элементы.ИсполнителиОзнакомленияМК.Видимость = Истина;
	Элементы.ИсполнителиОзнакомления.Шапка = Ложь;
	Элементы.ИсполнителиОзнакомленияМК.ШрифтЗаголовка = Элементы.ГруппаКонтрольныйСрокПроцессаОзнакомления.ШрифтЗаголовка;
	Элементы.Переместить(Элементы.ИсполнителиОзнакомления, Элементы.ИсполнителиОзнакомленияМК);
	
	// Вверх/вниз и отв. исполнитель должны быть в контекстном меню.
	Элементы.Переместить(Элементы.ПереместитьВверх, Элементы.ИсполнителиИсполнения.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПереместитьВниз, Элементы.ИсполнителиИсполнения.КонтекстноеМеню);
	Элементы.Переместить(Элементы.НазначитьОтветственным, Элементы.ИсполнителиИсполнения.КонтекстноеМеню);

	// Настроим важность.
	Элементы.Переместить(Элементы.ВажностьИсполнения, Элементы.КП_ИсполнителиИсполненияИВариантИсполнения,Элементы.ИсполнителиИсполненияМК);
	ВыравниваниеЭлементаМК(Элементы.ВажностьИсполнения);
	Элементы.Переместить(Элементы.ВажностьОзнакомления, Элементы.ГруппаОзнакомление, Элементы.ИсполнителиОзнакомленияМК);
	ВыравниваниеЭлементаМК(Элементы.ВажностьОзнакомления);
	
	// Преобразуем страницы расширенной формы во всплывающие группы.
	//  Страница "Ввести резолюцию".
	Элементы.Переместить(Элементы.ГруппаСведенияОЗадаче, Элементы.ГруппаОбластьВыполнения);
	Элементы.ГруппаСведенияОЗадаче.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Элементы.ГруппаСведенияОЗадаче.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	Элементы.ГруппаСведенияОЗадаче.Заголовок = НСтр("ru='Ввести резолюцию'");
	//  Страница "На исполнение".
	Элементы.Переместить(Элементы.ГруппаНаИсполнение, Элементы.ГруппаОбластьВыполнения);
	Элементы.ГруппаНаИсполнение.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Элементы.ГруппаНаИсполнение.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	//  Страница "На ознакомление".
	Элементы.Переместить(Элементы.ГруппаОзнакомление, Элементы.ГруппаОбластьВыполнения);
	Элементы.ГруппаОзнакомление.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Элементы.ГруппаОзнакомление.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	
	
	// Переместим команды выполнения в область выполнения.
	// Команды выполнения "Исполнения" перенесем внутрь группы.
	Элементы.Переместить(Элементы.Исполнение, Элементы.ГруппаНаИсполнение);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.АдаптироватьОбластьВыполненияЗадачи(
		Элементы.Исполнение,
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Исполнить),
		ЭтотОбъект);
		
	// Команды выполнения "Ознакомление" перенесем внутрь группы.
	Элементы.Переместить(Элементы.Ознакомление, Элементы.ГруппаОзнакомление);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.АдаптироватьОбластьВыполненияЗадачи(
		Элементы.Ознакомление,
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Ознакомить),
		ЭтотОбъект);
			
	// Команды выполнения "Рассмотрение" перенесем внутрь группы.
	Элементы.Переместить(Элементы.Рассмотрение, Элементы.ГруппаСведенияОЗадаче);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.АдаптироватьОбластьВыполненияЗадачи(
		Элементы.Рассмотрение,
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Обработано),
		ЭтотОбъект);
	
	// Выполним Общую адаптацию.
	ПараметрыАдаптациии = МобильныйКлиентАдаптацияИнтерфейсаСервер.НовыеПараметрыАдаптацииФормыКарточкиЗадачи();
	ПараметрыАдаптациии.ЭлементРасположениеСтраниц = Элементы.ГруппаРеквизитыЗадачи;
	
	Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
	Элементы.Переместить(Элементы.ГруппаОбластьВыполнения, ЭтотОбъект, Элементы.ГруппаИнструкции);
	
	// Страница Реквизиты.
	ПараметрыАдаптациии.СтраницыНазвания.Добавить(НСтр("ru='Реквизиты'"));
	ЭлементыОсновное = Новый Массив;
	ЭлементыОсновное.Добавить(Элементы.ПредставлениеHTML);
	ПараметрыАдаптациии.СтраницыЭлементы.Добавить(ЭлементыОсновное);
	
	// Настроим оставшиеся страницы.
	ПараметрыАдаптациии.СтраницыНазвания.Добавить(НСтр("ru='Предметы'"));
	ПараметрыАдаптациии.СтраницыЭлементы.Добавить(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ДеревоПриложений));
	
	ПараметрыАдаптациии.СтраницыНазвания.Добавить(НСтр("ru='Подзадачи'"));
	ПараметрыАдаптациии.СтраницыЭлементы.Добавить(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Подзадачи));
		
	ПараметрыАдаптациии.СтраницыНомерТекущейСтраницы = 0; // Реквизиты
	
	ПараметрыАдаптациии.ЭлементПредметы = Элементы.ДеревоПриложений;
	ПараметрыАдаптациии.ЭлементПредставлениеHTML = Элементы.ПредставлениеHTML;
	ПараметрыАдаптациии.ЭлементЗаписатьИЗакрыть = Элементы.ЗаписатьИЗакрыть;
	ПараметрыАдаптациии.ЭлементГруппаИнструкции = Элементы.ГруппаИнструкции;
	
	МобильныйКлиентАдаптацияИнтерфейсаСервер.АдаптироватьЭлементыФормыКарточкиЗадачи(ЭтотОбъект, ПараметрыАдаптациии);
	МобильныйКлиентКлиентСервер.АдаптироватьHtmlПодЭкранПриНеобходимости(ПредставлениеHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуМК(Команда)
	МобильныйКлиентАдаптацияИнтерфейсаКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриСменеСтраницыМК(ТекущаяСтраница)
	МобильныйКлиентАдаптацияИнтерфейсаКлиентСервер.ОбновитьСтраницыИПереключатели(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВыравниваниеЭлементаМК(Элемент)
	
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДеревоПриложений

&НаКлиенте
Процедура ОбновитьДеревоПриложений(ТекущееИмяПредметаВДереве = Неопределено)
	
	ТекущаяСсылкаВДереве = Неопределено;
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено И ТекущееИмяПредметаВДереве = Неопределено Тогда
		ТекущаяСсылкаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
		ТекущееИмяПредметаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.ИмяПредмета;
	КонецЕсли;
	
	Если Элементы.Найти("ДеревоПриложений") <> Неопределено  Тогда
		ОбновитьДеревоПриложенийСервер();
	КонецЕсли;
	
	Если ТекущаяСсылкаВДереве <> Неопределено ИЛИ ТекущееИмяПредметаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве);
	КонецЕсли;
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПриложенийСервер()
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьДеревоПриложений(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьПредметСервер()
	
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийДобавлениеНаКлиенте(Предмет = Неопределено)

	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	НовыйИмяПредмета = Неопределено;
	
	ПараметрыОбработчикаОповещения = Новый Структура();
	ПараметрыОбработчикаОповещения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийВыборПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	Если Не МультипредметностьКлиент.ДобавитьПредметЗадачи(ЭтаФорма, СообщениеОбОшибке, НовыйИмяПредмета, Предмет,,ОписаниеОповещения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийДобавлениеНаКлиентеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоПриложений();
		УстановитьПредметСервер();	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНаКлиенте()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	Иначе
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ПараметрыОбработчикаОповещения = Новый Структура;
		ПараметрыОбработчикаОповещения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьКарточкуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчикаОповещения);
			
		Если Не МультипредметностьКлиент.ДобавитьПредметЗадачи(
			ЭтаФорма,
			СообщениеОбОшибке, 
			ТекущиеДанные.ИмяПредмета,
			ТекущиеДанные.Ссылка,,
			ОписаниеОповещения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,, "ДеревоПриложений");
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНаКлиентеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоПриложений();
		УстановитьПредметСервер();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиенте()
	
	ВыделенныеСтрокиПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыделеннаяСтр);
		ВыделенныеСтрокиПредметов.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийУдалениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ВыделенныеСтрокиПредметов);
		
	МультипредметностьКлиент.ПолученоПодтверждениеОбУдаленииПредмета(Объект, ВыделенныеСтрокиПредметов, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиентеПродолжение(Результат, ВыделенныеСтрокиПредметов) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	
	ИменаУдаляемыхПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из ВыделенныеСтрокиПредметов Цикл
		Если ВыделеннаяСтр.ДоступноУдаление Тогда
			ИменаУдаляемыхПредметов.Добавить(ВыделеннаяСтр.ИмяПредмета);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаУдаляемыхПредметов.Количество() = 0 Тогда
		
		КоличествоВыделенныхСтрок = ВыделенныеСтрокиПредметов.Количество();
		Если КоличествоВыделенныхСтрок = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Удалить текущий предмет можно только в карточке процесса.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Удалить выделенные предметы можно только в карточке процесса.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	Если Не МультипредметностьКлиент.УдалитьПредметыЗадачи(ЭтаФорма, СообщениеОбОшибке, ИменаУдаляемыхПредметов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПриложений();
	УстановитьПредметСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеПриложенияСервер()
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьДеревоПриложений(ЭтаФорма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяФормы,
		"ОтображатьУдаленныеПриложения",
		ОтображатьУдаленныеПриложения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере(ОбновитьВсеСроки = Ложь) Экспорт
	
	Если Не Объект.Выполнена Тогда
	
		Если Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаНаИсполнение
			Или ОбновитьВсеСроки Тогда
			
			СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаПроцессаИсполнения();
			СтруктураДляРасчета.Ссылка = БизнесПроцессы.Исполнение.ПустаяСсылка();
			СтруктураДляРасчета.ВариантИсполнения = ВариантИсполнения;
			СтруктураДляРасчета.КоличествоИтераций = КоличествоИтерацийИсполнения;
			СтруктураДляРасчета.Проверяющий = ПроверяющийИсполнения;
			СтруктураДляРасчета.ВариантУстановкиСрокаОбработкиРезультатов = ВариантУстановкиСрокаОбработкиРезультатовИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатов = СрокОбработкиРезультатовИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДниИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасыИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинутыИсполнения;
			СтруктураДляРасчета.Исполнители = ИсполнителиИсполнения.Выгрузить();
			
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
			ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
			ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтрокиСИзмененнымСроком;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(
				СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			
			СрокОбработкиРезультатовИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатов;
			СрокОбработкиРезультатовДниИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатовДни;
			СрокОбработкиРезультатовЧасыИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатовЧасы;
			СрокОбработкиРезультатовМинутыИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатовМинуты;
			
			ИндексТекущейСтроки = ИсполнителиИсполнения.Количество() - 1;
			Пока ИндексТекущейСтроки >= 0 Цикл
				ТекущаяСтрока = ИсполнителиИсполнения[ИндексТекущейСтроки];
				СтрСоСроком = СтруктураДляРасчета.Исполнители[ИндексТекущейСтроки];
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрСоСроком,
					"СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
				ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
			КонецЦикла;
			
			СрокИсполненияПроцессаИсполнения = СтруктураДляРасчета.СрокИсполненияПроцесса;
			
		КонецЕсли;
			
		Если Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаОзнакомление
			Или ОбновитьВсеСроки Тогда
			
			СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаОзнакомления();
			СтруктураДляРасчета.Ссылка = БизнесПроцессы.Ознакомление.ПустаяСсылка();
			СтруктураДляРасчета.Исполнители = ИсполнителиОзнакомления.Выгрузить();
			
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиОзнакомления(
				СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			
			ИндексТекущейСтроки = ИсполнителиОзнакомления.Количество() - 1;
			Пока ИндексТекущейСтроки >= 0 Цикл
				ТекущаяСтрока = ИсполнителиОзнакомления[ИндексТекущейСтроки];
				СтрСоСроком = СтруктураДляРасчета.Исполнители[ИндексТекущейСтроки];
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрСоСроком,
					"СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
				ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
			КонецЦикла;
			
			СрокИсполненияПроцессаОзнакомления = СтруктураДляРасчета.СрокИсполненияПроцесса;
			
		КонецЕсли;
		
		РеквизитТаблицаСИзмененнымСроком = "";
		ИндексСтрокиСИзмененнымСроком = 0;
		
	КонецЕсли;
	
	ОбновитьПризнакиИстекшихСроков();
	ЗаполнитьПредставлениеСроковИсполненияОзнакомления(ЭтаФорма);
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = РеквизитТаблица;
	ИндексСтрокиСИзмененнымСроком = ИндексСтроки;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	ЗаполнитьПредставлениеСроковИсполненияОзнакомления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСроковИсполненияОзнакомления(Форма)
	
	Если Форма.Элементы.ГруппаЗакладки.ТекущаяСтраница = Форма.Элементы.ГруппаНаИсполнение Тогда
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковВТаблицеИсполнителей(
			Форма.ИсполнителиИсполнения, Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковУчастника(
			Форма.СрокОбработкиРезультатовИсполненияПредставление,
			Форма.СрокОбработкиРезультатовИсполнения,
			Форма.СрокОбработкиРезультатовДниИсполнения,
			Форма.СрокОбработкиРезультатовЧасыИсполнения,
			Форма.СрокОбработкиРезультатовМинутыИсполнения,
			Форма.ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
			Форма.СрокИсполненияПроцессаИсполненияПредставление,
			Форма.СрокИсполненияПроцессаИсполнения, 0,0,0,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
	ИначеЕсли Форма.Элементы.ГруппаЗакладки.ТекущаяСтраница = Форма.Элементы.ГруппаОзнакомление Тогда
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковВТаблицеИсполнителей(
			Форма.ИсполнителиОзнакомления, Форма.ИспользоватьДатуИВремяВСрокахЗадач);
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
			Форма.СрокИсполненияПроцессаОзнакомленияПредставление,
			Форма.СрокИсполненияПроцессаОзнакомления, 0,0,0,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сроки процесса для проверки корректности заполнения.
//
// Возвращаемое значение:
//  Структура:
//   * Исполнители - ДанныеФормыКоллекция - соотвествует реквизитам ИсполнителиИсполнения или ИсполнителиОзнакомления
//   * Проверяющий - СправочникСсылка.Пользователи,
//                   СправочникСсылка.ПолныеРоли - соотвествует реквизиту ПроверяющийИсполнения
//   * СрокОбработкиРезультатов - Дата - соотвествует реквизиту СрокОбработкиРезультатовИсполнения
//   * СрокИсполненияПроцесса - Дата - соотвествует реквизитам СрокИсполненияПроцессаИсполнения или СрокИсполненияПроцессаОзнакомления
//
&НаКлиенте
Функция СтруктураСроковДляПроверкиКорректностиЗаполнения()
	
	СтруктураСроковДляПроверки = Новый Структура;
	
	Если ВариантОбработкиРезолюции = 
		ПредопределенноеЗначение("Перечисление.ВариантыОбработкиРезолюции.НаправитьНаИсполнение") Тогда
		
		СтруктураСроковДляПроверки.Вставить("Исполнители", ИсполнителиИсполнения);
		СтруктураСроковДляПроверки.Вставить("Проверяющий", ПроверяющийИсполнения);
		СтруктураСроковДляПроверки.Вставить("СрокОбработкиРезультатов", СрокОбработкиРезультатовИсполнения);
		СтруктураСроковДляПроверки.Вставить("СрокИсполненияПроцесса", СрокИсполненияПроцессаИсполнения);
		
	ИначеЕсли ВариантОбработкиРезолюции = 
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление") Тогда
		
		СтруктураСроковДляПроверки.Вставить("Исполнители", ИсполнителиОзнакомления);
		СтруктураСроковДляПроверки.Вставить("СрокИсполненияПроцесса", СрокИсполненияПроцессаОзнакомления);
		
	КонецЕсли;
	
	Возврат СтруктураСроковДляПроверки;
	
КонецФункции

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения истек (Исполнители исполнения)'"),
		"ИсполнителиИсполнения.СрокИсполненияИстек",
		"ИсполнителиСрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок обработки результатов исполнения истек'"),
		"СрокОбработкиРезультатовИсполненияИстек",
		"СрокОбработкиРезультатовИсполненияПредставление");
		
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса исполнения истек'"),
		"СрокИсполненияПроцессаИсполненияИстек",
		"СрокИсполненияПроцессаИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения истек (Исполнители ознакомления)'"),
		"ИсполнителиОзнакомления.СрокИсполненияИстек",
		"ИсполнителиОзнакомленияСрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса ознакомления истек'"),
		"СрокИсполненияПроцессаОзнакомленияИстек",
		"СрокИсполненияПроцессаОзнакомленияПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	ДатаИсполненияПоУмолчанию = ?(Объект.Выполнена, Объект.ДатаИсполнения, ТекущаяДатаСеанса());
	
	Если ВариантОбработкиРезолюции = 
		ПредопределенноеЗначение("Перечисление.ВариантыОбработкиРезолюции.НаправитьНаИсполнение") Тогда
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
			ИсполнителиИсполнения, ДатаИсполненияПоУмолчанию);
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаУчастника(
			СрокОбработкиРезультатовИсполнения,
			СрокОбработкиРезультатовИсполненияИстек,
			ДатаИсполненияПоУмолчанию,
			"Проверяющий");
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			СрокИсполненияПроцессаИсполнения,
			ДатаИсполненияПоУмолчанию,
			СрокИсполненияПроцессаИсполненияИстек);
		
	ИначеЕсли ВариантОбработкиРезолюции = 
		ПредопределенноеЗначение("Перечисление.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление") Тогда
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
			ИсполнителиОзнакомления, ДатаИсполненияПоУмолчанию);
			
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			СрокИсполненияПроцессаОзнакомления,
			ДатаИсполненияПоУмолчанию,
			СрокИсполненияПроцессаОзнакомленияИстек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеФайловПоЗадаче(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		ВыделенныеСтроки = Элементы.ДеревоПриложений.ВыделенныеСтроки;
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			
			ВыбраннаяСтрока = ВыделенныеСтроки[0];
			ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыбраннаяСтрока);	
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) 
				И ТипЗнч(ФайлСсылка) = Тип("СправочникСсылка.Файлы") Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
				Возврат;
			Иначе
				Выполнение = Ложь;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
