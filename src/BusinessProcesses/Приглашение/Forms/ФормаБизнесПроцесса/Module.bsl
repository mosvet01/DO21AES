
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
	
	Если Объект.Стартован Тогда
		Если Объект.Завершен Тогда
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполнялся %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаЗавершения, Объект.ДатаНачала)));
		Иначе
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполняется %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(), Объект.ДатаНачала)));
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Настройки старта
	СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	СрокиИсполненияПроцессов.ЗаполнитьДатыИсполненияУчастников(
		Объект.Ссылка, ДатыИсполненияУчастников);
	СрокиИсполненияПроцессов.КарточкаПроцессаПриСозданииНаСервере(
		ЭтаФорма, БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	ИспользоватьРабочийКалендарь = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Настройка дерева задач и списка активных задач
	РаботаСБизнесПроцессамиВызовСервера.ДеревоПроцессовИЗадач_ПриСозданииНаСервере(ЭтаФорма, Объект.Ссылка);
	
	// Заполнение количества активных задач
	КоличествоАктивныхЗадач = РаботаСБизнесПроцессамиВызовСервера.КоличествоАктивныхЗадачПоПредмету(Объект.Ссылка);
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	ЯвкаОбязательнаПоУмолчанию = УправлениеМероприятиями.ПолучитьПерсональнуюНастройку("ЯвкаОбязательнаПоУмолчанию");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьМестныеВремена();
	Элементы.ПредставлениеМестногоЧасовогоПояса.Видимость = ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса);
	ОбновитьЧасовыеПоясаУчастниковНаСервере();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьЭлементыФормыДляМобильногоУстройства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтаФорма, Параметр.Файл);
	
	ИначеЕсли ИмяСобытия = "ЗадачаВыполнена" Тогда
		
		ОбработатьИзменениеЗадачи(Параметр);
		
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" 
		И БизнесПроцессыИЗадачиКлиент.ЭтоОповещениеОПеренаправленииЗадачиЭтогоПроцесса(Источник, Объект.Ссылка) Тогда
		
		ОбработатьИзменениеЗадачиРеализация();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененСоставУчастников" И Параметр = Объект.Ссылка Тогда 
		Прочитать();
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	КонецЕсли;
		
	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗавершенПодборИсполнителей" И Параметр = ЭтотОбъект Тогда
		ОбновитьЧасовыеПоясаУчастниковНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессамиВызовСервера.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);
	ОбновитьМестныеВремена();
	ОбновитьЧасовыеПоясаУчастниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадачКлиент.ДобавитьЗаявкуНаПереносСрокаВПараметрыЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// Сроки исполнения процессов
	СрокиИсполненияПроцессовКлиент.ПодтвердитьПереносСрокаПроцесса(ЭтаФорма, Отказ, ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	
	ПроверитьЗанятостьИсполнителей = Ложь;
	ПроверитьОтсутствиеУчастниковПроцесса = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		ПроверитьЗанятостьИсполнителей = Истина;
		
		РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
			Объект,
			Отказ,
			УникальныйИдентификатор,
			ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
			ЭтаФорма, Объект, ПараметрыЗаписи, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
		
	ИначеЕсли Объект.Стартован И Модифицированность Тогда 
		
		Если ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				Объект.СрокИсполненияПроцесса, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
			Если Отказ Тогда
				Возврат;	
			КонецЕсли;		
		КонецЕсли;
		
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса")
		Или ПараметрыЗаписи.Свойство("ОтложенныйСтартПроцесса")
		Или (Не Объект.Стартован
			И Модифицированность
			И ЗначениеЗаполнено(НастройкаСтарта)
			И НастройкаСтарта.Состояние = 
				ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту")) Тогда
			
		ПараметрыЗаписи.Вставить("ИзменениеОтложенногоПроцесса", Истина);
		ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		
		ПроверитьЗанятостьИсполнителей = Истина;
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ЗанятостьИсполнителейПроверена")
		И ПроверитьЗанятостьИсполнителей Тогда
			
		МассивИсполнителей = Новый Массив;
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если ЗначениеЗаполнено(Строка.Исполнитель)
				И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи")Тогда 
				МассивИсполнителей.Добавить(Строка.Исполнитель);
			КонецЕсли;
		КонецЦикла;
		
		ИсключенияЗанятости = Новый Массив;
		Для Каждого Предмет Из Объект.Предметы Цикл
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")
				И ТипЗнч(Предмет.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда 
				ИсключенияЗанятости.Добавить(Предмет.Предмет);
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПриСтартеЗавершениеВопросаОЗанятостиИсполнителей", ЭтотОбъект, ПараметрыЗаписи);
		
		Если Не РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
				МассивИсполнителей, Объект.ДатаНачалаМероприятия, Объект.ДатаОкончанияМероприятия,
				ИспользоватьРабочийКалендарь, ИсключенияЗанятости, Истина, ОписаниеОповещения) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ЗанятостьИсполнителейПроверена", Истина);
		
	КонецЕсли;
	
	Если ПроверитьОтсутствиеУчастниковПроцесса
		И Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроцессуПередЗаписью(ЭтаФорма,
				ПараметрыЗаписи, Отказ) Тогда
				
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт
			Или ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса") И ПараметрыЗаписи.ФоновыйСтартПроцесса) Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОЗанятостиИсполнителей(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Параметры.Вставить("ЗанятостьИсполнителейПроверена", Истина);
		Если Записать(Параметры) Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессамиВызовСервера.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи
	// Проверка правильности указания трудозатрат участников процесса
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессамиВызовСервера.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Объект.Ссылка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		
		// проверка заполнения полей
		Для Каждого Строка Из Объект.Исполнители Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле ""Участник"" в строке %1 списка ""Участники""!'"), Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Объект.Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		// проверка дублей
		КоличествоИсполнителей = Объект.Исполнители.Количество();
		Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
			Строка1 = Объект.Исполнители[Инд1];
			
			Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
				Строка2 = Объект.Исполнители[Инд2];
				
				Если Строка1.Исполнитель = Строка2.Исполнитель Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'"), 
						Строка(Строка1.Исполнитель));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						"Объект.Исполнители[" + Формат(Строка1.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
						Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
		
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
	
		Мероприятие = Неопределено;
		
		Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
			Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
			
			Попытка
				
				Если Объект.ДатаНачалаМероприятия <> Мероприятие.ДатаНачала 
					Или Объект.ДатаОкончанияМероприятия <> Мероприятие.ДатаОкончания
					Или Объект.МестоПроведения <> Мероприятие.МестоПроведения Тогда 
					
					Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Мероприятие).Изменение Тогда
						
						Отказ = Истина;
						
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У вас нет прав на изменение мероприятия ""%1"".'"),
							Строка(Мероприятие));
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
						Возврат;
						
					КонецЕсли;
					
					МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
					ЗаблокироватьДанныеДляРедактирования(МероприятиеОбъект.Ссылка);
					
					МероприятиеОбъект.ДатаНачала = Объект.ДатаНачалаМероприятия;
					МероприятиеОбъект.ДатаОкончания = Объект.ДатаОкончанияМероприятия;
					Если Объект.МестоПроведения <> МероприятиеОбъект.МестоПроведения Тогда
						МероприятиеОбъект.Помещение = Неопределено;
					КонецЕсли;
					МероприятиеОбъект.МестоПроведения = Объект.МестоПроведения;
					МероприятиеОбъект.Записать();
					
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
				НаборЗаписей.Прочитать();
				Участники = НаборЗаписей.Выгрузить();
				
				Для Каждого СтрокаУчастник Из Участники Цикл
					ЗначенияКлюча = Новый Структура;
					ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
					ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
					Если ТипЗнч(СтрокаУчастник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Исполнитель,
							"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
						ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
						ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
						ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
					Иначе
						ЗначенияКлюча.Вставить("УдалитьИсполнитель", СтрокаУчастник.Исполнитель);
						ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
						ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
					КонецЕсли;
					
					КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
					ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
				КонецЦикла;
				
				НеобходимоЗаписатьУчастников = Ложь;
				Для Каждого Строка Из Объект.Исполнители Цикл
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Исполнитель", Строка.Исполнитель);
					
					НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда 
						
						НайденнаяСтрока = НайденныеСтроки[0];
						Если НайденнаяСтрока.ЯвкаОбязательна <> Строка.ЯвкаОбязательна Тогда
							
							Для Каждого Запись Из НаборЗаписей Цикл
								
								Если Запись.Исполнитель = Строка.Исполнитель Тогда
									
									НеобходимоЗаписатьУчастников = Истина;
									Запись.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					Иначе
						
						НеобходимоЗаписатьУчастников = Истина;
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
						НоваяЗапись.Мероприятие = Мероприятие;
						НоваяЗапись.Порядок = Строка.НомерСтроки;
						
						Если ТипЗнч(НоваяЗапись.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяЗапись.Исполнитель,
								"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
							НоваяЗапись.УдалитьИсполнитель = ЗначенияРеквизитов.Владелец;
							НоваяЗапись.УдалитьОсновнойОбъектАдресации = ЗначенияРеквизитов.ОсновнойОбъектАдресации;
							НоваяЗапись.УдалитьДополнительныйОбъектАдресации = ЗначенияРеквизитов.ДополнительныйОбъектАдресации;
						Иначе
							НоваяЗапись.УдалитьИсполнитель = НоваяЗапись.Исполнитель;
							НоваяЗапись.УдалитьОсновнойОбъектАдресации = Неопределено;
							НоваяЗапись.УдалитьДополнительныйОбъектАдресации = Неопределено;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НеобходимоЗаписатьУчастников Тогда
					
					Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Мероприятие).Изменение Тогда
						
						Отказ = Истина;
						
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У вас нет прав на изменение обязательной явки участников мероприятия ""%1"".'"),
							Строка(Мероприятие));
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
						Возврат;
						
					КонецЕсли;
					
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
				Для Каждого СтрокаУчастник Из Участники Цикл
					ЗначенияКлюча = Новый Структура;
					ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
					ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
					Если ТипЗнч(СтрокаУчастник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Исполнитель,
							"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
						ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
						ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
						ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
					Иначе
						ЗначенияКлюча.Вставить("УдалитьИсполнитель", СтрокаУчастник.Исполнитель);
						ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
						ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
					КонецЕсли;
					
					КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
					РазблокироватьДанныеДляРедактирования(КлючЗаписи);
					
				КонецЦикла;
				
			Исключение
				
				Отказ = Истина;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при изменении мероприятия:'") + Символы.ПС + "%1",
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Настройки старта
	СтартПроцессовСервер.ОбновитьНастройкиСтартаПроцессаИзФормы(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи, НастройкаСтарта);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Объект.Ссылка, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	УстановитьДоступность();
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковВТаблицеИсполнителей(
		Объект.Исполнители, ИспользоватьДатуИВремяВСрокахЗадач);
	ОбновитьПризнакиИстекшихСроков();
	
	ОбновитьМестныеВремена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОповеститьОПереносеСроков(ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ФоновыйСтартПроцесса") И ПараметрыЗаписи.ФоновыйСтартПроцесса Тогда
		
		ИнформацияОЗапуске = Новый Структура;
		ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
		ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
		Оповестить("ФоновыйСтартПроцесса", ИнформацияОЗапуске);
		
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(СтрокаПредмета.Предмет);
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", Объект.Ссылка);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ПоказатьОповещениеПослеЗаписиПроцесса(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоПроцессовЗадач", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеОбработкаНавигационнойСсылки(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИтерацийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.КоличествоИтерацийПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	ТрудозатратыИсполнителей = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Участники приглашения'"),
			"ТрудозатратыПланИсполнителя",
			Объект.ТрудозатратыПланИсполнителя);
	Настройки.Участники.Добавить(ТрудозатратыИсполнителей);
	
	ТрудозатратыАвтора = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Автор'"),
			"ТрудозатратыПланАвтора",
			Объект.ТрудозатратыПланАвтора,
			Объект.Автор);
	Настройки.Участники.Добавить(ТрудозатратыАвтора);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Наименование",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПриглашениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "Описание",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПриглашениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПриглашениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Объект.Наименование = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры
// Шаблоны текста для наименования и описания

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_Автор

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.АвторСоСрокомИсполненияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СрокОбработкиРезультатовПредставление

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтаФорма;
	ДопПараметры.Поле = "СрокОбработкиРезультатовПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокОбработкиРезультатов";
	ДопПараметры.Исполнитель = Объект.Автор;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		Объект.СрокОбработкиРезультатов,
		Объект.СрокОбработкиРезультатовДни,
		Объект.СрокОбработкиРезультатовЧасы,
		Объект.СрокОбработкиРезультатовМинуты,
		Объект.ВариантУстановкиСрокаОбработкиРезультатов,
		СрокОбработкиРезультатовПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтаФорма;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокОбработкиРезультатовДни";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокОбработкиРезультатовЧасы";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокОбработкиРезультатовМинуты";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаОбработкиРезультатов";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокОбработкиРезультатовПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "Объект";
	ПараметрыВыбораСрока.СрокиПредшественников = Объект.Исполнители;
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.Участник = Объект.Автор;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтаФорма,
		Объект.СрокОбработкиРезультатов,
		Объект.СрокОбработкиРезультатовДни,
		Объект.СрокОбработкиРезультатовЧасы,
		Объект.СрокОбработкиРезультатовМинуты,
		СрокОбработкиРезультатовПредставление,
		Объект.ВариантУстановкиСрокаОбработкиРезультатов,
		Направление,
		"СрокОбработкиРезультатов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_ПроектЗадача

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЗаполнитьПоПроектнойЗадачеНаСервере(Объект.ПроектнаяЗадача);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Предметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	МультипредметностьКлиент.ОбновитьОтображениеКомандыОсновнойПредметВПроцессе(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	МультипредметностьКлиентСервер.УстановитьВидимостьТаблицыПредметов(ЭтаФорма, Объект);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтаФорма, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	Если МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
		ПредметыПредметПриИзменении();
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_ДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_СписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПередНачаломИзменения(
		Элемент, Отказ, ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Исполнители

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	ОбновитьЧасовыеПоясаУчастниковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриАктивизацииСтроки(
		ЭтаФорма,
		Элементы.Исполнители,
		Элементы.ИсполнителиСрокИсполненияПредставление,
		ДоступностьПоШаблону,
		ВестиУчетПереносаСроков,
		ЗаявкаНаПереносСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Объект.Стартован Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	

	ВсеПройдены = Истина;
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Не Строка.Пройден И ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
			ВсеПройдены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ВсеПройдены Тогда 
		ТекстПредупреждения = НСтр("ru = 'Все исполнители завершили свои задачи, добавление нового исполнителя невозможно!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ТекущиеДанные.Пройден Тогда 
			ТекстПредупреждения = НСтр("ru = 'Задача текущего исполнителя уже завершена, изменение исполнителя невозможно!'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ВыделенныеСтроки = Элементы.Исполнители.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 1 Тогда 
			ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
			
			Если ДанныеСтроки.Пройден Тогда 
				ТекстПредупреждения = НСтр("ru = 'Задача текущего исполнителя уже завершена, удаление исполнителя невозможно!'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				Если ДанныеСтроки.Пройден Тогда 
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Задача исполнителя %1 уже завершена, удаление исполнителя невозможно!'"),
						Строка(ДанныеСтроки.Исполнитель));
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		Если ВыделенныеСтроки.Количество() = Объект.Исполнители.Количество() Тогда 
			ТекстПредупреждения = НСтр("ru = 'В списке участников не останется ни одного исполнителя, удаление невозможно!'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтаФорма, НоваяСтрока,
		Элементы.Исполнители,
		Объект.Исполнители);
		
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущиеДанные.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтаФорма, НоваяСтрока, ОтменаРедактирования, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПослеУдаления(ЭтаФорма, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительНачалоВыбора(
		ЭтаФорма, СтандартнаяОбработка,
		Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		ЭтаФорма, ВыбранноеЗначение, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители, Направление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СтартоватьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуОтложенногоСтарта(Команда)
	
	СтартПроцессовКлиент.УстановитьДатуОтложенногоСтарта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	ШаблоныПоПредметам = Новый СписокЗначений;
	ШаблоныПоПредметам.ЗагрузитьЗначения(
		ШаблоныБизнесПроцессов.ШаблоныПоОбъектам(Предметы, Тип("СправочникСсылка.ШаблоныПриглашения")));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса(
		"ШаблоныПриглашения", ШаблоныПоПредметам, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры        

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандФормы_Предметы

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(
		ЭтаФорма, Объект, Истина,, Тип("СправочникСсылка.Файлы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойПредмет(Команда)
	
	МультипредметностьКлиент.ОсновнойПредмет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Исполнители

&НаКлиенте
Процедура Подобрать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителей(
		ЭтаФорма, Элементы.Исполнители, Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЯвкаОбязательнаДляВсех(Команда)
	
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		Исполнитель.ЯвкаОбязательна = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьЯвкаОбязательнаДляВсех(Команда)
	
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		Исполнитель.ЯвкаОбязательна = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ДеревоПроцессовИЗадач

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		Неопределено,
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоПроцессовЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуОбъекту(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПерейтиКТекущемуОбъекту(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИзменениеЗадачи(Задача)
	
	Если ОбщегоНазначенияДокументооборот.
		ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Задача, "БизнесПроцесс") = Объект.Ссылка Тогда
		
		ОбработатьИзменениеЗадачиРеализация();
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработатьИзменениеЗадачиРеализация()
	
	Прочитать();
	
	СрокиИсполненияПроцессов.ЗаполнитьДатыИсполненияУчастников(
		Объект.Ссылка, ДатыИсполненияУчастников);
	ОбновитьПризнакиИстекшихСроков();
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(Ссылка)
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 70, 100);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность() Экспорт
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	ЭтотУзел = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	
	Если Объект.Завершен
		Или Не ПравоНаИзменение
		Или (ЗначениеЗаполнено(Объект.Ссылка) И ЭтотУзел <> Объект.УзелОбмена) Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.Стартован Тогда
		Элементы.Подобрать.Доступность = Ложь;
		
		Элементы.ЗаполнитьПоШаблону.Видимость = Ложь;
		
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаНачалаВремя.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Истина;
		Элементы.МестоПроведения.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		
	КонецЕсли;	
	
	Элементы.ГруппаИнфо.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.Длительность.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессамиВызовСервера.ДоступностьИнтерактивнойПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		
		Элементы.Исполнители.ИзменятьСоставСтрок = ДоступностьПоШаблону;
		Элементы.Исполнители.ИзменятьПорядокСтрок = ДоступностьПоШаблону;
		Для Каждого ЭлементТаблицыИсполнители Из Элементы.Исполнители.ПодчиненныеЭлементы Цикл
			ЭлементТаблицыИсполнители.ТолькоПросмотр = Не ДоступностьПоШаблону;
		КонецЦикла;
		
		Элементы.Подобрать.Доступность = ДоступностьПоШаблону;
	Иначе
		
		Элементы.Исполнители.ИзменятьСоставСтрок = Истина;
		Элементы.Исполнители.ИзменятьПорядокСтрок = Истина;
		Для Каждого ЭлементТаблицыИсполнители Из Элементы.Исполнители.ПодчиненныеЭлементы Цикл
			ЭлементТаблицыИсполнители.ТолькоПросмотр = Ложь;
		КонецЦикла;
		
		Элементы.Подобрать.Доступность = Истина;
	КонецЕсли;
	
	ПараметрыДоступности = 
		СрокиИсполненияПроцессовКлиентСервер.ПараметрыДоступностиЭлементаУправления();
	ПараметрыДоступности.ДоступностьПоШаблону = ДоступностьПоШаблону;
	ПараметрыДоступности.ВестиУчетПереносаСроков = ВестиУчетПереносаСроков;
	ПараметрыДоступности.ЗаявкаНаПереносСрока = ЗаявкаНаПереносСрока;
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.СрокОбработкиРезультатовПредставление,
		СрокОбработкиРезультатовПредставление,
		ПараметрыДоступности);
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтаФорма,
		Элементы.КоличествоИтераций,
		Объект.КоличествоИтераций,
		ПараметрыДоступности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПроектнойЗадачеНаСервере(ПроектнаяЗадача) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессОбъект.ЗаполнитьПоПроектнойЗадаче(ПроектнаяЗадача);
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Шаблон, ЭтаФорма);
	ОбновитьЭлементыДополнительныхРеквизитов();
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ПрочитатьПараметрыСостояния = Ложь) Экспорт
	
	Если ПрочитатьПараметрыСостояния Тогда
		Прочитать();
		СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	КонецЕсли;
	
	Элементы.СрокОбработкиРезультатовПредставление.ТолькоПросмотр = ТолькоПросмотр;
	
	РаботаСБизнесПроцессамиВызовСервера.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Автор", Истина);
	ПараметрыОписания.Вставить("Исполнитель", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителя", НСтр("ru = 'Участники (для каждого)'"));
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеРезультата() Экспорт
	
	ПредставлениеРезультата = НСтр("ru = '%1 %2'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПредставлениеРезультата, Объект.РезультатПриглашения, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура НастроитьЭлементыФормыДляМобильногоУстройства()
	
	// Настроим свойства и положение некоторых специфичных элементов.
	
	//Описание оставим одно. Страницы спрячем, настроим высоту описания.
	Элементы.Переместить(Элементы.Описание_БезПредметов, Элементы.ГруппаГлавное, Элементы.ГруппаОписаниеИПредметы);
	Элементы.ГруппаОписаниеИПредметы.Видимость = Ложь;
	
	// Настроим группу для исполнителей.
	Элементы.ГруппаИсполнителиМК.Видимость = Истина;
	Элементы.Переместить(Элементы.Исполнители, Элементы.ГруппаИсполнителиМК, Элементы.ГруппаИсполнителиМК);
	
	// Настроим отображение кнопки подобрать
	Элементы.Подобрать.Отображение = ОтображениеКнопки.Текст;
	
	// Важность покажем после описания.
	Элементы.Переместить(Элементы.Важность, Элементы.ГруппаГлавное, Элементы.ГруппаИсполнителиМК);
	
	// Сведения о текущем состоянии процесса покажем только на первой вкладке.
	Элементы.Переместить(Элементы.ГруппаСостояниеПроцесса, Элементы.ГруппаГлавное, Элементы.ГруппаНаименованиеВажность);
	
	// Адаптируем группу "Контроль процесса".
	Элементы.КоличествоИтераций.Ширина = 0;
	Элементы.ГруппаКонтрольныйСрокПроцесса.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Скроем лишние команды.
	Элементы.ГруппаПредметыИФайлы.Видимость = Ложь;
	
	// Запомним основу заголовка в новый реквизит формы.
	РеквизитЗаголовокГруппыИсполнителиМК =
		Новый РеквизитФормы("ЗаголовокГруппыИсполнителиМК", Новый ОписаниеТипов("Строка"));
	ИзменитьРеквизиты(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитЗаголовокГруппыИсполнителиМК));
	ЭтотОбъект.ЗаголовокГруппыИсполнителиМК = Элементы.Исполнитель.Заголовок;
	Элементы.ГруппаИсполнителиМК.Заголовок =
		СтрШаблон("%1 (%2)", ЭтотОбъект.ЗаголовокГруппыИсполнителиМК, Объект.Исполнители.Количество());
	
	// Выполним общие действия по адаптации.
	ПараметрыАдаптациии = МобильныйКлиентАдаптацияИнтерфейсаСервер.НовыеПараметрыАдаптацииФормыКарточкиПроцесса();
	
	// Вызовем общую адаптацию.
	ПараметрыАдаптациии.ЭлементНаименование = Элементы.Наименование;
	ПараметрыАдаптациии.ЭлементВажность = Элементы.Важность;
	ПараметрыАдаптациии.ЭлементОписание = Элементы.Описание_БезПредметов;
	ПараметрыАдаптациии.ЭлементИсполнители = Элементы.Исполнители;
	ПараметрыАдаптациии.ЭлементГруппаИсполнители = Элементы.ГруппаИсполнителиМК;
	ПараметрыАдаптациии.ЭлементИсполнителиИсполнитель = Элементы.Исполнитель;
	ПараметрыАдаптациии.ЭлементСрокОбработкиРезультатов = Элементы.СрокОбработкиРезультатовПредставление;
	ПараметрыАдаптациии.ЭлементГруппаСтраницы = Элементы.ГруппаСтраницы;
	ПараметрыАдаптациии.ЭлементСтраницаГлавное = Элементы.ГруппаГлавное;
	ПараметрыАдаптациии.ЭлементСтраницаДополнительно = Элементы.ГруппаДополнительно;
	ПараметрыАдаптациии.ЭлементСтраницаЗадачи = Элементы.ГруппаЗадачи;
	ПараметрыАдаптациии.ЭлементПредметы = Элементы.Предметы;
	ПараметрыАдаптациии.ЭлементПредметыКомандаДобавить = Элементы.ПредметыКонтекстноеМенюДобавитьПредмет;
	ПараметрыАдаптациии.ЭлементАктивныеЗадачи = Элементы.СписокАктивныхЗадач;
	ПараметрыАдаптациии.ЭлементЗадачиИПроцессы = Элементы.ДеревоЗадач;
	ПараметрыАдаптациии.ЭлементЗадачиИПроцессыРезультатВыполнения = Элементы.ДеревоЗадачРезультатВыполнения;
	ПараметрыАдаптациии.ЭлементГруппаИнструкции = Элементы.ГруппаИнструкции;
	ПараметрыАдаптациии.ЭлементЗаписатьИЗакрыть = Элементы.ФормаЗаписатьИЗакрыть;
	ПараметрыАдаптациии.ЭлементСтартИЗакрыть = Элементы.ФормаСтартИЗакрыть;
	МобильныйКлиентАдаптацияИнтерфейсаСервер.АдаптироватьЭлементыФормыКарточкиПроцесса(ЭтотОбъект, ПараметрыАдаптациии);
	
	Элементы.ГруппаМестоВремя.Видимость = Ложь;
	Элементы.МК_ГруппаВремяПроведения.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ДатаНачала, Элементы.МК_ГруппаНачало);
	Элементы.Переместить(Элементы.ДатаНачалаВремя, Элементы.МК_ГруппаНачало);
	Элементы.ДатаНачала.Заголовок = НСтр("ru = 'Начало'");
	Элементы.ДатаНачала.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ДатаНачала.РастягиватьПоГоризонтали = Истина;
	Элементы.ДатаНачалаВремя.РастягиватьПоГоризонтали = Ложь;
	
	Элементы.Переместить(Элементы.ДатаОкончания, Элементы.МК_ГруппаОкончание);
	Элементы.Переместить(Элементы.ДатаОкончанияВремя, Элементы.МК_ГруппаОкончание);
	Элементы.ДатаОкончания.Заголовок = НСтр("ru = 'Окончание'");
	Элементы.ДатаОкончания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ДатаОкончания.РастягиватьПоГоризонтали = Истина;
	Элементы.ДатаОкончанияВремя.РастягиватьПоГоризонтали = Ложь;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСпискаЗадачДляОтображенияМКПриИзменении(Команда)
	
	ЕстьРеквизит =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидСпискаЗадачДляОтображенияМК");
	
	Если ЕстьРеквизит Тогда
		
		ПоказыватьТекущие = (ЭтотОбъект.ВидСпискаЗадачДляОтображенияМК = "ЗадачиВРаботе");
		Элементы.СписокАктивныхЗадач.Видимость = ПоказыватьТекущие;
		Элементы.ДеревоЗадач.Видимость = Не ПоказыватьТекущие;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет заголовок элемента ГруппаИсполнители.
// Вызывается при изменении состава исполнителей.
//
&НаКлиенте
Процедура ОбновитьЗаголовокТаблицыИсполнителейМК() Экспорт
	
	Элементы.ГруппаИсполнителиМК.Заголовок =
		СтрШаблон("%1 (%2)", ЭтотОбъект.ЗаголовокГруппыИсполнителиМК, Объект.Исполнители.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
		РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Предметы

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	ПолучитьИнструкции();
	
	Если ВестиУчетПоПроектам
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначенияДокументооборот.
					ЗначениеРеквизитаОбъектаВПривилегированномРежиме(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДеревоПроцессовИЗадач

// Обновляет и разворачивает дерево процессов и задач.
//
&НаКлиенте
Процедура ОбновитьДеревоПроцессовЗадач() Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачи Тогда
		ЗаполнитьДеревоПроцессовИЗадач();
		РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоПроцессовИЗадач(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево процессов и задач.
//
&НаСервере
Процедура ЗаполнитьДеревоПроцессовИЗадач() Экспорт
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПроцессыИЗадачиПоПредмету(ЭтаФорма, Объект.Ссылка);
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
КонецПроцедуры

// Находит текущую списка СписокАктивныхЗадач в дереве задач.
//
&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	Если СрокиИсполненияПроцессов.ТребуетсяРасчетСроков(ЭтаФорма)
		Или ЗначениеЗаполнено(РеквизитТаблицаСИзмененнымСроком) Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтрокиСИзмененнымСроком;
		
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = 
			СрокиИсполненияПроцессов.НомерИтерацииДляРасчетаВКарточке(ЭтаФорма);
		
		ПараметрыДляРасчетаСроков.Смещение = 
			СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
		
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиПриглашения(Объект, ПараметрыДляРасчетаСроков);
		
		ПроверитьИзменениеСроковПроцесса();
		
	КонецЕсли;
	
	РеквизитТаблицаСИзмененнымСроком = "";
	ИндексСтрокиСИзмененнымСроком = 0;
	
	ОбновитьПризнакиИстекшихСроков();
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = РеквизитТаблица;
	ИндексСтрокиСИзмененнымСроком = ИндексСтроки;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	Прочитать();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Проверяет изменение сроков процесса и невыполненных задач.
//
&НаСервере
Процедура ПроверитьИзменениеСроковПроцесса()
	
	Если Не Объект.Стартован Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСроковДляПроверки = СрокиИсполненияПроцессов.СтруктураСроковПроцессаДляПроверкиИзменения();
	
	СтруктураСроковДляПроверки.Ссылка = Объект.Ссылка;
	
	СтруктураСроковДляПроверки.СрокИсполненияПроцесса = Объект.СрокИсполненияПроцесса;
	
	Для Каждого СтрИсполнитель Из Объект.Исполнители Цикл
		
		Если Не ЗначениеЗаполнено(СтрИсполнитель.ЗадачаИсполнителя) Тогда
			Продолжить;
		КонецЕсли;
			
			
		СтруктураСроковДляПроверки.СрокиИсполнителей.Вставить(
			СтрИсполнитель.ЗадачаИсполнителя, СтрИсполнитель.СрокИсполнения);
	КонецЦикла;
	
	СтруктураСроковДляПроверки.СрокиИсполнителей.Вставить(
		БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться, Объект.СрокОбработкиРезультатов);
		
	СрокиИсполненияПроцессов.ПроверитьИзменениеСроковПроцесса(
		Объект.Ссылка,
		СтруктураСроковДляПроверки,
		ЭтаФорма);
	
КонецПроцедуры

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения истек (Исполнители)'"),
		"Объект.Исполнители.СрокИсполненияИстек",
		"ИсполнителиСрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок обработки результатов истек'"),
		"СрокОбработкиРезультатовИстек",
		"СрокОбработкиРезультатовПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	ДатаИсполненияПоУмолчанию = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Объект.ДатаЗавершения) Тогда
		ДатаИсполненияПоУмолчанию = Объект.ДатаЗавершения;
	КонецЕсли;
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
		Объект.Исполнители, ДатаИсполненияПоУмолчанию, ДатыИсполненияУчастников);
	
	Если Объект.Завершен
		И Объект.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
		
		СрокОбработкиРезультатовИстек = Ложь;
	Иначе
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаУчастника(
			Объект.СрокОбработкиРезультатов,
			СрокОбработкиРезультатовИстек,
			ДатаИсполненияПоУмолчанию,
			"Автор",
			ДатыИсполненияУчастников);
	КонецЕсли;
	
	СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
		Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФоновыйИОтложенныйСтарт

&НаСервере
Процедура ОбновитьФормуПослеИзмененияНастроекОтложенногоСтарта() Экспорт
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	РеквизитТаблицаСИзмененнымСроком = "НастройкаСтарта";
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи) Экспорт
	
	РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
		Объект,
		Отказ,
		УникальныйИдентификатор,
		ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
		ЭтаФорма, Объект, ПараметрыЗаписи, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверкиЗаполненияНаСервереДляФоновогоСтарта(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервереДляФоновогоСтарта(Отказ) Экспорт
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Объект");
	
	ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессОбъект = РеквизитФормыВЗначение("Объект", Тип("БизнесПроцессОбъект.Приглашение"));
	
	Если Не ПроцессОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестныеВремена()
	
	Если ПараметрыПреобразованияМестногоВремени = Неопределено Тогда
		ПараметрыПреобразованияМестногоВремени = РаботаСЧасовымиПоясами.ПараметрыПреобразованияМестногоВремени();
		ПредставлениеМестногоЧасовогоПояса = ПараметрыПреобразованияМестногоВремени.ПредставлениеМестногоЧасовогоПояса;
	КонецЕсли;
	
	МестнаяДатаНачала = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаНачалаМероприятия,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаОкончания = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаОкончанияМероприятия,
		ПараметрыПреобразованияМестногоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВременаСеанса()
	
	Объект.ДатаНачалаМероприятия = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКВремениСеанса(
		МестнаяДатаНачала,
		ПараметрыПреобразованияМестногоВремени);
	Объект.ДатаОкончанияМероприятия = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКВремениСеанса(
		МестнаяДатаОкончания,
		ПараметрыПреобразованияМестногоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧасовыеПоясаУчастниковНаКлиенте()
	
	ЕстьСтрокиКОбновлению = Ложь;
	Для Каждого СтрокаИсполнителя Из Объект.Исполнители Цикл
		
		Если СтрокаИсполнителя.Исполнитель <> СтрокаИсполнителя.ИсполнительЧасовогоПояса Тогда
			СтрокаИсполнителя.ЧасовойПоясИсполнителя = "";
			СтрокаИсполнителя.ПредставлениеЧасовогоПояса = "";
		КонецЕсли;
		
		Если ТипЗнч(СтрокаИсполнителя.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СтрокаИсполнителя.Исполнитель)
			Или ЗначениеЗаполнено(СтрокаИсполнителя.ЧасовойПоясИсполнителя) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСтрокиКОбновлению = Истина;
		
	КонецЦикла;
	
	Если Не ЕстьСтрокиКОбновлению Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЧасовыеПоясаУчастниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЧасовыеПоясаУчастниковНаСервере()
	
	ПользователиДляОпределенияЧасовыхПоясов = Новый Массив;
	Для Каждого СтрокаИсполнитель Из Объект.Исполнители Цикл
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель)
			Или ЗначениеЗаполнено(СтрокаИсполнитель.ЧасовойПоясИсполнителя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПользователиДляОпределенияЧасовыхПоясов.Добавить(СтрокаИсполнитель.Исполнитель);
		
	КонецЦикла;
	
	ЧасовойПоясПоУмолчанию = РаботаСЧасовымиПоясами.ЧасовойПоясПоУмолчанию();
	ЧасовыеПоясаПользователей =
		РаботаСЧасовымиПоясами.ЧасовыеПоясаПользователей(ПользователиДляОпределенияЧасовыхПоясов);
	Для Каждого СтрокаИсполнитель Из Объект.Исполнители Цикл
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель)
			Или ЗначениеЗаполнено(СтрокаИсполнитель.ЧасовойПоясИсполнителя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИсполнитель.ЧасовойПоясИсполнителя = ЧасовыеПоясаПользователей[СтрокаИсполнитель.Исполнитель];
		Если Не ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса)
			И СтрокаИсполнитель.ЧасовойПоясИсполнителя = ЧасовойПоясПоУмолчанию Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИсполнитель.ПредставлениеЧасовогоПояса =
			РаботаСЧасовымиПоясами.ПредставлениеЧасовогоПоясаДО(СтрокаИсполнитель.ЧасовойПоясИсполнителя);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти