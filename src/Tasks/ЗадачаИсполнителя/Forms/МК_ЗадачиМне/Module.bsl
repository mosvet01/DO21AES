#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Подготовим заголовок
	ОсноваЗаголовка = НСтр("ru = 'Задачи мне'");
	ТочкаМаршрутаИзРабочегоСтолаРуководителя = Неопределено;
	Если Параметры.Свойство("ИмяБизнесПроцесса") Тогда
		
		ИмяБизнесПроцесса = Параметры.ИмяБизнесПроцесса;
		Если ИмяБизнесПроцесса = "Рассмотрение" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть;
			ОсноваЗаголовка = НСтр("ru = 'На рассмотрение'");
		ИначеЕсли ИмяБизнесПроцесса = "Согласование" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
			ОсноваЗаголовка = НСтр("ru = 'На согласование'");
		ИначеЕсли ИмяБизнесПроцесса = "Утверждение" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить;
			ОсноваЗаголовка = НСтр("ru = 'На утверждение'");
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытаИзФормыРабочийСтолРуководителя = Ложь;
	Если Параметры.Свойство("ОткрытаИзФормыРабочийСтолРуководителя") Тогда
		ОткрытаИзФормыРабочийСтолРуководителя = Параметры.ОткрытаИзФормыРабочийСтолРуководителя;
	КонецЕсли;
	
	КлючСохраненияНастроек = ИмяФормы + "/ТекущиеДанные";
	КлючНазначенияИспользования = "";
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда 
		
		КлючНазначенияИспользования = "ЗадачиМнеИзФормыРабочийСтолРуководителя";
		
		Элементы.Переместить(Элементы.СписокАвтор, Элементы.ПоляДанныеПерваяСтрока, Элементы.СписокСрокИсполнения);
		Элементы.СписокДата.Видимость = Ложь;
		Элементы.ПоляДанныеВтораяСтрока.Видимость = Ложь;
		Элементы.ПоляДанныеПерваяСтрока.Группировка = ГруппировкаКолонок.ВЯчейке;
		Элементы.СписокСостояниеАдресации.Видимость = Ложь;
		Элементы.СписокСостояниеАдресации.Видимость = Ложь;
		Элементы.СписокСостояниеКонтроля.Видимость = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.КлючОтбора) Тогда
			КлючНазначенияИспользования = Параметры.КлючОтбора + "ЗадачиМне";
		КонецЕсли;
		
	КонецЕсли;
	
	КлючСохраненияНастроек = СтрШаблон("%1%2/ТекущиеДанные",
								ИмяФормы,
								?(ПустаяСтрока(КлючНазначенияИспользования),"", "/" + КлючНазначенияИспользования));
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючСохраненияНастроек, "Настройки", Неопределено);
	Если НастройкиФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиФормы);
		Если ЗначениеЗаполнено(ЗадачиМнеВариантОтбора) Тогда
			ЭлементДляВыбора = ИмяЭлементаЗначенияОтбора(ЗадачиМнеВариантОтбора);
			Если ЭлементДляВыбора <> Неопределено Тогда
				Элементы[ЭлементДляВыбора].Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТочкаМаршрутаИзРабочегоСтолаРуководителя) Тогда
		ЗадачиМнеЗначениеОтбораПоТипуЗадачи = ТочкаМаршрутаИзРабочегоСтолаРуководителя;
		Элементы.ГруппаГруппировкаИОтбор.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Параметры динамического списка.
	УстановитьОбщиеПараметрыСпискаЗадачиМне();
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
	// Формат даты.
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy
		|H:mm'",
		"ДФ=dd.MM.yy");
	Элементы.СписокСрокИсполнения.Формат = ФорматДатыДляКолонок;
	Элементы.СписокДата.Формат = "ДФ='dd.MM.yy'";
	
	// Контроль.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Элементы.СписокСостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	ДопустимПоказВыполненных = Не ЗначениеЗаполнено(Параметры.КлючОтбора);
	Если ДопустимПоказВыполненных Тогда
		Элементы.ЗадачиМнеПоказатьВыполненные.Видимость = Истина;
		Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	КонецЕсли;
	
	Если ПустаяСтрока(ЗадачиМнеСортироватьПо) Тогда
		ЗадачиМнеСортироватьПо = "СрокИсполнения";
		ЗадачиМнеНаправлениеСортировки = "Возр";
	КонецЕсли;
	
	ПереключитьСортировку(ЗадачиМнеСортироватьПо, ЗадачиМнеНаправлениеСортировки, ЗадачиМнеСортироватьПо);
	СортироватьСписокПоКолонке(ЗадачиМнеСортироватьПо, ЭтотОбъект);
	
	УстановитьУсловноеОформление(ОткрытаИзФормыРабочийСтолРуководителя);
	
	ОбновитьСписокЗадачМнеСервер();
	
	ЗадачиМнеСписокТекстЗапросаНачальный = ЗадачиМнеСписок.ТекстЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена"
		Или ИмяСобытия = "Перенаправление_ЗадачаИсполнителя"
		Или ИмяСобытия = "ИзмененыРеквизитыНевыполненныхЗадач" Тогда
		
		ОбновитьСписокЗадачМне();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОбновитьСписокЗадачМне();
	
	КонецЕсли;
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗаписьНастроек", 5 * 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗадачиМнеСписокПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ЗадачиМнеСписок.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено
		И ТипЗнч(ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ДоступностьКомандыПринятьКИсполнению = Ложь;
		ДоступностьКомандыОтменитьПринятиеКИсполнению = Ложь;
		
		Если Не Элементы.ЗадачиМнеСписок.ТекущиеДанные.Выполнена Тогда
			
			ДоступностьКомандыОтменитьПринятиеКИсполнению = Элементы.ЗадачиМнеСписок.ТекущиеДанные.ПринятаКИсполнению;
			ДоступностьКомандыПринятьКИсполнению = НЕ ДоступностьКомандыОтменитьПринятиеКИсполнению;
			
		КонецЕсли;
		
		Элементы.ЗадачиМнеСписокКонтекстноеМенюПринятьКИсполнению.Видимость =
			ДоступностьКомандыПринятьКИсполнению;
		Элементы.ЗадачиМнеСписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Видимость =
			ДоступностьКомандыОтменитьПринятиеКИсполнению;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСписокОбработкаЗапросаОбновления()
	
	ОбновитьСписокЗадачМне();
	Элементы.ЗадачиМнеСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПеренаправить(Команда)
	
	ТекущаяСтрока = Элементы.ЗадачиМнеСписок.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ЗадачиМнеТекущаяЗадача = ТекущаяСтрока;
		
		ЗадачаВыполнена = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ЗадачиМнеТекущаяЗадача, "Выполнена");
	
		Если ЗадачаВыполнена Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Уже выполненную задачу нельзя перенаправить.'"));
			Возврат;
		КонецЕсли;
	
		БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачу(ЗадачиМнеТекущаяЗадача);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Отборы

&НаКлиенте
Процедура ЗадачиМнеВариантОтбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗадачиМнеВариантОтбора = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеВариантОтбора = ВыбранноеЗначение;
	СброситьЗначенияОтборов();
	
	ЭлементДляВыбора = ИмяЭлементаЗначенияОтбора(ЗадачиМнеВариантОтбора);
	Если ЭлементДляВыбора <> Неопределено Тогда
		Элементы[ЭлементДляВыбора].Видимость = Истина;
		ТекущийЭлемент = Элементы[ЭлементДляВыбора];
#Если МобильныйКлиент Тогда
		НачатьРедактированиеЭлемента();
#КонецЕсли
	КонецЕсли;
	
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаЗначенияОтбора(ЗадачиМнеВариантОтбора)
	
	ИмяЭлемента = Неопределено;
	
	Если ЗадачиМнеВариантОтбора = "ПоСроку" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоСроку";
		
	ИначеЕсли ЗадачиМнеВариантОтбора = "ПоАвтору" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоАвтору";
		
	ИначеЕсли ЗадачиМнеВариантОтбора = "ПоПредмету" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоПредмету";
		
	ИначеЕсли ЗадачиМнеВариантОтбора = "ПоПроекту" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоПроекту";
		
	ИначеЕсли ЗадачиМнеВариантОтбора = "ПоТипуЗадачи" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоТипуЗадачи";
		
	ИначеЕсли ЗадачиМнеВариантОтбора = "ПоВажности" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоВажности";
		
	ИначеЕсли ЗадачиМнеВариантОтбора = "ПоФлагу" Тогда
		ИмяЭлемента = "ЗадачиМнеЗначениеОтбораПоФлагу";
		
	КонецЕсли;
	
	Возврат ИмяЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ЗадачиМнеВариантОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеВариантОтбора = "";
	СброситьЗначенияОтборов();
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоСрокуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеЗначениеОтбораПоСроку = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоСроку = ВыбранноеЗначение;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоСрокуОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоСроку = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоАвторуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АвторыЗадач = АвторыЗадач();
	Если ЗначениеЗаполнено(АвторыЗадач) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = АвторыЗадач;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоАвторуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеЗначениеОтбораПоАвтору = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоАвтору = ВыбранноеЗначение;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоАвторуОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоАвтору = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоПредметуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыВыбора.Вставить("ЗадачиМнеПоказыватьВыполненные", ЗадачиМнеПоказыватьВыполненные);
	ПараметрыВыбора.Вставить("КлючОтбора", Параметры.КлючОтбора);
	ПараметрыВыбора.Вставить("СтрокаГруппировкиБезПредмета", СтрокаГруппировкиБезПредмета());
	ПараметрыВыбора.Вставить("СтрокаГруппировкиДокументы", СтрокаГруппировкиДокументы());
	ПараметрыВыбора.Вставить("ТекущийПользователь", ТекущийПользователь);
	Если ЗадачиМнеЗначениеОтбораПоПредметуСвойства <> Неопределено Тогда
		ПараметрыВыбора.Вставить("ТекущаяСтрока", ЗадачиМнеЗначениеОтбораПоПредметуСвойства.ВидПредмета);
	КонецЕсли;
	
	ОписаниеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораПредметаЗадачи", ЭтаФорма);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.МК_ВыборВидаПредметаЗадачи", ПараметрыВыбора, ЭтотОбъект
		,,,, ОписаниеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПредметаЗадачи(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоПредмету = РезультатВыбора.Представление;
	ЗадачиМнеЗначениеОтбораПоПредметуСвойства = Новый Структура("ВидПредмета, ЭтоГруппаВидов, ПодчиненныеВиды",
		РезультатВыбора.ВидПредмета, РезультатВыбора.ЭтоГруппаВидов, РезультатВыбора.ПодчиненныеВиды);
	
	УстановитьТекстЗапросаСпискаДляПрочихТиповПредметов();
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоПредметуОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоПредмету = Неопределено;
	ЗадачиМнеЗначениеОтбораПоПредметуСвойства = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоПроектуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеЗначениеОтбораПоПредмету = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоПроекту = ВыбранноеЗначение;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоПроектуОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоПроекту = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоТипуЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = ТочкиМаршрутовЗадач();
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоТипуЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеЗначениеОтбораПоТипуЗадачи = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоТипуЗадачи = ВыбранноеЗначение;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоТипуЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоТипуЗадачи = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоВажностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеЗначениеОтбораПоТипуЗадачи = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоВажности = ВыбранноеЗначение;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоВажностиОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоВажности = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоФлагуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеЗначениеОтбораПоТипуЗадачи = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеЗначениеОтбораПоФлагу = ВыбранноеЗначение;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеЗначениеОтбораПоФлагуОчистка(Элемент, СтандартнаяОбработка)
	
	ЗадачиМнеЗначениеОтбораПоФлагу = Неопределено;
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ЗадачиМне

&НаКлиенте
Процедура ЗадачиМнеПоказатьВыполненные(Команда)
	
	ЗадачиМнеПоказыватьВыполненные = Не ЗадачиМнеПоказыватьВыполненные;
	Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	
	УстановитьПараметрыЗадачиМнеСписок(ЭтотОбъект);
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
	ВыбраноЗадач = МассивЗадач.Количество();
	
	Если ВыбраноЗадач = 0 
		Или (ВыбраноЗадач = 1 И ТипЗнч(МассивЗадач[0]) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьСрокуИсполнения(Команда)
	
	ПереключитьСортировку(ЗадачиМнеСортироватьПо, ЗадачиМнеНаправлениеСортировки, "СрокИсполнения");
	СортироватьСписокПоКолонке("СрокИсполнения", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьДатеСоздания(Команда)
	
	ПереключитьСортировку(ЗадачиМнеСортироватьПо, ЗадачиМнеНаправлениеСортировки, "Дата");
	СортироватьСписокПоКолонке("Дата", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьПоФлагу(Команда)
	
	ПереключитьСортировку(ЗадачиМнеСортироватьПо, ЗадачиМнеНаправлениеСортировки, "КартинкаФлаг");
	СортироватьСписокПоКолонке("КартинкаФлаг", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопрос(Команда)
	
	ЗадачиМнеТекущаяЗадача = Элементы.ЗадачиМнеСписок.ТекущаяСтрока;
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Задача", ЗадачиМнеТекущаяЗадача);
	ЗначенияЗаполнения.Вставить("ВидВопроса", ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.Иное"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПоЗадаче(Команда)
	
	ЗадачиМнеТекущаяЗадача = Элементы.ЗадачиМнеСписок.ТекущаяСтрока;
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", ЗадачиМнеТекущаяЗадача);
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ВопросыВыполненияЗадачи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_РаботаСФлагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление(ОткрытаИзФормыРабочийСтолРуководителя)
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(ЗадачиМнеСписок.УсловноеОформление);
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		
		// Отключим красную подсветку просроченных задач.
		ПредставлениеЭлементаПросроченныеЗадачи = БизнесПроцессыИЗадачиКлиентСервер.ПолучитьПредставлениеУсловногоОформленияПросроченныхЗадач();
		Для Каждого ЭлементОформления из ЗадачиМнеСписок.УсловноеОформление.Элементы Цикл
			Если ЭлементОформления.Представление = ПредставлениеЭлементаПросроченныеЗадачи Тогда
				ЭлементОформления.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Отключим показ выполненных для руководителя по умолчанию.
		ЗадачиМнеПоказыватьВыполненные = Ложь;
		
	Иначе
		
		// Установим цвета второстепенных полей.
		Элементы.СписокАвтор.ЦветТекста = WebЦвета.Серый;
		Элементы.СписокДата.ЦветТекста = WebЦвета.Серый;
		
	КонецЕсли;
	
	МобильныйКлиентАдаптацияИнтерфейсаСервер.УстановитьПолюУсловноеОформлениеСкрытНеВидим(
		ЗадачиМнеСписок.УсловноеОформление, "КартинкаРезультатЗавершения", -1);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.УстановитьПолюУсловноеОформлениеСкрытНеВидим(
		ЗадачиМнеСписок.УсловноеОформление, "КартинкаФлаг", -1);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.УстановитьПолюУсловноеОформлениеСкрытНеВидим(
		ЗадачиМнеСписок.УсловноеОформление, "КартинкаСостояниеАдресации", -1);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.УстановитьПолюУсловноеОформлениеСкрытНеВидим(
		ЗадачиМнеСписок.УсловноеОформление, "КартинкаВажность", -1);
	МобильныйКлиентАдаптацияИнтерфейсаСервер.УстановитьПолюУсловноеОформлениеСкрытНеВидим(
		ЗадачиМнеСписок.УсловноеОформление, "КартинкаСостояниеКонтроля", 0);
		
	МобильныйКлиентАдаптацияИнтерфейсаСервер.УстановитьПолюУсловноеОформлениеСкрытНеВидим(
		ЗадачиМнеСписок.УсловноеОформление,
		"СрокИсполненияДляОтображенияВСписке",,
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	// Установим шрифт по размеру к принятым к исполнению задачам, но сохраним полужирным.
	Для Каждого ЭлементОформления из ЗадачиМнеСписок.УсловноеОформление.Элементы Цикл
		ЭлементОформления = ЭлементОформления.Оформление.Элементы.Найти("Font");
		Если ЭлементОформления.Значение = ШрифтыСтиля.НеПринятыеКИсполнениюЗадачи Тогда
			ЭлементОформления.Значение = Новый Шрифт(,8,Истина,,,);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок(ЗадачиМнеНовые, ЗадачиМнеПросроченные, ЗадачиМнеВсего)
	
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ТекстЗаголовка = НСтр("ru = '%1 (Новых: %2)'");
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ТекстЗаголовка = НСтр("ru = '%1 (Просроченных: %3)'");
	Иначе
		ТекстЗаголовка = НСтр("ru = '%1 (Всего: %4)'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрШаблон(
		ТекстЗаголовка,
		ОсноваЗаголовка,
		ЗадачиМнеНовые,
		ЗадачиМнеПросроченные,
		ЗадачиМнеВсего);
		
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачМне()
	
	БизнесПроцессыИЗадачиКлиент.ОбновитьПараметрыУсловногоОформленияПросроченныхЗадач(
		ЗадачиМнеСписок.УсловноеОформление);
		
	ОбновитьСписокЗадачМнеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачМнеСервер()
	
	ОбновитьИтогиПоЗадачамМне();
	Элементы.ЗадачиМнеСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоЗадачамМне()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиМнеВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ Задачи.Выполнена
		|					ТОГДА 0
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|						И Задачи.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|						И КОНЕЦПЕРИОДА(Задачи.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|					ТОГДА 1
		|			КОНЕЦ), 0) КАК ЗадачиМнеПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И (&ПоказыватьВыполненные = ИСТИНА
		|			ИЛИ Задачи.Выполнена = ЛОЖЬ)
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И (&ОтборПоТочкеМаршрута = ЛОЖЬ
		|			ИЛИ Задачи.ТочкаМаршрута = &ТочкаМаршрута)";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПоказыватьВыполненные", ЗадачиМнеПоказыватьВыполненные);
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаИзРабочегоСтолаРуководителя);
	Запрос.УстановитьПараметр("ОтборПоТочкеМаршрута", ЗначениеЗаполнено(ТочкаМаршрутаИзРабочегоСтолаРуководителя));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УстановитьЗаголовок(
		Выборка.ЗадачиМнеНовые,
		Выборка.ЗадачиМнеПросроченные,
		Выборка.ЗадачиМнеВсего);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбщиеПараметрыСпискаЗадачиМне() Экспорт
	
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'"));
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьДатуИВремяВСрокахЗадач",
		ИспользоватьДатуИВремяВСрокахЗадач);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыЗадачиМнеСписок(Форма)
	
	// Установлен вариант отбора - отметим это заголовке группы настроек.
	Форма.ЗаголовокГруппыНастройкиСписка = ?(ЗначениеЗаполнено(Форма.ЗадачиМнеВариантОтбора), "*", "");
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"ПоказыватьВыполненные",
			Форма.ЗадачиМнеПоказыватьВыполненные,
			Истина);
	
	// Настраиваемые отборы
	// По сроку.
	ЗначениеОтбораПоСроку = Форма.ЗадачиМнеЗначениеОтбораПоСроку;
	СрокТочный = Неопределено;
	СрокНачало = Неопределено;
	СрокОкончание = Неопределено;
#Если Клиент Тогда
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
#Иначе
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
#КонецЕсли
	Если ЗначениеОтбораПоСроку = "СрокНеУказан" Тогда
		СрокТочный = Дата(1,1,1);
	ИначеЕсли ЗначениеОтбораПоСроку = "Просрочено" Тогда
		СрокНачало = Дата(1,1,1);
		СрокОкончание = ТекущаяДатаСеанса;
	ИначеЕсли ЗначениеОтбораПоСроку = "Сегодня" Тогда
		Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		СрокНачало = ТекущаяДатаСеанса;
		СрокОкончание = Сегодня.ДатаОкончания;
	ИначеЕсли ЗначениеОтбораПоСроку = "ЭтаНеделя" Тогда
		Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
		СрокНачало = Сегодня.ДатаОкончания;
		СрокОкончание = ЭтаНеделя.ДатаОкончания;
	ИначеЕсли ЗначениеОтбораПоСроку = "СледующаяНеделя" Тогда
		ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
		СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
		СрокНачало = ЭтаНеделя.ДатаОкончания;
		СрокОкончание = СледующаяНеделя.ДатаОкончания;
	ИначеЕсли ЗначениеОтбораПоСроку = "Позднее" Тогда
		СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
		СрокНачало = СледующаяНеделя.ДатаОкончания;
		СрокОкончание = Дата(3999, 12, 31);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "СрокТочный", СрокТочный, СрокТочный <> Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "СрокНачало", СрокНачало, СрокНачало <> Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "СрокОкончание", СрокОкончание, СрокОкончание <> Неопределено);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"Автор",
			Форма.ЗадачиМнеЗначениеОтбораПоАвтору,
			ЗначениеЗаполнено(Форма.ЗадачиМнеЗначениеОтбораПоАвтору));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"Проект",
			Форма.ЗадачиМнеЗначениеОтбораПоПроекту,
			ЗначениеЗаполнено(Форма.ЗадачиМнеЗначениеОтбораПоПроекту));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"ТочкаМаршрута",
			Форма.ЗадачиМнеЗначениеОтбораПоТипуЗадачи,
			ЗначениеЗаполнено(Форма.ЗадачиМнеЗначениеОтбораПоТипуЗадачи));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"Важность",
			Форма.ЗадачиМнеЗначениеОтбораПоВажности,
			ЗначениеЗаполнено(Форма.ЗадачиМнеЗначениеОтбораПоВажности));
	
	ЗадачиМнеЗначениеОтбораПоФлагу = Форма.ЗадачиМнеЗначениеОтбораПоФлагу;
	Флаг = Неопределено;
	ЛюбойФлаг = Неопределено;
	Если ЗадачиМнеЗначениеОтбораПоФлагу = "ЛюбойФлаг" Тогда
		ЛюбойФлаг = Истина;
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "БезФлага" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка");
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "КрасныйФлаг" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный");
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "СинийФлаг" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий");
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "ЖелтыйФлаг" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый");
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "ЗеленыйФлаг" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый");
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "ОранжевыйФлаг" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый");
	ИначеЕсли ЗадачиМнеЗначениеОтбораПоФлагу = "ЛиловыйФлаг" Тогда
		Флаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"Флаг",
			Флаг,
			Флаг <> Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ЗадачиМнеСписок,
			"ЛюбойФлаг",
			ЛюбойФлаг,
			ЛюбойФлаг <> Неопределено);
	
	
	// Вид предмета задачи.
	// Отключим параметры отбора по предмету.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "БезПредмета", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ПодчиненныеВидыПредметовВходящиеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ВидПредметаВходящиеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ПодчиненныеВидыПредметовВнутренниеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ВидПредметаВнутренниеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ПодчиненныеВидыПредметовИсходящиеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ВидПредметаИсходящиеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ВидПредметаМероприятия", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ВидПредметаПроект", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ВсеДокументы", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ЗадачиМнеСписок, "ПредметПрочийТипДанныхПереопределяемый", Неопределено, Ложь);
		
	//ТекущийВидПредмета = Форма.ЗадачиМнеЗначениеОтбораПоПредмету;
	ТекущийВидПредметаСвойства = Форма.ЗадачиМнеЗначениеОтбораПоПредметуСвойства;
	Если ТекущийВидПредметаСвойства <> Неопределено Тогда
		
		ТекущийВидПредмета = ТекущийВидПредметаСвойства.ВидПредмета;
		ТекущийВидПредметаТип = ТипЗнч(ТекущийВидПредмета);
		Если ТекущийВидПредметаТип <> Тип("Строка") Тогда
			
			Если ТипЗнч(ТекущийВидПредметаСвойства) <> Тип("Структура") Тогда
				ВызватьИсключение НСтр("ru = 'Неожиданный тип значения ЗадачиМнеТекущийВидПредметаСвойства'");
			КонецЕсли;
			
			ИмяПараметраПодчиненныеВиды = "";
			ИмяПараметраВид = "";
			
			Если ТекущийВидПредметаТип = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ИмяПараметраПодчиненныеВиды = "ПодчиненныеВидыПредметовВнутренниеДокументы";
				ИмяПараметраВид = "ВидПредметаВнутренниеДокументы";
			ИначеЕсли ТекущийВидПредметаТип = Тип("СправочникСсылка.ВидыВходящихДокументов")
				Или ТекущийВидПредмета = "Справочник.ВидыВходящихДокументов" Тогда
				ИмяПараметраПодчиненныеВиды = "ПодчиненныеВидыПредметовВходящиеДокументы";
				ИмяПараметраВид = "ВидПредметаВходящиеДокументы";
			ИначеЕсли ТекущийВидПредметаТип = Тип("СправочникСсылка.ВидыИсходящихДокументов")
				Или ТекущийВидПредмета = "Справочник.ВидыИсходящихДокументов" Тогда
				ИмяПараметраПодчиненныеВиды = "ПодчиненныеВидыПредметовИсходящиеДокументы";
				ИмяПараметраВид = "ВидПредметаИсходящиеДокументы";
			ИначеЕсли ТекущийВидПредметаТип = Тип("СправочникСсылка.ВидыМероприятий")
				Или ТекущийВидПредмета = "Справочник.ВидыМероприятий" Тогда
				ИмяПараметраВид = "ВидПредметаМероприятия";
			ИначеЕсли ТекущийВидПредметаТип = Тип("СправочникСсылка.ВидыПроектов")
				Или ТекущийВидПредмета = "Справочник.ВидыПроектов" Тогда
				ИмяПараметраВид = "ВидПредметаПроект";
			КонецЕсли;
			
			Если ТекущийВидПредметаСвойства.ЭтоГруппаВидов Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					Форма.ЗадачиМнеСписок,
					ИмяПараметраПодчиненныеВиды,
					ТекущийВидПредметаСвойства.ПодчиненныеВиды);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					Форма.ЗадачиМнеСписок,
					ИмяПараметраВид,
					ТекущийВидПредмета);
			КонецЕсли;
			
		ИначеЕсли ТекущийВидПредмета = СтрокаГруппировкиБезПредмета() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Форма.ЗадачиМнеСписок,
				"БезПредмета",
				Истина);
			
		ИначеЕсли ТекущийВидПредмета = СтрокаГруппировкиДокументы() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					Форма.ЗадачиМнеСписок,
					"ВсеДокументы",
					Истина);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Форма.ЗадачиМнеСписок,
				"ПредметПрочийТипДанныхПереопределяемый",
				Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСпискаДляПрочихТиповПредметов()
	
	Если ЗадачиМнеЗначениеОтбораПоПредметуСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидПредмета = ЗадачиМнеЗначениеОтбораПоПредметуСвойства.ВидПредмета;
	Если ВидПредмета = Неопределено
		Или ТипЗнч(ВидПредмета) <> Тип("Строка") Тогда
		// Сохраненный вид предмета не найден.
		// Или вид задан ссылкой.
		Возврат;
		
	ИначеЕсли ВидПредмета = "Справочник.ВидыМероприятий" Тогда
		ЗадачиМнеСписок.ТекстЗапроса = 
			СтрЗаменить(ЗадачиМнеСписокТекстЗапросаНачальный,
				"&ПредметПрочийТипДанныхПереопределяемый",
				"&ПредметПрочийТипДанныхПереопределяемый И (ПредметыЗадач.Предмет ССЫЛКА Справочник.Мероприятия)");
	ИначеЕсли ВидПредмета = "Справочник.ВидыПроектов" Тогда
		ЗадачиМнеСписок.ТекстЗапроса = 
			СтрЗаменить(ЗадачиМнеСписокТекстЗапросаНачальный,
				"&ПредметПрочийТипДанныхПереопределяемый",
				"&ПредметПрочийТипДанныхПереопределяемый И (ПредметыЗадач.Предмет ССЫЛКА Справочник.Проекты)");
	ИначеЕсли Метаданные.НайтиПоПолномуИмени(ВидПредмета) <> Неопределено Тогда
		
		ЗадачиМнеСписок.ТекстЗапроса = 
			СтрЗаменить(ЗадачиМнеСписокТекстЗапросаНачальный,
				"&ПредметПрочийТипДанныхПереопределяемый",
				СтрШаблон("&ПредметПрочийТипДанныхПереопределяемый И (ПредметыЗадач.Предмет ССЫЛКА %1)", ВидПредмета));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуРежимуСортировки(Форма)
	
	Форма.Элементы.ЗадачиМнеСортироватьПоСрокуИсполнения.Пометка = Ложь;
	Форма.Элементы.ЗадачиМнеСортироватьПоСрокуИсполнения.Заголовок = НСтр("ru = 'Срок'");
	
	Форма.Элементы.ЗадачиМнеСортироватьПоДатеСоздания.Пометка = Ложь;
	Форма.Элементы.ЗадачиМнеСортироватьПоДатеСоздания.Заголовок = НСтр("ru = 'Дата создания'");
	
	Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Пометка = Ложь;
	Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Заголовок = НСтр("ru = 'Флаг'");
	
	Если Форма.ЗадачиМнеСортироватьПо = "СрокИсполнения" Тогда
		Форма.Элементы.ЗадачиМнеСортироватьПоСрокуИсполнения.Пометка = Истина;
		Форма.Элементы.ЗадачиМнеСортироватьПоСрокуИсполнения.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Срок'"),
				Форма.ЗадачиМнеНаправлениеСортировки);
	ИначеЕсли Форма.ЗадачиМнеСортироватьПо = "Дата" Тогда
		Форма.Элементы.ЗадачиМнеСортироватьПоДатеСоздания.Пометка = Истина;
		Форма.Элементы.ЗадачиМнеСортироватьПоДатеСоздания.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Дата создания'"),
				Форма.ЗадачиМнеНаправлениеСортировки);
	ИначеЕсли Форма.ЗадачиМнеСортироватьПо = "КартинкаФлаг" Тогда
		Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Пометка = Истина;
		Форма.Элементы.ЗадачиМнеСортироватьПоФлагу.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Флаг'"),
				Форма.ЗадачиМнеНаправлениеСортировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСортировку(ТекущееЗначениеСортироватьПо, НаправлениеСортировки, ИмяКолонки)
	
	Если ТекущееЗначениеСортироватьПо = ИмяКолонки Тогда
		Если НаправлениеСортировки = "Возр" Тогда
			НаправлениеСортировки = "Убыв";
		Иначе
			НаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		ТекущееЗначениеСортироватьПо = ИмяКолонки;
		НаправлениеСортировки = "Возр";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьСписокПоКолонке(ИмяКолонки, Форма)
	
	Форма.ЗадачиМнеСписок.Порядок.Элементы.Очистить();
	Для Каждого ПользовательскаяНастройка Из Форма.ЗадачиМнеСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ПользовательскаяНастройка) <> Тип("ПорядокКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскаяНастройка.Элементы.Очистить();
		
		ЭлементПорядка = ПользовательскаяНастройка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		ЭлементПорядка.ТипУпорядочивания = ?(Форма.ЗадачиМнеНаправлениеСортировки = "Возр",
			НаправлениеСортировкиКомпоновкиДанных.Возр,
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		
	КонецЦикла;
	
	УстановитьПометкуРежимуСортировки(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	ИтоговыйМассивЗадач = Новый Массив;
	
	Если ТипЗнч(Элементы.ЗадачиМнеСписок.ТекущаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ИтоговыйМассивЗадач.Добавить(Элементы.ЗадачиМнеСписок.ТекущаяСтрока);
	КонецЕсли;
	
	Результат = РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ИтоговыйМассивЗадач, Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьЗначенияОтборов()

	ЗадачиМнеЗначениеОтбораПоСроку = Неопределено;
	ЗадачиМнеЗначениеОтбораПоАвтору = Неопределено;
	ЗадачиМнеЗначениеОтбораПоПредмету = Неопределено;
	ЗадачиМнеЗначениеОтбораПоПроекту = Неопределено;
	ЗадачиМнеЗначениеОтбораПоТипуЗадачи = Неопределено;
	ЗадачиМнеЗначениеОтбораПоВажности = Неопределено;
	ЗадачиМнеЗначениеОтбораПоФлагу = Неопределено;
	
	Для Каждого Элемент Из Элементы.ГруппаЗначениеОтбора.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АвторыЗадач()
	
	ОбщееКоличествоЗадач = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Автор КАК Автор,
		|	Пользователи.Представление КАК Представление
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО Задачи.Автор = Пользователи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	Задачи.Автор,
		|	Пользователи.Представление
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Представление";
	
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Автор, Выборка.Представление);
	КонецЦикла;
	
	Результат.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТочкиМаршрутовЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.ТочкаМаршрута КАК ТочкаМаршрута,
		|	Задачи.ТочкаМаршрута.Представление КАК Представление
		//|	,КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	Задачи.ТочкаМаршрута,
		|	Задачи.ТочкаМаршрута.Представление";
		
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеТочкиМаршрута = Выборка.Представление;
		ТочкаМаршрута = Выборка.ТочкаМаршрута;
		Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
			ПредставлениеТочкиМаршрута = НСтр("ru = 'Утвердить / Подписать'");
		ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
			ПредставлениеТочкиМаршрута = НСтр("ru = 'Ознакомиться с результатом утверждения / подписи'");
		КонецЕсли;
		
		Результат.Добавить(ТочкаМаршрута, ПредставлениеТочкиМаршрута);
		
	КонецЦикла;
	
	Результат.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаГруппировкиБезПредмета()
	
	Возврат НСтр("ru = 'Без предмета'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаГруппировкиДокументы()
	
	Возврат НСтр("ru = 'Документы'");
	
КонецФункции

&НаКлиенте
Процедура ЗаписьНастроек()
	
	Настройки = Новый Структура(
		"ЗадачиМнеВариантОтбора,
		|ЗадачиМнеЗначениеОтбораПоАвторуЗадачиМнеЗначениеОтбораПоВажности,
		|ЗадачиМнеЗначениеОтбораПоПредмету,
		|ЗадачиМнеЗначениеОтбораПоПредметуСвойства,
		|ЗадачиМнеЗначениеОтбораПоПроекту,
		|ЗадачиМнеЗначениеОтбораПоСроку,
		|ЗадачиМнеЗначениеОтбораПоТипуЗадачи,
		|ЗадачиМнеЗначениеОтбораПоФлагу,
		|ЗадачиМнеНаправлениеСортировки,
		|ЗадачиМнеСортироватьПо,ЗадачиМнеПоказыватьВыполненные");
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	СохранитьНастройкиСервер(КлючСохраненияНастроек, Настройки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСервер(КлючСохраненияНастроек, Настройки, УникальныйИдентификатор)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючСохраненияНастроек, "Настройки", Настройки);
	
КонецПроцедуры

#КонецОбласти
