
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда 
		Строки1 = ЗадачиМнеПредметы.ПолучитьЭлементы();
		Для Каждого Строка1 Из Строки1 цикл
			Строки2 = Строка1.ПолучитьЭлементы();
			Для Каждого Строка2 Из Строки2 Цикл
				Если Строка2.ВидПредмета = Параметры.ТекущаяСтрока Тогда 
					Элементы.Дерево.ТекущаяСтрока = Строка2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидПредмета) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОВыборе(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДерево()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоПредметы = РеквизитФормыВЗначение("ЗадачиМнеПредметы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПредметыЗадач.Предмет, НЕОПРЕДЕЛЕНО) КАК Предмет
		|ПОМЕСТИТЬ ВсеПредметы
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
		|		ПО Задачи.Ссылка = ПредметыЗадач.Ссылка
		|			И (ПредметыЗадач.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ВидПредмета КАК ВидПредмета,
		|	ВложенныйЗапрос.ПредставлениеВидаПредмета КАК ПредставлениеВидаПредмета,
		|	ВложенныйЗапрос.УчитыватьСуммуДокумента КАК УчитыватьСуммуДокумента,
		|	ВложенныйЗапрос.УчитыватьСрокДействия КАК УчитыватьСрокДействия,
		|	ВложенныйЗапрос.ВестиУчетПоКонтрагентам КАК ВестиУчетПоКонтрагентам,
		|	ВложенныйЗапрос.ВестиУчетПоОрганизациям КАК ВестиУчетПоОрганизациям,
		|	ВложенныйЗапрос.ИспользоватьСрокИсполнения КАК ИспользоватьСрокИсполнения,
		|	ВложенныйЗапрос.ЯвляетсяОбращениемОтГраждан КАК ЯвляетсяОбращениемОтГраждан
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.Ссылка
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.Ссылка
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.Ссылка
		|			КОГДА НЕ ВидыМероприятий.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыМероприятий.Ссылка
		|			КОГДА НЕ ВидыПроектов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыПроектов.Ссылка
		|			КОГДА ВсеПредметы.Предмет = НЕОПРЕДЕЛЕНО
		|				ТОГДА &БезПредметаСтрока
		|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ВсеПредметы.Предмет)
		|		КОНЕЦ КАК ВидПредмета,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.Представление
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.Представление
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.Представление
		|			КОГДА НЕ ВидыМероприятий.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыМероприятий.Представление
		|			КОГДА НЕ ВидыПроектов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыПроектов.Представление
		|			КОГДА ВсеПредметы.Предмет = НЕОПРЕДЕЛЕНО
		|				ТОГДА &БезПредметаСтрока
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК ПредставлениеВидаПредмета,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.УчитыватьСуммуДокумента
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.УчитыватьСуммуДокумента
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.УчитыватьСуммуДокумента
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК УчитыватьСуммуДокумента,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.УчитыватьСрокДействия
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК УчитыватьСрокДействия,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.ВестиУчетПоКонтрагентам
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ВестиУчетПоКонтрагентам,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.ВестиУчетПоОрганизациям
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ВестиУчетПоОрганизациям,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.ИспользоватьСрокИсполнения
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.ИспользоватьСрокИсполнения
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ИспользоватьСрокИсполнения,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.ЯвляетсяОбращениемОтГраждан
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ЯвляетсяОбращениемОтГраждан
		|	ИЗ
		|		ВсеПредметы КАК ВсеПредметы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.ВнутренниеДокументы).ВидДокумента = ВидыВнутреннихДокументов.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.ВходящиеДокументы).ВидДокумента = ВидыВходящихДокументов.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.ИсходящиеДокументы).ВидДокумента = ВидыИсходящихДокументов.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыМероприятий КАК ВидыМероприятий
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.Мероприятия).ВидМероприятия = ВидыМероприятий.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПроектов КАК ВидыПроектов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.Проекты).ВидПроекта = ВидыПроектов.Ссылка)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидПредмета,
		|	ВложенныйЗапрос.ПредставлениеВидаПредмета,
		|	ВложенныйЗапрос.УчитыватьСуммуДокумента,
		|	ВложенныйЗапрос.УчитыватьСрокДействия,
		|	ВложенныйЗапрос.ВестиУчетПоКонтрагентам,
		|	ВложенныйЗапрос.ВестиУчетПоОрганизациям,
		|	ВложенныйЗапрос.ИспользоватьСрокИсполнения,
		|	ВложенныйЗапрос.ЯвляетсяОбращениемОтГраждан";
	
	ДопУсловия = "";
	Если Не Параметры.ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("БезПредметаСтрока", Параметры.СтрокаГруппировкиБезПредмета);
	Запрос.УстановитьПараметр("ТекущийПользователь", Параметры.ТекущийПользователь);
	
	СтрокиВидовПредметов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	
	КэшВидовПредметов.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементыКОбработке = Новый Массив;
		ЭлементыКОбработке.Добавить(Выборка.ВидПредмета);
		
		ТипВидаПредмета = ТипЗнч(Выборка.ВидПредмета);
		Если ТипВидаПредмета = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТипВидаПредмета = Тип("СправочникСсылка.ВидыВходящихДокументов")
			Или ТипВидаПредмета = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			ЭлементыКОбработке.Вставить(0, Параметры.СтрокаГруппировкиДокументы);
		ИначеЕсли ТипВидаПредмета <> Тип("Строка") И ТипВидаПредмета <> Тип("Тип") Тогда
			// Вид мероприятия, проекта.
			ЭлементыКОбработке.Вставить(0, ТипЗнч(Выборка.ВидПредмета));
		КонецЕсли;
		
		СтрокаРодителя = ДеревоПредметы;
		Для Каждого Эл Из ЭлементыКОбработке Цикл 
			
			Стр = СтрокиВидовПредметов[Эл];
			Если Стр = Неопределено Тогда
				Стр = СтрокаРодителя.Строки.Добавить();
				СтрокиВидовПредметов[Эл] = Стр;
				Стр.ВидПредмета = Эл;
				Если Эл = Выборка.ВидПредмета И ЗначениеЗаполнено(Выборка.ПредставлениеВидаПредмета) Тогда
					Стр.Представление = Выборка.ПредставлениеВидаПредмета;
				ИначеЕсли ТипЗнч(Эл) = Тип("Тип") Тогда
					МетаданныеПоТипу = Метаданные.НайтиПоТипу(Эл);
					Если МетаданныеПоТипу <> Неопределено Тогда
						Стр.ВидПредмета = МетаданныеПоТипу.ПолноеИмя();
						Если МетаданныеПоТипу = Метаданные.Справочники.ВидыВнутреннихДокументов Тогда
							Стр.Представление = НСтр("ru = 'Документы внутренние'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыВходящихДокументов Тогда
							Стр.Представление = НСтр("ru = 'Документы входящие'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыИсходящихДокументов Тогда
							Стр.Представление = НСтр("ru = 'Документы исходящие'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыМероприятий Тогда
							Стр.Представление = НСтр("ru = 'Мероприятия'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыПроектов Тогда
							Стр.Представление = НСтр("ru = 'Проекты'");
						Иначе
							Стр.Представление = ?(ЗначениеЗаполнено(МетаданныеПоТипу.ПредставлениеСписка),
								МетаданныеПоТипу.ПредставлениеСписка, МетаданныеПоТипу.Синоним);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Представление) Тогда
					Стр.Представление = Строка(Эл);
				КонецЕсли;
				
				// Добавление в кэш.
				СтрКэша = КэшВидовПредметов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрКэша, Выборка);
				СтрКэша.УникальныйИдентификатор = Стр.ВидПредмета;
				СтрКэша.ВидПредмета = Стр.ВидПредмета;
				
				Если ЗначениеЗаполнено(Стр.ВидПредмета) Тогда
					
					Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Стр.ВидПредмета) Тогда
						СтрКэша.УникальныйИдентификатор = Стр.ВидПредмета.УникальныйИдентификатор();
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;
			//Стр.Количество = Стр.Количество + Выборка.Количество;
			СтрокаРодителя = Стр;
			Если Эл <> Выборка.ВидПредмета И ТипЗнч(Эл) = ТипЗнч(Выборка.ВидПредмета) Тогда
				Стр.ЭтоГруппаВидов = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДеревоПредметы.Строки.Сортировать("Представление Возр", Истина);
	
	// Заполнение подчиненных видов для групп.
	ТипыПодчиненныхВидов = Новый Соответствие;
	ТипыПодчиненныхВидов[Тип("СправочникСсылка.ВидыВнутреннихДокументов")] = Истина;
	ТипыПодчиненныхВидов[Тип("СправочникСсылка.ВидыВходящихДокументов")] = Истина;
	ТипыПодчиненныхВидов[Тип("СправочникСсылка.ВидыИсходящихДокументов")] = Истина;
	
	ВсеСтрокиКОработке = Новый Массив;
	СтрокиПодчиненныхВидов = Новый Массив;
	Для Каждого СтрДерева Из ДеревоПредметы.Строки Цикл
		ВсеСтрокиКОработке.Добавить(СтрДерева);
	КонецЦикла;
	Пока ВсеСтрокиКОработке.Количество() > 0 Цикл
		ТекущаяСтрока = ВсеСтрокиКОработке[0];
		Для Каждого СтрДерева Из ТекущаяСтрока.Строки Цикл
			ВсеСтрокиКОработке.Добавить(СтрДерева);
		КонецЦикла;
		Если Не ТекущаяСтрока.ЭтоГруппаВидов
			И ТипыПодчиненныхВидов[ТипЗнч(ТекущаяСтрока.ВидПредмета)] <> Неопределено Тогда
			Родитель = ТекущаяСтрока.Родитель;
			Пока Родитель <> Неопределено И Родитель.ЭтоГруппаВидов Цикл
				Если Родитель.ПодчиненныеВиды = Неопределено Тогда
					Родитель.ПодчиненныеВиды = Новый Массив;
				КонецЕсли;
				Родитель.ПодчиненныеВиды.Добавить(ТекущаяСтрока.ВидПредмета);
				Родитель = Родитель.Родитель;
			КонецЦикла;
		КонецЕсли;
		ВсеСтрокиКОработке.Удалить(0);
	КонецЦикла;
	
	// Поиск дублей, уточнение представления.
	НайденныеСтроки = ДеревоПредметы.Строки.НайтиСтроки(
		Новый Структура("ВидПредмета", Параметры.СтрокаГруппировкиДокументы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаДокументы = НайденныеСтроки[0];
		СтрокиПоПредставлениям = Новый Соответствие;
		
		Для Каждого Стр Из СтрокаДокументы.Строки Цикл
			МассивСтрокСПредставлением = СтрокиПоПредставлениям[Стр.Представление];
			Если МассивСтрокСПредставлением = Неопределено Тогда
				СтрокиПоПредставлениям[Стр.Представление] = Новый Массив;
				МассивСтрокСПредставлением = СтрокиПоПредставлениям[Стр.Представление];
			КонецЕсли;
			МассивСтрокСПредставлением.Добавить(Стр);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтрокиПоПредставлениям Цикл
			
			СтрокиСОдинаковымНаименованием = КлючИЗначение.Значение;
			Если СтрокиСОдинаковымНаименованием.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			УточненияПредставленийСтрок = Новый Соответствие;
			ТипыВидовПредметов = Новый Соответствие;
			Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
				ТипВидаПредмета = ТипЗнч(Стр.ВидПредмета);
				ПредставлениеТипа = Строка(ТипВидаПредмета);
				Если ТипВидаПредмета = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
					ПредставлениеТипа = НСтр("ru = 'внутр.'");
				ИначеЕсли ТипВидаПредмета = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
					ПредставлениеТипа = НСтр("ru = 'вх.'");
				ИначеЕсли ТипВидаПредмета = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
					ПредставлениеТипа = НСтр("ru = 'исх.'");
				КонецЕсли;
				ТипыВидовПредметов[ТипВидаПредмета] = ПредставлениеТипа;
			КонецЦикла;
			Если ТипыВидовПредметов.Количество() > 1 Тогда
				// Имеет смысл уточнение по типу.
				Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
					ПредставлениеТипа = ТипыВидовПредметов[ТипЗнч(Стр.ВидПредмета)];
					УточненияПредставленийСтрок[Стр] = ПредставлениеТипа;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипыВидовПредметов.Количество() < СтрокиСОдинаковымНаименованием.Количество() Тогда
				РодителиВидовПредметов = Новый Соответствие;
				Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
					Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ВидПредмета, "Родитель");
					РодителиВидовПредметов[Родитель] = Истина;
				КонецЦикла;
				Если РодителиВидовПредметов.Количество() > 1 Тогда
					// Имеет смысл уточнение по родителю.
					Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
						ПолныйПутьРодителя = "";
						ВсеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Стр.ВидПредмета);
						Если ВсеРодители.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого ТекущийРодитель Из ВсеРодители Цикл
							ПолныйПутьРодителя = СокрЛП(Строка(ТекущийРодитель)) +
								?(ПолныйПутьРодителя = "", "", "\") + ПолныйПутьРодителя;
						КонецЦикла;
						Уточнение = УточненияПредставленийСтрок[Стр];
						Если Уточнение = Неопределено Тогда
							Уточнение = ПолныйПутьРодителя;
						Иначе
							Уточнение = Уточнение + ", " + ПолныйПутьРодителя;
						КонецЕсли;
						УточненияПредставленийСтрок[Стр] = Уточнение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаИУточнение Из УточненияПредставленийСтрок Цикл
				Стр = СтрокаИУточнение.Ключ;
				Уточнение = СтрокаИУточнение.Значение;
				Если Уточнение <> Неопределено Тогда
					Стр.Представление = СтрШаблон ("%1 (%2)", Стр.Представление, Уточнение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПредметы, "ЗадачиМнеПредметы");
	
КонецПроцедуры

#КонецОбласти
