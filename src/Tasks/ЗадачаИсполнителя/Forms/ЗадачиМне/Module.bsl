
#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатИзмененияПараметровПроцесса;

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ИмяЭтойФормы = "Задачи.ЗадачаИсполнителя.Форма.ФормаСписка";
	
	ИспользоватьОграниченияПравДоступа = 
		ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа");
	
	ОсноваЗаголовка = НСтр("ru = 'Задачи мне'");
	
	Если Параметры.Свойство("ОткрытаИзФормыРабочийСтолРуководителя") Тогда
		ОткрытаИзФормыРабочийСтолРуководителя = Параметры.ОткрытаИзФормыРабочийСтолРуководителя;
	КонецЕсли;
	
	КлючСохраненияНастроек = ИмяФормы + "/ТекущиеДанные";
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда 
		
		КлючНазначенияИспользования = "ЗадачиМнеИзФормыРабочийСтолРуководителя";
		КлючСохраненияНастроек = ИмяФормы + "/" + КлючНазначенияИспользования + "/ТекущиеДанные";
		
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		
		ЗадачиМнеВидГруппировки = "";
		ПоказыватьОбластьГруппировки = Ложь;
		
	Иначе
		
		Элементы.КоманднаяПанельИзРабСтолаРуководителя.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(Параметры.КлючОтбора) Тогда
			КлючНазначенияИспользования = Параметры.КлючОтбора + "ЗадачиМне";
			КлючСохраненияНастроек = ИмяФормы + "/" + КлючНазначенияИспользования + "/ТекущиеДанные";
		КонецЕсли;
		
	КонецЕсли;
	
	ФактическийИсполнительЗадач = Константы.ФактическийИсполнительЗадач.Получить();
	
	ИспользоватьФоновоеВыполнениеЗадач = ВыполнениеЗадачСервер.ИспользоватьФоновоеВыполнениеЗадач();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	
	ВсеЭлементыСДатойИСроком = Новый Массив;
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.СписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.СписокСрокИсполнения);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ВнутренниеДокументыСписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ВнутренниеДокументыСписокСрокИсполненияДляОтображенияВСписке);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ВходящиеДокументыСписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ВходящиеДокументыСписокСрокИсполненияДляОтображенияВСписке);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ИсходящиеДокументыСписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ИсходящиеДокументыСписокСрокИсполненияДляОтображенияВСписке);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.МероприятияСписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.МероприятияСписокСрокИсполненияДляОтображенияВСписке);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ПроектыСписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ПроектыСписокСрокИсполненияДляОтображенияВСписке);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ПрочиеПредметыСписокДата);
	ВсеЭлементыСДатойИСроком.Добавить(Элементы.ПрочиеПредметыСписокСрокИсполненияДляОтображенияВСписке);
	
	Для Каждого ЭлементСДатой Из ВсеЭлементыСДатойИСроком Цикл
		ЭлементСДатой.Формат = ФорматДатыДляКолонок;
		ЭлементСДатой.АвтоМаксимальнаяШирина = Ложь;
		ЭлементСДатой.МаксимальнаяШирина = ?(ИспользоватьДатуИВремяВСрокахЗадач, 9, 5);
	КонецЦикла;
	
	Элементы.НовыйСрокВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Элементы.СтарыйСрок.Формат = "ДФ='dd.MM.yyyy ЧЧ:мм'";
	КонецЕсли;

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НеПоказыватьОбластьПросмотраЗадачи_Настройки =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы,
			"НеПоказыватьОбластьПросмотраЗадачи",
			Неопределено);
			
	// нет новых настроек - прочитаем по-старому
	Если НеПоказыватьОбластьПросмотраЗадачи_Настройки = Неопределено Тогда			
		
		СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(КлючСохраненияНастроек);
		Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
			
			ЗначенияПолейФормы = Новый Структура;
			Для Каждого КлючЗначение Из СохраненныеРеквизиты Цикл
				Если КлючЗначение.Ключ <> "ПоказыватьОбластьПросмотраЗадачи" Тогда
					ЗначенияПолейФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияПолейФормы);
			
			Если СохраненныеРеквизиты.Получить("ЗадачиМнеТекущийВидПредмета") = Неопределено 
				И ЗадачиМнеВидГруппировки = "" Тогда
				// первый запуск
				ЗадачиМнеВидГруппировки = "Предмет";
				ПоказыватьОбластьГруппировки = Истина;
				ЗадачиМнеТекущийВидПредмета = СтрокаГруппировкиВсеПредметы();
			КонецЕсли;	
			
		Иначе	
			
			// первый запуск
			ЗадачиМнеВидГруппировки = "Предмет";
			ПоказыватьОбластьГруппировки = Истина;
			ЗадачиМнеТекущийВидПредмета = СтрокаГруппировкиВсеПредметы();
			
		КонецЕсли;
		
	Иначе // читаем по-новому
		
		ЗадачиМнеВидГруппировки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеВидГруппировки", Неопределено);
		ЗадачиМнеНаправлениеСортировки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеНаправлениеСортировки", Неопределено);
		ЗадачиМнеПоказыватьВыполненные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеПоказыватьВыполненные", Неопределено);
		ЗадачиМнеПоказыватьГруппыВидовПредметов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеПоказыватьГруппыВидовПредметов", Неопределено);
		ЗадачиМнеСортироватьПо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеСортироватьПо", Неопределено);
		ЗадачиМнеТекущаяТочкаМаршрута = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеТекущаяТочкаМаршрута", Неопределено);
		ЗадачиМнеТекущийАвтор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеТекущийАвтор", Неопределено);
		ЗадачиМнеТекущийВидПредмета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеТекущийВидПредмета", Неопределено);
		ЗадачиМнеТекущийВидПредметаСвойства = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеТекущийВидПредметаСвойства", Неопределено);
		ЗадачиМнеТекущийПроект = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеТекущийПроект", Неопределено);
		ЗадачиМнеТекущийФлаг = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ЗадачиМнеТекущийФлаг", Неопределено);
		НеПоказыватьОбластьПросмотраЗадачи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "НеПоказыватьОбластьПросмотраЗадачи", Неопределено);
		ПоказыватьОбластьГруппировки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяЭтойФормы, "ПоказыватьОбластьГруппировки", Неопределено);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяБизнесПроцесса") Тогда
		
		ИмяБизнесПроцесса = Параметры.ИмяБизнесПроцесса;
		
		Если ИмяБизнесПроцесса = "Рассмотрение" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть;
			ОсноваЗаголовка = НСтр("ru = 'На рассмотрение'");
		ИначеЕсли ИмяБизнесПроцесса = "Согласование" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
			ОсноваЗаголовка = НСтр("ru = 'На согласование'");
		ИначеЕсли ИмяБизнесПроцесса = "Утверждение" Тогда
			ТочкаМаршрутаИзРабочегоСтолаРуководителя = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить;
			ОсноваЗаголовка = НСтр("ru = 'На утверждение'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказыватьОбластьГруппировки
		И ЗадачиМнеВидГруппировки = "" Тогда
		
		ЗадачиМнеВидГруппировки = "Автор";
	КонецЕсли;
	
	ИдентификаторОбъектовМетаданныхЗадачи = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задачи");
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		ЗадачиМнеВидГруппировки = "";
		ПоказыватьОбластьГруппировки = Ложь;
	КонецЕсли;	
	
	УстановитьВидимостьДанныхЗадачи(Элементы, Ложь);
	
	УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи);
	
	ОбновитьРезультатВыполнения = Истина;
	
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	ВсеСписки = ВсеСпискиЗадач(ЭтаФорма);
	Для Каждого СписокЗадач Из ВсеСписки Цикл
		
		БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(СписокЗадач.УсловноеОформление);
		СписокЗадач.Параметры.УстановитьЗначениеПараметра(
			"ИмяГруппыБезПроекта", 
			НСтр("ru = 'Без проекта'"));
		СписокЗадач.Параметры.УстановитьЗначениеПараметра(
			"ТекущийПользователь",
			ТекущийПользователь);
		СписокЗадач.Параметры.УстановитьЗначениеПараметра(
			"ТекущаяДата",
			НачалоДня(ТекущаяДатаСеанса()));
		СписокЗадач.Параметры.УстановитьЗначениеПараметра(
			"ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
		УстановитьОтборПоказыватьВыполненные(СписокЗадач, ЗадачиМнеПоказыватьВыполненные);
		
		Если Параметры.КлючОтбора = "НеПринятые" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				СписокЗадач, "ОтображатьСтарыеЗадачи", Ложь, Истина);
		ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				СписокЗадач, "ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса(), Истина);
		КонецЕсли;
		
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПрочиеПредметыСписок,
		"СтрокаБезПредмета", СтрокаПредставленияВСпискеБезПредмета(), Истина);
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.ЗадачиМнеАвтообновление.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.ЗадачиМнеАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Элементы.СписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.ВнутренниеДокументыСписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.ВходящиеДокументыСписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.ИсходящиеДокументыСписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.МероприятияСписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.ПроектыСписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.ПрочиеПредметыСписокСостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	// По шаблону
	ЗаполнитьТаблицуРассмотренияПоШаблону();
	
	Если ШаблоныРассмотрения.Количество() > 0 Тогда 
		Элементы.СтраницыКомандРассмотрения.ТекущаяСтраница = Элементы.РассмотрениеПоШаблону;
	Иначе 
		Элементы.СтраницыКомандРассмотрения.ТекущаяСтраница = Элементы.СтандартноеРассмотрение;
	КонецЕсли;
	
	ДекорацияПроцессРассмотрения = НСтр("ru = 'Процесс'");
	
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	ДопустимПоказВыполненных = Не ЗначениеЗаполнено(Параметры.КлючОтбора);
	Элементы.ЗадачиМнеПоказатьВыполненные.Видимость = ДопустимПоказВыполненных;
	Элементы.ЗадачиМнеПоказатьВыполненные1.Видимость = ДопустимПоказВыполненных;
	Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	Элементы.ЗадачиМнеПоказатьВыполненные1.Пометка = ЗадачиМнеПоказыватьВыполненные;
	
	Элементы.ЗадачиМнеПоказатьГруппыВидовПредметов.Пометка = ЗадачиМнеПоказыватьГруппыВидовПредметов;
	
	СменитьСтраницуСписка(ЭтаФорма);
	УстановитьТекстЗапросаСпискаНаСервере();
	ОбновитьСписокЗадачСервер();
	Заголовок = ТекстЗаголовка;
	
	ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
	Элементы.ПредставлениеМестногоЧасовогоПояса.Видимость = ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса);
	
	УстановитьВидимостьРезультатЗавершения(ЭтаФорма);
	УстановитьВидимостьПолейПоиска(ЭтаФорма);
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьУсловноеОФормлениеПодзадачи(ЭтаФорма, Объект);
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьУсловноеОФормлениеПодзадачиОписание(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		ЗадачиМнеВидГруппировки = "";
		ПоказыватьОбластьГруппировки = Ложь;
	КонецЕсли;	
	
	УстановитьТекущееЗначениеГруппировкиЗадачМне();
	УстановитьПараметрыГруппировокВЗадачахМне();
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма);
	
	ПодключитьОбработчикОжидания("АвтозаписьНастроек", 5 * 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	АвтозаписьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если ТипЗнч(ЗадачиМнеТекущийБизнесПроцесс) = 
			Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
			
			Элементы.Файлы.Обновить();
			ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Элементы.Файлы.ТекущаяСтрока = Параметр.Файл;
			КонецЕсли;
		Иначе
			Если Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
				МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(
					ЗадачиМнеТекущаяЗадача, ЗадачиМнеТекущийБизнесПроцесс, Параметр.Файл, УникальныйИдентификатор);
					
				ОбновитьДеревоПриложений();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗадачаИзменена"
		Или ИмяСобытия = "Перенаправление_ЗадачаИсполнителя"
		Или ИмяСобытия = "ИзмененыРеквизитыНевыполненныхЗадач" Тогда
		
		ОбновитьСписокЗадачМне();
		
		ЗадачиМнеТекущаяЗадача = Неопределено;
		ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
		
	ИначеЕсли ИмяСобытия = "БизнесПроцессСтартован" Тогда
		
		ОбновитьСписокЗадачМне();
		
		Если Параметр.Свойство("ГлавнаяЗадача") И Параметр.ГлавнаяЗадача = ЗадачиМнеТекущаяЗадача Тогда
			ЗадачиМнеТекущаяЕстьПодзадачи = Истина;
			ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ФоновыйСтартПроцесса" Тогда
		
		ОбновитьСписокЗадачМне();
		
		Если Параметр.Свойство("ГлавнаяЗадача") И Параметр.ГлавнаяЗадача = ЗадачиМнеТекущаяЗадача Тогда
			ЗадачиМнеТекущаяЕстьПодзадачи = Истина;
			ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БизнесПроцессПрерван" Тогда
		
		ОбновитьСписокЗадачМне();
		
	ИначеЕсли (ИмяСобытия = "ЗадачаВыполнена" 
		И РаботаСБизнесПроцессамиКлиент.ЗадачаЕстьВТаблицеЗадач(ЭтаФорма, Параметр)) Тогда
		
		ОбновитьПодзадачиКлиент();
		
	ИначеЕсли ИмяСобытия = "БизнесПроцессИзменен" 
		И РаботаСБизнесПроцессамиКлиент.ПроцессЕстьВТаблицеЗадач(ЭтаФорма, Параметр) Тогда 
		
		ОбновитьПодзадачиКлиент();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы Тогда
			ОбновитьДеревоПриложений();
		Иначе
			ВладелецФайла = Неопределено;
			
			Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
				 И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
				ВладелецФайла = Параметр.Владелец;
			Иначе	
				ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			КонецЕсли;
			
			Если ВладелецФайла = ЗадачиМнеТекущийБизнесПроцесс Тогда
				Элементы.Файлы.Обновить();
				ОбновитьДоступностьКомандСпискаФайлов();
				ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ФайлЗанятДляРедактирования" Тогда
		
		Элементы.Файлы.Обновить();
		ОбновитьДоступностьКомандСпискаФайлов();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОбновитьСписокЗадачМне();
	
	ИначеЕсли ИмяСобытия = "ИзменилсяШаблонРезолюции" Тогда
		Для Каждого СтрокаШаблон Из ШаблоныРассмотрения Цикл 
			Если СтрокаШаблон.Ссылка = Параметр.Шаблон Тогда 
				СтрокаШаблон.Заголовок = СокрЛП(Параметр.Наименование);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "БылУдаленШаблонРезолюции"
		Или ИмяСобытия = "СозданНовыйШаблонРезолюции" Тогда
		ЗаполнитьТаблицуРассмотренияПоШаблону(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ОбновитьСписокЗадачМне();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Истина);

КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачаРассмотренияНажатие(Элемент)
	
	ПоказатьЗначение(, ПредметРассмотрения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроцессРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", БизнесПроцессПредметаРассмотрения);
	ПараметрыФормы.Вставить("ЗаявкаНаПеренос", ЗадачиМнеТекущийБизнесПроцесс);
	ОткрытьФорму(ИмяФормыДляОткрытияКарточкиПроцесса, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеОписаниеЗадачиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбзорЗадачКлиент.ЗадачиМнеПредставлениеHTMLПриНажатии(
		Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеАвторы

&НаКлиенте
Процедура АвторыПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Автор"
		И Элементы.ЗадачиМнеАвторы.ТекущиеДанные <> Неопределено
		И Элементы.ЗадачиМнеАвторы.ТекущиеДанные.Автор <> ЗадачиМнеТекущийАвтор Тогда
	
		ЗадачиМнеТекущийАвтор = Элементы.ЗадачиМнеАвторы.ТекущиеДанные.Автор;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПредметыПриАктивизацииСтроки(Элемент)
	
	ПредметыТекущиеДанные = Элементы.ЗадачиМнеПредметы.ТекущиеДанные;
	
	Если ЗадачиМнеВидГруппировки = "Предмет"
		И ПредметыТекущиеДанные <> Неопределено Тогда
		
		Если ПредметыТекущиеДанные.ВидПредмета <> ЗадачиМнеТекущийВидПредмета Тогда
			ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
		КонецЕсли;
		
		ЗадачиМнеТекущийВидПредмета = ПредметыТекущиеДанные.ВидПредмета;
		ЗадачиМнеТекущийВидПредметаСвойства = Новый Структура("ЭтоГруппаВидов, ПодчиненныеВиды",
			ПредметыТекущиеДанные.ЭтоГруппаВидов, ПредметыТекущиеДанные.ПодчиненныеВиды);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеПроекты

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Проект" 
		И Элементы.ЗадачиМнеПроекты.ТекущиеДанные <> Неопределено 
		И Элементы.ЗадачиМнеПроекты.ТекущиеДанные.Проект <> ЗадачиМнеТекущийПроект Тогда
	
		ЗадачиМнеТекущийПроект = Элементы.ЗадачиМнеПроекты.ТекущиеДанные.Проект;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеТочкиМаршрута

&НаКлиенте
Процедура ТочкиМаршрутаПриАктивизацииСтроки(Элемент)
	
	ТочкиМаршрутаТекущиеДанные = Элементы.ЗадачиМнеТочкиМаршрута.ТекущиеДанные;
	
	Если ЗадачиМнеВидГруппировки = "ТочкаМаршрута" 
		И ТочкиМаршрутаТекущиеДанные <> Неопределено 
		И ТочкиМаршрутаТекущиеДанные.ТочкаМаршрута <> ЗадачиМнеТекущаяТочкаМаршрута Тогда
	
		ЗадачиМнеТекущаяТочкаМаршрута = ТочкиМаршрутаТекущиеДанные.ТочкаМаршрута;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеФлаги

&НаКлиенте
Процедура ЗадачиМнеФлагиПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Флаг"
		И Элементы.ЗадачиМнеФлаги.ТекущиеДанные <> Неопределено
		И Элементы.ЗадачиМнеФлаги.ТекущиеДанные.Флаг <> ЗадачиМнеТекущийФлаг Тогда
	
		ЗадачиМнеТекущийФлаг = Элементы.ЗадачиМнеФлаги.ТекущиеДанные.Флаг;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяЗадача = ВыбраннаяСтрока;
	ТипЗадачаСсылка = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	
	Если ТипЗнч(ВыбраннаяЗадача) <> ТипЗадачаСсылка Тогда
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		Если ТипЗнч(ДанныеСтроки.Ссылка) = ТипЗадачаСсылка Тогда
			ВыбраннаяЗадача = ДанныеСтроки.Ссылка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неожиданный тип строки'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоКолонкаНомерФлага(Элемент.ТекущийЭлемент) Тогда
		Если ТипЗнч(ВыбраннаяЗадача) = ТипЗадачаСсылка Тогда
			СтандартнаяОбработка = Ложь;
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяЗадача);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбраннаяСтрока) = ТипЗадачаСсылка Тогда
		БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(
			Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Не БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(
			ВыбраннаяЗадача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПомощникОтправитьКлиент.ОтправитьПроцесс(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаление имени предмета из наименования задачи.
	МассивЗадач = Новый Массив;
	ДанныеСтрокПоЗадачам = Новый Соответствие;
	Для Каждого КлючИЗначение Из Строки Цикл
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		МассивЗадач.Добавить(ДанныеСтроки.Ссылка);
		ДанныеСтрокПоЗадачам[ДанныеСтроки.Ссылка] = ДанныеСтроки;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителяПредметы.ИмяПредмета КАК ИмяПредмета,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Ссылка В(&МассивЗадач)
		|ИТОГИ ПО
		|	ЗадачаИсполнителяПредметы.Ссылка");
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	ВыборкаЗадача = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗадача.Следующий() Цикл
		ПредметыДляПолученияНаименований = Новый Массив;
		ПредметыДляПолученияНаименованийБезИмен = Новый Массив;
		Выборка = ВыборкаЗадача.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПредмета = Новый Структура;
			СтруктураПредметаБезИмени = Новый Структура;
			СтруктураПредмета.Вставить("ИмяПредмета", Выборка.ИмяПредмета);
			СтруктураПредмета.Вставить("Предмет", Выборка.Предмет);
			ПредметыДляПолученияНаименований.Добавить(СтруктураПредмета);
			СтруктураПредметаБезИмени.Вставить("ИмяПредмета", "");
			СтруктураПредметаБезИмени.Вставить("Предмет", Выборка.Предмет);
			ПредметыДляПолученияНаименованийБезИмен.Добавить(СтруктураПредметаБезИмени);
		КонецЦикла;
		ПредставленияПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(
			ПредметыДляПолученияНаименований, Истина, Ложь);
		ПредставленияПредметовБезИмен = МультипредметностьКлиентСервер.ПредметыСтрокой(
			ПредметыДляПолученияНаименованийБезИмен, Истина, Ложь);
		ДанныеСтроки = ДанныеСтрокПоЗадачам[ВыборкаЗадача.Ссылка];
		ДанныеСтроки.Наименование = СокрП(СтрЗаменить(ДанныеСтроки.Наименование, ПредставленияПредметов, ""));
		ДанныеСтроки.Наименование = СокрП(СтрЗаменить(ДанныеСтроки.Наименование, ПредставленияПредметовБезИмен, ""));
		ДанныеСтроки.Наименование = СокрП(СтрЗаменить(ДанныеСтроки.Наименование,
			"""" + Строка(ПредметыДляПолученияНаименований[0].Предмет) + """", ""));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПродолжение",
			ЭтотОбъект,
			Новый Структура);

		ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка, СтандартнаяОбработка, ОписаниеОповещения);
			
	Иначе
	
		РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
			ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(ЭтаФорма, Элемент, 
		ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ДеревоПриложений.ТолькоПросмотр Или Объект.Выполнена Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Файлы

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		ВыбраннаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект, ПараметрыВыполнения);
	
	Если Результат = РезультатРедактировать Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьФайл(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = ЗадачиМнеТекущийБизнесПроцесс;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьБизнесПроцесс(Команда)
	
	ОткрытьПроцесс(ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Автор");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПредмету(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Предмет");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("ТочкаМаршрута");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСгруппироватьПоФлагу(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьФайл(Команда)
	
	ТипПроцесса = ТипЗнч(ЗадачиМнеТекущийБизнесПроцесс);
	
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		ДобавитьФайл();
	Иначе
		ДеревоПриложенийДобавлениеНаКлиенте(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
		
		
	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.ЗадачиМнеСписок");

	ЗаголовокФормы = НСтр("ru = 'Отчеты по моим задачам'");
	
	РазделГипперссылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("УправлениеБизнесПроцессами");

	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперссылка", 
										Раздел, ЗаголовокФормы, Истина, РазделГипперссылка);
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма, 
		"ЗадачиМнеСписок");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_ЗадачиМне

&НаКлиенте
Процедура ЗадачиМнеПоказатьВыполненные(Команда)
	
	ЗадачиМнеПоказыватьВыполненные = Не ЗадачиМнеПоказыватьВыполненные;
	
	Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	Элементы.ЗадачиМнеПоказатьВыполненные1.Пометка = ЗадачиМнеПоказыватьВыполненные;
	
	ВсеСписки = ВсеСпискиЗадач(ЭтаФорма);
	Для Каждого СписокЗадач Из ВсеСписки Цикл
		УстановитьОтборПоказыватьВыполненные(СписокЗадач, ЗадачиМнеПоказыватьВыполненные);
	КонецЦикла;
	
	ОбновитьСписокЗадачМне();
	
	УстановитьВидимостьРезультатЗавершения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПоказатьГруппыВидовПредметов(Команда)
	
	ЗадачиМнеПоказыватьГруппыВидовПредметов = Не ЗадачиМнеПоказыватьГруппыВидовПредметов;
	Элементы.ЗадачиМнеПоказатьГруппыВидовПредметов.Пометка = ЗадачиМнеПоказыватьГруппыВидовПредметов;
	
	Если ЗадачиМнеВидГруппировки <> "Предмет" Тогда
		Возврат;
	КонецЕсли;
	
	СгруппироватьЗадачиМнеПоВиду("Предмет", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеАвтообновление(Команда)

	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	ВыбраноЗадач = МассивЗадач.Количество();
	
	Если ВыбраноЗадач = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач, ЭтаФорма);
	
	ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Истина;
	УстановитьДоступностьКомандПринятияКИсполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач, ЭтаФорма);
	
	ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Ложь;
	УстановитьДоступностьКомандПринятияКИсполнению();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_МиниКарточкаЗадачи

&НаКлиенте
Процедура ЗадачаПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУказатьТрудозатраты(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
		ЗадачиМнеТекущаяЗадача, "Выполнена, ДатаИсполнения");
	
	ДатаОтчета = ТекущаяДата();
	Если РеквизитыЗадачи.Выполнена Тогда
		ДатаОтчета = РеквизитыЗадачи.ДатаИсполнения;
	КонецЕсли;	
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ЗадачиМнеТекущаяЗадача,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		РеквизитыЗадачи.Выполнена,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗаписать(Команда)

	Если НЕ ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗадачу(ЗадачиМнеТекущаяЗадача, РезультатВыполнения);
	
	ПоказатьОповещениеПользователя(
		"Изменение:", 
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПеренаправить(Команда)
	
	ТекущийСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	Если ТекущийСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		ЗадачаПеренаправитьГрупповая();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеДляПеренаправления = ПолучитьДанныеДляПеренаправления(ЗадачиМнеТекущаяЗадача);
	
	Если ДанныеДляПеренаправления.ЗадачаВыполнена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Уже выполненную задачу нельзя перенаправить.'"));
		Возврат;
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачу(
		ЗадачиМнеТекущаяЗадача,,ДанныеДляПеренаправления.ЕстьАктивныеПодзадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляПеренаправления(ЗадачиМнеТекущаяЗадача)
	
	ЗадачаВыполнена = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ЗадачиМнеТекущаяЗадача, "Выполнена");
	ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
	
	ДанныеДляПеренаправления = Новый Структура("ЗадачаВыполнена, ЕстьАктивныеПодзадачи", 
		ЗадачаВыполнена, ЕстьАктивныеПодзадачи);
		
	Возврат ДанныеДляПеренаправления;	
	
КонецФункции

&НаКлиенте
Процедура ВопросыПоЗадаче(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", ЗадачиМнеТекущаяЗадача);
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ВопросыВыполненияЗадачи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопрос(Команда)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Задача", ЗадачиМнеТекущаяЗадача);
	ЗначенияЗаполнения.Вставить("ВидВопроса", ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.Иное"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКарточкуЗадачи(Команда)
	
	НеПоказыватьОбластьПросмотраЗадачи = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи);
	
	Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
		Если ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
			ОбновитьЗадачу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьКарточку(Команда)
	
	ОткрытьЗадачуИзСписка(ТекущийЭлементСписокЗадач(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма,
		ЗадачиМнеТекущаяЗадача, РезультатВыполнения, Истина);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Команды работы с деревом приложений

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	ДеревоПриложенийДобавлениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ВыделенныеСтрокиПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыделеннаяСтр);
		ВыделенныеСтрокиПредметов.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийУдалениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ВыделенныеСтрокиПредметов);
		
	МультипредметностьКлиент.ПолученоПодтверждениеОбУдаленииПредмета(Объект, ВыделенныеСтрокиПредметов, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьДляПросмотра(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.РедактироватьТекущийФайл(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеТекущегоФайла(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	РаботаСБизнесПроцессамиКлиент.СохранитьТекущийФайл(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Команды выполнения задач

// Процесс Исполнение

&НаКлиенте
Процедура ЗадачаИсполнено(Команда) 
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Исполнить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиИсполненоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаИсполненоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиИсполненоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаИсполненоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаИсполненоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоПослеПодзадач() 
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиИсполненоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры	

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиИсполненоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаИсполненоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнитель(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.ОтветственноеИсполнение") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиИсполненоОтвИсполнительПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаИсполненоОтвИсполнительПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиИсполненоОтвИсполнительПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаИсполненоОтвИсполнительПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаИсполненоОтвИсполнительПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнительПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиИсполненоОтвИсполнительПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиИсполненоОтвИсполнительПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьНевыполненныеЗадачиИсполнителей(ЗадачиМнеТекущаяЗадача) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Задача не может быть завершена, пока не выполнены все задачи исполнителей'"),,,
			"Исполнители");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаИсполненоОтвИсполнительПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролировано(Команда)

	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Контролировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПроконтролированоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПроконтролированоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПроконтролированоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПроконтролированоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПроконтролированоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролированоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПроконтролированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПроконтролированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиЗавершитьИсполнениеПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаЗавершитьИсполнениеПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьИсполнениеПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаЗавершитьИсполнениеПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаЗавершитьИсполнениеПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнениеПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьИсполнениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьИсполнениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗавершитьИсполнениеПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачаВернутьНаДоработкуИсполнениеПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаВернутьНаДоработкуИсполнениеПослеПодзадач(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачаВернутьНаДоработкуИсполнениеПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаВернутьНаДоработкуИсполнениеПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаВернутьНаДоработкуИсполнениеПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиВернутьНаДоработкуИсполнениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиВернутьНаДоработкуИсполнениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуИсполнениеПродолжение",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаИсполнить"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОтвИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОтветственноеИсполнение"));
	
КонецПроцедуры

// Комплексный процесс

&НаКлиенте
Процедура ЗадачаКомплексныйПроцессПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.Контролер") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиКППроконтролированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиКППроконтролированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаКомплексныйПроцессПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

// Процесс Ознакомление

&НаКлиенте
Процедура ЗадачаОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Ознакомление.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиОзнакомилсяПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаОзнакомилсяПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиОзнакомилсяПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаОзнакомилсяПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаОзнакомилсяПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаОзнакомилсяПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОзнакомлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОзнакомиться"));
	
КонецПроцедуры

// Процесс Поручение

&НаКлиенте
Процедура ЗадачаПоручениеВыполнено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Выполнить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПоручениеВыполненоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПоручениеВыполненоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПоручениеВыполненоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПоручениеВыполненоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПоручениеВыполненоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПоручениеВыполненоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПоручениеВыполненоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПоручениеВыполненоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПоручениеВыполненоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПоручениеПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Контролировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПоручениеПроконтролированоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПоручениеПроконтролированоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПоручениеПроконтролированоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПоручениеПроконтролированоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПоручениеПроконтролированоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПоручениеПроконтролированоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПоручениеПроконтролированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПоручениеПроконтролированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПоручениеПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьПоручение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиЗавершитьПоручениеПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаЗавершитьПоручениеПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьПоручениеПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаЗавершитьПоручениеПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаЗавершитьПоручениеПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаЗавершитьПоручениеПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьПоручениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьПоручениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РезультатВыполнения) Тогда
		ТекстСообщения = НСтр("ru = 'Комментарий может быть заполнен только для возвращаемой задачи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗавершитьПоручениеПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработку(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиВернутьНаДоработкуПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиВернутьНаДоработкуПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если ПустаяСтрока(РезультатВыполнения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен комментарий'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

// Процесс Приглашение

&НаКлиенте
Процедура ЗадачаПринято(Команда, ОбработанныеВопросы = Неопределено)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ДопПараметры = Новый Структура("Команда, ОбработанныеВопросы", Команда, ОбработанныеВопросы);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПринятоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект, ДопПараметры);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПринятоПослеПодзадач(Команда, ОбработанныеВопросы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПринятоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПринятоПослеПодзадач(ДополнительныеПараметры.Команда, 
			ДополнительныеПараметры.ОбработанныеВопросы);
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПринятоПослеПодзадач(ДополнительныеПараметры.Команда, 
			ДополнительныеПараметры.ОбработанныеВопросы);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПринятоПослеПодзадач(Команда, ОбработанныеВопросы) 

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Команда", Команда);
	ДопПараметры.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПринятоПослеВыбораФактическогоИсполнителя", ЭтаФорма, ДопПараметры);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПринятоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Команда = ДопПараметры.Команда;
	ОбработанныеВопросы = ДопПараметры.ОбработанныеВопросы;
	
	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	
	Если Не ОбработанныеВопросы.Свойство("ЗанятостьИсполнителей") Тогда
		
		ИсключенияЗанятости = Новый Массив;
		Для Каждого Предмет Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")
				И ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда 
				ИсключенияЗанятости.Добавить(Предмет.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Команда", Команда);
		ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗадачаПринятоЗавершениеВопросаОЗанятостиПользователя",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если Не РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
				ЗадачиМнеТекущийИсполнитель, ДатаНачалаМероприятия, ДатаОкончанияМероприятия,
				ИспользоватьРабочийКалендарь, ИсключенияЗанятости, Истина, ОписаниеОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		ОбработанныеВопросы.Вставить("ЗанятостьИсполнителей", Истина);
		
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПринятоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринято(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачаНеПринятоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаНеПринятоПослеПодзадач(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачаНеПринятоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаНеПринятоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаНеПринятоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринятоПослеПодзадач() 
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеПринятоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеПринятоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"РезультатВыполнения");
		Возврат;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаНеПринятоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполненияПриглашениеПовторить(
		ЗадачиМнеТекущаяЗадача, РезультатПриглашенияЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПриглашениеПовторитьПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПриглашениеПовторитьПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеПовторитьПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПриглашениеПовторитьПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПриглашениеПовторитьПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПриглашениеПовторитьПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПриглашениеПовторитьЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("БизнесПроцесс.Приглашение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПриглашениеПодтвердитьПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПриглашениеПодтвердитьПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеПодтвердитьПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПриглашениеПодтвердитьПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПриглашениеПодтвердитьПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеПодтвердитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеПодтвердитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПриглашениеПодтвердитьПослеВопросаОбИсключенииУчастников", ЭтотОбъект);
	Если РезультатПриглашенияЗадачи = ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда 
		ТекстВопроса =
			Нстр("ru = 'Есть не принявшие приглашения участники. При подтверждении они будут исключены из списка участников. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачаПриглашениеОтложитьПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПриглашениеОтложитьПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачаПриглашениеОтложитьПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПриглашениеОтложитьПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПриглашениеОтложитьПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложитьПослеПодзадач() 
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеОтложитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеОтложитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеОтложитьПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Оповестить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПриглашениеОзнакомилсяПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПриглашениеОзнакомилсяПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеОзнакомилсяПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПриглашениеОзнакомилсяПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПриглашениеОзнакомилсяПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомилсяПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПриглашениеОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПриглашениеОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПригласить"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриглашениеОповеститьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОповеститьОРезультатахПриглашения"));
	
КонецПроцедуры

// Процесс Рассмотрение

&НаКлиенте
Процедура ЗадачаРассмотрено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиРассмотреноПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаРассмотреноПослеПодзадач(); 
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотреноПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаРассмотреноПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаРассмотреноПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаРассмотреноПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРассмотреноПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры


&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотреноПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Отказ = Ложь;
	ЗаполнениеПоШаблонуРезолюции = Ложь;
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Резолюция"" не заполнено'"),,
			"РезультатВыполнения",,Отказ);
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы",
		ЭтотОбъект);
		
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотреноНаИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОткрытьФормуРассмотренияЗадачи(
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение"));

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотреноНаОзнакомление(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОткрытьФормуРассмотренияЗадачи(
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеОбработано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиРассмотрениеОбработаноПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаРассмотрениеОбработаноПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотрениеОбработаноПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаРассмотрениеОбработаноПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаРассмотрениеОбработаноПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаРассмотрениеОбработаноПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРассмотрениеОбработаноПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотрениеОбработаноПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции",
		ПредопределенноеЗначение("Перечисление.ВариантыОбработкиРезолюции.НеНаправлять"));
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеНаправитьНаИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	Оповестить("ПерейтиКГруппеНаИсполнение", ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеНаправитьНаОзнакомление(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	Оповестить("ПерейтиКГруппеОзнакомление", ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("НаправитьНаИсполнение", "На исполнение");
	СписокЗначений.Добавить("НаправитьНаОзнакомление", "На ознакомление");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаОтправитьВыборЗначенияПродолжение",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокЗначений);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды с подменю в карточке - продолжение
Процедура КомандаОтправитьВыборЗначенияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "НаправитьНаИсполнение" Тогда
		ОткрытьФормуРассмотренияЗадачи(
			ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение"));
		Возврат;
	ИначеЕсли Результат.Значение = "НаправитьНаОзнакомление" Тогда
		ОткрытьФормуРассмотренияЗадачи(
			ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШаблону(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Каждого Шаблон Из ШаблоныРассмотрения Цикл
		СписокЗначений.Добавить(Шаблон.ИмяШаблона, Шаблон.Заголовок);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаПоШаблонуВыборЗначенияПродолжение",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокЗначений);
	
КонецПроцедуры

// Обработчик команды с подменю в карточке - продолжение
&НаКлиенте
Процедура КомандаПоШаблонуВыборЗначенияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ДопПараметры = Новый Структура("Результат", Результат);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияКомандаПоШаблонуПослеВыбораДействияСПодзадачами",
				ЭтотОбъект, ДопПараметры);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	КомандаПоШаблонуПослеПодзадач(Результат); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандаПоШаблонуПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		КомандаПоШаблонуПослеПодзадач(ДополнительныеПараметры.Результат);
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		КомандаПоШаблонуПослеПодзадач(ДополнительныеПараметры.Результат);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПоШаблонуПослеПодзадач(Результат) 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРассмотренияПоШаблонуПослеВыбораФактическогоИсполнителя", ЭтаФорма, Результат);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРассмотренияПоШаблонуПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, Результат) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Строки = ШаблоныРассмотрения.НайтиСтроки(Новый Структура("ИмяШаблона", Результат.Значение));
	Если Строки.Количество() > 0 Тогда
		ТекстШаблона = ПолучитьТекстШаблона(Строки[0].Ссылка);
		ЗаполнениеПоШаблонуРезолюции = Истина;
		
		Если ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ТекстРезолюции = РезультатВыполнения + Символы.ПС + ТекстШаблона;
		Иначе 
			ТекстРезолюции = ТекстШаблона;
		КонецЕсли;
		
		Отказ = Ложь;
		ОчиститьСообщения();
		
		Если Не ЗначениеЗаполнено(ТекстРезолюции) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Шаблон резолюции не заполнен'"),,
				"РезультатВыполнения",,Отказ);
		КонецЕсли;
				
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
			
		РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Процесс Регистрация

&НаКлиенте
Процедура ЗадачаЗарегистрировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиЗарегистрированоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаЗарегистрированоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗарегистрированоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаЗарегистрированоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаЗарегистрированоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаЗарегистрированоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗарегистрированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗарегистрированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗарегистрированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиНеЗарегистрированоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаНеЗарегистрированоПослеПодзадач(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеЗарегистрированоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаНеЗарегистрированоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаНеЗарегистрированоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрированоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеЗарегистрированоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеЗарегистрированоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоПриложений.ПолучитьЭлементы().Количество() > 0 Тогда
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,,Истина);
		ОчиститьСообщения();
		Для каждого Предмет из ОсновныеПредметы Цикл
			Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ ""%1"" зарегистрирован!
							|Для завершения задачи нажмите кнопку ""Зарегистрировано"".'"),
						Строка(Предмет)),,
				"ДеревоПриложений");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отказа в регистрации'"),, 
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаНеЗарегистрированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиРегистрацияОзнакомилсяПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаРегистрацияОзнакомилсяПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРегистрацияОзнакомилсяПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаРегистрацияОзнакомилсяПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаРегистрацияОзнакомилсяПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомилсяПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРегистрацияОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРегистрацияОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРегистрацияОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиРегистрацияПовторитьПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаРегистрацияПовторитьПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРегистрацияПовторитьПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаРегистрацияПовторитьПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаРегистрацияПовторитьПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаРегистрацияПовторитьПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРегистрацияПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРегистрацияПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРегистрацияПовторитьПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ОткрытьФорму("БизнесПроцесс.Регистрация.Форма.ФормаИзменениеПараметров", ПараметрыФормы,
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процесс РешениеВопросовВыполненияЗадач

&НаКлиенте
Процедура ЗадачаРешениеВопросовРассмотрено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовРассмотреноПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовРассмотреноПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		Текст = НСтр("ru = 'Поле ""Комментарий"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"РезультатВыполнения",
			,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.ОзнакомлениеСРезультатомРассмотрения") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОтправитьНаУточнение = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовОзнакомилсяПослеВыбораФактическогоИсполнителя",
		ЭтаФорма, ОтправитьНаУточнение);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовОтправитьНаУточнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.ОзнакомлениеСРезультатомРассмотрения") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОтправитьНаУточнение = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовОзнакомилсяПослеВыбораФактическогоИсполнителя",
		ЭтаФорма, ОтправитьНаУточнение);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ОтправитьНаУточнение) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если ОтправитьНаУточнение
		И Не ЗначениеЗаполнено(РезультатВыполнения) Тогда
		
		Текст = НСтр("ru = 'При отправке на уточнение требуется указать комментарий.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", ОтправитьНаУточнение);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовПеренести(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовПеренестиПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовПеренестиПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоПереносовПоЗадаче = 
		ПереносСроковВыполненияЗадачВызовСервера.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
			ПредметРассмотрения, ЗадачиМнеТекущийБизнесПроцесс);
	
	Если ТребуетсяРучноеИзменениеСрока И КоличествоПереносовПоЗадаче = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо вручную изменить срок на карточке процесса'"),,
			"ДекорацияПроцессРассмотрения");
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйСрок) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан новый срок исполнения.'"),,
			"НовыйСрок");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРешениеВопросовПеренестиПродолжение", ЭтотОбъект);
	
	Если КоличествоПереносовПоЗадаче = 0 Тогда
		
		СтарыйСрокПроцесса = Дата(1,1,1);
		НовыйСрокПроцесса = Дата(1,1,1);
		
		ПереносСроковВыполненияЗадачВызовСервера.ОпределитьСрокПроцессаПриИзмененииСрокаЗадачи(
			ПредметРассмотрения, НовыйСрок,
			БизнесПроцессПредметаРассмотрения, СтарыйСрокПроцесса, НовыйСрокПроцесса);
		
		Если СтарыйСрокПроцесса <> НовыйСрокПроцесса Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Процесс", БизнесПроцессПредметаРассмотрения);
			ПараметрыФормы.Вставить("НовыйСрокИсполнения", НовыйСрокПроцесса);
			ПараметрыФормы.Вставить("СформироватьДеревоВышестоящихПроцессовСНовымиСроками", Истина);
			
			ОткрытьФорму("ОбщаяФорма.ПодтверждениеПереносаСрока",
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовНеПереносить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиРешениеВопросовНеПереноситьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиРешениеВопросовНеПереноситьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполнение обязательного комментария при отказе перенести срок
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ОчиститьСообщения();
		Текст = НСтр("ru = 'Не заполнено поле ""Комментарий"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРешениеВопросовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовРассмотреть"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРешениеВопросовИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовОзнакомиться"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРешениеВопросовПереносСрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовПереносСрока"));
	
КонецПроцедуры

// Процесс Согласование

&НаКлиенте
Процедура ЗадачаСогласовано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиСогласованоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаСогласованоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаСогласованоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаСогласованоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаСогласованоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиСогласованоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованоСЗамечаниями(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиСогласованоСЗамечаниямиПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаСогласованоСЗамечаниямиПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованоСЗамечаниямиПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаСогласованоСЗамечаниямиПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаСогласованоСЗамечаниямиПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаСогласованоСЗамечаниямиПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиСогласованоСЗамечаниямиПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованоСЗамечаниямиПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеСогласовано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиНеСогласованоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаНеСогласованоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеСогласованоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаНеСогласованоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаНеСогласованоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаНеСогласованоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеСогласованоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеСогласованоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованиеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиСогласованиеОзнакомилсяПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаСогласованиеОзнакомилсяПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованиеОзнакомилсяПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаСогласованиеОзнакомилсяПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаСогласованиеОзнакомилсяПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаСогласованиеОзнакомилсяПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиСогласованиеОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиСогласованиеОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСогласование(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиЗавершитьСогласованиеПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗавершитьСогласованиеПослеПодзадач(); 
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьСогласованиеПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗавершитьСогласованиеПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗавершитьСогласованиеПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершитьСогласованиеПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьСогласованиеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьСогласованиеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиПовторитьПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаПовторитьПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПовторитьПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаПовторитьПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаПовторитьПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПовторитьПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПараметровСогласования", ЭтотОбъект, ПараметрыОбработчика);
	
	ОткрытьФорму(
		"БизнесПроцесс.Согласование.Форма.ФормаИзменениеПараметров", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСогласованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаСогласовать"));
	
КонецПроцедуры

// Процесс Утверждение

&НаКлиенте
Процедура ЗадачаУтверждено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиУтвержденоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаУтвержденоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтвержденоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаУтвержденоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаУтвержденоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаУтвержденоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиУтвержденоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтвержденоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеУтверждено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиНеУтвержденоПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаНеУтвержденоПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеУтвержденоПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаНеУтвержденоПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаНеУтвержденоПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаНеУтвержденоПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиНеУтвержденоПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиНеУтвержденоПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отклонения документа '"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения", 
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.НеУтверждено"));
	ПараметрыЗаписи.Вставить("КлючеваяОперация", "УтверждениеВыполнениеКомандыНеУтверждено");
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтверждениеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиУтверждениеОзнакомилсяПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаУтверждениеОзнакомилсяПослеПодзадач(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтверждениеОзнакомилсяПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаУтверждениеОзнакомилсяПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаУтверждениеОзнакомилсяПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаУтверждениеОзнакомилсяПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиУтверждениеОзнакомилсяПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтверждениеОзнакомилсяПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУтверждение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	ЗаписатьКомментарийКЗадаче();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиЗавершитьУтверждениеПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗавершитьУтверждениеПослеПодзадач(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьУтверждениеПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗавершитьУтверждениеПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗавершитьУтверждениеПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУтверждениеПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗавершитьУтверждениеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗавершитьУтверждениеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтверждениеПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если БлокировкаКнопокВключена Тогда
		Возврат;
	КонецЕсли;	
	
	Заполнить_ЗадачиМнеТекущаяЗадача();
	
	Если ЗадачиМнеТекущаяЕстьПодзадачи Тогда
		
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(ЗадачиМнеТекущаяЗадача);
		Если ЕстьАктивныеПодзадачи Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеВыполненияЗадачиУтверждениеПовторитьПослеВыбораДействияСПодзадачами",
				ЭтотОбъект);
			БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
				ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗадачаУтверждениеПовторитьПослеПодзадач(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтверждениеПовторитьПослеВыбораДействияСПодзадачами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИгнорироватьПодзадачи" Тогда 
		
		ЗадачаУтверждениеПовторитьПослеПодзадач();
		
	ИначеЕсли Результат = "ПрерватьПодзадачи" Тогда 
		
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(ЗадачиМнеТекущаяЗадача);
		ЗадачаУтверждениеПовторитьПослеПодзадач();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаУтверждениеПовторитьПослеПодзадач() 

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиУтверждениеПовторитьПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиУтверждениеПовторитьПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПараметровУтверждения", ЭтотОбъект, ПараметрыОбработчика);
	ОткрытьФорму(
		"БизнесПроцесс.Утверждение.Форма.ФормаИзменениеПараметров",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийУтверждениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаУтвердить"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_РаботаСФлагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Файлы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Обработчик,
		ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
		
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Подзадачи

&НаКлиенте
Процедура ПодзадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодзадачиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСБизнесПроцессамиКлиент.ОткрытьПодзадачу(ЭтаФорма, Элемент, ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовок(ЗадачиМнеНовые, ЗадачиМнеПросроченные, ЗадачиМнеВсего)
	
	ШаблонЗаголовка = "";
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ШаблонЗаголовка = НСтр("ru = 'Задачи мне (Новых: %1)'");
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ШаблонЗаголовка = НСтр("ru = 'Задачи мне (Просроченных: %2)'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Задачи мне (Новых: %1 / Просроченных: %2 / Всего: %3)'");
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка,
		ЗадачиМнеНовые,
		ЗадачиМнеПросроченные,
		ЗадачиМнеВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНовогоСрока(ИзмененаДата)
	
	// Если в поле "Новый срок" вводится только время, то в дату проставляется текущая дата.
	// При вводе только времени дата автоматически принимает значение 01.01.0001 <Время>. Это значение исправляется.
	Если ЗначениеЗаполнено(НовыйСрок) и НовыйСрок < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		ЧасДаты = Час(НовыйСрок);
		МинутаДаты = Минута(НовыйСрок);
		СекундаДаты = Секунда(НовыйСрок);
		НовыйСрок = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);
	КонецЕсли;
	Если ИзмененаДата И НовыйСрок < КонецДня(НовыйСрок)
		ИЛИ НЕ ИспользоватьДатуИВремяВСрокахЗадач Тогда
		НовыйСрок = КонецДня(НовыйСрок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСрок) Тогда
		ДлительностьПереноса = 
			ПереносСроковВыполненияЗадачВызовСервера.ПолучитьПодписьДлительностьПереноса(
				ТекущийПользователь,
				СтарыйСрок,
				НовыйСрок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДлительностьПереноса = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцесс(Список)
	
	Если Список.ТекущиеДанные <> Неопределено 
		И ТипЗнч(Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда		
		ПоказатьЗначение(, Список.ТекущиеДанные.БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуИзСписка(Список)
	
	Если ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	ВыделенныеЗадачи = ВыделенныеЗадачи();
	Результат = РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеЗадачи, Флаг);
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеЗадачи()
	
	ВыделенныеЗадачи = Новый Массив;
	
	ЭлементСписокЗадач = ТекущийЭлементСписокЗадач(ЭтаФорма);
	ВыделенныеСтроки = ЭлементСписокЗадач.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат ВыделенныеЗадачи;
	КонецЕсли;
	
	ТипЗадачаСсылка = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = ТипЗадачаСсылка Тогда
			ВыделенныеЗадачи.Добавить(ВыделеннаяСтрока);
		Иначе
			ДанныеСтроки = ЭлементСписокЗадач.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Ссылка) = ТипЗадачаСсылка Тогда
				ВыделенныеЗадачи.Добавить(ДанныеСтроки.Ссылка);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неожиданный тип строки'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыделенныеЗадачи;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРассмотренияПоШаблону(Перезаполнить = Ложь)
	
	Если Перезаполнить Тогда 
		ШаблоныРассмотрения.Очистить();
	КонецЕсли;
	
	ТаблицаКоманд = 
		БизнесПроцессыИЗадачиСервер.ПолучитьТаблицуШаблоновРезолюций(ТекущийПользователь);
	
	Ит = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
		НаименованиеШаблона = "РассмотреноПоШаблону_" + Ит;
		НоваяСтрока = ШаблоныРассмотрения.Добавить();
		НоваяСтрока.ИмяШаблона = НаименованиеШаблона;
		НоваяСтрока.Ссылка = СтрокаТаблицы.Ссылка;
		НоваяСтрока.Заголовок = СокрЛП(СтрокаТаблицы.Наименование);
		Ит = Ит + 1;
	КонецЦикла;
	
	Элементы.ПоШаблону.Видимость = ШаблоныРассмотрения.Количество() > 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстШаблона(Шаблон)
	
	Возврат Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(Шаблон);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЗаполнитьПоШаблонуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьПоШаблонуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуНаКлиенте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставкиШаблонаТекста", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбластьПрименения", 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.Резолюции"));
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.Форма.ФормаВыбораШаблонаТекста",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВставкиШаблонаТекста(ШаблонТекста, Параметры) Экспорт
	
	Если ШаблонТекста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент <> Элементы.Резолюция Тогда
		Элементы.Резолюция.ВыделенныйТекст = Элементы.Резолюция.ВыделенныйТекст + ШаблонТекста;
		ЭтаФорма.ТекущийЭлемент = Элементы.Резолюция;
	Иначе
		Элементы.Резолюция.ВыделенныйТекст = ШаблонТекста;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКомментарийКЗадаче()
	
	Если ПараметрыСохраненияКомментарияЗадачи.КомментарияЗадачиИзменен Тогда
		ЗаписатьЗадачу(
			ПараметрыСохраненияКомментарияЗадачи.Задача,
			ПараметрыСохраненияКомментарияЗадачи.Комментарий);
	КонецЕсли;
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыСохраненияКомментарияЗадачи(
	Форма, Задача = Неопределено, Комментарий = "", КомментарияЗадачиИзменен = Ложь)
	
	Форма.ПараметрыСохраненияКомментарияЗадачи = Новый Структура;
	Форма.ПараметрыСохраненияКомментарияЗадачи.Вставить("Задача", Задача);
	Форма.ПараметрыСохраненияКомментарияЗадачи.Вставить("Комментарий", Комментарий);
	Форма.ПараметрыСохраненияКомментарияЗадачи.Вставить("КомментарияЗадачиИзменен", КомментарияЗадачиИзменен);
	
КонецПроцедуры

// Выполняет проверку заполнения доп. реквизитов.
// Если реквизит не заполнен, то выдается сообщению пользователю.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - проверяемая задача.
//
// Возвращаемые параметры:
//  Булево - возвращает Ложь, если есть незаполненные, обязательные доп. реквизиты.
//
&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеДопРеквизитов(ЗадачаСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЕстьОшибкиПроверки = Ложь;
	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияСвойств = Ложь;
	
	УправлениеСвойствамиСлужебный.ДополнительныеРеквизитыОбработкаПроверкиЗаполнения(
		ЗадачаОбъект,
		ЕстьОшибкиПроверки,
		Новый Массив);
	
	ОшибокНеОбнаружено = (ЕстьОшибкиПроверки = Ложь);
	
	Возврат ОшибокНеОбнаружено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРезультатЗавершения(ЭтаФорма)
	
	ТекущийЭлементСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);	
	
	ИмяЭлементаРезультатЗавершения = ТекущийЭлементСписок.Имя + "РезультатЗавершения";
	ЭтаФорма.Элементы[ИмяЭлементаРезультатЗавершения].Видимость = ЭтаФорма.ЗадачиМнеПоказыватьВыполненные;
	
КонецПроцедуры	

&НаКлиенте
Процедура АвтозаписьНастроек()
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ЗадачиМнеВидГруппировки", ЗадачиМнеВидГруппировки);
	Настройки.Вставить("ЗадачиМнеНаправлениеСортировки", ЗадачиМнеНаправлениеСортировки);
	Настройки.Вставить("ЗадачиМнеПоказыватьВыполненные", ЗадачиМнеПоказыватьВыполненные);
	Настройки.Вставить("ЗадачиМнеПоказыватьГруппыВидовПредметов", ЗадачиМнеПоказыватьГруппыВидовПредметов);
	Настройки.Вставить("ЗадачиМнеСортироватьПо", ЗадачиМнеСортироватьПо);
	Настройки.Вставить("ЗадачиМнеТекущаяТочкаМаршрута", ЗадачиМнеТекущаяТочкаМаршрута);
	Настройки.Вставить("ЗадачиМнеТекущийАвтор", ЗадачиМнеТекущийАвтор);
	Настройки.Вставить("ЗадачиМнеТекущийВидПредмета", ЗадачиМнеТекущийВидПредмета);
	Настройки.Вставить("ЗадачиМнеТекущийВидПредметаСвойства", ЗадачиМнеТекущийВидПредметаСвойства);
	Настройки.Вставить("ЗадачиМнеТекущийПроект", ЗадачиМнеТекущийПроект);
	Настройки.Вставить("ЗадачиМнеТекущийФлаг", ЗадачиМнеТекущийФлаг);
	Настройки.Вставить("НеПоказыватьОбластьПросмотраЗадачи", НеПоказыватьОбластьПросмотраЗадачи);
	Настройки.Вставить("ПоказыватьОбластьГруппировки", ПоказыватьОбластьГруппировки);
	
	СохранитьНастройкиСервер(ИмяЭтойФормы, Настройки, УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСервер(ИмяЭтойФормыПараметр, Настройки, УникальныйИдентификатор)
	
	Для каждого Настройка Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяЭтойФормыПараметр, Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодзадачиКлиент()
	
	МассивПодзадач = РаботаСБизнесПроцессамиВызовСервера.СформироватьПодзадачи(ЗадачиМнеТекущаяЗадача);
	ЗаполнитьТаблицуПодзадач(МассивПодзадач);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗадачиМне

&НаКлиенте
Процедура УстановитьДоступностьКомандПринятияКИсполнению() 
	
	Если ЗадачиМнеТекущаяЗадачаПринятаКИсполнению <> Неопределено Тогда

		ДоступностьКомандыПринятьКИсполнению = 
			НЕ ЗадачиМнеТекущаяЗадачаПринятаКИсполнению;
			
		ДоступностьКомандыОтменитьПринятиеКИсполнению = 
			ЗадачиМнеТекущаяЗадачаПринятаКИсполнению;
		
	Иначе
		
		ДоступностьКомандыПринятьКИсполнению = Ложь;
		ДоступностьКомандыОтменитьПринятиеКИсполнению = Ложь;
		
	КонецЕсли;
	
	Элементы.ПринятьКИсполнению.Доступность = ДоступностьКомандыПринятьКИсполнению;
	Элементы.ПринятьКИсполнению1.Доступность = ДоступностьКомандыПринятьКИсполнению;
	
	Элементы.ОтменитьПринятиеКИсполнению.Доступность = ДоступностьКомандыОтменитьПринятиеКИсполнению;
	
	Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность =
		ДоступностьКомандыПринятьКИсполнению;
	
	Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность =
		ДоступностьКомандыОтменитьПринятиеКИсполнению;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок()
	
	ТекущийЭлементСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	Если ТекущийЭлементСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		ПодключитьОбработчикОжидания("УстановитьСтраницуМногоЗадач", 0.2, Истина);
		Возврат;
	КонецЕсли;	
	
	ТекущаяСтрока = ТекущийЭлементСписок.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено
		Или ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если НеПоказыватьОбластьПросмотраЗадачи Тогда
			ПодключитьОбработчикОжидания("ОбновитьПараметрыУчетаВремениВФорме", 0.2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("УстановитьСтраницуНетЗадачи", 0.2, Истина);
		КонецЕсли;
		
		ЗадачиМнеТекущаяЗадача = Неопределено;
		ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
		ЗадачиМнеТекущийБизнесПроцесс = Неопределено;
		ЗадачиМнеТекущийИндекс = Неопределено;
		ЗадачиМнеТекущийИсполнитель = Неопределено;
		
		УстановитьДоступностьКомандПринятияКИсполнению();
	Иначе
		
		ТекущиеДанные = ТекущийЭлементСписок.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.Ссылка <> ЗадачиМнеТекущаяЗадача Тогда
			
			ЗадачиМнеТекущаяЗадача = ТекущиеДанные.Ссылка;
			ЗадачиМнеТекущийИсполнитель = ТекущиеДанные.Исполнитель;
			ЗадачиМнеТекущийБизнесПроцесс = ТекущиеДанные.БизнесПроцесс;
			ЗадачиМнеСостояниеВыполнения = ТекущиеДанные.СостояниеВыполнения;
			ЗадачиМнеТекущаяЕстьПодзадачи = ТекущиеДанные.ЕстьПодзадачи;
			
			Если ТекущиеДанные.Выполнена Тогда
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
			Иначе
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = ТекущиеДанные.ПринятаКИсполнению;
			КонецЕсли;
			
			УстановитьДоступностьКомандПринятияКИсполнению();
			
			Если НеПоказыватьОбластьПросмотраЗадачи Тогда
				ПодключитьОбработчикОжидания("ОбновитьПараметрыУчетаВремениВФорме", 0.2, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КорневойРодительЭлементаДерева(ЭлементДерева)
	
	РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		Возврат ЭлементДерева;
	Иначе
		Возврат КорневойРодительЭлементаДерева(РодительЭлемента);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиОбъектВДеревеПоСсылке(КоллекцияОбъектовОдногоУровня, ИскомыйОбъект, Индекс)
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОбъекта Из КоллекцияОбъектовОдногоУровня Цикл
		Если СтрокаОбъекта.Ссылка = ИскомыйОбъект Тогда
			Индекс = СтрокаОбъекта.ПолучитьИдентификатор();
		Иначе
			НайтиОбъектВДеревеПоСсылке(СтрокаОбъекта.ПолучитьЭлементы(), ИскомыйОбъект, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоЗадачамМне()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиМнеВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ Задачи.Выполнена
		|					ТОГДА 0
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|						И Задачи.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|						И КОНЕЦПЕРИОДА(Задачи.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|					ТОГДА 1
		|			КОНЕЦ), 0) КАК ЗадачиМнеПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ
		|";
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Задачи.Выполнена = ЛОЖЬ", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ИдентификаторОбъектовМетаданныхЗадачи", ИдентификаторОбъектовМетаданныхЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УстановитьЗаголовок(
		Выборка.ЗадачиМнеНовые,
		Выборка.ЗадачиМнеПросроченные,
		Выборка.ЗадачиМнеВсего);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоказыватьВыполненные(Список, ПоказыватьВыполненные)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "Выполнена", Ложь, Не ПоказыватьВыполненные);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗадачу(Задача, Комментарий)
	
	ЗаблокироватьДанныеДляРедактирования(Задача);
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.РезультатВыполнения = Комментарий;
	ЗадачаОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачу()
	
	ТекущийСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	Если ТекущийСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		УстановитьСтраницуМногоЗадач();
		Возврат;
	КонецЕсли;
	
	ЗаписатьКомментарийКЗадаче();
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСобытиеПоЗадаче =
		ЗадачиМнеПоследняяЗадачаСЗаписаннойИсторийСобытий <> ЗадачиМнеТекущаяЗадача;
	
	РезультатОбработки = ОбновитьДанныеЗадачи(ЗадачиМнеТекущаяЗадача, ТекущийПользователь,
		ОтображатьУдаленныеПриложения, ЗаписатьСобытиеПоЗадаче, ЗадачиМнеТекущаяЕстьПодзадачи);
	
	Если ЗаписатьСобытиеПоЗадаче Тогда
		ЗадачиМнеПоследняяЗадачаСЗаписаннойИсторийСобытий = ЗадачиМнеТекущаяЗадача;
	КонецЕсли;
	
	ПолноеОписаниеЗадачи = РезультатОбработки.ПолноеОписаниеЗадачи;
	
	ТочкаМаршрутаТекущейЗадачи = РезультатОбработки.ТочкаМаршрутаТекущейЗадачи;
	
	ВедущаяЗадачаТекущейЗадачи = РезультатОбработки.ВедущаяЗадачаТекущейЗадачи;
	ЭтоУзелВыполненияПроцесса = РезультатОбработки.ЭтоУзелВыполненияПроцесса;
	
	Если ОбновитьРезультатВыполнения Тогда
		РезультатВыполнения = РезультатОбработки.РезультатВыполнения;
	Иначе
		ОбновитьРезультатВыполнения = Истина;
	КонецЕсли;
	
	ПредметЗадачи = РезультатОбработки.ПредметЗадачи;
	Элементы.ГруппаВидыКнопокЗадачи.ТекущаяСтраница = Элементы[РезультатОбработки.СтраницаКнопокЗадачи];
	
	// Установить значения реквизитов
	Если ТипЗнч(РезультатОбработки.ДополнительныеРеквизиты) = Тип("Структура") Тогда
		Для каждого Реквизит Из РезультатОбработки.ДополнительныеРеквизиты Цикл
			ЭтаФорма[Реквизит.Ключ] = Реквизит.Значение;
		КонецЦикла;
	КонецЕсли;
	
	// Установить свойства элементов
	Если ТипЗнч(РезультатОбработки.СвойстваЭлементов) = Тип("Структура") Тогда
		Для каждого Элемент Из РезультатОбработки.СвойстваЭлементов Цикл
			НайденныйЭлемент = Элементы[Элемент.Ключ];
			Для каждого СвойствоЭлементаИЗначение Из Элемент.Значение Цикл
				ИмяСвойства = СвойствоЭлементаИЗначение.Ключ;
				ЗначениеСвойства = СвойствоЭлементаИЗначение.Значение;
				
				Если ИмяСвойства = "ТекущаяСтраница" Тогда
					НайденныйЭлемент[ИмяСвойства] = Элементы[ЗначениеСвойства];
					Продолжить;
				КонецЕсли;
				
				Если ИмяСвойства = "СписокВыбора" Тогда
					СписокВыбора = НайденныйЭлемент[ИмяСвойства];
					СписокВыбора.Очистить();
					
					Для Каждого ЭлементСписка Из ЗначениеСвойства Цикл
						СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
					КонецЦикла;
					
					Продолжить;
				КонецЕсли;
				
				НайденныйЭлемент[ИмяСвойства] = ЗначениеСвойства;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОбработки.СвойстваКоманд) = Тип("Структура") Тогда
		Если РезультатОбработки.СвойстваКоманд.Количество() > 0 Тогда
			ИзменитьСвойстваКоманд(РезультатОбработки.СвойстваКоманд);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если РезультатОбработки.ПоказыватьПредметыЗадачи Тогда
		Если РезультатОбработки.МассивПриложений.Количество() > 0 Тогда
			ЗаполнитьДеревоПриложений(ЭлементыДерева, РезультатОбработки.МассивПриложений);
			Элементы.ДеревоПриложений.Отображение = ОтображениеТаблицы.Дерево;
			Элементы.ДеревоПриложений.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			
			Для Каждого ЭлементДереваВерхнегоУровня ИЗ ЭлементыДерева Цикл
				Элементы.ДеревоПриложений.Развернуть(ЭлементДереваВерхнегоУровня.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Файлы,
			"ВладелецФайла",
			ЗадачиМнеТекущийБизнесПроцесс);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Файлы,
			"ТекущийПользователь",
			ТекущийПользователь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Файлы,
			"ОтображатьУдаленные",
			ОтображатьУдаленныеПриложения);
	КонецЕсли;
	
	Если РезультатОбработки.ПоказыватьПредметыЗадачи
		И РезультатОбработки.МассивПриложений.Количество() > 0 Тогда
		
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы;
	ИначеЕсли РезультатОбработки.КоличествоФайлов > 0 Тогда
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИФайлы;
	Иначе
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписание;
	КонецЕсли;
	
	Если РезультатОбработки.ПоказыватьПредметыЗадачи Тогда
		Элементы.ДобавитьПредмет.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьПредмет.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
	Иначе
		Элементы.ДобавитьПредмет.Доступность = Ложь;
		Элементы.ДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьПредмет.Доступность = Ложь;
		Элементы.ДеревоПриложенийКонтекстноеМенюДобавитьФайл.Доступность = Не РезультатОбработки.Выполнена;
	КонецЕсли;
	
	// заполним таблицу подзадач
	ЗаполнитьТаблицуПодзадач(РезультатОбработки.МассивПодзадач);
	
	УстановитьВидимостьДанныхЗадачи(Элементы, Истина);
	
	ФактическийИсполнительЗадачи = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПодзадач(МассивПодзадач)
	
	Подзадачи.Очистить();
	Для Каждого Стр Из МассивПодзадач Цикл
		НовСтр = Подзадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;	
	Подзадачи.Сортировать("ДатаСоздания");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДанныеЗадачи(
	Задача,
	ТекущийПользователь,
	ОтображатьУдаленныеПриложения,
	ЗаписатьСобытиеПоЗадаче,
	ЕстьПодзадачи)
	
	Результат = Новый Структура(
		"ПолноеОписаниеЗадачи, 
		|ПредметЗадачи, 
		|РезультатВыполнения, 
		|СтраницаКнопокЗадачи, 
		|Выполнена, 
		|ДополнительныеРеквизиты, 
		|СвойстваЭлементов,
		|МассивПриложений,
		|ДекорацияЗаголовокПриложений,
		|ПоказыватьПредметыЗадачи,
		|КоличествоФайлов,
		|ТочкаМаршрутаТекущейЗадачи,
		|СтраницаЗадатьВопрос,
		|ВедущаяЗадачаТекущейЗадачи,
		|ЭтоУзелВыполненияПроцесса,
		|СвойстваКоманд,
		|МассивПодзадач");
		
	ДополнительныеРеквизиты = Новый Структура;
	СвойстваЭлементов = Новый Структура;
	СвойстваКоманд = Новый Структура;
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Задача, 
		"БизнесПроцесс,
		|БизнесПроцесс.ВедущаяЗадача,
		|Описание,
		|Наименование,
		|ТочкаМаршрута,
		|Выполнена,
		|РезультатВыполнения,
		|Исполнитель,
		|РольИсполнителя,
		|БизнесПроцесс.УзелОбмена");
	
	Результат.РезультатВыполнения = РеквизитыЗадачи.РезультатВыполнения;
	Результат.Выполнена = РеквизитыЗадачи.Выполнена;
	
	Результат.ВедущаяЗадачаТекущейЗадачи = РеквизитыЗадачи.БизнесПроцессВедущаяЗадача;
	
	ТочкаМаршрутаСсылка = РеквизитыЗадачи.ТочкаМаршрута;
	Результат.ТочкаМаршрутаТекущейЗадачи = ТочкаМаршрутаСсылка;
	ТипБизнесПроцесса = ТипЗнч(РеквизитыЗадачи.БизнесПроцесс);
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) Тогда
		ТочкиМаршрутаПроцесса = 
			БизнесПроцессы[РеквизитыЗадачи.БизнесПроцесс.Метаданные().Имя].ТочкиМаршрута;
	Иначе
		ТочкиМаршрутаПроцесса = Неопределено;
	КонецЕсли;
	
	СтраницаКнопокЗадачи = "ГруппаКнопокПерейтиКФормеЗадачи";
	
	Результат.ПоказыватьПредметыЗадачи = Истина;
	
	// Видимость кнопок вопросов
	СвойстваЭлементов.Вставить("ЗадатьВопрос", Новый Соответствие);
	СвойстваЭлементов.ЗадатьВопрос.Вставить("Видимость", Истина);
	СвойстваЭлементов.Вставить("ВопросыПоЗадаче", Новый Соответствие);
	СвойстваЭлементов.ВопросыПоЗадаче.Вставить("Видимость", Истина);
	
	КоличествоВопросов = 
		БизнесПроцессыИЗадачиВызовСервера.КоличествоВопросовВыполненияЗадачи(Задача);
		
	Если КоличествоВопросов > 0 Тогда
		СвойстваЭлементов.ЗадатьВопрос.Вставить("Видимость", Ложь);
	Иначе
		СвойстваЭлементов.ВопросыПоЗадаче.Вставить("Видимость", Ложь);
	КонецЕсли;
	
	СвойстваЭлементов.Вставить("ЗадачаЗадачаИсполнителяСогласоватьПереносСрока", Новый Соответствие);
	СвойстваЭлементов.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Вставить("Видимость", Не РеквизитыЗадачи.Выполнена);
	
	Если ЕстьПодзадачи Тогда
		Результат.МассивПодзадач = РаботаСБизнесПроцессамиВызовСервера.СформироватьПодзадачи(Задача);
	Иначе
		Результат.МассивПодзадач = Новый Массив;
	КонецЕсли;	
	// Видимость таблицы подзадач
	СвойстваЭлементов.Вставить("Подзадачи", Новый Соответствие);
	СвойстваЭлементов.Подзадачи.Вставить("Видимость", (Результат.МассивПодзадач.Количество() <> 0));
	СвойстваЭлементов.Вставить("ПодзадачиОписание", Новый Соответствие);
	СвойстваЭлементов.ПодзадачиОписание.Вставить("Видимость", (Результат.МассивПодзадач.Количество() <> 0));
	
	Результат.КоличествоФайлов = 0;
	
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс)
		Или РеквизитыЗадачи.Выполнена Тогда

	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Рассмотреть Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРассмотрение";
			
			ПолучитьРеквизитыИСвойстваЗадачиРассмотрено(
					Задача,
					РеквизитыЗадачи, 
					ДополнительныеРеквизиты, 
					СвойстваЭлементов);
			
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРассмотрениеОбработано";
			
			ПолучитьРеквизитыИСвойстваЗадачиРассмотреноОбработано(
				Задача,
				РеквизитыЗадачи, 
				ДополнительныеРеквизиты, 
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
				
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.РассмотрениеИнициатором Тогда
			ВидВопроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыЗадачи.БизнесПроцесс, 
				"ВидВопроса");
				
			Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
				
				СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовПереносСрока";
				
				ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросовПереносСрока(
					Задача,
					РеквизитыЗадачи, 
					ДополнительныеРеквизиты, 
					СвойстваЭлементов);
					
			Иначе
					
				ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросов(
					Задача,
					РеквизитыЗадачи,
					ДополнительныеРеквизиты,
					СвойстваЭлементов);
					
				СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовАвтор";
			КонецЕсли;
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.ОзнакомлениеСРезультатомРассмотрения Тогда
			
			ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросов(
					Задача,
					РеквизитыЗадачи,
					ДополнительныеРеквизиты,
					СвойстваЭлементов);
			
			СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовИсполнитель";
		КонецЕсли;
		
		Результат.ПоказыватьПредметыЗадачи = Ложь;
		
		Результат.КоличествоФайлов = КоличествоФайлов(
			РеквизитыЗадачи.БизнесПроцесс, ОтображатьУдаленныеПриложения);
			
		// Видимость кнопок вопросов
		СвойстваЭлементов.ЗадатьВопрос.Вставить("Видимость", Ложь);
		СвойстваЭлементов.ВопросыПоЗадаче.Вставить("Видимость", Ложь);
		СвойстваЭлементов.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Вставить("Видимость", Ложь);
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Выполнить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручение";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролировать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручениеКонтролер";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Проверить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручениеПроверяющий";
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролер Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокКомплексныйПроцесс";
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Зарегистрировать Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокРегистрация";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРегистрацияОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиРегистрацияОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Пригласить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашение";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашение(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Оповестить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашениеОповестить";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОповестить(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашениеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Согласовать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокСогласование";
			
			ПолучитьРеквизитыИСвойстваЗадачиСогласованиеСогласовать(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда 
			
			СтраницаКнопокЗадачи = "ГруппаКнопокСогласованиеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиСогласованиеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Утвердить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокУтверждение";
			
			ПолучитьРеквизитыИСвойстваЗадачиУтверждение(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов,
				СвойстваКоманд);
		
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокУтверждениеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиУтверждениеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов,
				СвойстваКоманд);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Исполнить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнение";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролировать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеКонтролер";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.ОтветственноеИсполнение Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеОтвИсполнитель";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Проверить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеПроверяющий";
		КонецЕсли;
	
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда	
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокОзнакомление";
		КонецЕсли;
	
	КонецЕсли;
	
	Результат.СтраницаКнопокЗадачи = СтраницаКнопокЗадачи;
	
	РеквизитыЗадачи.Вставить("Ссылка", Задача);
	РеквизитыЗадачи.Вставить("НомерИтерацииЗадачи", 0);
	Если ДополнительныеРеквизиты.Свойство("НомерИтерацииЗадачи") Тогда
		РеквизитыЗадачи.НомерИтерацииЗадачи = ДополнительныеРеквизиты.НомерИтерацииЗадачи;
	КонецЕсли;
	
	ПредметыВыборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Предметы");
	Предметы = ПредметыВыборка.Выгрузить();
	
	ПредметДокумент = ОбзорЗадачВызовСервера.ПолучитьОсновнойПредметДокумент(Предметы);
	Если ЗначениеЗаполнено(ПредметДокумент) Тогда
	
		РеквизитыЗадачи.Вставить("ПредметДокумент", ПредметДокумент);
			
	КонецЕсли;		
	
	Результат.ПолноеОписаниеЗадачи = 
		ОбзорЗадачВызовСервера.ПолучитьОбзорЗадачиДляСпискаЗадачиМне(РеквизитыЗадачи);
	
	// Хронометраж
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(Задача);
	
	СвойстваЭлементов.Вставить("ПереключитьХронометраж", ПараметрыУчетаВремени.ПереключитьХронометраж);
	СвойстваЭлементов.Вставить("УказатьТрудозатраты", ПараметрыУчетаВремени.УказатьТрудозатраты);
	
	ДополнительныеРеквизиты.Вставить("ДатаНачалаХронометража", ПараметрыУчетаВремени.ДатаНачалаХронометража);
	ДополнительныеРеквизиты.Вставить("ДатаКонцаХронометража", ПараметрыУчетаВремени.ДатаКонцаХронометража);
	ДополнительныеРеквизиты.Вставить("ВключенХронометраж", ПараметрыУчетаВремени.ВключенХронометраж);
	ДополнительныеРеквизиты.Вставить("ОпцияИспользоватьУчетВремени", ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени);
	ДополнительныеРеквизиты.Вставить("ВидыРабот", ПараметрыУчетаВремени.ВидыРабот);
	ДополнительныеРеквизиты.Вставить("СпособУказанияВремени", ПараметрыУчетаВремени.СпособУказанияВремени);
	
	Результат.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
	Результат.СвойстваЭлементов = СвойстваЭлементов;
	Результат.СвойстваКоманд = СвойстваКоманд;
	
	// список приложений
	Если Результат.ПоказыватьПредметыЗадачи Тогда
		СформироватьМассивПриложенийПоПредметам(Задача, ОтображатьУдаленныеПриложения, 
			Результат.МассивПриложений);
	КонецЕсли;
	
	Если ЗаписатьСобытиеПоЗадаче Тогда
		ИсторияСобытийЗадач.ЗаписатьСобытиеОткрытаКарточка(Задача);
	КонецЕсли;
	
	ЭтотУзелОбмена = РаботаСБизнесПроцессами.ЭтотУзелОбменаДляОбработкиПроцессов();
	Результат.ЭтоУзелВыполненияПроцесса = (РеквизитыЗадачи.БизнесПроцессУзелОбмена = ЭтотУзелОбмена);
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьМассивПриложенийПоПредметам(Задача, ОтображатьУдаленныеПриложения, 
	МассивПриложений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = Задача.Предметы;
	МассивПриложений = Новый Массив;
	
	Если НЕ ОтображатьУдаленныеПриложения Тогда
		
		КоличествоПредметов = 0;
		
		Для Каждого СтрПредмет ИЗ Предметы Цикл
			Если НЕ ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			ИначеЕсли НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПредмет.Предмет, "ПометкаУдаления") Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоПредметов = Предметы.Количество();
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
	
		Если СтрокаПредмета.Предмет <> Неопределено И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Если Не ОтображатьУдаленныеПриложения И СтрокаПредмета.Предмет.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП,
			|Расширение,
			|ПолноеИмяФайлаВРабочемКаталоге,
			|ДатаМодификацииУниверсальнаяВБазе");
			
		Строка.ДочерниеЭлементы = Новый Массив;	
		
		Строка.Наименование = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		Строка.Ссылка = СтрокаПредмета.Предмет;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, 
					"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, ПодписанЭП");
					
				Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
					Строка.ТипФайла = Строка.ТипФайла + 1;
				КонецЕсли;	
				Строка.ТипФайла = РеквизитыФайла.ИндексКартинки;
				
				Строка.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
				Строка.Редактирует = РеквизитыФайла.Редактирует;
				Если Не Строка.Редактирует.Пустая() Тогда
					Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						Строка.РедактируетТекущийПользователь = Истина;
					Иначе	
						Строка.РедактируетДругойПользователь = Истина;
					КонецЕсли;
				КонецЕсли;
				Строка.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
			Иначе
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строка.ИмяПредмета) Тогда
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			Иначе
				Если СтрокаПредмета.Предмет <> Неопределено Тогда
					Строка.ТипФайла = ?(СтрокаПредмета.Предмет.ПометкаУдаления, 11, 10); // Простое изображение листа
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		ДобавитьФайлыВДеревоПриложений(Строка, СтрокаПредмета.Предмет, ОтображатьУдаленныеПриложения);
		МассивПриложений.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайлыВДеревоПриложений(СтрокаПредмета, Предмет, ОтображатьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Описание КАК Описание,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВладелецФайла", Предмет);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП,
			|Расширение,
			|ПолноеИмяФайлаВРабочемКаталоге,
			|ДатаМодификацииУниверсальнаяВБазе");
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Описание) Тогда
			Строка.Наименование = Строка.Наименование + ", " + ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		Строка.ТипФайла = ВыборкаДетальныеЗаписи.ИндексКартинки;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Строка.ТипФайла = Строка.ТипФайла + 1;
		КонецЕсли;	
		
		Строка.ХранитьВерсии = ВыборкаДетальныеЗаписи.ХранитьВерсии;
		Строка.Редактирует = ВыборкаДетальныеЗаписи.Редактирует;
		Если Не Строка.Редактирует.Пустая() Тогда
			Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
				Строка.РедактируетТекущийПользователь = Истина;
			Иначе	
				Строка.РедактируетДругойПользователь = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Строка.ПодписанЭП = ВыборкаДетальныеЗаписи.ПодписанЭП;
		
		Строка.Расширение = ВыборкаДетальныеЗаписи.Расширение;
		
		Попытка
			Строка.ПолноеИмяФайлаВРабочемКаталоге = "";
			
			Если Строка.РедактируетТекущийПользователь = Истина 
					И ЗначениеЗаполнено(Строка.Ссылка) Тогда
					
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
					Строка.Ссылка);
				Строка.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
				Строка.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
		СтрокаПредмета.ДочерниеЭлементы.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросовПереносСрока(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"ПредметРассмотрения, НовыйСрок, УзелОбмена");
		
	РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыБизнесПроцесса.ПредметРассмотрения,
		"БизнесПроцесс, СрокИсполнения");
	
	// Инициализация реквизитов карточки
	ДополнительныеРеквизиты.Вставить(
		"ПредметРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотрения);
	ДополнительныеРеквизиты.Вставить(
		"БизнесПроцессПредметаРассмотрения",
		РеквизитыПредмета.БизнесПроцесс);
	ДополнительныеРеквизиты.Вставить(
		"ИмяФормыДляОткрытияКарточкиПроцесса",
		"БизнесПроцесс." + 
		РеквизитыПредмета.БизнесПроцесс.Метаданные().Имя + ".ФормаОбъекта");

	ДополнительныеРеквизиты.Вставить("СтарыйСрок", РеквизитыПредмета.СрокИсполнения);
	ДополнительныеРеквизиты.Вставить("НовыйСрок", РеквизитыБизнесПроцесса.НовыйСрок);
	ДополнительныеРеквизиты.Вставить(
		"ДлительностьПереноса",
		ПереносСроковВыполненияЗадачВызовСервера.ПолучитьПодписьДлительностьПереноса(
			ДополнительныеРеквизиты.БизнесПроцессПредметаРассмотрения.Автор,
			ДополнительныеРеквизиты.СтарыйСрок,
			ДополнительныеРеквизиты.НовыйСрок));
	
	УзелОбменаПредметаРассмотрения = 
		ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			РеквизитыПредмета.БизнесПроцесс, "УзелОбмена");
		
	УзелОбменаЗаявки = РеквизитыБизнесПроцесса.УзелОбмена;
		
	// Если заявка на перенос срока создана в другом узле, то
	// перенос срока процесса (предмета рассмотрения) возможен только в карточке процесса
	ТребуетсяРучноеИзменениеСрока = УзелОбменаПредметаРассмотрения <> УзелОбменаЗаявки;
	
	ДополнительныеРеквизиты.Вставить(
		"ТребуетсяРучноеИзменениеСрока",
		ТребуетсяРучноеИзменениеСрока);
		
	СвойстваЭлементов.Вставить("ДекорацияЗнакВниманиеРучной", Новый Соответствие);
	СвойстваЭлементов.ДекорацияЗнакВниманиеРучной.Вставить("Видимость", ТребуетсяРучноеИзменениеСрока);
	
	СвойстваЭлементов.Вставить("НовыйСрокДата", Новый Соответствие);
	СвойстваЭлементов.НовыйСрокДата.Вставить("ТолькоПросмотр", ТребуетсяРучноеИзменениеСрока);
	
	СвойстваЭлементов.Вставить("НовыйСрокВремя", Новый Соответствие);
	СвойстваЭлементов.НовыйСрокВремя.Вставить("ТолькоПросмотр", ТребуетсяРучноеИзменениеСрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросов(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		РеквизитыЗадачи.БизнесПроцесс, "ПредметРассмотрения, ПредметРассмотрения.БизнесПроцесс");
	
	ДополнительныеРеквизиты.Вставить(
		"ПредметРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотрения);
		
	ДополнительныеРеквизиты.Вставить(
		"БизнесПроцессПредметаРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотренияБизнесПроцесс);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашение(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"ДатаНачалаМероприятия, ДатаОкончанияМероприятия, МестоПроведения");
	
	ДополнительныеРеквизиты.Вставить(
		"ДатаНачалаМероприятия",
		РеквизитыБизнесПроцесса.ДатаНачалаМероприятия);
	ДополнительныеРеквизиты.Вставить(
		"МестнаяДатаНачалаМероприятия",
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(РеквизитыБизнесПроцесса.ДатаНачалаМероприятия));
	ДополнительныеРеквизиты.Вставить(
		"МестоПроведения",
		РеквизитыБизнесПроцесса.МестоПроведения);
	ДополнительныеРеквизиты.Вставить(
		"ДатаОкончанияМероприятия",
		РеквизитыБизнесПроцесса.ДатаОкончанияМероприятия);
		
	ДополнительныеРеквизиты.Вставить(
		"ИспользоватьРабочийКалендарь",
		ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь"));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОповестить(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс,
		"РезультатПриглашения");
	
	// результат приглашения
	СвойстваЭлементов.Вставить("РезультатПриглашенияОповестить", Новый Соответствие);
	ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияЗадачи",
			РеквизитыБизнесПроцесса.РезультатПриглашения);
	
	Если РеквизитыБизнесПроцесса.РезультатПриглашения = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		Или РеквизитыБизнесПроцесса.РезультатПриглашения = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияОповестить",
			НСтр("ru = 'Приглашение подтверждено с указанным местом и временем'"));
		СвойстваЭлементов.РезультатПриглашенияОповестить.Вставить(
			"ЦветТекста",
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	Иначе
		ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияОповестить",
			НСтр("ru = 'Приглашение отменено с указанным местом и временем'"));
		СвойстваЭлементов.РезультатПриглашенияОповестить.Вставить(
			"ЦветТекста",
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыПриглашения");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыПриглашения = РеквизитыБизнесПроцесса.РезультатыПриглашения.Выгрузить();

	// номер итерации
	СвойстваЭлементов.Вставить("РезультатПриглашения", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаПриглашениеОзнакомитьсяКнопки", Новый Соответствие);
		
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат приглашения
	РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
	СтрокиИтерации = РезультатыПриглашения.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
	
	ЕстьПринятые = Ложь;
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
			ЕстьПринятые = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПринятые Тогда 
		РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
	Иначе	
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
				Если Строка.ЯвкаОбязательна Тогда 
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
					Прервать;
				Иначе
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// цвет результата
	Если РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		Или РезультатПриглашенияЗадачи = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		СвойстваЭлементов.РезультатПриглашения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
		
	Иначе
		
		СвойстваЭлементов.РезультатПриглашения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
		
	КонецЕсли;
	
	// страница кнопок
	Если РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда 
		
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаПринято");
			
	ИначеЕсли РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаПринятоОбязательными");
			
	ИначеЕсли РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками
		Или РезультатПриглашенияЗадачи = 
			Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
			
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаНеПринято");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатПриглашенияЗадачи", РезультатПриглашенияЗадачи);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиСогласованиеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыСогласования");
	
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыСогласования = РеквизитыБизнесПроцесса.РезультатыСогласования.Выгрузить();
	
	// номер итерации	
	СвойстваЭлементов.Вставить("РезультатСогласования", Новый Соответствие);	
	СвойстваЭлементов.Вставить("ГруппаСогласованиеОзнакомитьсяКнопки", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат согласования
	РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.Согласовано;
	СтрокиИтерации = РезультатыСогласования.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
		
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано;
			Прервать;
		КонецЕсли;
		
		Если Строка.РезультатСогласования = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
			
			РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			
		КонецЕсли;
	КонецЦикла;
	
	// цвет результата
	Если РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.Согласовано 
		Или РезультатСогласованияЗадачи = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			
		СвойстваЭлементов.РезультатСогласования.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
		
	ИначеЕсли РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		
		СвойстваЭлементов.РезультатСогласования.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
		
	КонецЕсли;
	
	// страница кнопок
	Если РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		СвойстваЭлементов.ГруппаСогласованиеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаНеСогласовано");
	Иначе
		СвойстваЭлементов.ГруппаСогласованиеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаСогласовано");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатСогласованияЗадачи", РезультатСогласованияЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиСогласованиеСогласовать(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыСогласования");
	
	РезультатыСогласования = РеквизитыБизнесПроцесса.РезультатыСогласования.Выгрузить();
	
	// номер цикла
	НомерИтерацииЗадачи = 0;	
	НайденнаяСтрока = РезультатыСогласования.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	
	ПодписыватьЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП");
	ДополнительныеРеквизиты.Вставить("ПодписыватьРезультатВыполненияЭП", ПодписыватьЭП);
	
	Если ПодписыватьЭП Тогда
		СвойстваЭлементов.Вставить("Согласовано", Новый Соответствие);
		СвойстваЭлементов.Согласовано.Вставить("Заголовок", НСтр("ru = 'Согласовано (ЭП)'"));
		СвойстваЭлементов.Согласовано.Вставить("Высота", 3);
		СвойстваЭлементов.Согласовано.Вставить("ВысотаЗаголовка", 2);
		
		СвойстваЭлементов.Вставить("СогласованоСЗамечаниями", Новый Соответствие);
		СвойстваЭлементов.СогласованоСЗамечаниями.Вставить("Заголовок", НСтр("ru = 'Согласовано с замечаниями (ЭП)'"));
		СвойстваЭлементов.СогласованоСЗамечаниями.Вставить("Высота", 3);
		СвойстваЭлементов.СогласованоСЗамечаниями.Вставить("ВысотаЗаголовка", 3);
		
		СвойстваЭлементов.Вставить("НеСогласовано", Новый Соответствие);
		СвойстваЭлементов.НеСогласовано.Вставить("Заголовок", НСтр("ru = 'Не согласовано (ЭП)'"));
		СвойстваЭлементов.НеСогласовано.Вставить("Высота", 3);
		СвойстваЭлементов.НеСогласовано.Вставить("ВысотаЗаголовка", 2);
		
		СвойстваЭлементов.Вставить("ЗадачаЗаписать_Согласование", Новый Соответствие);
		СвойстваЭлементов.ЗадачаЗаписать_Согласование.Вставить("Высота", 3);
	Иначе
		СвойстваЭлементов.Вставить("Согласовано", Новый Соответствие);
		СвойстваЭлементов.Согласовано.Вставить("Заголовок", НСтр("ru = 'Согласовано'"));
		СвойстваЭлементов.Согласовано.Вставить("Высота", 2);
		СвойстваЭлементов.Согласовано.Вставить("ВысотаЗаголовка", 0);
		
		СвойстваЭлементов.Вставить("СогласованоСЗамечаниями", Новый Соответствие);
		СвойстваЭлементов.СогласованоСЗамечаниями.Вставить("Заголовок", НСтр("ru = 'Согласовано с замечаниями'"));
		СвойстваЭлементов.СогласованоСЗамечаниями.Вставить("Высота", 2);
		СвойстваЭлементов.СогласованоСЗамечаниями.Вставить("ВысотаЗаголовка", 2);
		
		СвойстваЭлементов.Вставить("НеСогласовано", Новый Соответствие);
		СвойстваЭлементов.НеСогласовано.Вставить("Заголовок", НСтр("ru = 'Не согласовано'"));
		СвойстваЭлементов.НеСогласовано.Вставить("Высота", 2);
		СвойстваЭлементов.НеСогласовано.Вставить("ВысотаЗаголовка", 0);
		
		СвойстваЭлементов.Вставить("ЗадачаЗаписать_Согласование", Новый Соответствие);
		СвойстваЭлементов.ЗадачаЗаписать_Согласование.Вставить("Высота", 2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиУтверждение(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов, СвойстваКоманд)
	
	Если НЕ (ТипЗнч(РеквизитыЗадачи) = Тип("Структура")
		И РеквизитыЗадачи.Свойство("БизнесПроцесс")) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП, ВидПроцесса");
		
	ПодписыватьЭП = РеквизитыБизнесПроцесса.ПодписыватьЭП;	
		
	Если НЕ ЗначениеЗаполнено(ПодписыватьЭП) Тогда
		ПодписыватьЭП = Ложь;
	КонецЕсли;
	
	ПодписыватьЭП = ПодписыватьЭП И ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
		
	ДополнительныеРеквизиты.Вставить("ПодписыватьРезультатВыполненияЭП", ПодписыватьЭП);
	
	ВидПроцесса = РеквизитыБизнесПроцесса.ВидПроцесса;
	Если Не ЗначениеЗаполнено(РеквизитыБизнесПроцесса.ВидПроцесса) Тогда
		ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Утверждение;
	КонецЕсли;
	
	// заголовки команд
	СвойстваКоманд.Вставить("ЗадачаУтверждено", Новый Соответствие);
	СвойстваКоманд.Вставить("ЗадачаНеУтверждено", Новый Соответствие);
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		
		Если ПодписыватьЭП Тогда
			ЗаголовокУтверждено = НСтр("ru = 'Подписать (ЭП)'");
		Иначе
			ЗаголовокУтверждено = НСтр("ru = 'Подписать'");
		КонецЕсли;
		ПодсказкаУтверждено = ЗаголовокУтверждено;
		
		ЗаголовокНеУтверждено = НСтр("ru = 'Отклонить'");
		ПодсказкаНеУтверждено = ЗаголовокНеУтверждено;
	Иначе
		
		Если ПодписыватьЭП Тогда
			ЗаголовокУтверждено = НСтр("ru = 'Утверждено (ЭП)'");
		Иначе
			ЗаголовокУтверждено = НСтр("ru = 'Утверждено'");
		КонецЕсли;
		ПодсказкаУтверждено = ЗаголовокУтверждено;
		
		ЗаголовокНеУтверждено = НСтр("ru = 'Не утверждено'");
		ПодсказкаНеУтверждено = ЗаголовокНеУтверждено;
	КонецЕсли;	
	
	СвойстваКоманд.ЗадачаУтверждено.Вставить("Заголовок", ЗаголовокУтверждено);
	СвойстваКоманд.ЗадачаУтверждено.Вставить("Подсказка", ПодсказкаУтверждено);
	
	СвойстваКоманд.ЗадачаНеУтверждено.Вставить("Заголовок", ЗаголовокНеУтверждено);
	СвойстваКоманд.ЗадачаНеУтверждено.Вставить("Подсказка", ПодсказкаНеУтверждено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиУтверждениеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов, СвойстваКоманд)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыУтверждения, ВидПроцесса");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыУтверждения = РеквизитыБизнесПроцесса.РезультатыУтверждения.Выгрузить();
	
	// номер итерации
	СвойстваЭлементов.Вставить("РезультатУтверждения", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаУтверждениеОзнакомитьсяКнопки", Новый Соответствие);
	
	// заголовки кнопок
	СвойстваКоманд.Вставить("ЗадачаУтверждениеЗавершитьУтверждение", Новый Соответствие);
	СвойстваКоманд.Вставить("ЗадачаУтверждениеПовторить", Новый Соответствие);
	
	ВидПроцесса = РеквизитыБизнесПроцесса.ВидПроцесса;
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		ЗаголовокЗавершитьУтверждение = НСтр("ru = 'Завершить подписание'");
		ЗаголовокУтверждениеПовторить = НСтр("ru = 'Повторить подписание...'");
	Иначе
		ЗаголовокЗавершитьУтверждение = НСтр("ru = 'Завершить утверждение'");
		ЗаголовокУтверждениеПовторить = НСтр("ru = 'Повторить утверждение...'");
	КонецЕсли;
	
	ПодсказкаЗавершитьУтверждение = ЗаголовокЗавершитьУтверждение;
	ПодсказкаУтверждениеПовторить = ЗаголовокУтверждениеПовторить;

	СвойстваКоманд.ЗадачаУтверждениеЗавершитьУтверждение.Вставить("Заголовок", ЗаголовокЗавершитьУтверждение);
	СвойстваКоманд.ЗадачаУтверждениеЗавершитьУтверждение.Вставить("Подсказка", ПодсказкаЗавершитьУтверждение);	
		
	СвойстваКоманд.ЗадачаУтверждениеПовторить.Вставить("Заголовок", ЗаголовокУтверждениеПовторить);
	СвойстваКоманд.ЗадачаУтверждениеПовторить.Вставить("Подсказка", ПодсказкаУтверждениеПовторить);		
		
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат утверждения
	РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.Утверждено;
	СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(
		Новый Структура("НомерИтерации",
		НомерИтерацииЗадачи));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
			РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// цвет надписи
	Если РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.Утверждено Тогда
		СвойстваЭлементов.РезультатУтверждения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	ИначеЕсли РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		СвойстваЭлементов.РезультатУтверждения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;
		
	// представление результата
	СвойстваЭлементов.РезультатУтверждения.Вставить("РежимВыбораИзСписка", Истина);
	СписокВыбораРезультатУтверждения = СформироватьСписокВыбораРезультатУтверждения(ВидПроцесса);
	СвойстваЭлементов.РезультатУтверждения.Вставить("СписокВыбора", СписокВыбораРезультатУтверждения);

	// страница кнопок
	Если РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		СвойстваЭлементов.ГруппаУтверждениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаУтверждениеОзнакомитьсяКнопкиСтраницаНеУтверждено");
	Иначе
		СвойстваЭлементов.ГруппаУтверждениеОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаУтверждениеОзнакомитьсяКнопкиСтраницаУтверждено");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатУтвержденияЗадачи", РезультатУтвержденияЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРегистрацияОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыРегистрации");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыРегистрации = РеквизитыБизнесПроцесса.РезультатыРегистрации.Выгрузить();
	
	// номер итерации
	СвойстваЭлементов.Вставить("РезультатРегистрации", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаРегистрацияОзнакомитьсяКнопки", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат регистрации
	РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.Зарегистрировано;
	СтрокиИтерации = РезультатыРегистрации.НайтиСтроки(
		Новый Структура("НомерИтерации",
		НомерИтерацииЗадачи));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда 
			РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// цвет надписи
	Если РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
		СвойстваЭлементов.РезультатРегистрации.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	ИначеЕсли РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
			СвойстваЭлементов.РезультатРегистрации.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;
	
	// страница кнопок
	Если РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
		СвойстваЭлементов.ГруппаРегистрацияОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаРегистрацияОзнакомитьсяКнопкиСтраницаНеЗарегистрировано");
	Иначе
		СвойстваЭлементов.ГруппаРегистрацияОзнакомитьсяКнопки.Вставить(
			"ТекущаяСтраница",
			"ГруппаРегистрацияОзнакомитьсяКнопкиСтраницаЗарегистрировано");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатРегистрацииЗадачи", РезультатРегистрацииЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРассмотрено(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет.ВидДокумента.ПодписыватьРезолюцииЭП = ИСТИНА
		|	И ЗадачаИсполнителяПредметы.Ссылка = &Задача";
		
	Запрос.УстановитьПараметр("Задача", Задача);
	ПодписыватьРезультатВыполненияЭП = НЕ Запрос.Выполнить().Пустой();
	
	ДополнительныеРеквизиты.Вставить(
		"ПодписыватьРезультатВыполненияЭП", ПодписыватьРезультатВыполненияЭП);
		
	РасширеннаяФорма = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя",
		"РасширеннаяФорма",
		Ложь);
		
	СвойстваЭлементов.Вставить("СтандартноеРассмотрение", Новый Соответствие);
	СвойстваЭлементов.Вставить("Отправить", Новый Соответствие);
	СвойстваЭлементов.СтандартноеРассмотрение.Вставить(
		"Видимость",
		РасширеннаяФорма);
	СвойстваЭлементов.Отправить.Вставить(
		"Видимость",
		РасширеннаяФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРассмотреноОбработано(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	СвойстваЭлементов.Вставить("Обработано", Новый Соответствие);
	
	ДоступностьКнопкиОбработано = Ложь;
	
	ВедущийБизнесПроцесс = Задача.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс;
	Если НЕ ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		И НЕ ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") Тогда
		
		ДоступностьКнопкиОбработано = Истина;
		
	КонецЕсли;
	
	СвойстваЭлементов.Обработано.Вставить("Доступность", ДоступностьКнопкиОбработано);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи)
	
	Элементы.СтраницыПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДанныхЗадачи(Элементы, ПоказыватьДанныеЗадачи)
	
	Если ПоказыватьДанныеЗадачи Тогда
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаПросмотрЗадачи;
	Иначе
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуНетЗадачи()
	
	ТекущийЭлемент = Элементы.СоздатьПодзадачу;
	
	Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГруппировкуЗадачМне(ЭтаФорма)
	
	ЭтаФорма.Элементы.СтраницыГруппировки.Видимость = ЭтаФорма.ПоказыватьОбластьГруппировки;
	
	ЭтаФорма.Элементы.СписокСгруппироватьПоАвтору.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоПредмету.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоФлагу.Пометка = Ложь;
	
	ЭтаФорма.Элементы.ЗадачиМнеПоказатьГруппыВидовПредметов.Доступность = Ложь;
	
	ВидимостьКолонкиАвтор = Истина;
	
	Если ЭтаФорма.ПоказыватьОбластьГруппировки Тогда
		Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаАвторы;
			ВидимостьКолонкиАвтор = Ложь;
			ЭтаФорма.Элементы.СписокСгруппироватьПоАвтору.Пометка = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Предмет" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаПредметы;
			ЭтаФорма.Элементы.СписокСгруппироватьПоПредмету.Пометка = Истина;
			ЭтаФорма.Элементы.ЗадачиМнеПоказатьГруппыВидовПредметов.Доступность = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаПроекты;
			ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаТочкиМаршрута;
			ЭтаФорма.Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = Истина;
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
			ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФлаги;
			ЭтаФорма.Элементы.СписокСгруппироватьПоФлагу.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Элементы.СписокАвтор.Видимость = ВидимостьКолонкиАвтор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачМне()
	
	СменитьСтраницуСписка(ЭтаФорма);
	
	// Обновление с клиента - для обхода ошибки платформы с сохранением положения тек. строки.
	ТекущийЭлементСписокЗадач(ЭтаФорма).Обновить();
	ОбновитьСписокЗадачСервер(Истина);
	
	// Если установить сразу на сервере, сбивается текущая строка после выполнения задачи из отдельной формы.
	Заголовок = ТекстЗаголовка; 
	
	УстановитьТекущееЗначениеГруппировкиЗадачМне();
	БизнесПроцессыИЗадачиКлиент.ОбновитьПараметрыУсловногоОформленияПросроченныхЗадач(
		ТекущийСписокЗадач(ЭтаФорма).УсловноеОформление);
	
	ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачСервер(ТолькоВспомогательныеДействия = Ложь)
	
	СформироватьГруппировкиЗадачМне();
	Если Не ТолькоВспомогательныеДействия Тогда
		ТекущийЭлементСписокЗадач(ЭтаФорма).Обновить();
	КонецЕсли;
	ОбновитьИтогиПоЗадачамМне();
	
	БизнесПроцессыИЗадачиВызовСервера.ОбновитьПараметрыУсловногоОформленияПросроченныхПодзадач(
		ЭтаФорма.УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееЗначениеГруппировкиЗадачМне()
	
	УстановитьПараметрыГруппировокПриАктивизации = Ложь;
	
	Если ЗадачиМнеВидГруппировки = "Автор" И ЗадачиМнеАвторы.Количество() > 0 Тогда
		Если ЗадачиМнеТекущийАвтор <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Автор", ЗадачиМнеТекущийАвтор);
			НайденныеСтроки = ЗадачиМнеАвторы.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если Элементы.ЗадачиМнеАвторы.ТекущаяСтрока <> НайденныеСтроки[0].ПолучитьИдентификатор() Тогда
					ЗадачиМнеТекущийАвтор = Неопределено;
					Элементы.ЗадачиМнеАвторы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				КонецЕсли;
			Иначе
				ЗадачиМнеТекущийАвтор = Неопределено;
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Предмет" И ЗадачиМнеПредметы.ПолучитьЭлементы().Количество() > 0 Тогда
		Если ЗадачиМнеТекущийВидПредмета <> Неопределено Тогда
			ВидПредметаДляПоиска = ЗадачиМнеТекущийВидПредмета;
			
			НашлиТекСтроку = Ложь;
			ЗадачиМнеТекущийВидПредметаСвойства = Неопределено;
			СтрокиКОбработке = Новый Массив;
			Для Каждого СтрокаДерева Из ЗадачиМнеПредметы.ПолучитьЭлементы() Цикл
				СтрокиКОбработке.Добавить(СтрокаДерева);
			КонецЦикла;
			Пока СтрокиКОбработке.Количество() > 0 Цикл
				СтрокаДерева = СтрокиКОбработке[0];
				Если СтрокаДерева.ВидПредмета = ВидПредметаДляПоиска Тогда
					Элементы.ЗадачиМнеПредметы.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					НашлиТекСтроку = Истина;
					Прервать;
				КонецЕсли;
				Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
					СтрокиКОбработке.Добавить(ПодчиненнаяСтрока);
				КонецЦикла;
				СтрокиКОбработке.Удалить(0);
			КонецЦикла;
			
			Если НашлиТекСтроку = Ложь Тогда
				ЗадачиМнеТекущийВидПредмета = Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" И ЗадачиМнеПроекты.Количество() > 0 Тогда
		Если ЗадачиМнеТекущийПроект <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Проект", ЗадачиМнеТекущийПроект);
			НайденныеСтроки = ЗадачиМнеПроекты.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеПроекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				Если Элементы.ЗадачиМнеПроекты.ТекущаяСтрока <> НайденныеСтроки[0].ПолучитьИдентификатор() Тогда
					ЗадачиМнеТекущийПроект = Неопределено;
					Элементы.ЗадачиМнеПроекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				КонецЕсли;
			Иначе
				ЗадачиМнеТекущийПроект = Неопределено;
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" И ЗадачиМнеТочкиМаршрута.Количество() > 0 Тогда
		Если ЗадачиМнеТекущаяТочкаМаршрута <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ТочкаМаршрута", ЗадачиМнеТекущаяТочкаМаршрута);
			НайденныеСтроки = ЗадачиМнеТочкиМаршрута.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если Элементы.ЗадачиМнеТочкиМаршрута.ТекущаяСтрока <> НайденныеСтроки[0].ПолучитьИдентификатор() Тогда
					ЗадачиМнеТекущаяТочкаМаршрута = Неопределено;
					Элементы.ЗадачиМнеТочкиМаршрута.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				КонецЕсли;
			Иначе
				ЗадачиМнеТекущаяТочкаМаршрута = Неопределено;
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" И ЗадачиМнеФлаги.Количество() > 0 Тогда
		Если ЗадачиМнеТекущийФлаг <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Флаг", ЗадачиМнеТекущийФлаг);
			НайденныеСтроки = ЗадачиМнеФлаги.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если Элементы.ЗадачиМнеФлаги.ТекущаяСтрока <> НайденныеСтроки[0].ПолучитьИдентификатор() Тогда
					ЗадачиМнеТекущийФлаг = Неопределено;
					Элементы.ЗадачиМнеФлаги.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				КонецЕсли;
			Иначе
				ЗадачиМнеТекущийФлаг = Неопределено;
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
	КонецЕсли;
	
	Если Не УстановитьПараметрыГруппировокПриАктивизации Тогда
		УстановитьПараметрыГруппировокВЗадачахМне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГруппировокВЗадачахМне()
	
	СменитьСтраницуСписка(ЭтаФорма);
	Если ЗадачиМнеВидГруппировки = "Предмет" Тогда
		Если Элементы.ГруппаСпискиЗадач.ТекущаяСтраница = Элементы.ГруппаПрочиеПредметыСписок Тогда
			УстановитьТекстЗапросаСписка();
			Если ЗадачиМнеТекущийВидПредмета = СтрокаГруппировкиДокументы() Тогда
				Элементы.ПрочиеПредметыСписокПредметЗаголовок.Заголовок = НСтр("ru = 'Документ'");
			Иначе
				Элементы.ПрочиеПредметыСписокПредметЗаголовок.Заголовок = НСтр("ru = 'Предмет'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСписок = ТекущийСписокЗадач(ЭтаФорма);
	ТекущийЭлементСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"Автор",
		Неопределено,
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"ВидПредмета",
		Неопределено,
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"ПодчиненныеВидыПредметов",
		Неопределено,
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"Проект",
		Неопределено,
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"ТочкаМаршрута",
		Неопределено,
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"Флаг",
		Неопределено,
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ТекущийСписок,
		"БезПредмета",
		Неопределено,
		Ложь);
	
	Если ПоказыватьОбластьГруппировки Тогда
		Если ЗадачиМнеВидГруппировки = "Автор" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ТекущийСписок,
				"Автор",
				ЗадачиМнеТекущийАвтор);
		ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ТекущийСписок,
					"Проект",
					ЗадачиМнеТекущийПроект);
		ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
					
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ТекущийСписок,
				"ТочкаМаршрута",
				ЗадачиМнеТекущаяТочкаМаршрута);
		ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" Тогда
					
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ТекущийСписок,
				"Флаг",
				ЗадачиМнеТекущийФлаг);
		ИначеЕсли ЗадачиМнеВидГруппировки = "Предмет" Тогда
			
			Если ТипЗнч(ЗадачиМнеТекущийВидПредмета) <> Тип("Строка") Тогда
				Если ЗадачиМнеТекущийВидПредметаСвойства = Неопределено Тогда
					// Сохраненный вид предмета не найден.
					Возврат;
				ИначеЕсли ТипЗнч(ЗадачиМнеТекущийВидПредметаСвойства) <> Тип("Структура") Тогда
					ВызватьИсключение НСтр("ru = 'Неожиданный тип значения ЗадачиМнеТекущийВидПредметаСвойства'");
				КонецЕсли;
				Если ЗадачиМнеТекущийВидПредметаСвойства.ЭтоГруппаВидов Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
						ТекущийСписок,
						"ПодчиненныеВидыПредметов",
						ЗадачиМнеТекущийВидПредметаСвойства.ПодчиненныеВиды);
				Иначе
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
						ТекущийСписок,
						"ВидПредмета",
						ЗадачиМнеТекущийВидПредмета);
				КонецЕсли;
				
			ИначеЕсли ЗадачиМнеТекущийВидПредмета = СтрокаГруппировкиБезПредмета() Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ТекущийСписок,
					"БезПредмета",
					Истина,
					Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Видимость колонок и ключ назначения.
	УстановитьВидимостьРезультатЗавершения(ЭтаФорма);
	Если ЗадачиМнеВидГруппировки = "Предмет" Тогда
		СтрокаКэша = Неопределено;
		ОтборПарам = Новый Структура("ВидПредмета", ЗадачиМнеТекущийВидПредмета);
		СтрокиНайденные = КэшВидовПредметов.НайтиСтроки(ОтборПарам);
		Если СтрокиНайденные.Количество() = 1 Тогда
			СтрокаКэша = СтрокиНайденные[0];
		КонецЕсли;	
		Если СтрокаКэша <> Неопределено Тогда
			
			НовыйКлючНазначения = СтрокаКэша.УникальныйИдентификатор;
	        ЭтаФорма.КлючНазначенияИспользования = НовыйКлючНазначения;
			ЭтаФорма.КлючСохраненияПоложенияОкна = НовыйКлючНазначения;
			
			ИмяЭлементаСумма = ТекущийЭлементСписок.Имя + "Сумма";
			Если Элементы.Найти(ИмяЭлементаСумма) <> Неопределено Тогда
				Элементы[ИмяЭлементаСумма].Видимость = Не СтрокаКэша.УчитыватьСуммуДокумента; // фиктивно,чтобы прошло сохранение настроек
				Элементы[ИмяЭлементаСумма].Видимость = СтрокаКэша.УчитыватьСуммуДокумента;
			КонецЕсли;
			ИмяЭлементаВалюта = ТекущийЭлементСписок.Имя + "Валюта";
			Если Элементы.Найти(ИмяЭлементаВалюта) <> Неопределено Тогда
				Элементы[ИмяЭлементаВалюта].Видимость = СтрокаКэша.УчитыватьСуммуДокумента;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьВидимостьПолейПоиска(ЭтаФорма);
	
	ЭтаФорма.ТекущийЭлемент = ТекущийЭлементСписок;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейПоиска(Форма)
	
	Элементы = Форма.Элементы; 
	
	Элементы.ЗадачиМнеСписок_СтрокаПоиска.Видимость = Ложь;
	Элементы.ВнутренниеДокументыСписок_ПолеПоиска.Видимость = Ложь;
	Элементы.ВходящиеДокументыСписок_ПолеПоиска.Видимость = Ложь;
	Элементы.ИсходящиеДокументыСписок_ПолеПоиска.Видимость = Ложь;
	Элементы.МероприятияСписок_ПолеПоиска.Видимость = Ложь;
	Элементы.ПроектыСписок_ПолеПоиска.Видимость = Ложь;
	Элементы.ПрочиеПредметыСписок_ПолеПоиска.Видимость = Ложь;

	ТекущаяСтраница = Элементы.ГруппаСпискиЗадач.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ГруппаВнутренниеДокументыСписок Тогда
		Элементы.ВнутренниеДокументыСписок_ПолеПоиска.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаВходящиеДокументыСписок Тогда
		Элементы.ВходящиеДокументыСписок_ПолеПоиска.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИсходящиеДокументыСписок Тогда
		Элементы.ИсходящиеДокументыСписок_ПолеПоиска.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаМероприятияСписок Тогда
		Элементы.МероприятияСписок_ПолеПоиска.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПроектыСписок Тогда
		Элементы.ПроектыСписок_ПолеПоиска.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПрочиеПредметыСписок Тогда
		Элементы.ПрочиеПредметыСписок_ПолеПоиска.Видимость = Истина;
	Иначе	
		Элементы.ЗадачиМнеСписок_СтрокаПоиска.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры	


&НаКлиентеНаСервереБезКонтекста
Процедура СменитьСтраницуСписка(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	АктуальнаяСтраница = Элементы.ГруппаЗадачиМнеСписок;
	
	Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Предмет" Тогда
		ТекущийВидПредмета = ЭтаФорма.ЗадачиМнеТекущийВидПредмета;
		Если ТипЗнч(ТекущийВидПредмета) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТекущийВидПредмета = "Справочник.ВидыВнутреннихДокументов" Тогда
			АктуальнаяСтраница = Элементы.ГруппаВнутренниеДокументыСписок;
		ИначеЕсли ТипЗнч(ТекущийВидПредмета) = Тип("СправочникСсылка.ВидыВходящихДокументов")
			Или ТекущийВидПредмета = "Справочник.ВидыВходящихДокументов" Тогда
			АктуальнаяСтраница = Элементы.ГруппаВходящиеДокументыСписок;
		ИначеЕсли ТипЗнч(ТекущийВидПредмета) = Тип("СправочникСсылка.ВидыИсходящихДокументов")
			Или ТекущийВидПредмета = "Справочник.ВидыИсходящихДокументов" Тогда
			АктуальнаяСтраница = Элементы.ГруппаИсходящиеДокументыСписок;
		ИначеЕсли ТипЗнч(ТекущийВидПредмета) = Тип("СправочникСсылка.ВидыМероприятий")
			Или ТекущийВидПредмета = "Справочник.ВидыМероприятий" Тогда
			АктуальнаяСтраница = Элементы.ГруппаМероприятияСписок;
		ИначеЕсли ТипЗнч(ТекущийВидПредмета) = Тип("СправочникСсылка.ВидыПроектов")
			Или ТекущийВидПредмета = "Справочник.ВидыПроектов" Тогда
			АктуальнаяСтраница = Элементы.ГруппаПроектыСписок;
		ИначеЕсли ТекущийВидПредмета <> СтрокаГруппировкиБезПредмета() Тогда
			АктуальнаяСтраница = Элементы.ГруппаПрочиеПредметыСписок;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ГруппаСпискиЗадач.ТекущаяСтраница <> АктуальнаяСтраница Тогда
		Элементы.ГруппаСпискиЗадач.ТекущаяСтраница = АктуальнаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписокЗадач(ЭтаФорма)
	
	ТекущийСписокЗадач = ЭтаФорма.ЗадачиМнеСписок; // По умолчанию.
	
	Элементы = ЭтаФорма.Элементы;
	ТекущаяСтраница = Элементы.ГруппаСпискиЗадач.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ГруппаВнутренниеДокументыСписок Тогда
		ТекущийСписокЗадач = ЭтаФорма.ВнутренниеДокументыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаВходящиеДокументыСписок Тогда
		ТекущийСписокЗадач = ЭтаФорма.ВходящиеДокументыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИсходящиеДокументыСписок Тогда
		ТекущийСписокЗадач = ЭтаФорма.ИсходящиеДокументыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаМероприятияСписок Тогда
		ТекущийСписокЗадач = ЭтаФорма.МероприятияСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПроектыСписок Тогда
		ТекущийСписокЗадач = ЭтаФорма.ПроектыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПрочиеПредметыСписок Тогда
		ТекущийСписокЗадач = ЭтаФорма.ПрочиеПредметыСписок;
	КонецЕсли;
	
	Возврат ТекущийСписокЗадач;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийЭлементСписокЗадач(ЭтаФорма)
	
	ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.ЗадачиМнеСписок; // По умолчанию.
	
	Элементы = ЭтаФорма.Элементы;
	ТекущаяСтраница = Элементы.ГруппаСпискиЗадач.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ГруппаВнутренниеДокументыСписок Тогда
		ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.ВнутренниеДокументыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаВходящиеДокументыСписок Тогда
		ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.ВходящиеДокументыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИсходящиеДокументыСписок Тогда
		ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.ИсходящиеДокументыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаМероприятияСписок Тогда
		ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.МероприятияСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПроектыСписок Тогда
		ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.ПроектыСписок;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПрочиеПредметыСписок Тогда
		ТекущийЭлементСписокЗадач = ЭтаФорма.Элементы.ПрочиеПредметыСписок;
	КонецЕсли;
	
	Возврат ТекущийЭлементСписокЗадач;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСпискиЗадач(ЭтаФорма)
	
	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить(ЭтаФорма.ЗадачиМнеСписок);
	ВсеСписки.Добавить(ЭтаФорма.ВнутренниеДокументыСписок);
	ВсеСписки.Добавить(ЭтаФорма.ВходящиеДокументыСписок);
	ВсеСписки.Добавить(ЭтаФорма.ИсходящиеДокументыСписок);
	ВсеСписки.Добавить(ЭтаФорма.МероприятияСписок);
	ВсеСписки.Добавить(ЭтаФорма.ПроектыСписок);
	ВсеСписки.Добавить(ЭтаФорма.ПрочиеПредметыСписок);
	
	Возврат ВсеСписки;
	
КонецФункции

&НаКлиенте
Функция УстановитьТекстЗапросаСписка()
	
	ТекущийСписок = ТекущийСписокЗадач(ЭтаФорма);
	Если ТекущийСписок = ПрочиеПредметыСписок Тогда
		УстановитьТекстЗапросаСпискаНаСервере();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросаСпискаНаСервере()
	
	ТекущийСписок = ТекущийСписокЗадач(ЭтаФорма);
	Если ТекущийСписок = ПрочиеПредметыСписок Тогда
		
		ДопУсловиеПоПредмету = "";
		Если ЗадачиМнеТекущийВидПредмета = СтрокаГруппировкиДокументы() Тогда
			ДопУсловиеПоПредмету = "И (ПредметыЗадач.Предмет ССЫЛКА Справочник.ВнутренниеДокументы
									|		ИЛИ ПредметыЗадач.Предмет ССЫЛКА Справочник.ВходящиеДокументы
									|		ИЛИ ПредметыЗадач.Предмет ССЫЛКА Справочник.ИсходящиеДокументы)";
		ИначеЕсли ЗадачиМнеТекущийВидПредмета <> СтрокаГруппировкиВсеПредметы() Тогда
			
			Если ЗадачиМнеТекущийВидПредмета = Неопределено Тогда
				// Сохраненный вид предмета не найден.
				Возврат;
			ИначеЕсли Метаданные.НайтиПоПолномуИмени(ЗадачиМнеТекущийВидПредмета) = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Неожиданное значение в поле ""ТекущийВидПредмета""'");
			Иначе
				ДопУсловиеПоПредмету = "И ПредметыЗадач.Предмет ССЫЛКА " + ЗадачиМнеТекущийВидПредмета;
			КонецЕсли;
		КонецЕсли;
		
		ШаблонТекстаЗапроса = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ЗадачаИсполнителя.Дата КАК Дата,
			|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
			|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
			|	ЗадачаИсполнителя.Наименование КАК Наименование,
			|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
			|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
			|	ВЫБОР
			|		КОГДА НЕ &ИспользоватьДатуИВремяВСрокахЗадач
			|				И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА КОНЕЦПЕРИОДА(ЗадачаИсполнителя.СрокИсполнения, ДЕНЬ)
			|		ИНАЧЕ ЗадачаИсполнителя.СрокИсполнения
			|	КОНЕЦ КАК СрокИсполненияДляОтображенияВСписке,
			|	ЗадачаИсполнителя.ПредметСтрокой КАК ПредметСтрокой,
			|	ЗадачаИсполнителя.Автор КАК Автор,
			|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА ЗадачаИсполнителя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ВажностьКартинка,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
			|			ТОГДА &ИмяГруппыБезПроекта
			|		ИНАЧЕ ЗадачаИсполнителя.Проект
			|	КОНЕЦ КАК Проект,
			|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
			|	ВЫБОР
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
			|			ТОГДА 1
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
			|			ТОГДА 2
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
			|			ТОГДА 3
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
			|			ТОГДА 4
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
			|			ТОГДА 5
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
			|			ТОГДА 6
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НомерФлага,
			|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
			|	ВЫБОР
			|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
			|			ТОГДА 9
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА 7
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА 6
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА 5
			|		КОГДА ЗадачаИсполнителя.Выполнена = ИСТИНА
			|			ТОГДА 4
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК РезультатЗавершения,
			|	ВЫБОР
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
			|			ТОГДА ВЫБОР
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
			|						ТОГДА 1
			|					ИНАЧЕ 3
			|				КОНЕЦ
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроля)
			|			ТОГДА 4
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
			|			ТОГДА ВЫБОР
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
			|						ТОГДА 5
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
			|						ТОГДА 8
			|					ИНАЧЕ 6
			|				КОНЕЦ
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроляНесколько)
			|			ТОГДА 7
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
			|			ТОГДА ВЫБОР
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
			|						ТОГДА 9
			|					ИНАЧЕ 10
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеКонтроля,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.ТекущийИсполнитель = &ТекущийПользователь
			|			ТОГДА -1
			|		КОГДА МоиРоли.РольИсполнителя ЕСТЬ NULL
			|			ТОГДА 3
			|		ИНАЧЕ 4
			|	КОНЕЦ КАК Картинка,
			|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
			|	ЗадачиДляВыполнения.СостояниеВыполнения КАК СостояниеВыполнения,
			|	ПредметыЗадач.Предмет КАК Предмет,
			|	ЕСТЬNULL(ПредметыЗадач.Предмет, &СтрокаБезПредмета) КАК ПредметЗаголовок,
			|	ВЫБОР
			|		КОГДА ЗадачиСПодзадачами.Задача ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьПодзадачи
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
			|		ПО ЗадачаИсполнителя.Ссылка = ПредметыЗадач.Ссылка
			|			И (ПредметыЗадач.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
			|		ПО ЗадачаИсполнителя.Ссылка = ФлагиОбъектов.Объект
			|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО ЗадачаИсполнителя.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
			|		ПО ЗадачаИсполнителя.Ссылка = КешИнформацииОбОбъектах.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК МоиРоли
			|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = МоиРоли.РольИсполнителя
			|			И (МоиРоли.Исполнитель = &ТекущийПользователь)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиСПодзадачами КАК ЗадачиСПодзадачами
			|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиСПодзадачами.Задача
			|ГДЕ
			|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
			|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
			|	И НЕ ЗадачаИсполнителя.ИсключенаИзПроцесса
			|	И ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|			ГДЕ
			|				ИсполнителиРолейИДелегаты.РольПользователь = ЗадачаИсполнителя.ТекущийИсполнитель
			|				И ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
			|				И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи""))
			|	И &ДопУсловиеПоПредмету
			|{ГДЕ
			|	(ЗадачаИсполнителя.Выполнена = &Выполнена),
			|	(ЗадачаИсполнителя.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И ЗадачаИсполнителя.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)),
			|	(ЗадачаИсполнителя.ПринятаКИсполнению = &ОтображатьСтарыеЗадачи)}";
			
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "И &ДопУсловиеПоПредмету", ДопУсловиеПоПредмету);
		
		Если ТекущийСписок.ТекстЗапроса <> ТекстЗапроса Тогда
			ТекущийСписок.ТекстЗапроса = ТекстЗапроса;
			УстановитьУсловноеОформлениеПредмета(ТекущийСписок.УсловноеОформление);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПредмета(Знач УсловноеОформление)
	
	// ПредметЗаголовок - пустой предмет
	ПредставлениеЭлемента = "Представление пустого предмета (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предмет");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементТекст = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Text");
	ЭлементТекст.Значение = Новый ПолеКомпоновкиДанных("Наименование"); 
	ЭлементТекст.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПредметЗаголовок");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьУзелДерева(УзелИсточник, УзелПриемник)

	НоваяСтрока = УзелПриемник.ПолучитьЭлементы().Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрока, УзелИсточник);

	Для Каждого ПодчиненнаяСтрока Из УзелИсточник.ПолучитьЭлементы() Цикл
		СкопироватьУзелДерева(ПодчиненнаяСтрока, НоваяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьЗадачиМнеПоВиду(НовыйВидГруппировки, ОбновлятьПринудительно = Ложь)
	
	Если ЗадачиМнеВидГруппировки = НовыйВидГруппировки И Не ОбновлятьПринудительно Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеВидГруппировки = НовыйВидГруппировки;
	
	ПоказыватьОбластьГруппировки = ЗадачиМнеВидГруппировки <> "";
	
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	ОбновитьСписокЗадачМне();
	
	УстановитьВидимостьПолейПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьГруппировкиЗадачМне()
	
	Если ЗадачиМнеВидГруппировки = "Автор" Тогда
		СформироватьСписокАвторов();
	ИначеЕсли ЗадачиМнеВидГруппировки = "Предмет" Тогда
		СформироватьСписокПредметов();
	ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" Тогда
		СформироватьСписокПроектов();
	ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
		СформироватьСписокТочекМаршрута();
	ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" Тогда
		СформироватьСписокФлагов();
	КонецЕсли;
	
КонецПроцедуры

// Формирует список авторов при группировки по авторам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокАвторов()
	
	ТаблицаАвторы = РеквизитФормыВЗначение("ЗадачиМнеАвторы");
	
	ТаблицаАвторы.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Автор,
		|	Пользователи.Представление КАК Представление,
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО Задачи.Автор = Пользователи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	Задачи.Автор,
		|	Пользователи.Представление";
	
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаАвтора = ТаблицаАвторы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАвтора, Выборка);
		
		ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + СтрокаАвтора.Количество;
	КонецЦикла;
	
	ТаблицаАвторы.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаАвторы, "ЗадачиМнеАвторы");
	
КонецПроцедуры

// Формирует список предметов при группировки по предметам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокПредметов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоПредметы = РеквизитФормыВЗначение("ЗадачиМнеПредметы");
	ДеревоПредметы.Строки.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПредметыЗадач.Предмет, НЕОПРЕДЕЛЕНО) КАК Предмет
		|ПОМЕСТИТЬ ВсеПредметы
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
		|		ПО Задачи.Ссылка = ПредметыЗадач.Ссылка
		|			И (ПредметыЗадач.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ВидПредмета КАК ВидПредмета,
		|	ВложенныйЗапрос.ПредставлениеВидаПредмета КАК ПредставлениеВидаПредмета,
		|	ВложенныйЗапрос.Родитель1 КАК Родитель1,
		|	ВложенныйЗапрос.Родитель2 КАК Родитель2,
		|	ВложенныйЗапрос.УчитыватьСуммуДокумента КАК УчитыватьСуммуДокумента,
		|	ВложенныйЗапрос.УчитыватьСрокДействия КАК УчитыватьСрокДействия,
		|	ВложенныйЗапрос.ВестиУчетПоКонтрагентам КАК ВестиУчетПоКонтрагентам,
		|	ВложенныйЗапрос.ВестиУчетПоОрганизациям КАК ВестиУчетПоОрганизациям,
		|	ВложенныйЗапрос.ИспользоватьСрокИсполнения КАК ИспользоватьСрокИсполнения,
		|	ВложенныйЗапрос.ЯвляетсяОбращениемОтГраждан КАК ЯвляетсяОбращениемОтГраждан,
		|	КОЛИЧЕСТВО(1) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.Ссылка
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.Ссылка
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.Ссылка
		|			КОГДА НЕ ВидыМероприятий.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыМероприятий.Ссылка
		|			КОГДА НЕ ВидыПроектов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыПроектов.Ссылка
		|			КОГДА ВсеПредметы.Предмет = НЕОПРЕДЕЛЕНО
		|				ТОГДА &БезПредметаСтрока
		|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ВсеПредметы.Предмет)
		|		КОНЕЦ КАК ВидПредмета,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.Представление
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.Представление
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.Представление
		|			КОГДА НЕ ВидыМероприятий.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыМероприятий.Представление
		|			КОГДА НЕ ВидыПроектов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыПроектов.Представление
		|			КОГДА ВсеПредметы.Предмет = НЕОПРЕДЕЛЕНО
		|				ТОГДА &БезПредметаСтрока
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК ПредставлениеВидаПредмета,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.Родитель
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.Родитель
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.Родитель
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК Родитель1,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.Родитель.Родитель
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.Родитель.Родитель
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.Родитель.Родитель
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК Родитель2,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.УчитыватьСуммуДокумента
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.УчитыватьСуммуДокумента
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.УчитыватьСуммуДокумента
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК УчитыватьСуммуДокумента,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.УчитыватьСрокДействия
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК УчитыватьСрокДействия,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.ВестиУчетПоКонтрагентам
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ВестиУчетПоКонтрагентам,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВнутреннихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВнутреннихДокументов.ВестиУчетПоОрганизациям
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ВестиУчетПоОрганизациям,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.ИспользоватьСрокИсполнения
		|			КОГДА НЕ ВидыИсходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыИсходящихДокументов.ИспользоватьСрокИсполнения
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ИспользоватьСрокИсполнения,
		|		ВЫБОР
		|			КОГДА НЕ ВидыВходящихДокументов.Ссылка ЕСТЬ NULL
		|				ТОГДА ВидыВходящихДокументов.ЯвляетсяОбращениемОтГраждан
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ЯвляетсяОбращениемОтГраждан
		|	ИЗ
		|		ВсеПредметы КАК ВсеПредметы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.ВнутренниеДокументы).ВидДокумента = ВидыВнутреннихДокументов.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.ВходящиеДокументы).ВидДокумента = ВидыВходящихДокументов.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.ИсходящиеДокументы).ВидДокумента = ВидыИсходящихДокументов.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыМероприятий КАК ВидыМероприятий
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.Мероприятия).ВидМероприятия = ВидыМероприятий.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПроектов КАК ВидыПроектов
		|			ПО (ВЫРАЗИТЬ(ВсеПредметы.Предмет КАК Справочник.Проекты).ВидПроекта = ВидыПроектов.Ссылка)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидПредмета,
		|	ВложенныйЗапрос.ПредставлениеВидаПредмета,
		|	ВложенныйЗапрос.Родитель1,
		|	ВложенныйЗапрос.Родитель2,
		|	ВложенныйЗапрос.УчитыватьСуммуДокумента,
		|	ВложенныйЗапрос.УчитыватьСрокДействия,
		|	ВложенныйЗапрос.ВестиУчетПоКонтрагентам,
		|	ВложенныйЗапрос.ВестиУчетПоОрганизациям,
		|	ВложенныйЗапрос.ИспользоватьСрокИсполнения,
		|	ВложенныйЗапрос.ЯвляетсяОбращениемОтГраждан";
	
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("БезПредметаСтрока", СтрокаГруппировкиБезПредмета());
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	СтрокиВидовПредметов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	
	КэшВидовПредметов.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементыКОбработке = Новый Массив;
		ЭлементыКОбработке.Добавить(Выборка.ВидПредмета);
		
		Если ЗадачиМнеПоказыватьГруппыВидовПредметов Тогда
			Если ЗначениеЗаполнено(Выборка.Родитель1) Тогда
				ЭлементыКОбработке.Вставить(0, Выборка.Родитель1);
			КонецЕсли;
			ТекущийРодитель = Выборка.Родитель2;
			Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
				ЭлементыКОбработке.Вставить(0, ТекущийРодитель);
				ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
			КонецЦикла;
		КонецЕсли;
		
		ТипВидаПредмета = ТипЗнч(Выборка.ВидПредмета);
		Если ТипВидаПредмета = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТипВидаПредмета = Тип("СправочникСсылка.ВидыВходящихДокументов")
			Или ТипВидаПредмета = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			ЭлементыКОбработке.Вставить(0, СтрокаГруппировкиДокументы());
		ИначеЕсли ТипВидаПредмета <> Тип("Строка") И ТипВидаПредмета <> Тип("Тип") Тогда
			// Вид мероприятия, проекта.
			ЭлементыКОбработке.Вставить(0, ТипЗнч(Выборка.ВидПредмета));
		КонецЕсли;
		
		СтрокаРодителя = ДеревоПредметы;
		Для Каждого Эл Из ЭлементыКОбработке Цикл 
			
			Стр = СтрокиВидовПредметов[Эл];
			Если Стр = Неопределено Тогда
				Стр = СтрокаРодителя.Строки.Добавить();
				СтрокиВидовПредметов[Эл] = Стр;
				Стр.ВидПредмета = Эл;
				Если Эл = Выборка.ВидПредмета И ЗначениеЗаполнено(Выборка.ПредставлениеВидаПредмета) Тогда
					Стр.Представление = Выборка.ПредставлениеВидаПредмета;
				ИначеЕсли ТипЗнч(Эл) = Тип("Тип") Тогда
					МетаданныеПоТипу = Метаданные.НайтиПоТипу(Эл);
					Если МетаданныеПоТипу <> Неопределено Тогда
						Стр.ВидПредмета = МетаданныеПоТипу.ПолноеИмя();
						Если МетаданныеПоТипу = Метаданные.Справочники.ВидыВнутреннихДокументов Тогда
							Стр.Представление = НСтр("ru = 'Документы внутренние'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыВходящихДокументов Тогда
							Стр.Представление = НСтр("ru = 'Документы входящие'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыИсходящихДокументов Тогда
							Стр.Представление = НСтр("ru = 'Документы исходящие'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыМероприятий Тогда
							Стр.Представление = НСтр("ru = 'Мероприятия'");
						ИначеЕсли МетаданныеПоТипу = Метаданные.Справочники.ВидыПроектов Тогда
							Стр.Представление = НСтр("ru = 'Проекты'");
						Иначе
							Стр.Представление = ?(ЗначениеЗаполнено(МетаданныеПоТипу.ПредставлениеСписка),
								МетаданныеПоТипу.ПредставлениеСписка, МетаданныеПоТипу.Синоним);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Представление) Тогда
					Стр.Представление = Строка(Эл);
				КонецЕсли;
				
				// Добавление в кэш.
				СтрКэша = КэшВидовПредметов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрКэша, Выборка);
				СтрКэша.УникальныйИдентификатор = Стр.ВидПредмета;
				СтрКэша.ВидПредмета = Стр.ВидПредмета;
				
				Если ЗначениеЗаполнено(Стр.ВидПредмета) Тогда
					
					Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Стр.ВидПредмета) Тогда
						СтрКэша.УникальныйИдентификатор = Стр.ВидПредмета.УникальныйИдентификатор();
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;
			Стр.Количество = Стр.Количество + Выборка.Количество;
			СтрокаРодителя = Стр;
			Если Эл <> Выборка.ВидПредмета И ТипЗнч(Эл) = ТипЗнч(Выборка.ВидПредмета) Тогда
				Стр.ЭтоГруппаВидов = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + Выборка.Количество;
		
	КонецЦикла;
	
	ДеревоПредметы.Строки.Сортировать("Представление Возр", Истина);
	
	// Строка "Все".
	Стр = ДеревоПредметы.Строки.Вставить(0);
	Стр.ВидПредмета = СтрокаГруппировкиВсеПредметы();
	Стр.Представление = Стр.ВидПредмета;
	Стр.Количество = ОбщееКоличествоЗадач;
	
	// Заполнение подчиненных видов для групп.
	ТипыПодчиненныхВидов = Новый Соответствие;
	ТипыПодчиненныхВидов[Тип("СправочникСсылка.ВидыВнутреннихДокументов")] = Истина;
	ТипыПодчиненныхВидов[Тип("СправочникСсылка.ВидыВходящихДокументов")] = Истина;
	ТипыПодчиненныхВидов[Тип("СправочникСсылка.ВидыИсходящихДокументов")] = Истина;
	
	ВсеСтрокиКОработке = Новый Массив;
	СтрокиПодчиненныхВидов = Новый Массив;
	Для Каждого СтрДерева Из ДеревоПредметы.Строки Цикл
		ВсеСтрокиКОработке.Добавить(СтрДерева);
	КонецЦикла;
	Пока ВсеСтрокиКОработке.Количество() > 0 Цикл
		ТекущаяСтрока = ВсеСтрокиКОработке[0];
		Для Каждого СтрДерева Из ТекущаяСтрока.Строки Цикл
			ВсеСтрокиКОработке.Добавить(СтрДерева);
		КонецЦикла;
		Если Не ТекущаяСтрока.ЭтоГруппаВидов
			И ТипыПодчиненныхВидов[ТипЗнч(ТекущаяСтрока.ВидПредмета)] <> Неопределено Тогда
			Родитель = ТекущаяСтрока.Родитель;
			Пока Родитель <> Неопределено И Родитель.ЭтоГруппаВидов Цикл
				Если Родитель.ПодчиненныеВиды = Неопределено Тогда
					Родитель.ПодчиненныеВиды = Новый Массив;
				КонецЕсли;
				Родитель.ПодчиненныеВиды.Добавить(ТекущаяСтрока.ВидПредмета);
				Родитель = Родитель.Родитель;
			КонецЦикла;
		КонецЕсли;
		ВсеСтрокиКОработке.Удалить(0);
	КонецЦикла;
	
	// Поиск дублей, уточнение представления.
	НайденныеСтроки = ДеревоПредметы.Строки.НайтиСтроки(
		Новый Структура("ВидПредмета", СтрокаГруппировкиДокументы()));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаДокументы = НайденныеСтроки[0];
		СтрокиПоПредставлениям = Новый Соответствие;
		
		Для Каждого Стр Из СтрокаДокументы.Строки Цикл
			МассивСтрокСПредставлением = СтрокиПоПредставлениям[Стр.Представление];
			Если МассивСтрокСПредставлением = Неопределено Тогда
				СтрокиПоПредставлениям[Стр.Представление] = Новый Массив;
				МассивСтрокСПредставлением = СтрокиПоПредставлениям[Стр.Представление];
			КонецЕсли;
			МассивСтрокСПредставлением.Добавить(Стр);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтрокиПоПредставлениям Цикл
			
			СтрокиСОдинаковымНаименованием = КлючИЗначение.Значение;
			Если СтрокиСОдинаковымНаименованием.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			УточненияПредставленийСтрок = Новый Соответствие;
			ТипыВидовПредметов = Новый Соответствие;
			Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
				ТипВидаПредмета = ТипЗнч(Стр.ВидПредмета);
				ПредставлениеТипа = Строка(ТипВидаПредмета);
				Если ТипВидаПредмета = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
					ПредставлениеТипа = НСтр("ru = 'внутр.'");
				ИначеЕсли ТипВидаПредмета = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
					ПредставлениеТипа = НСтр("ru = 'вх.'");
				ИначеЕсли ТипВидаПредмета = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
					ПредставлениеТипа = НСтр("ru = 'исх.'");
				КонецЕсли;
				ТипыВидовПредметов[ТипВидаПредмета] = ПредставлениеТипа;
			КонецЦикла;
			Если ТипыВидовПредметов.Количество() > 1 Тогда
				// Имеет смысл уточнение по типу.
				Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
					ПредставлениеТипа = ТипыВидовПредметов[ТипЗнч(Стр.ВидПредмета)];
					УточненияПредставленийСтрок[Стр] = ПредставлениеТипа;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипыВидовПредметов.Количество() < СтрокиСОдинаковымНаименованием.Количество()
				И Не ЗадачиМнеПоказыватьГруппыВидовПредметов Тогда
				РодителиВидовПредметов = Новый Соответствие;
				Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
					Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ВидПредмета, "Родитель");
					РодителиВидовПредметов[Родитель] = Истина;
				КонецЦикла;
				Если РодителиВидовПредметов.Количество() > 1 Тогда
					// Имеет смысл уточнение по родителю.
					Для Каждого Стр Из СтрокиСОдинаковымНаименованием Цикл
						ПолныйПутьРодителя = "";
						ВсеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Стр.ВидПредмета);
						Если ВсеРодители.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого ТекущийРодитель Из ВсеРодители Цикл
							ПолныйПутьРодителя = СокрЛП(Строка(ТекущийРодитель)) +
								?(ПолныйПутьРодителя = "", "", "\") + ПолныйПутьРодителя;
						КонецЦикла;
						Уточнение = УточненияПредставленийСтрок[Стр];
						Если Уточнение = Неопределено Тогда
							Уточнение = ПолныйПутьРодителя;
						Иначе
							Уточнение = Уточнение + ", " + ПолныйПутьРодителя;
						КонецЕсли;
						УточненияПредставленийСтрок[Стр] = Уточнение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаИУточнение Из УточненияПредставленийСтрок Цикл
				Стр = СтрокаИУточнение.Ключ;
				Уточнение = СтрокаИУточнение.Значение;
				Если Уточнение <> Неопределено Тогда
					Стр.Представление = СтрШаблон ("%1 (%2)", Стр.Представление, Уточнение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПредметы, "ЗадачиМнеПредметы");
	
КонецПроцедуры

// Формирует список проектов при группировки по проектам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокПроектов()
	
	ТаблицаПроекты = РеквизитФормыВЗначение("ЗадачиМнеПроекты");
	
	ТаблицаПроекты.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Проект,
		|	ЕСТЬNULL(Проекты.Представление, &ИмяГруппыБезПроекта) КАК Представление,
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО Задачи.Проект = Проекты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	Задачи.Проект,
		|	ЕСТЬNULL(Проекты.Представление, &ИмяГруппыБезПроекта)";
		
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаПроекта = ТаблицаПроекты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроекта, Выборка);
		
		ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + СтрокаПроекта.Количество;
	КонецЦикла;
	
	ТаблицаПроекты.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаПроекты, "ЗадачиМнеПроекты");
	
КонецПроцедуры

// Формирует список точек маршрута при группировки по точке маршрута в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокТочекМаршрута()

	ТаблицаТочкиМаршрута = РеквизитФормыВЗначение("ЗадачиМнеТочкиМаршрута");
	
	ТаблицаТочкиМаршрута.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.ТочкаМаршрута,
		|	Задачи.ТочкаМаршрута.Представление КАК Представление,
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО Задачи.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО Задачи.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	Задачи.ТочкаМаршрута,
		|	Задачи.ТочкаМаршрута.Представление";
		
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ Задачи.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И Задачи.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И Задачи.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТочкиМаршрута, Выборка);
		НестандартноеПредставление = НестандартноеПредставлениеТочкиМаршрута(СтрокаТочкиМаршрута.ТочкаМаршрута);
		Если ЗначениеЗаполнено(НестандартноеПредставление) Тогда
			СтрокаТочкиМаршрута.Представление = НестандартноеПредставление;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТочкиМаршрута.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаТочкиМаршрута, "ЗадачиМнеТочкиМаршрута");
	
КонецПроцедуры

// Формирует список флагов при группировки по флагу в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокФлагов()
	
	ТаблицаФлагов = РеквизитФормыВЗначение("ЗадачиМнеФлаги");
	
	ТаблицаФлагов.Очистить();
	
	ПредставленияФлагов = Новый Соответствие();
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.ПустаяСсылка(), НСтр("ru = 'Без флага'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Красный, НСтр("ru = 'Красный'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Синий, НСтр("ru = 'Синий'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Желтый, НСтр("ru = 'Желтый'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Зеленый, НСтр("ru = 'Зеленый'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Оранжевый, НСтр("ru = 'Оранжевый'"));
	ПредставленияФлагов.Вставить(Перечисления.ФлагиОбъектов.Лиловый, НСтр("ru = 'Лиловый'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПоИсполнителю.Ссылка КАК Задача,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага
		|ПОМЕСТИТЬ Задачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачиПоИсполнителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачиПоИсполнителю.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиПоИсполнителю.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачиПоИсполнителю.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (ЗадачиДляВыполнения.СостояниеВыполнения ЕСТЬ NULL 
		|			ИЛИ ЗадачиДляВыполнения.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению))
		|	И ЗадачиПоИсполнителю.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачиПоИсполнителю.ИсключенаИзПроцесса = ЛОЖЬ
		|	И &ДопУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задачи.Задача) КАК Количество,
		|	Задачи.Флаг КАК Флаг,
		|	Задачи.НомерФлага
		|ИЗ
		|	Задачи КАК Задачи
		|
		|СГРУППИРОВАТЬ ПО
		|	Задачи.Флаг,
		|	Задачи.НомерФлага";
		
	ДопУсловия = "";
	Если Не ЗадачиМнеПоказыватьВыполненные Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ ЗадачиПоИсполнителю.Выполнена";
	КонецЕсли;
	Если Параметры.КлючОтбора = "НеПринятые" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС + "И НЕ ЗадачиПоИсполнителю.ПринятаКИсполнению";
	ИначеЕсли Параметры.КлючОтбора = "Просроченные" Тогда
		ДопУсловия = ДопУсловия + Символы.ПС +
			"И ЗадачиПоИсполнителю.СрокИсполнения < &ДатаДляОтображенияПросроченных
			|		И ЗадачиПоИсполнителю.СрокИсполнения > ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("ДатаДляОтображенияПросроченных", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыФлагов = ТаблицаФлагов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФлагов, Выборка);
		СтрокаТаблицыФлагов.Представление = ПредставленияФлагов.Получить(Выборка.Флаг);
	КонецЦикла;
	
	ТаблицаФлагов.Сортировать("НомерФлага Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаФлагов, "ЗадачиМнеФлаги");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭлементовВУзлеДерева(Узел);
	
	Количество = 1;
	
	Для каждого Элемент Из Узел.Строки Цикл
		Количество = Количество + ПолучитьКоличествоЭлементовВУзлеДерева(Элемент);
	КонецЦикла; 
	
	Возврат Количество;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Задача)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Задача,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ЗадачиМнеТекущаяЗадача);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвойстваКоманд(СвойстваКоманд) Экспорт

	Для каждого Элемент Из СвойстваКоманд Цикл
		НайденнаяКоманда = Команды[Элемент.Ключ];
		Для каждого СвойствоКомандыИЗначение Из Элемент.Значение Цикл
			ИмяСвойства = СвойствоКомандыИЗначение.Ключ;
			ЗначениеСвойства = СвойствоКомандыИЗначение.Значение;
			
			НайденнаяКоманда[ИмяСвойства] = ЗначениеСвойства;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораРезультатУтверждения(ВидПроцесса)

	СписокВыбораРезультат = Новый СписокЗначений;
	ПредставлениеУтверждено = "";
	ПредставлениеНеУтверждено = "";
	
	Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
		ПредставлениеУтверждено = НСтр("ru = 'Подписано'");
		ПредставлениеНеУтверждено = НСтр("ru = 'Не подписано'");
	Иначе
		ПредставлениеУтверждено = НСтр("ru = 'Утверждено'");
		ПредставлениеНеУтверждено = НСтр("ru = 'Не утверждено'");
	КонецЕсли;
		
	СписокВыбораРезультат.Добавить(Перечисления.РезультатыУтверждения.Утверждено, ПредставлениеУтверждено);
	СписокВыбораРезультат.Добавить(Перечисления.РезультатыУтверждения.НеУтверждено, ПредставлениеНеУтверждено);
	
	Возврат СписокВыбораРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция НестандартноеПредставлениеТочкиМаршрута(ТочкаМаршрута)
	
	ПредставлениеТочки = "";
	
	Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		ПредставлениеТочки = НСтр("ru = 'Утвердить / Подписать'");
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		ПредставлениеТочки = НСтр("ru = 'Ознакомиться с результатом утверждения / подписи'");
	КонецЕсли;
	
	Возврат ПредставлениеТочки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаГруппировкиБезПредмета()
	
	Возврат НСтр("ru = 'Без предмета'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПредставленияВСпискеБезПредмета()
	
	Возврат НСтр("ru = '<Без основного предмета>'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаГруппировкиВсеПредметы()
	
	Возврат НСтр("ru = 'Все'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаГруппировкиДокументы()
	
	Возврат НСтр("ru = 'Документы'");
	
КонецФункции

&НаКлиенте
Функция ЭтоКолонкаНомерФлага(ЭлементФормы)
	
	ЭтоКолонкаНомерФлага = ЭлементФормы <> Неопределено И СтрНайти(ЭлементФормы.Имя, "НомерФлага") > 0;
	
	Возврат ЭтоКолонкаНомерФлага;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Автообновление

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"Автообновление", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьСписокЗадачМне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЗадачиМнеТекущаяЗадача,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
	    ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЗадачиМнеТекущаяЗадача,
	ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПроцедурыИФункцииВыполненияЗадач

&НаСервере
Процедура ВыполнитьЗадачу(ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ДатаИсполнения") Тогда
		ПараметрыЗаписи.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	
	Если ЗначениеЗаполнено(ФактическийИсполнительЗадачи) Тогда
		ПараметрыЗаписи.Вставить("ФактическийИсполнительЗадачи", ФактическийИсполнительЗадачи);
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеДопРеквизитов(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьФоновоеВыполнениеЗадач
		И (Не ЭтоУзелВыполненияПроцесса
			Или ЗадачиМнеСостояниеВыполнения = ПредопределенноеЗначение(
				"Перечисление.СостоянияЗадачДляВыполнения.ПустаяСсылка")) Тогда
		
		НачатьТранзакцию();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ЗадачиМнеТекущаяЗадача);
			ЗадачаОбъект = ЗадачиМнеТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.РезультатВыполнения = РезультатВыполнения;
			
			РегистрыСведений.ЗадачиДляВыполнения.ДобавитьЗадачуДляФоновогоВыполнения(
				ЗадачаОбъект, ПараметрыЗаписи);
				
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект, "ПростаяЗапись");
			РазблокироватьДанныеДляРедактирования(ЗадачиМнеТекущаяЗадача);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами(ЗадачиМнеТекущаяЗадача, ПараметрыЗаписи);
	КонецЕсли;
	
	ЗаполнитьПараметрыСохраненияКомментарияЗадачи(ЭтаФорма);
	
	ИсторияРаботыПользователя.Добавить(ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи = Неопределено)
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиентеПродолжение(
	Результат, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи <> Неопределено
		И ПараметрыЗаписи.Свойство("КлючеваяОперация") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			ПараметрыЗаписи.КлючеваяОперация);
		
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов(Элемент, Доступность)
	
	Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		
		Если Элемент = Элементы.Обработано
			И ЗначениеЗаполнено(ВедущаяЗадачаТекущейЗадачи) Тогда
			
			Элемент.Доступность = Ложь;
		Иначе
			Элемент.Доступность = Доступность;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		
		Для Каждого ДочернийЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьДоступностьЭлементов(ДочернийЭлемент, Доступность);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОповеститьПослеВыполненияЗадачи()
	
	БлокировкаКнопокВключена = Истина;
	УстановитьДоступностьЭлементов(Элементы.ГруппаВидыКнопокЗадачи, Ложь);
	ПодключитьОбработчикОжидания("СнятьБлокировкуСКнопокВыполненияЗадач", 2, Истина); // 2 сек
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
		ЗадачиМнеТекущаяЗадача, "ДатаИсполнения");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеВводаВремени",
		ЭтотОбъект);

	УчетВремениКлиент.ДобавитьВОтчетПослеВыполненияЗадачи(ОпцияИспользоватьУчетВремени,
		РеквизитыЗадачи.ДатаИсполнения, ЗадачиМнеТекущаяЗадача, ВключенХронометраж, 
		ДатаНачалаХронометража, ДатаКонцаХронометража,
		ВидыРабот, СпособУказанияВремени, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьБлокировкуСКнопокВыполненияЗадач()
	
	БлокировкаКнопокВключена = Ложь;
	УстановитьДоступностьЭлементов(Элементы.ГруппаВидыКнопокЗадачи, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеВводаВремени(Результат, Параметры) Экспорт 

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена", ЗадачиМнеТекущаяЗадача);
	Оповестить("ЗадачаИзменена", ЗадачиМнеТекущаяЗадача, ЭтаФорма);

КонецПроцедуры

// Процесс Исполнение

&НаСервереБезКонтекста
Функция ЕстьНевыполненныеЗадачиИсполнителей(ЗадачиМнеТекущаяЗадача)
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", РеквизитыЗадачи.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ЗадачаИсполненоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"ИсполнениеВыполнениеКомандыИсполнено");
		
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнительПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"ИсполнениеВыполнениеКомандыИсполнено");
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнениеПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров",
		ЭтотОбъект);

	ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры	

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров(Результат, Параметры) Экспорт

	Если Результат = Неопределено
		Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
	КонецЕсли;
	
	Результат.Удалить("КодВозврата");
	РезультатИзмененияПараметровПроцесса = Результат;
	
	ПодключитьОбработчикОжидания(
		"ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров_ВыполнитьЗадачуОтложено", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров_ВыполнитьЗадачуОтложено()
	
	Если ТипЗнч(РезультатИзмененияПараметровПроцесса) = Тип("Структура") Тогда
		ПараметрыЗаписи = РезультатИзмененияПараметровПроцесса;
	Иначе
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Комплексный процесс

&НаКлиенте
Процедура ЗадачаКомплексныйПроцессПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Ознакомления

&НаКлиенте
Процедура ЗадачаОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"ОзнакомлениеВыполнениеКомандыОзнакомился");
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Поручение

&НаКлиенте
Процедура ЗадачаПоручениеПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьПоручениеПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ОтправленоНаДоработку", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправленоНаДоработку", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Приглашение

&НаКлиенте
Процедура ЗадачаПринятоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"ПриглашениеВыполнениеКомандыПринято");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатПриглашения", 
		ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.Принято"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашениеПринято", Предмет);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПринятоЗавершениеВопросаОЗанятостиПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("ЗанятостьИсполнителей", Истина);
	ЗадачаПринято(ДополнительныеПараметры.Команда, ДополнительныеПараметры.ОбработанныеВопросы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринятоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"ПриглашениеВыполнениеКомандыНеПринято");
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить(
		"РезультатПриглашения", 
		ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.НеПринято"));

	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашениеОтклонено", Предмет);
	КонецЦикла;
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПовторитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	Результат.Вставить("ПовторитьПриглашение", Истина);
	Результат.Вставить("УникальныйИдентификаторФормыИзмененияПараметров",
		ДополнительныеПараметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(Результат);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашенияОтправлены", Предмет);
	КонецЦикла;
		
	ОповеститьОбИзменении(ЗадачиМнеТекущаяЗадача);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПослеВопросаОбИсключенииУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеПодтвердитьПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЭтаФорма, ОписаниеОповещения, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ПодтвердитьПриглашение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Если РезультатПриглашенияЗадачи = ПредопределенноеЗначение(
		"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда 
		Оповестить("ИсключеныУчастники", ЗадачиМнеТекущаяЗадача);
	КонецЕсли;		
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложитьПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтложитьПриглашение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПоручениеВыполненоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"ПоручениеВыполнениеКомандыВыполнено");
	
	ВыполнитьЗадачу();	
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПоручениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПоручениеВыполнить"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПоручениеПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПроверитьПоручение"));
	
КонецПроцедуры

// Процесс Рассмотрение

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		МассивРезолюций = Новый Массив;
		МассивРезолюцийДляПодписания = Новый Массив;
		МассивАдресов = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		
		ПредметыЗадачи = ДеревоПриложений.ПолучитьЭлементы();
		
		Для Каждого Предмет Из ПредметыЗадачи Цикл
			Если ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				
				СтруктураРезолюцииДляПодписания = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				СтруктураРезолюцииДляПодписания.Документ = Предмет.Ссылка;
				СтруктураРезолюцииДляПодписания.ДатаРезолюции = ДатаФормированияРезолюций;
				СтруктураРезолюцииДляПодписания.АвторРезолюции = ЗадачиМнеТекущийИсполнитель;
				СтруктураРезолюцииДляПодписания.ВнесРезолюцию = ЗадачиМнеТекущийИсполнитель;
				
				Если ЗаполнениеПоШаблонуРезолюции Тогда 
					СтруктураРезолюцииДляПодписания.ТекстРезолюции = ТекстРезолюции;
				Иначе 
					СтруктураРезолюцииДляПодписания.ТекстРезолюции = РезультатВыполнения;
				КонецЕсли;
				
				МассивРезолюцийДляПодписания.Добавить(СтруктураРезолюцииДляПодписания);
				
				СтруктураРезолюции = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				ЗаполнитьЗначенияСвойств(СтруктураРезолюции, СтруктураРезолюцииДляПодписания);
				СтруктураРезолюции.Вставить(
					"Наименование",
					РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Предмет.Ссылка));
				
				МассивРезолюций.Добавить(СтруктураРезолюции);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРезолюцийДляПодписания.Количество() > 0 Тогда
			
			Заголовки = Новый Структура("Операция");
			Заголовки.Операция = НСтр("ru = 'Подписать резолюции предметов'");
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП",
					ЭтотОбъект,
					ДатаФормированияРезолюций);
			
			ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
			ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
			ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
			ПараметрыПодписания.Заголовки = Заголовки;
			
			РаботаСЭПКлиент.Подписать(МассивРезолюцийДляПодписания, ПараметрыПодписания);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ЗаполнениеПоШаблонуРезолюции Тогда 
		//Текст шаблона резолюции вставляем только после прохождения всех проверок.
		РезультатВыполнения = ТекстРезолюции;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "РассмотрениеВыполнениеКомандыВыполнено");
	
	ПараметрыЗаписи = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП(
	Результат, ДатаФормированияРезолюций) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	//Текст шаблона резолюции вставляем только после прохождения всех проверок.
	Если ЗаполнениеПоШаблонуРезолюции Тогда 
		РезультатВыполнения = ТекстРезолюции;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "РассмотрениеВыполнениеКомандыВыполнено");
	
	ПодписиКРезолюциямПредметов = Новый Структура;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из Результат.НаборДанных Цикл
		
		Если Не ДанныеДляЗанесенияВРегистр.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		Резолюция = ДанныеДляЗанесенияВРегистр.Представление;
		
		Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Предмет_%1_%2",
			СтрЗаменить(Строка(Резолюция.Документ.УникальныйИдентификатор()), "-", ""),
			Формат(Резолюция.ДатаРезолюции, "ДФ=yyyyMMddHHmmss"));
		
		СвойстваПодписи = ДанныеДляЗанесенияВРегистр.СвойстваПодписи;	
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли; 
			
		ПодписиКРезолюциямПредметов.Вставить(Ключ, СвойстваПодписи);
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
	
	ПараметрыЗаписи.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПараметрыЗаписи.Вставить("ДатаИсполнения", ДатаФормированияРезолюций);
	ПараметрыЗаписи.Вставить("ПодписиКРезолюциямПредметов", ПодписиКРезолюциямПредметов);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРассмотренияЗадачи(ВариантРассмотрения)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ЗадачиМнеТекущаяЗадача);
	ОткрытаяФорма = ОткрытьФорму(
		"БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя", ПараметрыОткрытия);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ПараметрыОповещения.Вставить(
		"ВариантРассмотрения", 
		ВариантРассмотрения);
	Оповестить("ПерейтиКРезультатуРассмотренияЗадачи", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

// Процесс Регистрация

&НаКлиенте
Процедура ЗадачаЗарегистрированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"РегистрацияВыполнениеКомандыЗарегистрировано");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РезультатРегистрации",
		ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.Зарегистрировано"));
		
	ЗарегистрироватьПредметыНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПредметыНаКлиенте(ПараметрыЗаписи);
	
	ОчиститьСообщения();
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача, ТипыДокументов, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(Предмет);
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Нумератор) Тогда // ручная нумерация
			
			НайденПредмет = Ложь;
			Для Каждого Строка Из РучныеНомераДокументов Цикл
				Если Строка.Предмет = Предмет Тогда 
					НайденПредмет = Истина;
					Прервать;;
				КонецЕсли;	
			КонецЦикла;	
			Если НайденПредмет Тогда 
				Продолжить;
			КонецЕсли;	
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Предмет", Предмет);
			ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЗарегистрироватьПредметыПослеУказанияРегистрационногоНомера",
				ЭтотОбъект,
				ПараметрыОповещения);
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Укажите регистрационный номер для документа ""%1""'"),
				Строка(Предмет));
				
			РегистрационныйНомер = "";	
			ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(
				РегистрационныйНомер, 
				ТекстСообщения, 
				"",,
				ОписаниеОповещения);
				
			Возврат;
			
		Иначе
			
			Если СоздатьСвязьДляНумерации Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для регистрации документа необходимо создать связь ""%1""'"),
					ТипСвязиНумератора);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДеревоПриложений");
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Отказ = Ложь; СообщениеОбОшибке = "";
	ЗарегистрироватьПредметыНаСервере(Отказ, ПараметрыЗаписи);
	
	Если Отказ = Ложь Тогда 
		Для Каждого Предмет из ОсновныеПредметы Цикл
			ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
		КонецЦикла;
		
		ВыполнитьЗадачу(ПараметрыЗаписи);
		ОповеститьПослеВыполненияЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПредметыПослеУказанияРегистрационногоНомера(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат);
	Если Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
		Возврат;
	КонецЕсли;	
	
	НоваяСтрока = РучныеНомераДокументов.Добавить();
	НоваяСтрока.Предмет = ПараметрыОповещения.Предмет;
	НоваяСтрока.РегистрационныйНомер = РегистрационныйНомер;
	
	ЗарегистрироватьПредметыНаКлиенте(ПараметрыОповещения.ПараметрыЗаписи); 
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПредметыНаСервере(Отказ, ПараметрыЗаписи)
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача, ТипыДокументов, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
			Продолжить;
		КонецЕсли;
		
		РегистрационныйНомер = "";
		Для Каждого Строка Из РучныеНомераДокументов Цикл
			Если Строка.Предмет = Предмет Тогда 
				РегистрационныйНомер = Строка.РегистрационныйНомер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗапомнимРегистрационныйНомер = РегистрационныйНомер;
		
		Если Не Делопроизводство.ПредметМожетБытьЗарегистрирован(Предмет, РегистрационныйНомер) Тогда 
			Отказ = Истина;
			
			// Очистим запомненнное занчение, т.к. этот номер не уникален
			Если ЗначениеЗаполнено(ЗапомнимРегистрационныйНомер) 
				И Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
				Для Каждого Строка Из РучныеНомераДокументов Цикл
					Если Строка.Предмет = Предмет Тогда 
						РучныеНомераДокументов.Удалить(Строка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		Если Не Делопроизводство.ЗарегистрироватьПредмет(Предмет, СообщениеОбОшибке, РегистрационныйНомер) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,, "ДеревоПриложений");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			ПользователиКлиентСервер.ТекущийПользователь(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
			
		Делопроизводство.ЗаписатьСостояниеДокумента(Предмет, 
			СтруктураСостояния.Период, 
			СтруктураСостояния.Состояние, 
			СтруктураСостояния.Установил);
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"РегистрацияВыполнениеКомандыНеЗарегистрировано");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РезультатРегистрации",
		ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.НеЗарегистрировано"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторитьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	РезультатИзмененияПараметровПроцесса = Результат;
	
	ПодключитьОбработчикОжидания("ЗадачаРегистрацияПовторить_ВыполнитьЗадачуОтложено", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторить_ВыполнитьЗадачуОтложено()
	
	Если ТипЗнч(РезультатИзмененияПараметровПроцесса) = Тип("Структура") Тогда
		РезультатИзмененияПараметровПроцесса.Вставить("ПовторитьРегистрацию", Истина);
		ПараметрыЗаписи = РезультатИзмененияПараметровПроцесса;
	Иначе
		ПараметрыЗаписи = Новый Структура;	
		ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Истина);
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРегистрацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтаФорма, "РезультатВыполненияЗадачиМне",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаЗарегистрировать"));
	
КонецПроцедуры

// Процесс РешениеВопросовВыполненияЗадач

&НаКлиенте
Процедура ЗадачаРешениеВопросовПеренестиПродолжение(Результат, ДопПараметры) Экспорт 

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПереносСрока", Истина);
	ПараметрыЗаписи.Вставить("НовыйСрок", НовыйСрок);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Оповестить("ПереносСрокаИсполненияПроцесса", БизнесПроцессПредметаРассмотрения, ЭтаФорма);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Согласование

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы(
	Результат, РезультатСогласования) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи",
			ЭтотОбъект,
			РезультатСогласования);
			
	РаботаСВизамиСогласованияКлиент.ПроверитьВизуИсполнителяЗадачи(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи(
	Результат, РезультатСогласования) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		МассивВизДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
		
		ИсполнительЗадачи = ФактическийИсполнительЗадачи;
		Если Не ЗначениеЗаполнено(ИсполнительЗадачи) Тогда
			ИсполнительЗадачи = ЗадачиМнеТекущийИсполнитель;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИсполнительЗадачи) Тогда
			ИсполнительЗадачи = ТекущийПользователь;
		КонецЕсли;
				
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				
				СтруктураВизыДляПодписания = РаботаСВизамиСогласованияКлиент.ПолучитьСтруктуруВизДляПодписания();
				СтруктураВизыДляПодписания.Документ = Предмет;
				СтруктураВизыДляПодписания.ДатаИсполнения = ДатаФормированияРезолюций;
				СтруктураВизыДляПодписания.РезультатСогласования = РезультатСогласования;
				СтруктураВизыДляПодписания.Исполнитель = ИсполнительЗадачи;
				
				МассивВизДляПодписания.Добавить(СтруктураВизыДляПодписания);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВизДляПодписания.Количество() > 0 Тогда
			
			Заголовки = Новый Структура("Операция");
			
			Если МассивВизДляПодписания.Количество() = 1 Тогда
				Заголовки.Операция = НСтр("ru = 'Подпись визы согласования'");
			Иначе
				Заголовки.Операция = НСтр("ru = 'Подпись виз согласования'");
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ДатаФормированияРезолюций", ДатаФормированияРезолюций);
			ПараметрыОповещения.Вставить("ОсновныеПредметы", ОсновныеПредметы);
			ПараметрыОповещения.Вставить("РезультатСогласования", РезультатСогласования);
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП",
					ЭтотОбъект,
					ПараметрыОповещения);
			
			ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
			ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
			ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
			ПараметрыПодписания.Заголовки = Заголовки;
			
			РаботаСЭПКлиент.Подписать(МассивВизДляПодписания, ПараметрыПодписания);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			"СогласованиеВыполнениеКомандыСогласовано");
			
	ИначеЕсли РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			"СогласованиеВыполнениеКомандыСогласованоСЗамечаниями");
			
	ИначеЕсли РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			"СогласованиеВыполнениеКомандыНеСогласовано");
			
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", 
		РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП(
	Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			"СогласованиеВыполнениеКомандыСогласовано");
			
	ИначеЕсли Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			"СогласованиеВыполнениеКомандыСогласованоСЗамечаниями");
			
	ИначеЕсли Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
			"СогласованиеВыполнениеКомандыНеСогласовано");
			
	КонецЕсли;
	
	ПодписиКВизамСогласования = Новый СписокЗначений;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из Результат.НаборДанных Цикл
		
		Если Не ДанныеДляЗанесенияВРегистр.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДляЗанесенияВРегистр.СвойстваПодписи) = Тип("Структура") Тогда
			
			ДанныеДляЗанесенияВРегистр.СвойстваПодписи.Вставить("ОбъектСсылка", ДанныеДляЗанесенияВРегистр.Представление);
			ПодписиКВизамСогласования.Добавить(ДанныеДляЗанесенияВРегистр.СвойстваПодписи);
			
		ИначеЕсли ТипЗнч(ДанныеДляЗанесенияВРегистр.СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(ДанныеДляЗанесенияВРегистр.СвойстваПодписи) Тогда	
			
			СвойстваПодписиСтруктура = ПолучитьИзВременногоХранилища(ДанныеДляЗанесенияВРегистр.СвойстваПодписи);
			Если ТипЗнч(СвойстваПодписиСтруктура) = Тип("Структура") Тогда
				СвойстваПодписиСтруктура.Вставить("ОбъектСсылка", ДанныеДляЗанесенияВРегистр.Представление);
				ПодписиКВизамСогласования.Добавить(СвойстваПодписиСтруктура);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ПодписиКВизамСогласования", ПодписиКВизамСогласования);
			
	ПараметрыЗаписи.Вставить(
		"ДатаИсполнения", Параметры.ДатаФормированияРезолюций);
		
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", Параметры.РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из Параметры.ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровСогласования(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	Результат.Вставить("ПовторитьСогласование", Истина);
	Результат.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(Результат);
		
	ОповеститьОбИзменении(ЗадачиМнеТекущаяЗадача);
	
	ИнформацияОЗадаче = Новый Структура;
	ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
	ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
	Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Утверждение

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ОсновныеПредметы = МультипредметностьКлиентСервер.
			ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
		
		МассивПредметовДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
		
		Для Каждого Предмет из ОсновныеПредметы Цикл
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				
				ДанныеДляПодписания = Новый Структура;
				ДанныеДляПодписания.Вставить("ОбъектПодписания", Предмет);
				
				ДанныеПодписанта = Новый Структура;
				ДанныеПодписанта.Вставить("Подписал", ПользователиКлиентСервер.ТекущийПользователь());
				ДанныеПодписанта.Вставить("ДатаПодписи", ТекущаяДата());
				ДанныеПодписанта.Вставить("Подписан", Истина);
				
				ДанныеДляПодписания.Вставить("ПараметрыДанных",
					Новый Структура("ДанныеПодписанта", ДанныеПодписанта));
				
				МассивПредметовДляПодписания.Добавить(ДанныеДляПодписания);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПредметовДляПодписания.Количество() > 0 Тогда
			
			Заголовки = Новый Структура("Операция");
			
			Если МассивПредметовДляПодписания.Количество() = 1 Тогда
				Заголовки.Операция = НСтр("ru = 'Подпись предмета'");
			Иначе
				Заголовки.Операция = НСтр("ru = 'Подпись предметов'");
			КонецЕсли;
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП",
					ЭтотОбъект);
			
			ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
			ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
			ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
			ПараметрыПодписания.Заголовки = Заголовки;
			
			РаботаСЭПКлиент.Подписать(МассивПредметовДляПодписания, ПараметрыПодписания);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"УтверждениеВыполнениеКомандыУтверждено");

	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП(
	Результат, Параметры) Экспорт
	
	Если НЕ Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"УтверждениеВыполнениеКомандыУтверждено");
	
	ПараметрыЗаписи = Новый Структура;
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Для Каждого Данные Из Результат.НаборДанных Цикл
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		ПодписанныеДанные = Новый Структура;
		ПодписанныеДанные.Вставить("ПодписанныйОбъект", Данные.Представление);
		
		СвойстваПодписи = Данные.СвойстваПодписи;
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли; 
		ПодписанныеДанные.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		// Подписание по ЭДО добавим позже
		
		МассивДанныхДляЗанесенияВРегистр.Добавить(ПодписанныеДанные);
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить(
		"МассивДанныхДляЗанесенияВРегистр",
		МассивДанныхДляЗанесенияВРегистр);
	ПараметрыЗаписи.Вставить(
		"МассивАдресов",
		МассивАдресов);
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровУтверждения(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Результат.РезультатВыполнения;
	
	Результат.Удалить("КодВозврата");
	Результат.Вставить("ПовторитьУтверждение", Истина);
	Результат.Вставить("УникальныйИдентификаторФормыИзмененияПараметров",
		Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(Результат);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПриложений

&НаКлиенте
Процедура ЗаполнитьДеревоПриложений(ЭлементыДерева, МассивПриложений)
	
	Для Каждого ЭлементПриложение Из МассивПриложений Цикл
		
		СтрокаПредмета = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредмета, ЭлементПриложение);	
		
		Для Каждого ДочернееПриложение Из ЭлементПриложение.ДочерниеЭлементы Цикл
			Строка = СтрокаПредмета.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ДочернееПриложение);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПриложений()
	
	ТекущаяСтрокаВДереве = Неопределено;
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
	КонецЕсли;	
		
	ОбновитьДеревоПриложенийСервер();
	
	Если ТекущаяСтрокаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСтрокаВДереве);
	КонецЕсли;	
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений,
		ДеревоПриложений.ПолучитьЭлементы().Количество());
	
	Если ДеревоПриложений.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы;
	Иначе
		Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПриложенийСервер()
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьДеревоПриложенийПоПредметам(
		ЭтаФорма, ЗадачиМнеТекущаяЗадача.Предметы, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоПриложенийДобавлениеНаКлиенте(Предмет = Неопределено)

	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	НовыйИмяПредмета = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьПредметПродолжение",
		ЭтотОбъект,
		Новый Структура);

	ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
		НовыйИмяПредмета, Предмет,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
// Возвращает Истина - предмет успешно добавлен, или Ложь - не удалось установить предмет.
// СообщениеОбОшибке - сообщение об ошибке, если предмет установить не удалось.
//
Процедура ДобавитьПредметЗадачи(
	Форма,
	Задача,
	СообщениеОбОшибке = Неопределено,
	ИмяПредмета = Неопределено,
	Предмет = Неопределено,
	СтандартнаяОбработка = Истина,
	ОписаниеОповещения)
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Задача, 
		"БизнесПроцесс, БизнесПроцесс.ВедущаяЗадача");
	
	СообщениеОбОшибке = "";
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("БизнесПроцесс", РеквизитыЗадачи.БизнесПроцесс);
	ПараметрыОткрытия.Вставить("ПроверкаЗаполнения", Истина);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	
	Если ЗначениеЗаполнено(ИмяПредмета) Тогда
		РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый");
	Иначе
		РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный");
	КонецЕсли;
	ПараметрыОткрытия.Вставить("РольПредмета", РольПредмета);
	
	Если ИмяПредмета <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИмяПредмета", ИмяПредмета);
	КонецЕсли;
	СписокИменПредметов = Новый СписокЗначений;
	МассивВидов = Новый Массив;
	ПолучитьМассивИменПредметовОбъекта(ДеревоПриложений.ПолучитьЭлементы(), МассивВидов);
	СписокИменПредметов.ЗагрузитьЗначения(МассивВидов);
	ПараметрыОткрытия.Вставить("ИменаПредметов", СписокИменПредметов);
	
	Если Предмет = Неопределено Тогда
		ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
		
		Если Не ЗначениеЗаполнено(ИмяПредмета) Тогда
			ПараметрыОткрытия.Вставить("НеОтображатьФайлы", Истина);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(РеквизитыЗадачи.БизнесПроцесс)
			Или МультипредметностьКлиентСервер.ЭтоПроцессОбработкиДокументов(РеквизитыЗадачи.БизнесПроцесс)
			Или МультипредметностьКлиентСервер.ЭтоПроцессРассмотрения(РеквизитыЗадачи.БизнесПроцесс)
			Или (РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
				И ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцессВедущаяЗадача)) Тогда
			
			ИмяФормыВыбораПредмета = "Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках";
		Иначе
			Если РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать() Тогда
				ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайлаСоСканера";
			Иначе
				ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайла";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаБыстрый";
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ПараметрыОбработчика.Вставить("ИмяПредмета", ИмяПредмета);
	ПараметрыОбработчика.Вставить("Предмет", Предмет);
	ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОбработчика.Вставить("СписокИменПредметов", СписокИменПредметов);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ДобавитьПредметЗадачиПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	РезультатОткрытия = ОткрытьФорму(
		ИмяФормыВыбораПредмета,
		ПараметрыОткрытия,,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметЗадачиПродолжение(РезультатОткрытия, Параметры) Экспорт 
	
	ТипРезультатаОткрытия = ТипЗнч(РезультатОткрытия);
	
	Если ТипРезультатаОткрытия <> Тип("СправочникСсылка.Файлы")
		И ТипРезультатаОткрытия <> Тип("Структура")
		И ТипРезультатаОткрытия <> Тип("Массив") Тогда
		
		// Предмет не выбран
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	ИмяПредмета = Параметры.ИмяПредмета;
	СписокИменПредметов = Параметры.СписокИменПредметов;
	
	Если ТипЗнч(РезультатОткрытия) = Тип("Структура") Тогда
		
		Если ИмяПредмета = Неопределено Тогда
			ИмяПредмета = РезультатОткрытия.ИмяПредмета;
		КонецЕсли;
		
		Попытка
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ЗадачиМнеТекущаяЗадача,
				УникальныйИдентификатор,
				РезультатОткрытия.ИмяПредмета,
				РезультатОткрытия.Предмет, 
				Ложь);
			
		Исключение
			Если ИмяПредмета = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось добавить предмет в задачу:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Иначе
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить предмет в задаче:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		
		Для Каждого Результат Из РезультатОткрытия Цикл
			Попытка
				МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
					ЗадачиМнеТекущаяЗадача,
					УникальныйИдентификатор,
					Результат.ИмяПредмета,
					Результат.Предмет, 
					Ложь);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить предмет в задаче:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
	ИначеЕсли ТипРезультатаОткрытия = Тип("СправочникСсылка.Файлы") Тогда
		
		Попытка
			
			Если Параметры.ИмяПредмета = Неопределено Тогда
				ИмяПредмета = МультипредметностьВызовСервера.
					ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(РезультатОткрытия, СписокИменПредметов);
			Иначе
				ИмяПредмета = Параметры.ИмяПредмета;
			КонецЕсли;
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ЗадачиМнеТекущаяЗадача,
				УникальныйИдентификатор,
				ИмяПредмета,
				РезультатОткрытия,
				Ложь);
			
		Исключение
			
			СообщениеОбОшибке = "";
			
			Если Параметры.ИмяПредмета = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось добавить предмет в задачу:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			Если Параметры.ОписаниеОповещения <> Неопределено Тогда
				Параметры.ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
				ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
			КонецЕсли;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметПродолжение(Результат, Параметры) Экспорт 

	Если Результат Тогда 
		ОбновитьДеревоПриложений();
	Иначе
		Если Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Элементы.ГруппаОписаниеИПредметы Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Параметры.СообщениеОбОшибке,,
				"ДеревоПриложений");
		Иначе
			ПоказатьПредупреждение(, Параметры.СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен предметов объекта (процесса, шаблона или задачи)
//
&НаКлиенте
Процедура ПолучитьМассивИменПредметовОбъекта(Элементы, МассивВидов)
	
	Для Каждого СтрокаПредмета Из Элементы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
			МассивВидов.Добавить(СтрокаПредмета.ИмяПредмета);
		КонецЕсли;
		
		ПолучитьМассивИменПредметовОбъекта(СтрокаПредмета.ПолучитьЭлементы(), МассивВидов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиентеПродолжение(Результат, ВыделенныеСтрокиПредметов) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	
	ИменаУдаляемыхПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из ВыделенныеСтрокиПредметов Цикл
		Если ВыделеннаяСтр.ДоступноУдаление Тогда
			ИменаУдаляемыхПредметов.Добавить(ВыделеннаяСтр.ИмяПредмета);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаУдаляемыхПредметов.Количество() = 0 Тогда
		
		КоличествоВыделенныхСтрок = ВыделенныеСтрокиПредметов.Количество();
		Если КоличествоВыделенныхСтрок = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Удалить текущий предмет можно только в карточке процесса.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Удалить выделенные предметы можно только в карточке процесса.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	Если Не УдалитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке, ИменаУдаляемыхПредметов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПриложений();
	
КонецПроцедуры

// Возвращает Истина - предмет успешно удален, или Ложь - не удалось удалить предмет.
//
&НаКлиенте
Функция УдалитьПредметЗадачи(Форма, Задача, СообщениеОбОшибке = Неопределено, ИменаПредметов)
	
	СообщениеОбОшибке = "";

	
	ПометкаУдаления = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Задача, "ПометкаУдаления");
	
	Если ПометкаУдаления Тогда
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя удалять предметы из помеченной на удаление задачи.'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Нельзя очищать предметы в помеченной на удаление задаче.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ПредметыЗадачи = Новый Массив;
		
		Для Каждого ИмяПредмета Из ИменаПредметов Цикл
			Предмет = Новый Структура();
			Предмет.Вставить("ИмяПредмета", ИмяПредмета);
			Предмет.Вставить("Предмет", Неопределено);
			
			ПредметыЗадачи.Добавить(Предмет);
		КонецЦикла;
		
		МультипредметностьВызовСервера.ИзменитьПредметыКорневогоБизнесПроцесса(
			Задача,
			Форма.УникальныйИдентификатор,
			ПредметыЗадачи,

			Истина);
			
	Исключение
		
		Если ИменаПредметов.Количество() = 1 Тогда
			ПредставлениеПредметов = НСтр("ru='предмет'");
		Иначе
			ПредставлениеПредметов = НСтр("ru='предметы'");
		КонецЕсли;
		
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить %1 из задачи:
					|%2'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Иначе
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить %1 в задаче:
					|%1'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
				
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуПредмета()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Ссылка);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
			И ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) Тогда
			
			ОчиститьСообщения();
			СообщениеОбОшибке = "";
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДобавитьПредметПродолжение",
				ЭтотОбъект,
				Новый Структура);
			
			ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка,, ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Файлы

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);	
	Иначе	
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Копирование = Ложь)
	
	Если Не ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = ЗадачиМнеТекущийБизнесПроцесс;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'"),
				КраткоеПредставлениеОшибки(Инфо)));
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьТаблицыФайлов(Форма)
	
	КоличествоФайлов = КоличествоФайлов(
		Форма.ЗадачиМнеТекущийБизнесПроцесс, Форма.ОтображатьУдаленныеПриложения);
		
	Если КоличествоФайлов > 0 Тогда
		Форма.Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Форма.Элементы.ГруппаОписаниеИФайлы;
	Иначе
		Форма.Элементы.ГруппаОписаниеЗадачи.ТекущаяСтраница = Форма.Элементы.ГруппаОписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоФайлов(ВладелецФайла, ОтображатьУдаленные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТестЦентр

&НаКлиенте
Функция ТЦСписокПриАктивизацииСтроки() Экспорт
	
	СписокПриАктивизацииСтроки(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦПринятьКИсполнению() Экспорт
	
	ПринятьКИсполнению(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦСгруппироватьПоТочкеМаршрута() Экспорт
	
	СгруппироватьЗадачиМнеПоВиду("ТочкаМаршрута");
	Возврат Истина;
	
КонецФункции

#Область КомандыЗадачиИсполнение

#Область ТочкаМаршрутаИсполнить

&НаКлиенте
Функция ТЦЗадачаИсполнено() Экспорт
	
	ЗадачаИсполнено(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаКонтролировать

&НаКлиенте
Функция ТЦЗадачаПроконтролировано() Экспорт
	
	ЗадачаПроконтролировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОтветственноеИсполнение

&НаКлиенте
Функция ТЦЗадачаИсполненоОтвИсполнитель() Экспорт
	
	ЗадачаИсполненоОтвИсполнитель(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаПроверить

&НаКлиенте
Функция ТЦЗадачаЗавершитьИсполнение() Экспорт
	
	ЗадачаЗавершитьИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаВернутьНаДоработкуИсполнение() Экспорт
	
	ЗадачаВернутьНаДоработкуИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиСогласование

#Область ТочкаМаршрутаСогласовать

&НаКлиенте
Функция ТЦЗадачаСогласовано() Экспорт
	
	ЗадачаСогласовано(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаСогласованоСЗамечаниями() Экспорт
	
	ЗадачаСогласованоСЗамечаниями(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеСогласовано() Экспорт
	
	ЗадачаНеСогласовано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаСогласованиеОзнакомился() Экспорт
	
	ЗадачаСогласованиеОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗавершитьСогласование() Экспорт
	
	ЗавершитьСогласование(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаПовторить() Экспорт
	
	ЗадачаПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиОзнакомление

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаОзнакомился() Экспорт
	
	ЗадачаОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиУтверждение

#Область ТочкаМаршрутаУтвердить

&НаКлиенте
Функция ТЦЗадачаУтверждено() Экспорт
	
	ЗадачаУтверждено(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеУтверждено() Экспорт
	
	ЗадачаНеУтверждено(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаУтверждениеОзнакомился() Экспорт
	
	ЗадачаУтверждениеОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗавершитьУтверждение() Экспорт
	
	ЗавершитьУтверждение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаУтверждениеПовторить() Экспорт
	
	ЗадачаУтверждениеПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиРассмотрение

#Область ТочкаМаршрутаРассмотреть

&НаКлиенте
Функция ТЦЗадачаРассмотрено() Экспорт
	
	ЗадачаРассмотрено(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРассмотреноНаИсполнение() Экспорт
	
	ЗадачаРассмотреноНаИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРассмотреноНаОзнакомление() Экспорт
	
	ЗадачаРассмотреноНаОзнакомление(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаОбработано() Экспорт
	
	ЗадачаРассмотрениеОбработано(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНаправитьНаИсполнение() Экспорт
	
	ЗадачаРассмотрениеНаправитьНаИсполнение(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРассмотрениеНаправитьНаОзнакомление() Экспорт
	
	ЗадачаРассмотрениеНаправитьНаОзнакомление(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиПриглашение

#Область ТочкаМаршрутаПригласить

&НаКлиенте
Функция ТЦЗадачаПринято() Экспорт
	
	ЗадачаПринято(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеПринято() Экспорт
	
	ЗадачаНеПринято(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаПриглашениеПодтвердить() Экспорт
	
	ЗадачаПриглашениеПодтвердить(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаПриглашениеПовторить() Экспорт
	
	ЗадачаПриглашениеПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаПриглашениеОтложить() Экспорт
	
	ЗадачаПриглашениеОтложить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОповестить

&НаКлиенте
Функция ТЦЗадачаПриглашениеОзнакомился() Экспорт
	
	ЗадачаПриглашениеОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиРегистрация

#Область ТочкаМаршрутаЗарегистрировать

&НаКлиенте
Функция ТЦЗадачаЗарегистрировано() Экспорт
	
	ЗадачаЗарегистрировано(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаНеЗарегистрировано() Экспорт
	
	ЗадачаНеЗарегистрировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомиться

&НаКлиенте
Функция ТЦЗадачаРегистрацияОзнакомился() Экспорт
	
	ЗадачаРегистрацияОзнакомился(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРегистрацияПовторить() Экспорт
	
	ЗадачаРегистрацияПовторить(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиКомплексныйПроцесс

#Область ТочкаМаршрутаКонтролер

&НаКлиенте
Функция ТЦЗадачаКомплексныйПроцессПроконтролировано() Экспорт
	
	ЗадачаКомплексныйПроцессПроконтролировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиПоручение

#Область ТочкаМаршрутаВыполнить

&НаКлиенте
Функция ТЦЗадачаПоручениеВыполнено() Экспорт
	
	ЗадачаПоручениеВыполнено(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаКонтролировать

&НаКлиенте
Функция ТЦЗадачаПоручениеПроконтролировано() Экспорт
	
	ЗадачаПоручениеПроконтролировано(Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаПроверить

&НаКлиенте
Функция ТЦЗадачаЗавершитьПоручение() Экспорт
	
	ЗадачаЗавершитьПоручение(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаВернутьНаДоработку() Экспорт
	
	ЗадачаВернутьНаДоработку(Неопределено);
	Возврат Истина
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыЗадачиРешениеВопросов

#Область ТочкаМаршрутаРассмотрениеИнициатором

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовПеренести() Экспорт
	
	ЗадачаРешениеВопросовПеренести(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовНеПереносить() Экспорт
	
	ЗадачаРешениеВопросовНеПереносить(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовОзнакомился() Экспорт
	
	ЗадачаРешениеВопросовОзнакомился(Неопределено);
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовОтправитьНаУточнение() Экспорт
	
	ЗадачаРешениеВопросовОтправитьНаУточнение(Неопределено);
	Возврат Истина
	
КонецФункции

#КонецОбласти

#Область ТочкаМаршрутаОзнакомлениеСРезультатомРассмотрения

&НаКлиенте
Функция ТЦЗадачаРешениеВопросовРассмотрено() Экспорт
	
	ЗадачаРешениеВопросовРассмотрено(Неопределено);
	Возврат Истина
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ГрупповоеВыполнение

&НаСервереБезКонтекста
Процедура ПолучитьИнфуОЧислеПодписаний(МассивУтверждений, ЧислоУтвердить, ЧислоПодписать)
	
	ЧислоУтвердить = 0;
	ЧислоПодписать = 0;
	
	Для Каждого СтруктУтверждения Из МассивУтверждений Цикл
	
		ВидПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктУтверждения.БизнесПроцесс, "ВидПроцесса");
		
		Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Утверждение Тогда
			ЧислоУтвердить = ЧислоУтвердить + 1;
		ИначеЕсли ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание Тогда
			ЧислоПодписать = ЧислоПодписать + 1;
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьСтраницуМногоЗадач()
	
	ТекущийСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	ВыделеноЗадач = ТекущийСписок.ВыделенныеСтроки.Количество();
	
	Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаГрупповоеВыделение;
	
	// подсчитать сколько задач (по точкам маршрута)
	МассивЗадач = ТекущийСписок.ВыделенныеСтроки;
	
	ЧислоСогласовать = 0;
	ЧислоОзнакомиться = 0;
	ЧислоПринятьПриглашение = 0;
	ЧислоЗарегистрировать = 0;
	ЧислоИсполнить = 0;
	ЧислоУтвердить = 0;
	ЧислоПодписать = 0;
	
	МассивУтверждений = Новый Массив;
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
	
		ДанныеЗадачи = ТекущийСписок.ДанныеСтроки(ЗадачаСсылка);
		
		Если ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
			
			ЧислоСогласовать = ЧислоСогласовать + 1;
			
		ИначеЕсли ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться")
				Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Ознакомление.ТочкаМаршрута.Ознакомиться")
				Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") 
				Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
				
			ЧислоОзнакомиться = ЧислоОзнакомиться + 1;
			
		ИначеЕсли ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
				
			ЧислоПринятьПриглашение = ЧислоПринятьПриглашение + 1;
			
		ИначеЕсли ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
				
			ЧислоЗарегистрировать = ЧислоЗарегистрировать + 1;
			
		ИначеЕсли ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
				
			ЧислоУтвердить = ЧислоУтвердить + 1;
			МассивУтверждений.Добавить(
				Новый Структура("Задача, ТочкаМаршрута, БизнесПроцесс", 
					ЗадачаСсылка, ДанныеЗадачи.ТочкаМаршрута, ДанныеЗадачи.БизнесПроцесс));
			
		ИначеЕсли ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Исполнить")
			Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.ОтветственноеИсполнение") Тогда
				
			ЧислоИсполнить = ЧислоИсполнить + 1;
			
		КонецЕсли;	
	
	КонецЦикла;
	
	Если ЧислоУтвердить <> 0 Тогда
		ПолучитьИнфуОЧислеПодписаний(МассивУтверждений, ЧислоУтвердить, ЧислоПодписать);
	КонецЕсли;	
	
	// тут выводим текст ( "Согласовать(3)" ) и видимость блоков
	Элементы.СогласованоГрупповое.Видимость = (ЧислоСогласовать <> 0);
	Элементы.СогласованоГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Согласовано (%1)'"), ЧислоСогласовать);
	
	Элементы.ОзнакомилсяГрупповое.Видимость = (ЧислоОзнакомиться <> 0);
	Элементы.ОзнакомилсяГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Ознакомился (%1)'"), ЧислоОзнакомиться);
	
	Элементы.УтвержденоГрупповое.Видимость = (ЧислоУтвердить <> 0);
	Элементы.УтвержденоГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Утверждено (%1)'"), ЧислоУтвердить);
	
	Элементы.ПодписаноГрупповое.Видимость = (ЧислоПодписать <> 0);
	Элементы.ПодписаноГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Подписано (%1)'"), ЧислоПодписать);
	
	Элементы.ЗарегистрированоГрупповое.Видимость = (ЧислоЗарегистрировать <> 0);
	Элементы.ЗарегистрированоГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Зарегистрировать (%1)'"), ЧислоЗарегистрировать);
	
	Элементы.ПринятоГрупповое.Видимость = (ЧислоПринятьПриглашение <> 0);
	Элементы.ПринятоГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Принять приглашение (%1)'"), ЧислоПринятьПриглашение);
	
	Элементы.ИсполненоГрупповое.Видимость = (ЧислоИсполнить <> 0);
	Элементы.ИсполненоГрупповое.Заголовок = СтрШаблон(НСтр("ru = 'Исполнено (%1)'"), ЧислоИсполнить);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПолучитьМассивЗадачПодписаний(МассивУтверждений, ТипЗадач, МассивВыделенныхЗадач)
	
	Для Каждого СтруктУтверждения Из МассивУтверждений Цикл
	
		ВидПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктУтверждения.БизнесПроцесс, "ВидПроцесса");
		
		Если ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Утверждение
			И ТипЗадач = "Утвердить" Тогда
			
			МассивВыделенныхЗадач.Добавить(СтруктУтверждения.Задача);
			
		ИначеЕсли ВидПроцесса = Перечисления.ВидыБизнесПроцессаУтверждение.Подписание 
			И ТипЗадач = "Подписать"  Тогда
			
			МассивВыделенныхЗадач.Добавить(СтруктУтверждения.Задача);
			
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьМассивВыделенныхЗадач(ТипЗадач)

	// подсчитать сколько задач (по точкам маршрута)
	ТекущийСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	МассивЗадач = ТекущийСписок.ВыделенныеСтроки;
	МассивВыделенныхЗадач = Новый Массив;
	
	ЕстьУтверждения = Ложь;
	
	МассивУтверждений = Новый Массив;
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
	
		ДанныеЗадачи = ТекущийСписок.ДанныеСтроки(ЗадачаСсылка);
		
		Если ТипЗадач = "Согласовать" 
			И ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
			
			МассивВыделенныхЗадач.Добавить(ДанныеЗадачи.Ссылка);
			
		ИначеЕсли ТипЗадач = "Ознакомиться" 
			И (ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться")
				Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Ознакомление.ТочкаМаршрута.Ознакомиться")
				Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") 
				Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться")) Тогда
				
			МассивВыделенныхЗадач.Добавить(ДанныеЗадачи.Ссылка);
				
			
		ИначеЕсли ТипЗадач = "Пригласить"  
			И ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
				
			МассивВыделенныхЗадач.Добавить(ДанныеЗадачи.Ссылка);
			
		ИначеЕсли ТипЗадач = "Зарегистрировать" 
			И ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
				
			МассивВыделенныхЗадач.Добавить(ДанныеЗадачи.Ссылка);
			
		ИначеЕсли (ТипЗадач = "Утвердить" Или ТипЗадач = "Подписать")
			И ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
				
			ЕстьУтверждения = Истина;
			МассивУтверждений.Добавить(
				Новый Структура("Задача, ТочкаМаршрута, БизнесПроцесс", 
					ДанныеЗадачи.Ссылка, ДанныеЗадачи.ТочкаМаршрута, ДанныеЗадачи.БизнесПроцесс));
			
		ИначеЕсли ТипЗадач = "Исполнить" 
					И (ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Исполнить")
					Или ДанныеЗадачи.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.ОтветственноеИсполнение")) Тогда
				
			МассивВыделенныхЗадач.Добавить(ДанныеЗадачи.Ссылка);
			
		КонецЕсли;	
	
	КонецЦикла;
	
	Если ЕстьУтверждения Тогда
		ПолучитьМассивЗадачПодписаний(МассивУтверждений, ТипЗадач, МассивВыделенныхЗадач);
	КонецЕсли;	
	
	Возврат МассивВыделенныхЗадач;
	
КонецФункции

&НаСервере
Функция МожноЛиВыполнитьЗадачу(Задача, Причина)
	
	БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
	
	РезультатПроверки = РаботаСБизнесПроцессамиВызовСервера.ПроверитьУсловияЗапретаВыполнения(Задача);
	Если РезультатПроверки.ЗапретВыполнения Тогда
		Причина = РезультатПроверки.ТекстПредупреждения;
		Возврат Ложь;
	КонецЕсли;
	
	ИсполнительЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Исполнитель");
	
	Если ЗначениеЗаполнено(ИсполнительЗадачи)
		И ИсполнительЗадачи <> ТекущийПользователь Тогда
		
		Если ФактическийИсполнительЗадач = ПредопределенноеЗначение(
			"Перечисление.ФактическийИсполнительЗадач.ВыборПриИсполненииЗадачи") Тогда
			Причина = НСтр("ru = 'Нужно выбрать фактического исполнителя задачи.'");
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	
	Предметы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Предметы");
	Предметы = Предметы.Выгрузить();
	
	Для Каждого Элемент Из Предметы Цикл
		
		Если Элемент.ОбязательноеЗаполнение И ЗначениеЗаполнено(Элемент.ИмяПредмета) И Не ЗначениеЗаполнено(Элемент.Предмет) Тогда
			
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не введен заполняемый предмет ""%1""'"),Элемент.ИмяПредмета);
			Возврат Ложь;	
				
		КонецЕсли;
	КонецЦикла;
	
	// Наличие занятых файлов
	Для Каждого Элемент Из Предметы Цикл
		
		Если ЗначениеЗаполнено(Элемент.Предмет) Тогда
			
			Если ТипЗнч(Элемент.Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				
				Редактирует = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Предмет, "Редактирует");
				Если Редактирует = ТекущийПользователь Тогда
					
					Причина = НСтр("ru = 'Есть занятые файлы.'");
					Возврат Ложь;	
					
				КонецЕсли;	
				
			Иначе	
		
				КолвоФайлов = РаботаСФайламиВызовСервера.КоличествоЗанятыхФайлов(Элемент.Предмет);
				Если КолвоФайлов <> 0 Тогда
					
					Причина = НСтр("ru = 'Есть занятые файлы.'");
					Возврат Ложь;	
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	НайденныйПредмет = Неопределено;
	НайденнаяВиза = Неопределено;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если РаботаСВизамиСогласования.УжеЕстьВизаИсполнителяЗадачи(Задача, НайденныйПредмет, НайденнаяВиза) Тогда 
			
			Причина = СтрШаблон(
				НСтр("ru = 'В документе ""%1"" уже имеется виза текущего исполнителя.'"),
				НайденныйПредмет);
			Возврат Ложь;	
				
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеДопРеквизитов(Задача) Тогда
		
		Причина = НСтр("ru = 'Не заполнены дополнительные реквизиты задачи.'");
		Возврат Ложь;	
		
	КонецЕсли;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		ПодписыватьЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ПодписыватьЭП");
		Если ПодписыватьЭП Тогда
			
			Причина = НСтр("ru = 'Требуется подписание ЭП.'");
			Возврат Ложь;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Задача, ТипыДокументов, Истина);
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			
			Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер") <> "" Тогда 
				Продолжить;
			КонецЕсли;
			
			СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(Предмет);
			
			Нумератор = СтруктураВозврата.Нумератор;
			СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
			
			Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
				ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Нумератор) Тогда // ручная нумерация

				Причина = НСтр("ru = 'Требуется ручной ввод рег номера.'");
				Возврат Ложь;	
				
			Иначе
				
				Если СоздатьСвязьДляНумерации Тогда
					
					Причина = НСтр("ru = 'Требуется создать связь для нумерации.'");
					Возврат Ложь;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			РегистрационныйНомер = "";
			ТекстОшибки = "";
			Если Не Делопроизводство.ПредметМожетБытьЗарегистрирован(Предмет, РегистрационныйНомер, ТекстОшибки, Ложь) Тогда 			
				
				Причина = СтрШаблон(НСтр("ru = 'Нельзя зарегистрировать документ ""%1"" по причине: %2'"), 
					Предмет, ТекстОшибки);
				Возврат Ложь;	
				
			КонецЕсли;		
			
		КонецЦикла;	
		
		
	КонецЕсли;	
	
	ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(Задача);
	Если ЕстьАктивныеПодзадачи Тогда
		Причина = НСтр("ru = 'Есть невыполненные подзадачи.'");
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Функция ПроверитьДопустимостьГрупповогоВыполненияЗадач(МассивЗадач)
	
	ЗадачиМожноВыполнить = Новый Массив;
	ЗадачиНельзяВыполнить = Новый Массив;
	
	Результат = Новый Структура("ЗадачиМожноВыполнить, ЗадачиНельзяВыполнить");
	// ЗадачиМожноВыполнить  - массив задач
	// ЗадачиНельзяВыполнить = массив структур - Задача, Причина(Строка)
	
	Для Каждого Задача Из МассивЗадач Цикл
		Причина = "";
		Если МожноЛиВыполнитьЗадачу(Задача, Причина) Тогда
			ЗадачиМожноВыполнить.Добавить(Задача);
		Иначе	
			ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", Задача, Причина));
		КонецЕсли;	
	КонецЦикла;	
	
	Результат.ЗадачиМожноВыполнить = ЗадачиМожноВыполнить;
	Результат.ЗадачиНельзяВыполнить = ЗадачиНельзяВыполнить;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьЗадачиГруппа(МассивЗадач, МассивОповещений)
	
	Результат = ПроверитьДопустимостьГрупповогоВыполненияЗадач(МассивЗадач);
	
	ВыполнитьЗадачи(Результат.ЗадачиМожноВыполнить, МассивОповещений);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьЗадачиГруппаКлиент(МассивЗадач)
	
	Состояние(
		СтрШаблон(НСтр("ru = 'Выполняются задачи: %1 шт...'"),
		МассивЗадач.Количество() ));
	
	МассивОповещений = Новый Массив;
	Результат = ВыполнитьЗадачиГруппа(МассивЗадач, МассивОповещений);
	
	Для Каждого СтруктураОповещения Из МассивОповещений Цикл
		
		Оповестить(СтруктураОповещения.ИмяСобытия, СтруктураОповещения.Параметр);
		
	КонецЦикла;	
	
	Для Каждого Задача Из Результат.ЗадачиМожноВыполнить Цикл
		
		ОповеститьОбИзменении(Задача);
		Оповестить("ЗадачаВыполнена", Задача);
		Оповестить("ЗадачаИзменена", Задача, ЭтаФорма);
		
	КонецЦикла;	
	
	Если Результат.ЗадачиНельзяВыполнить.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
			СтрШаблон(НСтр("ru = 'Выполнено задач: %1.'"), Результат.ЗадачиМожноВыполнить.Количество() ));
			
	Иначе
		
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ОшибкиГрупповогоВыполнения", Результат,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
	КонецЕсли;	
	
	ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗадачи(МассивЗадач, МассивОповещений)
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		ПараметрыЗаписи = Новый Структура;
		
		ЗадачиМнеТекущаяЗадача = Задача;
		
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
		
		ИсполнительЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Исполнитель");
		
		Если ЗначениеЗаполнено(ИсполнительЗадачи)
			И ИсполнительЗадачи <> ТекущийПользователь Тогда
			
			Если ФактическийИсполнительЗадач = ПредопределенноеЗначение(
				"Перечисление.ФактическийИсполнительЗадач.ТекущийПользователь") Тогда
				ФактическийИсполнительЗадачи = ТекущийПользователь;
			КонецЕсли;
		
		КонецЕсли;
		
		
		РезультатВыполнения  = Неопределено;
		
		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
			ПараметрыЗаписи.Вставить(
				"РезультатПриглашения", 
				ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.Принято"));
		КонецЕсли;		


		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
			ПараметрыЗаписи.Вставить("РезультатРегистрации",
				ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.Зарегистрировано"));
				
			Отказ = Ложь; СообщениеОбОшибке = "";
			ЗарегистрироватьПредметыНаСервере(Отказ, ПараметрыЗаписи);

		КонецЕсли;		


		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			ПараметрыЗаписи.Вставить(
				"РезультатУтверждения",
				ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		КонецЕсли;			
		
		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
			
			ПараметрыЗаписи.Вставить(
				"РезультатСогласования", 
				Перечисления.РезультатыСогласования.Согласовано);
				
		КонецЕсли;	
			
		ВыполнитьЗадачу(ПараметрыЗаписи);
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ЗадачиМнеТекущаяЗадача, НСтр("ru = 'Выполнение задачи'"));
		
		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
					
			ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
				Задача,, Истина);
				
			Для Каждого Предмет Из ОсновныеПредметы Цикл
				ИнформацияОЗадаче = Новый Структура;
				ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
				ИнформацияОЗадаче.Вставить("Предмет", Предмет);
				ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
				
				СтруктураОповещения = Новый Структура("ИмяСобытия, Параметр",
					"ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
				МассивОповещений.Добавить(СтруктураОповещения);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
					
			ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
				Задача,, Истина);
				
			Для Каждого Предмет Из ОсновныеПредметы Цикл
				
				СтруктураОповещения = Новый Структура("ИмяСобытия, Параметр",
					"ПриглашениеПринято", Предмет);
				МассивОповещений.Добавить(СтруктураОповещения);
				
			КонецЦикла;
				
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованоГрупповая(Команда)
	
	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Согласовать");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОзнакомилсяГрупповое(Команда)

	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Ознакомиться");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоГрупповое(Команда)
	
	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Исполнить");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтвержденоГрупповое(Команда)
	
	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Утвердить");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПодписаноГрупповое(Команда)
	
	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Подписать");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПринятоГрупповое(Команда)
	
	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Пригласить");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗарегистрированоГрупповое(Команда)
	
	МассивЗадач = ПолучитьМассивВыделенныхЗадач("Зарегистрировать");
	ВыполнитьЗадачиГруппаКлиент(МассивЗадач);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗадачиСПодзадачами(МассивЗадач)
	
	Для Каждого Задача Из МассивЗадач Цикл
		ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(Задача);
		Если ЕстьАктивныеПодзадачи Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура ЗадачаПеренаправитьГрупповая()
	
	МассивЗадач = ВыделенныеЗадачи();
	
	ЕстьАктивныеПодзадачи = ЕстьЗадачиСПодзадачами(МассивЗадач);
	Если ЕстьАктивныеПодзадачи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'У некоторых из выделенных задач есть невыполненные подзадачи.
		|Перенаправление таких задач возможно только по одной.'"));
		Возврат;
	КонецЕсли;	
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("МассивЗадач", МассивЗадач);
	
	УникальныйИдентификаторФормыВладельца = Неопределено;
	
	ПараметрыОповещения.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификаторФормыВладельца);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеПеренаправленияЗадачи", ЭтотОбъект, ПараметрыОповещения);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Неопределено);
	ПараметрыФормы.Вставить("МассивЗадач", МассивЗадач);
	ПараметрыФормы.Вставить("КоличествоЗадач", МассивЗадач.Количество());
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Перенаправить задачу'"));
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ПеренаправлениеЗадачи",
		ПараметрыФормы, 
		,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗавершениеПеренаправленияЗадачи(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПеренаправленных = ПеренаправитьЗадачиСервер(
		Параметры.МассивЗадач, Результат, Параметры.УникальныйИдентификаторФормыВладельца);
		
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задачи перенаправлены'"),
		,
		СтрШаблон(НСтр("ru = 'Перенаправлено задач: %1 '"), МассивПеренаправленных.Количество())
		);
		
	ПеренаправленныеЗадачи = Новый Соответствие;
		
	Для Каждого СтруктураЗадачи Из МассивПеренаправленных Цикл
			
		Оповестить("Запись_ЗадачаИсполнителя", , СтруктураЗадачи.Задача);
		ПеренаправленныеЗадачи.Вставить(СтруктураЗадачи.Задача, 
			Новый Структура("БизнесПроцесс", СтруктураЗадачи.БизнесПроцесс));
		
	КонецЦикла;
	
	Оповестить("Перенаправление_ЗадачаИсполнителя", , ПеренаправленныеЗадачи);

КонецПроцедуры

&НаСервере
Функция ПеренаправитьЗадачиСервер(МассивЗадач, ИнфоОПеренаправлении, ИдентификаторФормы)
	
	МассивПеренаправленных = Новый Массив;
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		БизнесПроцесс = Неопределено;
		ЗадачаПеренаправлена = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(
			Задача, ИнфоОПеренаправлении, ИдентификаторФормы,, БизнесПроцесс);
		Если ЗадачаПеренаправлена Тогда
			МассивПеренаправленных.Добавить(
				Новый Структура("Задача, БизнесПроцесс", Задача, БизнесПроцесс)
				);
		КонецЕсли;
			
	КонецЦикла;	
		
	Возврат МассивПеренаправленных;

КонецФункции

&НаКлиенте
Процедура ДеревоПриложенийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		ВыделенныеСтроки = Элементы.ДеревоПриложений.ВыделенныеСтроки;
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			
			ВыбраннаяСтрока = ВыделенныеСтроки[0];
			ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыбраннаяСтрока);	
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) 
				И ТипЗнч(ФайлСсылка) = Тип("СправочникСсылка.Файлы") Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
				Возврат;
			Иначе
				Выполнение = Ложь;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
	#КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ЗадачиМнеТекущаяЗадача()
	
	Если ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементСписок = ТекущийЭлементСписокЗадач(ЭтаФорма);
	ТекущиеДанные = ТекущийЭлементСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗадачиМнеТекущаяЗадача = ТекущиеДанные.Ссылка;
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти
