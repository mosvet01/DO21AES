
#Область ОбработкаHttpЗапроса
//Выполняет запись сообщений с мобильного (входящих), запускает фоновое задание по обработке входящих и 
//формированию исходящих сообщений. 
//Возвращает httpОтвет клиенту.
//Параметры:
//Запрос - httpЗапрос с мобильного клиента, в котором содержаться параметры для сборки ответного сообщения
Функция ExchangePUT(Запрос)
	
	Перем ОписаниеОшибкиВхода;
	
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	ПользователиСлужебный.ВозможноИзменитьПароль(ТекущийПользователь);
	
	Разрешен = МП_СлужебныйПовтИсп.ВходПользователюРазрешен(ОписаниеОшибкиВхода, ТекущийПользователь);

	Если Не Разрешен Тогда
		Возврат ОтветКлиентуОшибка(ОписаниеОшибкиВхода);
	КонецЕсли; 
		
	ПараметрыЗапроса = ПараметрыЗапроса(Запрос);
	
	МобильноеПриложение = МП_СлужебныйПовтИсп.МобильноеПриложение(ОписаниеОшибкиВхода, 
		ПараметрыЗапроса.Получить("ClientCode"), ТекущийПользователь);
	
	Если МобильноеПриложение = Неопределено Тогда
		Возврат ОтветКлиентуОшибка(ОписаниеОшибкиВхода);
	КонецЕсли; 
	
	СтруктурыВходящихСообщений = ПараметрыЗапроса.Получить("Messages");
	
	ФормироватьОтветноеСообщение = ПараметрыЗапроса.Получить("NeedNewData") <> Неопределено 
		И ПараметрыЗапроса.Получить("NeedNewData") = Истина;
	
	Попытка
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(МобильноеПриложение);
		МассивПараметров.Добавить(СтруктурыВходящихСообщений);
		МассивПараметров.Добавить(ФормироватьОтветноеСообщение);
		МП_Служебный.ЗапуститьФоновоеЗадание(МобильноеПриложение, МассивПараметров,
			"МП_Служебный.ВыполнитьСинхронизациюДанных");
	
	Исключение
		
		Возврат ОтветКлиентуОшибка(ОписаниеОшибки());
		
	КонецПопытки; 
	
	Возврат СобратьОтветКлиенту(МобильноеПриложение, ПараметрыИсходящегоСообщения(ПараметрыЗапроса), ,
		ФормироватьОтветноеСообщение);
	
КонецФункции

//Возвращает httpОтвет клиенту
//Параметры:
//Запрос - httpЗапрос с мобильного клиента, в котором содержаться параметры для сборки ответного сообщения
Функция ExchangeGET(Запрос)
	
	Перем ОписаниеОшибкиВхода;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Разрешен = МП_СлужебныйПовтИсп.ВходПользователюРазрешен(ОписаниеОшибкиВхода, ТекущийПользователь);

	Если Не Разрешен Тогда
		Возврат ОтветКлиентуОшибка(ОписаниеОшибкиВхода);
	КонецЕсли; 
		
	ПараметрыЗапроса = ПараметрыЗапроса(Запрос);
	
	МобильноеПриложение = МП_СлужебныйПовтИсп.МобильноеПриложение(ОписаниеОшибкиВхода, 
		ПараметрыЗапроса.Получить("ClientCode"), ТекущийПользователь);
	
	Если МобильноеПриложение = Неопределено Тогда
		Возврат ОтветКлиентуОшибка(ОписаниеОшибкиВхода);
	КонецЕсли; 
	
	Возврат СобратьОтветКлиенту(МобильноеПриложение, ПараметрыИсходящегоСообщения(ПараметрыЗапроса));
	
КонецФункции

//Возвращает httpОтвет клиенту
//Параметры:
//Запрос - httpЗапрос с мобильного клиента, в котором содержаться параметры для сборки ответного сообщения
Функция GetDataGET(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗапроса = ПараметрыЗапроса(Запрос); 
	
	Если ТипЗнч(ПараметрыЗапроса) <> Тип("Соответствие") Тогда
		ТекстОшибки = Нстр("ru = 'Не удалось загрузить данные. Возможно Вы используете устаревшую версию приложения';
			|en= 'Failed to load data. You may be using an outdated version of the application'");
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		
	ОписаниеОшибкиВхода = "";
	
	МобильноеПриложение = МП_СлужебныйПовтИсп.МобильноеПриложение(ОписаниеОшибкиВхода,
		ПараметрыЗапроса.Получить("ClientCode"), ТекущийПользователь);
		
	Если МобильноеПриложение = Неопределено Тогда
		ВызватьИсключение(ОписаниеОшибкиВхода);
	КонецЕсли; 
	
	ПараметрыСинхронизации = МП_СлужебныйПовтИсп.ПараметрыСинхронизации(МобильноеПриложение);
	
	Ключ = ПараметрыЗапроса.Получить("Key");
	
	Если Ключ <> Неопределено Тогда
		
		Если Ключ = "ЗапросОбъекта" Тогда
			Данные = ВыгрузитьЗапрошенныйОбъект(ПараметрыЗапроса.Получить("ID"), 
				ПараметрыЗапроса.Получить("Type"), МобильноеПриложение);
		КонецЕсли;

		Если Ключ = "ВидыОтсутствия" Тогда
			
			ИспользоватьОтсутствия = ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия");
			Если Не ИспользоватьОтсутствия Тогда
				ТекстПредупреждения = НСтр("ru = 'Отсутствия не используются'");
				ВызватьИсключение ТекстПредупреждения;
			КонецЕсли;
			
			Если Не ПараметрыСинхронизации.СинхронизацияОтсутствий = Истина Тогда
				ТекстПредупреждения = НСтр("ru = 'Раздел ""Мои Отсутствия"" не включен в настройках мобильного приложения'");
				ВызватьИсключение ТекстПредупреждения;
			КонецЕсли;
			
			Данные = ВидыОтсутствий();
			
		КонецЕсли;
		
		Если Ключ = "НастройкиВложений" Тогда
			
			Данные = НастройкиВложений();
			
		КонецЕсли;
		
		Если Ключ = "ВремяЗамеров" Тогда
			
			ИспользоватьСамочувствия = ПолучитьФункциональнуюОпцию("УчетСамочувствияСотрудников");
			
			Если Не ИспользоватьСамочувствия Тогда
				ТекстПредупреждения = НСтр("ru = 'Самочувствия не используются'");
				ВызватьИсключение ТекстПредупреждения;
			КонецЕсли;
			
			Если Не ПараметрыСинхронизации.СинхронизацияСамочувствий = Истина Тогда
				ТекстПредупреждения = НСтр("ru = 'Раздел ""Мое самочувствие"" не включен в настройках мобильного приложения'");
				ВызватьИсключение ТекстПредупреждения;
			КонецЕсли;
			
			Данные = ВремяЗамеров();
			
		КонецЕсли;

		Если Ключ = "АдреснаяКнига" Тогда
			
			Если Не ПараметрыСинхронизации.СинхронизацияАдреснойКниги = Истина Тогда
				
				РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(ТекущийПользователь,
					Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияАдреснойКниги, Истина);
					
				РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(ТекущийПользователь,
					Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияАдреснойКниги);
				
			КонецЕсли;
			
			ТекстПоиска = ПараметрыЗапроса.Получить("ТекстПоиска");
			ФильтрТиповПоиска = ПараметрыЗапроса.Получить("ФильтрТиповПоиска");
			ПолнаяЗагрузка = ПараметрыЗапроса.Получить("ПолнаяЗагрузка");
			
			Если ПолнаяЗагрузка <> Неопределено Тогда
				ЭтоЗагрузкаВсейАК = XMLЗначение(Тип("Булево"), ПолнаяЗагрузка);
			КонецЕсли;
			
			Данные = Адресаты(ТекстПоиска, ФильтрТиповПоиска, ЭтоЗагрузкаВсейАК);
			
		КонецЕсли;
		
		Если Ключ = "ДоступностьМобильногоСканера" Тогда
			
			Данные = "МобильныйСканерДоступен";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовки = ЗаголовкиОтветаДляПередачиЗапрошенногоОбъекта(Данные);
	
	Возврат СформироватьHttpОтвет(Заголовки, Данные);
	
КонецФункции

Функция PingPing(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтрокаОтвета = "Connection established successfully";
	
	Ответ.УстановитьТелоИзСтроки(СтрокаОтвета, КодировкаТекста.UTF8);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает httpОтвет клиенту
//
// Параметры:
//  Запрос - httpЗапрос с мобильного клиента, в котором содержаться параметры для сборки ответного сообщения
//
// Возвращаемое значение:
//   HTTPСервисОтвет
//
Функция PutDataPUT(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗапроса = ПараметрыЗапроса(Запрос); 
	
	Если ТипЗнч(ПараметрыЗапроса) <> Тип("Соответствие") Тогда
		
		ВызватьИсключение (НСтр("ru = 'Возможно версия клиента устарела.'"));
		
	КонецЕсли; 
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
		
	ОписаниеОшибкиВхода = "";
	
	МобильноеПриложение = МП_СлужебныйПовтИсп.МобильноеПриложение(ОписаниеОшибкиВхода, 
		ПараметрыЗапроса["ClientCode"], ТекущийПользователь);
	
	Если МобильноеПриложение = Неопределено Тогда
		ВызватьИсключение(ОписаниеОшибкиВхода);
	КонецЕсли;
	
	Ключ = ПараметрыЗапроса["Key"];
	
	Если Ключ <> Неопределено Тогда
		
		Если Ключ = "Скан" Тогда
			Данные = МП_МобильныйСканер.ЗагрузитьСкан(Запрос.ПолучитьТелоКакДвоичныеДанные());
		КонецЕсли;
		
	КонецЕсли;
		
	Заголовки = ЗаголовкиОтветаДляПередачиЗапрошенногоОбъекта(Данные);
	
	Возврат СформироватьHttpОтвет(Заголовки, Данные);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыЗапроса(Запрос)
	
	Если Запрос.ПараметрыЗапроса.Количество() = 0 Тогда
		
		//Параметры запроса находятся в теле в виде соответствия
		СтрокаЗапросаТело = Запрос.ПолучитьТелоКакСтроку();
		
		ЧтениеJS = Новый ЧтениеJSON;
		
		ЧтениеJS.УстановитьСтроку(СтрокаЗапросаТело);
		
		JSЗапросХЗ = СериализаторXDTO.ПрочитатьJSON(ЧтениеJS);
		
		Если ТипЗнч(JSЗапросХЗ) <> Тип("ХранилищеЗначения")  Тогда
			
			ВызватьИсключение
				НСтр("ru='Тип запроса с мобильного не определен или старая версия мобильного приложения'");
		КонецЕсли; 
		
		ПараметрыЗапроса = JSЗапросХЗ.Получить();
		
		Если ПараметрыЗапроса = Неопределено Тогда
			
			ВызватьИсключение 
				НСтр("ru='Тип запроса с мобильного не определен или старая версия мобильного приложения'");
			
		КонецЕсли; 
		
	Иначе
		
		ПараметрыЗапроса = Новый Соответствие(Запрос.ПараметрыЗапроса);
		
	КонецЕсли; 
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыИсходящегоСообщения(ПараметрыЗапроса)
	
	Возврат Новый Структура("ИдентификаторСообщения, НомерЧасти", 
		ПараметрыЗапроса.Получить("LastResponseID"), 
		Число(ПараметрыЗапроса.Получить("LastResponsePartIndex")));
	
КонецФункции

Функция ИсходящееСообщениеДляДоставки(МобильноеПриложение, ПараметрыИсходящегоСообщения = Неопределено) 
	
	Если ПараметрыИсходящегоСообщения <> Неопределено Тогда
		ИдентификаторСообщения = ПараметрыИсходящегоСообщения.ИдентификаторСообщения;
	КонецЕсли; 
	
	УсловиеПоИдентификатору = ЗначениеЗаполнено(ИдентификаторСообщения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СообщенияИнтегрированныхСистем.Ссылка КАК Ссылка,
		|	СообщенияИнтегрированныхСистем.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами 
		|			КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|ГДЕ
		|	НЕ СообщенияИнтегрированныхСистем.ПометкаУдаления
		|	И НЕ СообщенияИнтегрированныхСистем.Входящее
		|	И &УсловиеПоИдентификатору
		|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильноеПриложение
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИдентификатору", ?(УсловиеПоИдентификатору,
		СтрШаблон("СообщенияИнтегрированныхСистем.ИдентификаторСообщения = ""%1""", 
			Строка(ИдентификаторСообщения)), "Истина"));
		
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Строка = Результат.Выгрузить()[0];
		
		Возврат Строка.Ссылка;
		
	КонецЕсли; 
	
КонецФункции

Функция ЗаголовкиОтветаДляПередачиЧасти(ИдентификаторСообщения = "", НомерЧасти = 0, 
	ВсегоЧастей = 0)
	
	Заголовки = Новый Соответствие; 
	
	Осталось = ВсегоЧастей - НомерЧасти;
	Заголовки.Вставить("ResponseID",  ИдентификаторСообщения);
	Заголовки.Вставить("PartIndex", НомерЧасти);
	Заголовки.Вставить("TotalParts", ВсегоЧастей);
	Заголовки.Вставить("PartCount", Осталось);
	
	//Тип даных ответа - двоичные данные
	Заголовки.Вставить("Content-Type", "Application/octet-stream");
	
	Возврат Заголовки;
	
КонецФункции

Функция ЗаголовкиОтветаДляПередачиЗапрошенногоОбъекта(Данные)
	
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "Application/octet-stream");
		Возврат Заголовки;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОтветКлиенту

Функция СобратьОтветКлиенту(МобильноеПриложение, ПараметрыИсходящегоСообщения = Неопределено,
	АктивныхФоновыхЗаданийНет = Ложь, ИскатьНеотправленныеСообщения = Истина)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИскатьНеотправленныеСообщения Тогда
		//Ищем сообщение по идентификатору. Если идентификатор пустой - функция вернет первое попавшее 
		//	готовое сообщение.
		ИсходящееСообщениеИС = ИсходящееСообщениеДляДоставки(МобильноеПриложение, 
			ПараметрыИсходящегоСообщения);
	
		Если ИсходящееСообщениеИС <> Неопределено Тогда
			
			НомерЧасти = 0;
			
			ИдентификаторСообщения = "";
			
			Если ПараметрыИсходящегоСообщения <> Неопределено Тогда 
				ПараметрыИсходящегоСообщения.Свойство("НомерЧасти", НомерЧасти);
				ПараметрыИсходящегоСообщения.Свойство("ИдентификаторСообщения", ИдентификаторСообщения);
			КонецЕсли; 
			
			ЧастиСообщения = МП_СлужебныйПовтИсп.ДанныеСообщения(ИсходящееСообщениеИС);
			
			Если ТипЗнч(ЧастиСообщения) = Тип("Массив") Тогда
				КоличествоЧастей = ЧастиСообщения.Количество();
			Иначе
				КоличествоЧастей = 0;
			КонецЕсли; 
			
			Если НомерЧасти = КоличествоЧастей Тогда
				
				РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьДатуПередачиКлиенту(
					ИсходящееСообщениеИС, ТекущаяДатаСеанса());
				
				//Помечаем сообщение обработанным и устанавливаем пометку удаления:
				МП_Служебный.ПометитьСообщениеОбработанным(ИсходящееСообщениеИС);
				
				//Формируем пустые заголовки для клиента
				Заголовки = ЗаголовкиОтветаДляПередачиЧасти();
				
				//На клиент возвращаем ответ об обнуление идентификатора и номера принятой части.
				Возврат ОтветКлиентуЧасть(Заголовки);
				
			Иначе
				
				Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
					ИдентификаторСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщениеИС,
						"ИдентификаторСообщения");
				КонецЕсли; 
				
				НомерСледующейЧасти = НомерЧасти + 1;
				
				Заголовки = ЗаголовкиОтветаДляПередачиЧасти(ИдентификаторСообщения, НомерСледующейЧасти, 
					КоличествоЧастей);
				
				//Получаем часть по индексу
				Возврат ОтветКлиентуЧасть(Заголовки, ЧастиСообщения[НомерСледующейЧасти - 1]);
				
			КонецЕсли;

		КонецЕсли;
			
	КонецЕсли;
	
	Если АктивныхФоновыхЗаданийНет Тогда
		// исходящего сообщения нет, активных фоновых заданий нет - возвращаем ответ клиенту ОК.
		Возврат ОтветКлиентуОк();
		
	КонецЕсли;
	
	//Проверим нет ли активных заданий:
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(
		Новый Структура("Наименование, Состояние", МобильноеПриложение.Код,
		СостояниеФоновогоЗадания.Активно));
	
	АктивныхФоновыхЗаданийНет = АктивныеФоновыеЗадания.Количество() = 0;
	
	Если АктивныхФоновыхЗаданийНет Тогда
		//Вызовем эту же функцию, и если завершились фоновые задания передаем признак их завершения 
		Возврат СобратьОтветКлиенту(МобильноеПриложение, , АктивныхФоновыхЗаданийНет,
			ИскатьНеотправленныеСообщения);
		
	Иначе
		//Для уменьшения количества обращений с клиента:
		Возврат ОтветКлиентуЖдите();
		
	КонецЕсли;
		
КонецФункции

Функция ОтветКлиентуОк()

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("OK");
	
	Возврат СформироватьHttpОтвет(Заголовки);

КонецФункции

Функция ОтветКлиентуОшибка(ОписаниеОшибки)
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Error");
		
	Возврат СформироватьHttpОтвет(Заголовки, ОписаниеОшибки);

КонецФункции

Функция ОтветКлиентуЖдите()
	
	Возврат СформироватьHttpОтвет();
	
КонецФункции

Функция ОтветКлиентуЧасть(Заголовки, Часть = Неопределено)
	
	Возврат СформироватьHttpОтвет(Заголовки, Часть);
	
КонецФункции

Функция СформироватьHttpОтвет(Заголовки = Неопределено, Данные = Неопределено)
	
	Если Заголовки <> Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(200, , Заголовки);
	Иначе
		Ответ = Новый HTTPСервисОтвет(200);
	КонецЕсли; 
	
	Если Данные <> Неопределено Тогда
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Ответ.УстановитьТелоИзСтроки(Данные, КодировкаТекста.UTF8);
		Иначе
			Ответ.УстановитьТелоИзДвоичныхДанных(Данные);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Ответ;
	
КонецФункции

Функция УточнитьФильтрПоискаАдресата(ОписаниеУточнения)
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("RefineSearch");
	
	Возврат СформироватьHttpОтвет(Заголовки, ОписаниеУточнения);

КонецФункции

#КонецОбласти

#Область ОбработкаЗапросаДанныхПоКлючу

Функция ВыгрузитьЗапрошенныйОбъект(ID, Тип, МобильноеПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСинхронизации = МП_СлужебныйПовтИсп.ПараметрыСинхронизации(МобильноеПриложение);
	
	Попытка
		
		ТипОбъекта = МП_СлужебныйПовтИсп.ТипСсылкиПоТипуМобильного(Тип);
		
		СсылкаНаОбъект = XMLЗначение(ТипОбъекта, ID);
		
		Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
			ТипОбъекта = Тип("УдалениеОбъекта");
		КонецЕсли; 
		
		Если ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
			
			ДанныеОбъекта = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(СсылкаНаОбъект);
			
		Иначе
			
			ТаблицаИзменений = Новый ТаблицаЗначений;
			
			ТаблицаИзменений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОбъекта)));
			
			ТаблицаИзменений.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево"))));
			
			Строка = ТаблицаИзменений.Добавить();
			
			Строка.Ссылка = СсылкаНаОбъект;
			
			Строка.ПометкаУдаления = СсылкаНаОбъект.ПометкаУдаления;
			
			СтруктураРезультатов = Новый Структура;
			
			МП_Изменения.ИзмененияВсеОстальноеПоТаблицамЗаголовков(Тип, ТаблицаИзменений, 
				СтруктураРезультатов, ПараметрыСинхронизации);
			
			СтруктураСериализованныхДанных = МП_ФормированиеИсходящегоСообщения.ВыгружаемыеДанныеВJS(
				СтруктураРезультатов);
			
			ДанныеОбъекта = СтруктураСериализованныхДанных.ТекстJSON;
			
		КонецЕсли;
		
		Возврат ДанныеОбъекта;
		
	Исключение
		
		МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, 
			ИнформацияОбОшибке());
		
	КонецПопытки;
	
	
КонецФункции

Функция ВидыОтсутствий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтсутствий.Ссылка КАК Ссылка,
		|	ВидыОтсутствий.ПометкаУдаления КАК ПометкаУдаления,
		|	ВидыОтсутствий.Наименование КАК Наименование,
		|	ВидыОтсутствий.Комментарий КАК Комментарий,
		|	ВидыОтсутствий.ЭтоУдаленнаяРабота КАК ЭтоУдаленнаяРабота
		|ИЗ
		|	Справочник.ВидыОтсутствий КАК ВидыОтсутствий
		|ГДЕ
		|	НЕ ВидыОтсутствий.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураРезультатов = Новый Структура;
	
	СтруктураРезультатов.Вставить(МП_СлужебныйПовтИсп.ТипВидОтсутствия(), РезультатЗапроса.Выгрузить());
	
	СтруктураСериализованныхДанных = МП_ФормированиеИсходящегоСообщения.ВыгружаемыеДанныеВJS(
		СтруктураРезультатов);
		
	ДанныеОбъекта = СтруктураСериализованныхДанных.ТекстJSON;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция НастройкиВложений()
	
	//Настройки для вложения:
	Запрос = Новый Запрос;
	
	Запрос.Текст = МП_ПервоеПодключение.ТекстЗапросаМаксРазмерВложения();
	
	Результат = Запрос.Выполнить();
	
	ТипНастройкиСинхронизации = МП_СлужебныйПовтИсп.ТипНастройкиСинхронизации();
	
	СтруктураРезультатов = Новый Структура;
	
	МП_Изменения.ИнициализироватьТаблицуПоТипу(
		СтруктураРезультатов, ТипНастройкиСинхронизации);
	
	СтрокаНастроек = СтруктураРезультатов[ТипНастройкиСинхронизации].Добавить();
	
	СтрокаНастроек.ВидНастройки = "МаксимальныйРазмерВложения";
	СтрокаНастроек.Значение = Результат.Выгрузить()[0].Значение;
	СтрокаНастроек.НастройкаСтрокой = Истина;
	
	ОграничиватьФорматПередаваемыхДанных = РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
		Пользователи.ТекущийПользователь(), Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ОграничениеФорматовПередаваемыхФайлов);
		
	Если ОграничиватьФорматПередаваемыхДанных = Истина Тогда
		СтрокаНастроек = СтруктураРезультатов[ТипНастройкиСинхронизации].Добавить();
		
		СтрокаНастроек.ВидНастройки = "ФорматыПередаваемыхФайлов";
		ФорматыПередаваемыхФайлов = РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователи.ТекущийПользователь(), Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ФорматыПередаваемыхФайлов);
	
		СтрокаНастроек.Значение = ФорматыПередаваемыхФайлов;
		СтрокаНастроек.НастройкаСтрокой = Истина;
	КонецЕсли;
	
	СтруктураСериализованныхДанных = МП_ФормированиеИсходящегоСообщения.ВыгружаемыеДанныеВJS(
		СтруктураРезультатов);
		
	ДанныеОбъекта = СтруктураСериализованныхДанных.ТекстJSON;
	
	Возврат ДанныеОбъекта;
	

КонецФункции

Функция ВремяЗамеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикУчетаСамочувствияСотрудников.Ссылка КАК Ссылка,
		|	ГрафикУчетаСамочувствияСотрудников.ПометкаУдаления КАК ПометкаУдаления,
		|	ГрафикУчетаСамочувствияСотрудников.ВремяЗамера КАК ВремяЗамера,
		|	ГрафикУчетаСамочувствияСотрудников.Недействительная КАК Недействительная
		|ИЗ
		|	Справочник.ГрафикУчетаСамочувствияСотрудников КАК ГрафикУчетаСамочувствияСотрудников
		|ГДЕ
		|	НЕ ГрафикУчетаСамочувствияСотрудников.ПометкаУдаления
		|	И НЕ ГрафикУчетаСамочувствияСотрудников.Недействительная";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураРезультатов = Новый Структура;
	
	СтруктураРезультатов.Вставить(МП_СлужебныйПовтИсп.ТипВремяЗамера(), РезультатЗапроса.Выгрузить());
	
	СтруктураСериализованныхДанных = МП_ФормированиеИсходящегоСообщения.ВыгружаемыеДанныеВJS(
		СтруктураРезультатов);
		
	ДанныеОбъекта = СтруктураСериализованныхДанных.ТекстJSON;
	
	Возврат ДанныеОбъекта;

КонецФункции

функция Адресаты(ТекстПоиска = "", ТипыПоиска = "", ЗагрузкаВсейКниги = Ложь)
	
	ПоискПользователей = Истина;
	ПоискКонтрагентов = Истина;
	ПоискКонтактныхЛиц = Истина;
	ПоискРолей = Истина;
	
	Если ЗначениеЗаполнено(ТипыПоиска) Тогда
		
		Если СтрНайти(ТипыПоиска, "Пользователь") = 0  Тогда
			ПоискПользователей= Ложь;
		КонецЕсли;
		
		Если СтрНайти(ТипыПоиска, "Контрагент") = 0 Тогда
			ПоискКонтрагентов = Ложь;
		КонецЕсли;
		
		Если СтрНайти(ТипыПоиска, "КонтактноеЛицо") = 0 Тогда
			ПоискКонтактныхЛиц = Ложь;
		КонецЕсли;
		
		Если СтрНайти(ТипыПоиска, "РольИсполнителя") = 0 Тогда
			ПоискРолей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ТекстЗапроса = "";
	ЕстьТекст = Ложь;
	Если ПоискПользователей Тогда
		//Отбираем всех пользователей в Адресной книге
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	АдреснаяКнига.Объект КАК Адресат,
			|	АдреснаяКнига.ПредставлениеОбъекта КАК ПредставлениеАдресата,
			|	АдреснаяКнига.Ссылка КАК Ссылка,
			|	АдреснаяКнига.Родитель КАК Родитель,
			|	АдреснаяКнига.ТипДанныхОбъекта КАК ТипДанных
			|ПОМЕСТИТЬ ВТОтобранныеДанные
			|ИЗ
			|	Справочник.АдреснаяКнига КАК АдреснаяКнига
			|ГДЕ
			|	АдреснаяКнига.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Пользователь)
			|	И НЕ АдреснаяКнига.ПометкаУдаления
			|	И АдреснаяКнига.ОтображатьВАдреснойКниге = ИСТИНА
			|	И АдреснаяКнига.Родитель = &ГруппаВсеПользователи
			|	И &УсловиеПоиска";
		Запрос.УстановитьПараметр("ГруппаВсеПользователи", справочники.АдреснаяКнига.ВсеПользователи);
		ЕстьТекст = Истина;
	КонецЕсли;
	
	Если ПоискКонтрагентов Тогда
		
		Если ЕстьТекст Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				| ВЫБРАТЬ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				| ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|	АдреснаяКнига.Объект КАК Адресат,
			|	АдреснаяКнига.ПредставлениеОбъекта КАК ПредставлениеАдресата,
			|	АдреснаяКнига.Ссылка КАК Ссылка,
			|	АдреснаяКнига.Родитель КАК Родитель,
			|	АдреснаяКнига.ТипДанныхОбъекта КАК ТипДанных";
		Если Не ЕстьТекст Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ПОМЕСТИТЬ ВТОтобранныеДанные";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	Справочник.АдреснаяКнига КАК АдреснаяКнига
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдреснаяКнига КАК АдреснаяКнигаРодитель
			|		ПО АдреснаяКнига.Родитель = АдреснаяКнигаРодитель.Ссылка
			|ГДЕ
			|	АдреснаяКнига.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Контрагент)
			|	И НЕ АдреснаяКнига.ПометкаУдаления
			|	И АдреснаяКнига.ОтображатьВАдреснойКниге = ИСТИНА
			|	И АдреснаяКнигаРодитель.ТипДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Контрагент),
			|		ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Раздел), 
			|		ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.ГруппаКонтрагентов))
			|	И &УсловиеПоиска";
		
		ЕстьТекст = Истина;
	КонецЕсли;
	
	Если ПоискКонтактныхЛиц Тогда
		
		Если ЕстьТекст Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				| ВЫБРАТЬ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				| ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	АдреснаяКнига.Объект КАК Адресат,
		|	АдреснаяКнига.ПредставлениеОбъекта КАК ПредставлениеАдресата,
		|	АдреснаяКнига.Ссылка КАК Ссылка,
		|	АдреснаяКнига.Родитель КАК Родитель,
		|	АдреснаяКнига.ТипДанныхОбъекта КАК ТипДанных";
		Если Не ЕстьТекст Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ПОМЕСТИТЬ ВТОтобранныеДанные";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	Справочник.АдреснаяКнига КАК АдреснаяКнига
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдреснаяКнига КАК АдреснаяКнигаРодитель
			|		ПО АдреснаяКнига.Родитель = АдреснаяКнигаРодитель.Ссылка
			|ГДЕ
			|	АдреснаяКнига.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.КонтактноеЛицо)
			|	И НЕ АдреснаяКнига.ПометкаУдаления
			|	И АдреснаяКнига.ОтображатьВАдреснойКниге = ИСТИНА
			|	И АдреснаяКнигаРодитель.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Контрагент)
			|	И &УсловиеПоиска";
			
		ЕстьТекст = Истина;
	КонецЕсли;
	
	Если ПоискРолей Тогда
		
		Если ЕстьТекст Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				| ВЫБРАТЬ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				| ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|	АдреснаяКнига.Объект КАК Адресат,
			|	АдреснаяКнига.ПредставлениеОбъекта КАК ПредставлениеАдресата,
			|	АдреснаяКнига.Ссылка КАК Ссылка,
			|	АдреснаяКнига.Родитель КАК Родитель,
			|	АдреснаяКнига.ТипДанныхОбъекта КАК ТипДанных";
			
			Если Не ЕстьТекст Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ПОМЕСТИТЬ ВТОтобранныеДанные";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
				|ИЗ
				|	Справочник.АдреснаяКнига КАК АдреснаяКнига
				|ГДЕ
				|	АдреснаяКнига.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.РольИсполнителей)
				|	И НЕ АдреснаяКнига.ПометкаУдаления
				|	И АдреснаяКнига.ОтображатьВАдреснойКниге = ИСТИНА
				|	И АдреснаяКнига.Родитель = &ГруппаВсеПользователи
				|	И &УсловиеПоиска";
		Запрос.УстановитьПараметр("ГруппаВсеПользователи", справочники.АдреснаяКнига.ВсеПользователи);
		ЕстьТекст = Истина;
	КонецЕсли;
	
	Если Не ЕстьТекст Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ";
		|////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЕСТЬNULL(ВТОтобранныеДанные.Ссылка, 0)) КАК Ссылка
		|ИЗ
		|	ВТОтобранныеДанные КАК ВТОтобранныеДанные";
	
	Если ЗагрузкаВсейКниги = Истина Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоиска", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоиска", 
			"АдреснаяКнига.ПредставлениеОбъекта ПОДОБНО &ТекстПоиска");
		Запрос.УстановитьПараметр("ТекстПоиска", "%" + ТекстПоиска + "%");
	Конецесли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Выгрузить()[0].Ссылка > 100 И ЗагрузкаВсейКниги <> Истина Тогда
		Возврат УточнитьФильтрПоискаАдресата(НСтр("ru= 'Найдено более 100 результатов поиска';
			|en= 'Found more than 100 search results'"));
	КонецЕсли;
	
	СтруктураРезультатов = Новый Структура;
	
	//Отбираем контактную информацию:
	Если ПоискПользователей Тогда
		ЗапросПользователей = Новый Запрос;
		ЗапросПользователей.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросПользователей.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Адресат,
		|	Пользователи.КонтактнаяИнформация.(
		|		Тип КАК Тип,
		|		Представление КАК Представление,
		|		НомерТелефона КАК НомерТелефона
		|	) КАК КонтактнаяИнформация,
		|	ФизическиеЛица.ФайлФотографии КАК ФайлФотографии,
		|	ВТОтобранныеДанные.ТипДанных КАК ТипДанных,
		|	ВТОтобранныеДанные.Ссылка КАК Ссылка,
		|	ВТОтобранныеДанные.ПредставлениеАдресата КАК ПредставлениеАдресата,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СведенияОПользователяхДокументооборот.Подразделение) КАК Подразделение
		|ИЗ
		|	ВТОтобранныеДанные КАК ВТОтобранныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|		ПО (СведенияОПользователяхДокументооборот.Пользователь = ВТОтобранныеДанные.Адресат)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.Ссылка = ВТОтобранныеДанные.Адресат)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (Пользователи.ФизЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	ВТОтобранныеДанные.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Пользователь)
		|	И НЕ Пользователи.ПометкаУдаления";
		
		Результат = ЗапросПользователей.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			СтруктураРезультатов.Вставить("Users", Результат.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;

	Если ПоискКонтрагентов Тогда
		
		ЗапросКонтрагентов = Новый Запрос;
		ЗапросКонтрагентов.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросКонтрагентов.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Адресат,
			|	Контрагенты.КонтактнаяИнформация.(
			|		Тип КАК Тип,
			|		Представление КАК Представление,
			|		НомерТелефона КАК НомерТелефона
			|	) КАК КонтактнаяИнформация,
			|	ФизическиеЛица.ФайлФотографии КАК ФайлФотографии,
			|	ВТОтобранныеДанные.ТипДанных КАК ТипДанных,
			|	ВТОтобранныеДанные.Ссылка КАК Ссылка,
			|	ВТОтобранныеДанные.ПредставлениеАдресата КАК ПредставлениеАдресата,
			|	Контрагенты.Родитель КАК РодительАдресата,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Контрагенты.Родитель) КАК НаименованиеРодителяАдресата,
			|	ВТОтобранныеДанные.Родитель КАК Родитель
			|ИЗ
			|	ВТОтобранныеДанные КАК ВТОтобранныеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО (Контрагенты.Ссылка = ВТОтобранныеДанные.Адресат)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО (Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка)
			|ГДЕ
			|	ВТОтобранныеДанные.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.Контрагент)
			|	И НЕ Контрагенты.ПометкаУдаления
			|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
		
		Результат = ЗапросКонтрагентов.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			СтруктураРезультатов.Вставить("Counterparties", Результат.Выгрузить());
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПоискКонтактныхЛиц Тогда
		
		ЗапросКЛ = Новый Запрос;
		ЗапросКЛ.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросКЛ.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛица.Ссылка КАК Адресат,
			|	КонтактныеЛица.КонтактнаяИнформация.(
			|		Тип КАК Тип,
			|		Представление КАК Представление,
			|		НомерТелефона КАК НомерТелефона
			|	) КАК КонтактнаяИнформация,
			|	ФизическиеЛица.ФайлФотографии КАК ФайлФотографии,
			|	ВТОтобранныеДанные.ТипДанных КАК ТипДанных,
			|	ВТОтобранныеДанные.Ссылка КАК Ссылка,
			|	ВТОтобранныеДанные.ПредставлениеАдресата КАК ПредставлениеАдресата,
			|	КонтактныеЛица.Владелец КАК Владелец,
			|	Контрагенты.Наименование КАК НаименованиеВладельца,
			|	ВТОтобранныеДанные.Родитель КАК Родитель
			|ИЗ
			|	ВТОтобранныеДанные КАК ВТОтобранныеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
			|		ПО ВТОтобранныеДанные.Адресат = КонтактныеЛица.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО (КонтактныеЛица.ФизЛицо = ФизическиеЛица.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО (КонтактныеЛица.Владелец = Контрагенты.Ссылка)
			|ГДЕ
			|	ВТОтобранныеДанные.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.КонтактноеЛицо)
			|	И НЕ КонтактныеЛица.ПометкаУдаления";
		
		Результат = ЗапросКЛ.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			СтруктураРезультатов.Вставить("ContactFaces", Результат.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоискРолей Тогда
		
		ЗапросРолей = Новый Запрос;
		ЗапросРолей.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросРолей.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиИсполнителей.Ссылка КАК Адресат,
		|	РолиИсполнителей.КонтактнаяИнформация.(
		|		Тип КАК Тип,
		|		Представление КАК Представление,
		|		НомерТелефона КАК НомерТелефона
		|	) КАК КонтактнаяИнформация,
		|	РолиИсполнителей.Комментарий КАК Комментарий,
		|	ВТОтобранныеДанные.ТипДанных КАК ТипДанных,
		|	ВТОтобранныеДанные.Ссылка КАК Ссылка,
		|	ВТОтобранныеДанные.ПредставлениеАдресата КАК ПредставлениеАдресата
		|ИЗ
		|	ВТОтобранныеДанные КАК ВТОтобранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка = ВТОтобранныеДанные.Адресат)
		|ГДЕ
		|	НЕ РолиИсполнителей.ПометкаУдаления
		|	И ВТОтобранныеДанные.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.РольИсполнителей)";
	
		Результат = ЗапросРолей.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			СтруктураРезультатов.Вставить("Roles", Результат.Выгрузить());
		КонецЕсли;
	
	КонецЕсли;
	
	Если СтруктураРезультатов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураСериализованныхДанных = МП_ФормированиеИсходящегоСообщения.ВыгружаемыеДанныеВJS(
		СтруктураРезультатов);
	
	Возврат СтруктураСериализованныхДанных.ТекстJSON;
	
КонецФункции

#КонецОбласти
