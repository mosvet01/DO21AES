
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		ЭтаФорма.Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ТипПроцесса) Тогда
		ТекущийТипПроцесса = Параметры.ТипПроцесса;
		Список.Параметры.УстановитьЗначениеПараметра("ТипПроцесса", ТекущийТипПроцесса);
	Иначе 
		Отказ = Истина;
	КонецЕсли;
	
	// Восстановление настроек формы
	СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
		ПоказыватьТолькоАктивныеПроцессы = СохраненныеРеквизиты.Получить("ПоказыватьТолькоАктивныеПроцессы");
	Иначе
		ПоказыватьТолькоАктивныеПроцессы = Истина;
	КонецЕсли;
	
	Элементы.СписокПроцессовПоказыватьТолькоАктивныеПроцессы.Пометка = ПоказыватьТолькоАктивныеПроцессы;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"ПоказыватьТолькоАктивныеПроцессы",
		ПоказыватьТолькоАктивныеПроцессы,
		ПоказыватьТолькоАктивныеПроцессы);
		
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	Элементы.Дата.Формат = ФорматДатыДляКолонок;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	УстановитьУсловноеОформлениеСпискаПроцессов(ТекущаяДатаСеанса);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый Массив;
	Для Каждого МетаденныеПроцесса Из Метаданные.БизнесПроцессы Цикл
		ПараметрыРазмещения.Источники.Добавить(МетаденныеПроцесса);
	КонецЦикла;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ОповеститьОВыборе(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ОповеститьОВыборе(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда 
		ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьТолькоАктивныеПроцессы(Команда)
	
	ПоказыватьТолькоАктивныеПроцессы = Не ПоказыватьТолькоАктивныеПроцессы;
	Элементы.СписокПроцессовПоказыватьТолькоАктивныеПроцессы.Пометка = ПоказыватьТолькоАктивныеПроцессы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"ПоказыватьТолькоАктивныеПроцессы",
		ПоказыватьТолькоАктивныеПроцессы,
		ПоказыватьТолькоАктивныеПроцессы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеСпискаПроцессов(ТекущаяДатаСеанса)
	
	Список.УсловноеОформление.Элементы.Очистить();
	
	// Нестартованные процессы.
	ПредставлениеЭлемента = "Процесс не стартован (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Список.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.НеСтартованныйБизнесПроцесс; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	
	// Помеченные на удаление процессы.
	ПредставлениеЭлемента = "Процесс помечен на удаление (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Список.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста ,,,,,, Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// Завершенные процессы.
	ПредставлениеЭлемента = "Процесс завершен (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Список.УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЗавершенныйБизнесПроцесс;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
