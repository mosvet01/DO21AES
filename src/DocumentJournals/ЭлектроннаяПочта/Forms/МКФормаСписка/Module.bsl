
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭтойФормы = "ЖурналДокументов.ЭлектроннаяПочта.Форма.МКФормаСписка";
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроляНомерКартинки.Видимость = Ложь;
	КонецЕсли;
	
	ИсходныйТекстЗапроса = Список.ТекстЗапроса;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ЗагрузитьНастройки();
	
	ЗаполнитьУсловноеОформлениеСпискаПисем(Список);
	
	ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	ЦветТекстаКнопки = ЦветаСтиля.ЦветТекстаКнопки;
	ОбычныйШрифтТекста = ШрифтыСтиля.ОбычныйШрифтТекста;
	
	ЗаполнитьСписокВыбораЭлементовОтбора();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПисьмаИзменены" И Источник <> ЭтотОбъект Тогда
		ОбновитьДанные(Неопределено, Истина);
		
	ИначеЕсли ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			ОбновитьДанные();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг" Тогда
		ТипОбъекта = ТипЗнч(Параметр[0]);
		Если ТипОбъекта = Тип("ДокументСсылка.ВходящееПисьмо")
			Или ТипОбъекта = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			ОбновитьДанные();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ЛичныйАдресат" 
		Или ИмяСобытия = "Запись_Контрагент" 
		Или ИмяСобытия = "Запись_КонтактноеЛицо" 
		Или ИмяСобытия = "Запись_Пользователь"
		Или ИмяСобытия = "Запись_РолиИсполнителей" 
		Или ИмяСобытия = "ИзмененоФизическоеЛицо" Тогда
		
		ОбновитьДанные();
		
	ИначеЕсли ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты"
		И Источник <> ЭтотОбъект Тогда
	
		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки")
			И ОтображатьУдаленныеПисьмаИПапки <> Параметр.ОтображатьУдаленныеПисьмаИПапки Тогда
			
			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
			ОтображатьУдаленныеСервер(Ложь);
			Элементы.Список.Обновить();
			
		КонецЕсли;
		
		Если Параметр.Свойство("РежимМоиПапки")
			И РежимМоиПапки <> Параметр.РежимМоиПапки Тогда
			
			РежимМоиПапки = Параметр.РежимМоиПапки;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборВключенПриИзменении(Элемент)
	
	УстановитьСвойстваОтображенияГруппыОтбор();
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАдресатПриИзменении(Элемент)
	
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочтеноПриИзменении(Элемент)
	
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочтеноОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПрочтено = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлагПриИзменении(Элемент)
	
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлагОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборФлаг = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНепрочтенноеПисьмо = Ложь;
	МножественноеВыделение = Элементы.Список.ВыделенныеСтроки.Количество() > 1;
	
	Если МножественноеВыделение Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
			ТекущиеДанные = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
			ЕстьНепрочтенноеПисьмо = Не ТекущиеДанные.Прочтено;
			Если ЕстьНепрочтенноеПисьмо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;
			
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// выделена одна строка
		ЕстьНепрочтенноеПисьмо = Не ТекущиеДанные.Прочтено;
		
	КонецЕсли;
	
	Если ЕстьНепрочтенноеПисьмо Тогда
		Элементы.СписокКонтекстноеМенюПометитьКакПрочтенные.Заголовок = НСтр("ru='Прочитано'");
	Иначе
		Элементы.СписокКонтекстноеМенюПометитьКакПрочтенные.Заголовок = НСтр("ru='Не прочитано'");
	КонецЕсли;
	
	УстановитьВидимостьКомандКонтекстногоМенюСпискаПисем(Не МножественноеВыделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	
	ОбновитьДанные(Неопределено, Истина);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПапку(Команда)
	
	ВыполнитьВыборПапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборПисем(Команда)
	
	ИзменитьВидимостьОтбораПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаНаКонтроле(Команда)
	
	ОткрытьФорму("Справочник.Контроль.Форма.НаКонтроле", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленныеПисьмаИПапки = Не ОтображатьУдаленныеПисьмаИПапки;
	ОтображатьУдаленныеСервер();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НаписатьПоШаблонуПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаВыбора",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#Область ОбработчикиКомандФормыКонтекстноеМенюСписка

&НаКлиенте
Процедура Ответить(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ПересылаемыеПисьма = Новый СписокЗначений;
		ПересылаемыеПисьма.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПересылаемыеПисьма", ПересылаемыеПисьма);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаПересылки", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		
		ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
		Если ВыбранноеПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочтенныеПисьма = Новый Массив;
	НепрочтенныеПисьма = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Письмо);
			
			Если ДанныеСтроки <> Неопределено Тогда
				
				Если ДанныеСтроки.Прочтено Тогда
					ПрочтенныеПисьма.Добавить(Письмо);
				Иначе
					НепрочтенныеПисьма.Добавить(Письмо);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Если НепрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Отмечаем как прочитанные...'");
			Состояние(ТекстСостояния);
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(НепрочтенныеПисьма, Истина, ТекущаяПапка);
		
	Иначе
		
		Если ПрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Отмечаем как непрочитанные...'");
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(ПрочтенныеПисьма, Ложь, ТекущаяПапка);
		
	КонецЕсли;
	
	Если НепрочтенныеПисьма.Количество() > 1 Тогда
		
		Состояние(СтрШаблон(НСтр("ru = 'Отмечены как прочтенные (%1)'"),
			НепрочтенныеПисьма.Количество()));
		
	ИначеЕсли ПрочтенныеПисьма.Количество() > 1 Тогда
		
		Состояние(СтрШаблон(НСтр("ru = 'Отмечены как непрочтенные (%1)'"),
			ПрочтенныеПисьма.Количество()));
		
	КонецЕсли;
	
	ОбновитьДанные(РезультатОбработки.ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапку(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	ПараметрыФормы.Вставить("РежимМоиПапки", РежимМоиПапки);
	ПараметрыФормы.Вставить("КоличествоПисем", КоличествоПисем);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Письма", Письма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиПисьмаВПапкуЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПапкиПисем.Форма.ФормаПереносаПисем", ПараметрыФормы, ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(НСтр("ru = 'Идет удаление писем в корзину. Пожалуйста подождите...'"));
	КонецЕсли;
	
	РезультатОбработки = ПереместитьВКорзинуСервер(Письма, ТекущаяПапка);
	
	ОбновитьДанные(РезультатОбработки.ЗаголовокФормы);
	
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(НеПеренесенныеПисьма[0], "Тема");
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Письмо ""%1"" не удалось перенести в корзину.
					|Возможно это письмо открыто вами или другим пользователем.'"),
				ТемаПисьма);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось перенести в корзину несколько писем (%1).
					|Возможно эти письма открыты вами или другим пользователем.'"),
				НеПеренесеноПисем);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			Состояние(СтрШаблон(
				НСтр("ru = 'Письма (%1) успешно удалены в корзину'"),
				КоличествоПисем));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбранноеПисьмо, ЭтотОбъект);
	
КонецПроцедуры

#Область РаботаСФлагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ОтображатьУдаленныеПисьмаИПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
	
	ОтображатьУдаленныеСервер();
	
	РежимМоиПапки = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	ТекущаяПапкаПриСоздании = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы,
			"ТекущаяПапкаПисем",
			Неопределено);
	Если ЗначениеЗаполнено(ТекущаяПапкаПриСоздании) Тогда
		ТекущаяПапка = ТекущаяПапкаПриСоздании;
		УстановитьОтборПоПапкеСервер(ТекущаяПапкаПриСоздании);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер(СохранитьПерсональнуюНастройку = Истина)
	
	Элементы.ФормаОтображатьУдаленные.Пометка = ОтображатьУдаленныеПисьмаИПапки;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	
	Если СохранитьПерсональнуюНастройку Тогда
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ОтображатьУдаленныеПисьмаИПапки",
			ОтображатьУдаленныеПисьмаИПапки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеСпискаПисем(Список)
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Выделять непрочтенные письма жирным шрифтом и цветом фона
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять непрочтенные письма жирным(стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	// Выделять прочтенные письма цветом фона и текста
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять прочтенные письма цветом фона и текста (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("TextColor", 
		ЦветаСтиля.ЦветТекстаПрочтенныхПисем);
	
	
	// Выделять помеченные на удаления сообщения зачеркнутым шрифтом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять помеченные на удаления сообщения зачеркнутым шрифтом (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	// Выделять непрочтенные и помеченные письма жирным перечеркнутым шрифтом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять непрочтенные и помеченные письма жирным перечеркнутым шрифтом (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	
	// Отображать дату сегодняшних писем только в виде времени "09:46"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату сегодняшних писем только в виде времени ""09:46"" (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ=ЧЧ:мм");
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	// Отображать дату писем за эту неделю в виде "Вт 19:03"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за эту неделю в виде ""Вт 19:03"" (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	//( Дата Меньше "Начало этого дня" И Дата Больше или равно "Начало этой недели" )
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='ddd ЧЧ:мм'");
	
	
	// Отображать дату писем за более ранний, чем эта неделя, период в виде "10.06.2021"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за более ранний, чем эта неделя, период в виде ""10.06.21"" (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='dd.MM.yy'");
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;
	
	УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "ФлагНомерКартинки", -1);
	УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "ВажностьНомерКартинки", 1);
	УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "СостояниеНомерКартинки", 0);
	УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "ЕстьВложения", Ложь);
	УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "СостояниеКонтроляНомерКартинки", 0);
	
КонецПроцедуры

// Устанавливает скрытие поля, если условие не выполнено.
//
// Параметры:
//  Список - ДинамическийСписок - список для которого настраивается отбор;
//  ИмяПоля - Строка - Имя поля, по которому устанавливается условие;
//  ЗначениеУсловия - Произвольный - значение с чем сравнивается поле отбора.
//  Условие - Неопределено, ВидСравненияКомпоновкиДанных - условие отбора
//	ИмяПоляУсловия - Строка - Имя поля условия
//
&НаСервере
Процедура УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, ИмяПоля, 
		ЗначениеУсловия = Неопределено, Условие = Неопределено, ИмяПоляУсловия = Неопределено)

	ЭлементЯчейкаСрок = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементЯчейкаСрок.Представление = СтрШаблон(
		НСтр("ru = 'Скрытие ячейки ""%1"" если поле пустое'"), ИмяПоля);

	ЭлементЦветаОформления = ЭлементЯчейкаСрок.Оформление.Элементы.Найти("Видимость");
	ЭлементЦветаОформления.Использование = Истина;
	ЭлементЦветаОформления.Значение      = Ложь;

	ЭлементЦветаОформления = ЭлементЯчейкаСрок.Оформление.Элементы.Найти("Отображать");
	ЭлементЦветаОформления.Использование = Истина;
	ЭлементЦветаОформления.Значение      = Ложь;

	ЭлементОбластиОформления = ЭлементЯчейкаСрок.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	ПолеУсловия = ?(ИмяПоляУсловия = Неопределено, ИмяПоля, ИмяПоляУсловия);
	
	Если Условие = Неопределено Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементЯчейкаСрок.Отбор, 
				ПолеУсловия, ВидСравненияКомпоновкиДанных.Равно, ЗначениеУсловия, "", Истина);

	ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементЯчейкаСрок.Отбор, 
				ПолеУсловия, ВидСравненияКомпоновкиДанных.НеЗаполнено, , "", Истина);

	ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.Равно Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементЯчейкаСрок.Отбор, 
				ПолеУсловия, ВидСравненияКомпоновкиДанных.Равно, ЗначениеУсловия, , Истина);

	КонецЕсли;

	ЭлементЯчейкаСрок.Использование  = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПапкеСервер(Папка)
	
	Если ТекущаяПапка <> Папка Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяЭтойФормы, "ТекущаяПапкаПисем", Папка);
	КонецЕсли;
	
	ТекущаяПапка = Папка;
	
	Если Папка = Неопределено ИЛИ Папка.Пустая() Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
		Заголовок = НСтр("ru = 'Почта'");
		Возврат;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("Папка", Папка);
	
	Заголовок = СформироватьЗаголовокФормы(ТекущаяПапка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(ТекущаяПапка)
	
	// Если установлен отбор, не выводим количество
	ПредставлениеПапки = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПапки(ТекущаяПапка);
	
	Результат = СтрШаблон(НСтр("ru = '%1 %2'"),
							Формат(ПредставлениеПапки.КоличествоПисем, "ЧГ=0"),
							ПредставлениеПапки.Описание);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВыборПапки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекущаяПапка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПапкуВыполнитьЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.ПапкиПисем.ФормаВыбора", ПараметрыОткрытия,ЭтотОбъект,,,,
		ОписаниеОповещения,РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапкуВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		УстановитьОтборПоПапкеСервер(Результат);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранноеПисьмо(ВыводитьПредупреждение)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	// В МК может быть такое, делаем обход.
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		И ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Письмо = ТекущиеДанные.Ссылка;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеПисьма(ВыводитьПредупреждение)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка) Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ЗначениеЗаполнено(ВыбранноеПисьмо)
		И Результат.Найти(ВыбранноеПисьмо) = Неопределено Тогда
		Результат.Добавить(ВыбранноеПисьмо);
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны письма.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПометитьКакПрочтенныеСервер(Письма, Пометка, ТекущаяПапка)
	
	Результат = Новый Структура;
	
	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письма, Пометка);
	
	ЗаголовокФормы = СформироватьЗаголовокФормы(ТекущаяПапка);
	Результат.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(ЗаголовокФормы = Неопределено, ОбновитьЗаголовокФормы = Ложь)
	
	Если ЗаголовокФормы <> Неопределено
		И ЗначениеЗаполнено(ЗаголовокФормы) Тогда
		Заголовок = ЗаголовокФормы;
	ИначеЕсли ОбновитьЗаголовокФормы Тогда
		Заголовок = СформироватьЗаголовокФормы(ТекущаяПапка);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПисьмаВПапкуЗавершение(Папка, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьВПапкуКлиент(ДополнительныеПараметры.Письма, Папка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПапкуКлиент(Письма, Папка)
	
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Состояние(НСтр("ru = 'Письма не выбраны'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(СтрШаблон(
			НСтр("ru = 'Переносим письма в папку ""%1""...'"),
			Папка));
	КонецЕсли;
	
	РезультатОбработки = ОбработатьПеремещениеВПапку(Письма, Папка, ТекущаяПапка);
	
	ОбновитьДанные(РезультатОбработки.ЗаголовокФормы);
	
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(НеПеренесенныеПисьма[0], "Тема");
			СообщениеОбОшибке = "";
			Если ТипЗнч(РезультатОбработки.Ошибки) = Тип("Массив") И РезультатОбработки.Ошибки.Количество() <> 0 Тогда
				СообщениеОбОшибке = РезультатОбработки.Ошибки[0];
			КонецЕсли;	
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Письмо ""%1"" не удалось переместить в папку ""%2"".
					|Возможно это письмо открыто вами или другим пользователем.
					|
					|Подробное описание ошибки: ""%3""'"),
				ТемаПисьма,
				Папка,
				СообщениеОбОшибке);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось переместить несколько писем (%1) в папку ""%2"".
					|Возможно эти письма открыты вами или другим пользователем.'"),
				НеПеренесеноПисем,
				Папка);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			
			Состояние(СтрШаблон(
				НСтр("ru = 'Письма (%1) перемещены в папку ""%2""'"),
				КоличествоПисем,
				Папка));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьПеремещениеВПапку(Письма, Папка, ТекущаяПапка)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВПапку(Письма, Папка);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	Результат.Вставить("Ошибки", РезультатПереноса.Ошибки);
	
	ЗаголовокФормы = СформироватьЗаголовокФормы(ТекущаяПапка);
	Результат.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПереместитьВКорзинуСервер(Письма, ТекущаяПапка)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВКорзину(Письма);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	
	ЗаголовокФормы = СформироватьЗаголовокФормы(ТекущаяПапка);
	Результат.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлагиСервер(Письма, Флаг, ТекущаяПапка);
	
	ОбновитьДанные();
	
	Оповестить("ИзменилсяФлаг", Письма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьФлагиСервер(Письма, Флаг, ТекущаяПапка)
	
	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектам(Письма, Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПоШаблонуПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВстроеннаяПочтаКлиент.СоздатьПисьмоНаОсновании(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандКонтекстногоМенюСпискаПисем(ПоказатьПункты)
	
	Элементы.СписокКонтекстноеМенюОтветить.Видимость = ПоказатьПункты;
	Элементы.СписокКонтекстноеМенюОтветитьВсем.Видимость = ПоказатьПункты;
	Элементы.СписокКонтекстноеМенюКонтроль.Видимость = ПоказатьПункты;
	Элементы.СписокКонтекстноеМенюСправочникЗаписиРабочегоКалендаряСоздатьЗаписьКалендаряНаОсновании.Видимость =
		ПоказатьПункты;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьОтбораПисем()
	
	Элементы.ГруппаОтбор.Видимость = Не Элементы.ГруппаОтбор.Видимость;
	Если Элементы.ГруппаОтбор.Видимость Тогда
		Элементы.ПоказатьОтборПисем.Заголовок = НСтр("ru = 'Свернуть поиск'");
	Иначе
		Элементы.ПоказатьОтборПисем.Заголовок= НСтр("ru = 'Быстрый поиск'");
	КонецЕсли;
	
	УстановитьСвойстваОтображенияГруппыОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваОтображенияГруппыОтбор()
	
	Если ОтборВключен Тогда
		Элементы.ПоказатьОтборПисем.ЦветТекста = WebЦвета.Зеленый;
		Элементы.ОтборВключен.ЦветТекстаЗаголовка = WebЦвета.Зеленый;
	Иначе
		Элементы.ПоказатьОтборПисем.ЦветТекста =  WebЦвета.Черный;
		Элементы.ОтборВключен.ЦветТекстаЗаголовка = WebЦвета.Черный;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовОтбора()
	
	// Подготовка списка выбора для Прочтено
	СписокВыбораПрочтено = Элементы.ОтборПрочтено.СписокВыбора;
	СписокВыбораПрочтено.Очистить();
	СписокВыбораПрочтено.Добавить(Ложь, "Нет");
	СписокВыбораПрочтено.Добавить(Истина, "Да");
	
	// Подготовка списка выбора для Флага
	СписокВыбораФлаги = Элементы.ОтборФлаг.СписокВыбора;
	СписокВыбораФлаги.Очистить();
	
	Для каждого Флаг Из Метаданные.Перечисления.ФлагиОбъектов.ЗначенияПеречисления Цикл
		
		СписокВыбораФлаги.Добавить(
			Перечисления.ФлагиОбъектов[Флаг.Имя],,,
			БиблиотекаКартинок[Флаг.Имя + "Флаг"]);
		
	КонецЦикла;
	
	СписокВыбораФлаги.Добавить(
		Перечисления.ФлагиОбъектов.ПустаяСсылка(), НСтр("ru = 'Любой флаг'"),,
		БиблиотекаКартинок.ПустойФлаг);
	
	СписокВыбораФлаги.Добавить(
		Ложь, НСтр("ru = 'Без флага'"),,
		БиблиотекаКартинок.ПустойФлаг);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСпискаКлиент()
	
	УстановитьОтборСпискаСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаСервер()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Адресаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Прочтено");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "ФлагПоиск");
	ОтключитьИспользованиеПараметраОтбора(Список.Параметры, "ЛюбойФлаг");
	ОтключитьИспользованиеПараметраОтбора(Список.Параметры, "БезФлага");
	
	Если Не ОтборВключен Тогда
		Возврат;
	КонецЕсли;
	
	// Установим значение отбора по адресату.
	Если ЗначениеЗаполнено(ОтборАдресат) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				"Адресаты",
				ВидСравненияКомпоновкиДанных.Содержит,
				ОтборАдресат);
		
	КонецЕсли;
	
	
	// Установим значение отбора по прочтению.
	Если ТипЗнч(ОтборПрочтено) = Тип("Булево") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				"Прочтено",
				ВидСравненияКомпоновкиДанных.Равно,
				ОтборПрочтено);
		
	КонецЕсли;
	
	// Установим значение отбора по флагу.
	Если ОтборФлаг = Ложь Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра("БезФлага", Истина);
		
	ИначеЕсли ТипЗнч(ОтборФлаг) = Тип("ПеречислениеСсылка.ФлагиОбъектов") Тогда
		
		Если ОтборФлаг = Перечисления.ФлагиОбъектов.ПустаяСсылка() Тогда
			
			Список.Параметры.УстановитьЗначениеПараметра("ЛюбойФлаг", Истина);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				"ФлагПоиск",
				ВидСравненияКомпоновкиДанных.Равно,
				ОтборФлаг);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьИспользованиеПараметраОтбора(Параметры, ИмяПараметра)
	
	ПараметрФлаг = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрФлаг <> Неопределено Тогда
		ПараметрФлаг.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
