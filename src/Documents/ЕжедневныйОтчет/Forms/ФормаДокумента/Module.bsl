
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
			Объект.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = КонецДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СпособУказанияВремени) Тогда 
			Объект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		КонецЕсли;
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		
		УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
		
		Элементы.ФормаПоказатьВСписке.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		ЗаполнитьРаботыПриКопировании(Параметры.ЗначениеКопирования.Дата);
	Иначе	
		ЗаполнитьРаботыТекущегоДня();
	КонецЕсли;	
	
	ОбновитьФондРабочегоВремени();
	
	Если Объект.Пользователь = ПользователиКлиентСервер.ТекущийПользователь() Тогда 
		Элементы.Пользователь.Видимость = Ложь;
	КонецЕсли;
	
	ОсновнойВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
	ОсновнойПроект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	// установка видимости полей
	УстановитьВидимость();
	
	// формирование заголовка формы
	СформироватьЗаголовокФормы();
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаМиниАнкета");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		Если ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда 
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		КонецЕсли;
	КонецЕсли;	
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляЗаполнения(), ЭтаФорма.ИмяФормы);
	
	НачальнаяДата = НачалоДня(Объект.Дата);
	НачальныйПользователь = Объект.Пользователь;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ЗаполнитьОтсутствие();
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	МК_НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбновитьЗаполночь();
	РассчитатьДлительностьСтрок();
	РассчитатьПродолжительностьДня(); 	// обновление реквизита продолжительность
	ОбновитьПодвал();					// вывод итогов в подвал
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если (ИсточникВыбора.ИмяФормы = "РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаПодбораРабот") 
	   И (ТипЗнч(РезультатВыбора) = Тип("Структура")) Тогда
		
		Строка = Работы.Добавить();
		ОбработкаВыбораРаботы(РезультатВыбора, Строка);
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПроектаЗадачи"
		И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда 
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = РезультатВыбора;
		
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоПодразделениеПользователя" И Параметр = Объект.Пользователь Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Отсутствие" Тогда
		ЗаполнитьОтсутствие();
		ОбновитьФондРабочегоВремени();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОчиститьСообщения();

	// заполнение длительности на основе строкового поля
	Если Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.Длительность") Тогда
		Для Каждого Строка Из Работы Цикл
			Строка.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
		КонецЦикла;
	КонецЕсли;
	ОбновитьЗаполночь();
	ОбновитьПодвал();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Работы", Работы.Выгрузить());
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	СформироватьЗаголовокФормы();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	Элементы.ФормаПоказатьВСписке.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Дата", Объект.Дата);
		
	Оповестить("ИзмененЕжедневныйОтчет", ПараметрыОповещения, ЭтаФорма);	
	
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Работы Цикл
		ИндексСтроки = Работы.Индекс(Строка);
		
		Если Не ЗначениеЗаполнено(Строка.Работа) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Содержание работ"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Работа",,Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ВидРабот) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Вид работ"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ВидРабот",,Отказ);
		КонецЕсли;
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
			Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
			Если Не ЗначениеЗаполнено(Длительность) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Время"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ДлительностьСтр",,Отказ);
			КонецЕсли;	
		Иначе
			Если Не ЗначениеЗаполнено(Строка.Начало) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Начало работ"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Начало",,Отказ);
			КонецЕсли;	
				
			Если Не ЗначениеЗаполнено(Строка.Окончание) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Окончание работ"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Окончание",,Отказ);
			КонецЕсли;	
				
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		
		// Проверка пересекающихся интервалов
		Для Инд1 = 0 По Работы.Количество()-2 Цикл
			Строка1 = Работы[Инд1];
			
			Для Инд2 = Инд1+1 По Работы.Количество()-1 Цикл
				Строка2 = Работы[Инд2];
				
				Если (Строка2.Начало >= Строка1.Начало 
					И Строка2.Начало < Строка1.Окончание 
					И Строка2.НачалоЗаполночь = Строка1.НачалоЗаполночь)
					Или (Строка2.Окончание > Строка1.Начало 
						И Строка2.Окончание <= Строка1.Окончание
						И Строка2.НачалоЗаполночь = Строка1.НачалоЗаполночь) Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Найдены пересекающиеся интервалы времени в строках %1 и %2 списка ""Работы"".'"),
						Инд1+1,
						Инд2+1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
						"Работы",,Отказ);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Для каждого Строка Из Работы Цикл
			Если Не ЗначениеЗаполнено(Строка.ПроектЗадача) Тогда 
				Продолжить;
			КонецЕсли;
			
			ИндексСтроки = Работы.Индекс(Строка);
			ТекстСообщения = "";
			РезультатПроверки = РаботаСПроектами.ПроверитьЗаписьОФактическихТрудозатратах(
				Строка.Проект,
				Строка.ПроектнаяЗадача,
				Строка.Источник,
				Объект.Пользователь,
				ТекстСообщения);
			Если Не РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Работы[" + ИндексСтроки + "].ПроектЗадача",, 
					Отказ);	
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоДняПриИзменении(Элемент)
	
	Объект.НачалоДня = Объект.НачалоДня - Секунда(Объект.НачалоДня);
	РассчитатьПродолжительностьДня();
	ОбновитьЗаполночь();
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзменении(Элемент)

	Объект.ОкончаниеДня = Объект.ОкончаниеДня - Секунда(Объект.ОкончаниеДня);

    РассчитатьДлительностьСтрок();
	РассчитатьПродолжительностьДня();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) <> НачальнаяДата Тогда 
		ПриИзмененииДаты();
		НачальнаяДата = НачалоДня(Объект.Дата);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	
	Если Объект.Пользователь <> НачальныйПользователь Тогда
		
		ПользовательПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.Начало = ТекущиеДанные.Начало - Секунда(ТекущиеДанные.Начало);
	
	ТекущиеДанные.НачалоЗаполночь = Объект.НачалоДня > ТекущиеДанные.Начало;
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

	Если ТекущиеДанные.Начало > ТекущиеДанные.Окончание И ЗначениеЗаполнено(ТекущиеДанные.Окончание) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Время начала работы больше, чем время окончания'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
    ТекущиеДанные.Окончание = ТекущиеДанные.Окончание - Секунда(ТекущиеДанные.Окончание);
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если Не УчетВремениКлиентСервер.ПроверитьФормат(ТекущиеДанные.ДлительностьСтр) Тогда
		ТекущиеДанные.ДлительностьСтр = "";
	КонецЕсли;
	ТекущиеДанные.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(ТекущиеДанные.ДлительностьСтр);
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(ЭтаФорма, ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
			
		ТекущиеДанные.ПроектЗадача = ПроектЗадача;
		
		ВыбранноеЗначение = ПроектЗадача;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Проект = Неопределено;
	ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПроектЗадача) Тогда 
		ТекущиеДанные.Проект = Неопределено;
		ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
			ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ВыбранноеЗначение.Проект, 
				ВыбранноеЗначение.ПроектнаяЗадача,
				ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРаботы(РезультатВыбора, Строка)

	Строка.Работа 	= РезультатВыбора.Работа; 
	Строка.ВидРабот = РезультатВыбора.ВидРабот;
	ПриИзмененииВидаРабот(Строка);
	Строка.Проект = РезультатВыбора.Проект;
	Строка.ПроектнаяЗадача = РезультатВыбора.ПроектнаяЗадача;
	Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		
	Если ТипЗнч(РезультатВыбора.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
		Строка.Источник = Неопределено;
	Иначе	
		Строка.Источник = РезультатВыбора.Источник;
	КонецЕсли;
		
	Если Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала")
		И Не ЗначениеЗаполнено(Строка.Начало) Тогда 
		// заполняем начало работы текущим временем
		ТекущаяДата   = ТекущаяДата();
		Строка.Начало = ТекущаяДата - Секунда(ТекущаяДата);
			
		РассчитатьДлительностьСтрок();
	КонецЕсли;
	ОбновитьПодвал();

	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегулирование(Элемент, Направление, СтандартнаяОбработка)
		
#Если МобильныйКлиент Тогда
	СтандартнаяОбработка = Ложь;
	НачалоДняОтчета = НачалоДня(Объект.Дата);
	Объект.Дата = ?(Направление > 0, НачалоДняОтчета+ 24*3600, НачалоДняОтчета -24*3600);
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботы

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 	
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;    	
		Если Не Копирование Тогда 
			ТекущиеДанные.ВидРабот = ОсновнойВидРабот;
			ПриИзмененииВидаРабот(ТекущиеДанные);
			ТекущиеДанные.Проект = ОсновнойПроект;
			ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ТекущиеДанные.Проект, 
				ТекущиеДанные.ПроектнаяЗадача);
		КонецЕсли;
		
		
		Если Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала") Тогда 
			Строка = Работы.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
			Индекс = Работы.Индекс(Строка);
			Если Индекс > 0 Тогда 
				ТекущиеДанные.Начало = Работы[Индекс-1].Окончание;
			Иначе
				ТекущиеДанные.Начало = Объект.НачалоДня;
			КонецЕсли;
			ТекущиеДанные.НачалоЗаполночь = ТекущиеДанные.Начало < Объект.НачалоДня;
				
			РассчитатьДлительностьСтрок();
		КонецЕсли;
		
		ОбновитьПодвал();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Изменена = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Параметры.Ключ.Пустая() Или ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МП_ИзмененияВызовСервера.ЗафиксироватьУдалениеЗаписиОТрудозатрате(Объект.Пользователь, Объект.Дата, 
		ТекущиеДанные.НомерДобавленияИсходный);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		Строка = Элементы.Работы.ТекущиеДанные;
		ОбработкаВыбораРаботы(ВыбранноеЗначение, Строка);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Работа;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Пользователь);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Пользователь);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	
	ПриИзмененииВидаРабот(Элементы.Работы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	
	Если Модифицированность И Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Ссылка);
	
	Если ТекущийПользователь <> Объект.Пользователь Тогда 
		Форма = ПолучитьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаСписка",
			ПараметрыФормы);
	Иначе 
		Форма = ПолучитьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаСвоиОтчеты",
			ПараметрыФормы);
	КонецЕсли;
	
	Форма.Открыть();
	Форма.ВыполнитьПереход(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
		
		Элементы.Начало.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
		Элементы.ДлительностьСтр.Видимость = Истина;
		
	ИначеЕсли Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		
		Элементы.Начало.Видимость = Истина;
		Элементы.Окончание.Видимость = Истина;
		Элементы.ДлительностьСтр.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьПродолжительностьДня()
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) 
		Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПродолжительностьДня = "";
	ИначеЕсли Объект.НачалоДня > Объект.ОкончаниеДня Тогда 
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(
			Объект.ОкончаниеДня - Объект.НачалоДня + 86400);
	Иначе
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(
			Объект.ОкончаниеДня - Объект.НачалоДня);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПодвал()
	
	// вывод строки Всего за день
	ДлительностьРабочегоВремениСек = 0;
	ДлительностьРаботСек = 0;
	Для Каждого Строка Из Работы Цикл
		ДлительностьРаботСек = ДлительностьРаботСек + Строка.Длительность;
		ДлительностьРабочегоВремениСек = ДлительностьРабочегоВремениСек + 
			?(Строка.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее"),
				Строка.Длительность,
				0);
	КонецЦикла;
	ПроцентФонда = ?(ФондРабочегоВремени = 0, 0,
		100 * ДлительностьРабочегоВремениСек / ФондРабочегоВремени);
	ДлительностьРабот = СтрШаблон(НСтр("ru = 'Всего: %1, в т.ч. рабочее: %2 (%3)'"),
		УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек, "0"),
		УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРабочегоВремениСек, "0"),
		Формат(ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");
	
	// Вывод строки Превышено \ Осталось.
	ПродолжительностьДняСек = ?(Объект.ОкончаниеДня - Объект.НачалоДня >= 0,
		Объект.ОкончаниеДня - Объект.НачалоДня,
		Объект.ОкончаниеДня - Объект.НачалоДня + 86400);
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		СообщениеОшибки = "";
		
	ИначеЕсли ДлительностьРаботСек > ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(превышено на %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек - ПродолжительностьДняСек));
		
	ИначеЕсли ДлительностьРаботСек < ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(осталось %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ПродолжительностьДняСек - ДлительностьРаботСек));
		
	Иначе
		СообщениеОшибки = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаполночь()
	
	Для Каждого Строка Из Работы Цикл
		Строка.НачалоЗаполночь = Строка.Начало < Объект.НачалоДня;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
    Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Ежедневный отчет (создание)'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Ежедневный отчет за'") + " " + Формат(Объект.Дата, "ДЛФ=D");
	КонецЕсли;
	
	Элементы.НачалоДня.Заголовок = ТРег(Формат(Объект.Дата, "ДФ=дддд"));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительностьСтрок()
	
	// заполнение поля длительность
	Если (Объект.СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.ВремяНачала"))
		И (Работы.Количество() > 0) Тогда
		
		Работы.Сортировать("НачалоЗаполночь, Начало");

		Для Каждого Строка Из Работы Цикл
			Если Строка.Окончание >= Строка.Начало Тогда 
				Строка.Длительность = Строка.Окончание - Строка.Начало;
			Иначе
				Строка.Длительность = Строка.Окончание - Строка.Начало + 86400;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьРаботыВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Работы.Выгрузить(,"Работа"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	Для Каждого Строка Из Работы Цикл
		НоваяСтрока = СписокСохраняемыхПолей.Добавить();
		НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
		НоваяСтрока.ЗначениеРеквизита = Строка.ВидРабот;
	КонецЦикла;
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

&НаСервере
Функция ЭлементыДляЗаполнения()
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	НоваяСтрока = СписокСохраняемыхПолей.Добавить();
	НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = Объект.Дата Тогда 
		Объект.Дата = Объект.Дата + 1;
	КонецЕсли;
	СформироватьЗаголовокФормы();
	УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
	
	ЗаполнитьРаботыПриСменеДаты();
	ЗаполнитьОтсутствие();
	ОбновитьФондРабочегоВремени();
	
КонецПроцедуры	

// показывает в табличной части работы за текущий день
&НаСервере
Процедура ЗаполнитьРаботыТекущегоДня(ОчищатьРаботы = Истина)
	
	Если ОчищатьРаботы Тогда 
		Работы.Очистить();
	КонецЕсли;
	
	Результат = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(Объект.Дата, Объект.Пользователь);
	
	Для Каждого Строка Из Результат Цикл
		Если ЗначениеЗаполнено(Строка.ЕжедневныйОтчет) 
		   И Строка.ЕжедневныйОтчет <> Объект.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРабот, "ВидВремени");
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		НоваяСтрока.ДатаДобавления = Строка.ДатаДобавления;
		НоваяСтрока.Источник = Строка.Источник;
		НоваяСтрока.НомерДобавленияИсходный = Строка.НомерДобавленияИсходный;
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = ?(ЗначениеЗаполнено(Строка.Окончание),
				Строка.Окончание,
				Строка.ДатаДобавления);
			НоваяСтрока.Длительность = Строка.Длительность;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Начало)
				И ЗначениеЗаполнено(НоваяСтрока.Окончание) Тогда
				НоваяСтрока.Начало = НоваяСтрока.Окончание - НоваяСтрока.Длительность;
			КонецЕсли;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры	

// заполняет работы при изменении даты
&НаСервере
Процедура ЗаполнитьРаботыПриСменеДаты()
	
	КоличествоСтрок = Работы.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = Работы[КоличествоСтрок - Инд];
		Если ЗначениеЗаполнено(Строка.Источник) И ТипЗнч(Строка.Источник) <> Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
			Работы.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаполнитьРаботыТекущегоДня(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРаботыПриКопировании(ДатаКопирования)
	
	Работы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеТрудозатраты.Подразделение,
	|	ФактическиеТрудозатраты.Пользователь,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления,
	|	ФактическиеТрудозатраты.Начало,
	|	ФактическиеТрудозатраты.Окончание,
	|	ФактическиеТрудозатраты.Длительность,
	|	ФактическиеТрудозатраты.ЕжедневныйОтчет,
	|	ФактическиеТрудозатраты.ОписаниеРаботы
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|	И ФактическиеТрудозатраты.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаКопирования);
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРабот, "ВидВремени");
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		НоваяСтрока.ДатаДобавления = '00010101';
		
		Если ТипЗнч(Строка.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
			НоваяСтрока.Источник = Неопределено;
		Иначе	
			НоваяСтрока.Источник = Строка.Источник;
		КонецЕсли;	
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = Строка.Окончание;
			НоваяСтрока.Длительность = Строка.Длительность;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;	
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПользовательПриИзмененииСервер()
	
	УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
	ЗаполнитьРаботыТекущегоДня();
	ЗаполнитьОтсутствие();
	ОбновитьФондРабочегоВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	Если Записать() Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подобрать()
	
	АдресВременногоХранилища = ПоместитьРаботыВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Пользователь", Объект.Пользователь);
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);

	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаПодбораРабот", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтсутствие()
	
	Отсутствие = Неопределено;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия")
		Или Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательМассивом = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Пользователь);
	НастройкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	НастройкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Ложь;
	ТаблицаОтсутствий = Отсутствия.ПолучитьТаблицуОтсутствий(НачалоДня(Объект.Дата),
		КонецДня(Объект.Дата),
		ПользовательМассивом,
		НастройкиОтсутствий);
	Если ТаблицаОтсутствий.Количество() > 0 Тогда
		Отсутствие = ТаблицаОтсутствий[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаРабот(Работа)
	
	Если Работа <> Неопределено Тогда
		Работа.ВидВремени = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Работа.ВидРабот, "ВидВремени");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФондРабочегоВремени()
	ФондТаблицей = УчетВремени.ФондРабочегоВремени(Объект.Пользователь, НачалоДня(Объект.Дата), КонецДня(Объект.Дата));
	ФондРабочегоВремени = ФондТаблицей.Итог("Длительность");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 85, 115);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНеТелефон = МК_ПовтИсп.ЭтоНеТелефон();
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.КнопкаЗаписатьиЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	Элементы.КнопкаЗаписатьиЗакрыть.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	
	Элементы.ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.МК_ГруппаШапкаДатаПериод.Видимость = Истина;
	Элементы.Переместить(Элементы.Дата, Элементы.МК_ГруппаШапкаДатаПериод);
	Элементы.Переместить(Элементы.ПериодРабочегоДня, Элементы.МК_ГруппаШапкаДатаПериод);
	
	МК_ВыровнятьЭлементФормы(Элементы.Дата);
	МК_ВыровнятьЭлементФормы(Элементы.НачалоДня);
	МК_ВыровнятьЭлементФормы(Элементы.ПродолжительностьДня);
	МК_ВыровнятьЭлементФормы(Элементы.Пользователь);
	МК_ВыровнятьЭлементФормы(Элементы.Отсутствие);
	
	Элементы.Пользователь.Высота = 1;
	
	Элементы.Работа.Ширина = 40;
	Элементы.Работа.РастягиватьПоГоризонтали = Истина;
	
	Если Элементы.Пользователь.Видимость Тогда
		Элементы.Пользователь.Заголовок = НСтр("ru = 'Пользователь'");
		Элементы.Пользователь.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отсутствие) Тогда
		Элементы.Отсутствие.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Дата.КнопкаРегулирования = Ложь;
	
	Элементы.Работы.Шапка = Ложь;
	Элементы.МК_ГруппаКолонок.Видимость = Истина;
	Элементы.Переместить(Элементы.Работа, Элементы.ГруппаРаботаВид);
	Элементы.Переместить(Элементы.ВидРабот, Элементы.ГруппаРаботаВид);
	Элементы.Переместить(Элементы.Начало, Элементы.ГруппаНачалоОкончание);
	Элементы.Переместить(Элементы.Окончание, Элементы.ГруппаНачалоОкончание);
	
	Элементы.ВидРабот.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	Элементы.ВидРабот.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;
	
	Элементы.КнопкаПодобрать.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Элементы.МК_ДекорацияОтступПередПодвалом.Видимость = Истина;
	Элементы.ГруппаРаботыЗаДень.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Если ЭтоНеТелефон Тогда
		Элементы.ГруппаИнфо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.МК_ГруппаШапкаДатаПериод.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе 
		Элементы.ГруппаИнфо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.МК_ГруппаШапкаДатаПериод.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура МК_ВыровнятьЭлементФормы(Элемент)
	
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элемент.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
