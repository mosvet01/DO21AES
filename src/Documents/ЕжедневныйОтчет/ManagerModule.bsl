#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Пользователь";
	
КонецФункции
	
// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Пользователь, Истина);
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Пользователь, НСтр("ru = 'Пользователь'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
	КонецЕсли;
	
КонецПроцедуры

// Конец УправлениеДоступом

// Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ЕжедневныйОтчет";
	КомандаПечати.Идентификатор = "ЕжедневныйОтчет";
	КомандаПечати.Представление = НСтр("ru = 'Ежедневный отчет'");
	
КонецПроцедуры

// Процедура формирования печатной формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЕжедневныйОтчет") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ЕжедневныйОтчет",
			НСтр("ru = 'Ежедневный отчет'"),
			ПечатьЕжедневногоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),,
			"Документ.ЕжедневныйОтчет.ПФ_MXL_ЕжедневныйОтчет");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму.
//
Функция ПечатьЕжедневногоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЕжедневныйОтчет";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	
	// Получение областей макета.
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЕжедневныйОтчет.ПФ_MXL_ЕжедневныйОтчет");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект,
			"Дата, Пользователь, СпособУказанияВремени");
		
		ОбластьШапка.Параметры.Сотрудник = РеквизитыОбъекта.Пользователь;
		ОбластьШапка.Параметры.Дата = Формат(РеквизитыОбъекта.Дата, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Работы = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(РеквизитыОбъекта.Дата, РеквизитыОбъекта.Пользователь);
		
		Если РеквизитыОбъекта.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			Работы.Сортировать("Начало");
		Иначе
			Работы.Сортировать("ДатаДобавления");
		КонецЕсли;
		
		ДлительностьРаботСек = 0;
		
		Для Каждого Работа Из Работы Цикл
			
			Если ЗначениеЗаполнено(Работа.ЕжедневныйОтчет) 
			   И Работа.ЕжедневныйОтчет <> Объект Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Работа = Работа.ОписаниеРаботы;
			ОбластьСтрока.Параметры.Длительность = 
				УчетВремениКлиентСервер.ЧислоВСтроку(Работа.Длительность);
			ОбластьСтрока.Параметры.ВидРабот = Работа.ВидРабот;
			ОбластьСтрока.Параметры.ПроектЗадача = 
				РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Работа.Проект, Работа.ПроектнаяЗадача);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ДлительностьРаботСек = ДлительностьРаботСек + Работа.Длительность;
			
		КонецЦикла;
	
		ОбластьПодвал.Параметры.ВсегоЗаДень = 
			НСтр("ru = 'Всего за день'") + " " + 
			УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек, "0");
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Конец Печать

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

Процедура ЗаполнитьРеквизитДлительностьРабочая(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРабот.Ссылка КАК ВидРабот
		|ПОМЕСТИТЬ ВидыРабот
		|ИЗ
		|	Справочник.ВидыРабот КАК ВидыРабот
		|ГДЕ
		|	ВидыРабот.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.Рабочее)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРабот.ВидРабот КАК ВидРабот
		|ИЗ
		|	ВидыРабот КАК ВидыРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактическиеТрудозатраты КАК РаботыДокументов
		|		ПО Документ.Ссылка = РаботыДокументов.ЕжедневныйОтчет
		|			И (РаботыДокументов.ВидРабот В
		|				(ВЫБРАТЬ
		|					ВидыРабот.ВидРабот
		|				ИЗ
		|					ВидыРабот))
		|			И (РаботыДокументов.Длительность <> 0)
		|ГДЕ
		|	Документ.ДлительностьРабочая = """"
		|	И НЕ РаботыДокументов.ЕжедневныйОтчет ЕСТЬ NULL");
	Результат = Запрос.ВыполнитьПакет();
	ВидыРабот = Результат[1].Выгрузить().ВыгрузитьКолонку("ВидРабот");
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("Документ.ЕжедневныйОтчет");
		Элемент.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			Работы = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(Документ.Дата, Документ.Пользователь);
			ДлительностьРабочегоВремениСек = 0;
			Для Каждого Работа Из Работы Цикл
				Если ЗначениеЗаполнено(Работа.ЕжедневныйОтчет) 
					И Работа.ЕжедневныйОтчет <> Выборка.Ссылка Тогда 
					Продолжить;
				КонецЕсли;
				Если ВидыРабот.Найти(Работа.ВидРабот) <> Неопределено Тогда
					ДлительностьРабочегоВремениСек = ДлительностьРабочегоВремениСек + Работа.Длительность;
				КонецЕсли;
			КонецЦикла;
			Документ.ДлительностьРабочая = УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРабочегоВремениСек, "0:00");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Документ);
			
			Движения = РегистрыНакопления.РабочееВремяПользователей.СоздатьНаборЗаписей();
			Движения.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Прочитать();
			
			Для Каждого Движение Из Движения Цикл
				Если ВидыРабот.Найти(Движение.ВидРабот) <> Неопределено Тогда
					Движение.ДлительностьРабочая = Движение.ДлительностьВсего;
				Иначе
					Движение.ДлительностьРабочая = 0;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Движения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли