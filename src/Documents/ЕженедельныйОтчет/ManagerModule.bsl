#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка,Пользователь";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Пользователь, Истина);
		
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Пользователь, НСтр("ru = 'Пользователь еженедельного отчета'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
	КонецЕсли;
	
КонецПроцедуры

// Конец УправлениеДоступом

// Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ЕженедельныйОтчет";
	КомандаПечати.Идентификатор = "ЕженедельныйОтчет";
	КомандаПечати.Представление = НСтр("ru = 'Еженедельный отчет'");
	
КонецПроцедуры

// Процедура формирования печатной формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЕженедельныйОтчет") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ЕженедельныйОтчет",
			НСтр("ru = 'Еженедельный отчет'"),
			ПечатьЕженедельногоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),,
			"Документ.ЕженедельныйОтчет.ПФ_MXL_ЕженедельныйОтчет");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму.
//
Функция ПечатьЕженедельногоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЕженедельныйОтчет";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	Политика = Константы.ПолитикаУчетаРабочегоВремени.Получить();
	
	// Получение областей макета.
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЕженедельныйОтчет.ПФ_MXL_ЕженедельныйОтчет");
	ОбластьШапкаОбщая = Макет.ПолучитьОбласть("ШапкаОбщая");
	ОбластьШапкаРаботы = Макет.ПолучитьОбласть("ШапкаРаботы");
	ОбластьСтрокаРаботы = Макет.ПолучитьОбласть("СтрокаРабота");
	ОбластьПодвалРаботы = Макет.ПолучитьОбласть("ПодвалРаботы");
	ОбластьПодвалОбщий = Макет.ПолучитьОбласть("ПодвалОбщий");
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект,
			"Дата, Пользователь, Достижения, Неудачи, Планы, Работы, ДниНедели");
		
		ОбластьШапкаОбщая.Параметры.Сотрудник = РеквизитыОбъекта.Пользователь;
		ДатаНачала = УчетВремениКлиентСервер.ДатаНачалаОтчетаЗаНеделю(РеквизитыОбъекта.Дата);
		ДатаОкончания = КонецДня(РеквизитыОбъекта.Дата);
		ОбластьШапкаОбщая.Параметры.ДатаНачала = Формат(ДатаНачала, "ДЛФ=D");
		ОбластьШапкаОбщая.Параметры.ДатаОкончания = Формат(ДатаОкончания, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьШапкаОбщая);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаРаботы);
		
		Работы = РеквизитыОбъекта.Работы.Выгрузить();
			
		Если Политика = Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеИЕженедельныеОтчеты Тогда
			
			Работы = РеквизитыОбъекта.Работы.Выгрузить();
			Работы.Очистить();
			ДниНедели = РеквизитыОбъекта.ДниНедели.Выгрузить();
			Для Каждого ДеньНедели Из ДниНедели Цикл
				РаботыЗаДень = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(ДеньНедели.Дата, РеквизитыОбъекта.Пользователь);
				Колонка = СоответствиеДнейНедели()[ДеньНедели.ДеньНедели];
				СтруктураПоиска = Новый Структура("Работа, ВидРабот, Проект, ПроектнаяЗадача");
				Для Каждого РаботаЗаДень Из РаботыЗаДень Цикл
					Если РаботаЗаДень.ЕжедневныйОтчет <> ДеньНедели.ЕжедневныйОтчет Тогда
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, РаботаЗаДень);
					СтруктураПоиска.Работа = РаботаЗаДень.ОписаниеРаботы;
					НайденныеСтроки = Работы.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Работа = Работы.Добавить();
						ЗаполнитьЗначенияСвойств(Работа, СтруктураПоиска);
					Иначе
						Работа = НайденныеСтроки[0];
					КонецЕсли;
					Работа[Колонка] = УчетВремениКлиентСервер.ПолучитьДату(РаботаЗаДень.Длительность);
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	
		Длительность = Новый Соответствие;
		ДлительностьРабочегоВремени = Новый Соответствие;
		СоответствиеДнейНедели = СоответствиеДнейНедели();
		ДлительностьМин = 0;
		ДлительностьРабочегоВремениМин = 0;
		
		Для Каждого КлючИЗначение Из СоответствиеДнейНедели() Цикл
			Длительность[КлючИЗначение.Значение] = 0;
			ДлительностьРабочегоВремени[КлючИЗначение.Значение] = 0;
		КонецЦикла;
		
		ДниНедели = Новый Структура("Пн, Вт, Ср, Чт,Пт, Сб, Вс");
		
		Для Каждого Работа Из Работы Цикл
			
			ОбластьСтрокаРаботы.Параметры.Работа = Работа.Работа;
			
			ОбластьСтрокаРаботы.Параметры.Сб = Формат(Работа.Сб, "ДФ=ЧЧ:мм");
			ОбластьСтрокаРаботы.Параметры.Вс = Формат(Работа.Вс, "ДФ=ЧЧ:мм");
			ОбластьСтрокаРаботы.Параметры.Пн = Формат(Работа.Пн, "ДФ=ЧЧ:мм");
			ОбластьСтрокаРаботы.Параметры.Вт = Формат(Работа.Вт, "ДФ=ЧЧ:мм");
			ОбластьСтрокаРаботы.Параметры.Ср = Формат(Работа.Ср, "ДФ=ЧЧ:мм");
			ОбластьСтрокаРаботы.Параметры.Чт = Формат(Работа.Чт, "ДФ=ЧЧ:мм");
			ОбластьСтрокаРаботы.Параметры.Пт = Формат(Работа.Пт, "ДФ=ЧЧ:мм");
			
			Итого = 0;
			Для Каждого Эл Из ДниНедели Цикл
				Если ЗначениеЗаполнено(Работа[Эл.Ключ]) Тогда
					Итого = Итого + Час(Работа[Эл.Ключ])*60 + Минута(Работа[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Час = Цел(Итого / 60);
			Мин = (Итого - Час*60);
			ОбластьСтрокаРаботы.Параметры.Итого = 
				Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ":" + Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
				
			ОбластьСтрокаРаботы.Параметры.ВидРабот = Работа.ВидРабот;
			ОбластьСтрокаРаботы.Параметры.ПредставлениеПроектаЗадачи = 
				РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Работа.Проект, Работа.ПроектнаяЗадача);
			ТабличныйДокумент.Вывести(ОбластьСтрокаРаботы);
			
			Для Каждого КлючИЗначение Из СоответствиеДнейНедели() Цикл
				Если Не ЗначениеЗаполнено(Работа[КлючИЗначение.Значение]) Тогда
					Продолжить;
				КонецЕсли;
				ДлительностьВДне = Час(Работа[КлючИЗначение.Значение]) * 60 + Минута(Работа[КлючИЗначение.Значение]);
				Длительность[КлючИЗначение.Значение] = Длительность[КлючИЗначение.Значение] + ДлительностьВДне;
				ДлительностьМин = ДлительностьМин + ДлительностьВДне;
				ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Работа.ВидРабот, "ВидВремени");
				Если ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее") Тогда
					ДлительностьРабочегоВремени[КлючИЗначение.Значение] = ДлительностьРабочегоВремени[КлючИЗначение.Значение] + ДлительностьВДне;
					ДлительностьРабочегоВремениМин = ДлительностьРабочегоВремениМин + ДлительностьВДне;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ОбластьПодвалРаботы.Параметры.ВсегоЗаНеделю = СтрШаблон(НСтр("ru = 'Всего за неделю: %1. Рабочее время: %2'"), 
			УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьМин), 
			УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьРабочегоВремениМин));
		ТабличныйДокумент.Вывести(ОбластьПодвалРаботы);
		
		ОбластьПодвалОбщий.Параметры.Достижения = РеквизитыОбъекта.Достижения;
		ОбластьПодвалОбщий.Параметры.Неудачи = РеквизитыОбъекта.Неудачи;
		ОбластьПодвалОбщий.Параметры.Планы = РеквизитыОбъекта.Планы;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалОбщий);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Конец Печать

Процедура ЗаполнитьРеквизитДлительностьРабочая(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	// Ежедневные отчеты, при их наличии, должны быть обработаны до еженедельных.
	Документы.ЕжедневныйОтчет.ЗаполнитьРеквизитДлительностьРабочая(Параметры);
	Если Не Параметры.ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРабот.Ссылка КАК ВидРабот
		|ПОМЕСТИТЬ ВидыРабот
		|ИЗ
		|	Справочник.ВидыРабот КАК ВидыРабот
		|ГДЕ
		|	ВидыРабот.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.Рабочее)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРабот.ВидРабот КАК ВидРабот
		|ИЗ
		|	ВидыРабот КАК ВидыРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЕженедельныйОтчет КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЕженедельныйОтчет.Работы КАК РаботыДокументов
		|		ПО Документ.Ссылка = РаботыДокументов.Ссылка
		|			И (РаботыДокументов.ВидРабот В
		|				(ВЫБРАТЬ
		|					ВидыРабот.ВидРабот
		|				ИЗ
		|					ВидыРабот))
		|			И (РаботыДокументов.Сб <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ РаботыДокументов.Вс <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ РаботыДокументов.Пн <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ РаботыДокументов.Вт <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ РаботыДокументов.Ср <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ РаботыДокументов.Чт <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ РаботыДокументов.Пт <> ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	Документ.ДлительностьРабочая = """"
		|	И НЕ РаботыДокументов.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Документ.Ссылка
		|ИЗ
		|	Документ.ЕженедельныйОтчет КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЕженедельныйОтчет.ДниНедели КАК ДниНеделиЕженедельных
		|		ПО Документ.Ссылка = ДниНеделиЕженедельных.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЕжедневныйОтчет КАК ЕжедневныеОтчетыПоДням
		|		ПО (ЕжедневныеОтчетыПоДням.Ссылка = ДниНеделиЕженедельных.Ссылка)
		|			И (ЕжедневныеОтчетыПоДням.ДлительностьРабочая <> """")
		|ГДЕ
		|	Документ.ДлительностьРабочая = ""     ""
		|	И НЕ ЕжедневныеОтчетыПоДням.Ссылка ЕСТЬ NULL");
	Результат = Запрос.ВыполнитьПакет();
	ВидыРабот = Результат[1].Выгрузить().ВыгрузитьКолонку("ВидРабот");
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("Документ.ЕженедельныйОтчет");
		Элемент.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			ДлительностьРабочегоВремениМин = 0;
			Если Документ.Работы.Количество() <> 0 Тогда
				СоответствиеДнейНедели = СоответствиеДнейНедели();
				Для Каждого Строка Из Документ.Работы Цикл
					Для Каждого КлючИЗначение Из СоответствиеДнейНедели() Цикл
						ДлительностьВДне = Час(Строка[КлючИЗначение.Значение]) * 60 + Минута(Строка[КлючИЗначение.Значение]);
						Если ВидыРабот.Найти(Строка.ВидРабот) <> Неопределено Тогда
							ДлительностьРабочегоВремениМин = ДлительностьРабочегоВремениМин + ДлительностьВДне;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Для Каждого Строка Из Документ.ДниНедели Цикл
					РазделеннаяДлительность = СтрРазделить(Строка.ДлительностьРабочая, ":");
					Если РазделеннаяДлительность.Количество() = 2 Тогда
						ДлительностьРабочегоВремениМин = ДлительностьРабочегоВремениМин 
							+ Число(РазделеннаяДлительность[0]) * 60
							+ Число(РазделеннаяДлительность[1]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Документ.ДлительностьРабочая = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьРабочегоВремениМин);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Документ);
			
			Движения = РегистрыНакопления.РабочееВремяПользователей.СоздатьНаборЗаписей();
			Движения.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Прочитать();
			
			Для Каждого Движение Из Движения Цикл
				Если ВидыРабот.Найти(Движение.ВидРабот) <> Неопределено Тогда
					Движение.ДлительностьРабочая = Движение.ДлительностьВсего;
				Иначе
					Движение.ДлительностьРабочая = 0;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Движения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоответствиеДнейНедели()

	Соответствие = Новый Соответствие;
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Суббота")] = "Сб";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Воскресенье")] = "Вс";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Понедельник")] = "Пн";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Вторник")] = "Вт";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Среда")] = "Ср";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Четверг")] = "Чт";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Пятница")] = "Пт";
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#КонецЕсли
