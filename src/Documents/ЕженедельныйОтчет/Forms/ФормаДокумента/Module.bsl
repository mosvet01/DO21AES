#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	НастройкиУчетаВремени = УчетВремени.ПолучитьПерсональныеНастройкиУчетаВремениСервер();
	ПолитикаУчета = Константы.ПолитикаУчетаРабочегоВремени.Получить();
		
	ДатаНачала = УчетВремениКлиентСервер.ДатаНачалаОтчетаЗаНеделю(Объект.Дата);
	ЗаполнитьВидыВремени();
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
			Объект.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = КонецДня(ТекущаяДатаСеанса());
		КонецЕсли;
		ДатаНачала = УчетВремениКлиентСервер.ДатаНачалаОтчетаЗаНеделю(Объект.Дата);
		
		ЗаполнитьДниНеделиСервер();
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			ЗаполнитьПоФактическимТрудозатратам();
			ЗаполнитьПоЕжедневнымОтчетам();
		КонецЕсли;
		
		ОбновитьФондРабочегоВремени();
	
	КонецЕсли;
	
	Если ПолитикаУчета = Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕженедельныеОтчеты Тогда
		Элементы.ГруппаРаботы.Видимость = Истина;
		Элементы.ЕжедневныйОтчет.Видимость = Ложь;
		Элементы.ДлительностьРабот.Видимость = Ложь;
		Элементы.ДлительностьРабочая.Видимость = Ложь;
		Элементы.ДлительностьНеделиСогласноЕжедневнымОтчетам.Видимость = Ложь;
		Элементы.ДлительностьНеделиСогласноРаботам.Видимость = Истина;
	Иначе // ежедневные и еженедельные
		Элементы.ГруппаРаботы.Видимость = Ложь;
		Элементы.ЕжедневныйОтчет.Видимость = Истина;
		Элементы.ДлительностьРабот.Видимость = Истина;
		Элементы.ДлительностьРабочая.Видимость = Истина;
		Элементы.НачалоДня.ТолькоПросмотр = Истина;
		Элементы.ОкончаниеДня.ТолькоПросмотр = Истина;
		Элементы.ДлительностьНеделиСогласноЕжедневнымОтчетам.Видимость = Истина;
		Элементы.ДлительностьНеделиСогласноРаботам.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Пользователь = ПользователиКлиентСервер.ТекущийПользователь() Тогда 
		Элементы.Пользователь.Видимость = Ложь;
	КонецЕсли;
	
	ОсновнойПроект = УчетВремени.ПолучитьОсновнойПроект();

	ЦветКрасный = Новый Цвет(255,0,0);
    ЦветЧерный  = Новый Цвет(0,0,0);

	Для Каждого Строка Из Объект.Работы Цикл
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		Строка.Итого = ИтогоПоСтроке(Строка);
		Строка.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ВидРабот, "ВидВремени");
	КонецЦикла;
	
	ОбновитьШапку();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	МК_НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьЗаголовокФормы();
	Если ПолитикаУчета = ПредопределенноеЗначение("Перечисление.ПолитикиУчетаРабочегоВремени.ИспользоватьЕженедельныеОтчеты") Тогда
		ОбновитьДлительностьНеделиСогласноРаботам();
	Иначе
		ОбновитьДлительностьНеделиПоЕжедневнымОтчетам();
	КонецЕсли;
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоПодразделениеПользователя" И Параметр = Объект.Пользователь Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписаныПерсональныеНастройкиУчетаВремени" Тогда
		ОсновнойПроект = УчетВремени.ПолучитьОсновнойПроект();
	КонецЕсли;

	Если ИмяСобытия = "ИзмененЕжедневныйОтчет"  Тогда 
		ЗаполнитьПоЕжедневнымОтчетам();
		ОбновитьДлительностьНеделиПоЕжедневнымОтчетам();
		ОбновитьФондРабочегоВремени();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Отсутствие"  Тогда 
		ОбновитьОтсутствия();
		ОбновитьФондРабочегоВремени();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРаботы(РезультатВыбора, Строка)

	Строка.Работа = РезультатВыбора.Работа; 
	Строка.ВидРабот = РезультатВыбора.ВидРабот;
		
	Строка.Проект = РезультатВыбора.Проект;
	Строка.ПроектнаяЗадача = РезультатВыбора.ПроектнаяЗадача;
	Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	Строка.ВидВремени = ВидВремени(Строка.ВидРабот);
		
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаПодбораРабот"
	   И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		Если ИсточникВыбора.ЗакрыватьПриВыборе Тогда
			Строка = Элементы.Работы.ТекущиеДанные;
		Иначе
			Строка = Объект.Работы.Добавить();
		КонецЕсли;
		
		ОбработкаВыбораРаботы(РезультатВыбора, Строка);
		
	КонецЕсли;

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПроектаЗадачи"
		И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда 
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = РезультатВыбора;
		
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ТекущиеДанные.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ПолитикаУчета = ПредопределенноеЗначение("Перечисление.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеИЕженедельныеОтчеты") Тогда
		Объект.Работы.Очистить();
	КонецЕсли;
	ОчиститьСообщения();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));

	Если ЕстьДокументыПользователя() Тогда 
		ТекстСообщения = НСтр("ru = 'За указанный период еженедельный отчет уже введен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.Дата",, 
			Отказ);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Для каждого Строка Из Объект.Работы Цикл
			
			Если Не ЗначениеЗаполнено(Строка.ПроектЗадача) Тогда 
				Продолжить;
			КонецЕсли;
			
			ИндексСтроки = Объект.Работы.Индекс(Строка);
			ТекстСообщения = "";
			РезультатПроверки = РаботаСПроектами.ПроверитьЗаписьОФактическихТрудозатратах(
				Строка.Проект,
				Строка.ПроектнаяЗадача,
				Строка.Источник,
				Объект.Пользователь,
				ТекстСообщения);
				
			Если Не РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Объект.Работы[" + ИндексСтроки + "].ПроектЗадача",, 
					Отказ);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи()

	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Дата", Объект.Дата);
		
	Оповестить("ИзмененЕженедельныйОтчет", ПараметрыОповещения, ЭтаФорма);
	
	СформироватьЗаголовокФормы();
	#Если ВебКлиент Тогда
		ТекстСсылки = ПолучитьНавигационнуюСсылкуССервера();
	#Иначе
		ТекстСсылки = ПолучитьНавигационнуюСсылку(Объект.Ссылка);
	#КонецЕсли
	ПоказатьОповещениеПользователя("Запись документа", 
		ТекстСсылки, 
		СтрШаблон("Документ ""%1"" записан.", Строка(Объект.Ссылка)),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект")
		И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Работы Цикл
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.
			ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		Строка.Итого = ИтогоПоСтроке(Строка);
		Строка.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ВидРабот, "ВидВремени");
	КонецЦикла;
	
	ОбновитьДополнительныеСведенияПоДнямНедели(Объект, ПолитикаУчета);
	ОбновитьОтсутствия();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолитикаУчета = Константы.ПолитикаУчетаРабочегоВремени.Получить();
	
	Для Каждого Строка Из Объект.Работы Цикл
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.
			ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		Строка.Итого = ИтогоПоСтроке(Строка);
		Строка.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ВидРабот, "ВидВремени");
	КонецЦикла;
	
	ОбновитьДополнительныеСведенияПоДнямНедели(Объект, ПолитикаУчета);
	ОбновитьОтсутствия();
	ОбновитьФондРабочегоВремени();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодобратьРаботы()
	
	АдресВременногоХранилища = ПоместитьРаботыВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Пользователь", Объект.Пользователь);
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаПодбораРабот", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРаботыВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Работы.Выгрузить(,"Работа"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = КонецДня(Объект.Дата);
	
	ДатаНачала = УчетВремениКлиентСервер.ДатаНачалаОтчетаЗаНеделю(Объект.Дата);
	
	СформироватьЗаголовокФормы();

	ЗаполнитьДниНеделиСервер();
	ЗаполнитьПоЕжедневнымОтчетам();
	ОбновитьОтсутствия();
	ОбновитьШапку();

	ОбновитьФондРабочегоВремени();
	ОбновитьДлительностьНеделиСогласноРаботам();
	ОбновитьДлительностьНеделиПоЕжедневнымОтчетам();
		
	Если Объект.Работы.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ДатаПриИзмененииПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась дата отчета за неделю. Перезаполнить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт 

	Объект.Работы.Очистить();
	
	ЗаполнитьПоФактическимТрудозатратам();
	ЗаполнитьПоЕжедневнымОтчетам();
	Если ПолитикаУчета = ПредопределенноеЗначение("Перечисление.ПолитикиУчетаРабочегоВремени.ИспользоватьЕженедельныеОтчеты") Тогда
		ОбновитьДлительностьНеделиСогласноРаботам();
	Иначе
		ОбновитьДлительностьНеделиПоЕжедневнымОтчетам();
	КонецЕсли;

	Для Каждого Строка Из Объект.Работы Цикл
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.
			ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		Строка.Итого = ИтогоПоСтроке(Строка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ОбновитьОтсутствия();
	ОбновитьФондРабочегоВремени();
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока
		И Не Копирование Тогда 
    	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		ТекущиеДанные.Проект = ОсновнойПроект;
		ТекущиеДанные.ПроектЗадача = РаботасПроектамиКлиентСервер.
			ПредставлениеПроектаЗадачи(ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьДлительностьНеделиСогласноРаботам();

КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)

	ОбновитьДлительностьНеделиСогласноРаботам();

КонецПроцедуры

&НаКлиенте
Процедура ВидДняПриИзменении(Элемент)

	ОбновитьШапку();

	ТекущиеДанные = Элементы.ДниНедели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ВидДня <> ПредопределенноеЗначение("Перечисление.ВидыДней.Рабочий") Тогда 
		ИмяКолонки = СоответствиеДнейНедели()[ТекущиеДанные.ДеньНедели];
		ОбщаяДлительностьРабот = ИтогоПоКолонкеСек(ИмяКолонки, Объект.Работы);
		Если ОбщаяДлительностьРабот = 0 Тогда 
			ТекущиеДанные.НачалоДня = '00010101';
			ТекущиеДанные.ОкончаниеДня = '00010101';
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботы()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВыполнитьПродолжение", ЭтотОбъект);
	Если Объект.Работы.Количество() > 0 Тогда 
		ТекстВопроса = НСтр("ru = 'Отчет будет перезаполнен по фактическим трудозатратам. Заполнить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыполнитьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт 

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда	
		Объект.Работы.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоФактическимТрудозатратам();
	ОбновитьДлительностьНеделиСогласноРаботам();
		
	Для Каждого Строка Из Объект.Работы Цикл
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		Строка.Итого = ИтогоПоСтроке(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДниНедели()
	
	ЗаполнитьДниНеделиСервер();
	ЗаполнитьПоЕжедневнымОтчетам();
	ОбновитьДлительностьНеделиПоЕжедневнымОтчетам();
	ОбновитьОтсутствия();
	ОбновитьФондРабочегоВремени();

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(ЭтаФорма, ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		
		ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		
		ТекущиеДанные.ПроектЗадача = ПроектЗадача;
		
		ВыбранноеЗначение = ПроектЗадача;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Проект = Неопределено;
	ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
			ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
			ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ТекущиеДанные.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПроектЗадача) Тогда 
		ТекущиеДанные.Проект = Неопределено;
		ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ТекущиеДанные.Итого = ИтогоПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДниНедели Тогда 
		ОбновитьДополнительныеСведенияПоДнямНедели(Объект, ПолитикаУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоДняПриИзменении(Элемент)
	
	ОбновитьДополнительныеСведенияПоДнямНедели(Объект, ПолитикаУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзменении(Элемент)
	
	ОбновитьДополнительныеСведенияПоДнямНедели(Объект, ПолитикаУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		Строка = Элементы.Работы.ТекущиеДанные;
		ОбработкаВыбораРаботы(ВыбранноеЗначение, Строка);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Работа;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Пользователь);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	Элементы.Работы.ТекущиеДанные.ВидВремени = ВидВремени(Элементы.Работы.ТекущиеДанные.ВидРабот);
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДниНеделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЕжедневныйОтчет" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Элементы.ДниНедели.ТекущиеДанные.ЕжедневныйОтчет);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Дата", Элементы.ДниНедели.ТекущиеДанные.Дата);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Пользователь", Объект.Пользователь);
		ОткрытьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаДокумента",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
	Если Поле.Имя = "Отсутствие" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Элементы.ДниНедели.ТекущиеДанные.Отсутствие);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Дата", Элементы.ДниНедели.ТекущиеДанные.Дата);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Сотрудник", Объект.Пользователь);
		ОткрытьФорму("Документ.Отсутствие.Форма.ФормаДокумента",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЕстьДокументыПользователя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕженедельныйОтчет.Ссылка
	|ИЗ
	|	Документ.ЕженедельныйОтчет КАК ЕженедельныйОтчет
	|ГДЕ
	|	ЕженедельныйОтчет.Пользователь = &Пользователь
	|	И ЕженедельныйОтчет.Дата >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|	И ЕженедельныйОтчет.Дата <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И (НЕ ЕженедельныйОтчет.ПометкаУдаления)
	|	И ЕженедельныйОтчет.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоФактическимТрудозатратам()
	
	Если ПолитикаУчета <> Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕженедельныеОтчеты Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ФактическиеТрудозатраты.ОписаниеРаботы КАК СТРОКА(150)) КАК Работа,
		|	ФактическиеТрудозатраты.Проект КАК Проект,
		|	ФактическиеТрудозатраты.ПроектнаяЗадача КАК ПроектнаяЗадача,
		|	ФактическиеТрудозатраты.ВидРабот КАК ВидРабот,
		|	ФактическиеТрудозатраты.Длительность,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФактическиеТрудозатраты.Источник) <> ТИП(документ.ЕжедневныйОтчет)
		|			ТОГДА ФактическиеТрудозатраты.Источник
		|	КОНЕЦ КАК Источник,
		|	ФактическиеТрудозатраты.ДатаДобавления КАК Дата,
		|	ФактическиеТрудозатраты.НомерДобавления
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.Пользователь = &Пользователь
		|	И ФактическиеТрудозатраты.ДатаДобавления >= &ДатаНачала
		|	И ФактическиеТрудозатраты.ДатаДобавления <= &Дата
		|ИТОГИ ПО
		|	Работа,
		|	Проект,
		|	ПроектнаяЗадача,
		|	ВидРабот,
		|	Источник");
	
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	ВыборкаРабота = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРабота.Следующий() Цикл
		
		ВыборкаПроект = ВыборкаРабота.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроект.Следующий() Цикл
			
			ВыборкаПроектнаяЗадача = ВыборкаПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПроектнаяЗадача.Следующий() Цикл
				
				ВыборкаВидРабот = ВыборкаПроектнаяЗадача.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидРабот.Следующий() Цикл
					
					ВыборкаИсточник = ВыборкаВидРабот.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИсточник.Следующий() Цикл
					
						НоваяСтрока = Объект.Работы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИсточник, 
							"Работа, Проект, ПроектнаяЗадача, ВидРабот, Источник");
							
						НоваяСтрока.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							НоваяСтрока.ВидРабот, "ВидВремени");
						ВыборкаДетали = ВыборкаИсточник.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							
							ДатаРаботы = "";
							ДнНедели = ДеньНедели(ВыборкаДетали.Дата);
							Если ДнНедели = 1 Тогда 
								ДатаРаботы = "Пн";
							ИначеЕсли ДнНедели = 2 Тогда 
								ДатаРаботы = "Вт";
							ИначеЕсли ДнНедели = 3 Тогда 
								ДатаРаботы = "Ср";
							ИначеЕсли ДнНедели = 4 Тогда 
								ДатаРаботы = "Чт";
							ИначеЕсли ДнНедели = 5 Тогда 
								ДатаРаботы = "Пт";
							ИначеЕсли ДнНедели = 6 Тогда 
								ДатаРаботы = "Сб";
							ИначеЕсли ДнНедели = 7 Тогда 
								ДатаРаботы = "Вс";
							КонецЕсли;	
							
							Длительность = УчетВремениКлиентСервер.ПолучитьДату(ВыборкаДетали.Длительность);
							НоваяСтрока[ДатаРаботы] = НоваяСтрока[ДатаРаботы] + Час(Длительность)*3600 + Минута(Длительность)*60;
							
						КонецЦикла;

					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЕжедневнымОтчетам()
	
	Если ПолитикаУчета <> Перечисления.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеИЕженедельныеОтчеты Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка КАК ЕжедневныйОтчет,
		|	ЕжедневныйОтчет.ДлительностьРабот КАК ДлительностьРабот,
		|	ЕжедневныйОтчет.ДлительностьРабочая КАК ДлительностьРабочая,
		|	ЕжедневныйОтчет.Дата КАК Дата,
		|	ЕжедневныйОтчет.НачалоДня,
		|	ЕжедневныйОтчет.ОкончаниеДня
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &Пользователь
		|	И ЕжедневныйОтчет.Дата >= &ДатаНачала
		|	И ЕжедневныйОтчет.Дата <= &Дата
		|	И Не ЕжедневныйОтчет.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕжедневныйОтчет.Дата");
	
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Дата", НачалоДня(Выборка.Дата));
		НайденныеСтроки = Объект.ДниНедели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденныеСтроки[0].ЕжедневныйОтчет = Выборка.ЕжедневныйОтчет;
			НайденныеСтроки[0].ДлительностьРабот = Выборка.ДлительностьРабот;
			НайденныеСтроки[0].ДлительностьРабочая = Выборка.ДлительностьРабочая;
			НайденныеСтроки[0].НачалоДня = Выборка.НачалоДня;
			НайденныеСтроки[0].ОкончаниеДня = Выборка.ОкончаниеДня;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДлительностьНеделиПоЕжедневнымОтчетам()

	ДлительностьМин = 0;
	ДлительностьРабочегоВремениМин = 0;
	Для Каждого Строка Из Объект.ДниНедели Цикл
		РазделеннаяДлительность = СтрРазделить(Строка.ДлительностьРабот, ":");
		Если РазделеннаяДлительность.Количество() = 2 Тогда
			ДлительностьМин = ДлительностьМин 
				+ Число(РазделеннаяДлительность[0]) * 60
				+ Число(РазделеннаяДлительность[1]);
		КонецЕсли;
		РазделеннаяДлительность = СтрРазделить(Строка.ДлительностьРабочая, ":");
		Если РазделеннаяДлительность.Количество() = 2 Тогда
			ДлительностьРабочегоВремениМин = ДлительностьРабочегоВремениМин 
				+ Число(РазделеннаяДлительность[0]) * 60
				+ Число(РазделеннаяДлительность[1]);
		КонецЕсли;
	КонецЦикла;

	ПроцентФонда = ?(ФондРабочегоВремени = 0, 0,
		100 * ДлительностьРабочегоВремениМин * 60 / ФондРабочегоВремени);
	
	ДлительностьНеделиСогласноЕжедневнымОтчетам = СтрШаблон(НСтр("ru = 'Всего: %1, в т.ч. рабочее: %2 (%3)'"), 
		УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьМин), 
		УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьРабочегоВремениМин),
		Формат(ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДлительностьНеделиСогласноРаботам()

	Длительность = Новый Соответствие;
	ДлительностьРабочегоВремени = Новый Соответствие;
	СоответствиеДнейНедели = СоответствиеДнейНедели();
	ДлительностьМин = 0;
	ДлительностьРабочегоВремениМин = 0;
	
	Для Каждого КлючИЗначение Из СоответствиеДнейНедели() Цикл
		Длительность[КлючИЗначение.Значение] = 0;
		ДлительностьРабочегоВремени[КлючИЗначение.Значение] = 0;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Работы Цикл
		Для Каждого КлючИЗначение Из СоответствиеДнейНедели() Цикл
			ДлительностьВДне = Час(Строка[КлючИЗначение.Значение]) * 60 + Минута(Строка[КлючИЗначение.Значение]);
			Длительность[КлючИЗначение.Значение] = Длительность[КлючИЗначение.Значение] + ДлительностьВДне;
			ДлительностьМин = ДлительностьМин + ДлительностьВДне;
			Если Строка.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее") Тогда
				ДлительностьРабочегоВремени[КлючИЗначение.Значение] = ДлительностьРабочегоВремени[КлючИЗначение.Значение] + ДлительностьВДне;
				ДлительностьРабочегоВремениМин = ДлительностьРабочегоВремениМин + ДлительностьВДне;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ДлительностьСб = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Сб"]);
	ДлительностьВс = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Вс"]);
	ДлительностьПн = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Пн"]);
	ДлительностьВт = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Вт"]);
	ДлительностьСр = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Ср"]);
	ДлительностьЧт = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Чт"]);
	ДлительностьПт = УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(Длительность["Пт"]);
	
	ПроцентФонда = ?(ФондРабочегоВремени = 0, 0,
		100 * ДлительностьРабочегоВремениМин * 60 / ФондРабочегоВремени);
	
	ДлительностьНеделиСогласноРаботам = СтрШаблон(НСтр("ru = 'Всего: %1, в т.ч. рабочее: %2 (%3)'"), 
		УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьМин), 
		УчетВремениКлиентСервер.ПолучитьВВидеДатыИзМин(ДлительностьРабочегоВремениМин),
		Формат(ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");

КонецПроцедуры

&НаСервере
Процедура ОбновитьФондРабочегоВремени()
	ФондТаблицей = УчетВремени.ФондРабочегоВремени(Объект.Пользователь, ДатаНачала, КонецДня(Объект.Дата));
	ФондРабочегоВремени = ФондТаблицей.Итог("Длительность");
КонецПроцедуры

&НаСервере
Процедура ОбновитьШапку()

	СоответствиеДнейНедели = СоответствиеДнейНедели();
	Для Каждого Строка Из Объект.ДниНедели Цикл
		ИмяКолонки = СоответствиеДнейНедели[Строка.ДеньНедели];
		Если Строка.ВидДня = Перечисления.ВидыДней.Рабочий Тогда 
			Элементы[ИмяКолонки].ЦветТекстаЗаголовка = ЦветЧерный;
		Иначе
        	Элементы[ИмяКолонки].ЦветТекстаЗаголовка = ЦветКрасный;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьНавигационнуюСсылкуССервера();

	Возврат ПолучитьНавигационнуюСсылку(Объект.Ссылка);

КонецФункции

&НаСервере
Процедура ЗаполнитьДниНеделиСервер()

	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Объект.Пользователь);
	
	ВремяНачалаДня = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВремяНачалаДня");
	ВремяОкончанияДня = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВремяОкончанияДня");
	
	СписокДниНедели = Новый СписокЗначений;
    СписокДниНедели.Добавить(Перечисления.ДниНедели.Суббота);
    СписокДниНедели.Добавить(Перечисления.ДниНедели.Воскресенье);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Понедельник);
    СписокДниНедели.Добавить(Перечисления.ДниНедели.Вторник);
    СписокДниНедели.Добавить(Перечисления.ДниНедели.Среда);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Четверг);
	СписокДниНедели.Добавить(Перечисления.ДниНедели.Пятница);

	Объект.ДниНедели.Очистить();
	Для Каждого ДеньНедели Из СписокДниНедели Цикл
		НоваяСтрока = Объект.ДниНедели.Добавить();
        НоваяСтрока.ДеньНедели = ДеньНедели.Значение;
		НоваяСтрока.Дата = ДатаНачала + СписокДниНедели.Индекс(ДеньНедели)*3600*24;        

		ЭтоРабочийДень = ГрафикиРаботы.ЭтоРабочийДень(НоваяСтрока.Дата, ГрафикРаботы);
	
		Если ЭтоРабочийДень Тогда
        	НоваяСтрока.ВидДня = Перечисления.ВидыДней.Рабочий;
			
			НачалоИОкончаниеРабочегоДня = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(
				НоваяСтрока.Дата,
				ГрафикРаботы);
			Если ЗначениеЗаполнено(НачалоИОкончаниеРабочегоДня.НачалоДня)
				Или ЗначениеЗаполнено(НачалоИОкончаниеРабочегоДня.ОкончаниеДня) Тогда
				
				НоваяСтрока.НачалоДня = НачалоИОкончаниеРабочегоДня.НачалоДня;
    			НоваяСтрока.ОкончаниеДня = НачалоИОкончаниеРабочегоДня.ОкончаниеДня;
				
				Если ЗначениеЗаполнено(ВремяНачалаДня) И ЗначениеЗаполнено(ВремяОкончанияДня) Тогда 
					Если ВремяНачалаДня < НоваяСтрока.НачалоДня И ЗначениеЗаполнено(НоваяСтрока.НачалоДня) Тогда 
						НоваяСтрока.НачалоДня = ВремяНачалаДня;
					КонецЕсли;	
					
					Если ВремяОкончанияДня > НоваяСтрока.ОкончаниеДня И ЗначениеЗаполнено(НоваяСтрока.ОкончаниеДня) Тогда 
						НоваяСтрока.ОкончаниеДня = ВремяОкончанияДня;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока.ВидДня = Перечисления.ВидыДней.Выходной;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокФормы()
	
    Если Объект.Ссылка.Пустая() Тогда
		Заголовок = "Отчет за неделю (создание)";
	Иначе
		Заголовок = "Отчет за неделю с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИтогоПоСтроке(Строка)
	
	ДниНедели = Новый Структура("Пн, Вт, Ср, Чт,Пт, Сб, Вс");
	
	Итого = 0;
	Для Каждого Эл Из ДниНедели Цикл
		Итого = Итого + Час(Строка[Эл.Ключ])*60 + Минута(Строка[Эл.Ключ]);
	КонецЦикла;	
	
	Час = Цел(Итого / 60);
	Мин = (Итого - Час*60);
	
	Возврат Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ":" + Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИтогоПоКолонкеСек(ИмяКолонки, Работы)
	
	ОбщаяДлительностьРабот = 0;
	
	Для Каждого Строка Из Работы Цикл
		ОбщаяДлительностьРабот = ОбщаяДлительностьРабот
			+ Час(Строка[ИмяКолонки])*3600 
			+ Минута(Строка[ИмяКолонки])*60;
	КонецЦикла;	
	
	Возврат ОбщаяДлительностьРабот;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДополнительныеСведенияПоДнямНедели(Объект, ПолитикаУчета)
	
	СоответствиеДниНедели = СоответствиеДнейНедели();

	Для Каждого Строка Из Объект.ДниНедели Цикл
		
		Строка.НекорректнаяДлительность = Ложь;
		Строка.ОсталосьПревышено = "";
		Строка.ДлительностьДня = "";
		
		Если ЗначениеЗаполнено(Строка.НачалоДня) 
			И ЗначениеЗаполнено(Строка.ОкончаниеДня) 
			И Строка.ОкончаниеДня >= Строка.НачалоДня Тогда 
		 
			ИмяКолонки = СоответствиеДниНедели.Получить(Строка.ДеньНедели);
			ОбщаяДлительностьРабот = ИтогоПоКолонкеСек(ИмяКолонки, Объект.Работы);
			ПродолжительностьДняСек = Строка.ОкончаниеДня - Строка.НачалоДня;
			
			Строка.ДлительностьДня = НСтр("ru = 'Продолжительность дня: '") + Формат(УчетВремениКлиентСервер.ПолучитьДату(ПродолжительностьДняСек), "ДФ=Ч.мм");
			
			Если ПолитикаУчета = ПредопределенноеЗначение("Перечисление.ПолитикиУчетаРабочегоВремени.ИспользоватьЕжедневныеИЕженедельныеОтчеты") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщаяДлительностьРабот <> ПродолжительностьДняСек Тогда 
				Строка.НекорректнаяДлительность = Истина;
			КонецЕсли;	
			
			Если ОбщаяДлительностьРабот > ПродолжительностьДняСек Тогда 
				Строка.ОсталосьПревышено = Строка.ОсталосьПревышено
					+ НСтр("ru = '(суммарное время работ больше продолжительности дня на '") 
					+ Формат(УчетВремениКлиентСервер.ПолучитьДату(ОбщаяДлительностьРабот - ПродолжительностьДняСек), "ДФ=Ч.мм") + ")";
			ИначеЕсли ОбщаяДлительностьРабот < ПродолжительностьДняСек Тогда 
				Строка.ОсталосьПревышено = Строка.ОсталосьПревышено
					+ НСтр("ru = '(суммарное время работ меньше продолжительности дня на '") 
					+ Формат(УчетВремениКлиентСервер.ПолучитьДату(ПродолжительностьДняСек - ОбщаяДлительностьРабот), "ДФ=Ч.мм") + ")";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтсутствия()
	
	Для Каждого Строка Из Объект.ДниНедели Цикл
		Строка.Отсутствие = Неопределено;
	КонецЦикла;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательМассивом = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Пользователь);
	НастройкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	НастройкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Ложь;
	ДатаНачала = УчетВремениКлиентСервер.ДатаНачалаОтчетаЗаНеделю(Объект.Дата);
	ДатаОкончания = КонецДня(Объект.Дата);
	ТаблицаОтсутствий = Отсутствия.ПолучитьТаблицуОтсутствий(ДатаНачала,
		ДатаОкончания,
		ПользовательМассивом,
		НастройкиОтсутствий);
	
	Для Каждого Строка Из Объект.ДниНедели Цикл
		Если ЗначениеЗаполнено(Строка.Дата) Тогда
			Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствий Цикл
				Если СтрокаОтсутствия.ДатаНачала <= КонецДня(Строка.Дата)
					И СтрокаОтсутствия.ДатаОкончания >= НачалоДня(Строка.Дата) Тогда
					Строка.Отсутствие = СтрокаОтсутствия.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеДнейНедели()

	Соответствие = Новый Соответствие;
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Суббота")] = "Сб";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Воскресенье")] = "Вс";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Понедельник")] = "Пн";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Вторник")] = "Вт";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Среда")] = "Ср";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Четверг")] = "Чт";
	Соответствие[ПредопределенноеЗначение("Перечисление.ДниНедели.Пятница")] = "Пт";
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыВремени()
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРабот.Ссылка КАК ВидРабот,
		|	ВидыРабот.ВидВремени КАК ВидВремени
		|ИЗ
		|	Справочник.ВидыРабот КАК ВидыРабот");
	ВидыВремени.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Функция ВидВремени(ВидРабот)
	НайденныеСтроки = ВидыВремени.НайтиСтроки(Новый Структура("ВидРабот", ВидРабот));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ВидВремени;
	КонецЕсли;
	НоваяСтрока = ВидыВремени.Добавить();
	НоваяСтрока.ВидРабот = ВидРабот;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияДокументооборотВызовСервера.
		ЗначениеРеквизитаОбъекта(ВидРабот, "ВидВремени");
	Возврат НоваяСтрока.ВидВремени;
КонецФункции

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ДатаНачала.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элементы.Дата.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	
	Элементы.ДниНедели.Шапка = Ложь;
	Элементы.МК_ОтступПередПодваломДниНедели.Видимость = Истина;
	Элементы.Отсутствие.Видимость = Ложь;
	Элементы.ВидДня.Видимость = Ложь;
	Элементы.НачалоОкончаниеДня.Видимость = Ложь;
	
	Элементы.ДеньНеделиДата.Группировка = ГруппировкаКолонок.Вертикальная;
	Элементы.ДниНедели.ВысотаВСтрокахТаблицы = 0;
	Элементы.ГруппаДниНедели.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.ДлительностьРабот.Ширина = 6;
	Элементы.ЕжедневныйОтчет.Ширина = 15;
	Элементы.НачалоДня.Ширина = 6;
	Элементы.ДатаДня.Ширина = 8;
	
	Элементы.ДатаДня.Формат = НСтр("ru='ДФ=''dd MMMM yyyy'''");
	Элементы.ЕжедневныйОтчет.ФиксацияВТаблице = ФиксацияВТаблице.Право;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
