
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовоеПисьмо = Истина;
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	ПрочитатьНастройки();
	
	Если ЗначениеЗаполнено(Объект.ПисьмоОснование)
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование)
		И (Объект.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Или
			Объект.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Или
			Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма) Тогда
		
		ПересылкаВнутреннегоПисьма = Истина;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Объект.ПисьмоОснование) Тогда 
			ПересылкаВнутреннегоПисьма = Не ВстроеннаяПочтаСервер.ЕстьВнешнийАдресатУВходящегоПисьма(Объект.ПисьмоОснование);
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Объект.ПисьмоОснование) Тогда
			ПересылкаВнутреннегоПисьма = Не ВстроеннаяПочтаСервер.ЕстьВнешнийАдресатУИсходящегоПисьма(Объект.ПисьмоОснование);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СписокФайлов") Тогда
		
		// Добавим вложения из параметров.
		Для Каждого ОписаниеВложение из Параметры.СписокФайлов Цикл
			
			Если ТипЗнч(ОписаниеВложение) = Тип("Структура") И
				ЭтоАдресВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище) Тогда
				
				СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеВложение.Представление);
				
				ВложенияСтрока = Вложения.Добавить();
				ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
				ВложенияСтрока.Ссылка = Неопределено;
				ВложенияСтрока.Представление = ОписаниеВложение.Представление;
				ВложенияСтрока.ИмяФайла = СтруктураИмениФайла.Имя;
				ВложенияСтрока.ИмяФайлаНаДиске = "";
				
				ВложенияСтрока.ИндексКартинки =
					ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураИмениФайла.Расширение);
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище);
				
				ВложенияСтрока.Размер = ДвоичныеДанные.Размер();
				ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ДвоичныеДанные.Размер());
				ВложенияСтрока.ПометкаУдаления = Ложь;
				ВложенияСтрока.Редактирует = Неопределено;
				ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
				
				ВложенияСтрока.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				
				ДвоичныеДанные = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьНовоеПисьмо(Параметры);
		ОформитьЭлементыПоФорматуТекста();
		ОтобразитьСведенияОПереписке();
		ПисьмоПрочтено = Истина;
		
	КонецЕсли;
	
	ЗаполнитьВложения();
	ЗаполнитьПолучателей();
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Элементы.ПроектСтрокой.Видимость = Ложь;
	КонецЕсли;
	
	// Установка заголовка формы
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	Если ЕстьОшибкиВПротоколеДоставки() Тогда
		Элементы.ГруппаОшибка.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтправкаОтменена.Видимость = Объект.ОтправкаОтменена;
	КонецЕсли;
	
	ОпределитьВидимостьДоступностьЭлементовФормы();
	
	// перенаправление письма
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма
		И ЗначениеЗаполнено(Объект.ПисьмоОснование)
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда
		
		Элементы.ГруппаПеренаправляемоеПисьмо.Видимость = Истина;
		ПисьмоОснование = Объект.ПисьмоОснование;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОснование) Тогда 
			ОтправительОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОснование, "ОтправительАдресат");
			ПеренаправлениеОт = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ОтправительОснования).Представление;
		Иначе
			УчетнаяЗаписьОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОснование, "УчетнаяЗапись");
			ПеренаправлениеОт = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьПредставлениеАдреса(УчетнаяЗаписьОснования.Ссылка)
		КонецЕсли;	
		
		ПеренаправлениеКому = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоОснование.ПолучателиПисьма);
		Элементы.ПеренаправлениеКопии.Видимость = ПисьмоОснование.ПолучателиКопий.Количество() > 0;
		Если Элементы.ПеренаправлениеКопии.Видимость Тогда
			ПеренаправлениеКопии = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоОснование.ПолучателиКопий);
		КонецЕсли;
		
		Элементы.ПеренаправлениеОбратныеАдреса.Видимость = ПисьмоОснование.ПолучателиОтвета.Количество() > 0;
		Если Элементы.ПеренаправлениеОбратныеАдреса.Видимость Тогда
			ПеренаправлениеОбратныеАдреса = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПисьмоОснование.ПолучателиОтвета);
			Если ПисьмоОснование.ПолучателиОтвета.Количество() > 1 Тогда
				Элементы.ПеренаправлениеОбратныеАдреса.Заголовок = "Обратные адреса";
			КонецЕсли;
		КонецЕсли;
		ПисьмоОснование = Неопределено;
		
	КонецЕсли;
	
	// Инициализация начальных значений реквизитов
	ПредметПриОткрытии = Объект.Предмет;
	ПроектПриОткрытии = Объект.Проект;
	
	ЗаполнитьСписокВыбораТипаПредмета(СписокВыбораТипаПредмета);
	ЗаполнитьПредставлениеПроектаИлиПредмета(Объект.Предмет, ПредметСтрокой);
	ЗаполнитьПредставлениеПроектаИлиПредмета(Объект.Проект, ПроектСтрокой);
	
	// Отображение шрифта
	НастройкаШрифтОтображения = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	НастройкаОтображатьДругиеШрифтыВПисьмах = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтображатьДругиеШрифтыВПисьмах");
	ШрифтОтображения = НастройкаШрифтОтображения;
	
	// Установим шрифт для обычного текста.
	// Для HTML настройка шрифта происходит ПриОткрытии
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
		Элементы.ТекстПисьма.Шрифт = ШрифтОтображения;
	КонецЕсли;
	
	// Контроль писем
	УстановитьСвойстваКнопкиКонтроля();
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// Заполнение на основании отсутствия
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Отсутствие") Тогда
		ОснованиеПисьма = Параметры.Основание;
	КонецЕсли;
	
	ЗадатьКартинкуОтображенияВажности(Объект.Важность, Элементы.ДекорацияВажность);
	
	ЗаполнитьНомерКартинкиФлагаПрочтения();
	
	ПодсказкаСтатуса = "";
	ВстроеннаяПочтаСервер.ПрочитатьСтатусПисьма(Объект.Ссылка, СостояниеПисьма, ПодсказкаСтатуса);
	Элементы.СостояниеПисьма.Видимость = СостояниеПисьма > 0;
	
	ТекстПисьма = РаботаС_HTML.ПатчитьТекстИсходящегоПисьмаДляМобКлиента(ТекстПисьма);
	ВключитьРежимРедактированияHTML();  // надо выполнять один раз
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ДатаОтправки) Тогда
		Элементы.ДатаОтправки.Подсказка = НСтр("ru = 'Дата отправки сервером: '") + ТекущийОбъект.ДатаОтправки;
	КонецЕсли;
	
	ПисьмоОтправлено = ЗначениеЗаполнено(ТекущийОбъект.ДатаОтправки);
	
	Если Параметры.Свойство("ОтправкаОтменена") Тогда
		ОтправкаОтменена = Параметры.ОтправкаОтменена;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимТолькоПросмотр") Тогда
		РежимТолькоПросмотр = Параметры.РежимТолькоПросмотр;
	КонецЕсли;
	
	// Удаление состояния "Отправлен ответ", "Письмо переслано", "Письмо перенаправлено" если отправка отменена
	Если ОтправкаОтменена Тогда
		// Связи пишем в привилег режиме
		УстановитьПривилегированныйРежим(Истина);
		
		ОповеститьОбИзмененииПриОткрытии = Истина;
		
		ИсходныеПисьма = СвязиДокументов.ПолучитьСвязанныеДокументы(
			ТекущийОбъект.Ссылка,
			Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
			
		Для каждого ИсходноеПисьмо Из ИсходныеПисьма Цикл
			
			СвязиДокументов.УдалитьСвязь(
				ТекущийОбъект.Ссылка,
				ИсходноеПисьмо,
				Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
			
		КонецЦикла;
		
		ПересланныеПисьма = СвязиДокументов.ПолучитьСвязанныеДокументы(
			ТекущийОбъект.Ссылка,
			Справочники.ТипыСвязей.ПересылкаПисьма);
		
		Для каждого ПересланноеПисьмо Из ПересланныеПисьма Цикл
			
			СвязиДокументов.УдалитьСвязь(
				ТекущийОбъект.Ссылка,
				ПересланноеПисьмо,
				Справочники.ТипыСвязей.ПересылкаПисьма);
			
		КонецЦикла;
		
		ПеренаправленныеПисьма = СвязиДокументов.ПолучитьСвязанныеДокументы(
			ТекущийОбъект.Ссылка,
			Справочники.ТипыСвязей.ПеренаправлениеПисьма);
		
		Для каждого ПеренаправленноеПисьмо Из ПеренаправленныеПисьма Цикл
			
			СвязиДокументов.УдалитьСвязь(
				ТекущийОбъект.Ссылка,
				ПеренаправленноеПисьмо,
				Справочники.ТипыСвязей.ПеренаправлениеПисьма);
			
		КонецЦикла;
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	СведенияОФлаге = РаботаСФлагамиОбъектовСервер.ПолучитьИнформациюОФлагеОбъекта(Объект.Ссылка);
	Флаг = СведенияОФлаге.Флаг;
	
	ОтобразитьСведенияОПереписке();
	ЗаполнитьНомерКартинкиФлагаПрочтения();
	Вложения.Очистить();
	ЗаполнитьВложения();
	
	ОбновитьВложенныеПисьмаПриЧтении();
	
	// Формирования текста письма
	СодержаниеПисьма = ТекущийОбъект.ПолучитьСодержаниеПисьма();
	ТекстПисьма = СодержаниеПисьма.Текст;
	
	Если ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
			ТекстПисьма,
			Объект.Ссылка,
			УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
		
	КонецЕсли;
	
	ОформитьЭлементыПоФорматуТекста();
	
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	
	ПисьмоПрочтено = РаботаСПрочтениями.ПолучитьСвойствоПрочтен(Объект.Ссылка);
	Если Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную
		И Не ПисьмоПрочтено Тогда
		// Попробуем установить отметку прочтения.
		Если РаботаСПрочтениями.УстановитьСвойствоПрочтен(Объект.Ссылка) Тогда
			ОповеститьОбИзмененииПриОткрытии = Истина;
			ПисьмоПрочтено = Истина;
		Иначе
			ПисьмоПрочтено = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьОформлениеКомандыПоменятьПометкуПрочтения();
	
	ЗадатьКартинкуОтображенияВажности(ТекущийОбъект.Важность, Элементы.ДекорацияВажность);
	Если ПисьмоОтправлено
		И ТекущийОбъект.Важность <> Перечисления.ВажностьПисем.Высокая Тогда
		Элементы.ДекорацияВажность.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОповеститьОбИзмененииПриОткрытии Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ПисьмаИзмененыНоваяФорма",, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	
	ОформитьКнопкиПолучателей();
	ОформитьКнопкиВложений();
	ОпределитьДоступностьКнопокМультимедиаВложений();
	
	Если (Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтвета.ОтветНаПисьмо")
		Или Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтвета.ПересылкаПисьма")
		Или Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтвета.ПеренаправлениеПисьма")) Тогда
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстПисьма;
		Попытка
			ЭтотОбъект.НачатьРедактированиеЭлемента();
		Исключение
			;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр.ПараметрСобытия = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессИзменен"
		Или ИмяСобытия = "ЗадачаВыполнена")
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОтобразитьСведенияОПереписке();
		
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл"
		И Параметр.Событие = "ДанныеФайлаИзменены"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = Объект.Ссылка
		И Источник <> ЭтотОбъект Тогда
		
		ЗаполнитьВложения();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = Объект.Ссылка Тогда
		
		ЗаполнитьВложения();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты" Тогда 
		//почему только 1 параметр
		Если Параметр.Свойство("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям") Тогда
			ПриОтправкеПоказатьПредупреждениеПересылкаВнутреннихПисемВнешнимПолучателям
				= Параметр.ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг"
		И Источник <> ЭтотОбъект
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		ЗаполнитьНомерКартинкиФлагаПрочтения();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбраныПолучатели" Тогда
		
		Если ТипЗнч(Параметр) <> Тип("Массив") Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьАдресатов(Параметр);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			УстановитьСвойстваКнопкиКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранПроектИлиПроектнаяЗадача" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда	
			Объект.Предмет = Параметр.ПроектнаяЗадача;	
			ЗаполнитьПредставлениеПроектаИлиПредмета(Объект.Предмет, ПредметСтрокой);
		Иначе
			Объект.Предмет = Параметр;
			ЗаполнитьПредставлениеПроектаИлиПредмета(Объект.Предмет, ПредметСтрокой);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ВыполнитьЗаписьHTML();
	КонецЕсли;
	
	ВыполняетсяЗапись = Истина;
	
	ОчиститьСообщения();
	
	Если Не ПроверитьПредельныйРазмерФайлов() Или Не ПоместитьФайлыСДискаВоВременноеХранилище() Тогда
		ВыполняетсяЗапись = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
	ОшибкиПриЗаписи.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если ВыполняетсяОтправка Тогда
		ТекущийОбъект.ПодготовленоКОтправке = ТекущаяДата();
		ТекущийОбъект.Дата = ТекущаяДата();
		ТекущийОбъект.ОтправкаОтменена = Ложь;
	КонецЕсли;
	
	ТекущийОбъект.ЕстьВложения = Ложь;
	Для Каждого ВложенияСтрока Из Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			ТекущийОбъект.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыполняетсяОтправка
		И ТипЗнч(ВидыМаршрутизацииПисьма) = Тип("Структура")
		И ВидыМаршрутизацииПисьма.ВнешняяМаршрутизация Тогда
		
		ЕстьZIP = Ложь;
		
		Для Каждого ВложенияСтрока Из Вложения Цикл
			
			Если Не ВложенияСтрока.ПометкаУдаления Тогда
				
				ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ВложенияСтрока.Представление);
				Если ЗначениеЗаполнено(ИмяФайлаИнфо.Расширение) И НРег(ИмяФайлаИнфо.Расширение) = "zip" Тогда
					ЕстьZIP = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЕстьZIP", ЕстьZIP);
		
	КонецЕсли;
	
	ТекущийОбъект.ПолучателиПисьма.Очистить();
	ТекущийОбъект.ПолучателиКопий.Очистить();
	ТекущийОбъект.ПолучателиСкрытыхКопий.Очистить();
	ТекущийОбъект.ПолучателиОтвета.Очистить();
	
	СчетчикСообщенийПользователю = 0;
	
	// Распределим Получателей по табличным частям письма.
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		
		Строка = Получатели[Счетчик];
		Если Не ЗначениеЗаполнено(Строка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			// Пытаемся получить адрес электронной почты.
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
			
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				
				Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
					РазложенныйАдрес.Адрес, Строка.Представление);
				
			Иначе
				
				Если СчетчикСообщенийПользователю < 10 Тогда
					
					// Если адрес так и не получилось выделить из строки, выводим сообщение в соответствующей строке таблицы.
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Некорректный адрес электронной почты ""%1""'"),
						Строка.Представление);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						"Получатели[" + Строка(Счетчик) + "].Представление",,
						Отказ);
					
					СчетчикСообщенийПользователю = СчетчикСообщенийПользователю + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.ТипАдреса = Перечисления.ТипыАдресатов.Кому Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиПисьма.Добавить();
		ИначеЕсли Строка.ТипАдреса = Перечисления.ТипыАдресатов.Копия Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиКопий.Добавить();
		ИначеЕсли Строка.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиСкрытыхКопий.Добавить();
		ИначеЕсли Строка.ТипАдреса = Перечисления.ТипыАдресатов.ОбратныйАдрес Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиОтвета.Добавить();
		// ТипАдреса не заполнен
		ИначеЕсли ВыполняетсяОтправка Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указан тип адреса (Кому, Копия, Скрытая копия).'"),, "Получатели");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		НоваяСтрока.Адресат = Строка.Адресат;
		НоваяСтрока.ПорядковыйНомер = Счетчик + 1;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиПисьма);
	Если ПустаяСтрока(ТекущийОбъект.ПолучателиПисьмаСтрокой) Тогда
		ТекущийОбъект.ПолучателиПисьмаСтрокой =
			ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиКопий);
	КонецЕсли;
	
	ТекстПисьмаДляЗаписи = "";
	Если ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		ТекстПисьмаДляЗаписи = ТекстПисьмаHTMLПриЗаписи;
		
		//удаление скриптов из тела письма
		ТекстПисьмаБезСкриптов = Новый Массив;
		НачалоТегаСкрипт = СтрНайти(ТекстПисьмаДляЗаписи, "<script>");
		Пока НачалоТегаСкрипт > 0 Цикл
			
			КонецТегаСкрипт = СтрНайти(ТекстПисьмаДляЗаписи, "</script>");
			
			Если НЕ СтрНайти(ТекстПисьмаДляЗаписи, "</script>") <> 0 Тогда
				Прервать;
			КонецЕсли;
			
			ТекстПисьмаБезСкриптов.Добавить(Лев(ТекстПисьмаДляЗаписи, НачалоТегаСкрипт - 1));
			
			ТекстПисьмаДляЗаписи = 
				Сред(ТекстПисьмаДляЗаписи, КонецТегаСкрипт + СтрДлина("</script>") + 1);
			
			НачалоТегаСкрипт = СтрНайти(ТекстПисьмаДляЗаписи, "<script>");
			
		КонецЦикла;
		
		// Если что-то вырезали, добавим остаток, и соберем текст обратно.
		Если ТекстПисьмаБезСкриптов.Количество() > 0 Тогда
			ТекстПисьмаБезСкриптов.Добавить(ТекстПисьмаДляЗаписи);
			ТекстПисьмаДляЗаписи = СтрСоединить(ТекстПисьмаБезСкриптов);
		КонецЕсли;
		
	Иначе
		ТекстПисьмаДляЗаписи = ТекстПисьма;
	КонецЕсли;
	
	Если ИдентификаторыКартинокПисьма.Количество() > 0 Тогда
		
		Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
			
			ОписаниеИсточника = Строка.Значение;
			
			Если СтрНайти(ТекстПисьмаДляЗаписи, ОписаниеИсточника.НавигационнаяСсылка) > 0 Тогда
				
				// при записи возвращаем GUID - а не навигационную ссылку на временное хранилище
				ТекстПисьмаДляЗаписи = СтрЗаменить(ТекстПисьмаДляЗаписи, 
					ОписаниеИсточника.НавигационнаяСсылка,
					СтрШаблон("cid:%1", ОписаниеИсточника.ИсточникФайла));
				
			Иначе
				
				// картинку из HTML удалили - удалим и из ИдентификаторыПочтовыхВложений, и пометим файл на удаление 
				ВложенияКартинкиКУдалению.Добавить(ОписаниеИсточника.ИсточникФайла);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ТекстПисьмаДляЗаписи);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОснованиеПисьма", ОснованиеПисьма);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Папка", Объект.Папка);
	
	Если ПараметрыЗаписи.Свойство("ПереместитьВКорзину")
		И ПараметрыЗаписи.ПереместитьВКорзину = Истина Тогда
		
		ТекущийОбъект.ПометкаУдаления = Ложь;
		
		Корзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			ТекущийОбъект.УчетнаяЗапись, Перечисления.ВидыПапокПисем.Корзина);
		
		Объект.Папка = Корзина;
		ТекущийОбъект.ДополнительныеСвойства.Папка = Объект.Папка;
		
	КонецЕсли;
	
	Если ВыполняетсяОтправка Тогда
		
		Если Не ПроверитьПисьмоПередОтправкой(ТекущийОбъект) Тогда
			
			Отказ = Истина;
			
			Если ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				ТекстПисьма = ТекстПисьмаHTMLДляОтменыОтправки;
				ТекстПисьмаHTMLДляОтменыОтправки = "";
				ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
					ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
				ВключитьРежимРедактированияHTML();
			КонецЕсли;
			ВыполняетсяЗапись = Ложь;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Выполняем блокировку - чтобы фоновое задание не успело заблокировать в промежутке
	// между записью документа и его блокировкой платформой
	Если ВыполняетсяОтправка Тогда
		ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если Не ПисьмоОтправлено Тогда
		ЗаписатьВложения(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ВыполняетсяОтправка И ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда
		
		ТипСвязи = Неопределено;
		Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
			ТипСвязи = Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа;
			
		ИначеЕсли Объект.ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
			ТипСвязи = Справочники.ТипыСвязей.ПересылкаПисьма;
			
		ИначеЕсли Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
			ТипСвязи = Справочники.ТипыСвязей.ПеренаправлениеПисьма;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипСвязи) Тогда
			// При отправке письма связи пишем в привилег. режиме
			УстановитьПривилегированныйРежим(Истина);
			СвязиДокументов.УстановитьСвязь(
				ТекущийОбъект.Ссылка,
				Неопределено,
				Объект.ПисьмоОснование,
				ТипСвязи);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ПодготовленоКОтправке) Тогда
		РегистрыСведений.НеОтправленныеИсходящиеПисьма.УдалитьСведенияОПисьме(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗаменитьПредметПереписки")
		И ПараметрыЗаписи.ЗаменитьПредметПереписки = Истина
		И ЗначениеЗаполнено(ТекущийОбъект.Предмет)
		И ЗначениеЗаполнено(ИсходноеПисьмо) Тогда
		
		СообщенияОбОшибках = Новый Массив;
		ПредметИзменен = ВстроеннаяПочтаСервер.ЗаменитьПредметПереписки(
			ИсходноеПисьмо,
			ТекущийОбъект.Предмет,
			ПредметПриОткрытии,
			СообщенияОбОшибках);
			
		Если Не ПредметИзменен Тогда
			ОшибкиПриЗаписи.ЗагрузитьЗначения(СообщенияОбОшибках);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗаменитьПроектПереписки")
		И ПараметрыЗаписи.ЗаменитьПроектПереписки = Истина
		И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		
		СообщенияОбОшибках = Новый Массив;
		Если Не ЗаменитьПроектПереписки(ТекущийОбъект, ПроектПриОткрытии, СообщенияОбОшибках) Тогда
			ОшибкиПриЗаписи.ЗагрузитьЗначения(СообщенияОбОшибках);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохранение истории использования адресатов
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоРассылка(Получатели.Количество()) Тогда
		ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
		Для Каждого Строка Из Получатели Цикл
			Если ЗначениеЗаполнено(Строка.Адресат) Тогда
				МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Адресат = Строка.Адресат;
				МенеджерЗаписи.Пользователь = ТекущийПользователь;
				МенеджерЗаписи.ДатаПоследнегоИспользования = ДатаПоследнегоИспользования;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		ДатаПоследнегоИспользования = Неопределено;
	КонецЕсли;
	
	// файлы картинок добавим
	Для Каждого Строка Из СписокДобавленныхФайлов Цикл
		
		ОписаниеФайла = Строка.Значение;
		
		Если ЗначениеЗаполнено(ОписаниеФайла.УникальныйИдентификаторФайла) Тогда
			Если УдаляемыеКартинки.НайтиПоЗначению(ОписаниеФайла.УникальныйИдентификаторФайла) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВложениеПисьмаСсылка = Неопределено;
		
		Если ЗначениеЗаполнено(ОписаниеФайла.Ссылка) Тогда
			
			ВложениеПисьмаСсылка = ОписаниеФайла.Ссылка;
			
		Иначе
			
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ОписаниеФайла.ИмяФайла);
			ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ОписаниеФайла.ВремяИзменения);
			АдресВременногоХранилищаТекста = "";
			
			// Создадим карточку Файла в БД
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеФайла.Адрес;
			СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
			СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
			СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
			СведенияОФайле.Размер = ОписаниеФайла.Размер;
			СведенияОФайле.ВремяИзменения = ОписаниеФайла.ВремяИзменения;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
			СведенияОФайле.ХранитьВерсии = Ложь;
			
			ВложениеПисьмаСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ТекущийОбъект.Ссылка, СведенияОФайле);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеФайла.УникальныйИдентификаторФайла) Тогда
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(ВложениеПисьмаСсылка, 
				ОписаниеФайла.УникальныйИдентификаторФайла);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполняетсяЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВыполняетсяОтправка Тогда
		
		ИдентификаторСеанса = Новый УникальныйИдентификатор;
		ПорядковыйНомерСобытия = 0;
		ВстроеннаяПочтаСервер.ЗаписатьПротоколДоставкиПочты(
			Объект.Ссылка,
			"",
			Ложь,
			Перечисления.ТипыСобытийДоставкиПочты.ИнтерактивнаяОтправкаПисьма,
			Объект.УчетнаяЗапись,
			ПорядковыйНомерСобытия,
			ИдентификаторСеанса);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый = Истина Тогда
		
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, Истина);
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
		
		Если ЗначениеЗаполнено(Флаг) Тогда
			СохранитьФлаг();
		КонецЕсли;
		
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Не ВыполняетсяОтправка Тогда
		Вложения.Очистить();
	КонецЕсли;
	
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	ОпределитьВидимостьДоступностьЭлементовФормы();
	
	Если СписокДобавленныхФайлов.Количество() > 0 Тогда
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(ТекстПисьма, Объект.Ссылка, УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
		СписокДобавленныхФайлов.Очистить();
	КонецЕсли;
	
	Для Каждого Строка Из УдаляемыеКартинки Цикл
		
		Файл = НайтиИдентификаторПочтовыхВложений(Строка.Значение, ТекущийОбъект.Ссылка);
		Если ЗначениеЗаполнено(Файл) Тогда
			
			ФайлПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ПометкаУдаления");
			Если ФайлПометкаУдаления = Ложь Тогда
			
				ЗаблокироватьДанныеДляРедактирования(Файл);
				ФайлОбъект = Файл.ПолучитьОбъект();
				ФайлОбъект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УдалитьИдентификаторПочтовогоВложения(Файл);
			
		КонецЕсли;
		
	КонецЦикла;
	УдаляемыеКартинки.Очистить();
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		РегистрыСведений.HTMLПредставленияСодержанияПисем.Удалить(Объект.Ссылка);
	КонецЕсли;
	
	Если Не ВыполняетсяОтправка Тогда
		ЗаполнитьВложения();
		ОбновитьВложенныеПисьмаПриЧтении();
	КонецЕсли;
	
	ВключитьРежимРедактированияHTML();
	
	Если Не ПисьмоОтправлено Тогда
		ПланыОбмена.ПоискПисемРегистрацияВсехПисем.ЗарегистрироватьИзменениеПисьма(Объект.Ссылка);
	КонецЕсли;
	
	// Правила обработки писем
	ВстроеннаяПочтаСервер.ПрименитьПравила(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтоЗаписьНовогоПисьма = ТипЗнч(ПараметрыЗаписи) = Тип("Структура")
		И ПараметрыЗаписи.Свойство("ЭтоНовый")
		И ПараметрыЗаписи.ЭтоНовый = Истина;
		
	ЗаписьПисьмаПриВыбореФайла = ТипЗнч(ПараметрыЗаписи) = Тип("Структура")
		И ПараметрыЗаписи.Свойство("ЗаписьПисьмаПриВыбореФайла")
		И ПараметрыЗаписи.ЗаписьПисьмаПриВыбореФайла = Истина;
		
	Если Не ЗаписьПисьмаПриВыбореФайла Тогда
		
		ТекстОповещения = ?(ЭтоЗаписьНовогоПисьма, НСтр("ru = 'Создание:'"), НСтр("ru = 'Изменение:'"));
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Заголовок,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	МассивОповещения = Новый Массив;
	МассивОповещения.Добавить(Объект.Ссылка);

	Если ЭтоЗаписьНовогоПисьма И ЗначениеЗаполнено(Объект.ПисьмоОснование)
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда
		МассивОповещения.Добавить(Объект.ПисьмоОснование);
	КонецЕсли;
	
	Оповестить("ИзменилосьСодержаниеПисьма", МассивОповещения);
	
	Если ЗначениеЗаполнено(ОснованиеПисьма)
		И ТипЗнч(ОснованиеПисьма) = Тип("ДокументСсылка.Отсутствие") Тогда
		Оповестить("СозданиеНаОсновании_ИсходящееПисьмо", ОснованиеПисьма);
		ОснованиеПисьма = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтправкаОтменена Тогда
		
		Если ЗакрытиеФормыЗакрытьБезОтправки Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОтправкаОтменена", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПередЗакрытием", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриЗакрытииНеотправленногоПисьма",
			,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПередЗакрытием(Результат, Параметры) Экспорт
	
	Если Результат = "ЗакрытьБезОтправки" Тогда 
		ЗакрытиеФормыЗакрытьБезОтправки = Истина;
		Закрыть();
	ИначеЕсли Результат = "Отправить" Тогда 
		ОтправитьКлиент(); // отправка письма
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияОшибкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Письмо", Объект.Ссылка);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ПросмотрОшибокДоставки", 
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТекстНажатие(Элемент)

	Элементы.Получатели.Видимость = Не Элементы.Получатели.Видимость;

	ОформитьКнопкиПолучателей();

	Если Элементы.Получатели.Видимость 
		И Элементы.Вложения.Видимость Тогда
		Элементы.Вложения.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВажностьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДекорацияВажностьНажатиеПослеВыбора",
		ЭтотОбъект);
	
	Список = Новый СписокЗначений();
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая"), НСтр("ru = 'Высокая важность'"),,
		БиблиотекаКартинок.ВажностьВысокая);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВажностьПисем.Обычная"), НСтр("ru = 'Обычная важность'"),,
		БиблиотекаКартинок.ВажностьНеЗадана);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВажностьПисем.Низкая"), НСтр("ru = 'Низкая важность'"),,
		БиблиотекаКартинок.ВажностьНизкая);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВажностьНажатиеПослеВыбора(ВыбранноеЗначение, Параметр) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Важность = ВыбранноеЗначение.Значение;
	ЗадатьКартинкуОтображенияВажности(Объект.Важность, Элементы.ДекорацияВажность);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	ЗадатьКартинкуОтображенияВажности(Объект.Важность, Элементы.ДекорацияВажность);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLДокументСформирован(Элемент)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ТекстПисьмаПриОткрытии = ПолучитьТекстПисьмаВПоле();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПолучателей

&НаСервере
Процедура ДобавитьПолучателя(ТипАдреса, Адресат, СоответствиеДанныхАдресатов = Неопределено)
	
	НоваяСтрока = Получатели.Добавить();
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда
		ДанныеПолучателя = СоответствиеДанныхАдресатов.Получить(Адресат);
		Если ДанныеПолучателя = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеПолучателя = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
	КонецЕсли;
	НоваяСтрока.Представление = ДанныеПолучателя.Представление;
	НоваяСтрока.Контакт = ДанныеПолучателя.Контакт;
	НоваяСтрока.ТипАдреса = ТипАдреса;
	НоваяСтрока.Адресат = Адресат;

	Если ЗначениеЗаполнено(Адресат) Тогда
		Если СоответствиеДанныхАдресатов <> Неопределено Тогда
			НоваяСтрока.Адрес = ДанныеПолучателя.Адрес;
			НоваяСтрока.ВидМаршрутизации = ДанныеПолучателя.ВидМаршрутизации;
		Иначе
			РеквизитыАдресата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Адресат, "Адрес,ВидМаршрутизации");
			НоваяСтрока.Адрес = РеквизитыАдресата.Адрес;
			НоваяСтрока.ВидМаршрутизации = РеквизитыАдресата.ВидМаршрутизации;
			РеквизитыАдресата = Неопределено;
		КонецЕсли;
	Иначе
		НоваяСтрока.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
	КонецЕсли;
	
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда 
		НоваяСтрока.Внешний = ДанныеПолучателя.Внешний;
	Иначе	
		НоваяСтрока.Внешний = ВстроеннаяПочтаСервер.ЭтоВнешнийАдресат(Адресат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейКомуКопия()
	
	ТаблицаЗначений = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(
		Объект.Ссылка, Ложь);
	
	КС = Новый КвалификаторыСтроки(80);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаЗначений.Колонки.Добавить("Прочтено", ОписаниеТиповС);
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБ = Новый ОписаниеТипов(МассивБулево);
	ТаблицаЗначений.Колонки.Добавить("КонтактЗагружен", ОписаниеТиповБ);
	
	КЧ = Новый КвалификаторыЧисла(1);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КЧ);
	ТаблицаЗначений.Колонки.Добавить("НомерСпособаАдресации", ОписаниеТиповЧ);
	ТаблицаЗначений.Колонки.Добавить("НомерКартинки", ОписаниеТиповЧ);
	
	// Тип адреса строкой, а нам нужно перечисление.
	ТаблицаЗначений.Колонки.ТипАдреса.Имя = "ТипАдресаСтрокой";
	ТаблицаЗначений.Колонки.Добавить("ТипАдреса",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыАдресатов"));
	Для Каждого СтрокаПолучатель Из ТаблицаЗначений Цикл
		
		Если СтрокаПолучатель.ТипАдресаСтрокой = НСтр("ru = 'Кому:'") Тогда
			СтрокаПолучатель.ТипАдреса = Перечисления.ТипыАдресатов.Кому;
		ИначеЕсли СтрокаПолучатель.ТипАдресаСтрокой = НСтр("ru = 'Копия:'") Тогда
			СтрокаПолучатель.ТипАдреса = Перечисления.ТипыАдресатов.Копия;
		ИначеЕсли СтрокаПолучатель.ТипАдресаСтрокой = НСтр("ru = 'Скрытая копия:'") Тогда
			СтрокаПолучатель.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "Получатели");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателей()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьПолучателейКомуКопия();
	Иначе	
		МассивАдресатов = Новый Массив;
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиОтвета Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		
		СоответствиеДанныхАдресатов = 
			ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
		
		Для Каждого Строка Из Объект.ПолучателиПисьма Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.Кому, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для Каждого Строка Из Объект.ПолучателиКопий Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.Копия, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для Каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.СкрытаяКопия, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для Каждого Строка Из Объект.ПолучателиОтвета Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.ОбратныйАдрес, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьНомераКартинокАдресатов(Получатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ПолучателиТипАдреса" Тогда
		
		Если ПисьмоОтправлено Или РежимТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		Список = Новый СписокЗначений;
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыАдресатов.ОбратныйАдрес"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучателиТипАдресаПослеВыбора",
			ЭтотОбъект);
	
		ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
		
	ИначеЕсли Поле.Имя = "ПолучателиПредставление" Или Поле.Имя = "ПолучателиНомерКартинки" Тогда
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСтроки.Контакт) Тогда
			ПоказатьЗначение(, ДанныеСтроки.Контакт);
		Иначе
			
			ПараметрыОповещения =
				Новый Структура("Адрес,Представление", ДанныеСтроки.Адрес, ДанныеСтроки.Представление);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"АдресатПредставлениеНажатиеПослеВыбора", ЭтотОбъект, ПараметрыОповещения);
			Список = Новый СписокЗначений;
			Список.Добавить("КонтактноеЛицо", "Сохранить как контактное лицо");
			Список.Добавить("Контрагент", "Сохранить как контрагента");
			Список.Добавить("ЛичныйАдресат", "Сохранить как личного адресата");
			ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатПредставлениеНажатиеПослеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
		Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Значение = "КонтактноеЛицо" Тогда
		
		ОписаниеОповещения =
			Новый ОписаниеОповещения("СоздатьКонтактноеЛицоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Контрагент" Тогда
		
		ПараметрыФормы = Новый Структура("Адрес, Представление",
			ДополнительныеПараметры.Адрес,
			ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(ДополнительныеПараметры.Представление));
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, , , , , , РежимОткрытияОкна);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "ЛичныйАдресат" Тогда
		
		ПараметрыФормы = Новый Структура("Адрес, Представление",
			ДополнительныеПараметры.Адрес,
			ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(ДополнительныеПараметры.Представление));
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта", ПараметрыФормы, , , , , , РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТипАдресаПослеВыбора(ВыбранноеЗначение, Параметр) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ТипАдреса = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	
	ОформитьКнопкиПолучателей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовВложений

&НаКлиенте
Процедура ВложенияНадписьНажатие(Элемент)

	Элементы.Вложения.Видимость = Не Элементы.Вложения.Видимость;

	ОформитьКнопкиВложений();

	Если Элементы.Вложения.Видимость
		И Элементы.Получатели.Видимость Тогда
		Элементы.Получатели.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВложенияКонтекстноеМенюУдалить.Доступность = Не Элемент.ТекущиеДанные.ПометкаУдаления;
	Элементы.ВложенияКонтекстноеМенюВернуть.Доступность = Элемент.ТекущиеДанные.ПометкаУдаления;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Расположение <> "Файл" Тогда
		
		ПараметрыЗаписи = Новый Структура("ЗаписьПисьмаПриВыбореФайла", Истина);
		Если Не ЗаписатьКлиент(ПараметрыЗаписи) Тогда
			ЗаписьПисьмаПриВыбореФайла = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЭтоВложенноеПисьмо Тогда
		
		ПараметрыОткрытия = Новый Структура("ФайлПисьма", Элемент.ТекущиеДанные.Ссылка);
			ОткрытьФорму(
				"ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрВложенногоПисьма", 
				ПараметрыОткрытия,
				ЭтотОбъект);
		
	Иначе
		
		ВстроеннаяПочтаКлиент.ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоВыделенных = Элементы.Вложения.ВыделенныеСтроки.Количество();
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить ""%1""?'"), ТекущиеДанные.Представление);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдаленияВложений", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУдаленияВложений(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ТекущиеДанные")
		Или Параметры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Если ТекущиеДанные.Расположение = "Файл"
		И ЗначениеЗаполнено(Параметры.ТекущиеДанные.Ссылка) Тогда
		
		ВложениеПометитьНаУдалениеСервер(ТекущиеДанные.Ссылка, 
			ТекущиеДанные.РедактируетТекущийПользователь,
			Не ТекущиеДанные.ПометкаУдаления);
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Владелец", Объект.Ссылка);
		ПараметрОповещения.Вставить("Файл", ТекущиеДанные.Ссылка);
		ПараметрОповещения.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", Ложь);
		ПараметрОповещения.Вставить("ИдентификаторРодительскойФормы", УникальныйИдентификатор);
		ПараметрОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
		
		Оповестить("Запись_Файл", ПараметрОповещения, ЭтотОбъект);
		
	Иначе
		
		Если ТекущиеДанные.Расположение = "ВременноеХранилище"
			И ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
			
		ИначеЕсли ТекущиеДанные.Расположение = "НаДиске"
			И ЗначениеЗаполнено(ТекущиеДанные.ИмяФайлаНаДиске) Тогда
			
			ЗагруженныйФайл = Новый Файл(ТекущиеДанные.ИмяФайлаНаДиске);
			Если ЗагруженныйФайл.Существует() Тогда
				УдалитьФайлы(ТекущиеДанные.ИмяФайлаНаДиске);
			КонецЕсли;
			
		КонецЕсли;
		
		Вложения.Удалить(ТекущиеДанные);
		
	КонецЕсли;
	
	ОформитьКнопкиВложений();
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка, РедактируетТекущийПользователь, ПометкаУдаления)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	Если ФайлОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
		ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЕсли;
	
	ЗаполнитьВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПоказатьЗначение(, Объект.Предмет);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредметСтрокойНажатиеЗавершениеВыбораТипа", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбораТипаПредмета, Элементы.ПредметСтрокой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатиеЗавершениеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТипВыбранный = ТипЗнч(Результат.Значение);
		
		Если ТипВыбранный = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВыбиратьТолькоПроектнуюЗадачу", Истина);
			
			Если ТипЗнч(ПредметПриОткрытии) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
				ПараметрыФормы.Вставить("ПроектнаяЗадача", ПредметПриОткрытии);
			ИначеЕсли ТипЗнч(ПредметПриОткрытии) = Тип("СправочникСсылка.Проекты") Тогда
				ПараметрыФормы.Вставить("Проект", ПредметПриОткрытии);
			КонецЕсли;
			
			ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы);
			
		Иначе
		
			ПолноеИмя = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипВыбранный);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредметСтрокойНажатиеЗавершение", ЭтотОбъект);
			РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму(ПолноеИмя + ".ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Предмет = Результат;
		ПредметСтрокой = Строка(Объект.Предмет);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьЗначение(, Объект.Проект);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроектСтрокойНажатиеЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.Проекты.ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Проект = Результат;
		ПроектСтрокой = Строка(Объект.Проект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДоступность

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовФормы()
	
	Если ПисьмоОтправлено Или РежимТолькоПросмотр Тогда
		// Ограничим работу
		ТолькоПросмотр = Истина;
		// Вложения.
		Если Вложения.Количество() = 0 Тогда
			Элементы.ГруппаВложения.Видимость = Ложь;
		Иначе
			Элементы.ДобавитьВложения.Видимость = Ложь;
			Элементы.Вложения.ТолькоПросмотр = Истина;
			Элементы.ВложенияКонтекстноеМенюУдалить.Видимость = Ложь;
			Элементы.ВложенияКонтекстноеМенюВернуть.Видимость = Ложь;
			Элементы.Вложения.КонтекстноеМеню.Видимость = Ложь;
		КонецЕсли;
		// Получатели.
		Элементы.ГруппаДобавитьПолучателей.Видимость = Ложь;
		Элементы.Получатели.ТолькоПросмотр = Истина;
		Элементы.ПолучателиТипАдреса.ТолькоПросмотр = Истина;
		Элементы.ПолучателиТипАдреса.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Элементы.ПолучателиТипАдреса.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
		
		// Шапка письма.
		Элементы.ДекорацияВажность.Видимость = Объект.Важность = Перечисления.ВажностьПисем.Высокая;
		Элементы.ДекорацияВажность.Гиперссылка = Ложь;
		Элементы.Тема.ТолькоПросмотр = Истина;
		
		// Текст.
		Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		Элементы.ТекстПисьмаHTML.ТолькоПросмотр = Истина;
		
		// Остальные реквизиты
		Элементы.Важность.ТолькоПросмотр = Истина;
		
		// Меню
		Элементы.ФормаОтправить.Видимость = Ложь;
		Элементы.ФормаГруппаСпособРедактирования.Видимость = Ложь;
		
	КонецЕсли;
	
	ЕстьВложения = (Вложения.Количество() > 0);
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	// перенаправление письма
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма 
		И ЗначениеЗаполнено(Объект.ПисьмоОснование) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда 
		Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		Элементы.Тема.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.Тема.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Вложения.ТолькоПросмотр = Истина;
		Элементы.КомандыHTML.Видимость = Ложь;
		Элементы.ФормаВставитьШаблонТекста.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавитьКартинкуИзБуфераКакФайл.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюВставитьФайлыИсходногоПисьма.Доступность = Ложь;
		Элементы.КнопкаДобавитьФайлы_ВсеДействия.Доступность = Ложь;
		Элементы.ФормаДобавитьКартинкуИзБуфераКакФайл_ВсеДействия.Доступность = Ложь;
		Элементы.ВставитьФайлыИсходногоПисьма_ВсеДействия.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОтправкиПисьма

&НаКлиенте
Процедура Отправить(Команда)
	
	УдалятьНедействительныеАдресатыПриОтправке = Ложь;
	УдалятьДублиПриОтправке = Ложь;
	ЕстьНеверныеКартинки = Ложь;
	ОтправитьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКлиент()
	
	ОчиститьСообщения();
	
	Оповестить("ОбновитьСписокПоследних");
	
	// Порядок проверок
	//  большое количество адресатов
	//  адреса, запрещенные для внешних писем
	//  заполненность проекта, если переписка с dir
	//  пересылка внутреннего письма внешним получателям
	ПродолжениеОтправкиЭтоРассылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОтправкиЭтоРассылка()
	
	Если ПриОтправкеПоказатьПредупреждениеБольшоеЧислоАдресатов
		И ВстроеннаяПочтаКлиентСервер.ЭтоРассылка(Получатели.Количество()) Тогда
		
		КоличествоВнешнихАдресатов = 0;
		Для Каждого Строка Из Получатели Цикл
			Если Строка.Внешний Тогда 
				КоличествоВнешнихАдресатов = КоличествоВнешнихАдресатов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоВнешнихАдресатов < Получатели.Количество() / 2 Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Внимание!
				|Письмо будет отправлено %1 адресатам.
				|Вы уверены?'"),
				Строка(Получатели.Количество()));
		Иначе
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Внимание!
				|Письмо будет отправлено %1 адресатам (в том числе %2 внешним).
				|Для массовых рассылок внешним адресатам рекомендуется использовать сервер http://maillist.1c.ru/.
				|За инструкцией можно обратиться к Василию Маркину.
				|Продолжить отправку?'"),
				Строка(Получатели.Количество()), КоличествоВнешнихАдресатов);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПродолжениеОтправкиЭтоРассылка", ЭтотОбъект);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
		
	КонецЕсли;
	
	ПродолжениеОтправкиПересылкаВнутреннегоПисьмаВнешнимПолучателям();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПродолжениеОтправкиЭтоРассылка(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
	
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		
		ПриОтправкеПоказатьПредупреждениеБольшоеЧислоАдресатов = Ложь;
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
			ПриОтправкеПоказатьПредупреждениеБольшоеЧислоАдресатов);
		
	КонецЕсли;
	
	Если Результат.Отправить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжениеОтправкиПересылкаВнутреннегоПисьмаВнешнимПолучателям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОтправкиПересылкаВнутреннегоПисьмаВнешнимПолучателям()
	
	Если ПересылкаВнутреннегоПисьма
		И ПриОтправкеПоказатьПредупреждениеПересылкаВнутреннихПисемВнешнимПолучателям Тогда
		
		ВнешниеАдресаты = Новый СписокЗначений;
		Для Каждого Строка Из Получатели Цикл
			Если Строка.Внешний Тогда 
				ВнешниеАдресаты.Добавить(Строка.Адресат, Строка.Представление);
			КонецЕсли;
		КонецЦикла;
		
		Если ВнешниеАдресаты.Количество() > 0
			И Не ПриОтправкеИгнорироватьПредупреждениеПересылкуВнутреннихПисемВнешнимПолучателям Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВнешниеАдресаты", ВнешниеАдресаты);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЗавершениеПродолжениеОтправкиПересылкаВнутреннегоПисьмаВнешнимПолучателям", ЭтотОбъект);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.Форма.ВопросПриПересылкеВнешнимАдресатам",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжениеОтправкиОтветНаICalendar();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПродолжениеОтправкиПересылкаВнутреннегоПисьмаВнешнимПолучателям(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПриОтправкеИгнорироватьПредупреждениеПересылкуВнутреннихПисемВнешнимПолучателям = Истина;
	ПродолжениеОтправкиОтветНаICalendar();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОтправкиОтветНаICalendar()

	Если ОригинальноеПисьмоВФорматеICalendar И ПриОтправкеПоказатьПредупреждениеОтветНаICalendar Тогда
		
		ТекстВопроса = НСтр("ru = 'Внимание!
			|Письмо будет отправлено как обычное письмо (а не как принятие приглашения).
			|Продолжить?'");
			
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса);	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПродолжениеОтправкиОтветНаICalendar", ЭтотОбъект);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Возврат;
		
	КонецЕсли;
	
	ПродолжениеОтправкиПроверкаОтсутствияАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПродолжениеОтправкиОтветНаICalendar(Результат, Параметры) Экспорт
		
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.БольшеНеЗадаватьЭтотВопрос Тогда
		
		ПриОтправкеПоказатьПредупреждениеОтветНаICalendar = Ложь;
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar",
			ПриОтправкеПоказатьПредупреждениеОтветНаICalendar);
		
	КонецЕсли;
	
	Если Результат.Отправить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжениеОтправкиПроверкаОтсутствияАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОтправкиПроверкаОтсутствияАдресатов()
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ЗавершениеПродолжениеОтправкиПроверкаОтсутствияАдресатов", ЭтотОбъект);
	
	Результат = Новый Структура;
	Результат.Вставить("Отправить", Истина);
	Результат.Вставить("УдалитьОтсутствующих", Ложь);
	Результат.Вставить("ДобавитьЗаместителей", Ложь);
	Результат.Вставить("Отсутствующие", Новый Массив);
	Результат.Вставить("Заместители", Новый Соответствие);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПродолжениеОтправкиПроверкаОтсутствияАдресатов(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено
		Или Не Результат.Отправить Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиДляДобавления = Новый Соответствие;
	ПользователиДляУдаления = Новый Массив;
	
	Если Результат.ДобавитьЗаместителей Тогда
		
		Для Каждого ЗаместителиКлючИЗначение Из Результат.Заместители Цикл
			
			Сотрудник = ЗаместителиКлючИЗначение.Ключ;
			Заместители = ЗаместителиКлючИЗначение.Значение;
			
			Если Заместители.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТипАдреса = Неопределено;
			Для Каждого Получатель Из Получатели Цикл
				
				Если Получатель.ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.ОбратныйАдрес") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Получатель.Контакт = Сотрудник Тогда
					
					ТекущийТипАдреса = Получатель.ТипАдреса;
					Если ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому")
						Или ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому") Тогда
						ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому");
					ИначеЕсли ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия")
						Или ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия") Тогда
						ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия");
					ИначеЕсли ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия")
						Или ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия") Тогда
						ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия");
					КонецЕсли;
					
					Если Получатель.ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому") Тогда
						Получатель.ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Заместитель Из Заместители Цикл
				
				ТекущийТипАдреса = ПользователиДляДобавления.Получить(Заместитель);
				Если ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому")
					Или ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому") Тогда
					ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому");
				ИначеЕсли ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия")
					Или ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия") Тогда
					ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Копия");
				ИначеЕсли ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия")
					Или ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия") Тогда
					ТекущийТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.СкрытаяКопия");
				КонецЕсли;
				ПользователиДляДобавления.Вставить(Заместитель, ТекущийТипАдреса);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат.УдалитьОтсутствующих И Результат.ДобавитьЗаместителей Тогда
		
		Для Каждого Отсутствующий Из Результат.Отсутствующие Цикл
			
			ЕстьЗаместитель = Ложь;
			Для Каждого ЗаместителиКлючИЗначение Из Результат.Заместители Цикл
				
				Если Отсутствующий = ЗаместителиКлючИЗначение.Ключ И ЗаместителиКлючИЗначение.Значение.Количество() <> 0 Тогда
					ЕстьЗаместитель = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьЗаместитель Тогда
				ПользователиДляУдаления.Добавить(Отсутствующий);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Результат.УдалитьОтсутствующих И Не Результат.ДобавитьЗаместителей Тогда
		
		ПользователиДляУдаления = Результат.Отсутствующие;
		
	КонецЕсли;
	
	Для Каждого УдаляемыйПользователь Из ПользователиДляУдаления Цикл
		КоличествоЭлементов = Получатели.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			Строка = Получатели[КоличествоЭлементов - Индекс];
			Если Строка.Контакт = УдаляемыйПользователь Тогда
				Получатели.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПользователиДляДобавления.Количество() <> 0 Тогда
		ДобавитьПользователейВПолучатели(ПользователиДляДобавления);
	КонецЕсли;
	
	ЗавершениеОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПродолжениеОтправкиПроверкаУзлаКОД(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершениеОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправки()
	
	Объект.ОтправкаОтменена = Ложь;
	ПараметрыЗаписи = Новый Структура;
	ВыполняетсяОтправка = Истина;
	Если Не ЗаписатьКлиент(ПараметрыЗаписи) Тогда
		
		Состояние(НСтр("ru = 'Отправка приостановлена.'"));
		
		ПодключитьОбработчикОжидания("ЗавершениеОтправкиПослеОжидания", 0.7, Истина);
		Возврат;
		
	КонецЕсли;
	
	ВыполняетсяОтправка = Ложь;
	
	Если ЗначениеЗаполнено(ИсходноеПисьмо)
		И ИсходноеПисьмоКоманда = "ОтветитьВсем" Или ИсходноеПисьмоКоманда = "Ответить" Тогда
		Оповестить("ПисьмоОтправлено", ИсходноеПисьмо);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправкиПослеОжидания()
	
	Состояние();
	
	ВыполняетсяОтправка = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьАдресатаВручную(Команда)
	
	ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Вставить("ОсновнойАдресПочты", ОсновнойАдресПочты);
	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыФормы.Вставить("ЗаполненыПараметрыEmailУчетнойЗаписи", Истина);
	ПараметрыФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	//ПараметрыФормы.Вставить("АвтоподборАдресатовПриВводе", АвтоподборАдресатовПриВводе);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВводПолучателяПисьма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресатаИзАдреснойКниги(Команда)
	
	Если ПисьмоОтправлено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Не указана учетная запись.
					|Рекомендуется в настройках почты установить учетную запись по умолчанию.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому");

	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РежимРаботыФормы", 2); // выбор нескольких адресатов
	ПараметрыОткрытия.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьРоли", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьЭлектронныеАдреса", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьПочты", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("ПоказыватьТипАдресов", Истина);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", ТипАдреса);
	ПараметрыОткрытия.Вставить("КонтекстОткрытия", Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МножественныйВыбор", Истина);
	ДополнительныеПараметры.Вставить("ТипАдреса",ТипАдреса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораИзАдреснойКниги", ЭтотОбъект, ДополнительныеПараметры);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораИзАдреснойКниги(Результат, Параметры) Экспорт

	Если (ТипЗнч(Результат) <> Тип("Массив"))
		И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДополнитьСведенияОбАдресатах(Результат);
	ДобавитьАдресатов(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСведенияОбАдресатах(СведенияОбАдресатах)
	
	// Развернем ПолныеРоли в Роли.
	Для Каждого ПолученныйАдресат Из СведенияОбАдресатах Цикл
		Если ТипЗнч(ПолученныйАдресат.Контакт) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ПолученныйАдресат.Контакт =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныйАдресат.Контакт, "Владелец");
		КонецЕсли;
	КонецЦикла;
	
	СведенияОПочтовыхАдресатах =
		ВстроеннаяПочтаСервер.ПолучитьСоответствиеАдресатовПоАдресуИКонтакту(СведенияОбАдресатах);
	
	Контакты = Новый Массив;
	
	Для Каждого ЭлементМассива Из СведенияОбАдресатах Цикл
		
		СведенияОПочтовомАдресата = СведенияОПочтовыхАдресатах[НРег(ЭлементМассива.Адрес)];
		ЭлементМассива.Вставить("Адресат", СведенияОПочтовомАдресата.Адресат);
		ЭлементМассива.Вставить("Внешний", СведенияОПочтовомАдресата.Внешний);
		ЭлементМассива.Вставить("ОписаниеОтсутствия", Неопределено);
		
		Контакты.Добавить(ЭлементМассива.Контакт);
		
	КонецЦикла;
	
	ОписанияОтсутствий = Отсутствия.ПолучитьОписанияТекущихОтсутствийСотрудников(Контакты);
	
	Для Каждого Контакт Из Контакты Цикл
		ЭлементМассива.Вставить("ОписаниеОтсутствия", ОписанияОтсутствий[Контакт]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтОтображения(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
		#Если Не ВебКлиент Тогда
			ДиалогВыбораШрифта.Шрифт = ШрифтОтображения;
		#КонецЕсли
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьШрифтОтображенияЗавершение", ЭтотОбъект);
		
		ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтОтображенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШрифтОтображенияУстановлен = Ложь;
		Если ШрифтОтображения <> НастройкаШрифтОтображения Тогда
			ШрифтОтображения = НастройкаШрифтОтображения;
			ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
				ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШрифтОтображения = Результат;
	
	ШрифтПочтыПоУмолчанию = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	ИмяШрифта = ?(Не ПустаяСтрока(ШрифтОтображения.Имя), ШрифтОтображения.Имя, ШрифтПочтыПоУмолчанию.Имя);
	РазмерШрифта = ?(ШрифтОтображения.Размер > 1, ШрифтОтображения.Размер, ШрифтПочтыПоУмолчанию.Размер);
	
	ШрифтОтображения = Новый Шрифт(ИмяШрифта, РазмерШрифта);
	ШрифтОтображенияУстановлен = Истина;
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры


#Область РаботаСВложениями

&НаКлиенте
Процедура ОтображатьУдаленныеФайлы(Команда)
	ОтображатьУдаленныеФайлыСервер();
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеФайлыСервер()
	
	ОтображатьУдаленныеФайлы = Не ОтображатьУдаленныеФайлы;
	Элементы.ФормаОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтотОбъект.ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		ОтображатьУдаленныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеФото(Команда)
	НачатьПрикреплениеВложения("Фото");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВидео(Команда)
	НачатьПрикреплениеВложения("Видео");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеГолос(Команда)
	НачатьПрикреплениеВложения("Аудио");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеФайл(Команда)
	НачатьПрикреплениеВложения("Файл");
КонецПроцедуры

&НаКлиенте
Процедура НачатьПрикреплениеВложения(ТипДанных)
	
	ЗавершениеПрикрепленияВложения = Новый ОписаниеОповещения("ЗавершениеПрикрепленияВложения", ЭтотОбъект);
	МобильныйКлиентНаКлиенте.НачатьПолучениеМультимедиаДанных(ТипДанных, ЗавершениеПрикрепленияВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПрикрепленияВложения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРезультатов = Результат;
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		МассивРезультатов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
	КонецЕсли;
	
	ТекстОшибок = Новый Массив;
	
	Для Каждого ЛокальныйАдресФайла Из МассивРезультатов Цикл
		
		ДанныеФайла =
			МобильныйКлиентНаКлиенте.ИнформацияОМультимедиаФайле(ЛокальныйАдресФайла);
		
		Если ДанныеФайла <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеФайла.Ошибка) Тогда
				ТекстОшибок.Добавить(ДанныеФайла.Ошибка);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
			НоваяСтрока.ИмяФайла = ДанныеФайла.Представление;
			НоваяСтрока.Представление = ДанныеФайла.Представление;
			НоваяСтрока.ИмяФайлаНаДиске = ДанныеФайла.АдресВременногоФайла;
			НоваяСтрока.Расположение = "НаДиске";
			НоваяСтрока.ИндексКартинки =
				ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОформитьКнопкиВложений();
	
	// Удалим файлы из временной папки и выдадим исключение
	Если ТекстОшибок.Количество() > 0 Тогда
		ТекстСообщения = СтрСоединить(ТекстОшибок, Символы.ПС);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Вложения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вернуть(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдаленияВложений", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение(Команда)
	
	ТекДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
		Элементы.Вложения.ТекущиеДанные.Ссылка,
		Неопределено,
		УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПереключениеФорматаРедактированияТекста

&НаКлиенте
Процедура ФорматТекст(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ТекстВопроса = НСтр("ru = 'Преобразование письма в текст удалит форматирование, вставленные изображения, таблицы, гиперссылки и другие элементы оформления.
			|Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеФорматТекст", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеФорматТекст(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// преобразуем HTML в текст
	ВыполнитьПереключениеВТекст();
	Модифицированность = Истина;
	
	ОформитьЭлементыПоФорматуТекста();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить("ИзменилосьСодержаниеПисьма", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматHTML(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Возврат;
	КонецЕсли;
	
	// преобразуем текст в HTML
	ВыполнитьПереключениеВHTML();
	
	ОформитьЭлементыПоФорматуТекста();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить("ИзменилосьСодержаниеПисьма", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВHTML()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстHTMLДляИсходящегоПисьмаИзПростогоТекста(ТекстПисьма);
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
	
	ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
		ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
	ВключитьРежимРедактированияHTML();
	ОформитьЭлементыПоФорматуТекста();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВТекст()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма);
	
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	
	ОформитьЭлементыПоФорматуТекста();
	
	// получаем только файлы картинки в теле HTML - в режиме HTML они не видны как вложения,
	// но при смене формата в текст станут видны
	
	ИдентификаторыКартинокПисьма.Очистить();
	ВложенияКартинки.Очистить();
	СписокДобавленныхФайлов.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Истина,    // ТолькоСИдентификаторами
			Ложь); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать

		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			ВложенияСтрока.Расположение = "Файл";
			
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УдалитьИдентификаторПочтовогоВложения(ФайлыПисьмаСтрока.Ссылка);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ОснованиеПисьма) Тогда	
		
		КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
		ВставитьФайлыИсходногоПисьмаСервер(ОснованиеПисьма, КопироватьТолькоФайлыСИдентификаторомВложений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементыПоФорматуТекста()
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Элементы.ТекстПисьма.Видимость = Ложь;
		Элементы.ФормаФорматТекст.Пометка = Ложь;
		
		Элементы.ТекстПисьмаHTML.Видимость = Истина;
		Элементы.ФормаФорматHTML.Пометка = Истина;
		
		Элементы.ФормаИзменитьШрифтОтображения.Видимость = Истина;
		
	Иначе
		
		Элементы.ТекстПисьма.Видимость = Истина;
		Элементы.ФормаФорматТекст.Пометка = Истина;
		
		Элементы.ТекстПисьмаHTML.Видимость = Ложь;
		Элементы.ФормаФорматHTML.Пометка = Ложь;
		
		Элементы.ФормаИзменитьШрифтОтображения.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФлагамиИПрочтением

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	УстановитьФлаг(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка"));
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКомандыПоменятьПометкуПрочтения()
	
	Элементы.ФормаПоменятьПометкуПрочтения.Видимость = Истина;
	
	Если ПисьмоПрочтено Тогда 
		Элементы.ФормаПоменятьПометкуПрочтения.Заголовок = НСтр("ru = 'Не прочтено'");
		Элементы.ФормаПоменятьПометкуПрочтения.Картинка  = 
			БиблиотекаКартинок.НепрочтенноеПисьмо;
	Иначе
		Элементы.ФормаПоменятьПометкуПрочтения.Заголовок = НСтр("ru = 'Прочтено'");
		Элементы.ФормаПоменятьПометкуПрочтения.Картинка  = 
			БиблиотекаКартинок.ПрочтенноеПисьмо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьПометкуПрочтения(Команда)
	
	ВыполнитьСменуПометкиПрочтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСменуПометкиПрочтения()
	
	РезультатОбработки = ПометитьКакПрочтенноеСервер();
	
	Оповестить("ПисьмаИзменены", , ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПометитьКакПрочтенноеСервер()
	
	РежимМоиПапки = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	РезультатОбработки = РаботаСПрочтениями.УстановитьСвойствоПрочтен(Объект.Ссылка, Не ПисьмоПрочтено);
	
	ПисьмоПрочтено = Не ПисьмоПрочтено;
	
	УстановитьОформлениеКомандыПоменятьПометкуПрочтения();
	ЗаполнитьНомерКартинкиФлагаПрочтения();
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПисьмоПрочтеноФлагНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПисьмоПрочтеноФлагПослеВыбора",
		ЭтотОбъект);
		
	Список = Новый СписокЗначений;
	Если Не ЭтоНовоеПисьмо Тогда
		Если ПисьмоПрочтено Тогда
			Список.Добавить(Ложь, "Не прочтено",,БиблиотекаКартинок.ОранжевыйБуллетКрупный);
		Иначе
			Список.Добавить(Истина, "Прочтено",,БиблиотекаКартинок.ИндикаторПрочтенностиДляШапки);
		КонецЕсли;
	КонецЕсли;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"), НСтр("ru='Красный флаг'"),,
		БиблиотекаКартинок.КрасныйФлаг);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"), НСтр("ru='Синий флаг'"),,
		БиблиотекаКартинок.СинийФлаг);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"), НСтр("ru='Желтый флаг'"),,
		БиблиотекаКартинок.ЖелтыйФлаг);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"), НСтр("ru='Зеленый флаг'"),,
		БиблиотекаКартинок.ЗеленыйФлаг);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"), НСтр("ru='Оранжевый флаг'"),,
		БиблиотекаКартинок.ОранжевыйФлаг);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"), НСтр("ru='Лиловый флаг'"),,
		БиблиотекаКартинок.ЛиловыйФлаг);
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка"), НСтр("ru='Очистить'"),,
		БиблиотекаКартинок.ПустойФлаг);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмоПрочтеноФлагПослеВыбора(ВыбранноеЗначение, Параметр) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение.Значение) = Тип("ПеречислениеСсылка.ФлагиОбъектов") Тогда
		УстановитьФлаг(ВыбранноеЗначение.Значение);
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Объект.Ссылка);
			Оповестить("ИзменилсяФлаг", МассивОбъектов, ЭтотОбъект);
		КонецЕсли;
	
	Иначе
		ВыполнитьСменуПометкиПрочтения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлаг(ЗначениеФлага)
	
	Флаг = ЗначениеФлага;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СохранитьФлаг();
	КонецЕсли;
	
	ЗаполнитьНомерКартинкиФлагаПрочтения();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФлаг()
	
	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектуОтТекущегоПользователя(
		Объект.Ссылка,
		Флаг);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерКартинкиФлагаПрочтения()
	
	НомерФлага = РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(Флаг);
	
	НомерКартинкиПрочтениеФлаг = -1;
	Элементы.ПисьмоПрочтеноФлаг.КартинкаЗначений = БиблиотекаКартинок.МККоллекцияФлаги;
	Если Не ПисьмоПрочтено Тогда
		
		НомерКартинкиПрочтениеФлаг = 0;
		Если НомерФлага > 0 Тогда
			НомерКартинкиПрочтениеФлаг = НомерФлага + 6;
		КонецЕсли;
		
	ИначеЕсли НомерФлага > 0 Тогда
		
		НомерКартинкиПрочтениеФлаг = НомерФлага;
		
	Иначе
		
		НомерКартинкиПрочтениеФлаг = 0;
		Элементы.ПисьмоПрочтеноФлаг.КартинкаЗначений = БиблиотекаКартинок.ИндикаторПрочтенностиДляШапки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВсеРеквизиты(Команда)
	
	ВидМаршрутизацииВнешний = ПредопределенноеЗначение("Перечисление.ВидыМаршрутизацииПисем.Внешняя");
	
	ВнешниеАдресаты = Новый Массив;
	Для Каждого Строка Из Получатели Цикл
		Если Строка.ВидМаршрутизации = ВидМаршрутизацииВнешний Тогда
			ВнешниеАдресаты.Добавить(Строка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ВнешнееПисьмоТекстЗаголовка = НСтр("ru = 'Порядок доставки не определен'");
	ВнешнееПисьмоТекстСообщения = НСтр("ru = 'Для незаписанного письма невозможно определить причину вида маршрутизации.'");
	ТекстВнешнееПисьмо = "";
	Если ВнешниеАдресаты.Количество() > 0 Тогда
		ТекстВнешнееПисьмо = НСтр("ru = 'Это внешнее письмо'");
		ВнешнееПисьмоТекстСообщения =
			СтрШаблон(
				НСтр("ru = 'Это внешнее письмо, так как некоторые его получатели не являются пользователями 1С:Документооборот:
							| - %1'"),
				СтрСоединить(ВнешниеАдресаты, Символы.ПС + " - "));
		ВнешнееПисьмоТекстЗаголовка = НСтр("ru = 'Внешнее письмо'");
		
	Иначе
		ТекстВнешнееПисьмо = НСтр("ru = 'Это внутреннее письмо'");
		ВнешнееПисьмоТекстСообщения =
			НСтр("ru = 'Это внутреннее письмо, так как все его получатели являются пользователями 1С:Документооборот.'");
		ВнешнееПисьмоТекстЗаголовка = НСтр("ru = 'Внутреннее письмо'");
		
	КонецЕсли;
	
	ТекстВидМаршрутизации = "";
	ВидМаршрутизацииТекстЗаголовка = "";
	ВидМаршрутизацииТекстСообщения = "";
	Если Не ИспользоватьВнутреннююМаршрутизацию Тогда 
		ТекстЗаголовка = НСтр("ru = 'Доставка через почтовый сервер'");
		ТекстСообщения = НСтр("ru = 'Выключено использование внутренней маршрутизации'");
	ИначеЕсли ТипЗнч(ВидыМаршрутизацииПисьма) = Тип("Структура") 
			И ВидыМаршрутизацииПисьма.ВнутренняяМаршрутизация И ВидыМаршрутизацииПисьма.ВнешняяМаршрутизация Тогда
		ТекстЗаголовка = НСтр("ru = 'Доставка через почтовый сервер и внутреннюю маршрутизацию'");
		ТекстСообщения =
			НСтр("ru = 'Письмо содержит получателей, которые работают с почтой в 1С:Документооборот, а также внешних получателей:'");
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ Символы.ПС + " - " + СтрСоединить(ВнешниеАдресаты, Символы.ПС + " - ");
	ИначеЕсли ТипЗнч(ВидыМаршрутизацииПисьма) = Тип("Структура") И ВидыМаршрутизацииПисьма.ВнутренняяМаршрутизация Тогда
		ТекстЗаголовка = НСтр("ru = 'Внутренняя доставка'");
		ТекстСообщения = НСтр("ru = 'Все получатели этого письма работают с почтой в 1С:Документооборот.'")
	ИначеЕсли ТипЗнч(ВидыМаршрутизацииПисьма) = Тип("Структура") И ВидыМаршрутизацииПисьма.ВнешняяМаршрутизация Тогда 
		ТекстЗаголовка = НСтр("ru = 'Доставка через почтовый сервер'");
		ТекстСообщения =
			НСтр("ru = 'Письмо содержит получателей, которые являются внешними или не работают с почтой в 1С:Документооборот:'");
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ Символы.ПС + " - " + СтрСоединить(ВнешниеАдресаты, Символы.ПС + " - ");
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытияФормы.Вставить("Папка", Объект.Папка);
	ПараметрыОткрытияФормы.Вставить("Предмет", Объект.Предмет);
	ПараметрыОткрытияФормы.Вставить("Проект", Объект.Проект);
	ПараметрыОткрытияФормы.Вставить("Важность", Объект.Важность);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизации", ТекстВидМаршрутизации);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмо", ТекстВнешнееПисьмо);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмоТекстЗаголовка", ВнешнееПисьмоТекстЗаголовка);
	ПараметрыОткрытияФормы.Вставить("ВнешнееПисьмоТекстСообщения", ВнешнееПисьмоТекстСообщения);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизацииТекстЗаголовка", ВидМаршрутизацииТекстЗаголовка);
	ПараметрыОткрытияФормы.Вставить("ВидМаршрутизацииТекстСообщения", ВидМаршрутизацииТекстСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВсеРеквизитыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.РеквизитыПисьма", 
		ПараметрыОткрытияФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВсеРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект.Предмет = Результат.Предмет;
		Объект.Проект = Результат.Проект;
		Объект.УчетнаяЗапись = Результат.УчетнаяЗапись;
		Объект.Папка = Результат.Папка;
		
		ЗаполнитьПредставлениеПроектаИлиПредмета(Объект.Предмет, ПредметСтрокой);
		ЗаполнитьПредставлениеПроектаИлиПредмета(Объект.Проект, ПроектСтрокой);
		
		Модифицированность = Истина;
		
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНастройки()
	
	ПриОтправкеПоказатьПредупреждениеПересылкаВнутреннихПисемВнешнимПолучателям =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям");
	
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
		"ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	
	ДобавлятьАвтораИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ДобавлятьАвтораИсходногоПисьмаПриПересылке");
	
	ПриОтправкеПоказатьПредупреждениеБольшоеЧислоАдресатов =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов");
	
	ПриОтправкеПоказатьПредупреждениеОтветНаICalendar =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar");
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьМаксимальныйРазмерВнешнегоИсходящегоПисьма();
	
	ИспользоватьВнутреннююМаршрутизацию = Константы.ИспользоватьВнутреннююМаршрутизацию.Получить();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ОтображатьУдаленныеФайлы =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтотОбъект.ИмяФормы,
			"ОтображатьУдаленныеФайлы",
			Ложь);
	Элементы.ФормаОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресатов(Адресаты)

	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;

	Для Каждого ЭлементМассива Из Адресаты Цикл

		АдресатУжеЕстьВПолучателях = Ложь;
		Для Каждого Строка Из Получатели Цикл
			Если Строка.Адрес = ЭлементМассива.Адрес Тогда
				АдресатУжеЕстьВПолучателях = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не АдресатУжеЕстьВПолучателях Тогда
			
			НоваяСтрока = Получатели.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
			
			ТипАдреса = Неопределено;
			ЭлементМассива.Свойство("ТипПолучателя", ТипАдреса);
			Если ТипАдреса = Неопределено Тогда
				ТипАдреса = ПредопределенноеЗначение("Перечисление.ТипыАдресатов.Кому");
			КонецЕсли;
			НоваяСтрока.ТипАдреса = ТипАдреса;
			
			Если ЭлементМассива.Свойство("Внешний") <> Неопределено Тогда
				НоваяСтрока.НомерКартинки = НомерКартинкиАдресата(
												ЭлементМассива["Внешний"],
												ЭлементМассива["ОписаниеОтсутствия"]);
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОформитьКнопкиПолучателей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинкиАдресата(Внешний, ОписаниеОтсутствия)
	
	Если Внешний Тогда
		НомерКартинкиАдресата = 0;
	Иначе // внутренний
		Если ОписаниеОтсутствия = Неопределено Тогда
			НомерКартинкиАдресата = 1;
		Иначе
			НомерКартинкиАдресата = 3;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерКартинкиАдресата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьНомераКартинокАдресатов(Получатели)
	
	МассивПолучателей = Новый Массив;
	
	Для Каждого Получатель Из Получатели Цикл
		Если ЗначениеЗаполнено(Получатель.Контакт) Тогда
			МассивПолучателей.Добавить(Получатель.Контакт);
		КонецЕсли;
	КонецЦикла;
	
	ОписанияОтсутствий = Отсутствия.ПолучитьОписанияТекущихОтсутствийСотрудников(МассивПолучателей);
	
	Для Каждого Получатель Из Получатели Цикл
		ОписаниеОтсутствия = ОписанияОтсутствий[Получатель.Контакт];
		Получатель.НомерКартинки = НомерКартинкиАдресата(
			Получатель.Внешний,
			ОписаниеОтсутствия);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкиПолучателей()

	КоличествоПолучателей = Получатели.Количество();

	Если КоличествоПолучателей = 0 Тогда
		Элементы.Получатели.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.Получатели.Видимость Тогда
		НоваяВысотаТаблицы = ?(КоличествоПолучателей <=4, КоличествоПолучателей, 4);
		Если Элементы.Получатели.ВысотаВСтрокахТаблицы <> НоваяВысотаТаблицы Тогда
			Элементы.Получатели.ВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
			Элементы.Получатели.МаксимальнаяВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
			Элементы.Получатели.Высота = НоваяВысотаТаблицы;
			Элементы.Получатели.МаксимальнаяВысота = НоваяВысотаТаблицы;
		КонецЕсли;
	КонецЕсли;

	Элементы.ПолучателиТекст.Заголовок = 
		СтрШаблон(
			НСтр("ru = '%1 Получатели (%2)'"),
			?(Элементы.Получатели.Видимость = Ложь, "►","▼"),
			Формат(КоличествоПолучателей, "ЧН=0; ЧГ="));
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкиВложений()
	
	КоличествоВложений = Вложения.Количество();
	
	Если КоличествоВложений = 0 Тогда
		Элементы.Вложения.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.Вложения.Видимость Тогда
		НоваяВысотаТаблицы = ?(КоличествоВложений <=4, КоличествоВложений, 4);
		Если Элементы.Вложения.ВысотаВСтрокахТаблицы <> НоваяВысотаТаблицы Тогда
			Элементы.Вложения.ВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
			Элементы.Вложения.МаксимальнаяВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
			Элементы.Вложения.Высота = НоваяВысотаТаблицы;
			Элементы.Вложения.МаксимальнаяВысота = НоваяВысотаТаблицы;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВложенияНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = '%1 Вложения (%2)'"),
			?(Элементы.Вложения.Видимость = 0, "►","▼"),
			Формат(КоличествоВложений, "ЧН=0; ЧГ="));
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьКнопокМультимедиаВложений()
#Если МобильныйКлиент Тогда
	Элементы.ВложенияДобавитьВидео.Доступность = СредстваМультимедиа.ПоддерживаетсяВидеозапись();
	Элементы.ВложенияДобавитьФото.Доступность = СредстваМультимедиа.ПоддерживаетсяФотоснимок();
	Элементы.ВложенияДобавитьГолос.Доступность = СредстваМультимедиа.ПоддерживаетсяАудиозапись();
#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмо(Параметры)
	
	ИспользованныйШаблон = Неопределено;
	
	// Определим тип текста нового письма.
	// Если есть основание заполнения, попробуем определить по нему.
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		
		// Создали письмо на основании другого письма.
		Если Не Параметры.ЗначенияЗаполнения.Свойство("Письмо") Тогда
			ВызватьИсключение НСтр("ru = 'Некорректное значение заполнения'");
		КонецЕсли;
		
		Письмо = Параметры.ЗначенияЗаполнения.Письмо;
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
			ContentType = ВстроеннаяПочтаСервер.ПолучитьЗначениеПоляИзЗаголовкаПисьма(Письмо.ВнутреннийЗаголовок, "Content-Type");
			Если СтрНайти(НРег(ContentType), "text/calendar") > 0 Тогда 
				СодержаниеПисьма = Письмо.ПолучитьОбъект().ПолучитьСодержаниеПисьма();
				ТекстHTML = СодержаниеПисьма.Текст;
				Если СтрНайти(ТекстHTML, "BEGIN:VCALENDAR") <> 0 Тогда
					ОригинальноеПисьмоВФорматеICalendar = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ФорматОтветныхИПересылаемыхПисем = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ФорматОтветныхИПересылаемыхПисем");
		Если ФорматОтветныхИПересылаемыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ПростойТекст") Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
		Иначе
			
			Если ФорматОтветныхИПересылаемыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыОтветныхИПересылаемыхПисем.ФорматИсходногоПисьма") Тогда
				ТипТекста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ТипТекста");
				Объект.ТипТекста = ТипТекста; // копируется тип текста из письма основания
			Иначе
				Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
			КонецЕсли;
			
			Если ОригинальноеПисьмоВФорматеICalendar Тогда
				Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML; // на iCalendar ответ всегда в HTML
			КонецЕсли;
		
		КонецЕсли;
		
		ФорматОтветныхИПересылаемыхПисем = Неопределено;
		Письмо = Неопределено;
		
	Иначе // новое письмо
		
		ФорматНовыхПисем = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ФорматНовыхПисем");
		
		Если ФорматНовыхПисем = ПредопределенноеЗначение("Перечисление.ФорматыНовыхПисем.HTML") Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
		Иначе
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
		КонецЕсли;
		
		ФорматНовыхПисем = Неопределено;
		
	КонецЕсли;
	
	// Для некоторых типов оснований тип текста задается принудительно.
	Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЕженедельныйОтчет") Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("Тема")
			И Параметры.Основание.Свойство("ТекстПисьма")
			И Параметры.Основание.Свойство("ТипТекста") Тогда 
			Объект.ТипТекста = Параметры.Основание.ТипТекста;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма 
		И ЗначениеЗаполнено(Объект.ПисьмоОснование)
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ПисьмоОснование) Тогда
		Объект.ТипТекста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПисьмоОснование, "ТипТекста");
	КонецЕсли;
	
	Если Параметры.Свойство("Вложения") Тогда
		Для каждого ВложениеИнфо Из Параметры.Вложения Цикл
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьПолноеИмяФайла(ВложениеИнфо.ИмяФайла);
			ВложенияСтрока = Вложения.Добавить();
			ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложениеИнфо);
			ВложенияСтрока.ИндексКартинки =
				ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Тема") Тогда
		Объект.Тема = Параметры.Тема;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		
		Команда = Параметры.ЗначенияЗаполнения.Команда;
		Если Не Параметры.ЗначенияЗаполнения.Свойство("Письмо") Тогда
			ВызватьИсключение НСтр("ru = 'Некорректное значение заполнения'");
		КонецЕсли;
		
		Письмо = Параметры.ЗначенияЗаполнения.Письмо;
		
		Если Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
			РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письмо);
		КонецЕсли;
		
		ОснованиеПисьма = Письмо;
		
		КопироватьТолькоФайлыСИдентификаторомВложений = Ложь;
		КопироватьТолькоБезИдентификаторовВложений = Ложь;
		СкопироватьВложения = Истина;
		
		Если Команда = "Ответить"
			Или Команда = "ОтветитьВсем" Тогда
			
			ОтвечатьСФайлами = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтвечатьСФайлами");
			Если Не ОтвечатьСФайлами Тогда
				СкопироватьВложения = Ложь;
				
				// Для HTML надо скопировать картинки
				Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
					СкопироватьВложения = Истина;
					КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Команда = "ПереслатьКакВложение" Тогда
			СкопироватьВложения = Ложь;
			
		КонецЕсли;
		
		ТипТекстаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ТипТекста");
		Если Не СкопироватьВложения
			И ТипТекстаОснования = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
			
			СкопироватьВложения = Истина;
			КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
			
		КонецЕсли;
		
		Если СкопироватьВложения Тогда
			ВставитьФайлыИсходногоПисьмаСервер(
				Письмо,
				КопироватьТолькоФайлыСИдентификаторомВложений,
				КопироватьТолькоБезИдентификаторовВложений);
		КонецЕсли;
		
		ИсходноеПисьмоКоманда = Команда;
		ИсходноеПисьмо = Письмо;
		// Пустые блоки остаются, для понимания возможных Команд.
		Если Команда = "Переслать" Тогда
			
		ИначеЕсли  Команда = "ПереслатьСКопией" Тогда	
			ПересылкаСКопией = Истина;
			
		ИначеЕсли Команда = "ОтветитьВсем" Или Команда = "Ответить" Тогда
			ИсходноеПисьмоПрочтено = РаботаСПрочтениями.ПолучитьСвойствоПрочтен(Письмо);
			
		ИначеЕсли Команда = "Перенаправить" Тогда
			
		ИначеЕсли Команда = "ПереслатьКакВложение" Тогда
			
			ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОПисьмахВложениях(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Письмо));
			
			Для Каждого ФайлИнфо Из ФайлыИнфо Цикл
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
				ВложенияСтрока.Расположение = "СсылкаНаФайл";
			КонецЦикла;
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректная команда работы с письмом'");
		КонецЕсли;
		
		Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
			
			ПисьмоОбъект = Письмо.ПолучитьОбъект();
			СодержаниеПисьмаОснования = ПисьмоОбъект.ПолучитьСодержаниеПисьма();
			ТекстПисьма = СодержаниеПисьмаОснования.Текст;
			
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				ВстроеннаяПочтаСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
			КонецЕсли;
			
		Иначе
			
			ИспользованныйШаблон = Неопределено;
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.ЗначенияЗаполнения.Письмо,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета,
				ИспользованныйШаблон);
				
			Если ЗначениеЗаполнено(ИспользованныйШаблон) 
				И ИспользованныйШаблон.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML 
				И Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				
				КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
				КопироватьТолькоБезИдентификаторовВложений = Ложь;
				ВставитьФайлыИсходногоПисьмаСервер(ИспользованныйШаблон, КопироватьТолькоФайлыСИдентификаторомВложений,
					КопироватьТолькоБезИдентификаторовВложений);
				
				СкопироватьКартинкиПисьмаОснования(ИспользованныйШаблон);
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И Команда <> "ПереслатьКакВложение" Тогда
			
			СкопироватьКартинкиПисьмаОснования(ИсходноеПисьмо);
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Основание")
		И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		Если ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ШаблоныПисем") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание,
				"ТипТекста, Кодировка");
			
			Объект.ТипТекста = РеквизитыОснования.ТипТекста;
			Объект.Кодировка = РеквизитыОснования.Кодировка;
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.Основание,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
				
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда 
				ВставитьФайлыИсходногоПисьмаСервер(Параметры.Основание,, Истина);
			Иначе 
				ВставитьФайлыИсходногоПисьмаСервер(Параметры.Основание);
			КонецЕсли;
			
			ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
				ТекстПисьма,
				Параметры.Основание,
				УникальныйИдентификатор);
				
		Иначе
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
							Параметры.Основание,
							Объект.ТипТекста,
							Объект.Кодировка,
							Объект.ТипОтвета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИспользованныйШаблон) 
			И ИспользованныйШаблон.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			
			КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
			КопироватьТолькоБезИдентификаторовВложений = Ложь;
			ВставитьФайлыИсходногоПисьмаСервер(ИспользованныйШаблон, КопироватьТолькоФайлыСИдентификаторомВложений,
				КопироватьТолькоБезИдентификаторовВложений);
			
			СкопироватьКартинкиПисьмаОснования(ИспользованныйШаблон);
			
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Параметры.Основание)
			Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Параметры.Основание) Тогда
			
			МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.Основание, Ложь);
			ДобавитьВложениеФайлы(МассивФайлов, Истина); // ИгнорироватьЗанятость=Истина
			
			Если ДелопроизводствоКлиентСервер.ЭтоКомплект(Параметры.Основание) Тогда
				
				КомплектующиеИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(
					Параметры.Основание, Ложь);
				
				Для каждого Элемент Из КомплектующиеИнфо.Элементы Цикл
					МассивФайловДочерний = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Элемент, Ложь);
					Для Каждого Файл Из МассивФайловДочерний Цикл
						МассивФайлов.Добавить(Файл);
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФайл(Параметры.Основание) Тогда
			
			ФайлИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Параметры.Основание,
				"Наименование, ИндексКартинки, ТекущаяВерсияРазмер");
			
			ВложенияСтрока = Вложения.Добавить();
			ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
			
			ВложенияСтрока.Ссылка = Параметры.Основание;
			ВложенияСтрока.ИмяФайла = ФайлИнфо.Наименование;
			ВложенияСтрока.Представление = ФайлИнфо.Наименование;
			ВложенияСтрока.ИндексКартинки = ФайлИнфо.ИндексКартинки;
			ВложенияСтрока.Размер = ФайлИнфо.ТекущаяВерсияРазмер;
			ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
			ВложенияСтрока.Расположение = "СсылкаНаФайл";
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Параметры.Основание) Тогда
			
			ПисьмоОтправленоВОтветНа = Параметры.Основание;
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ПредметПереписки);
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				Объект.Предмет = ПредметПереписки;
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Параметры.Основание) Тогда
			
			ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ОтправленВОтветНа);
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ПредметПереписки);
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				Объект.Предмет = ПредметПереписки;
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоБронь(Параметры.Основание) Тогда
			
			Объект.Тема = БронированиеПомещений.ПолучитьОписаниеБрони(Параметры.Основание, Ложь);
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ЗаполнитьИзЧатБота") Тогда
		
		СтруктураПисьма = Новый Структура();
		СтруктураПисьма.Вставить("Тема", Параметры.Тема);
		СтруктураПисьма.Вставить("ТекстПисьма", Параметры.ТекстПисьма);
		ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				СтруктураПисьма,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Параметры.ЗначениеКопирования) Тогда 
		
		ПисьмоОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		
		СодержаниеПисьмаОснования = ПисьмоОбъект.ПолучитьСодержаниеПисьма();
		ТекстПисьма = СодержаниеПисьмаОснования.Текст;
		
		ВставитьФайлыИсходногоПисьмаСервер(Параметры.ЗначениеКопирования);
		
		Объект.ТипТекста = ПисьмоОбъект.ТипТекста;
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			
			СкопироватьКартинкиПисьмаОснования(Параметры.ЗначениеКопирования);
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Файлы") Тогда
		
		Если ТипЗнч(Параметры.Файлы) = Тип("Массив") И Параметры.Файлы.Количество() > 0 Тогда
			
			Для каждого Файл Из Параметры.Файлы Цикл
				
				Если Не ДелопроизводствоКлиентСервер.ЭтоФайл(Файл) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл,
					"Наименование, ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияРасширение");
				
				ВложенияСтрока = Вложения.Добавить();
				ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
				
				ВложенияСтрока.Ссылка = Файл;
				ВложенияСтрока.ИмяФайла = ДанныеФайла.Наименование;
				ВложенияСтрока.Представление = 
					ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.Наименование, 
						ДанныеФайла.ТекущаяВерсияРасширение);
				ВложенияСтрока.ИндексКартинки = ДанныеФайла.ИндексКартинки;
				ВложенияСтрока.Размер = ДанныеФайла.ТекущаяВерсияРазмер;
				ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
				ВложенияСтрока.Расположение = "СсылкаНаФайл";
				
			КонецЦикла;
			
			Если Параметры.Файлы.Количество() = 1 Тогда
				Файл = Параметры.Файлы[0];
				Объект.Тема = СтрШаблон("%1 (%2)", Строка(Файл), Файл.Метаданные().ПредставлениеОбъекта);
			КонецЕсли;
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Параметры.Файлы,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("СсылкаMailto") Тогда
		
		СтруктураMailto = ВстроеннаяПочтаСервер.РазобратьСсылкуMailto(Параметры.СсылкаMailto);
		
		Если СтруктураMailto.Свойство("АдресатыКому") Тогда
			
			АдресатыКому = СтруктураMailto.АдресатыКому;
			ТипАдреса = АдресатыКому[0].ТипПолучателя;
			ДобавитьПолучателей(АдресатыКому, -1, Неопределено, ТипАдреса);
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("АдресатыКопия") Тогда
			
			АдресатыКопия = СтруктураMailto.АдресатыКопия;
			ТипАдреса = АдресатыКопия[0].ТипПолучателя;
			ДобавитьПолучателей(АдресатыКопия, -1, Неопределено, ТипАдреса);
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("АдресатыСкрытаяКопия") Тогда
			
			АдресатыСкрытаяКопия = СтруктураMailto.АдресатыСкрытаяКопия;
			ТипАдреса = АдресатыСкрытаяКопия[0].ТипПолучателя;
			ДобавитьПолучателей(АдресатыСкрытаяКопия, -1, Неопределено, ТипАдреса);
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("ТемаПисьма") Тогда
			
			Объект.Тема = СтруктураMailto.ТемаПисьма;
			
		КонецЕсли;
		
		Если СтруктураMailto.Свойство("ТекстПисьма") Тогда
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				СтруктураMailto.ТекстПисьма,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
			
		Иначе
			
			ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
				Неопределено,
				Объект.ТипТекста,
				Объект.Кодировка,
				Объект.ТипОтвета);
				
		КонецЕсли
		
	Иначе
		
		ИспользованныйШаблон = Неопределено;
		ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
			Неопределено,
			Объект.ТипТекста,
			Объект.Кодировка,
			Объект.ТипОтвета,
			ИспользованныйШаблон);
			
			Если ЗначениеЗаполнено(ИспользованныйШаблон) 
				И ИспользованныйШаблон.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
				И Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				
				КопироватьТолькоФайлыСИдентификаторомВложений = Истина;
				КопироватьТолькоБезИдентификаторовВложений = Ложь;
				ВставитьФайлыИсходногоПисьмаСервер(ИспользованныйШаблон, КопироватьТолькоФайлыСИдентификаторомВложений,
					КопироватьТолькоБезИдентификаторовВложений);
				
				СкопироватьКартинкиПисьмаОснования(ИспользованныйШаблон);
				
			КонецЕсли;
			
	КонецЕсли;
	
	Если Параметры.Свойство("СписокПочтовыхАдресов")
		И ТипЗнч(Параметры.СписокПочтовыхАдресов) = Тип("СписокЗначений") Тогда
		
		Объект.ПолучателиПисьма.Очистить();
		
		Для каждого Элемент Из Параметры.СписокПочтовыхАдресов Цикл
			НовыйПолучатель = Объект.ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Элемент.Значение.Адрес,
				Элемент.Значение.ОтображаемоеИмя);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстПисьмаВПоле(ДобавлятьТекстHead = Истина)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	ТекстПисьмаВПоле = "";
	Если HTMLДокумент <> Неопределено Тогда
		
		ТекстПисьмаВПоле = HTMLДокумент.body.innerHTML;
		
#Если МобильныйКлиент Тогда
		//Обход ошибки 10192321 на Android
		ТекстПисьмаВПоле = СтрЗаменить(ТекстПисьмаВПоле, "\u003C", "<");
		ТекстПисьмаВПоле = СтрЗаменить(ТекстПисьмаВПоле, "\n", Символы.ПС);
#КонецЕсли
		
		ТекстСТегами = Новый Массив;
		ТекстСТегами.Добавить("<html><body>");
		ТекстСТегами.Добавить(ТекстПисьмаВПоле);
		ТекстСТегами.Добавить("</body></html>");
		
		ТекстПисьмаВПоле = СтрСоединить(ТекстСТегами);
		ТекстСТегами = Неопределено;
		
		Если ДобавлятьТекстHead Тогда
			Попытка
				Если HTMLДокумент.head <> Неопределено Тогда
					ТекстHead = HTMLДокумент.head.innerHTML;
					РаботаС_HTML.ПеренестиHead(ТекстПисьмаВПоле, ТекстHead, Ложь);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПисьмаВПоле;
	
КонецФункции

&НаСервере
Процедура ВключитьРежимРедактированияHTML()
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML 
		И Не ПисьмоОтправлено
		И Не Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда
		
		Если Найти(ТекстПисьма, "<body contentEditable") = 0 И Найти(ТекстПисьма, "<BODY contentEditable") = 0 Тогда
		
			Если Найти(ТекстПисьма, "<body") <> 0 Или Найти(ТекстПисьма, "<BODY") <> 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contentEditable=true");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<BODY", "<BODY contentEditable=true");
			Иначе
				
				Если Найти(ТекстПисьма, "<html") <> 0 Или Найти(ТекстПисьма, "<html") <> 0 Тогда
					
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "<html>", "<html><body contentEditable=true>");
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "</html>", "</body></html>");
					
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "<HTML>", "<HTML><BODY contentEditable=true>");
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "</HTML>", "</BODY></HTML>");
					
				Иначе
					
					ТекстПисьма = "<html><body contentEditable=true> " + ТекстПисьма + " </body></html>";
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		РаботаС_HTML.ПатчитьТекстИсходящегоПисьмаДляМобКлиента(ТекстПисьма);
		
	КонецЕсли;
	
КонецПроцедуры


// Заменяет в html img src id на адрес во временном хранилище. и добавляет  в СписокДобавленныхФайлов
&НаСервере
Процедура СкопироватьКартинкиПисьмаОснования(ПисьмоОснование, ФайлыПисьма = Неопределено)
	
	Если ФайлыПисьма = Неопределено Тогда // только если не передали извне
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			ПисьмоОснование, // отдаем ссылку на другое письмо
			Ложь, // ФормироватьПредставлениеРазмера
			Ложь, // ВключатьПомеченныеНаУдаление
			Истина); // ТолькоСИдентификаторами
			
	КонецЕсли;
	
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	ВстроеннаяПочтаСервер.ВырезатьПорт(НавигационнаяСсылкаИнформационнойБазы);
	
	Для каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		ЭтоФайлКартинка = РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(ФайлПисьма.ТекущаяВерсияРасширение);
		НужноПроверитьНаличиеКартинкиВHTML = Не ЭтоФайлКартинка;
		СсылкаЕстьВHTML = Истина;
		
		Если НужноПроверитьНаличиеКартинкиВHTML Тогда
			
			СсылкаЕстьВHTML = Ложь;
			
			Если Найти(ТекстПисьма, "http:cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли Найти(ТекстПисьма, "cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли (СтрДлина(ИсточникФайла) > 18) И Найти(ТекстПисьма, ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НавигационнаяСсылкаФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
			ФайлПисьма.ТекущаяВерсия, // ВерсияСсылка
			УникальныйИдентификатор); // ИдентификаторФормы
		АбсолютнаяСсылкаНаКартинку = СтрШаблон("%1/%2", НавигационнаяСсылкаИнформационнойБазы, НавигационнаяСсылкаФайла);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "http:cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку); // коррекция ошибочного html
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		Если СтрДлина(ИсточникФайла) > 18 Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
			НавигационнаяСсылкаФайла, ИсточникФайла,
			ФайлПисьма.ТекущаяВерсияДатаМодификацииФайла, 
			ФайлПисьма.ИмяФайла,
			ФайлПисьма.Размер,
			ФайлПисьма.Ссылка);
		
		СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
		
		Если СсылкаЕстьВHTML Тогда
			ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка", 
				ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеФайлы(МассивФайлов, ИгнорироватьЗанятость = Ложь, ЭтоВложенноеПисьмо = Неопределено)
	
	ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
	Для каждого ФайлИнфо Из ФайлыИнфо Цикл
		ВложенияСтрока = Вложения.Добавить();
		ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		Если ИгнорироватьЗанятость = Истина Тогда
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		КонецЕсли;
		
		Если ЭтоВложенноеПисьмо <> Неопределено Тогда 
			ВложенияСтрока.ЭтоВложенноеПисьмо = ЭтоВложенноеПисьмо;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьФайлыИсходногоПисьмаСервер(Письмо, КопироватьТолькоФайлыСИдентификаторомВложений = Ложь,
	КопироватьТолькоБезИдентификаторовВложений = Ложь,
	ТаблицаВложений = Неопределено)
	
	Если ТаблицаВложений = Неопределено Тогда // только если нет. Если уже передано, не надо.
		
		ТаблицаВложений = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Письмо,
			Истина, // ФормироватьПредставлениеРазмера
			Ложь, // ВключатьПомеченныеНаУдаление
			КопироватьТолькоФайлыСИдентификаторомВложений, // ТолькоСИдентификаторами
			КопироватьТолькоБезИдентификаторовВложений);
			
	КонецЕсли;
	
	Для каждого ТаблицаВложенийСтрока Из ТаблицаВложений Цикл
		
		ВложенияСтрока = Неопределено;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML
			И ЗначениеЗаполнено(ТаблицаВложенийСтрока.ИДФайлаЭлектронногоПисьма) Тогда
			ВложенияСтрока = ВложенияКартинки.Добавить();
		Иначе	
			ВложенияСтрока = Вложения.Добавить();
			ВложенияСтрока.ПорядковыйНомерВложения = Вложения.Количество() - 1;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			ВложенияСтрока,
			ТаблицаВложенийСтрока,
			"Ссылка, ИмяФайла, Представление, ИндексКартинки, Размер, РазмерПредставление, ЭтоВложенноеПисьмо, ИДФайлаЭлектронногоПисьма");
			
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
			ВложенияСтрока.ИДФайлаЭлектронногоПисьма = "";
		КонецЕсли;
		
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
		
	КонецЦикла;
	
КонецПроцедуры

// На сервере заполняет получателей после выбора и адресной книги
// Параметры
//
// ВыбранныеАдресаты - массив структур с адресатами, который вернула адресная книга
// ИдТекущаяСтрока - идентификатор текущй строки
// ВозвращаемыйПараметрыЗаполненияТекущейСтроки - данные для заполнения текущей строки (на сервере нельзя это сделать)
// ТипАдреса - тип адреса для вновь создаваемых получателей
&НаСервере
Функция ДобавитьПолучателей(ВыбранныеАдресаты, ИдТекущаяСтрока, 
	ВозвращаемыйПараметрыЗаполненияТекущейСтроки, ТипАдреса,
	НеИспользоватьТекСтрокуДляПоискаДублей = Ложь)
	
	ДобавленыАдресаты = Ложь;
	
	Если ИдТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдТекущаяСтрока);
	КонецЕсли;
	
	АдресаПолучателей = Новый Соответствие;
	КонтактыПолучателей = Новый Соответствие;
	
	Для Каждого Строка Из Получатели Цикл
		
		ИспользоватьСтроку = Истина;
		
		Если НеИспользоватьТекСтрокуДляПоискаДублей = Истина Тогда
			Если Строка.ПолучитьИдентификатор() = ИдТекущаяСтрока Тогда
				ИспользоватьСтроку = Ложь;
			КонецЕсли;		
		КонецЕсли;	
		
		Если ИспользоватьСтроку И ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			АдресаПолучателей[НРег(Строка.Адресат.Адрес)] = Строка.Контакт;
			КонтактыПолучателей[Строка.Контакт] = НРег(Строка.Адресат.Адрес);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
	СоответствиеАдресатов = 
		ВстроеннаяПочтаСервер.ПолучитьСоответствиеАдресатовПоАдресуИКонтакту(ВыбранныеАдресаты);
	
	Индекс = 0;
	ИспользованаТекущаяСтрока = Ложь;
	Для Индекс = 0 По ВыбранныеАдресаты.Количество() - 1 Цикл
		
		Строка = ВыбранныеАдресаты[Индекс];
		
		КодВозврата = "";
		
		Если ЗначениеЗаполнено(Строка.Адрес) Тогда 
			Адрес = Строка.Адрес;
		ИначеЕсли Строка.Свойство("МассивАдресатов") И ЗначениеЗаполнено(Строка.МассивАдресатов) Тогда 
			Адрес = Строка.МассивАдресатов[0].Адрес;
		КонецЕсли;
		
		НайденАдресПоКонтакту = КонтактыПолучателей.Получить(Строка.Контакт);
		НайденКонтактПоАдресу = АдресаПолучателей.Получить(НРег(Адрес));
		Если НайденАдресПоКонтакту <> Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда
			КодВозврата = "ПолныйДубль";
		ИначеЕсли НайденАдресПоКонтакту = Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда	
			КодВозврата = "ТотЖеАдресДругойКонтакт";
		КонецЕсли;	
			
		Если КодВозврата = "ПолныйДубль" Тогда // эту строку не добавляем - она уже есть
			Продолжить;
		КонецЕсли;	
		
		ДобавленыАдресаты = Истина;
		
		Если КодВозврата = "ТотЖеАдресДругойКонтакт" Тогда // сообщим об ошибке, но строку все же добавим
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адрес ""%1"" встречается в адресатах письма дважды (""%2"" и ""%3"")'"),
					Строка.Адрес, Строка.Контакт, НайденКонтактПоАдресу);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"Получатели");
				
		КонецЕсли;	
		
		НоваяСтрока = Неопределено;
		ЭтоТекущаяСтрока = Ложь;
		Если Не ИспользованаТекущаяСтрока И СтрокаДанных <> Неопределено Тогда
			НоваяСтрока = СтрокаДанных;
			ИспользованаТекущаяСтрока = Истина;
			ЭтоТекущаяСтрока = Истина;
		Иначе
			НоваяСтрока = Получатели.Добавить();
		КонецЕсли;
		
		Если Строка.Свойство("ТипПолучателя") И ЗначениеЗаполнено(Строка.ТипПолучателя) Тогда
			НоваяСтрока.ТипАдреса = Строка.ТипПолучателя;
		Иначе
			НоваяСтрока.ТипАдреса = ТипАдреса;
		КонецЕсли;
		
		Представление = Строка(Строка.Контакт); 
		Если ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			Представление =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Контакт, "ПредставлениеВПерепискеСРангом");
		КонецЕсли;
			
		Если Не ПустаяСтрока(Представление) Тогда
			Представление = СтрШаблон("%1 <%2>", Представление, Адрес);
		Иначе
			Представление = Адрес;
		КонецЕсли;	
		
		АдресатСтруктура = СоответствиеАдресатов[НРег(Адрес)];
		Адресат = Неопределено;
		Внешний = Ложь;
		ВидМаршрутизации = Неопределено;
		Если АдресатСтруктура <> Неопределено Тогда
			Адресат = АдресатСтруктура.Адресат;
			Внешний = АдресатСтруктура.Внешний;
			ВидМаршрутизации = АдресатСтруктура.ВидМаршрутизации;
		ИначеЕсли Строка.Свойство("Адресат") И ЗначениеЗаполнено(Строка.Адресат) Тогда 
			Адресат = Строка.Адресат;
			ВидМаршрутизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Адресат,
				"ВидМаршрутизации");
		Иначе
			Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(Адрес, Строка.Представление);
			Внешний = Истина;
			ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя;
		КонецЕсли;
		
		НоваяСтрока.Адресат = Адресат;
		НоваяСтрока.Контакт = Строка.Контакт;
		Если ПустаяСтрока(Строка.Представление) Тогда
			НоваяСтрока.Представление = Строка.Адрес;
		Иначе	
			НоваяСтрока.Представление = Строка.Представление;
		КонецЕсли;	
		НоваяСтрока.Адрес = Адрес;
		НоваяСтрока.Внешний = Внешний;
		НоваяСтрока.ВидМаршрутизации = ВидМаршрутизации;
		Если ЭтоТекущаяСтрока Тогда
			ВозвращаемыйПараметрыЗаполненияТекущейСтроки = 
				Новый Структура("Адресат, Контакт, Представление, Адрес, Внешний, ВидМаршрутизации",
				НоваяСтрока.Адресат, НоваяСтрока.Контакт, НоваяСтрока.Представление, 
				НоваяСтрока.Адрес, НоваяСтрока.Внешний, НоваяСтрока.ВидМаршрутизации);
		КонецЕсли;	
		
	КонецЦикла;
	ОбновитьНомераКартинокАдресатов(Получатели);
	
	Возврат ДобавленыАдресаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПроектаИлиПредмета(ПроектИлиПредмет, ПроектПредметСтрокой)
	
	Если ЗначениеЗаполнено(ПроектИлиПредмет) Тогда
		ПроектПредметСтрокой = Строка(ПроектИлиПредмет);
	Иначе
		ПроектПредметСтрокой = НСтр("ru = 'Не указан'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСведенияОПереписке()
	
	ЧислоПисемВПереписке = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ИсходноеПисьмо) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ИсходноеПисьмо);
	КонецЕсли;
	
	Если ЧислоПисемВПереписке > 1 Тогда
		
		ПисемВПереписке = //ЧислоПисемВПереписке;
			СтрШаблон("%1 %2",
				Формат(ЧислоПисемВПереписке, "ЧН=0"),
				ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(ЧислоПисемВПереписке));
		
	КонецЕсли;
	
	Элементы.ГруппаПереписка.Видимость = ЧислоПисемВПереписке > 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТолькоБезИдентификаторов = (Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			ТолькоБезИдентификаторов); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
		
		ВложенияВременнаяТаблица = Вложения.Выгрузить();
		Вложения.Очистить();
		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			ВложенияСтрока.Расположение = "Файл";
			
			Если ФайлыПисьмаСтрока.РедактируетТекущийПользователь = Истина 
					И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
					ФайлыПисьмаСтрока.Ссылка);
				ВложенияСтрока.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;	
				ВложенияСтрока.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ВложенияВременнаяТаблицаСтрока Из ВложенияВременнаяТаблица Цикл
			Если ВложенияВременнаяТаблицаСтрока.Расположение <> "Файл" Тогда
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложенияВременнаяТаблицаСтрока);
			КонецЕсли;
		КонецЦикла;
		
		ВложенныеПисьма = РегистрыСведений.ВложенныеПисьма.ПолучитьВложенныеПисьма(Объект.Ссылка);
		Для Каждого ФайлыПисьмаСтрока Из ВложенныеПисьма Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
			ВложенияСтрока.Расположение = "Файл";
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкиВПротоколеДоставки()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколДоставкиПочты.Письмо
		|ИЗ
		|	РегистрСведений.ПротоколДоставкиПочты КАК ПротоколДоставкиПочты
		|ГДЕ
		|	ПротоколДоставкиПочты.Письмо = &Письмо
		|	И ПротоколДоставкиПочты.ЭтоОшибка = ИСТИНА";
		
	Запрос.УстановитьПараметр("Письмо", Объект.Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораТипаПредмета(СписокВыбора)
	
	// Определяем список выбора типа предмета
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВнутренниеДокументы.ПустаяСсылка"), НСтр("ru = 'Внутренний документ'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ВходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Входящий документ'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"), НСтр("ru = 'Задача'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ИсходящиеДокументы.ПустаяСсылка"), НСтр("ru = 'Исходящий документ'"));

	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Мероприятия.ПустаяСсылка"), НСтр("ru = 'Мероприятие'"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"), НСтр("ru = 'Проект'"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ПроектныеЗадачи.ПустаяСсылка"), НСтр("ru = 'Проектная задача'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.СообщенияОбсуждений.ПустаяСсылка"), НСтр("ru = 'Сообщение'"));
	КонецЕсли;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"), НСтр("ru = 'Файл'"));
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтрольныеТочки.ПустаяСсылка"), НСтр("ru = 'Контрольная точка'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопкиКонтроля()
	
	Контроль.УстановитьСвойстваКнопкиКонтроляПисьма(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьКартинкуОтображенияВажности(Важность, ДекорацияВажность)
	
	Если Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая") Тогда
		ДекорацияВажность.Картинка = БиблиотекаКартинок.ВажностьВысокая;
	ИначеЕсли Важность = ПредопределенноеЗначение("Перечисление.ВажностьПисем.Низкая") Тогда
		ДекорацияВажность.Картинка = БиблиотекаКартинок.ВажностьНизкая;
	Иначе
		ДекорацияВажность.Картинка = БиблиотекаКартинок.ВажностьНеЗадана;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВложенныеПисьмаПриЧтении()
	
	ВложенныеПисьмаПриЧтении.Очистить();
	ВложенныеПисьма = РегистрыСведений.ВложенныеПисьма.ПолучитьВложенныеПисьма(Объект.Ссылка);
	Для Каждого ФайлыПисьмаСтрока Из ВложенныеПисьма Цикл
		ВложенныеПисьмаПриЧтении.Добавить(ФайлыПисьмаСтрока.Письмо);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНастройкиОтображения(ТекстПисьма, ТипТекста, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен)
	
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если ШрифтОтображенияУстановлен Тогда
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, Ложь, Истина);
		Иначе
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаписьHTML()
	
	Если ВыполняетсяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
	
	ТекстПисьмаHTMLДляОтменыОтправки = ПолучитьТекстПисьмаВПоле(Ложь);
	
	ТекстПисьмаHTMLПриЗаписи = ПолучитьТекстПисьмаВПоле();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПредельныйРазмерФайлов()
	
	Если ТипЗнч(ВидыМаршрутизацииПисьма) = Тип("Структура") И ВидыМаршрутизацииПисьма.ВнешняяМаршрутизация Тогда
		
		РазмерПисьмаБайт = 0; //Объект.Размер
		
		Для Каждого ВложенияСтрока Из Вложения Цикл
			
			Если ВложенияСтрока.Расположение = "НаДиске" Тогда
				Если Не ВложенияСтрока.ПометкаУдаления Тогда
					РазмерПисьмаБайт = РазмерПисьмаБайт + ВложенияСтрока.Размер;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
		РазмерПисьмаМБ = РазмерПисьмаБайт / (1024*1024);
		Если МаксимальныйРазмерВнешнегоИсходящегоПисьма <> 0 
			И РазмерПисьмаМБ > МаксимальныйРазмерВнешнегоИсходящегоПисьма Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Размер письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
				|Удалите слишком большие вложения.'"),
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерПисьмаМБ), 
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(МаксимальныйРазмерВнешнегоИсходящегоПисьма));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Вложения");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПоместитьФайлыСДискаВоВременноеХранилище(ИспользоватьЗагрузкуПоHTTP = Истина)
	
	// Процедура взята из настольного клиента.
	// Используются синхронные методы помещения файлов.
	Для Каждого ВложенияСтрока Из Вложения Цикл
		
		Если ВложенияСтрока.Расположение <> "НаДиске" Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			ПолныйПутьКФайлу = ВложенияСтрока.ИмяФайлаНаДиске;
			
			АдресВоВременномХранилище = "";
			
			Размер = 0;
			ФайлНаДиске = Новый Файл(ПолныйПутьКФайлу);
			Если ФайлНаДиске.Существует() Тогда
				Размер = ФайлНаДиске.Размер();
			КонецЕсли;
			
			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
			ПомещаемыеФайлы.Добавить(Описание);
			ПомещенныеФайлы = Новый Массив;
			Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
				ВызватьИсключение
					СтрШаблон(
						НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'"),
						ПолныйПутьКФайлу);
			КонецЕсли;
			
			Если ПомещенныеФайлы.Количество() = 1 Тогда
				АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
			Иначе
				ВызватьИсключение
					СтрШаблон(
						НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'"),
						ПолныйПутьКФайлу);
			КонецЕсли;
			
			ВложенияСтрока.Адрес = АдресВоВременномХранилище;
			ВложенияСтрока.Расположение = "ВременноеХранилище";
			НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами();
			Если Не НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
				
				ВложенияСтрока.АдресИзвлеченногоТекста =
					ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ПолныйПутьКФайлу,
						УникальныйИдентификатор,
						Ложь); // Отказ
				
			КонецЕсли;
			
			// Файлы при добавлении копируются во временное хранилище.
			// Приберем за собой.
			// А может сразу надо заливать во временное хранилище?
			// но надо понимать  что можно удалять, а что нет.
			ЗагруженныйФайл = Новый Файл(ПолныйПутьКФайлу);
			Если ЗагруженныйФайл.Существует() Тогда
				УдалитьФайлы(ПолныйПутьКФайлу);
			КонецЕсли;
			
		Исключение
			
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить файл ""%1"" по причине:
					|""%2""
					|Попробуйте повторить.'"),
				ПолныйПутьКФайлу,
				СообщениеОбОшибке);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Вложения");
			
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьПисьмоПередОтправкой(ТекущийОбъект)
	
	КодВозврата = Истина;
	
	МассивАдресатов = Новый Массив;
	
	Для каждого Получатель Из ТекущийОбъект.ПолучателиПисьма Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	Для каждого Получатель Из ТекущийОбъект.ПолучателиКопий Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	Для каждого Получатель Из ТекущийОбъект.ПолучателиСкрытыхКопий Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	
	АдресаАдресатов = АдресаАдресатов(МассивАдресатов);
	Если АдресаАдресатов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя отправить письмо. Необходимо указать хотя бы одного получателя.'"),,
				"Получатели");
		
		КодВозврата = Ложь;
		
	Иначе
		Для каждого КлючИЗначение Из АдресаАдресатов Цикл
			Адрес = КлючИЗначение.Ключ;
			Если Не РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Адрес) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Нельзя отправить письмо. Указан некорректный почтовый адрес получателя ""%1""'"),
						Адрес));
				
				КодВозврата = Ложь;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполненыПараметрыEmailУчетнойЗаписи = Ложь;
	Если ЗначениеЗаполнено(ТекущийОбъект.УчетнаяЗапись) Тогда
		
		УчетнаяЗаписьИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущийОбъект.УчетнаяЗапись,
			"ИспользоватьДляОтправки,ВариантИспользования,ПометкаУдаления,СерверИсходящейПочты");
		
		Если УчетнаяЗаписьИнфо.ВариантИспользования <> Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не удалось отправить письмо, потому что в учетной записи не установлено использование для встроенной почты.
					|Обратитесь к администратору.'"),,
				"УчетнаяЗапись",
				"Объект");
			
			КодВозврата = Ложь;
			
		КонецЕсли;
		
		Если УчетнаяЗаписьИнфо.ПометкаУдаления Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не удалось отправить письмо, потому что учетная запись помечена на удаление.
					|Обратитесь к администратору.'"),,
				"УчетнаяЗапись",
				"Объект");
			
			КодВозврата = Ложь;
			
		КонецЕсли;
		
		ЕстьПолучателиEmail = АдресаАдресатов.Количество() > 0;
		Если Не УчетнаяЗаписьИнфо.ИспользоватьДляОтправки И ЕстьПолучателиEmail Тогда
			
			АдресаEmail =Новый Массив;
			Для Каждого КлючИЗначение Из АдресаАдресатов Цикл
				АдресаEmail.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В учетной записи снят флаг использования для отправки, при этом указаны адреса email:
				|%1
				|Удалите этих получателей или обратитесь к администратору для настройки учетной записи.'"),
				СтрСоединить(АдресаEmail, ", "));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"УчетнаяЗапись",
				"Объект");
			
			КодВозврата = Ложь;
			
		КонецЕсли;
		
		// Проверим, что у учетной записи есть нужные настройки.
		ЗаполненыПараметрыEmailУчетнойЗаписи =
			УчетнаяЗаписьИнфо.ИспользоватьДляОтправки
			И ЗначениеЗаполнено(УчетнаяЗаписьИнфо.СерверИсходящейПочты)
			И ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.УчетнаяЗапись).Чтение;
		
	КонецЕсли;
	
	Если Не ЗаполненыПараметрыEmailУчетнойЗаписи Тогда
		
		ТекстСообщения = НСтр("ru ='Для отправки почты нужно настроить параметры подключения к почтовому серверу.
			|Обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"УчетнаяЗапись",
				"Объект");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя отправить письмо. Письмо помечено на удаление.
			|Снимите пометку удаления с письма и отправьте снова.'"));
		
		КодВозврата = Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийОбъект.Тема) Тогда
		
		Если Объект.ТипОтвета <> Перечисления.ТипыОтвета.ПеренаправлениеПисьма Тогда 
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Нельзя отправить письмо. Не заполнена тема.'"),,
				"Тема",
				"Объект");
			
			КодВозврата = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ТипОтвета = Перечисления.ТипыОтвета.ПеренаправлениеПисьма
		И Объект.ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя Тогда 
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя перенаправлять письмо по внешней маршрутизации.'"),,
			"Получатели");
		
		КодВозврата = Ложь;
		
	КонецЕсли;
	
	Если КодВозврата = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьПредельныйРазмерПисьма() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Получает почтовые адреса для массива адресатов.
// Параметры:
//	МассивАдресатов - массив ссылок на АдресатыПочтовыхСообщений
// Возвращает:
//	Соответствие - в качестве ключей адреса.
Функция АдресаАдресатов(МассивАдресатов)
	
	Результат = Новый Соответствие;
	
	Если МассивАдресатов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Адресаты.Адрес
		|ИЗ
		|	Справочник.АдресатыПочтовыхСообщений КАК Адресаты
		|ГДЕ
		|	Адресаты.Ссылка В(&Массив)";
	
	Запрос.УстановитьПараметр("Массив", МассивАдресатов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Адрес) Тогда
			Результат.Вставить(НРег(СокрЛП(Выборка.Адрес)), Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьПредельныйРазмерПисьма()
	
	Если ТипЗнч(ВидыМаршрутизацииПисьма) = Тип("Структура") И ВидыМаршрутизацииПисьма.ВнешняяМаршрутизация Тогда
		
		РазмерПисьмаБайт = 0;
		РазмерТекстаБайт = 0;
		
		РазмерПисьмаБайт = РазмерВложений(Вложения);
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			РазмерТекстаБайт = СтрДлина(ТекстПисьмаHTMLПриЗаписи);
		Иначе	
			РазмерТекстаБайт = СтрДлина(ТекстПисьма);
		КонецЕсли;
		
		РазмерТекстаМБ = РазмерТекстаБайт / (1024*1024);
		МаксимальныйРазмерТелаВнешнегоИсходящегоПисьма = 3; // 3 МБ
		Если РазмерТекстаМБ > МаксимальныйРазмерТелаВнешнегоИсходящегоПисьма Тогда
			
			СтрокаРазмера = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(
				МаксимальныйРазмерТелаВнешнегоИсходящегоПисьма);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Размер содержимого письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
				|Удалите лишний текст письма.'"),
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерТекстаМБ), 
				СтрокаРазмера);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"ТекстПисьма");
			
			Возврат Ложь;
		КонецЕсли;
		
		РазмерПисьмаБайт = РазмерПисьмаБайт + РазмерТекстаБайт;
		
		РазмерПисьмаМБ = РазмерПисьмаБайт / (1024*1024);
		Если МаксимальныйРазмерВнешнегоИсходящегоПисьма <> 0 
			И РазмерПисьмаМБ > МаксимальныйРазмерВнешнегоИсходящегоПисьма Тогда
			
			СтрокаРазмера = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(
				МаксимальныйРазмерВнешнегоИсходящегоПисьма);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Размер письма (%1 Мб) превышает максимально допустимый размер (%2 Мб). 
				|Удалите слишком большие вложения.'"),
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерПисьмаМБ), 
				СтрокаРазмера);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Вложения");
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазмерВложений(Вложения)
	
	РазмерВложений = 0;
	
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			РазмерВложений = РазмерВложений + ВложенияСтрока.Размер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазмерВложений;
	
КонецФункции

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВложенныеПисьмаПриЧтении.Количество() <> 0 Тогда
		РегистрыСведений.ВложенныеПисьма.СтеретьЗаписиПоВладельцу(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЗаписатьВложенияТаблица(Вложения, ТекущийОбъект.Ссылка);
	ЗаписатьВложенияТаблица(ВложенияКартинки, ТекущийОбъект.Ссылка);
	
	ПорядковыйНомерВложения = 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложенияТаблица(Таблица, ПисьмоСсылка)
	
	ПорядковыйНомерВложения = 0;

	Для каждого ВложениеСтрока Из Таблица Цикл
		
		Если ЗначениеЗаполнено(ВложениеСтрока.ИДФайлаЭлектронногоПисьма) Тогда
			Если ВложенияКартинкиКУдалению.НайтиПоЗначению(ВложениеСтрока.ИДФайлаЭлектронногоПисьма) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовыйФайл = Неопределено;
		
		Если ЗначениеЗаполнено(ВложениеСтрока.Письмо) Тогда  //  ссылка на письмо
			
			РегистрыСведений.ВложенныеПисьма.ЗаписатьВложение(ПисьмоСсылка, ВложениеСтрока.Письмо);
		
		ИначеЕсли ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			
			НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ПисьмоСсылка);
			
			ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВложениеСтрока.Ссылка, "ТекущаяВерсия");
			Если ЗначениеЗаполнено(ТекущаяВерсия) Тогда
				
				НовыйФайлТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйФайл, "ТекущаяВерсия");
				
				Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(ТекущаяВерсия);
				Если ЗначениеЗаполнено(Кодировка) Тогда
					РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(НовыйФайлТекущаяВерсия, Кодировка);
				КонецЕсли;
				
			КонецЕсли;
			
			// заменяем ссылки на новые файлы
			Для Каждого Строка Из СписокДобавленныхФайлов Цикл
				
				ОписаниеФайла = Строка.Значение;
				Если ОписаниеФайла.Ссылка = ВложениеСтрока.Ссылка Тогда
					ОписаниеФайла.Ссылка = НовыйФайл;
				КонецЕсли;
			КонецЦикла;
			
			ВложениеСтрока.Расположение = "Файл";
			ВложениеСтрока.Ссылка = НовыйФайл;
			
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			
			НовыйФайл = ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ПисьмоСсылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				ВложениеСтрока.АдресИзвлеченногоТекста, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДатаСеанса(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			
			ВложениеСтрока.Расположение = "Файл";
			ВложениеСтрока.Ссылка = НовыйФайл;
			
		Иначе
			
			НовыйФайл =  ВложениеСтрока.Ссылка;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйФайл) Тогда
			
			РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
				НовыйФайл, "ПорядковыйНомерВложения", ПорядковыйНомерВложения);
			
			Если ВложениеСтрока.ЭтоВложенноеПисьмо Тогда
				РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
					НовыйФайл, "ЭтоВложенноеПисьмо", Истина);
			КонецЕсли;
			
			ПорядковыйНомерВложения = ПорядковыйНомерВложения + 1;
			
			Если ЗначениеЗаполнено(ВложениеСтрока.ИДФайлаЭлектронногоПисьма) Тогда
				РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(НовыйФайл, 
					ВложениеСтрока.ИДФайлаЭлектронногоПисьма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаменитьПроектПереписки(ТекущийОбъект, ЗаменяемыйПроект, СообщенияОбОшибках)
	
	ПисьмаПереписки = ВстроеннаяПочтаСервер.ПолучитьПисьмаПереписки(ТекущийОбъект.Ссылка);
	ПисьмаДляЗаменыПроекта = Новый Массив;
	
	Для каждого Письмо Из ПисьмаПереписки Цикл
		
		Если Письмо <> ТекущийОбъект.Ссылка Тогда
			
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			
			Если Проект = ЗаменяемыйПроект Или Не ЗначениеЗаполнено(Проект) Тогда
				ПисьмаДляЗаменыПроекта.Добавить(Письмо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПисьмаДляЗаменыПроекта.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВстроеннаяПочтаСервер.ЗаменитьПроектВПисьмах(
		ПисьмаДляЗаменыПроекта,
		ТекущийОбъект.Проект,
		СообщенияОбОшибках);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиИдентификаторПочтовыхВложений(Идентификатор, ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыПочтовыхВложений.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ИдентификаторыПочтовыхВложений.Файл = Файлы.Ссылка
		|ГДЕ
		|	ИдентификаторыПочтовыхВложений.Идентификатор = &Идентификатор
		|	И Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Файл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьКлиент(ПараметрыЗаписи = Неопределено)
	
	// Сохранение текущей позиции в списке файлов
	ИнформацияОТекущемФайле = Неопределено;
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		ИнформацияОТекущемФайле = Новый Структура;
		ИнформацияОТекущемФайле.Вставить("ИмяФайла", Элементы.Вложения.ТекущиеДанные.ИмяФайла);
		ИнформацияОТекущемФайле.Вставить("Размер", Элементы.Вложения.ТекущиеДанные.Размер);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		Результат = Записать(ПараметрыЗаписи);
	Иначе
		Результат = Записать();
	КонецЕсли;
	
	Если Результат = Ложь
		И Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
		И Не ПустаяСтрока(ТекстПисьмаHTMLДляОтменыОтправки) Тогда
		
		ТекстПисьма = ТекстПисьмаHTMLДляОтменыОтправки;
		ПрименитьНастройкиОтображения(ТекстПисьма, Объект.ТипТекста,
			ШрифтОтображения, НастройкаОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен);
		ВключитьРежимРедактированияHTML();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПользователейВПолучатели(ПользователиДляДобавления)
	
	Для Каждого ПользовательДляДобавленияКлючИЗначение Из ПользователиДляДобавления Цикл
		
		Контакт = ПользовательДляДобавленияКлючИЗначение.Ключ;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контакт", Контакт);
		НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
		ПользовательУжеДобавлен = Ложь;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ТипАдреса <> Перечисления.ТипыАдресатов.Кому
				И ПользовательДляДобавленияКлючИЗначение.Значение = Перечисления.ТипыАдресатов.Кому Тогда
				НайденнаяСтрока.ТипАдреса = Перечисления.ТипыАдресатов.Кому;
			КонецЕсли;
			ПользовательУжеДобавлен =
				НайденнаяСтрока.ТипАдреса <> Перечисления.ТипыАдресатов.ОбратныйАдрес
				Или ПользовательДляДобавленияКлючИЗначение.Значение = Перечисления.ТипыАдресатов.ОбратныйАдрес;
		КонецЦикла;
		Если ПользовательУжеДобавлен Тогда
			Продолжить;
		КонецЕсли;
		
		Адресат = ВстроеннаяПочтаСервер.ПолучитьАдресатПоКонтакту(Контакт);
		Если Адресат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПолучателя(ПользовательДляДобавленияКлючИЗначение.Значение, Адресат);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
