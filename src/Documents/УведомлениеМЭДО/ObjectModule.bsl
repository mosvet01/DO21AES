#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = ИнтеграцияСМЭДО.ТекущийОтветственный();
	ДанныеКонверта = Новый ХранилищеЗначения(Неопределено);
	ДанныеСообщения = Новый ХранилищеЗначения(Неопределено);
	ИдентификаторУведомления = "";
	ИдентификаторДокумента = "";
	ИдентификаторИсходящегоСообщения = "";
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = ИнтеграцияСМЭДО.ТекущийОтветственный();
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Комментарий = СокрЛП(Комментарий);
	Если СтрДлина(Комментарий) > 2047 Тогда // по требованию xsd-схемы
		Комментарий = Лев(Комментарий, 2047);
	КонецЕсли;
	
	ОчиститьИПроверитьТабличныеЧасти(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	

	Если Не ЗначениеЗаполнено(ВерсияМЭДО) Тогда
		// Версия может быть невидима для пользователя, надо заполнить принудительно:
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
			Настройки = РегистрыСведений.НастройкиКонтрагентовМЭДО.ПолучитьНастройки(Контрагент, ДанныеОтвета);
			Если Не ДанныеОтвета.Успех Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			ВерсияМЭДО = Настройки.ВерсияФорматаМЭДО;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВерсияМЭДО) Тогда
			ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.ПоследняяВерсия();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсходящаяДата) И Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда
		ИсходящаяДата = Дата;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Или Не ЗначениеЗаполнено(ИдентификаторУведомления) Тогда
		НаправлениеДокумента = Перечисления.НаправленияСообщенийМЭДО.НаправлениеДокумента(Документ);
		Если НаправлениеДокумента = Перечисления.НаправленияСообщенийМЭДО.Входящее Тогда
			// Исходящее уведомление:
			СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.ПолучитьСостояниеДокумента(
				Документ,
				Перечисления.СостоянияДокументовМЭДО.ДокументПолучен,
				"ИдентификаторДокумента, ИдентификаторСообщения",
				Дата);
			Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
				ИдентификаторДокумента = СтруктураСостояния.ИдентификаторДокумента;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ИдентификаторУведомления) Тогда
				ИдентификаторУведомления = СтруктураСостояния.ИдентификаторСообщения;
			КонецЕсли;
		ИначеЕсли НаправлениеДокумента = Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда 
			// Входящее уведомление:
			Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
				// исходящий документ - идентификатор из нашей ИБ:
				ИдентификаторДокумента = "" + Документ.УникальныйИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Направление = Перечисления.НаправленияСообщенийМЭДО.Входящее Тогда
		
		Если Не ЗначениеЗаполнено(ИдентификаторИсходящегоСообщения) Тогда
			// идентификатор сообщения от исходящего документа, на который отвечает уведомление.
			СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.ПолучитьСостояниеДокумента(
					Документ, Перечисления.СостоянияДокументовМЭДО.ДокументОтправлен, "ИдентификаторСообщения", Дата);
			ИдентификаторИсходящегоСообщения = СтруктураСостояния.ИдентификаторСообщения;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.СостоянияДокументовМЭДО.Записывать = Истина;
	
	Движение = Движения.СостоянияДокументовМЭДО.Добавить();
	Движение.Период = Дата;
	Движение.ПредметСообщения = Ссылка;
	Движение.Документ = Документ;
	Движение.ИдентификаторДокумента = ИдентификаторДокумента;
	Движение.Направление = Перечисления.НаправленияСообщенийМЭДО.НаправлениеДокумента(Движение.Документ);
	
	Если Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда // Исходящее уведомление:

		Если Отправлено Тогда
			Движение.Состояние = Перечисления.СостоянияДокументовМЭДО.ОтправленоУведомление;
		ИначеЕсли ГотовоКОтправке Тогда
			Движение.Состояние = Перечисления.СостоянияДокументовМЭДО.СозданоИсходящееУведомление;
		Иначе
			Движение.Состояние = Перечисления.СостоянияДокументовМЭДО.ИсходящееУведомлениеЕщеНеОтправлено;
		КонецЕсли;
		Движение.ИдентификаторСообщения = ИдентификаторУведомления;
		
	ИначеЕсли Направление = Перечисления.НаправленияСообщенийМЭДО.Входящее Тогда // Входящее уведомление:
	
		Движение.Состояние = Перечисления.СостоянияДокументовМЭДО.ПолученоУведомление;
		Движение.ИдентификаторСообщения = ИдентификаторИсходящегоСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Очистить табличные части от все типов уведомлений, кроме того, который выбран.
Процедура ОчиститьИПроверитьТабличныеЧасти(Отказ)

	ЭтоИсходящее = (Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее);

	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ПостановкаНаКонтроль);
	МассивТЧ.Добавить(ПостановкаНаКонтроль_КонтрольныеПунктыДокумента);
	МассивТЧ.Добавить(Регистрация);
	МассивТЧ.Добавить(ОтказВРегистрации);
	МассивТЧ.Добавить(ПринятиеКИсполнению);
	МассивТЧ.Добавить(ПодготовкаДоклада);
	МассивТЧ.Добавить(НаправлениеДоклада);
	МассивТЧ.Добавить(ХодИсполнения);
	МассивТЧ.Добавить(Опубликование);
	
	Если ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОПостановкеНаКонтроль Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(ПостановкаНаКонтроль));
		МассивТЧ.Удалить(МассивТЧ.Найти(ПостановкаНаКонтроль_КонтрольныеПунктыДокумента));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Постановка на контроль'");
			ПроверитьЗаполнениеТабличнойЧасти(ПостановкаНаКонтроль, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = ПостановкаНаКонтроль[0];
				Если Не СтрокаТЧ.ТребуетсяИсполнение И Не СтрокаТЧ.ТребуетсяПубликация
					И Не СтрокаТЧ.ТребуетсяИсполнение Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'В разделе ""%1"" нужно отметить хотя один флажок контроля из трех'"),
							СинонимТЧ), , , , Отказ);
				КонецЕсли;
				
				СинонимТЧ = НСтр("ru = 'Постановка на контроль - контрольные пункты'");
				// Сама ТЧ не обязательна, но если уж она заполнена, то нужны обязательные поля:
				Для Каждого СтрокаТЧ Из ПостановкаНаКонтроль_КонтрольныеПунктыДокумента Цикл
					ПроверитьЗаполненияПоля(СтрокаТЧ.ИдентификаторПункта, СинонимТЧ, НСтр("ru = 'Идентификатор пункта'"), Отказ);
					ПроверитьЗаполненияПоля(СтрокаТЧ.Ответственный, СинонимТЧ, НСтр("ru = 'Ответственный'"), Отказ);
					ПроверитьЗаполненияПоля(СтрокаТЧ.Юрлицо, СинонимТЧ, НСтр("ru = 'Юрлицо'"), Отказ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОРегистрации Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(Регистрация));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Регистрация'");
			ПроверитьЗаполнениеТабличнойЧасти(Регистрация, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = Регистрация[0];
				ПроверитьЗаполненияПоля(СтрокаТЧ.ДатаРегистрации, СинонимТЧ, НСтр("ru = 'Дата регистрации'"), Отказ);
				ПроверитьЗаполненияПоля(СтрокаТЧ.РегистрационныйНомер, СинонимТЧ, НСтр("ru = 'Рег. №'"), Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОбОтказеВРегистрации Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(ОтказВРегистрации));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Отказ в регистрации'");
			СинонимПоля =  НСтр("ru = 'Причина отказа'");
			ПроверитьЗаполнениеТабличнойЧасти(ОтказВРегистрации, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = ОтказВРегистрации[0];
				ПроверитьЗаполненияПоля(СтрокаТЧ.ПричинаОтказа, СинонимТЧ, СинонимПоля, Отказ);
			КонецЕсли;
			
			
			Если Не Отказ Тогда
				ПричинаОтказа = ОтказВРегистрации[0].ПричинаОтказа;
				ВерсииПричины = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПричинаОтказа, "ВерсияОт, ВерсияДо");
				
				ОшибкаФормата = Ложь;
				Если ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия27 Тогда
					Если ВерсииПричины.ВерсияОт = Перечисления.ВерсииФорматаМЭДО.Версия271
						Или ВерсииПричины.ВерсияДо = Перечисления.ВерсииФорматаМЭДО.Версия25 Тогда
						ОшибкаФормата = Истина;
					КонецЕсли;
					
				ИначеЕсли ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия271 Тогда
					Если ВерсииПричины.ВерсияДо = Перечисления.ВерсииФорматаМЭДО.Версия27
						Или ВерсииПричины.ВерсияДо = Перечисления.ВерсииФорматаМЭДО.Версия25 Тогда
						ОшибкаФормата = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ОшибкаФормата Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'В поле ""%1"" указана причина с некорректной версией формата МЭДО.
						|Укажите причину отказа корректного формата. Уведомление отправляется в версии %2
						|(Версия перед отправкой можно скорректироваться по настройкам контрагента)'"),
						СинонимПоля, ВерсияМЭДО), , , , Отказ);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОПринятииКИсполнению Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(ПринятиеКИсполнению));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Принятие к исполнению'");
			ПроверитьЗаполнениеТабличнойЧасти(ПринятиеКИсполнению, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = ПринятиеКИсполнению[0];
				ПроверитьЗаполненияПоля(
					СтрокаТЧ.Юрлицо, СинонимТЧ, НСтр("ru = 'Юрлицо исполнителя по документу'"), Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОПодготовкеДоклада Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(ПодготовкаДоклада));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Подготовка доклада'");
			ПроверитьЗаполнениеТабличнойЧасти(ПодготовкаДоклада, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = ПодготовкаДоклада[0];
				ПроверитьЗаполненияПоля(СтрокаТЧ.ДатаПодписания, СинонимТЧ, НСтр("ru = 'Дата подписания'"), Отказ);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОНаправленииДоклада Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(НаправлениеДоклада));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Направление доклада'");
			ПроверитьЗаполнениеТабличнойЧасти(НаправлениеДоклада, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = НаправлениеДоклада[0];
				ПроверитьЗаполненияПоля(СтрокаТЧ.ДатаРегистрации, СинонимТЧ, НСтр("ru = 'Дата регистрации'"), Отказ);
				ПроверитьЗаполненияПоля(СтрокаТЧ.РегистрационныйНомер, СинонимТЧ, НСтр("ru = 'Рег. №'"), Отказ);
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОХодеИсполнения Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(ХодИсполнения));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Ход исполнения'");
			ПроверитьЗаполнениеТабличнойЧасти(ХодИсполнения, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = ХодИсполнения[0];
				ПроверитьЗаполненияПоля(СтрокаТЧ.ОписаниеХодаИсполнения, СинонимТЧ, НСтр("ru = 'Рег. №'"), Отказ);
				Если ЗначениеЗаполнено(СтрокаТЧ.Юрлицо) Или ЗначениеЗаполнено(СтрокаТЧ.Ответственный)
					Или ЗначениеЗаполнено(СтрокаТЧ.Комментарий) Тогда
					ПроверитьЗаполненияПоля(СтрокаТЧ.ДатаРегистрации, СинонимТЧ, НСтр("ru = 'Дата регистрации'"), Отказ);
					ПроверитьЗаполненияПоля(СтрокаТЧ.РегистрационныйНомер, СинонимТЧ, НСтр("ru = 'Рег. №'"), Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипУведомления = Перечисления.ТипыУведомленийМЭДО.ОбОпубликовании Тогда
		
		МассивТЧ.Удалить(МассивТЧ.Найти(Опубликование));
		Если ЭтоИсходящее Тогда
			СинонимТЧ = НСтр("ru = 'Опубликование'");
			ПроверитьЗаполнениеТабличнойЧасти(Опубликование, СинонимТЧ, Отказ);
			Если Не Отказ Тогда
				СтрокаТЧ = Опубликование[0];
				ПроверитьЗаполненияПоля(СтрокаТЧ.ДатаРегистрации, СинонимТЧ, НСтр("ru = 'Дата регистрации'"), Отказ);
				ПроверитьЗаполненияПоля(СтрокаТЧ.РегистрационныйНомер, СинонимТЧ, НСтр("ru = 'Рег. №'"), Отказ);
				ПроверитьЗаполненияПоля(СтрокаТЧ.ПечатныйОрган, СинонимТЧ, НСтр("ru = 'Печатный орган'"), Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементТЧ Из МассивТЧ Цикл
		ЭлементТЧ.Очистить();
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(ТЧ, СинонимТЧ, Отказ)
	
	Если ТЧ.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не заполнен раздел %1'"), СинонимТЧ), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполненияПоля(Поле, СинонимТЧ, СинонимПоля, Отказ)
	
	Если Не ЗначениеЗаполнено(Поле) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'В разделе ""%1"" не заполнено поле ""%2""'"), СинонимТЧ, СинонимПоля), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Иначе

#Область Инициализация
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецОбласти

#КонецЕсли