#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ИмяПроцесса(ШаблонСсылка) Экспорт
	
	Возврат ШаблонСсылка.ТипШаблона;
	
КонецФункции

Функция СинонимПроцесса(ИмяПроцесса, РеквизитыШаблона) Экспорт
	
	Возврат Метаданные.БизнесПроцессы[ИмяПроцесса].Синоним;
	
КонецФункции

// Заполняет html обзор данными шаблона процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - СправочникСсылка.ШаблоныСоставныхБизнесПроцессов - ссылка на шаблон
//
Процедура ЗаполнитьОбзорШаблона(HTMLТекст, Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"Шаблоны, ТипШаблона");
		
	Шаблоны = РеквизитыШаблона.Шаблоны.Выгрузить();
	Шаблоны.Сортировать("НомерСтроки Возр");
	
	Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаДни");
	Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаЧасы");
	Шаблоны.Колонки.Добавить("СрокИсполненияПроцессаМинуты");
	СрокиИсполненияПроцессов.ЗаполнитьДлительностьШаблоновСоставногоПроцесса(Шаблоны);
	
	ТипШаблона = РеквизитыШаблона.ТипШаблона;
	
	Если Шаблоны.Количество() > 0 Тогда
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Этапы: '"));
		HTMLТекст = HTMLТекст + "<br>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Действие'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Шаблон вложенного процесса'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""100"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		Для Каждого СтрШаблон Из Шаблоны Цикл
			Если ЗначениеЗаполнено(СтрШаблон.Шаблон) Тогда
				
				HTMLТекст = HTMLТекст + "<tr>";
				
				HTMLТекст = HTMLТекст + "<td class=""frame"">";
				ОбзорОбъектовКлиентСервер.ДобавитьПодпись(
					HTMLТекст, Метаданные.БизнесПроцессы[ТипШаблона].Реквизиты[СтрШаблон.Реквизит].Синоним);
				HTMLТекст = HTMLТекст + "</td>";
				
				HTMLТекст = HTMLТекст + "<td class=""frame"">";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, СтрШаблон.Шаблон, "");
				HTMLТекст = HTMLТекст + "</td>";
				
				// Срок исполнения действия
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""100"">";
				ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
					Дата(1,1,1), СтрШаблон.СрокИсполненияПроцессаДни, 
					СтрШаблон.СрокИсполненияПроцессаЧасы, СтрШаблон.СрокИсполненияПроцессаМинуты, 
					ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
					Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок);
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, "");
				HTMLТекст = HTMLТекст + "</td>";
				
				HTMLТекст = HTMLТекст + "</tr>";
				
			КонецЕсли;
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Шаблон);
	
	Если ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаДни)
		Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаЧасы)
		Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаМинуты) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ПредставлениеДлительности = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
			ДлительностьПроцесса.СрокИсполненияПроцессаДни,
			ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
			ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеДлительности, "");
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает тип шаблона ОбработкаВнутреннегоДокумента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТипШаблонаОбработкаВнутреннегоДокумента() Экспорт
	
	Возврат "ОбработкаВнутреннегоДокумента";
	
КонецФункции

// Возвращает тип шаблона ОбработкаВходящегоДокумента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТипШаблонаОбработкаВходящегоДокумента() Экспорт
	
	Возврат "ОбработкаВходящегоДокумента";
	
КонецФункции

// Возвращает тип шаблона ОбработкаВходящегоДокумента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТипШаблонаОбработкаИсходящегоДокумента() Экспорт
	
	Возврат "ОбработкаИсходящегоДокумента";
	
КонецФункции

// Заполняет таблицу шаблоны в зависимости от типа шаблона.
//
// Параметры:
//  Шаблоны - ТабличнаяЧасть,
//            ДанныеФормыКоллекция - таблица шаблонов, с колонкой Шаблон.
//
Процедура ЗаполнитьТаблицуШаблоны(Шаблоны, ТипШаблона) Экспорт
	
	Шаблоны.Очистить();
	
	МДБизнесПроцесс = Метаданные.БизнесПроцессы.Найти(ТипШаблона);
	Если МДБизнесПроцесс = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МДРеквизитовПроцесса = Новый Соответствие;
	
	ТипШаблоныСогласования = Тип("СправочникСсылка.ШаблоныСогласования");
	ТипШаблоныУтверждения = Тип("СправочникСсылка.ШаблоныУтверждения");
	ТипШаблоныРегистрации = Тип("СправочникСсылка.ШаблоныРегистрации");
	ТипШаблоныРассмотрения = Тип("СправочникСсылка.ШаблоныРассмотрения");
	ТипШаблоныИсполнения = Тип("СправочникСсылка.ШаблоныИсполнения");
	ТипШаблоныОзнакомления = Тип("СправочникСсылка.ШаблоныОзнакомления");
	ТипШаблоныПоручения = Тип("СправочникСсылка.ШаблоныПоручения");
	
	МДРеквизиты = МДБизнесПроцесс.Реквизиты;
	Для Каждого МДРеквизит Из МДРеквизиты Цикл
		Если МДРеквизит.Тип.СодержитТип(ТипШаблоныСогласования) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныСогласования, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныУтверждения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныУтверждения, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныРегистрации) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныРегистрации, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныРассмотрения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныРассмотрения, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныИсполнения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныИсполнения, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныОзнакомления) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныОзнакомления, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныПоручения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныПоручения, МДРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныСогласования);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныУтверждения);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныРегистрации);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныРассмотрения);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныИсполнения);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныОзнакомления);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныПоручения);
	ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, МДРеквизит);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ответственный,
		|Ссылка,
		|ЭтоГруппа,
		|ШаблонВКомплексномПроцессе,
		|ВладелецШаблона,
		|КомплексныйПроцесс";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьДескрипторыОбъекта(
		ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Возвращает участников шаблона для проверки прав на предметы.
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныСоставныхБизнесПроцессов, СправочникОбъект.ШаблоныСоставныхБизнесПроцессов - шаблон
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Шаблон) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	ТаблицаУчастников.Колонки.Добавить("СодержитсяВНовойВерсии");
	ТаблицаУчастников.Колонки.Добавить("СодержитсяВСтаройВерсии");
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Автор, Шаблоны");
		РеквизитыШаблона.Шаблоны = РеквизитыШаблона.Шаблоны.Выгрузить();
	Иначе
		РеквизитыШаблона = Шаблон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Автор) Тогда
		СтрокаУчастника = ТаблицаУчастников.Добавить();
		СтрокаУчастника.Участник = РеквизитыШаблона.Автор;
	КонецЕсли;
	
	Для Каждого СтрокаЭтапа Из РеквизитыШаблона.Шаблоны Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаЭтапа.Шаблон) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЭтапа = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаЭтапа.Шаблон);
		УчастникиЭтапа = МенеджерЭтапа.УчастникиДляПроверкиПрав(СтрокаЭтапа.Шаблон);
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаУчастников.Добавить(), УчастникЭтапа);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаУчастников.Свернуть("Участник", "Изменение");
	
	Возврат ТаблицаУчастников;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Показывает, может ли процесс по данному шаблону использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает реквизиты, которые используются для определения значений
// вычисляемых полей комплексного процесса.
//
// Параметры:
//  Процесс - СправочникСсылка.ШаблоныСоставныхБизнесПроцессов - ссылка на шаблон
//
// Возвращаемое значение:
//  Структура
//
Функция РеквизитыЭтапаДляВычисляемыхПолей(Процесс) Экспорт
	
	РеквизитыСтрокой = 
		"НаименованиеБизнесПроцесса,
		|ИсходныйШаблон,
		|Важность,
		|Шаблоны,
		|СрокОтложенногоСтарта";
	
	РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.
		ЗначенияРеквизитовОбъектаВПривилегированномРежиме(Процесс, РеквизитыСтрокой);
		
	РеквизитыПроцесса.Шаблоны = РеквизитыПроцесса.Шаблоны.Выгрузить();
	
	Возврат РеквизитыПроцесса;
	
КонецФункции

// Получает строковое представление исполнителей шаблона процесса
//
// Параметры:
//  РеквизитыПроцесса - Струкута - см. РеквизитыЭтапаДляВычисляемыхПолей
//
// Возаращаемое значение:
//  Строка
//
Функция ПолучитьСтроковоеПредставлениеИсполнителей(РеквизитыПроцесса) Экспорт
	
	Результат = НСтр("ru = 'Определяются настройками действия'");		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "Справочник.ШаблоныСоставныхБизнесПроцессов.Форма.ФормаЭлемента";
		
		Если Не Параметры.Свойство("ВладелецШаблона") И Параметры.Свойство("Ключ") Тогда
			ВладелецШаблона = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Параметры.Ключ, "ВладелецШаблона");
				
			Если (ТипЗнч(ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
					Или ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")) Тогда
				
				Параметры.Вставить("ВладелецШаблона", ВладелецШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ОбщаяФорма.ШаблоныБизнесПроцессов";
		Параметры.Вставить("РежимВыбора", Истина);
		Параметры.Вставить("ТипШаблона", "СоставнойПроцесс");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет реквизи процесса в шаблон.
// Вызывается из ЗаполнитьТаблицуШаблоны.
//
// Параметры:
//  Шаблоны - ТабличнаяЧасть,
//            ДанныеФормыКоллекция - таблица шаблонов, с колонкой Шаблон.
//  РеквизитПроцесса - ОбъектМетаданныхРеквизит - метаданные реквизита процесса.
// 
Процедура ДобавитьРеквизитПроцессаВШаблоны(Шаблоны, РеквизитПроцесса)
	
	Если РеквизитПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Шаблоны.Добавить();
	НоваяСтрока.Реквизит = РеквизитПроцесса.Имя;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
