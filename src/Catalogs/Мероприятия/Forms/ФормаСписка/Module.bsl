#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры списка
	Список.Параметры.УстановитьЗначениеПараметра("Участник", Справочники.Пользователи.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Задачи
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		Элементы.Задачи.Видимость = Ложь;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	// Категории
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Элементы.ЕстьКатегорииДанных.Видимость = Ложь;
	КонецЕсли;
	
	// Автообновление
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		Автообновление.ЗагрузитьНастройкиАвтообновленияСписка(ЭтаФорма, "Список");
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Вид просмотра
	НастроитьВидПросмотра();
	
	// Отображение удаленных
	ПереключитьОтображатьУдаленные();
	
	// Раздельное исполнение пунктов протокола.
	РаздельноеИсполнениеПунктовПротокола =
		ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия");
	
	// Отбор списка
	ПоказыватьМероприятия = Неопределено;
	
	// Отбор организатор - автоподбор
	Если Не ЗначениеЗаполнено(Организатор) Тогда
		Организатор = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	// Отбор участник - автоподбор
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Участник = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьОтбор();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Неопределено,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
	ИнциализироватьКалендарь();
	УстановитьГрафикРаботы();
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	МК_НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Мероприятие"
		Или ИмяСобытия = "Запись_Мероприятия" Тогда
		ОбновитьПланировщик();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтбор();
	
	// Вид просмотра
	НастроитьВидПросмотра();
	
	// Отображение удаленных
	ПереключитьОтображатьУдаленные();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПоказыватьМероприятия, ПоказыватьМероприятия);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ВидМероприятия, ВидМероприятия);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПапка, ОтборПапка);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Проект, Проект);
	
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	ПриИзмененииПараметровЭкранаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьМероприятияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПоказыватьМероприятия, ПоказыватьМероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника мероприятия'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораУчастника", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораУчастника(ВыбранныеУчастники, ДопПараметры) Экспорт
	
	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Участник = ВыбранныеУчастники[0].Контакт;
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Участник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ВидМероприятия, ВидМероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПапкаПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПапка, ОтборПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриАктивизацииДаты(Элемент)
	
	Если Элемент.ВыделенныеДаты.Количество() = ВыделенныеДаты.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеДаты.ЗагрузитьЗначения(Элемент.ВыделенныеДаты);
	Если ВыделенныеДаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ВыделенныеДаты.НайтиПоЗначению(ОтображаемаяДата) = Неопределено Тогда
		ОтображаемаяДата = ВыделенныеДаты[ВыделенныеДаты.Количество() - 1].Значение;
	КонецЕсли;
	ОбновитьНастройкиОтображения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Если Не ЗаданГрафикРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		
		Если ЗаполненныеГода.НайтиПоЗначению(Год(СтрокаОформленияПериода.Дата)) = Неопределено Тогда
			РаботаСРабочимКалендаремСервер.ЗаполнитьРабочиеДни(
				РабочиеДни,
				ЗаполненныеГода,
				СтрокаОформленияПериода.Дата);
		КонецЕсли;
		
		СтрокаРабочиеДни = РабочиеДни.НайтиПоЗначению(СтрокаОформленияПериода.Дата);
		Если СтрокаРабочиеДни = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРабочиеДни.Пометка Тогда
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Черный;
		Иначе
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриИзменении(Элемент)
	
	ВыделенныеДаты.ЗагрузитьЗначения(Элемент.ВыделенныеДаты);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор организатора мероприятия'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораОрганизатора", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораОрганизатора(ВыбранныеУчастники, ДопПараметры) Экспорт
	
	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организатор = ВыбранныеУчастники[0].Контакт;
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Организатор = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Проект, Проект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПапки

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам")
		И Элементы.Папки.Видимость
		И ТекущаяПапка <> Элементы.Папки.ТекущаяСтрока Тогда
		
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_ГруппаПапки.Скрыть();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("УстановитьПараметрыСписка", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// Запрет перетаскивания в пустую папку
	Если Не ЗначениеЗаполнено(Строка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		УправлениеМероприятиямиКлиент.ИзменитьПапкуМероприятий(ПараметрыПеретаскивания.Значение, Строка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.Файлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Задачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ВыбраннаяСтрока),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьКатегорииДанных Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбраннаяСтрока, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
	ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущееМероприятие = Неопределено;
		ТекущаяПапка = Неопределено;
		УстановитьДоступностьКомандОтправить(Ложь);
		ОбновитьПараметрыУчетаВремениВФорме();
		Возврат;
	КонецЕсли;
	
	ТекущееМероприятие = ТекущиеДанные.Ссылка;
	УстановитьДоступностьКомандОтправить(ТекущиеДанные.ПротокольноеМероприятие);
	ОбновитьПараметрыУчетаВремениВФорме();
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ТекущаяПапка = ТекущиеДанные.Папка;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(ВидМероприятия) Тогда
		ЗначенияЗаполнения.Вставить("ВидМероприятия", ВидМероприятия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ЗначенияЗаполнения.Вставить("Проект", Проект);
	КонецЕсли;
	
	ПапкаЗаполнения =
		?(ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам"),
			ТекущаяПапка,
			ОтборПапка);
	Если ЗначениеЗаполнено(ПапкаЗаполнения) Тогда
		ЗначенияЗаполнения.Вставить("Папка", ПапкаЗаполнения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Открытьформу("Справочник.Мероприятия.ФормаОбъекта", ПараметрыФормы, Элемент, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Период строкой
		Если ДанныеСтроки.Свойство("ПериодСтрокой") Тогда
			ДанныеСтроки.ПериодСтрокой = УправлениеМероприятиями.МестныйПериодСтрокой(
				ДанныеСтроки.ДатаНачала,
				ДанныеСтроки.ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления(Элемент)
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланировщик

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПланировщикомКлиент.ПоказатьТекущийЭлементПланировщика(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НовыйЭлемент Тогда
		
		ТекущийЭлементПланировщика = РаботаСПланировщикомКлиент.ТекущийЭлементПланировщика(Элемент);
		Если ТекущийЭлементПланировщика = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СоздатьМероприятие(
			ТекущийЭлементПланировщика.Текст,
			ТекущийЭлементПланировщика.Начало,
			ТекущийЭлементПланировщика.Конец);
		
	Иначе
		
		РаботаСПланировщикомКлиент.ПоказатьТекущийЭлементПланировщика(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияДокументооборотКлиент.УстановитьПометкуУдаления(
		РаботаСПланировщикомКлиент.ВыделенныеОбъекты(Элемент));
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОтменаРедактирования = Истина;
	
	Если НовыйЭлемент Тогда
		
		Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
			
			Если ТипЗнч(ВыделенныйЭлемент.Значение) = Тип("Структура")
				И ЗначениеЗаполнено(ВыделенныйЭлемент.Значение.Ссылка) Тогда
				
				КопироватьМероприятие(
					ВыделенныйЭлемент.Значение.Ссылка,
					ВыделенныйЭлемент.Начало,
					ВыделенныйЭлемент.Конец);
				
			Иначе
				
				СоздатьМероприятие(
					ВыделенныйЭлемент.Текст,
					ВыделенныйЭлемент.Начало,
					ВыделенныйЭлемент.Конец);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ИзмененияМероприятий = Новый Массив;
		Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
			
			Если ТипЗнч(ВыделенныйЭлемент.Значение) <> Тип("Структура")
				Или Не ЗначениеЗаполнено(ВыделенныйЭлемент.Значение.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ИзменениеМероприятия = Новый Структура("Мероприятие, ДатаНачала, ДатаОкончания");
			ИзменениеМероприятия.Мероприятие = ВыделенныйЭлемент.Значение.Ссылка;
			ИзменениеМероприятия.ДатаНачала = ВыделенныйЭлемент.Начало;
			ИзменениеМероприятия.ДатаОкончания = ВыделенныйЭлемент.Конец;
			
			ИзмененияМероприятий.Добавить(ИзменениеМероприятия);
			
			
		КонецЦикла;
		
		Попытка
			
			ИзменитьМероприятия(ИзмененияМероприятий);
			
		Исключение
			
			Оповестить("Запись_Мероприятие");
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		Оповестить("Запись_Мероприятие");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Автообновление(Команда)
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтаФорма, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПланировщикомНаДень(Команда)
	
	ВключитьПросмотрПланировщикомНаДеньПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПланировщикомНаДеньПродолжение()
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПланировщикомНаМесяц(Команда)
	
	ВключитьПросмотрПланировщикомНаМесяцПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПланировщикомНаМесяцПродолжение()
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПланировщикомНаНеделю(Команда)
	
	ВключитьПросмотрПланировщикомНаНеделюПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПланировщикомНаНеделюПродолжение()
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПапками(Команда)
	
	ВключитьПросмотрПапкамиПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПапкамиПродолжение()
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
		ПереключитьВидПросмотра();
		ПодключитьОбработчикОжидания("УстановитьПараметрыСписка", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрСписком(Команда)
	
	ВключитьПросмотрСпискомПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрСпискомПродолжение()
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеЗапросаМатериалов = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МатериалыВыступающихЗапрошены"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеЗапросаМатериалов", УстановилСостояниеЗапросаМатериалов);
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьМатериалы_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеЗапросаМатериалов)
		И ТипЗнч(УстановилСостояниеЗапросаМатериалов) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Материалы уже запрошены.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть запрос'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеЗапросаМатериалов);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ЗапроситьМатериалы");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеИсполненияПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаИсполнении"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеИсполненияПротокола", УстановилСостояниеИсполненияПротокола);
	
	Оповещение = Новый ОписаниеОповещения("ИсполнитьПротокол_Завершение", ЭтотОбъект, ДопПараметры);
	Если ЗначениеЗаполнено(УстановилСостояниеИсполненияПротокола)
		И ТипЗнч(УстановилСостояниеИсполненияПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на исполнение.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть исполнение'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеИсполненияПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	ПараметрыНаИсполнение = УправлениеМероприятиямиКлиент.ПараметрыДляНаправленияПротоколаНаИсполнение();
	ПараметрыНаИсполнение.Мероприятие = ТекущиеДанные.Ссылка;
	ПараметрыНаИсполнение.ТипПротокола = ТекущиеДанные.ТипПротокола;
	ПараметрыНаИсполнение.МатериалПротокол = ТекущиеДанные.МатериалПротокол;
	ПараметрыНаИсполнение.РаздельноеИсполнение = РаздельноеИсполнениеПунктовПротокола;
	ПараметрыНаИсполнение.Владелец = ЭтотОбъект;
	
	УправлениеМероприятиямиКлиент.НаправитьПротоколМероприятияНаИсполнение(ПараметрыНаИсполнение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеОзнакомленияСМатериалами = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеОзнакомленияСМатериалами", УстановилСостояниеОзнакомленияСМатериалами);
	
	Оповещение = Новый ОписаниеОповещения("ОзнакомитьСМатериалами_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеОзнакомленияСМатериалами)
		И ТипЗнч(УстановилСостояниеОзнакомленияСМатериалами) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Материалы уже отправлены на ознакомление.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть ознакомление'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеОзнакомленияСМатериалами);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ОзнакомитьСМатериалами");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Ознакомление.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	ПереключитьОтображатьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредыдущийПериод(Команда)
	
	ДатаНачалаПредыдущегоПериода = 
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаПредыдущегоПериода(
			НастройкиОтображения.ПериодОтображения,
			ОтображаемаяДата);
	УстановитьОтображаемуюДату(ДатаНачалаПредыдущегоПериода);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСегодня(Команда)
	
	ДатаСегодня = НачалоДня(ТекущаяДата());
	УстановитьОтображаемуюДату(ДатаСегодня);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСледующийПериод(Команда)
	
	ДатаНачалаСледующегоПериода = 
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаСледующегоПериода(
			НастройкиОтображения.ПериодОтображения,
			ОтображаемаяДата);
	УстановитьОтображаемуюДату(ДатаНачалаСледующегоПериода);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПрава(Команда)
	
	Папка = Элементы.Папки.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие формы настройки прав
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", Папка);
	ОткрытьФорму("ОбщаяФорма.НастройкиПравПапок", ПараметрыФормы, , Папка);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком")
		Или ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Элементы.Список.Обновить();
		Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
			Элементы.Папки.Обновить();
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень")
		Или ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю")
		Или ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц") Тогда
		
		ОбновитьПланировщик();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеПодготовкиПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколГотовиться"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеПодготовкиПротокола", УстановилСостояниеПодготовкиПротокола);
	
	Оповещение = Новый ОписаниеОповещения("ПодготовитьПротокол_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПодготовкиПротокола)
		И ТипЗнч(УстановилСостояниеПодготовкиПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Подготовка протокола уже инициирована.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть процесс подготовки'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеПодготовкиПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПодготовитьПротокол");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановилСостояниеПриглашенияУчастников = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПриглашенияОтправлены"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеПриглашенияУчастников", УстановилСостояниеПриглашенияУчастников);
	
	Оповещение = Новый ОписаниеОповещения("ПригласитьУчастников_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПриглашенияУчастников)
		И ТипЗнч(УстановилСостояниеПриглашенияУчастников) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Приглашение уже отправлено.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть приглашение'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеПриглашенияУчастников);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.Ссылка);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеПроведенияМероприятия = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеПроведенияМероприятия", УстановилСостояниеПроведенияМероприятия);
	
	Оповещение = Новый ОписаниеОповещения("ПровестиМероприятие_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПроведенияМероприятия)
		И ТипЗнч(УстановилСостояниеПроведенияМероприятия) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Проведение мероприятия уже инициировано.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть процесс'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеПроведенияМероприятия);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПровестиМероприятие");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	СоздатьМероприятие(Неопределено, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеСогласованияПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаСогласовании"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеСогласованияПротокола", УстановилСостояниеСогласованияПротокола);
	
	Оповещение = Новый ОписаниеОповещения("СогласоватьПротокол_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеСогласованияПротокола)
		И ТипЗнч(УстановилСостояниеСогласованияПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на согласование.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть согласование'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеСогласованияПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе	
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "СогласоватьПротокол");
		Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПрограмму(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеУтвержденияПрограммы = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
			ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПрограммаНаУтверждении"));
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеУтвержденияПрограммы", УстановилСостояниеУтвержденияПрограммы);
	
	Оповещение = Новый ОписаниеОповещения("УтвердитьПрограмму_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеУтвержденияПрограммы)
		И ТипЗнч(УстановилСостояниеУтвержденияПрограммы) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Программа уже находиться на утверждении.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть утверждение'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПрограмму_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеУтвержденияПрограммы);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе	
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПрограмму");
		Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеУтвержденияПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
			ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаУтверждении"));
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеУтвержденияПротокола", УстановилСостояниеУтвержденияПротокола);
	
	Оповещение = Новый ОписаниеОповещения("УтвердитьПротокол_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеУтвержденияПротокола)
		И ТипЗнч(УстановилСостояниеУтвержденияПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на утверждение.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть утверждение'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеУтвержденияПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПротокол");
		Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
		
	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.МероприятияСписок");
	
	ЗаголовокФормы = НСтр("ru = 'Отчеты по мероприятиям'");
	
	РазделГипперссылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("СовместнаяРабота");
	
	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперссылка", 
										Раздел, ЗаголовокФормы, Истина, РазделГипперссылка);
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма, 
		"МероприятияСписок");

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, ТекущиеДанные.Ссылка);
		
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(ТекущиеДанные.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект,
			Новый Структура("Объект", ТекущиеДанные.Ссылка));
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", ТекущееМероприятие);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ТекущиеДанные.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	
	ЗначениеОтбораОрганизатор = Неопределено;
	Если ТипЗнч(Организатор) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Организатор) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗначениеОтбораОрганизатор = Организатор;
	КонецЕсли;
	
	ЗначениеОтбораОрганизаторКонтактноеЛицо = Неопределено;
	Если ТипЗнч(Организатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ЗначениеОтбораОрганизаторКонтактноеЛицо = Организатор;
	КонецЕсли;
	
	ЗначениеОтбораПапка = ?(ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам,
		ТекущаяПапка,
		ОтборПапка);
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("ПоказыватьМероприятия", ПоказыватьМероприятия);
	Параметрыотбора.Вставить("Участник", Участник);
	Параметрыотбора.Вставить("ВидМероприятия", ВидМероприятия);
	ПараметрыОтбора.Вставить("Папка", ЗначениеОтбораПапка);
	Параметрыотбора.Вставить("Организатор", ЗначениеОтбораОрганизатор);
	Параметрыотбора.Вставить("ОрганизаторКонтактноеЛицо", ЗначениеОтбораОрганизаторКонтактноеЛицо);
	Параметрыотбора.Вставить("Проект", Проект);
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	Если ЭтоМобильныйКлиент Тогда
		ОбновитьВидимостьКнопкиОчистки();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	Список.Параметры.УстановитьЗначениеПараметра("Участник", ПараметрыОтбора["Участник"]);
	
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "СостояниеМероприятия", ПараметрыОтбора["ПоказыватьМероприятия"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "ВидМероприятия", ПараметрыОтбора["ВидМероприятия"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "Папка", ПараметрыОтбора["Папка"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "Организатор", ПараметрыОтбора["Организатор"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "ОрганизаторКонтактноеЛицо", ПараметрыОтбора["ОрганизаторКонтактноеЛицо"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "Проект", ПараметрыОтбора["Проект"]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСпискаПоПараметру(Параметры, ИмяПараметра, Значение)
	
	Параметр = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Параметр.Использование = Ложь;
	Если ЗначениеЗаполнено(Значение) Тогда
		Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
			ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("Папка", ТекущаяПапка);
		Элементы.Список.ТекущаяСтрока = ТекущееМероприятие;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	НастроитьВидПросмотра();
	УстановитьОтбор();
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьОтображатьУдаленные()
	
	Элементы.ФормаОтображатьУдаленные.Пометка = ОтображатьУдаленные;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	Папки.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандОтправить(ПротокольноеМероприятие)
	
	ВыбраноМероприятие = ЗначениеЗаполнено(ТекущееМероприятие);
	
	Если Элементы.Найти("ФормаОбщаяКомандаСоздатьПисьмоНаОсновании") <> Неопределено Тогда
		Элементы.ФормаОбщаяКомандаСоздатьПисьмоНаОсновании.Доступность = ВыбраноМероприятие;
	КонецЕсли;
	Элементы.ОтправитьОбъекты.Доступность = ВыбраноМероприятие;
	
	Элементы.ФормаУтвердитьПрограмму.Доступность = ВыбраноМероприятие;
	Элементы.ФормаПригласитьУчастников.Доступность = ВыбраноМероприятие;
	Элементы.ФормаЗапроситьМатериалы.Доступность = ВыбраноМероприятие;
	Элементы.ФормаОзнакомитьСМатериалами.Доступность = ВыбраноМероприятие;
	Элементы.ФормаПровестиМероприятие.Доступность = ВыбраноМероприятие;
	
	Элементы.ФормаПодготовитьПротокол.Доступность = ПротокольноеМероприятие;
	Элементы.ФормаСогласоватьПротокол.Доступность = ПротокольноеМероприятие;
	Элементы.ФормаУтвердитьПротокол.Доступность = ПротокольноеМероприятие;
	Элементы.ФормаИсполнитьПротокол.Доступность = ПротокольноеМероприятие;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		Элементы.Трудозатраты.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ТекущееМероприятие);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Элементы.Трудозатраты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееМероприятие,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Параметры.Объект);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееМероприятие,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Мероприятие)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Мероприятие,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьМероприятия(ИзмененияМероприятий)
	
	Для Каждого ИзменениеМероприятия Из ИзмененияМероприятий Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(ИзменениеМероприятия.Мероприятие);
			
			МероприятиеОбъект = ИзменениеМероприятия.Мероприятие.ПолучитьОбъект();
			МероприятиеОбъект.ДатаНачала = ИзменениеМероприятия.ДатаНачала;
			МероприятиеОбъект.ДатаОкончания = ИзменениеМероприятия.ДатаОкончания;
			МероприятиеОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция КопироватьМероприятие(Мероприятие, ДатаНачала, ДатаОкончания)
	
	Если ДатаНачала = НачалоДня(ДатаНачала)
		И ДатаОкончания = НачалоДня(ДатаОкончания) Тогда
		ДатаНачала = НачалоДня(ДатаНачала) + 32400;
		ДатаОкончания = НачалоДня(ДатаОкончания - 1) + 64800
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Мероприятие", Мероприятие);
	ЗначенияЗаполнения.Вставить("ДатаНачала", ДатаНачала);
	ЗначенияЗаполнения.Вставить("ДатаОкончания", ДатаОкончания);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Открытьформу("Справочник.Мероприятия.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция СоздатьМероприятие(Наименование, ДатаНачала, ДатаОкончания)
	
	Если ЗначениеЗаполнено(ДатаНачала)
		И ДатаНачала = НачалоДня(ДатаНачала)
		И ЗначениеЗаполнено(ДатаОкончания)
		И ДатаОкончания = НачалоДня(ДатаОкончания) Тогда
		ДатаНачала = НачалоДня(ДатаНачала) + 32400;
		ДатаОкончания = НачалоДня(ДатаОкончания - 1) + 64800
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(ВидМероприятия) Тогда
		ЗначенияЗаполнения.Вставить("ВидМероприятия", ВидМероприятия);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПапка) Тогда
		ЗначенияЗаполнения.Вставить("Папка", ОтборПапка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Проект) Тогда
		ЗначенияЗаполнения.Вставить("Проект", Проект);
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование) Тогда
		ЗначенияЗаполнения.Вставить("Наименование", Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ЗначенияЗаполнения.Вставить("ДатаНачала", ДатаНачала);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗначенияЗаполнения.Вставить("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Открытьформу("Справочник.Мероприятия.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ИнциализироватьКалендарь()
	
	ОтображаемаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	НастройкиОтображения = РаботаСПланировщиком.НастройкиОтображения();
	НастройкиОтображения.ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Ссылка КАК Ссылка,
		|	Мероприятия.Наименование КАК Наименование,
		|	Мероприятия.ДатаНачала КАК ДатаНачала,
		|	Мероприятия.ДатаОкончания КАК ДатаОкончания,
		|	Мероприятия.ПометкаУдаления КАК ПометкаУдаления,
		|	ЛОЖЬ КАК ВесьДень,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЦветаПланировщика.Нет)
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЦветаПланировщика.Серый)
		|		КОГДА Мероприятия.ДатаОкончания < &ТекущаяДатаСеанса
		|				И 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЦветаПланировщика.Красный)
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЦветаПланировщика.Зеленый)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЦветаПланировщика.Нет)
		|	КОНЕЦ КАК Цвет,
		|	ЕСТЬNULL(МероприятияДополнительныеРеквизиты.Значение, """") КАК ДополнительноеЗначение
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.ДополнительныеРеквизиты КАК МероприятияДополнительныеРеквизиты
		|		ПО Мероприятия.Ссылка = МероприятияДополнительныеРеквизиты.Ссылка
		|			И (МероприятияДополнительныеРеквизиты.Свойство = &ДополнительныйРеквизит)
		|ГДЕ
		|	Мероприятия.ДатаОкончания > &ДатаНачала
		|	И Мероприятия.ДатаНачала < &ДатаОкончания
		|	И Мероприятия.Папка = &Папка
		|	И Мероприятия.ВидМероприятия = &ВидМероприятия
		|	И Мероприятия.Организатор = &Организатор
		|	И Мероприятия.ОрганизаторКонтактноеЛицо = &ОрганизаторКонтактноеЛицо
		|	И Мероприятия.Проект = &Проект
		|	И Мероприятия.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено)
		|			КОГДА 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки)
		|			КОГДА 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.ПустаяСсылка)
		|		КОНЕЦ = &СостояниеМероприятия
		|	И &Участник В
		|			(ВЫБРАТЬ
		|				УчастникиМероприятия.Исполнитель
		|			ИЗ
		|				РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|			ГДЕ
		|				УчастникиМероприятия.Мероприятие = Мероприятия.Ссылка)
		|	И ЕСТЬNULL(МероприятияДополнительныеРеквизиты.Значение, """") В (&ДополнительныйОтбор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Ссылка";
	НастройкиОтображения.ТекстУсловияПометкаУдаления = "И Мероприятия.ПометкаУдаления = ЛОЖЬ";
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"Папка",
		"И Мероприятия.Папка = &Папка");
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"ВидМероприятия",
		"И Мероприятия.ВидМероприятия = &ВидМероприятия");
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"Организатор",
		"И Мероприятия.Организатор = &Организатор");
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"ОрганизаторКонтактноеЛицо",
		"И Мероприятия.ОрганизаторКонтактноеЛицо = &ОрганизаторКонтактноеЛицо");
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"Проект",
		"И Мероприятия.Проект = &Проект");
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"Участник", 
		"	И &Участник В
		|			(ВЫБРАТЬ
		|				УчастникиМероприятия.Исполнитель
		|			ИЗ
		|				РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|			ГДЕ
		|				УчастникиМероприятия.Мероприятие = Мероприятия.Ссылка)");
	НастройкиОтображения.ТекстыУсловийОтборов.Вставить(
		"СостояниеМероприятия",
		"	И ВЫБОР
		|			КОГДА 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено)
		|			КОГДА 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки)
		|			КОГДА 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = Мероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.ПустаяСсылка)
		|		КОНЕЦ = &СостояниеМероприятия");
	
	НастройкиОтображения.ТекстДополнительныхСоединений =
		"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.ДополнительныеРеквизиты КАК МероприятияДополнительныеРеквизиты
		|		ПО Мероприятия.Ссылка = МероприятияДополнительныеРеквизиты.Ссылка
		|			И (МероприятияДополнительныеРеквизиты.Свойство = &ДополнительныйРеквизит)";
	НастройкиОтображения.ШаблонДополнительныхСоединений =
		"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.ДополнительныеРеквизиты КАК МероприятияДополнительныеРеквизиты%1
		|		ПО Мероприятия.Ссылка = МероприятияДополнительныеРеквизиты%1.Ссылка
		|			И (МероприятияДополнительныеРеквизиты%1.Свойство = &ДополнительныйРеквизит%1)";
	НастройкиОтображения.ШаблонДополнительногоРеквизита = "ДополнительныйРеквизит%1";
	
	НастройкиОтображения.ТекстДополнительныхУсловий =
		"	И ЕСТЬNULL(МероприятияДополнительныеРеквизиты.Значение, """") В (&ДополнительныйОтбор)";
	НастройкиОтображения.ШаблонДополнительныхУсловий =
		"	И ЕСТЬNULL(МероприятияДополнительныеРеквизиты%1.Значение, """") В (&ДополнительныйОтбор%1)";
	НастройкиОтображения.ШаблонДополнительногоПараметра = "ДополнительныйОтбор%1";
	
	НастройкиОтображения.ТекстДополнительныхЗначений =
		",
		|	ЕСТЬNULL(МероприятияДополнительныеРеквизиты.Значение, """") КАК ДополнительноеЗначение";
	НастройкиОтображения.ШаблонДополнительныхЗначений =
		",
		|	ЕСТЬNULL(МероприятияДополнительныеРеквизиты%1.Значение, """") КАК ДополнительноеЗначение%1";
	НастройкиОтображения.ШаблонСинонимаДополнительногоЗначения = "ДополнительноеЗначение%1";
	
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидПросмотра()
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Папка"));
	Параметр.Использование = Ложь;
	
	Элементы.ГруппаКоманднаяПанельПланировщика.Видимость = Ложь;
	Элементы.ГруппаДатаИПланировщик.Видимость = Ложь;
	Элементы.ПланировщикОбновить.Видимость = Ложь;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_ОтображаемаяДата.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПапкиИСписок.Видимость = Ложь;
	Элементы.ФормаГруппаОсновные.Видимость = Ложь;
	Элементы.ФормаГруппаДополнительные.Видимость = Ложь;
	Элементы.ФормаСтрокаПоиска.Видимость = Ложь;
	Элементы.ФормаУправлениеПоиском.Видимость = Ложь;
	Элементы.Папки.Видимость = Ложь;
	Элементы.ОтборПапка.Видимость = Ложь;
	Элементы.ФормаГруппаНастройкиСписка.Видимость = Ложь;
	Элементы.ФормаВывестиСписок.Видимость = Ложь;
	
	Элементы.ВключитьПросмотрПапками.Пометка = Ложь;
	Элементы.ВключитьПросмотрПапкамиБыстрое.Пометка = Ложь;
	Элементы.ВключитьПросмотрСписком.Пометка = Ложь;
	Элементы.ВключитьПросмотрСпискомБыстрое.Пометка = Ложь;
	Элементы.ВключитьПросмотрПланировщикомНаДень.Пометка = Ложь;
	Элементы.ВключитьПросмотрПланировщикомНаДеньБыстрое.Пометка = Ложь;
	Элементы.ВключитьПросмотрПланировщикомНаНеделю.Пометка = Ложь;
	Элементы.ВключитьПросмотрПланировщикомНаНеделюБыстрое.Пометка = Ложь;
	Элементы.ВключитьПросмотрПланировщикомНаМесяц.Пометка = Ложь;
	Элементы.ВключитьПросмотрПланировщикомНаМесяцБыстрое.Пометка = Ложь;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком
		Или ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		
		Элементы.ГруппаПапкиИСписок.Видимость = Истина;
		Элементы.ФормаГруппаОсновные.Видимость = Истина;
		Элементы.ФормаГруппаДополнительные.Видимость = Истина;
		Элементы.ФормаСтрокаПоиска.Видимость = Истина;
		Элементы.ФормаУправлениеПоиском.Видимость = Истина;
		Элементы.ФормаГруппаНастройкиСписка.Видимость = Истина;
		Элементы.ФормаВывестиСписок.Видимость = Истина;
		
		Элементы.ГруппаКоманднаяПанельОбщая.РастягиватьПоГоризонтали = Истина;
		
		Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком Тогда
			
			Элементы.ОтборПапка.Видимость = Истина;
			
			Элементы.ВключитьПросмотрСписком.Пометка = Истина;
			Элементы.ВключитьПросмотрСпискомБыстрое.Пометка = Истина;
			
			Элементы.ФормаБыстроеПодменюРежимПросмотра.Заголовок =
				Команды[Элементы.ВключитьПросмотрСписком.ИмяКоманды].Заголовок;
			
		ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
			
			Элементы.Папки.Видимость = Истина;
			
			Элементы.ВключитьПросмотрПапками.Пометка = Истина;
			Элементы.ВключитьПросмотрПапкамиБыстрое.Пометка = Истина;
			
			Элементы.ФормаБыстроеПодменюРежимПросмотра.Заголовок =
				Команды[Элементы.ВключитьПросмотрПапками.ИмяКоманды].Заголовок;
			
			Список.Параметры.УстановитьЗначениеПараметра("Папка", Неопределено);
			Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
			ТекущаяПапка = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень
		Или ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю
		Или ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц Тогда
		
		Элементы.ГруппаКоманднаяПанельПланировщика.Видимость = Истина;
		Элементы.ГруппаДатаИПланировщик.Видимость = Истина;
		Элементы.ПланировщикОбновить.Видимость = Истина;
		
		Если ЭтоМобильныйКлиент Тогда
			
			Элементы.МК_ОтображаемаяДата.Видимость = Истина;
			Элементы.ГруппаКоманднаяПанельПланировщика.Видимость = Ложь;
			Элементы.ОтображаемаяДата.Видимость = Ложь;
			Элементы.ПланировщикОбновить.Видимость = Ложь;
			
			Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень 
				Или ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю Тогда
				Элементы.МК_ОтображаемаяДата.ФорматРедактирования = НСтр("ru='ДФ=''dd.MM.yy'''");
			
			ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц Тогда	
				Элементы.МК_ОтображаемаяДата.ФорматРедактирования = НСтр("ru='ДФ=''MM.yyyy'''");
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ОтборПапка.Видимость = Истина;
		
		Элементы.ГруппаКоманднаяПанельОбщая.РастягиватьПоГоризонтали = Ложь;
		
		Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень Тогда
			
			Элементы.ВключитьПросмотрПланировщикомНаДень.Пометка = Истина;
			Элементы.ВключитьПросмотрПланировщикомНаДеньБыстрое.Пометка = Истина;
			
			Элементы.ФормаБыстроеПодменюРежимПросмотра.Заголовок =
				Команды[Элементы.ВключитьПросмотрПланировщикомНаДень.ИмяКоманды].Заголовок;
			
		ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю Тогда
			
			Элементы.ВключитьПросмотрПланировщикомНаНеделю.Пометка = Истина;
			Элементы.ВключитьПросмотрПланировщикомНаНеделюБыстрое.Пометка = Истина;
			
			Элементы.ФормаБыстроеПодменюРежимПросмотра.Заголовок =
				Команды[Элементы.ВключитьПросмотрПланировщикомНаНеделю.ИмяКоманды].Заголовок;
			
		ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц Тогда
			
			Элементы.ВключитьПросмотрПланировщикомНаМесяц.Пометка = Истина;
			Элементы.ВключитьПросмотрПланировщикомНаМесяцБыстрое.Пометка = Истина;
			
			Элементы.ФормаБыстроеПодменюРежимПросмотра.Заголовок =
				Команды[Элементы.ВключитьПросмотрПланировщикомНаМесяц.ИмяКоманды].Заголовок;
			
		КонецЕсли;
		
	Иначе
		
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		НастроитьВидПросмотра();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНастройкиОтображения(ЭтотОбъект)
	
	ЭтотОбъект.НастройкиОтображения.ОтображаемаяДата = ЭтотОбъект.ОтображаемаяДата;
	ЭтотОбъект.НастройкиОтображения.ВыделенныеДаты = ЭтотОбъект.ВыделенныеДаты.ВыгрузитьЗначения();
	ЭтотОбъект.НастройкиОтображения.ПериодОтображения =
		РаботаСПланировщикомКлиентСервер.ПериодОтображенияПоВидуПросмотра(ЭтотОбъект.ВидПросмотра);
	ЭтотОбъект.НастройкиОтображения.ОтображатьПомеченныеНаУдаление = ЭтотОбъект.ОтображатьУдаленные;
	
	ЭтотОбъект.НастройкиОтображения.Отборы.Очистить();
	
	ЗначениеОтбораОрганизатор = Неопределено;
	Если ТипЗнч(ЭтотОбъект.Организатор) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ЭтотОбъект.Организатор) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗначениеОтбораОрганизатор = ЭтотОбъект.Организатор;
	КонецЕсли;
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("Организатор", ЗначениеОтбораОрганизатор);
	
	ЗначениеОтбораОрганизаторКонтактноеЛицо = Неопределено;
	Если ТипЗнч(ЭтотОбъект.Организатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ЗначениеОтбораОрганизаторКонтактноеЛицо = ЭтотОбъект.Организатор;
	КонецЕсли;
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("ОрганизаторКонтактноеЛицо", ЗначениеОтбораОрганизатор);
	
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("СостояниеМероприятия", ЭтотОбъект.ПоказыватьМероприятия);
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("ВидМероприятия", ЭтотОбъект.ВидМероприятия);
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("Папка", ЭтотОбъект.ОтборПапка);
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("Проект", ЭтотОбъект.Проект);
	ЭтотОбъект.НастройкиОтображения.Отборы.Вставить("Участник", ЭтотОбъект.Участник);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПланировщик()
	
	Если Не ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень
		И Не ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю
		И Не ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкиОтображения(ЭтотОбъект);
	РаботаСПланировщиком.ОбновитьПланировщик(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбора()
	
	УстановитьОтбор();
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГрафикРаботы()
	
	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(
		ПользователиКлиентСервер.ТекущийПользователь());
	ЗаданГрафикРаботы = ЗначениеЗаполнено(ГрафикРаботы);
	Если ЗаданГрафикРаботы Тогда
		РаботаСРабочимКалендаремСервер.ЗаполнитьРабочиеДни(
			РабочиеДни,
			ЗаполненныеГода,
			ОтображаемаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)
	
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Очистить();
	ОтображаемаяДата = НоваяОтображаемаяДата;
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Добавить(ОтображаемаяДата);
	ВыделенныеДаты.ЗагрузитьЗначения(Элементы.ОтображаемаяДата.ВыделенныеДаты);
	
	ОбновитьНастройкиОтображения(ЭтотОбъект);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ФормаСоздать.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаСоздать.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	Элементы.ФормаОбновить.Видимость = Ложь;
	Элементы.ПланировщикОбновить.Видимость = Ложь;
	Элементы.ГруппаПечать.Видимость = Ложь;
	
	// Отборы.
	Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
	Элементы.МК_ГруппаУправлениеОтборами.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ПоказыватьМероприятия, Элементы.МК_ГруппаБыстрыеОтборы);
	Элементы.Переместить(Элементы.ВидМероприятия, Элементы.МК_ГруппаБыстрыеОтборы);
	Элементы.Переместить(Элементы.Участник, Элементы.МК_ГруппаБыстрыеОтборы);
	Элементы.Переместить(Элементы.Организатор, Элементы.МК_ГруппаБыстрыеОтборы);
	Элементы.Переместить(Элементы.Проект, Элементы.МК_ГруппаБыстрыеОтборы);
	Элементы.Переместить(Элементы.ОчиститьБыстрыеОтборы, Элементы.МК_ГруппаБыстрыеОтборы);
	
	ВыровнятьЭлементФормыДляМобильного(Элементы.ПоказыватьМероприятия);
	ВыровнятьЭлементФормыДляМобильного(Элементы.ВидМероприятия);
	ВыровнятьЭлементФормыДляМобильного(Элементы.Участник);
	ВыровнятьЭлементФормыДляМобильного(Элементы.Организатор);
	ВыровнятьЭлементФормыДляМобильного(Элементы.Проект);
	
	Элементы.ПоказыватьМероприятия.ПодсказкаВвода = "";
	Элементы.Проект.ПодсказкаВвода = "";
	Элементы.ВидМероприятия.ПодсказкаВвода = "";
	Элементы.Участник.ПодсказкаВвода = "";
	Элементы.Организатор.ПодсказкаВвода = "";
	
	// Вид просмотра.
	Элементы.ФормаБыстроеПодменюРежимПросмотра.Видимость = Ложь;
	Элементы.РежимПросмотраМеню.Видимость = Ложь;
	ЗаполнитьСписокВыбораВидПросмотра();
	
	// Список.
	Элементы.МК_ГруппаКолонок.Видимость = Истина;
	Элементы.Переместить(Элементы.Наименование, Элементы.ГруппаНаименование);
	Элементы.Переместить(Элементы.ГруппаПериодСтрокой, Элементы.ГруппаВремя);
	
	Элементы.Наименование.Высота = 3;
	Элементы.ПериодСтрокой.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Элементы.Список.Шапка = Ложь;
	Элементы.Код.Видимость = Ложь;
	Элементы.Участники.Видимость = Ложь;
	Элементы.Вид.Видимость = Ложь;
	Элементы.МестоПроведения.Видимость = Ложь;
	Элементы.СостояниеМероприятия.Видимость = Ложь;
	Элементы.Председатель.Видимость = Ложь;
	Элементы.Секретарь.Видимость = Ложь;
	Элементы.ПроектМероприятия.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Ложь;
	Элементы.ДатаНачала.Видимость = Ложь;
	Элементы.ДатаОкончания.Видимость = Ложь;
	Элементы.ГруппаЗадачиФайлы.Видимость = Ложь;
	Элементы.ГруппаВажностьКонтроль.Видимость = Ложь;
	Элементы.СостояниеКонтроля.Видимость = Ложь;
	Элементы.Ссылка.Видимость = Ложь;
	Элементы.ГруппаДатаИПланировщик.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.УказатьТрудозатраты, Элементы.Список.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПереключитьХронометраж, Элементы.Список.КонтекстноеМеню);
	Элементы.Переместить(Элементы.Трудозатраты, Элементы.Список.КонтекстноеМеню);

	ПриИзмененииПараметровЭкранаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровЭкранаНаСервере()
	
	// Настроим область предпросмотра.
	ЭтоМобильныйСБольшимЭкраном = МобильныйКлиентВызовСервера.ЭтоМобильныйСБольшимЭкраном();
	ЭтоМобильныйВПортретномРежиме = МобильныйКлиентВызовСервера.ЭтоМобильныйВПортретномРежиме();
	
	Если ЭтоМобильныйСБольшимЭкраном И Не ЭтоМобильныйВПортретномРежиме Тогда
		НастроитьФормуВАльбомномРежимеДляМобильного();
	Иначе
		НастроитьФормуВПортретномРежимеДляМобильного();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВПортретномРежимеДляМобильного()
	
	// Папки.
	Элементы.Переместить(Элементы.Папки, Элементы.МК_ГруппаПапки);		

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВАльбомномРежимеДляМобильного()
	
	// Папки.
	Элементы.Переместить(Элементы.Папки, Элементы.ГруппаПапкиИСписок, Элементы.Список);
	Элементы.ГруппаПапкиИСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидПросмотра()
	
	Элементы.МК_ВидПросмотра.СписокВыбора.Очистить();
	
	Элементы.МК_ВидПросмотра.СписокВыбора.Добавить(
		Перечисления.ВидыПросмотраСпискаОбъектов.Списком, НСтр("ru = 'Список'"));	
	Элементы.МК_ВидПросмотра.СписокВыбора.Добавить(
		Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам, НСтр("ru = 'По папкам'"));
	Элементы.МК_ВидПросмотра.СписокВыбора.Добавить(
		Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень, НСтр("ru = 'День'"));
	Элементы.МК_ВидПросмотра.СписокВыбора.Добавить(
		Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю, НСтр("ru = 'Неделя'"));
	Элементы.МК_ВидПросмотра.СписокВыбора.Добавить(
		Перечисления.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц, НСтр("ru = 'Месяц'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПросмотраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		ВключитьПросмотрСпискомПродолжение();
	КонецЕсли;	
		
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ВключитьПросмотрПапкамиПродолжение();
	КонецЕсли;
		
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаДень") Тогда
		ВключитьПросмотрПланировщикомНаДеньПродолжение();
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаНеделю") Тогда
		ВключитьПросмотрПланировщикомНаНеделюПродолжение();
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПланировщикомНаМесяц") Тогда
		ВключитьПросмотрПланировщикомНаМесяцПродолжение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОтображаемаяДатаПриИзменении(Элемент)
	
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБыстрыеОтборы(Команда)
	
	ОчиститьБыстрыеОтборыНаСервере();	

КонецПроцедуры

&НаСервере
Процедура ОчиститьБыстрыеОтборыНаСервере()
	
	ПоказыватьМероприятия = Неопределено;
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ПоказыватьМероприятия, ПоказыватьМероприятия);
		
	ВидМероприятия = Неопределено;
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ВидМероприятия, ВидМероприятия);
	
	Участник = Справочники.Пользователи.ПустаяСсылка();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.Участник, Участник);
	
	Организатор = Справочники.Пользователи.ПустаяСсылка();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.Организатор, Организатор);
	
	Проект = Неопределено;
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.Проект, Проект);
		
	ОбновитьВидимостьКнопкиОчистки();
		
	УстановитьОтбор();	

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКнопкиОчистки()
	
	Элементы.ОчиститьБыстрыеОтборы.Видимость = ЗначениеЗаполнено(ПоказыватьМероприятия)
		Или ЗначениеЗаполнено(ВидМероприятия)
		Или ЗначениеЗаполнено(Участник)
		Или ЗначениеЗаполнено(Организатор)
		Или ЗначениеЗаполнено(Проект);
	
КонецПроцедуры

&НаСервере
Процедура ВыровнятьЭлементФормыДляМобильного(Элемент)
	
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элемент.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти