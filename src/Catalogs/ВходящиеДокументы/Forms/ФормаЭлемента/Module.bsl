// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем МобильныйСканерЗанят;

#Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Кэшируемые значения
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	НачальныйЧисловойНомер = Объект.ЧисловойНомер;
	ЭтоДелопроизводитель = РольДоступна("РегистрацияВходящихДокументов") Или РольДоступна("ПолныеПрава");
    РольПолныеПрава = РольДоступна("ПолныеПрава");
	
	// ЭП
	ИспользоватьЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = 
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	ОграничиватьДоступностьПолейПоСостоянию = 
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов")
		И Не Пользователи.ЭтоПолноправныйПользователь();
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	РегламентированныйУчетОбращений = ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений");
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		СостояниеТекст = Строка(Перечисления.СостоянияДокументов.НаРегистрации);
		
		ВОтветНа = Справочники.ИсходящиеДокументы.ПустаяСсылка();
		НачальноеВОтветНа = ВОтветНа;
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			РеквизитыВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВОтветНа,
				"РегистрационныйНомер, ДатаРегистрации, Заголовок");
			Если ЗначениеЗаполнено(РеквизитыВОтветНа.РегистрационныйНомер) 
					И ЗначениеЗаполнено(РеквизитыВОтветНа.ДатаРегистрации) Тогда
					ВОтветНаСтрока = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
						РеквизитыВОтветНа.РегистрационныйНомер, Формат(РеквизитыВОтветНа.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				ВОтветНаСтрока = РеквизитыВОтветНа.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		ПредметПереписки = Неопределено;
		НачальныйПредметПереписки = ПредметПереписки;
		
		ПервичноеОбращение = Справочники.ВходящиеДокументы.ПустаяСсылка();
		НачальноеПервичноеОбращение = ПервичноеОбращение;
		
		ОсновноеОбращение = Справочники.ВходящиеДокументы.ПустаяСсылка();
		НачальноеОсновноеОбращение = ОсновноеОбращение;
		
		Элементы.Обзор.Видимость = Ложь;
		Элементы.СтраницаФайлы.Видимость = Истина;
		
	Иначе
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
		
		ПрочитатьСвязи();
		
		ЭтаФорма.Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
		
		НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
		Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
			ИспользоватьОбзорДокументов = Истина;
		Иначе
			ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
		КонецЕсли;	
	
		Если ИспользоватьОбзорДокументов Тогда 
			Элементы.Обзор.Видимость = Истина;
			Элементы.СтраницаФайлы.Видимость = Ложь;
		Иначе	
			Элементы.Обзор.Видимость = Ложь;
			Элементы.СтраницаФайлы.Видимость = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		
		Параметры.ДокументОснование = Параметры.ЗначениеКопирования;
		ДокументОснованиеПодписан = Параметры.ДокументОснование.ПодписанЭП;
		
		// Копирование рабочей группы
		РаботаСРабочимиГруппами.ДокументПриКопировании(ЭтаФорма);
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);

		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
			КонецЦикла;	
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = 
				ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		КонецЕсли;	
		
		Если Объект.Повторное Тогда 
			ПервичноеОбращение = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.ЗначениеКопирования,
				Справочники.ТипыСвязей.ПервичноеОбращение);
		КонецЕсли;
		Если Объект.Дубликат Тогда 
			ОсновноеОбращение = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.ЗначениеКопирования,
				Справочники.ТипыСвязей.ОсновноеОбращение);
		КонецЕсли;	
		
		// Копирование категорий
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // ввод на основании		
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ВОтветНа = ОснованиеДокумента;
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(ОснованиеДокумента,
				Справочники.ТипыСвязей.ПредметПереписки);
			
			Если ЗначениеЗаполнено(ВОтветНа) Тогда 
				РеквизитыВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВОтветНа,
					"РегистрационныйНомер, ДатаРегистрации, Заголовок");
				Если ЗначениеЗаполнено(РеквизитыВОтветНа.РегистрационныйНомер) 
					И ЗначениеЗаполнено(РеквизитыВОтветНа.ДатаРегистрации) Тогда
					ВОтветНаСтрока = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
						РеквизитыВОтветНа.РегистрационныйНомер, Формат(РеквизитыВОтветНа.ДатаРегистрации, "ДЛФ=D"));
				Иначе
					ВОтветНаСтрока = РеквизитыВОтветНа.Заголовок;
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("Массив") 
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
	
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда
			
			Параметры.ПисьмоОснование = ОснованиеДокумента;
			ПредметПерепискиВПисьме = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеДокумента, "Предмет");
			Если ЗначениеЗаполнено(ПредметПерепискиВПисьме)
				И ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ПредметПерепискиВПисьме) Тогда
				ПредметПереписки = ПредметПерепискиВПисьме;
			КонецЕсли;
						
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ОснованиеДокумента, Ложь);

			Если ПодчиненныеФайлы.Количество() > 0 Тогда 
				Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл

					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение)
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();				
				Элементы.НаименованиеФайла.Заголовок = 
					ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = 
				ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Отправлен ответ
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ОтправленыОтветы = СвязиДокументов.ПолучитьСвязанныеДокументы(Объект.Ссылка, Справочники.ТипыСвязей.ОтправленОтвет);
		Если ОтправленыОтветы.Количество() > 0 Тогда 
			ОтправленОтвет = ОтправленыОтветы[0];
		КонецЕсли;	
	КонецЕсли;	
	Элементы.ОтправленОтвет.Видимость = ЗначениеЗаполнено(ОтправленОтвет);
	
	// Файлы
	ЗаполнитьСписокФайлов(Истина);
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();	
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
		Элементы.ТекущаяВерсияРазмерСоздание.Видимость = Ложь;
	КонецЕсли;
	
	// Выбор вида документа
	БыстрыйВыборВидаДокумента = Делопроизводство.ПолучитьРежимВыборавидаДокумента("ВходящийДокумент");
	Элементы.ВидДокумента.БыстрыйВыбор = БыстрыйВыборВидаДокумента;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВходящегоДокумента", Объект.ВидДокумента));
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Элементы.Проект.АвтоОтметкаНезаполненного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидДокумента, "ОбязательноУказаниеПроекта");
	КонецЕсли;
	
	// Доступность элементов
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Элементы.ФайлыПодписанЗашифрован.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей();
	КонецЕсли;
	
	ПараметрШаблонДокумента = Параметры.ШаблонДокумента;
	Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		ПараметрШаблонДокумента = Объект.Шаблон;
	КонецЕсли;	
	
	Если Параметры.ШаблонДокумента <> Неопределено И
		Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
		
		ИзменениеВидаДокументаОбработано = Ложь;
		
		Если Не Параметры.ЗаполнятьРеквизитыДоСоздания Тогда
			
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Параметры.ШаблонДокумента, ДокументОбъект);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			ПриИзмененииВидаДокумента();
			ИзменениеВидаДокументаОбработано = Истина;
			
			УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма);
			
		КонецЕсли;
		
		Если Не ИзменениеВидаДокументаОбработано Тогда
			ПриИзмененииВидаДокумента();
		КонецЕсли;
		
		// Рабочие группы
		Объект.Шаблон = Параметры.ШаблонДокумента;
		РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
		
	Иначе 
		Делопроизводство.ЗаполнитьСписокВыбораФормыДокумента(ЭтаФорма);
		ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
	КонецЕсли;
	
	// Регламентированный учет обращений
	Если Параметры.Свойство("ТаблицаВопросы") Тогда
		РаботаСОбращениямиВызовСервера.ЗаполнитьВопросыДокумента(Объект, Параметры.ТаблицаВопросы);
	КонецЕсли;
	// Конец Регламентированный учет обращений
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Шаблон,
			"ЗаполнениеНаименованияПоШаблону, Заголовок");
		Если РеквизитыШаблона.ЗаполнениеНаименованияПоШаблону Тогда 
			НаименованиеСозданоПоШаблону = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УстановитьДоступностьПолей();
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных");
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;

	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	// Список резолюций
	Элементы.ГруппаРезолюции.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах");
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленныеРезолюции") = Неопределено Тогда
		ПоказыватьУдаленныеРезолюции = Ложь;
		Элементы.КПРезолюцийПоказыватьУдаленные.Пометка = Ложь;
		ЗаполнитьСписокРезолюций();
	КонецЕсли;

	// Переадресация
	Если ЗначениеЗаполнено(ОтветПереадресовавшему) Тогда 
		Элементы.ТребуетсяОтветПереадресовавшему.ТолькоПросмотр = Истина;
		Элементы.СрокОтветаПереадресовавшему.ТолькоПросмотр = Истина;
		Элементы.ОтправитьОтветПереадресовавшему.Видимость = Ложь;
	Иначе
		Элементы.ОтветПереадресовавшему.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.ТребуетсяОтветПереадресовавшему Тогда 
		Элементы.СрокОтветаПереадресовавшему.Доступность = Истина;
		Элементы.ОтправитьОтветПереадресовавшему.Доступность = Истина;
	Иначе
		Элементы.СрокОтветаПереадресовавшему.Доступность = Ложь;
		Элементы.ОтправитьОтветПереадресовавшему.Доступность = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПереадресованДокументом) Тогда 
		ЗаполнитьПереадресатов();
		Элементы.Переадресовать.Видимость = Ложь;
	Иначе
		Элементы.ПереадресованДокументом.Видимость = Ложь;
		Элементы.Переадресат.Видимость = Ложь;
		Элементы.КонтактноеЛицоПереадресата.Видимость = Ложь;
	КонецЕсли;	
	
	// Обращения граждан
	УчитыватьКакОбращениеГраждан = ПолучитьФункциональнуюОпцию(
		"УчитыватьКакОбращениеГраждан", 
		Новый Структура("ВидВходящегоДокумента", 
		Объект.ВидДокумента));
		
	УстановитьУчетОбращенийГраждан();
	
	ИзСпискаОбращенийГраждан = Параметры.Свойство("ИзСпискаОбращенийГраждан") И Параметры.ИзСпискаОбращенийГраждан;
	Если ИзСпискаОбращенийГраждан И Объект.Ссылка.Пустая() Тогда 
		Если ЗначениеЗаполнено(Объект.ВидДокумента) 
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяОбращениемОтГраждан") Тогда 
			Объект.ВидДокумента = Справочники.ВидыВходящихДокументов.ПустаяСсылка();
			ПриИзмененииВидаДокумента();
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыВходящихДокументов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
			|ГДЕ
			|	(НЕ ВидыВходящихДокументов.ЭтоГруппа)
			|	И (НЕ ВидыВходящихДокументов.ПометкаУдаления)
			|	И ВидыВходящихДокументов.ЯвляетсяОбращениемОтГраждан = ИСТИНА"; 
			
			МассивВидов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если МассивВидов.Количество() = 1 Тогда 
				Объект.ВидДокумента = МассивВидов[0];
				ПриИзмененииВидаДокумента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		НазваниеОрганизации = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию());
		Элементы.ДекорацияОрганизация.Видимость = Истина;
		Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
	Иначе	
		Элементы.ДекорацияОрганизация.Видимость = Ложь;
	КонецЕсли;	

	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	// Шаблоны автозапуска
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйДокумент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоЧтоСозданныйДокумент") Тогда
		ТолькоЧтоСозданныйДокумент = Параметры.ТолькоЧтоСозданныйДокумент;
	КонецЕсли;	
	
	// Параметры оповещения
	Если Параметры.Свойство("ПараметрыОповещения") Тогда
		ПараметрыОповещения = Параметры.ПараметрыОповещения;
	КонецЕсли;
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
			
	// Список последних документов и файлов
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Заполнение текстовых реквизитов
	Если ЗначениеЗаполнено(Объект.Дело) Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Дело, "НоменклатураДел.Индекс, МестоХраненияДел"); 
		ДелоТекст = СокрЛП(РеквизитыДела.НоменклатураДелИндекс) + " " + СокрЛП(Объект.Дело);
		МестоХранения = РеквизитыДела.МестоХраненияДел;
	КонецЕсли;	
	
  	ЗаполнитьСвязи();
	
	Если Не ЗначениеЗаполнено(КоличествоФайлов) Тогда
		КоличествоФайлов = КоличествоФайловТаблицы;
	КонецЕсли;	
	
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда 
		Делопроизводство.АктивизироватьЭлементПоУмолчанию(ЭтаФорма);
		УстановитьСрокИсполнения(Объект);
	КонецЕсли;

	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьЭтапыОбработкиДокумента = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"ИспользоватьЭтапыОбработкиДокумента");
	КонецЕсли;
	Элементы.ГруппаЭтапы.Видимость = ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	Если Параметры.Свойство("ОткрытьЗакладкуФайлы") Тогда
		Если Элементы.Обзор.Видимость Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор;
		Иначе	
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаФайлы;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЭП") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуКатегории") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	КонецЕсли;
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Объект.Ссылка, 
			ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;	
	
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	ПолучитьОбзорДокумента();
	
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(Объект);
	
	Элементы.ГруппаДобавитьФайл.Видимость = Не Элементы.Обзор.Видимость;
	ИспользоватьПереадресацию = ПолучитьФункциональнуюОпцию("ИспользоватьПереадресациюВоВходящихДокументах");
	Элементы.ГруппаПереадресация.Видимость = ИспользоватьПереадресацию;
	Элементы.ГруппаКомуПереадресован.Видимость = ИспользоватьПереадресацию 
		И ((УчитыватьКакОбращениеГраждан И Не РегламентированныйУчетОбращений)
			Или Не УчитыватьКакОбращениеГраждан);
	
	Элементы.ПредметПереписки.Видимость = ЗначениеЗаполнено(ПредметПереписки);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ЗначениеЗаполнено(Объект.Создал) И ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания) + ", " + СокрЛП(Объект.Создал);
	Иначе 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ИспользоватьСервисСПАРКРиски = ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски");
	Если ИспользоватьСервисСПАРКРиски Тогда 
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Неопределено,
			Объект.Отправитель,
			ОбщегоНазначенияДокументооборотКлиентСервер.ВидКонтрагентаСПАРК(Объект.Отправитель),
			ПараметрыПроцедуры);
	Иначе 
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	АвтовизуализацияЭП = ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП");
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтаФорма);
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ФайлыСозданиеВставитьКартинкуИзБуфера.Видимость = Ложь;
	КонецЕсли;
	
	ДоступнаУсовершенствованнаяЭП = ЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
	
	Элементы.ТаблицаПодписейПродлитьДействиеПодписей.Видимость = ДоступнаУсовершенствованнаяЭП;
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	МК_НастроитьЭлементыФормы();
	
	
	// МЭДО:
	КэшВидаДокумента = Новый Структура();
	КэшВидаДокумента.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
	КэшВидаДокумента.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
	ИнтеграцияСМЭДО.ЗаполнитьЗакладкуМЭДОВФорме(ЭтотОбъект, КэшВидаДокумента);
	ИнтеграцияСМЭДО.ВидимостьЭлементовМЭДОВФорме(
		ЭтотОбъект, КэшВидаДокумента, Пользователи.ЭтоПолноправныйПользователь());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСканирования();
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	Оповестить("ОбновитьСписокПоследних");
		
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.КонтекстноеМенюФайлыГруппаЭПИШифрование.Видимость = Ложь;
		Элементы.ЭлектронныеПодписи.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
	НачальныйСостав = СоставСтрока;	
	
	Если Не Параметры.ДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
		ПодключитьОбработчикОжидания("ВопросКопированияЭП", 0.2, Истина);
	КонецЕсли;
	
	МобильныйСканерЗанят = Ложь;
	Если МП_МобильныйСканерВызовСервера.ИспользуетсяМобильноеПриложение() Тогда
		Если ТолькоЧтоСозданныйДокумент Тогда
			ПодключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически", 3, Ложь);
		КонецЕсли;
	Иначе
		Элементы.ДобавитьСканСМобильного.Видимость = Ложь;
		Элементы.ДобавитьСканСМобильногоСоздание.Видимость = Ложь;
		Элементы.ФайлыДобавленныеДобавитьСканСМобильного.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭП()
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ ""%1"" и присоединенные к нему файлы подписаны.
		| Копирование сведений об ЭП в новый документ сделает его недоступным для изменения.
		| Скопировать в новый документ сведения об ЭП?'"),
		Строка(Параметры.ДокументОснование));
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросКопированияЭППродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры
		
&НаКлиенте
Процедура ВопросКопированияЭППродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
		УстановитьДоступностьПолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// Срок действия документа
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.Заголовок = НСтр("ru = 'Выбор связанного документа'") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Документ", ВыбранноеЗначение);
		ПараметрыОткрытия.Вставить("ЗаполнитьРеквизиты", Истина);
		ПараметрыОткрытия.Вставить("ДокументИсточникИзменения", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИзменятьСрокДействия", Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ИзменениеСрокаДействия", ПараметрыОткрытия, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КомпонентаСканированияУстановлена" Тогда
		УстановитьДоступностьСканирования();
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		ЗаполнитьСписокФайлов();
		
		Если Параметр <> Неопределено Тогда
			УстановитьТекущуюСтрокуФайла(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			УстановитьДоступностьКоманд(ТекущиеДанные);
			
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Параметр.Свойство("ЕстьЗашифрованныеИлиЗанятыеФайлы") Тогда
					ЕстьЗашифрованныеИлиЗанятыеФайлы = Параметр.ЕстьЗашифрованныеИлиЗанятыеФайлы;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;	
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				Если Параметр.Свойство("ИзменилсяПризнакОригинала") И Параметр.ИзменилсяПризнакОригинала Тогда 
					ОбновитьСтрокуФайла(Параметр.Файл, Истина);
				Иначе	
					ОбновитьСтрокуФайла(Параметр.Файл);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса") 
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			
			СтатусВзаимодействие = 1;
			Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Есть выполняющиеся задачи'");
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс") 
			И (ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
			Или ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение")) Тогда 
				ВывестиКартинкуКонтроля();
			КонецЕсли;
			
			ПолучитьОбзорДокумента();
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектПодписан" И Параметр = Объект.Ссылка Тогда 
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлЗашифрован" И Параметр = Объект.Ссылка Тогда 
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлПодписан" И Параметр = Объект.Ссылка Тогда 
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
		ОповеститьОбИзменении(КлючЗаписи);
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЖурналПередачи" И Параметр = Объект.Ссылка Тогда 
		КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено 
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект.Ссылка Тогда 
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
				ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
				
				Если Не Элементы.Обзор.Видимость 
					И Элементы.ГруппаСтраницы.ТекущаяСтраница 
					<> Элементы.СтраницаФайлы Тогда 
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
				КонецЕсли;
			КонецЕсли;
			
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "НапечатанШтрихкод" И Параметр = Объект.Ссылка Тогда
		НеобходимоНапечататьШтрихкодПриСоздании = Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "УстановленаСвязь" Тогда 
		Если Параметр.Документ = Объект.Ссылка И Параметр.ТипСвязи = ПредопределенноеЗначение("Справочник.ТипыСвязей.ОтветПереадресовавшему") Тогда 
			ОтветПереадресовавшему = Параметр.СвязанныйДокумент;
			Если ЗначениеЗаполнено(ОтветПереадресовавшему) Тогда 
				Элементы.ТребуетсяОтветПереадресовавшему.ТолькоПросмотр = Истина;
				Элементы.СрокОтветаПереадресовавшему.ТолькоПросмотр = Истина;
				Элементы.ОтправитьОтветПереадресовавшему.Видимость = Ложь;
				Элементы.ОтветПереадресовавшему.Видимость = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Если Параметр.Документ = Объект.Ссылка И Параметр.ТипСвязи = ПредопределенноеЗначение("Справочник.ТипыСвязей.ПереадресованДокументом") Тогда 
			ПереадресованДокументом = Параметр.СвязанныйДокумент;
			Если ЗначениеЗаполнено(ПереадресованДокументом) Тогда 
				ЗаполнитьПереадресатов();
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ИмяСобытия = "ОбновитьПредметПереписки" И Параметр = Объект.Ссылка Тогда 
		ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, ПредопределенноеЗначение("Справочник.ТипыСвязей.ПредметПереписки"));
		Элементы.ПредметПереписки.Видимость = ЗначениеЗаполнено(ПредметПереписки);
	КонецЕсли;	
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыРеквизитыПриИзмененииСвязи" И Параметр = Объект.Ссылка Тогда 
		Прочитать();
		
		Элементы.ПервичноеОбращение.Доступность = Объект.Повторное;
		Элементы.ПервичноеОбращение.АвтоОтметкаНезаполненного = Объект.Повторное;
		Элементы.ПервичноеОбращение.ОтметкаНезаполненного = Объект.Повторное И Не ЗначениеЗаполнено(ПервичноеОбращение);
		
		Элементы.ОсновноеОбращение.Доступность = Объект.Дубликат;
		Элементы.ОсновноеОбращение.АвтоОтметкаНезаполненного = Объект.Дубликат;
		Элементы.ОсновноеОбращение.ОтметкаНезаполненного = Объект.Дубликат И Не ЗначениеЗаполнено(ОсновноеОбращение);
		
		Если РегламентированныйУчетОбращений Тогда 
			УстановитьУчетОбращенийГраждан();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиДокумента" Тогда
		
		Если Параметр.Документ = Объект.Ссылка Тогда
			ПрочитатьСвязи(Параметр.ТипыСвязей);
		КонецЕсли;
		
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
		
		// Установим курсор в нужную строку
		Если Параметр.Свойство("СвязанныйДокумент") Тогда 
			НашлиСтроку = Ложь; 
			КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
			Для Каждого Строка Из КоллекцияСтрок Цикл
				Если НашлиСтроку Тогда
					Прервать;
				КонецЕсли;
				ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
				Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл 
					Если Параметр.СвязанныйДокумент = ПодчиненнаяСтрока.СвязанныйДокумент 
					   И Параметр.ТипыСвязей[0] = ПодчиненнаяСтрока.ТипСвязи Тогда
						Элементы.ДеревоСвязей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
						НашлиСтроку = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = Объект.Ссылка Тогда
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
	КонецЕсли;

	Если ИмяСобытия = "ОтправленВОтветНаУстановлен" И Параметр.Документ = Объект.Ссылка Тогда 
		Если Параметр.СвязанныйДокумент <> ОтправленОтвет Тогда 
			ОтправленыОтветы = СвязиДокументов.ПолучитьСвязанныеДокументы(Объект.Ссылка, "ОтправленОтвет");
			Если ОтправленыОтветы.Количество() > 0 Тогда 
				ОтправленОтвет = ОтправленыОтветы[0];
			КонецЕсли;	
		    Элементы.ОтправленОтвет.Видимость = ЗначениеЗаполнено(ОтправленОтвет);
			ЗаполнитьСвязи();
			// Раскроем дерево
		    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
			Для Каждого Строка Из КоллекцияСтрок Цикл
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
				Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "СозданаТемаПоПредмету"
		И Параметр.Предмет = Объект.Ссылка Тогда 
		ВывестиСтрокуСостояний();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ОбработатьЗаписьКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	// Резолюции
	Если ИмяСобытия = "Запись_Резолюции" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессПрерван" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса") 
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда 
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			ПолучитьОбзорДокумента();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	
	Если ИмяСобытия = "ОригиналПолученИзменить" И Параметр = Объект.Ссылка Тогда
		ПоменятьПризнакНаличияОргинала();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписаноУведомлениеМЭДО" Или ИмяСобытия = "ЗаписанДанныеДокументаМЭДО"
		Или ИмяСобытия = "ЗаписанаКвитанцияМЭДО" Тогда
		
		ОбновитьИсториюСообщенийМЭДОСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ИспользоватьЭтапыОбработкиДокумента") Тогда 
		Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьВКонтролирующиеОрганы") Тогда
		
		ЭлектронныйДокументОтчетностьВКО =
				ОтчетностьВКонтролирующиеОрганы.ЭлектронныйДокументКОПоДокументу(Объект.Ссылка);
			
		Если ЗначениеЗаполнено(ЭлектронныйДокументОтчетностьВКО) Тогда
			
			ЭтоОбменСКонтролирующимиОрганами = Истина;
			
			Если (РольДоступна("ЧтениеДанныхРегламентированнойОтчетности")
				Или РольДоступна("ПолныеПрава")) Тогда
				Элементы.ГруппаОтчетностьВКО.Видимость = Истина;
			КонецЕсли;
			
			ОбновитьСведенияПоОтчетностиВКО();
			
		КонецЕсли;

	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОПроверкеЭП(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеПриРегистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала(ПараметрыЗаписи) Экспорт

	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОСканКопииОригиналаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПеререгистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат);
	ПараметрыЗаписи.Вставить("УказанРегистрационныйНомер", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи(Результат, ПараметрыЗаписи) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		СвязанныйДокументДляНумерации = Неопределено;
		Возврат;
	КонецЕсли;
					
	Если ТипыВидыСвязанныхДокументовДляНумерации.Количество() = 0 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно указать связь ""%1"", так как связь данного типа не настроена для документов вида ""%2"".'"),
			ТипСвязиНумератора,
			Объект.ВидДокумента);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента",
		ЭтотОбъект,
		ПараметрыЗаписи);
	
	// Определение количества возможных типов связанного документа
	ТипСвязанногоДокументаСоставной = Ложь;
	ТипДляВыбора = ТипыВидыСвязанныхДокументовДляНумерации[0].Тип;
	Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
		Если СтрокаТипа.Тип <> ТипДляВыбора Тогда
			ТипСвязанногоДокументаСоставной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Открытие формы выбора связанного документа
	Если ТипСвязанногоДокументаСоставной Тогда
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДокументаДляСвязи", 
			Новый Структура("ТаблицаТипов", ТипыВидыСвязанныхДокументовДляНумерации),,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
		
		// Заполнение отбора по виду документа
		МассивВидовДокументов = Новый Массив;
		Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
			
			Если ЗначениеЗаполнено(СтрокаТипа.Вид) Тогда 
				Если МассивВидовДокументов.Найти(СтрокаТипа.Вид) = Неопределено Тогда
					МассивВидовДокументов.Добавить(СтрокаТипа.Вид);
				КонецЕсли;
			Иначе
				// Настройка предусматривает любой вид документа, отбор не нужен
				МассивВидовДокументов.Очистить();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		Если МассивВидовДокументов.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидДокумента", МассивВидовДокументов));
		КонецЕсли;
			
		Поз = Найти(ТипДляВыбора, ".");
		ИмяФормыВыбора = "Справочник." + Сред(ТипДляВыбора, Поз + 1) + ".ФормаВыбора";
		
		ОткрытьФорму(
			ИмяФормыВыбора, 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;				
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента(СвязанныйДокумент, ПараметрыЗаписи) Экспорт
	
	Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВопросОСозданииСвязи", Истина);
	Если Объект.Ссылка.Пустая() Тогда // связь будет добавлена при записи
		СвязанныйДокументДляНумерации = СвязанныйДокумент;
	Иначе // связь нужно добавить сейчас для корректного формирования номера
		СвязиДокументов.СоздатьСвязь(
			Объект.Ссылка, 
			СвязанныйДокумент, 
			ТипСвязиНумератора);
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОЗаписиВЖурналеРегистрации(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ОтразитьВозвратВЖурнале = Истина;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказанВопросОЗаписиВЖурналеПередачи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Оценка производительности
	УИДЗамераВыполнениеКомандыЗаписать = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ВходящиеДокументыВыполнениеКомандыЗаписать");
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ВопросыОбращения, "Вопрос");
	
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		// проверка подписей
		Если ИспользоватьЭП
			И ЭлектронныеПодписи.ПолучитьЭлементы().Количество() > 0 Тогда
			ПроверитьВсе(Неопределено);
			ПодписываемыеЭлементы = ЭлектронныеПодписи.ПолучитьЭлементы();
			Для Каждого ПодписываемыйЭлемент Из ПодписываемыеЭлементы Цикл
				Подписи = ПодписываемыйЭлемент.ПолучитьЭлементы();
				Для Каждого ОднаПодпись Из Подписи Цикл
					Если Не ОднаПодпись.ПодписьВерна Тогда
						ТекстВопроса = НСтр("ru = 'Документ не может быть зарегистрирован. Некоторые ЭП не прошли проверку.
							|Перейти к результатам проверки?'");
												
						Режим = Новый СписокЗначений;
						Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Перейти'"));
						Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не переходить'"));
						ОписаниеОповещения = Новый ОписаниеОповещения(
							"ПередЗаписьюПродолжениеПослеВопросаОПроверкеЭП",
							ЭтотОбъект);
						ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, , КодВозвратаДиалога.Да);
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// регистрация
		Если Не ДокументЗарегистрирован() Тогда 
			
			Если ОграничиватьДоступностьПолейПоСостоянию И
				Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеПриРегистрации") 
				И РегистрацияПриЗакрытии <> Истина Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ДелопроизводствоКлиент.ПредупредитьПриРегистрации(ОбработчикОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			Если ОбязателенФайлОригинала 
				И РегистрацияПриЗакрытии <> Истина Тогда
				ОтсутствуетОригинал = Истина;
				Для Каждого Строка Из Файлы Цикл
					Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
						ОтсутствуетОригинал = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				Если ОтсутствуетОригинал Тогда 
					Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОСканКопииОригиналаДокумента") Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения(
							"ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала",
							ЭтотОбъект,
							ПараметрыЗаписи);
						ПоказатьПредупреждение(
							ОписаниеОповещения, 
							НСтр("ru = 'Для документа требуется обязательное наличие скан-копии оригинала.
								|Вы можете добавить ее в список файлов после регистрации документа.'"));
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПеререгистрации") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				ДелопроизводствоКлиент.ПредупредитьПриПеререгистрации(ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
		СтруктураПараметров.Вставить("ПолученВОтветНа", 	ВОтветНа);
		СтруктураПараметров.Вставить("ПредметПереписки",	ПредметПереписки);
		СтруктураПараметров.Вставить("ПервичноеОбращение",	ПервичноеОбращение);
		СтруктураПараметров.Вставить("ОсновноеОбращение",	ОсновноеОбращение);
		СтруктураПараметров.Вставить("СвязанныйДокумент", 	СвязанныйДокументДляНумерации);
		
		ПараметрыЗаписи.Вставить("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена", Ложь);
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураПараметров);
		ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена = Истина;
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;	
		
		Если СтруктураВозврата.Свойство("ТипыВидыСвязанныхДокументовДляНумерации") Тогда 
			Для Каждого Строка Из СтруктураВозврата.ТипыВидыСвязанныхДокументовДляНумерации Цикл
				НоваяСтрока = ТипыВидыСвязанныхДокументовДляНумерации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Нумератор) Тогда 
			Если Не ПараметрыЗаписи.Свойство("УказанРегистрационныйНомер") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера",
					ЭтотОбъект,
					ПараметрыЗаписи);
				РегистрационныйНомер = Объект.РегистрационныйНомер;
				ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(
					РегистрационныйНомер, 
					НСтр("ru = 'Укажите регистрационный номер'"), 
					"",,
					ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		Иначе
			
			Если СоздатьСвязьДляНумерации И Не ПараметрыЗаписи.Свойство("ПоказанВопросОСозданииСвязи") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи",
					ЭтотОбъект,
					ПараметрыЗаписи);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для регистрации документа необходимо заполнить связь ""%1"". Заполнить сейчас?'"),
						ТипСвязиНумератора);
						
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		// отразить возврат предмета переписки в журнале передачи
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопросОЗаписиВЖурналеПередачи") Тогда
			ОтразитьВозвратВЖурнале = Ложь;
			Если ЗначениеЗаполнено(ПредметПереписки) И ТипЗнч(ПредметПереписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
				СпособОтраженияПередачиКонтрагенту = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСДокументами.СпособОтраженияПередачиКонтрагенту;
				Если СпособОтраженияПередачиКонтрагенту <> ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.НеОтражать") Тогда 
					Если Объект.Ссылка.Пустая() ИЛИ НеобходимоОтразитьВозвратДокументаКонтрагентом() Тогда 
						Если СпособОтраженияПередачиКонтрагенту <> ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.Автоматически") Тогда 
							
							ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Отметить в журнале передачи возврат документа %1?'"), Строка(ПредметПереписки));
							ОписаниеОповещения = Новый ОписаниеОповещения(
								"ПередЗаписьюПродолжениеПослеВопросаОЗаписиВЖурналеРегистрации",
								ЭтотОбъект,
								ПараметрыЗаписи);
								
							ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
							Отказ = Истина;
							Возврат;
						Иначе	
							ОтразитьВозвратВЖурнале = Истина;
						КонецЕсли;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		СколькоНеЗаполненоСвязей = 
			ОбязательныеТипыСвязей.Количество() - ОбязательныеСвязи.Количество();
			
		ОбязательныеСвязиПараметр = Новый Массив;
		Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				
				ПараметрыСвязи = Новый Структура("ТипСвязи, СсылкаНа",
					Строка.ТипСвязи, Строка.СсылкаНа);
				
				ОбязательныеСвязиПараметр.Добавить(ПараметрыСвязи);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ПараметрыОповещенияСвязей = Новый Структура("ОбязательныеСвязи, ПараметрыЗаписи", 
			ОбязательныеСвязиПараметр, ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи",
			ЭтотОбъект,
			ПараметрыОповещенияСвязей);
			
		ПараметрыОткрытияФормы = Новый Структура(
			"Документ, ОбязательныеСвязи, Контрагент, Организация, Проект", 
			Объект.Ссылка, ОбязательныеСвязиПараметр,
			Объект.Отправитель, Объект.Организация, Объект.Проект);	
			
		ИмяФормыСозданияСвязи = "";	
		Если СколькоНеЗаполненоСвязей = 1 Тогда
			
			СтрокаПараметров = ОбязательныеСвязиПараметр[0];
			Если ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВнутренниеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВнутренниеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ИсходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ИсходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Файлы") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Файлы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Мероприятия") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Мероприятия.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Проекты") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Проекты.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ВходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ИсходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			Иначе	
				ИмяФормыСозданияСвязи = "РегистрСведений.СвязиДокументов.Форма.ФормаВнешнегоРесурсаДляСозданияСвязи";
			КонецЕсли;	
			
		Иначе	
			ИмяФормыСозданияСвязи = "РегистрСведений.СвязиДокументов.Форма.СозданиеОбязательныхСвязей";
		КонецЕсли;	
			
		ОткрытьФорму(ИмяФормыСозданияСвязи, 
			ПараметрыОткрытияФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ВыбранныеОбязательныеСвязи = Результат; // массив
		
		Для Каждого Строка Из ВыбранныеОбязательныеСвязи Цикл
		
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			Отбор.Вставить("СсылкаНа", Строка.СсылкаНа);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 1 Тогда
				Строки[0].СвязанныйДокумент = Строка.СвязанныйДокумент;
			ИначеЕсли Строки.Количество() = 0 Тогда
				
				НоваяСтрока = ОбязательныеСвязи.Добавить();
				НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
				НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
				НоваяСтрока.СвязанныйДокумент = Строка.СвязанныйДокумент;
				НоваяСтрока.Комментарий = Строка.Комментарий;
				НоваяСтрока.НужноЗаписать = Истина;
				
			КонецЕсли;	
		
		КонецЦикла;
		
		Записать(Параметры.ПараметрыЗаписи);
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если УчитыватьКакОбращениеГраждан Тогда  
		Если Объект.Повторное Тогда 
			ПроверяемыеРеквизиты.Добавить("ПервичноеОбращение");
		КонецЕсли;	
		Если Объект.Дубликат Тогда 
			ПроверяемыеРеквизиты.Добавить("ОсновноеОбращение");
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ПервичноеОбращение) И ПервичноеОбращение = Объект.Ссылка Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Указана ссылка на самого себя'"),,"ПервичноеОбращение",,Отказ);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОсновноеОбращение) И ОсновноеОбращение = Объект.Ссылка Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Указана ссылка на самого себя'"),,"ОсновноеОбращение",,Отказ);
		КонецЕсли;
	КонецЕсли;	

	Если Не УчитыватьКакОбращениеГраждан 
		Или Объект.ВидОбращения <> Перечисления.ВидыОбращенийГраждан.Анонимное Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Отправитель"" не заполнено'"),,
				"Объект.Отправитель",, Отказ);
		КонецЕсли;
	КонецЕсли;	
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны обязательные связи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЕсли;	
	
	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента",,Отказ);
		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"ИспользоватьЭтапыОбработкиДокумента");
		
		Если ИспользоватьЭтапыОбработкиДокумента Тогда 
			Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
				Если Строка.Пройден И Не ЗначениеЗаполнено(Строка.ДатаПрохождения) Тогда 
					НомерСтроки = ЭтапыОбработкиДокументов.Индекс(Строка);
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для пройденного этапа ""%1"" не указана дата прохождения'"), Строка.Этап);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
						"ЭтапыОбработкиДокументов["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].ДатаПрохождения",, Отказ);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	// Обработка рабочей группы
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для Каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		Если Не ПараметрыЗаписи.Свойство("МассивСостояний") Тогда 
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
				Перечисления.СостоянияДокументов.НаРегистрации, 
				ПользователиКлиентСервер.ТекущийПользователь(), 
				ТекущаяДатаСеанса(),
			    Перечисления.СостоянияДокументов.ПустаяСсылка());
				
			МассивСостояний = Новый Массив;	
			МассивСостояний.Добавить(СтруктураСостояния);
			
			ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка, 
			"ЧисловойНомер, ДатаРегистрации, ЧисловойНомер");
		Если РеквизитыСсылки.ЧисловойНомер > 0 И ТекущийОбъект.ЧисловойНомер = -1 Тогда 
			ОсвободитьНомерДокумента(ТекущийОбъект, РеквизитыСсылки.ДатаРегистрации, РеквизитыСсылки.ЧисловойНомер);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Регистрация")
		Или ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда
		Если Не ПроверитьВозможностьРегистрации(ТекущийОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		Если ПараметрыЗаписи.Свойство("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена")
			И Не ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		ЗарегистрироватьНаСервере(
			ТекущийОбъект, 
			СообщениеОбОшибке, 
			РегистрационныйНомер);
					
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			Пользователи.ТекущийПользователь(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
				
		МассивСостояний = Новый Массив;
		МассивСостояний.Добавить(СтруктураСостояния);
		ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка связей
	СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
		НачальноеВОтветНа, ВОтветНа, Справочники.ТипыСвязей.ПолученВОтветНа);
	СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
		НачальныйПредметПереписки, ПредметПереписки, Справочники.ТипыСвязей.ПредметПереписки);
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьКакОбращениеГраждан", Новый Структура("ВидВходящегоДокумента", Объект.ВидДокумента)) Тогда  
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
			НачальноеПервичноеОбращение, ПервичноеОбращение, Справочники.ТипыСвязей.ПервичноеОбращение);
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
			НачальноеОсновноеОбращение, ОсновноеОбращение, Справочники.ТипыСвязей.ОсновноеОбращение);
	КонецЕсли;
	
	Если СоздатьСвязьДляНумерации и ЗначениеЗаполнено(СвязанныйДокументДляНумерации) Тогда
		СвязиДокументов.СоздатьСвязь(
			ТекущийОбъект.Ссылка, 
			СвязанныйДокументДляНумерации, 
			ТипСвязиНумератора);
			
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
	// пишем ранее подготовленные обязательные связи
	Для Каждого Строка Из ОбязательныеСвязи Цикл
		
		Если Строка.НужноЗаписать Тогда
			
			Попытка
			
				СвязиДокументов.СоздатьСвязь(
					ТекущийОбъект.Ссылка, 
					Строка.СвязанныйДокумент, 
					Строка.ТипСвязи,,,
					Строка.Комментарий);
					
				Строка.НужноЗаписать = Ложь;
				
			Исключение
				ОбязательныеСвязи.Удалить(Строка);
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;	
	
	КонецЦикла;
	
	Если РегламентированныйУчетОбращений Тогда 
		Для Каждого СтрВопрос Из СвязанныеДокументыПоВопросам Цикл 
			Если ЗначениеЗаполнено(СтрВопрос.СопроводительныйДокумент) 
				И ЗначениеЗаполнено(СтрВопрос.Вопрос) Тогда 
				СвязиДокументов.УдалитьСвязь(ТекущийОбъект.Ссылка, 
					СтрВопрос.СопроводительныйДокумент, Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу,
					СтрВопрос.Вопрос);
			ИначеЕсли ЗначениеЗаполнено(СтрВопрос.ОтветныйДокумент) 
				И ЗначениеЗаполнено(СтрВопрос.Вопрос) Тогда 
				СвязиДокументов.УдалитьСвязь(ТекущийОбъект.Ссылка, 
					СтрВопрос.ОтветныйДокумент, Справочники.ТипыСвязей.ОтправленОтвет,
					СтрВопрос.Вопрос);
			КонецЕсли;
		КонецЦикла;
		
		СвязанныеДокументыПоВопросам.Очистить();
		Для Каждого СтрВопрос Из Объект.ВопросыОбращения Цикл 
			Если ЗначениеЗаполнено(СтрВопрос.СопроводительныйДокумент) Тогда
				СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
					Неопределено, СтрВопрос.СопроводительныйДокумент, 
					Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу,,,,
					СтрВопрос.Вопрос);
				
			ИначеЕсли ЗначениеЗаполнено(СтрВопрос.ОтветныйДокумент) Тогда
				СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
					Неопределено, СтрВопрос.ОтветныйДокумент, 
					Справочники.ТипыСвязей.ОтправленОтвет,,,,
					СтрВопрос.Вопрос);
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Изменение состояния
	Если ПараметрыЗаписи.Свойство("МассивСостояний") И ТипЗнч(ПараметрыЗаписи.МассивСостояний) = Тип("Массив") Тогда 
		ИзменитьСостояние(ТекущийОбъект.Ссылка, ПараметрыЗаписи.МассивСостояний);
	КонецЕсли;	
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтотОбъект, ЭлементыДляСохранения(), ИмяФормы);
	ЗаполнитьСвязи();
	
	// Этапы обработки документов
	Делопроизводство.ЗаписатьЭтапы(ЭтотОбъект, ТекущийОбъект.Ссылка);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	
	// МЭДО:
	КэшВидаДокумента = Новый Структура();
	КэшВидаДокумента.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
	КэшВидаДокумента.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
	ИнтеграцияСМЭДО.СохранитьДанныеМЭДОВФорме(ЭтотОбъект, КэшВидаДокумента, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, НовыйДокумент);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);	
	
	Если НовыйДокумент Тогда
		РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Объект.Шаблон);
	КонецЕсли;
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл

			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
            КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
			
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;	
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Тип("СправочникСсылка.ВходящиеДокументы"));
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки, 
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);		
				КонецЕсли;
				
				Если КопироватьПодписиЭП Тогда
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					
					ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Приемник.ТекущаяВерсия);
					
					Если ЧислоПодписей <>  0 Тогда
						ФайлОбъект = Приемник.ПолучитьОбъект();
						ФайлОбъект.ПодписанЭП = Истина;
						ФайлОбъект.Записать();
						
						ВерсияОбъект.ПодписанЭП = Истина;
						ВерсияОбъект.Записать();
					КонецЕсли;	
					
				КонецЕсли;	
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
					РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(
						Источник.Ссылка, ФайлОбъект.Ссылка);
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			// Установка признака оригинала
			Если ВестиУчетСканКопийОригиналовДокументов
				И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Приемник.ТекущаяВерсияРасширение) Тогда 
				
				Делопроизводство.СохранитьСведенияОбОригиналеФайла(Приемник, ВладелецФайла);
				
				Если Элементы.Обзор.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
				Иначе
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
				КонецЕсли;
				Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Файлы
	Делопроизводство.СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Объект.Ссылка);
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	
	Если КопироватьПодписиЭП Тогда
		Источник = Параметры.ДокументОснование;
		Приемник = Объект.Ссылка;
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Истина;
		
		РаботаСЭП.СкопироватьВсеПодписи(Источник.Ссылка, Приемник);
		
		ДокументОбъект.Записать();
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
		
	ИначеЕсли ДокументОснованиеПодписан Тогда	
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Ложь;
		ДокументОбъект.Записать();
		Прочитать();
	КонецЕсли;	
	
	ЭтаФорма.Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	ЗаполнитьШаблоныДляАвтоЗапуска();
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда 
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписокСоздание;
	КонецЕсли;	
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	Если НовыйДокумент Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);
	
	РаботаССВД.ПослеЗаписиНаСервереИзКарточкиВходящегоДокумента(Объект.Ссылка);
		
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;

	КонецЕсли;
	
	Если ДокументооборотПраваДоступа.ЕстьПравоРегистрации(ТекущийОбъект.Ссылка) Тогда
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Ложь;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Ложь;
	Иначе 
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ОтразитьВозвратВЖурнале И ПараметрыЗаписи.Свойство("Регистрация") Тогда
		ОтразитьВозвратДокументаКонтрагентом(ТекущийОбъект);
	КонецЕсли;
	
	ЗаполнитьСвязи();
	ПолучитьОбзорДокумента();
	ПолучитьИнструкции();
	
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ЗаполнитьВопросыОбращения();
	
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
	// Оценка производительности
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераВыполнениеКомандыЗаписать);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	// Штрихкодирование
	Если Не Объект.Ссылка.Пустая() И ИспользоватьШК
		И НеобходимоНапечататьШтрихкодПриСоздании И Не ПоказанВопросОВставкеШтрихкода Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для данного документа не был напечатан штрихкод.%1Действительно закрыть форму?'"),
			Символы.ПС);
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимВопроса);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Если Модифицированность = Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат; 
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	
	ВариантПредупрежденияПриЗакрытииВходящего = ДелопроизводствоКлиентПовтИсп.
		ПолучитьПерсональныеНастройкиРаботыСДокументами().ВариантПредупрежденияПриЗакрытииВходящего;	
		
	РегистрацияПриЗакрытии = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не ДокументЗарегистрирован() И ЭтоДелопроизводитель
		И ЗакрытьНезарегистрированныйДокумент <> Истина
		И ВариантПредупрежденияПриЗакрытииВходящего <> "ЗакрыватьБезРегистрации" 
		И ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Объект.Ссылка) Тогда 
		
		Если ВариантПредупрежденияПриЗакрытииВходящего = "ВсегдаРегистрировать" Тогда 
			РегистрацияПриЗакрытии = Истина;
			Если ЗарегистрироватьДокумент() Тогда 
				ЗакрытьНезарегистрированныйДокумент = Истина;
			КонецЕсли;
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжениеПередЗакрытием",
				ЭтотОбъект,
				ПараметрыОбработчика);
			ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриЗакрытииНезарегистрированного",,
				ЭтаФорма,,,,ОписаниеОповещения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	#Если Не ВебКлиент Тогда
	
	МассивЗахваченныхФайлов = ПолучитьЗахваченныеФайлы();
	
	Расширение = "";
	МассивЗахваченныхТолькоWordФайлов = Новый Массив;
	СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
		Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Расширение, МассивЗахваченныхТолькоWordФайлов);
		
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		
		НазваниеПрограммы = ДелопроизводствоКлиент.ПолучитьНазваниеПрограммыЗахвата(
			Расширение, СписокЗанятыеWordФайлы.Количество());
			
		СтрокаФайлов = "";
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;
		
		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для закрытия карточки документа закройте файлы, занятые %1:
				| 
				|%2.'"),
				НазваниеПрограммы, СтрокаФайлов);
		Иначе	
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для закрытия карточки документа закройте файл, занятый %1:
				| 
				|%2.'"),
				НазваниеПрограммы, СтрокаФайлов);
			
		КонецЕсли;	
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	НеОсвобождатьЗанятыеWordФайлы = Истина;
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхТолькоWordФайлов, НеОсвобождатьЗанятыеWordФайлы);
		
	#КонецЕсли				
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоЧтоСозданныйДокумент И БылПоказанДиалогИнтерактивногоЗапускаПроцесса <> Истина Тогда
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаЗакрытиеКарточки, 
			Объект.Ссылка, 
			"ЗакрытиеКарточки",
			ЭтаФорма,
			Отказ,
			Истина);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWordПередЗакрытием(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(ОтветПользователя, Параметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПоказанВопросОВставкеШтрихкода = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеПередЗакрытием(Результат, Параметры) Экспорт
	
	Если Результат = "НеРегистрировать" Тогда	
		
		ЗакрытьНезарегистрированныйДокумент = Истина;
		Закрыть();
		
	ИначеЕсли Результат = "Зарегистрировать" Тогда 
		
		РегистрацияПриЗакрытии = Истина;
		Если Не ЗарегистрироватьДокумент() Тогда 
			ЗакрытьНезарегистрированныйДокумент = Ложь;
		Иначе	
			ЗакрытьНезарегистрированныйДокумент = Истина;
			Закрыть();
		КонецЕсли;	
		
	Иначе	
		
		ЗакрытьНезарегистрированныйДокумент = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеРезолюции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах") Тогда
		
		Элементы.КПРезолюцийПоказыватьУдаленные.Пометка = Настройки["ПоказыватьУдаленныеРезолюции"];
		ЗаполнитьСписокРезолюций();
	КонецЕсли;

	Если Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСписокФайлов(Истина);
		КонецЕсли;	
				
		Если ИспользоватьОбзорДокументов И Не Объект.Ссылка.Пустая() Тогда
			Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
		Иначе
			Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Настройки["ПоказыватьТолькоОригиналыВСвязях"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда
		ЗаполнитьСвязи();
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеСвязи"] <> Неопределено 
		И Не Объект.Ссылка.Пустая() Тогда
		Элементы.ДеревоСвязейПоказыватьУдаленныеСвязи.Пометка = Настройки["ПоказыватьУдаленныеСвязи"];
		ЗаполнитьСвязи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи", Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаЭП.Видимость Тогда 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не подписан электронной подписью'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИзСпискаОбращенийГраждан Тогда 
		СтандартнаяОбработка = Ложь;
		
		Если БыстрыйВыборВидаДокумента Тогда 
			ДанныеВыбора = ПолучитьВидыДокументаОбращенияОтГраждан();
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("ЯвляетсяОбращениемОтГраждан", Истина);
			Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
			Отбор.Вставить("ПометкаУдаления", Ложь);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ВидДокумента);
			
			ОткрытьФорму("Справочник.ВидыВходящихДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;	
		
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если БыстрыйВыборВидаДокумента Тогда 
			ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора("", ИзСпискаОбращенийГраждан);
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
			Отбор.Вставить("ПометкаУдаления", Ложь);
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ВидДокумента);
		
			ОткрытьФорму("Справочник.ВидыВходящихДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (КонецДня(Объект.СрокИсполнения) < Объект.ДатаСоздания) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения меньше даты создания документа!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
	КонецЕсли;	
	
	СрокИсполненияДней = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "СрокИсполнения");
	Если ЗначениеЗаполнено(СрокИсполненияДней) И ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда 
		Если Объект.СрокИсполнения > Объект.ДатаСоздания + 24 * 3600 * СрокИсполненияДней Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения превышает нормативный срок для данного вида документа!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "Обзор" и ЭтаФорма.Модифицированность Тогда
		ПолучитьОбзорДокумента();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПереадресовавшегоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Переадресовавший) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Переадресован от""'"),,
			"Объект.Переадресовавший");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	
	ПараметрыНажатия = Новый Структура;
	ПараметрыНажатия.Вставить("МестоХранения", МестоХранения);
	ПараметрыНажатия.Вставить("Элемент", Элемент);
	ПараметрыНажатия.Вставить("ЭтаФорма", ЭтаФорма);
	ПараметрыНажатия.Вставить("ЗапретитьРучноеИзменениеСостоянияДокументов",
		ЗапретитьРучноеИзменениеСостоянияДокументов);
	
	ОписаниеОбработатьСтатус = Новый ОписаниеОповещения(
		"ОбработатьСтатус",
		ЭтотОбъект);
	ПараметрыНажатия.Вставить("ОписаниеОбработатьСтатус", ОписаниеОбработатьСтатус);
	
	ДелопроизводствоКлиент.ОбработатьНажатиеНаПолеОбзор(Объект, НавигационнаяСсылкаПоля, ПараметрыНажатия); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатус(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		ИзменитьСостояние(Объект.Ссылка, Результат);
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяОтветПереадресовавшемуПриИзменении(Элемент)
	
	Если Объект.ТребуетсяОтветПереадресовавшему Тогда 
		Элементы.СрокОтветаПереадресовавшему.Доступность = Истина;
		Элементы.ОтправитьОтветПереадресовавшему.Доступность = Истина;
	Иначе
		Элементы.СрокОтветаПереадресовавшему.Доступность = Ложь;
		Элементы.ОтправитьОтветПереадресовавшему.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСВДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ЖурналДокументов.СообщенияСВД.Форма.ФормаСпискаПоДокументу", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Изменение полей, влияющих на номер

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	
	ПриИзмененииДатыРегистрации();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДатаРегистрации);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора(Текст, ИзСпискаОбращенийГраждан);
	КонецЕсли;	
	
КонецПроцедуры

// Готовит данные выбора для поля ВидДокумента
&НаСервереБезКонтекста
Функция ВидДокументаПолучитьДанныеВыбора(Текст, ИзСпискаОбращенийГраждан)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
	Если ИзСпискаОбращенийГраждан Тогда
		Отбор.Вставить("ЯвляетсяОбращениемОтГраждан", Истина);
	КонецЕсли;	
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыВыбора.Вставить("Отбор", Отбор);
	
	ДанныеВыбора = Справочники.ВидыВходящихДокументов.ПолучитьДанныеВыбора(ПараметрыВыбора);	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	// ручное изменение номера
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураПараметров);
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.ЧисловойНомер > 0 Тогда 
			ОсвободитьНомерДокумента(Объект, ДатаРегистрации, ЧисловойНомер);
		КонецЕсли;
		Объект.ЧисловойНомер = -1; 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Выбор пользователей, контрагента и контактного лица

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда 
		Объект.Подписал = Неопределено;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Отправитель);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	Если ИспользоватьСервисСПАРКРиски Тогда 
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;                                                       
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Подписал) Тогда
		ПараметрыФормы.Вставить("Получатель", Объект.Подписал);
	Иначе	
		ПараметрыФормы.Вставить("Получатель", Объект.Отправитель);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПометкаУдаления", Ложь);
	
	Если УчитыватьКакОбращениеГраждан Тогда 
		ПараметрыФормы.Вставить("Режим", "ТолькоКонтрагенты");
	Иначе
		ПараметрыФормы.Вставить("Режим", "КонтрагентыКонтактныеЛица");
	КонецЕсли;

	ОткрытьФорму("ОбщаяФорма.ВыборКонтрагентаКонтактноеЛицо", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Объект.Отправитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ВыбранноеЗначение, "Владелец");
		Объект.Подписал = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Объект.Отправитель = ВыбранноеЗначение;
		Объект.Подписал = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			Объект.Отправитель = ВыбранноеЗначение.Контрагент;
			Объект.Подписал = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			Объект.Отправитель = ВыбранноеЗначение.Контрагент;
			Объект.Подписал = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранноеЗначение = Объект.Отправитель;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ОтправительОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Адресат) И Не НельзяМенятьПодразделение Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Адресат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Адресат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаХранениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.ОтветственныйЗаХранение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с местом хранения

&НаКлиенте
Процедура МестоХраненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораМестаХранения(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораМестаХранения(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с составом документа

&НаКлиенте
Процедура СоставСтрокаПриИзменении(Элемент)
	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СоставСтрока, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
    НачальныйСостав = СоставСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПоиска = НРег(Элемент.ТекстРедактирования);	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СтрокаПоиска, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
	
	// На случай возврата ошибки останавливаем вызов
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоЛистов", Объект.КоличествоЛистов);
	ПараметрыФормы.Вставить("КоличествоПриложений", Объект.КоличествоПриложений);
	ПараметрыФормы.Вставить("КоличествоЭкземпляров", Объект.КоличествоЭкземпляров);
	ПараметрыФормы.Вставить("ЛистовВПриложениях", Объект.ЛистовВПриложениях);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоставСтрокаНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.СоставДокумента", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество() > 0 Тогда 
		Объект.КоличествоЛистов = Результат.КоличествоЛистов;
		Объект.КоличествоПриложений = Результат.КоличествоПриложений;
		Объект.КоличествоЭкземпляров = Результат.КоличествоЭкземпляров;
		Объект.ЛистовВПриложениях = Результат.ЛистовВПриложениях;
		
        ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
    НачальныйСостав = СоставСтрока;
		
КонецПроцедуры	

&НаКлиенте
Процедура СоставСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КоличествоЛистов = 0;
	Объект.КоличествоПриложений = 0;
	Объект.КоличествоЭкземпляров = 0;
	Объект.ЛистовВПриложениях = 0;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Контрагент", 		Объект.Отправитель);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
	ПараметрыФормы.Вставить("ФормаДокумента", 		Объект.ФормаДокумента);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с делом документа

&НаКлиенте
Процедура ДелоТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДелоТекст) Тогда 
		Объект.Дело = Неопределено;
		МестоХранения = Неопределено;
		ДелоТекст = Неопределено;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДелоТекстНачалоВыбораПродолжение",
		ЭтотОбъект,
		Новый Структура("Элемент", Элемент));
			
	Если Не ЗначениеЗаполнено(Объект.Дело) 
		И Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина) > 0 Тогда 
		
		ТекстВопроса = 
			НСтр("ru = 'По документу имеются невыполненные задачи.'") 
			+ Символы.ПС 
			+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаРегистрации", 		Объект.ДатаРегистрации);
		ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
		ПараметрыФормы.Вставить("Контрагент", 		Объект.Отправитель);
		ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
		ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.Дело);
		ОтборНоменклатураДел = ?(ВестиУчетПоНоменклатуреДел, Объект.НоменклатураДел, Неопределено);
		ПараметрыФормы.Вставить("НоменклатураДел", 		ОтборНоменклатураДел);
		ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
		ПараметрыФормы.Вставить("ФормаДокумента", 		Объект.ФормаДокумента);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПометкаУдаления", Ложь);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ДелопроизводствоКлиент.ВыбратьДело(Параметры.Элемент, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Дело = Неопределено;
	МестоХранения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДелоТекст) Тогда
		ПоказатьЗначение(, Объект.Дело);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Дело = ВыбранноеЗначение;
				
		Если ЗначениеЗаполнено(Дело) Тогда	
			
			Если Не ЗначениеЗаполнено(Объект.Дело) Тогда 
				КоличествоЗадач = Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина);
				Если КоличествоЗадач > 0 Тогда 
					
					ПараметрыОбработчика = Новый Структура();
					ПараметрыОбработчика.Вставить("Дело", Дело);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ДелоТекстОбработкаВыбораПродолжение",
						ЭтотОбъект,
						ПараметрыОбработчика);
					
					ТекстВопроса = 
						НСтр("ru = 'По документу имеются невыполненные задачи.'") 
						+ Символы.ПС 
						+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
					
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					Возврат;	
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыДела = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Дело, 
				"НоменклатураДел.Индекс, МестоХраненияДел");
			ДелоТекст = СокрЛП(РеквизитыДела.НоменклатураДелИндекс) + " " + СокрЛП(Дело);
			МестоХранения = РеквизитыДела.МестоХраненияДел;
		Иначе
			МестоХранения = Неопределено;
			ДелоТекст = Неопределено;
		КонецЕсли;	

		Объект.Дело = Дело;
        Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		МестоХранения = Неопределено;
		ДелоТекст = Неопределено;
		Возврат;
	КонецЕсли;
	
	Дело = Параметры.Дело;
	РеквизитыДела = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Дело,
		"НоменклатураДел.Индекс, МестоХраненияДел"); 
	ДелоТекст = СокрЛП(РеквизитыДела.НоменклатураДелИндекс) + " " + СокрЛП(Дело);
	МестоХранения = РеквизитыДела.МестоХраненияДел;
	
	Объект.Дело = Дело;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
        СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФормаДокументаПриИзмененииПродолжение",
		ЭтотОбъект);
	ДелопроизводствоКлиент.ФормаДокументаПриИзменении(ЭтаФорма, Элемент, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	Если ФормаДокументаПриОткрытии <> Объект.ФормаДокумента Тогда 
		ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
		Объект.НоменклатураДел = Неопределено;
		Объект.Дело = Неопределено;
		ХранениеТекст = Неопределено;
		ДелоТекст = Неопределено;
		
		УстановитьВидимостьПолейИДоступностьПоСостоянию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с состоянием документа

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СостояниеТекстНачалоВыбораПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			ПараметрыЗаписи = Новый Структура("МассивСостояний", Результат);
			Если Не Записать(ПараметрыЗаписи) Тогда 
				Возврат;
			КонецЕсли;	
		Иначе
			ИзменитьСостояние(Объект.Ссылка, Результат);
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДляПросмотра", Истина);
	
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;				
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Элементы.ДеревоСвязейОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Ложь;
	
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	Элементы.ДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Истина;
		Элементы.ДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Истина;
		
	ИначеЕсли Не ТекущиеДанные.ЭтоРодитель Тогда 	
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Истина;
		
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		
		НеПродолжатьСозданиеСвязи = Ложь;
		Если ОбязательныеТипыСвязей.Количество() <> 0 И
			ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
			НеПродолжатьСозданиеСвязи = Истина;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		Если НеПродолжатьСозданиеСвязи Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
	КонецЕсли;	
	
	Если Копирование Тогда 
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыКлюча.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		ПараметрыФормы.Вставить("ЗначениеКопирования", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	Иначе 
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ТипСвязи);
			ОткрытьФорму("Справочник.ТипыСвязей.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.ДеревоСвязей);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	Иначе	
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыКлюча.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Ключ", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель
	 Или ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДополнительныйОбъектСвязи) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Даннывй вид связи нельзя удалить'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСвязейПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));

	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Удалить запись?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ПараметрыУдаления = Новый Структура;
		ПараметрыУдаления.Вставить("Документ", Объект.Ссылка);
		ПараметрыУдаления.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыУдаления.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыУдаления.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);	
		ПараметрыУдаления.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		УдалитьСвязь(ПараметрыУдаления);
		
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			Элементы.ДеревоСвязей.Развернуть(Строка.ПолучитьИдентификатор(), Истина)
		КонецЦикла;
		
		// Оповестим связанный документ об удалении связи
		Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Документ", ТекущиеДанные.СвязанныйДокумент);
			Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйДокумент = ПараметрыПеретаскивания.Значение[0];
	
	Если ЗначениеЗаполнено(СвязанныйДокумент)
		И ДелопроизводствоКлиент.ДокументыМожноСвязать(Объект.Ссылка, СвязанныйДокумент) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("СвязанныйДокумент", СвязанныйДокумент);
		
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя установить связь между выбранными объектами'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОригиналыВСвязяхПриИзменении(Элемент)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "В ответ на"

&НаКлиенте
Процедура ВОтветНаСтрокаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ВОтветНаСтрока) Тогда 
		ПредметПереписки = Неопределено;
		ВОтветНа = Неопределено; 
		Модифицированность = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ВОтветНа);
	
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
		ПараметрыФормы.Вставить("Получатель", Объект.Отправитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаВыбора", ПараметрыФормы, Элементы.ВОтветНаСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	ПредметПереписки = Неопределено;
	ВОтветНа = Неопределено; 
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВОтветНа) Тогда
		ПоказатьЗначение(, ВОтветНа);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	ВОтветНа = ВыбранноеЗначение;
	Результат = ПолучитьДанныеВОтветНа(ВОтветНа);
	
	Если ЗначениеЗаполнено(Результат.РегистрационныйНомер) И ЗначениеЗаполнено(Результат.ДатаРегистрации) Тогда
		ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2'"), Результат.РегистрационныйНомер, Формат(Результат.ДатаРегистрации, "ДЛФ=D"));
	Иначе
		ВОтветНаСтрока = Результат.Заголовок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Результат.Проект) Тогда 
		Объект.Проект = Результат.Проект;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВопросДеятельности) И ЗначениеЗаполнено(Результат.ВопросДеятельности) Тогда 
		Объект.ВопросДеятельности = Результат.ВопросДеятельности;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда
		Если ЗначениеЗаполнено(Результат.Получатель) И ЗначениеЗаполнено(Результат.Адресат) Тогда
			Объект.Отправитель = Результат.Получатель;
			Объект.Подписал = Результат.Адресат;
		ИначеЕсли ЗначениеЗаполнено(Результат.Получатель) Тогда 
			Объект.Отправитель = Результат.Получатель;
			Объект.Подписал = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(ВОтветНа, "ПредметПереписки");
	Элементы.ПредметПереписки.Видимость = ЗначениеЗаполнено(ПредметПереписки);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;		
		ДанныеВыбора = НайтиИсходящийДокументОтправителя(Текст, Объект.Отправитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;		
		ДанныеВыбора = НайтиИсходящийДокументОтправителя(Текст, Объект.Отправитель);
	Иначе 
		ПредметПереписки = Неопределено;
		ВОтветНа = Неопределено; 
		ВОтветНаСтрока = Неопределено;	
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Обращения граждан

&НаКлиенте
Процедура ПовторноеПриИзменении(Элемент)
	
	Если Не Объект.Повторное И ЗначениеЗаполнено(ПервичноеОбращение) Тогда 
		ПервичноеОбращение = Неопределено; 
	КонецЕсли;	
	
	Элементы.ПервичноеОбращение.Доступность = Объект.Повторное;
	Элементы.ПервичноеОбращение.АвтоОтметкаНезаполненного = Объект.Повторное;
	Элементы.ПервичноеОбращение.ОтметкаНезаполненного = Объект.Повторное И Не ЗначениеЗаполнено(ПервичноеОбращение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДубликатПриИзменении(Элемент)
	
	Если Не Объект.Дубликат И ЗначениеЗаполнено(ОсновноеОбращение) Тогда 
		ОсновноеОбращение = Неопределено; 
	КонецЕсли;	
	
	Элементы.ОсновноеОбращение.Доступность = Объект.Дубликат;
	Элементы.ОсновноеОбращение.АвтоОтметкаНезаполненного = Объект.Дубликат;
	Элементы.ОсновноеОбращение.ОтметкаНезаполненного = Объект.Дубликат И Не ЗначениеЗаполнено(ОсновноеОбращение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбращенияПриИзменении(Элемент)
	
	Если Объект.ВидОбращения = ВидОбращенияАнонимное Тогда 
		Объект.Отправитель = Неопределено;
		Объект.Подписал = Неопределено;
		Элементы.Отправитель.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Отправитель.ОтметкаНезаполненного = Ложь;
		Элементы.Отправитель.Доступность = Ложь;
	Иначе	
		Элементы.Отправитель.АвтоОтметкаНезаполненного = Истина;
		Элементы.Отправитель.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Отправитель);
		Элементы.Отправитель.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичноеОбращениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
 	
	ПараметрыФормы = Новый Структура;
	Если Объект.ВидОбращения = ВидОбращенияАнонимное Тогда 
		ПараметрыФормы.Вставить("Отбор",
			Новый Структура("ВидОбращения, ЯвляетсяОбращениемОтГраждан", ВидОбращенияАнонимное, Истина));
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Отправитель""'"),,"Объект.Отправитель");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", 
			Новый Структура("Отправитель, ЯвляетсяОбращениемОтГраждан", Объект.Отправитель, Истина));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеОбращениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ВидОбращения = ВидОбращенияАнонимное Тогда 
		ПараметрыФормы.Вставить("Отбор", 
			Новый Структура("ВидОбращения, ЯвляетсяОбращениемОтГраждан", ВидОбращенияАнонимное, Истина));
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Отправитель""'"),,"Объект.Отправитель");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", 
			Новый Структура("Отправитель, ЯвляетсяОбращениемОтГраждан", Объект.Отправитель, Истина));
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с категориями документа

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	Модифицированность = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с инструкциями

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПолученТекстНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПоменятьПризнакНаличияОргинала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьПризнакНаличияОргинала()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоменятьПризнакНаличияОргиналаПродолжение",
		ЭтотОбъект);
	Если ОригиналПолучен Тогда 
		ТекстВопроса = НСтр("ru = 'Снять отметку о получении оригинала?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Иначе 
		ТекстВопроса = НСтр("ru = 'Отметить получение оригинала?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьПризнакНаличияОргиналаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОригиналПолученТекстНажатиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОригиналПолученТекстНажатиеНаСервере() 
	
	ОригиналПолучен = Не ОригиналПолучен;
	РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОтметкуОПолученииОригиналаДокумента(
		Объект.Ссылка, ОригиналПолучен);
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	ПолучитьОбзорДокумента();
	
КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КартинкаОтчетностьВКонтролирующиеОрганыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ЭлектронныйДокументОтчетностьВКО);
	
КонецПроцедуры
// ИнтернетПоддержкаПользователей.СПАРКРиски

&НаКлиенте
Процедура ГлавныйФайлМЭДОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьФайлыПодходящиеДляМЭДО(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированныйУчетОбращенийОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МнениеАвтораОРезультатахПриИзменении(Элемент)
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура МнениеАвтораОРезультатахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", МнениеАвтораОРезультатах);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Мнение заявителя о результатах'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияМнениеАвтораОРезультатахЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияМнениеАвтораОРезультатахЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	МнениеАвтораОРезультатах = Результат;
	ИзменилсяКодВопроса();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МнениеАвтораОМерахПриИзменении(Элемент)
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура МнениеАвтораОМерахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", МнениеАвтораОМерах);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Мнение заявителя о мерах'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияМнениеАвтораОМерахЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияМнениеАвтораОМерахЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	МнениеАвтораОМерах = Результат;
	ИзменилсяКодВопроса();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатРассмотренияПриИзменении(Элемент)
	
	Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Ложь;
	Элементы.ДатаОтвета.Видимость = Ложь;
	Элементы.ГурппаОтветныйДокумент.Видимость = Ложь;
	Элементы.ГруппаМнениеАвтора.Видимость = Ложь;
	
	Если РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.НаправленоВИнойОрган") Тогда 
		Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Истина;
		Если Не ЗначениеЗаполнено(ДатаОтвета) Тогда 
			ДатаОтвета = ТекущаяДата();
		КонецЕсли;
		ОтветныйДокумент = Неопределено;
		
	ИначеЕсли РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.ВТомЧислеМерыПриняты")
		Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.НеПоддержано")
		Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Поддержано")
		Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Разъяснено") Тогда 
		Элементы.ДатаОтвета.Видимость = Истина;
		Элементы.ДатаОтвета.Заголовок = НСтр("ru = 'Дата ответа'");
		Элементы.ГруппаМнениеАвтора.Видимость = Истина;
		СопроводительныйДокумент = Неопределено;
		
		Если Не ЗначениеЗаполнено(ДатаОтвета) Тогда 
			ДатаОтвета = ТекущаяДата();
		КонецЕсли;
		
		Если РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.ВТомЧислеМерыПриняты")
			Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Поддержано")
			Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Разъяснено") Тогда 
			Элементы.ГурппаОтветныйДокумент.Видимость = Истина;
		Иначе 
			ОтветныйДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганДляПередачиПриИзменении(Элемент)
	
	СопроводительныйДокумент = Неопределено;
	СопроводительныйДокументСтрока = Неопределено;
	ИзменилсяКодВопроса();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "Сопроводительный документ"

&НаКлиенте
Процедура СопроводительныйДокументСтрокаПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументПриИзменении(ЭтаФорма, Элемент);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОчистка(
		ЭтаФорма, Элемент, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОткрытие(
		ЭтаФорма, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОбработкаВыбора(
		ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументАвтоПодбор(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОкончаниеВводаТекста(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "Ответный документ"

&НаКлиенте
Процедура ОтветныйДокументСтрокаПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументПриИзменении(ЭтаФорма, Элемент);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОчистка(
		ЭтаФорма, Элемент, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОткрытие(
		ЭтаФорма, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОбработкаВыбора(
		ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументАвтоПодбор(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОкончаниеВводаТекста(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с кодом вопроса

&НаКлиенте
Процедура КодВопросаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", Раздел);
	ПараметрыФормы.Вставить("Тематика", Тематика);
	ПараметрыФормы.Вставить("Тема", Тема);
	ПараметрыФормы.Вставить("Вопрос", Вопрос);
	ПараметрыФормы.Вставить("КодВопроса", КодВопроса);
	
	ПараметрыФормы.Вставить("СокращенныйРежим", Истина);
	ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборОдногоВопроса");
	ПараметрыФормы.Вставить("ДляПросмотра", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПомощникВыбораВопроса", ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", Раздел);
	ПараметрыФормы.Вставить("Тематика", Тематика);
	ПараметрыФормы.Вставить("Тема", Тема);
	ПараметрыФормы.Вставить("Вопрос", Вопрос);
	ПараметрыФормы.Вставить("КодВопроса", КодВопроса);
	ПараметрыФормы.Вставить("СокращенныйРежим", Истина);
	ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборОдногоВопроса");
	
	Обработчик = Новый ОписаниеОповещения("КодВопросаПослеВыбора", 
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.ПомощникВыбораВопроса", ПараметрыФормы, , , , ,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаПослеВыбора(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		Раздел = Результат.Раздел;
		Тематика = Результат.Тематика;
		Тема = Результат.Тема;
		Вопрос = Результат.Вопрос;
		КодВопроса = Результат.КодВопроса;
		
		ИзменилсяКодВопроса();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаОчистка(Элемент, СтандартнаяОбработка)
	
	Раздел = Неопределено;
	Тематика = Неопределено;
	Тема = Неопределено;
	Вопрос = Неопределено;
	КодВопроса = "";
	Объект.ВопросыОбращения.Очистить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтветаПриИзменении(Элемент)
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с таблицей Вопросы

&НаКлиенте
Процедура ВопросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Отправитель", Объект.Отправитель);
		ПараметрыФормы.Вставить("Раздел", ТекущиеДанные.Раздел);
		ПараметрыФормы.Вставить("Тематика", ТекущиеДанные.Тематика);
		ПараметрыФормы.Вставить("Тема", ТекущиеДанные.Тема);
		ПараметрыФормы.Вставить("Вопрос", ТекущиеДанные.Вопрос);
		ПараметрыФормы.Вставить("КодВопроса", ТекущиеДанные.КодВопроса);
		
		ПараметрыФормы.Вставить("РезультатРассмотрения", ТекущиеДанные.РезультатРассмотрения);
		ПараметрыФормы.Вставить("ДатаОтвета", ТекущиеДанные.ДатаОтвета);
		ПараметрыФормы.Вставить("ОрганДляПередачи", ТекущиеДанные.ОрганДляПередачи);
		ПараметрыФормы.Вставить("МнениеАвтораОРезультатах", ТекущиеДанные.МнениеАвтораОРезультатах);
		ПараметрыФормы.Вставить("МнениеАвтораОМерах", ТекущиеДанные.МнениеАвтораОМерах);
		
		ПараметрыФормы.Вставить("СопроводительныйДокументСтрока", ТекущиеДанные.СопроводительныйДокументСтрока);
		ПараметрыФормы.Вставить("СопроводительныйДокумент", ТекущиеДанные.СопроводительныйДокумент);
		
		ПараметрыФормы.Вставить("ОтветныйДокументСтрока", ТекущиеДанные.ОтветныйДокументСтрока);
		ПараметрыФормы.Вставить("ОтветныйДокумент", ТекущиеДанные.ОтветныйДокумент);
		
		ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборНесколькихВопросов");	
		Обработчик = Новый ОписаниеОповещения("КодыВопросовПослеДобавления", 
			ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		
		ОткрытьФорму("Справочник.ВходящиеДокументы.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы,,,,,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		ОткрытьФорму(
			"ОбщаяФорма.ПомощникВыбораВопроса", , , , , ,
			Новый ОписаниеОповещения(
				"ВводНовойСтрокиПослеВыбораВопросаЗавершение", 
				ЭтотОбъект,
				Новый Структура("ТекущиеДанные", ТекущиеДанные)),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовПослеДобавления(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		НоваяСтрока = Объект.ВопросыОбращения.Добавить();
		НоваяСтрока.Раздел = Результат.Раздел;
		НоваяСтрока.Тематика = Результат.Тематика;
		НоваяСтрока.Тема = Результат.Тема;
		НоваяСтрока.Вопрос = Результат.Вопрос;
		НоваяСтрока.КодВопроса = Результат.КодВопроса;
		
		НоваяСтрока.РезультатРассмотрения = Результат.РезультатРассмотрения;
		НоваяСтрока.ДатаОтвета = Результат.ДатаОтвета;
		НоваяСтрока.ОрганДляПередачи = Результат.ОрганДляПередачи;
		
		НоваяСтрока.СопроводительныйДокументСтрока = Результат.СопроводительныйДокументСтрока;
		НоваяСтрока.СопроводительныйДокумент = Результат.СопроводительныйДокумент;
		
		НоваяСтрока.ОтветныйДокумент = Результат.ОтветныйДокумент;
		НоваяСтрока.ОтветныйДокументСтрока = Результат.ОтветныйДокументСтрока;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ОтветныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СопроводительныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		НоваяСтрока.МнениеАвтораОРезультатах = Результат.МнениеАвтораОРезультатах;
		НоваяСтрока.МнениеАвтораОМерах = Результат.МнениеАвтораОМерах;
		
		Модифицированность = Истина;
		Элементы.Вопросы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отправитель", Объект.Отправитель);
	ПараметрыФормы.Вставить("Раздел", ТекущиеДанные.Раздел);
	ПараметрыФормы.Вставить("Тематика", ТекущиеДанные.Тематика);
	ПараметрыФормы.Вставить("Тема", ТекущиеДанные.Тема);
	ПараметрыФормы.Вставить("Вопрос", ТекущиеДанные.Вопрос);
	ПараметрыФормы.Вставить("КодВопроса", ТекущиеДанные.КодВопроса);
	
	ПараметрыФормы.Вставить("РезультатРассмотрения", ТекущиеДанные.РезультатРассмотрения);
	ПараметрыФормы.Вставить("ДатаОтвета", ТекущиеДанные.ДатаОтвета);
	ПараметрыФормы.Вставить("ОрганДляПередачи", ТекущиеДанные.ОрганДляПередачи);
	ПараметрыФормы.Вставить("СопроводительныйДокументСтрока", ТекущиеДанные.СопроводительныйДокументСтрока);
	ПараметрыФормы.Вставить("СопроводительныйДокумент", ТекущиеДанные.СопроводительныйДокумент);
	
	ПараметрыФормы.Вставить("ОтветныйДокументСтрока", ТекущиеДанные.ОтветныйДокументСтрока);
	ПараметрыФормы.Вставить("ОтветныйДокумент", ТекущиеДанные.ОтветныйДокумент);
	
	ПараметрыФормы.Вставить("МнениеАвтораОРезультатах", ТекущиеДанные.МнениеАвтораОРезультатах);
	ПараметрыФормы.Вставить("МнениеАвтораОМерах", ТекущиеДанные.МнениеАвтораОМерах);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Вопрос из тематического классификатора'"));
	ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборНесколькихВопросов");
	Обработчик = Новый ОписаниеОповещения("КодыВопросовПослеВыбора", 
		ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	ОткрытьФорму("Справочник.ВходящиеДокументы.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы,,,,,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовРазделПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовТематикаПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовТемаПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовВопросПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовКодВопросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отправитель", Объект.Отправитель);
	ПараметрыФормы.Вставить("Раздел", ТекущиеДанные.Раздел);
	ПараметрыФормы.Вставить("Тематика", ТекущиеДанные.Тематика);
	ПараметрыФормы.Вставить("Тема", ТекущиеДанные.Тема);
	ПараметрыФормы.Вставить("Вопрос", ТекущиеДанные.Вопрос);
	ПараметрыФормы.Вставить("КодВопроса", ТекущиеДанные.КодВопроса);
	
	ПараметрыФормы.Вставить("РезультатРассмотрения", ТекущиеДанные.РезультатРассмотрения);
	ПараметрыФормы.Вставить("ДатаОтвета", ТекущиеДанные.ДатаОтвета);
	ПараметрыФормы.Вставить("ОрганДляПередачи", ТекущиеДанные.ОрганДляПередачи);
	ПараметрыФормы.Вставить("СопроводительныйДокументСтрока", ТекущиеДанные.СопроводительныйДокументСтрока);
	ПараметрыФормы.Вставить("СопроводительныйДокумент", ТекущиеДанные.СопроводительныйДокумент);
	ПараметрыФормы.Вставить("ОтветныйДокументСтрока", ТекущиеДанные.ОтветныйДокументСтрока);
	ПараметрыФормы.Вставить("ОтветныйДокумент", ТекущиеДанные.ОтветныйДокумент);
	
	ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборНесколькихВопросов");
	
	ПараметрыФормы.Вставить("МнениеАвтораОРезультатах", ТекущиеДанные.МнениеАвтораОРезультатах);
	ПараметрыФормы.Вставить("МнениеАвтораОМерах", ТекущиеДанные.МнениеАвтораОМерах);
	
	Обработчик = Новый ОписаниеОповещения("КодыВопросовПослеВыбора", 
		ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	ОткрытьФорму("Справочник.ВходящиеДокументы.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы,,,,,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовПослеВыбора(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		ТекущиеДанные.Раздел = Результат.Раздел;
		ТекущиеДанные.Тематика = Результат.Тематика;
		ТекущиеДанные.Тема = Результат.Тема;
		ТекущиеДанные.Вопрос = Результат.Вопрос;
		ТекущиеДанные.КодВопроса = Результат.КодВопроса;
		
		ТекущиеДанные.РезультатРассмотрения = Результат.РезультатРассмотрения;
		ТекущиеДанные.ДатаОтвета = Результат.ДатаОтвета;
		ТекущиеДанные.ОрганДляПередачи = Результат.ОрганДляПередачи;
		ТекущиеДанные.СопроводительныйДокументСтрока = Результат.СопроводительныйДокументСтрока;
		ТекущиеДанные.СопроводительныйДокумент = Результат.СопроводительныйДокумент;
		ТекущиеДанные.ОтветныйДокумент = Результат.ОтветныйДокумент;
		ТекущиеДанные.ОтветныйДокументСтрока = Результат.ОтветныйДокументСтрока;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ОтветныйДокументСтрока) Тогда 
			ТекущиеДанные.Документ = ТекущиеДанные.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СопроводительныйДокументСтрока) Тогда 
			ТекущиеДанные.Документ = ТекущиеДанные.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		ТекущиеДанные.МнениеАвтораОРезультатах = Результат.МнениеАвтораОРезультатах;
		ТекущиеДанные.МнениеАвтораОМерах = Результат.МнениеАвтораОМерах;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНовойСтрокиПослеВыбораВопросаЗавершение(Результат, Параметры) Экспорт 
		
	Если Не Результат = Неопределено Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Отправитель", Объект.Отправитель);
		ПараметрыФормы.Вставить("Раздел", Результат.Раздел);
		ПараметрыФормы.Вставить("Тематика", Результат.Тематика);
		ПараметрыФормы.Вставить("Тема", Результат.Тема);
		ПараметрыФормы.Вставить("Вопрос", Результат.Вопрос);
		ПараметрыФормы.Вставить("КодВопроса", Результат.КодВопроса);
		
		ПараметрыФормы.Вставить("РезультатРассмотрения", Неопределено);
		ПараметрыФормы.Вставить("ДатаОтвета", Неопределено);
		ПараметрыФормы.Вставить("ОрганДляПередачи", Неопределено);
		ПараметрыФормы.Вставить("СопроводительныйДокументСтрока", Неопределено);
		ПараметрыФормы.Вставить("СопроводительныйДокумент", Неопределено);
		ПараметрыФормы.Вставить("ОтветныйДокумент", Неопределено);
		ПараметрыФормы.Вставить("ОтветныйДокументСтрока", Неопределено);
		
		ПараметрыФормы.Вставить("МнениеАвтораОРезультатах", Неопределено);
		ПараметрыФормы.Вставить("МнениеАвтораОМерах", Неопределено);
		
		ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборНесколькихВопросов");
		
		ОткрытьФорму(
			"Справочник.ВходящиеДокументы.Форма.ФормаВыбораИзКлассификатора",
			ПараметрыФормы, , , , ,
			Новый ОписаниеОповещения("КодыВопросовПослеДобавления", ЭтотОбъект, Параметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
		
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	
	КоличествоФайлов = Файлы.Количество();
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Строка.ПодписанЭП Тогда
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(Строка.Ссылка, ЭтаФорма);
	Иначе	
		ВыборФайла(Строка.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСозданиеПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.ФайлыСоздание.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = ПараметрыДобавления.Свойство("ДобавлениеОригинала", ДобавлениеОригинала);
	
	Если ВестиУчетСканКопийОригиналовДокументов 
		И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
		И Не ДобавлениеОригинала Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
			СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("Отказ", Отказ);
		ПараметрыОбработчика.Вставить("Копирование", Копирование);
		ПараметрыОбработчика.Вставить("Родитель", Родитель);
		ПараметрыОбработчика.Вставить("Группа", Группа);
		ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ФайлыПередНачаломДобавленияКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
			НСтр("ru = 'Добавление файла'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		Возврат;
			
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, 
				ДобавлениеОригинала,,,,НеОткрыватьФормуВыбораРежимаСозданияФайла);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если Элементы.Файлы.ТекущийЭлемент = Элементы.Оригинал Тогда 
			Возврат;
		КонецЕсли;	
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		Если Элементы.ФайлыСоздание.ТекущийЭлемент = Элементы.ОригиналСоздание Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьКарточкуФайлаРеализация(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		МассивФайлов = Параметры.МассивФайлов;
		
		КоличествоЗанятыхФайлов = Неопределено;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления, 
			КоличествоЗанятыхФайлов);
			
		Если КоличествоЗанятыхФайлов <> Неопределено Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
		КонецЕсли;	
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор И ВыделенныеСтроки.Количество() = 1 Тогда
			
			ВыбраннаяСтрока = ВыделенныеСтроки[0];
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
				Возврат;
			Иначе
				Выполнение = Ложь;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
	#КонецЕсли
	
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
			СостояниеТекст);
		ПоказатьПредупреждение(, Текст);
		
		Возврат;
	
	ИначеЕсли ВестиУчетСканКопийОригиналовДокументов 
		И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
		И Не ПеретаскиваниеОригинала Тогда
		
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
			СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
		ПараметрыОбработчика.Вставить("Строка", Строка);
		ПараметрыОбработчика.Вставить("Поле", Поле);
		ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ФайлыПеретаскиваниеПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
			НСтр("ru = 'Перетаскивание файла'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		Возврат;
	
	КонецЕсли;
	
	Если ПеретаскиваниеОригинала Тогда 
		ТекстПредупреждения = "";
		ПараметрыПеретаскивания.Значение = ДелопроизводствоКлиент.ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(
			ПараметрыПеретаскивания, СостояниеТекст, ТекстПредупреждения);
			
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	ПеретаскиваниеОригинала = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		ПеретаскиваниеОригинала = Ложь;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Истина;
	
	ФайлыПеретаскивание(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.ПараметрыПеретаскивания, 
		ПараметрыОбработчика.СтандартнаяОбработка, 
		ПараметрыОбработчика.Строка, 
		ПараметрыОбработчика.Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.СозданИзШаблона Тогда 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОригиналПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));
		
	КоличествоРасширенийСканКопий = 0;
	ЭтоРасширениеСканКопии = ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(
		ТекущиеДанные.Расширение, КоличествоРасширенийСканКопий);
	Если ТекущиеДанные.Оригинал 
		И Не ЭтоРасширениеСканКопии И КоличествоРасширенийСканКопий > 0 Тогда  
		ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
		|Вы действительно хотите отметить его как оригинал?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
			НСтр("ru = 'Отметка оригинала'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
			Если ТекущиеДанные.Оригинал И Не ТекущиеДанные.ПометкаУдаления Тогда 
				УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
			Иначе
				Если Не ПолучитьВидимостьДекорацииОтсутствуетОригинал() Тогда 
					ОтсутствуетОригинал = Истина;
					Для Каждого Строка Из Файлы Цикл
						Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
							ОтсутствуетОригинал = Ложь;
						КонецЕсли;	
					КонецЦикла;	
					Если ОтсутствуетОригинал Тогда 
						УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
			
		Если ДанныеФайла.РедактируетТекущийПользователь = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для просмотра файла запишите документ.'"));	
		Иначе	
			КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		КонецЕсли;
		
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = ФайлыДобавленные.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов + 1;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги											
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);										
					КоличествоФайлов = КоличествоФайлов+1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодписей

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(ТекущиеДанные.Объект)
		И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
		
		ВыборФайла(ТекущиеДанные.Объект);
	Иначе
		РаботаСЭПКлиент.ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Объект = Неопределено
		ИЛИ ТекущиеДанные.Объект.Пустая() Тогда
		
		Возврат;
	КонецЕсли;
	
	УдалитьПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияСостоянийМЭДО

&НаКлиенте
Процедура ИсторияСостоянийМЭДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияСостоянийМЭДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьИсториюСообщенийМЭДОКлиент", ЭтотОбъект, Неопределено);
	ПоказатьЗначение(Описание, ТекущиеДанные.ПредметСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыОбработкиДокументов

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПройденПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные.Пройден Тогда 
		ТекущиеДанные.ДатаПрохождения = ТекущаяДата();
		ТекущиеДанные.Установил = ТекущийПользователь;
		КоличествоПройденныхЭтапов = КоличествоПройденныхЭтапов + 1;
	Иначе
		ТекущиеДанные.ДатаПрохождения = '00010101';
		ТекущиеДанные.Установил = Неопределено;
		КоличествоПройденныхЭтапов = КоличествоПройденныхЭтапов - 1;
	КонецЕсли;
	
	Если КоличествоЭтапов > 0 И КоличествоПройденныхЭтапов > 0 Тогда
		ЗаголовокГруппыЭтапов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этапы (%1 из %2)'"),
			КоличествоПройденныхЭтапов, КоличествоЭтапов);
	Иначе 
		ЗаголовокГруппыЭтапов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этапы (%1)'"), КоличествоЭтапов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияЭтапаЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияЭтапаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Комментарий = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с инструкциями

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ЕстьЗашифрованныеИлиЗанятыеФайлы Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя подписать документ с зашифрованными или занятыми файлами.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьДокументПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подписать'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументПродолжение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", Объект.Ссылка);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПодписания.ОбработчикЗавершения = ОбработчикЗавершения;
	
	РаботаСЭПКлиент.Подписать(Объект.Ссылка, ПараметрыПодписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	
	ПодписатьДокументЗавершениеВызовСервера();
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПродолжение", ЭтотОбъект);
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуЗаполненияДокументаПоШаблону(
		ОписаниеОповещения,
		"ШаблоныВходящихДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> неопределено
		И ТипЗнч(Результат) <> Тип("Строка") Тогда
		
		ЗаполнитьПоШаблонуВыполнить(Результат.ШаблонДокумента)
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено доступных шаблонов входящих документов.'"));	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияСвязанногоДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Учет изменения срока действия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор связанного документа'"));
	ПараметрыОткрытия.Вставить("СвязанныйДокумент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ФормаСоздатьВидимость", Ложь);
	ПараметрыОткрытия.Вставить("ИспользоватьИерархию", Ложь);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, "ПодборСвязанногоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветПереадресовавшему(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Переадресовавший) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Переадресован от""'"),,
			"Объект.Переадресовавший");
		Возврат;	
	КонецЕсли;		
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтветПереадресовавшемуПродолжение",
		ЭтотОбъект);

	Если Объект.Ссылка.Пустая() Тогда 		
		ТекстВопроса = НСтр("ru = 'Для отправки ответа переадресовавшему документ требуется записать. Выполнить запись?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветПереадресовавшемуПродолжение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УстановитьСвязь", Истина);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТипСвязи", ПредопределенноеЗначение("Справочник.ТипыСвязей.ОтветПереадресовавшему"));
	ПараметрыФормы.Вставить("Получатель", Объект.Переадресовавший);
	ПараметрыФормы.Вставить("Адресат", Объект.КонтактноеЛицоПереадресовавшего);
	
	ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Переадресовать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПереадресоватьПродолжение",
		ЭтотОбъект);

	Если Объект.Ссылка.Пустая() Тогда 		
		ТекстВопроса = НСтр("ru = 'Для переадресации документ требуется записать. Выполнить запись?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереадресоватьПродолжение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УстановитьСвязь", Истина);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТипСвязи", ПредопределенноеЗначение("Справочник.ТипыСвязей.ПереадресованДокументом"));
	
	ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьШтрихкод(Команда)
	
	ШтрихкодированиеКлиент.ВставитьШтрихкод(ЭтаФорма);

КонецПроцедуры   

&НаКлиенте
Процедура ВставитьРегистрационныйШтамп(Команда)

	ШтрихкодированиеКлиент.ВставитьРегистрационныйШтамп(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ЗарегистрироватьДокумент();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;
	
КонецПроцедуры

&НаКлиенте
Функция ЗарегистрироватьДокумент()	
	
	ЧисловойНомер = 0;
	ДатаРегистрации = Дата(1,1,1);
	РегистрационныйНомер = "";
	
	Попытка
		ПараметрыЗаписи = Новый Структура();
		ПараметрыЗаписи.Вставить("Регистрация", Истина);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат Ложь;
		КонецЕсли;	
	Исключение
		Если ЗначениеЗаполнено(ЧисловойНомер) Тогда
			КомпенсацияРегистрации();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции	

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Документ еще не записан и не имеет связей.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязь(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ОткрытьФайл(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОбновить(Команда)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОткрытьДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейСохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыбраннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор);
		
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейНапечататьФайлы(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыделеннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				МассивФайлов.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
			
		ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
			МассивФайлов, 
			ЭтаФорма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Файлы

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе			
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ВыделенныйМассивЗанятыхФайлов();

	Если МассивФайлов.Количество() = 1 Тогда
	
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
			ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	ИначеЕсли МассивФайлов.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивФайлов",                     МассивФайлов);
		ПараметрыФормы.Вставить("ВозможностьСоздаватьВерсииФайлов", Истина);
		ПараметрыФормы.Вставить("Редактирует",                      ТекущиеДанные.Редактирует);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаЗавершениеРедактирования", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ВыделенныйМассивНезанятыхФайлов();

	Если МассивФайлов.Количество() = 1 Тогда
	
		РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
		ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
		
	ИначеЕсли МассивФайлов.Количество() > 1 Тогда
		
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект, МассивФайлов);
		РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, МассивФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
 	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ВыделенныйМассивЗанятыхФайлов();

	Если МассивФайлов.Количество() = 1 Тогда
	
		ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
			ТекущиеДанные.Ссылка);
		ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
		ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
		ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
		РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
	ИначеЕсли МассивФайлов.Количество() > 1 Тогда
		
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект, МассивФайлов);
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(Обработчик, МассивФайлов);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;

	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект.Ссылка, УникальныйИдентификатор, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайловПослеОперации", ЭтотОбъект);
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ЗаполнитьСписокФайлов();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	Иначе	
		Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеСвязи(Команда)
	
	ПоказыватьУдаленныеСвязи = Не ПоказыватьУдаленныеСвязи;
	Элементы.ДеревоСвязейПоказыватьУдаленныеСвязи.Пометка = ПоказыватьУдаленныеСвязи;
	ЗаполнитьСвязи();
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСДиска(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущаяТаблица = Элементы.Файлы;
	Иначе	
		ТекущаяТаблица = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	ФайлыПередНачаломДобавленияКлиент(ТекущаяТаблица, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСканКопияОригиналаУВсехФайлов(Команда)
	
	Если Элементы.Оригинал.ТолькоПросмотр
		Или (ТипЗнч(ДоступныеПоля) = Тип("Структура")
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал")) Тогда 
		Возврат;
		
	Иначе
		ЕстьПометкиОригинала = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Оригинал Тогда 
				Строка.Оригинал = Ложь;
				ЕстьПометкиОригинала = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер)
			И Не ПолучитьВидимостьДекорацииОтсутствуетОригинал() Тогда 
			УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
		КонецЕсли;
		
		Если ЕстьПометкиОригинала Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Рабочая группа

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуДокументаПродолжение",
		ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуДокументаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с резолюциями

&НаКлиенте
Процедура ДобавитьРезолюцию(Команда)
	
	РаботаСРезолюциямиКлиент.ДобавитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезолюцию(Команда)
	
	РаботаСРезолюциямиКлиент.ИзменитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРезолюцию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалениеРезолюцииПродолжение",
		ЭтотОбъект);
	РаботаСРезолюциямиКлиент.УдалитьРезолюцию(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеРезолюцииПродолжение(Результат, Параметры) Экспорт
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРезолюций(Команда)
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеРезолюции(Команда)

	ПоказыватьУдаленныеРезолюции = Не ПоказыватьУдаленныеРезолюции;
	Элементы.КПРезолюцийПоказыватьУдаленные.Пометка = ПоказыватьУдаленныеРезолюции;
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцияHTMLПредставлениеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с электронной подписью

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "ЭлектронныеПодписи";
	ПараметрыПроверки.ВыделенныеСтроки = Элементы.ЭлектронныеПодписи.ВыделенныеСтроки;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "ЭлектронныеПодписи";
	ПараметрыПроверки.ВыделенныеСтроки = Неопределено;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Успех")
		Или Результат.Успех <> Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокПодписей(Неопределено);
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
	ПроверенныеПодписи = Новый Массив;
	Для Каждого Элемент Из Результат.ПроверенныеПодписи Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ПроверенныеПодписи.Добавить(ИдентификаторПодписи);
		
	КонецЦикла;
	
	РаботаСЭПКлиент.ОбработатьПроверкуПодписей(
		ЭлектронныеПодписи,
		ПроверенныеПодписи,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект.Пустая()) Тогда
		
		АдресПодписи = Элементы.ЭлектронныеПодписи.ТекущиеДанные.АдресПодписи;
		
		РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
		Если РасширениеПодключено Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиент.ПерсональныеНастройки().РасширениеДляФайловПодписи;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеДляФайловПодписи);
			
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				
				ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
				
				Файл = Новый Файл(ПолныйПутьПодписи);
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					ПутьКФайлу, ОбщегоНазначенияКлиент.ТипПлатформыКлиента());
				
				// Сохраним Файл из БД на диск
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
					
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подпись сохранена в файл ""%1""'"),
					ДиалогОткрытияФайла.ПолноеИмяФайла);
				Состояние(Текст);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ТекущиеДанные.Ссылка);
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ТекущиеДанные.Ссылка);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", ДанныеФайла.Владелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ВладелецФайла);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	
	
	ЗаполнитьСписокПодписей(); // т.к. параметр Зашифрован в таблице подписей изменился
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСписокПодписей()
	
	Коллекция = ЭлектронныеПодписи.ПолучитьЭлементы();
	Для Каждого Строка Из Коллекция Цикл
		Элементы.ЭлектронныеПодписи.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	РазвернутьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьДействиеПодписей(Команда)
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ОбработатьПродлениеПодписей", ЭтотОбъект);
	
	РаботаСЭПКлиент.ПродлитьДействиеПодписей(ЭтотОбъект, ТекущиеДанные.Объект,
		ТекущиеДанные.УникальныйИдентификатор, ОбработчикПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПродлениеПодписей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Успех <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокПодписей(Неопределено);
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с категориями документа

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
		
		Если СписокКатегорийДанных.Количество() = 0 Тогда 
			СтатусКатегории = 0;
			Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорий()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	КонецЕсли;

	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	ОткрытьКарточкуФайлаРеализация(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайлаРеализация(ФайлСсылка)
	
	УстановитьТолькоПросмотр = Ложь;

	Если Элементы.Файлы.ИзменятьСоставСтрок = Ложь Тогда
		УстановитьТолькоПросмотр = Истина;
	КонецЕсли; 

	ПараметрыОткрытия = Новый Структура("Ключ, УстановитьТолькоПросмотр", 
		ФайлСсылка, УстановитьТолькоПросмотр); 
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с мобильным сканером

&НаКлиенте
Процедура ДобавитьСканСМобильного(Команда)
	
	ДобавитьСканСМобильногоВручную();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтветноеУведомлениеМЭДО(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МЭДОКлиент.СоздатьОтветноеУведомление(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюСообщенийМЭДО(Команда)
	
	ОбновитьИсториюСообщенийМЭДОСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭсдМэдоНаДиск(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог для сохранения файла'");
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	ИмяФайла = ?(ЗначениеЗаполнено(ИмяАрхиваЭсдМЭДО), ИмяАрхиваЭсдМЭДО, НСтр("ru = 'имя-файла-по-умолчанию.zip'"));
	
	Файл = Новый Файл(Диалог.Каталог);
	Если Не Файл.Существует() Тогда
		ПоказатьПредупреждение( , 
			СтрШаблон(НСтр("ru = 'Каталог %1 не существует или не доступен!'"), Диалог.Каталог));
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Диалог.Каталог) + ИмяФайла;
	Файл = Новый Файл(ПолноеИмяФайла);
	ДопПараметры = Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаписатьФайлЭсдНаДиск", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение , НСтр("ru = 'Файл существует, перезаписать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаписатьФайлЭсдНаДиск(КодВозвратаДиалога.Да, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированныйУчетОбращенийОбработчикиКомандФормы

&НаКлиенте
Процедура НесколькоВопросов(Команда)
	
	НесколькоВопросов = Истина;
	УстановитьВидимостьКодов();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВопросы;
	
	Элементы.Вопросы.ДобавитьСтроку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиСтрокуСостояний()
	
	ОбзорДокумента.ВывестиКартинкуФорума(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаНезаписанныхДанных(НазваниеКоманды)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Данные еще не записаны.
             |Выполнение действия ""%1"" возможно только после записи данных.
             |Данные будут записаны.'"),
		НазваниеКоманды);
	
КонецФункции

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Функция ВыделенныйМассивНезанятыхФайлов()
	
	МассивФайлов = Новый Массив;
	
	ТекСписок = Неопределено;
	Если Элементы.Обзор.Видимость Тогда
		ТекСписок = Элементы.Файлы;
	Иначе	
		ТекСписок = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ТекСписок.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТекСписок.ДанныеСтроки(ЭлементСписка);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Редактирует) Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

&НаКлиенте
Функция ВыделенныйМассивЗанятыхФайлов()
	
	МассивФайлов = Новый Массив;
	
	ТекСписок = Неопределено;
	Если Элементы.Обзор.Видимость Тогда
		ТекСписок = Элементы.Файлы;
	Иначе	
		ТекСписок = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ТекСписок.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТекСписок.ДанныеСтроки(ЭлементСписка);
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Редактирует) Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Заполняет список файлов в карточке документа
//
//	Параметры
//		ЗаполнитьПризнакОригинал - Булево - если Истина, то будет заполнен признак оригинала
//
&НаСервере
Процедура ЗаполнитьСписокФайлов(ЗаполнитьПризнакОригинал = Ложь)
	
	ОтметитьЗахваченныеФайлы = Истина;
	Делопроизводство.ЗаполнитьСписокФайловДокумента(ЭтаФорма, ЗаполнитьПризнакОригинал,,
		ОтметитьЗахваченныеФайлы);
	
КонецПроцедуры	

// Обновляет одну или несколько колонок в списке файлов
//
//	Параметры
//		Колонки - Строка - список колонок, которые нужно обновить
//
&НаСервере
Процедура ОбновитьКолонкиСпискаФайлов(Колонки)
	
	МассивФайлов = Файлы.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТаблицаФайлов = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов);
	Для Каждого Строка Из Файлы Цикл
		НайденнаяСтрока = ТаблицаФайлов.Найти(Строка.Ссылка, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, Колонки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления,
	КоличествоЗанятыхФайлов = Неопределено)
	
	ОтметитьЗахваченныеФайлы = Истина;
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, 
		ЗначениеПометкиУдаления,, ОтметитьЗахваченныеФайлы, КоличествоЗанятыхФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Обзор.Видимость Тогда
		Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	Иначе	
		Элементы.ФайлыСоздание.ТекущаяСтрока = СтрокаИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный");
	
	Если СведенияОбОригиналеОбновлены(Файл, ТолькоДобавлениеОригинала, НайденнаяСтрока.Расширение) Тогда
		НайденнаяСтрока.Оригинал = Истина;
	КонецЕсли;
	
	Если НайденнаяСтрока.Оригинал 
		И Не НайденнаяСтрока.ПометкаУдаления
		И ОбязателенФайлОригинала 
		И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
		УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СведенияОбОригиналеОбновлены(Файл, ТолькоДобавлениеОригинала, Расширение)
	
	Если Не (ТолькоДобавлениеОригинала 
		Или (ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение)
			И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл))) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, Объект.Ссылка);
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	ПолучитьОбзорДокумента();
	
	Возврат Истина;
	
КонецФункции

// Обновляет данные одного файла в списке файлов документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл, ЗаполнитьПризнакОригинал = Ложь)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НайтиИсходящийДокументОтправителя(ВОтветНаСтрока, Отправитель)
	
	ДанныеВыбора = Новый СписокЗначений;

	Если Лев(ВОтветНаСтрока, 1) = "№" Тогда
		ВОтветНаСтрока = СокрЛП(Прав(ВОтветНаСтрока, СтрДлина(ВОтветНаСтрока)-1));
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(ВОтветНаСтрока)Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
		
	// Заполнение "в ответ на". Поиск по номеру или наименованию
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
	|	ИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	(ИсходящиеДокументы.РегистрационныйНомер ПОДОБНО &СтрокаПоиска
	|			ИЛИ ИсходящиеДокументы.Заголовок ПОДОБНО &СтрокаПоиска)
	|	И (НЕ &ОтборПоКонтрагенту 
	|			ИЛИ ИсходящиеДокументы.Получатели.Получатель = &Получатель)
	|	И ИсходящиеДокументы.Получатели.Отправлен";
	
	Запрос.Параметры.Вставить("СтрокаПоиска", ВОтветНаСтрока + "%");
	Запрос.УстановитьПараметр("ОтборПоКонтрагенту", ЗначениеЗаполнено(Отправитель));
	Запрос.Параметры.Вставить("Получатель", Отправитель);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВОтветНа(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеДокументы.Заголовок,
		|	ИсходящиеДокументы.ДатаРегистрации,
		|	ИсходящиеДокументы.РегистрационныйНомер,
		|	ИсходящиеДокументы.Проект,
		|	ИсходящиеДокументы.ВопросДеятельности,
		|	ИсходящиеДокументы.Получатели.(
		|		Получатель,
		|		Адресат
		|	) КАК Получатели
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.Ссылка = &Документ";
		
	Запрос.Параметры.Вставить("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Если Выборка.Следующий() Тогда 
		Результат.Вставить("Заголовок", Выборка.Заголовок);
		Результат.Вставить("ДатаРегистрации", Выборка.ДатаРегистрации);
		Результат.Вставить("РегистрационныйНомер", Выборка.РегистрационныйНомер);
		Результат.Вставить("Проект", Выборка.Проект);
		Результат.Вставить("ВопросДеятельности", Выборка.ВопросДеятельности);
		
		Получатели = Выборка.Получатели.Выгрузить();
		Для Каждого Получатель Из Получатели Цикл 
			Результат.Вставить("Получатель", Получатель.Получатель);
			Результат.Вставить("Адресат", Получатель.Адресат);
			Прервать;
		КонецЦикла;
	Иначе 
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
			"РегистрационныйНомер, ДатаРегистрации, Заголовок, ВопросДеятельности, Проект");
		Результат.Вставить("Получатель", Неопределено);
		Результат.Вставить("Адресат", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьСостояние(Документ, МассивСостояний) 
	
	Для Каждого СтруктураСостояния Из МассивСостояний Цикл
		
		Если СтруктураСостояния.Состояние = СтруктураСостояния.НачальноеСостояние Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(Документ, СтруктураСостояния.Период, СтруктураСостояния.Состояние, СтруктураСостояния.Установил);
		Иначе
			Делопроизводство.ОчиститьСостояниеДокумента(Документ, СтруктураСостояния.НачальноеСостояние);
		КонецЕсли;	
			
	КонецЦикла;	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ);
	
	// установка доступности
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Документ, ДоступныеПоля, НедоступныеПоля);
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоЗапрету();
	УстановитьДоступностьПоОтчетностиВКО();
	
	Если НаименованиеСозданоПоШаблону Тогда 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Заголовок.Подсказка = НСтр("ru = 'Наименование документа сформировано автоматически по шаблону, редактирование запрещено.'");
		Элементы.Заголовок.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	ПолучитьИнструкции();
	ПолучитьОбзорДокумента();
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьОбзорДокумента()
	
	Если Не ИспользоватьОбзорДокументов Тогда 
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорВходящегоДокумента(ЭтаФорма);
		
КонецПроцедуры 	

&НаСервереБезКонтекста
Функция ПолучитьВидыДокументаОбращенияОтГраждан()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыВходящихДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
	|ГДЕ
	|	НЕ ВидыВходящихДокументов.ЭтоГруппа
	|	И ВидыВходящихДокументов.ЯвляетсяОбращениемОтГраждан = ИСТИНА
	|	И ВидыВходящихДокументов.ЗапретитьСозданиеДокументовНеПоШаблону = ЛОЖЬ"; 
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.ЗагрузитьЗначения( Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка") );
	
	Возврат СписокВидов;
	
КонецФункции	

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) Тогда
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
			ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
			Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
		КонецЕсли;
		
		ОповеститьОЗаписиНового(КлючЗаписи);
		
		Оповестить("ДокументСоздан", Объект.Ссылка, ЭтаФорма);
		НовыйДокумент = Ложь;
	Иначе	
		ОповеститьОбИзменении(КлючЗаписи);
		Оповестить("ДокументИзмененДляСписков", КлючЗаписи, ЭтаФорма);
	КонецЕсли;
	
	Оповестить("ДокументИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(ВОтветНа) Тогда 
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Документ", ВОтветНа);
		ПараметрОповещения.Вставить("СвязанныйДокумент", Объект.Ссылка);
		
		Оповестить("ПолученВОтветНаУстановлен", ПараметрОповещения, ЭтаФорма);
	КонецЕсли;	
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;	
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);			
			
			ФайлыДобавленные.Удалить(Индекс);			
			Индекс = Индекс - 1;

		КонецЦикла;
	КонецЕсли;
	
	УстановитьДоступностьСканирования();
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	//Регистрация 
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		Отказ = Ложь;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Документ зарегистрирован:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаРегистрация, 
			Объект.Ссылка, 
			"Регистрация", 
			ЭтаФорма, 
			Отказ, 
			Ложь);	
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокИсполнения(ТекущийОбъект)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСрокИсполненияВоВходящих", 
		Новый Структура("ВидВходящегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда 
		СрокИсполненияДней = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "СрокИсполнения");
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.СрокИсполнения) И ЗначениеЗаполнено(СрокИсполненияДней)
			И ЗначениеЗаполнено(ТекущийОбъект.ДатаСоздания) Тогда 
			ТекущийОбъект.СрокИсполнения = ТекущийОбъект.ДатаСоздания + 24 * 3600 * СрокИсполненияДней;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаДокумента()
	
	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения, Ложь) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента");
		
		Объект.ВидДокумента = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	УстановитьСрокИсполнения(Объект);
	
	// реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВходящегоДокумента", Объект.ВидДокумента));
	
	УчитыватьКакОбращениеГраждан = ПолучитьФункциональнуюОпцию(
		"УчитыватьКакОбращениеГраждан", 
		Новый Структура("ВидВходящегоДокумента", 
		Объект.ВидДокумента));
	УстановитьУчетОбращенийГраждан();	
	
	РеквизитыВидДокумента = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Объект.ВидДокумента, 
		"ВестиУчетПоНоменклатуреДел, НеобходимаПечатьШтрихкода, ИспользоватьЭтапыОбработкиДокумента,
		|ОбязательноУказаниеПроекта, УчитыватьМестоХранения, УчитыватьОтветственногоЗаХранение");
	НеобходимоНапечататьШтрихкодПриСоздании = РеквизитыВидДокумента.НеобходимаПечатьШтрихкода;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта)
		И ЗначениеЗаполнено(Объект.ВидДокумента) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВходящих", 
		Новый Структура("ВидВходящегоДокумента", Объект.ВидДокумента)) Тогда 
		Объект.Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Элементы.Проект.АвтоОтметкаНезаполненного = РеквизитыВидДокумента.ОбязательноУказаниеПроекта;
		ВестиУчетПоНоменклатуреДел = РеквизитыВидДокумента.ВестиУчетПоНоменклатуреДел;
	КонецЕсли;
	
	// доступность реквизитов регистрации
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Обработчик механизма "Свойства"
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	ПолучитьИнструкции();
	
	// ЭтапыОбработкиДокумента
	ИспользоватьЭтапыОбработкиДокумента = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = РеквизитыВидДокумента.ИспользоватьЭтапыОбработкиДокумента;
	КонецЕсли;
	Элементы.ГруппаЭтапы.Видимость = ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();
	Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
	Делопроизводство.ЗаполнитьСписокВыбораФормыДокумента(ЭтаФорма);
	ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
	
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтаФорма, РеквизитыВидДокумента);
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный()
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.
			ВидДокумента, "ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного Тогда	
			
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина;
			
			// только для нового документа это делаем
			Если Не ЗначениеЗаполнено(Объект.Ответственный) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Ответственный = Пользователи.ТекущийПользователь();
	            Модифицированность = Истина;
			КонецЕсли;	
			
		Иначе
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Ответственный.ОтметкаНезаполненного = Ложь;
		КонецЕсли;			
			
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииДатыРегистрации()
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если Нумерация.ПроверитьСменуПериодаНумерации(Объект.ДатаРегистрации, НачальнаяДатаРегистрации, Нумератор) Тогда 
		
		Если МиграцияДанныхИзВнешнихСистемСервер.РегистрацияВ1СДО30() Тогда
		
			СообщениеОбОшибке = "";
			РегДанные = МиграцияДанныхИзВнешнихСистемСервер.РегистрационныеДанныеИзДО30(
				Объект, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Объект, РегДанные);
		Иначе
			ОсвободитьНомерДокумента(Объект, НачальнаяДатаРегистрации);
			СформироватьЧисловойНомерДокумента(Объект);
			СформироватьСтроковыйНомерДокумента(Объект);
		КонецЕсли;
	Иначе
		СформироватьСтроковыйНомерДокумента(Объект);
	КонецЕсли;
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	Записать();
	
КонецПроцедуры	

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	
	Если Не БыстрыйВыборВидаДокумента Тогда 
		СохраняемыеЭлементы.Вставить("ВидДокумента", Объект.ВидДокумента);
	КонецЕсли;
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПереадресатов() 
	
	Если ЗначениеЗаполнено(ПереадресованДокументом) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		Если ПереадресованДокументом.Получатели.Количество() = 1 Тогда 
			Переадресат = ПереадресованДокументом.Получатели[0].Получатель;
			КонтактноеЛицоПереадресата = ПереадресованДокументом.Получатели[0].Адресат;
		Иначе
			Переадресат = РегистрыСведений.ОбщиеРеквизитыДокументов.ПолучитьОбщийРеквизитДокумента(
				ПереадресованДокументом, "КонтрагентыДляСписков");
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		Элементы.ПереадресованДокументом.Видимость = Истина;
		Элементы.Переадресат.Видимость = Истина;
		Элементы.КонтактноеЛицоПереадресата.Видимость = Истина;
		Элементы.Переадресовать.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУчетОбращенийГраждан()
	
	Если УчитыватьКакОбращениеГраждан Тогда  
		
		Если ЗначениеЗаполнено(Объект.Подписал) Тогда 
			Объект.Подписал = Неопределено;
		КонецЕсли;
		Элементы.Подписал.Видимость = Ложь;
		
		Элементы.ПервичноеОбращение.Доступность = Объект.Повторное;
		Элементы.ПервичноеОбращение.АвтоОтметкаНезаполненного = Объект.Повторное;
		Элементы.ПервичноеОбращение.ОтметкаНезаполненного = Объект.Повторное И Не ЗначениеЗаполнено(ПервичноеОбращение);
		
		Элементы.ОсновноеОбращение.Доступность = Объект.Дубликат;
		Элементы.ОсновноеОбращение.АвтоОтметкаНезаполненного = Объект.Дубликат;
		Элементы.ОсновноеОбращение.ОтметкаНезаполненного = Объект.Дубликат И Не ЗначениеЗаполнено(ОсновноеОбращение);
		
		ВидОбращенияАнонимное = Перечисления.ВидыОбращенийГраждан.Анонимное;
		Если Объект.ВидОбращения = ВидОбращенияАнонимное Тогда 
			Элементы.Отправитель.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Отправитель.ОтметкаНезаполненного = Ложь;
			Элементы.Отправитель.Доступность = Ложь;
		КонецЕсли;	
		
		СписокВыбора = Элементы.Отправитель.СписокВыбора;
		СписокВыбораКоличество = СписокВыбора.Количество();
		
		Для Инд = 1 По СписокВыбораКоличество Цикл  
			Строка = СписокВыбора[СписокВыбораКоличество - Инд];
			Если ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.Контрагенты") 
			   И Строка.Значение.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
				СписокВыбора.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;
		ЗаполнитьВопросыОбращения();
		УстановитьВидимостьКодов();
		
	Иначе
		Элементы.Отправитель.АвтоОтметкаНезаполненного = Истина;
		Элементы.Отправитель.Доступность = Истина;
		Элементы.Подписал.Видимость = Истина;
		Элементы.СтраницаВопросы.Видимость = Ложь;
		
		СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция НеобходимоОтразитьВозвратДокументаКонтрагентом()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ТИПЗНАЧЕНИЯ(ЖурналПередачиДокументов.Пользователь) = ТИП(Справочник.КонтактныеЛица)
	|	И ЖурналПередачиДокументов.Пользователь.Владелец = &Контрагент
	|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Отправитель);
	Запрос.УстановитьПараметр("Документ", ПредметПереписки);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда 
		Возврат Ложь;
	ИначеЕсли Результат.Количество() = 1 Тогда 
		Возврат Истина;
	Иначе	
		
		Если Не ЗначениеЗаполнено(Объект.Подписал) Тогда 
			Возврат Ложь;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	ЖурналПередачиДокументов.Документ = &Документ
		|	И ЖурналПередачиДокументов.Пользователь = &КонтактноеЛицо
		|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	
		Запрос.УстановитьПараметр("КонтактноеЛицо", Объект.Подписал);
		Запрос.УстановитьПараметр("Документ", ПредметПереписки);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда 
			Возврат Ложь;
		ИначеЕсли Результат.Количество() = 1 Тогда 
			Возврат Истина;
		Иначе	
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецФункции	

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРезолюций()
	
	РаботаСРезолюциями.ЗаполнитьСписокРезолюций(ЭтаФорма, Не ПоказыватьУдаленныеРезолюции);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтроля()
	
	ВывестиКартинкуКонтроля();
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтроля()
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с рабочей группой

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//Работа с шаблонами

&НаСервере
Процедура ЗаполнитьШаблоныДляАвтоЗапуска()
	
	ШаблоныДляАвтоЗапускаЗакрытиеКарточки = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВходящегоДокумента, 
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);	
	ШаблоныДляАвтоЗапускаРегистрация = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВходящегоДокумента, 
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуВыполнить(ШаблонДокумента)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(ШаблонДокумента, ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	Элементы.Категории.Заголовок =
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
	ПриИзмененииВидаДокумента();
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма);
	
	Модифицированность = Истина;
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если Элементы.Обзор.Видимость Тогда
		Префикс = "";
	Иначе	
		Префикс = "Создание";
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"+Префикс].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс], Ложь);
	                                 
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюОткрытьИсходныйФайл"+Префикс], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
				
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], НЕ ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], НЕ ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс],  Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс],  Не Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Истина);
				
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		ПрограммаРаспознавания = РаботаСФайламиКлиентПовтИсп.ПрограммаРаспознавания();
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания);
		ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиКлиентПовтИсп.ДоступноРаспознаваниеПоЗапросу();
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс],
			РасширениеПоддерживается И ДоступноРаспознаваниеПоЗапросу И Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс],
			РасширениеПоддерживается И ДоступноРаспознаваниеПоЗапросу И Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);

        УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
				
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Зашифрован);

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер));
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер));

		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс], Не Элементы.Оригинал.ТолькоПросмотр);
		
		РасширениеДляАвтовизуализации = РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(Расширение);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюОткрытьИсходныйФайл"+Префикс], 
			АвтовизуализацияЭП И ПодписанЭП И РасширениеДляАвтовизуализации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСканирования()
	
	ДоступнаКомандаСканировать = Ложь;
	#Если Не ВебКлиент Тогда
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		ДоступнаКомандаСканировать = РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать();
	КонецЕсли;	
	#КонецЕсли
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		УстановитьДоступностьКоманды(Элементы.Сканировать, ДоступнаКомандаСканировать);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСканировать, ДоступнаКомандаСканировать);
	Иначе
		УстановитьДоступностьКоманды(Элементы.СканироватьСоздание, ДоступнаКомандаСканировать);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСканироватьСоздание, ДоступнаКомандаСканировать);
		УстановитьДоступностьКоманды(Элементы.ДобавитьФайлСоСканера, ДоступнаКомандаСканировать);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект)
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияВходящихДокументов") Или РольДоступна("ПолныеПрава");
	Если Не ЭтоДелопроизводитель Тогда 
		Элементы.Зарегистрировать.Видимость = Ложь;
		Элементы.ЗарегистрироватьЕще.Видимость = Ложь;
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
		   И Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
			Элементы.РегистрационныйНомер.Видимость = Ложь;
			Элементы.ДатаРегистрации.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Зарегистрировать.Видимость = Истина;
		Элементы.ЗарегистрироватьЕще.Видимость = Истина;
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	
		Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) 
			И Делопроизводство.ИспользоватьВидыВходящихДокументов() Тогда // не известен вид нумерации
			
			Элементы.РегистрационныйНомер.Доступность = Ложь;
			Элементы.ДатаРегистрации.Доступность = Ложь;
			Элементы.ГруппаРегНомер.Подсказка = 
				НСтр("ru = 'Для регистрации документа используйте кнопку ""Зарегистрировать"" в командной панели.'");
			
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;

		Иначе
			
			Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // документ зарегистрирован
				Элементы.РегистрационныйНомер.Доступность = Истина;
				Элементы.ДатаРегистрации.Доступность = Истина;
				Элементы.Зарегистрировать.Видимость = Ложь;
				Элементы.ЗарегистрироватьЕще.Заголовок = НСтр("ru = 'Перерегистрировать'");
				Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = 
					ОтображениеПредупрежденияПриРедактировании.Отображать;
				Элементы.ГруппаРегНомер.Подсказка = 
					НСтр("ru = 'Для перерегистрации документа используйте команду ""Еще \ Документы \ Перерегистрировать"".'");
				
				Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Истина;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Истина;
				Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;

			Иначе
				Элементы.РегистрационныйНомер.Доступность = Ложь;
				Элементы.ДатаРегистрации.Доступность = Ложь;
				Элементы.ЗарегистрироватьЕще.Заголовок = НСтр("ru = 'Зарегистрировать'");
				Элементы.ГруппаРегНомер.Подсказка = 
					НСтр("ru = 'Для регистрации документа используйте кнопку ""Зарегистрировать"" в командной панели.'");
				
				Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
				Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	Прочитать();
	УстановитьДоступностьПолей();
	ЗаполнитьСписокПодписей();
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	УстановитьДоступностьПоСостоянию();
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоПравам();
	УстановитьДоступностьПоЗапрету();
	УстановитьДоступностьПоОтчетностиВКО();
	
	Если НаименованиеСозданоПоШаблону Тогда 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Заголовок.Подсказка = НСтр("ru = 'Наименование документа сформировано автоматически по шаблону, редактирование запрещено.'");
		Элементы.Заголовок.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейИДоступностьПоСостоянию()
	
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтаФорма);
	УстановитьДоступностьПоСостоянию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭП()
	
	УстановитьТолькоПросмотр = Объект.ПодписанЭП
		Или КопироватьПодписиЭП; // При копировании ЭП тоже нужно защищать поля от изменений
	
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ДоступныПолныеПрава = РольДоступна("ПолныеПрава");
	УстановитьДоступностьПоСостояниюНеРаботает = ДоступныПолныеПрава ИЛИ НЕ ИспользоватьСостоянияДокументов;
	
	// если не ПодписанЭП - делаем доступными ключевые поля - только для роли ПолныеПрава
	// - для неполных прав сработает УстановитьДоступностьПоСостоянию
	Если Объект.ПодписанЭП ИЛИ (НЕ Объект.ПодписанЭП И УстановитьДоступностьПоСостояниюНеРаботает) Тогда
		
		МассивИмен = Справочники.ВходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов();
		
		ПрефиксОбъекта = "Объект.";
		МассивИменСОбъектом = Новый Массив;
		Для Каждого ИмяПоля Из МассивИмен Цикл
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			Если ИмяПоля = "Файлы" Тогда
				МассивИменСОбъектом.Добавить(ИмяПоля);
			Иначе
				МассивИменСОбъектом.Добавить(ИмяСОбъектом);
			КонецЕсли;
		КонецЦикла;	
		
		ЭлементыДляИмен = Новый Массив;
		ЭлементыДляИмен.Добавить(Элементы.Заголовок);
		ЭлементыДляИмен.Добавить(Элементы.Содержание);
		ЭлементыДляИмен.Добавить(Элементы.Организация);
		ЭлементыДляИмен.Добавить(Элементы.Сумма);
		ЭлементыДляИмен.Добавить(Элементы.Валюта);
		ЭлементыДляИмен.Добавить(Элементы.Файлы);
		ЭлементыДляИмен.Добавить(Элементы.ФайлыСоздание);
		
		Для Каждого Элем Из ЭлементыДляИмен Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеФормы") ИЛИ ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
				
				Если МассивИменСОбъектом.Найти(Элем.ПутьКДанным) <> Неопределено Тогда
					Если Элем.ПутьКДанным = "Файлы" Тогда 
						Элем.ИзменятьСоставСтрок = Не УстановитьТолькоПросмотр;
					Иначе
						Элем.ТолькоПросмотр = УстановитьТолькоПросмотр;
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;	
		
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Объект.Ссылка, ДоступныеПоля, НедоступныеПоля);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Если Не ПраваПоОбъекту.Изменение Тогда
			ТолькоПросмотр = Истина;
			Элементы.ДобавитьПервуюРезолюцию.Доступность = Ложь;
			Элементы.КПРезолюцийДобавить.Доступность = Ложь;
			Элементы.КПРезолюцийОткрыть.Доступность = Ложь;
			Элементы.КПРезолюцийУдалить.Доступность = Ложь;
			Элементы.Зарегистрировать.Доступность = Ложь;
			Элементы.Оригинал.ТолькоПросмотр = Истина;
			Элементы.ОригиналСоздание.ТолькоПросмотр = Истина;
			
			Элементы.ФормаЗакрыть.Видимость = Истина;
			Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаКомандаЗаписатьИЗакрыть.Видимость = Ложь;
			Элементы.ФормаЗаписать.Видимость = Ложь;
			Элементы.ЗаписатьИЗакрытьЕще.Видимость = Ложь;
			Элементы.ЗаписатьЕще.Видимость = Ложь;
			
			Элементы.СписокКатегорийДанныхКонтекстноеМенюОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			
			// Если доступа к документу нет, то состояние можно только "смотреть"
			ЗапретитьРучноеИзменениеСостоянияДокументов = Истина;
			Элементы.ДобавитьФайлСДиска.Доступность = Ложь;
			
		ИначеЕсли Не ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Объект.Ссылка) Тогда
			Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;
			Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Ставит доступность полям, уже заполненным в шаблоне.
&НаСервере
Процедура УстановитьДоступностьПоЗапрету()
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) Или РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	Шаблон = Объект.Шаблон;
	
	ЗапретитьИзменятьРеквизитыИзШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.Шаблон, "ЗапретитьИзменятьРеквизитыИзШаблона");
		
	Если ЗапретитьИзменятьРеквизитыИзШаблона = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = Справочники.ВходящиеДокументы.ИменаРеквизитовИзШаблона();
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Шаблон, ИменаРеквизитов);
		
	Для Каждого Пара Из РеквизитыШаблона Цикл
			
		ИмяРеквизита = Пара.Ключ;
		
		Если ЗначениеЗаполнено(РеквизитыШаблона[ИмяРеквизита]) Тогда
			НайденныйЭлемент = Элементы.Найти(ИмяРеквизита);
			Если НайденныйЭлемент <> Неопределено Тогда
				НайденныйЭлемент.ТолькоПросмотр = Истина;
				
				Если ИмяРеквизита = "Подразделение" Тогда 
					НельзяМенятьПодразделение = Истина; 
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Отправитель) Тогда
		Элементы.Отправитель.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры		

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлДокумента(Файл, ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходныйФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	РаботаСФайламиКлиент.ОткрытьИсходныйФайлДокумента(ТекущиеДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект)
	
	ОбязателенФайлОригинала = ВестиУчетСканКопийОригиналовДокументов 
		И ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "ОбязателенФайлОригинала");
		
	Если ОбязателенФайлОригинала И ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда 
		
		НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("Оригинал, ПометкаУдаления", Истина, Ложь));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Истина);
		Иначе
			УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Ложь);
		КонецЕсли;	
		
	Иначе	
		УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Ложь);
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьДекорацииОтсутствуетОригинал(Видимость)
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
		
	Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость <> Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВидимостьДекорацииОтсутствуетОригинал()
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
	
	Возврат ЭлементГруппаНадписьОтсутствуетОригинал.Видимость;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Видимость)
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
	
	ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаСервере 
Процедура ПрочитатьСвязи(ТипыСвязей = Неопределено)
	
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ПолученВОтветНа) <> Неопределено Тогда 
		ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.ПолученВОтветНа);
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			РеквизитыВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВОтветНа,
				"РегистрационныйНомер, ДатаРегистрации, Заголовок");
			
			Если ЗначениеЗаполнено(РеквизитыВОтветНа.РегистрационныйНомер) 
				И ЗначениеЗаполнено(РеквизитыВОтветНа.ДатаРегистрации) Тогда
				ВОтветНаСтрока = СтрШаблон(НСтр("ru = '№ %1 от %2'"), 
					РеквизитыВОтветНа.РегистрационныйНомер, Формат(РеквизитыВОтветНа.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				ВОтветНаСтрока = РеквизитыВОтветНа.Заголовок;
			КонецЕсли;
		КонецЕсли;

		НачальноеВОтветНа = ВОтветНа;
	КонецЕсли;	
		
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ПредметПереписки) <> Неопределено Тогда 
		ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.ПредметПереписки);
		НачальныйПредметПереписки = ПредметПереписки;
		Элементы.ПредметПереписки.Видимость = ЗначениеЗаполнено(ПредметПереписки);
	КонецЕсли;	
		
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ОтветПереадресовавшему) <> Неопределено Тогда 
		ОтветПереадресовавшему = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.ОтветПереадресовавшему);
	КонецЕсли;
	
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ПереадресованДокументом) <> Неопределено Тогда 
		ПереадресованДокументом = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.ПереадресованДокументом);
	КонецЕсли;	
		
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ПервичноеОбращение) <> Неопределено Тогда 
		ПервичноеОбращение = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.ПервичноеОбращение);
		НачальноеПервичноеОбращение = ПервичноеОбращение;
	КонецЕсли;	
		
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ОсновноеОбращение) <> Неопределено Тогда 
		ОсновноеОбращение = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.ОсновноеОбращение);
		НачальноеОсновноеОбращение = ОсновноеОбращение;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьКлюч(ПараметрыКлюча)
	
	КлючЗаписи = РегистрыСведений.СвязиДокументов.СоздатьКлючЗаписи(ПараметрыКлюча);
	Возврат КлючЗаписи;
	
КонецФункции	

&НаСервере
Процедура УдалитьСвязь(Параметры)
	
	Если ЗначениеЗаполнено(Параметры.СвязанныйДокумент) Тогда 
		СвязанныйДокумент = Параметры.СвязанныйДокумент;
	ИначеЕсли ЗначениеЗаполнено(Параметры.СвязаннаяСтрока) Тогда 
		СвязанныйДокумент = Параметры.СвязаннаяСтрока;
	КонецЕсли;
	
	СвязиДокументов.УдалитьСвязь(Параметры.Документ, СвязанныйДокумент, Параметры.ТипСвязи);
	ЗаполнитьСвязи();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязи()
	
	Делопроизводство.ЗаполнитьДеревоСвязейДокумента(ЭтаФорма);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры механизма свойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронной подписью

&НаСервере
Процедура ОбновитьКартинкуЭП()
	
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументЗавершениеВызовСервера()
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	РаботаСЭП.ЗаполнитьСписокПодписей(Объект.Ссылка, ЭлектронныеПодписи, 
		УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП,ПодписанЭП");
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПодписиПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	УдалитьПодписиИОбновитьСписок(Ложь);
		
	ОповеститьОбИзменении(КлючЗаписи);
		
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);

КонецПроцедуры	

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	РаботаСЭП.УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, 
		Элементы.ЭлектронныеПодписи.ВыделенныеСтроки,
		Объект.Ссылка, ЭлектронныеПодписи, УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	УстановитьСтатусПроверкиДокумента(Объект.Ссылка);
	
	Если РеквизитПодписанИзменен Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаПодписей(ТекущиеДанные)
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ЭлектронныеПодписи.ПолучитьЭлементы().Количество() <> 0);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая());
	КонецЕсли;
		
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПроверкиДокумента(Документ)
	
	ПодписываемыеЭлементы = ЭлектронныеПодписи.ПолучитьЭлементы();
	СообщениеОтправителюОтправлено = Ложь;
	Для Каждого ПодписываемыйЭлемент Из ПодписываемыеЭлементы Цикл
		Подписи = ПодписываемыйЭлемент.ПолучитьЭлементы();
		Для Каждого ОднаПодпись Из Подписи Цикл
			Если Не ОднаПодпись.ПодписьВерна Тогда
				Если Не СообщениеОтправителюОтправлено Тогда
					РаботаССВД.ОбработатьОшибкуПроверкиЭПДокумента(Объект.Ссылка, Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
					СообщениеОтправителюОтправлено = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
//////////////////////////////////////////////////////////////////////////////// 
// Регистрация документа

&НаСервере
Функция ПроверитьВозможностьРегистрации(ТекущийОбъект)
	
	Результат = Истина;
	
	Если Не ПроверитьЗаполнение() Тогда 
		Результат = Ложь;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ТекущийОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.РегистрационныйНомерУникален(ОбъектСтруктура) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Указанный регистрационный номер не уникален!'"));
				Результат = Ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВходящих", Новый Структура("ВидВходящегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда 
		Если Не ЗначениеЗаполнено(ТекущийОбъект.НоменклатураДел) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"),,"Объект.НоменклатураДел");
			Результат = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ТекущийОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"),,,"Файлы");
		Результат = Ложь;
	КонецЕсли;
	
	Делопроизводство.ПроверитьЗаполнениеРеквизитовХраненияВФорме(ЭтотОбъект, Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНаСервере(ТекущийОбъект, ОтразитьВозвратВЖурнале, РегистрационныйНомер = "")
	
	// Проверяем права доступа
	Если Не ДокументооборотПраваДоступа.ЕстьПравоРегистрации(ТекущийОбъект) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Вашего уровня доступа недостаточно для регистрации этого входящего документа.
                                  |Обратитесь к администратору.'");
		
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;
	
	Если РегистрационныйНомер = "" Тогда // сформировать автоматически
		Если МиграцияДанныхИзВнешнихСистемСервер.РегистрацияВ1СДО30() Тогда
		
			СообщениеОбОшибке = "";
			РегДанные = МиграцияДанныхИзВнешнихСистемСервер.РегистрационныеДанныеИзДО30(
				ТекущийОбъект, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекущийОбъект, РегДанные);
			НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;		
		
		Иначе
			ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
			НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
			
			// сформируем текущий номер
			СформироватьЧисловойНомерДокумента(ТекущийОбъект);
			СформироватьСтроковыйНомерДокумента(ТекущийОбъект);
		КонецЕсли;	
	Иначе
		ТекущийОбъект.РегистрационныйНомер = РегистрационныйНомер;
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // успешно сформирован номер
		ТекущийОбъект.Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
		Состояние = Перечисления.СостоянияДокументов.Зарегистрирован;
	Иначе	
		ТекущийОбъект.ДатаРегистрации = '00010101';
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	КонецЕсли;	
		
	УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект);
	
	РегистрационныйНомер = ТекущийОбъект.РегистрационныйНомер;
	ЧисловойНомер = ТекущийОбъект.ЧисловойНомер;
	ДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	
	ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект);
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемыДокументооборота.МЭДО") Тогда
		МодульМЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСМЭДО");
		МодульМЭДО.УстановитьСостояниеДокументЗарегистрирован(ТекущийОбъект);
		КэшВидаДокумента = Новый Структура();
		КэшВидаДокумента.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
		КэшВидаДокумента.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
		МодульМЭДО.ПриРегистрацииДокумента(ТекущийОбъект, КэшВидаДокумента);
	КонецЕсли;
	
	
	ПротоколированиеРаботыПользователей.ЗаписатьРегистрациюДокумента(Объект.Ссылка, РегистрационныйНомер);
	
КонецПроцедуры

&НаСервере
Процедура КомпенсацияРегистрации()
	
	ОсвободитьНомерДокумента(Объект, ДатаРегистрации, ЧисловойНомер);
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
КонецПроцедуры

&НаКлиенте
Функция ДокументЗарегистрирован()
	
	Возврат ЗначениеЗаполнено(Объект.РегистрационныйНомер);
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура ОсвободитьНомерДокумента(ТекущийОбъект, ДатаРегистрации = Неопределено, ЧисловойНомер = Неопределено)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		СтруктураПараметров.Вставить("ДатаРегистрации", ДатаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧисловойНомер) Тогда 
		СтруктураПараметров.Вставить("ЧисловойНомер", ЧисловойНомер);
	КонецЕсли;
	
	Нумерация.ОсвободитьНомер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЧисловойНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПолученВОтветНа", 	ВОтветНа);
	СтруктураПараметров.Вставить("ПредметПереписки",	ПредметПереписки);
	СтруктураПараметров.Вставить("ПервичноеОбращение",	ПервичноеОбращение);
	СтруктураПараметров.Вставить("ОсновноеОбращение",	ОсновноеОбращение);
	СтруктураПараметров.Вставить("СвязанныйДокумент", 	СвязанныйДокументДляНумерации);
	
	Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ТекущийОбъект.ЧисловойНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроковыйНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПолученВОтветНа", 	ВОтветНа);
	СтруктураПараметров.Вставить("ПредметПереписки",	ПредметПереписки);
	СтруктураПараметров.Вставить("ПервичноеОбращение",	ПервичноеОбращение);
	СтруктураПараметров.Вставить("ОсновноеОбращение",	ОсновноеОбращение);
	СтруктураПараметров.Вставить("СвязанныйДокумент", 	СвязанныйДокументДляНумерации);
	
	ОписанияОшибок = Новый СписокЗначений;
	Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, ТекущийОбъект.РегистрационныйНомер, ОписанияОшибок);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.Представление,,
			ОписаниеОшибки.Значение,
			"Объект");
	КонецЦикла;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с инструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 100);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
    ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
    ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
    ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт    
    ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	ВидКонтрагентаСПАРК = ОбщегоНазначенияДокументооборотКлиентСервер.ВидКонтрагентаСПАРК(Объект.Отправитель);
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Отправитель, // Искать по ссылке
		ВидКонтрагентаСПАРК,
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтрока2КартинкаКрНажатие(Элемент)
	
	ЗначенияИндексовКонтрагента();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияИндексовКонтрагента()
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтрока2КартинкаЗелНажатие(Элемент)
	
	ЗначенияИндексовКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтрока2КартинкаОранжНажатие(Элемент)
	
	ЗначенияИндексовКонтрагента();
	
КонецПроцедуры


// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

&НаКлиенте
Функция ПолучитьЗахваченныеФайлы()
	
	МассивЗахваченныхФайлов = Новый Массив;
	
	ДелопроизводствоКлиент.ДобавитьЗанятыеФайлыСамойКарточки(ЭтаФорма, МассивЗахваченныхФайлов);
	
	Возврат МассивЗахваченныхФайлов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Копирование файлов

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Файлы.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначенияДокументооборот.СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(
		Файлы, Элементы.Файлы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(МассивФайлов, Объект.Ссылка);
	
	ЗаполнитьСписокФайлов();
	Модифицированность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с мобильным сканером

&НаКлиенте
Процедура ДобавитьСканСМобильногоАвтоматически()

	//Если форма активна и блокировка регистра МП_Сканы уже стоит и есть скан
	Если ВводДоступен() И МобильныйСканерЗанят И МП_МобильныйСканерВызовСервера.СканЗагружен() Тогда
		
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
			
			МП_МобильныйСканерВызовСервера.УдалитьСкан();
			
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
				СостояниеТекст);
			ПоказатьПредупреждение(, Текст);
			
			Возврат;
		КонецЕсли;
		
		//Пытаемся записать документ
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ДокументЗаписан = Ложь;
			Попытка
				ДокументЗаписан = Записать();
			Исключение
				МП_МобильныйСканерВызовСервера.УдалитьСкан();
				ВызватьИсключение;
			КонецПопытки;
			
			Если Не ДокументЗаписан Тогда
				МП_МобильныйСканерВызовСервера.УдалитьСкан();
				Текст = НСтр("ru = 'При добавлении файла не удалось записать документ.'");
				ПоказатьПредупреждение(, Текст);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		МП_МобильныйСканерКлиент.ОбработатьСкан(Объект.Ссылка);
		
	КонецЕсли;
	
	//Если форм активна, пытаемся устанавливить блокировку
	Если ВводДоступен() И Не МобильныйСканерЗанят 
		И МП_МобильныйСканерВызовСервера.ЗанятьСканер(УникальныйИдентификатор)Тогда
		
		МобильныйСканерЗанят = Истина;
	КонецЕсли;
	
	//Если форма уже не активна, то блокировку нужно снять
	Если Не ВводДоступен() И МобильныйСканерЗанят Тогда
		МП_МобильныйСканерВызовСервера.ОсвободитьСканер(УникальныйИдентификатор);
		МобильныйСканерЗанят = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСканСМобильногоВручную()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущийЭлемент = Элементы.Файлы;
	Иначе	
		ТекущийЭлемент = Элементы.ФайлыСоздание;
	КонецЕсли;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
			СостояниеТекст);
		ПоказатьПредупреждение(, Текст);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
				
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Если Не МобильныйСканерЗанят 
			И Не МП_МобильныйСканерВызовСервера.ЗанятьСканер(УникальныйИдентификатор) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сканирование выполняется в другой карточке документа'"));
		Возврат;
	КонецЕсли;
	
	МобильныйСканерЗанят = Истина;
	ОтключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически");
	Описание = Новый ОписаниеОповещения("ПродолжитьРаботуСканера", ЭтаФорма);
	МП_МобильныйСканерКлиент.ДобавитьСканСМобильного(ЭтаФорма, Описание);
	
КонецПроцедуры

// Продолжаем работу сканера в автоматическом режиме, если он был приостановлен запуском ручного
&НаКлиенте
Процедура ПродолжитьРаботуСканера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТолькоЧтоСозданныйДокумент Тогда
		ПодключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически", 3, Ложь);
	Иначе
		МобильныйСканерЗанят = Ложь;
		МП_МобильныйСканерВызовСервера.ОсвободитьСканер(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьВозвратДокументаКонтрагентом(ТекущийОбъект)
	
	Строка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналПередачиДокументов.Период,
	|	ЖурналПередачиДокументов.Документ,
	|	ЖурналПередачиДокументов.ТипЭкземпляра,
	|	ЖурналПередачиДокументов.НомерЭкземпляра
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ТИПЗНАЧЕНИЯ(ЖурналПередачиДокументов.Пользователь) = ТИП(Справочник.КонтактныеЛица)
	|	И ЖурналПередачиДокументов.Пользователь.Владелец = &Контрагент
	|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	
	Запрос.УстановитьПараметр("Контрагент", ТекущийОбъект.Отправитель);
	Запрос.УстановитьПараметр("Документ", ПредметПереписки);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда 
		Строка = Результат[0];
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	ЖурналПередачиДокументов.Документ = &Документ
		|	И ЖурналПередачиДокументов.Пользователь = &КонтактноеЛицо
		|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	
		Запрос.УстановитьПараметр("КонтактноеЛицо", ТекущийОбъект.Подписал);
		Запрос.УстановитьПараметр("Документ", ПредметПереписки);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда 
			Строка = Результат[0];
		КонецЕсли;	
			
	КонецЕсли;	
		
	Если Строка <> Неопределено Тогда 
		МенеджерЗаписи = РегистрыСведений.ЖурналПередачиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Строка.Период;
		МенеджерЗаписи.Документ = Строка.Документ;
		МенеджерЗаписи.ТипЭкземпляра = Строка.ТипЭкземпляра;
		МенеджерЗаписи.НомерЭкземпляра = Строка.НомерЭкземпляра;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Возвращен = Истина;
		МенеджерЗаписи.ДатаВозврата = ТекущийОбъект.ДатаРегистрации;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоОтчетностиВКО()
	
	Если Не ЭтоОбменСКонтролирующимиОрганами Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДляОграничения = Новый Массив;
	ЭлементыДляОграничения.Добавить(Элементы.Заголовок);
	ЭлементыДляОграничения.Добавить(Элементы.Содержание);
	ЭлементыДляОграничения.Добавить(Элементы.Организация);
	ЭлементыДляОграничения.Добавить(Элементы.Отправитель);
	ЭлементыДляОграничения.Добавить(Элементы.Файлы);
	ЭлементыДляОграничения.Добавить(Элементы.СоздатьФайл);
	ЭлементыДляОграничения.Добавить(Элементы.ДобавитьСканСМобильного);
	ЭлементыДляОграничения.Добавить(Элементы.ВставитьКартинкуИзБуфера);
	ЭлементыДляОграничения.Добавить(Элементы.ФормаЭПИШифрование);
	ЭлементыДляОграничения.Добавить(Элементы.ФормаШтрихкоды);
	ЭлементыДляОграничения.Добавить(Элементы.ВставитьСтроки);
	ЭлементыДляОграничения.Добавить(Элементы.КонтекстноеМенюФайлыГруппаЭПИШифрование);
	ЭлементыДляОграничения.Добавить(Элементы.КонтекстноеМенюФайлыГруппаШтрихкоды);
	ЭлементыДляОграничения.Добавить(Элементы.ГруппаИмпорт);
	ЭлементыДляОграничения.Добавить(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске);
	
	Для Каждого Элемент Из ЭлементыДляОграничения Цикл
	
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Элемент.ТолькоПросмотр = Истина;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда 
			Элемент.ИзменятьСоставСтрок = Ложь;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			Или ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Элемент.Доступность = Ложь;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловПослеОперации(Результат, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюСообщенийМЭДОКлиент(ДопПараметры) Экспорт
	
	ОбновитьИсториюСообщенийМЭДОСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюСообщенийМЭДОСервер()
	
	КэшВидаДокумента = Новый Структура();
	КэшВидаДокумента.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
	КэшВидаДокумента.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
	ИнтеграцияСМЭДО.ЗаполнитьЗакладкуМЭДОВФорме(ЭтотОбъект, КэшВидаДокумента);
	
КонецПроцедуры

#Область СлужебныеДляМЭДО

// Записать файл ЭСД на диск.
// 
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога
//  ДопПараметры - Структура 
&НаКлиенте
Процедура ЗаписатьФайлЭсдНаДиск(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПрочитатьДвоичныеДанныеФайлаЭсд();
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В данном контейнере не обнаружен файл.'"));
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные.Записать(ДопПараметры.ПолноеИмяФайла);
	
КонецПроцедуры

// Прочитать двоичные данные файла.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Прочитать двоичные данные файла
&НаСервере
Функция ПрочитатьДвоичныеДанныеФайлаЭсд()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Документы.ДанныеДокументаМЭДО.ПолучитьДанныеДокументаМЭДО(
		Объект.Ссылка, "АрхивЭСД", МЭДОСтруктурыДанных.НовыйЛегкийОтвет());
	Если Данные.АрхивЭСД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные.АрхивЭСД.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлыПодходящиеДляМЭДО(ДокументСсылка)
	
	ТаблицаФайлов = ИнтеграцияСМЭДО.ПолучитьОбычныеФайлыДокумента(ДокументСсылка);
	СписокВыбора = Новый СписокЗначений();
	Для Каждого СтрокаТЗ Из ТаблицаФайлов Цикл
		Если СтрНайти(НРег(СтрокаТЗ.Расширение), "pdf") > 0 Тогда
			СписокВыбора.Добавить(СтрокаТЗ.Файл, СтрокаТЗ.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТестЦентр

&НаКлиенте
Функция ТЦЗаписать() Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	Записать(ПараметрыЗаписи);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗарегистрировать() Экспорт
	
	Зарегистрировать(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦСоздатьНаОснованииБизнесПроцесс() Экспорт
	
	Предметы = Новый Массив;
	Предметы.Добавить(Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Предметы", Предметы);
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РегламентированныйУчетОбращенийСлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьКодВопросаВТаблице()
	
	ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КодВопроса = РаботаСОбращениямиВызовСервера.СформироватьКодВопроса(ТекущиеДанные.Раздел, ТекущиеДанные.Тематика,
		ТекущиеДанные.Тема, ТекущиеДанные.Вопрос);
	
КонецПроцедуры

&НаСервере
Процедура ИзменилсяКодВопроса()
	
	Если Не НесколькоВопросов Тогда 
		Объект.ВопросыОбращения.Очистить();
		НоваяСтрока = Объект.ВопросыОбращения.Добавить();
		НоваяСтрока.Раздел = Раздел;
		НоваяСтрока.Вопрос = Вопрос;
		НоваяСтрока.Тематика = Тематика;
		НоваяСтрока.Тема = Тема;
		НоваяСтрока.КодВопроса = КодВопроса;
		НоваяСтрока.ОрганДляПередачи = ОрганДляПередачи;
		НоваяСтрока.СопроводительныйДокументСтрока = СопроводительныйДокументСтрока;
		НоваяСтрока.СопроводительныйДокумент = СопроводительныйДокумент;
		НоваяСтрока.ОтветныйДокументСтрока = ОтветныйДокументСтрока;
		НоваяСтрока.ОтветныйДокумент = ОтветныйДокумент;
		НоваяСтрока.РезультатРассмотрения = РезультатРассмотрения;
		НоваяСтрока.МнениеАвтораОРезультатах = МнениеАвтораОРезультатах;
		НоваяСтрока.МнениеАвтораОМерах = МнениеАвтораОМерах;
		НоваяСтрока.ДатаОтвета = ДатаОтвета;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ОтветныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СопроводительныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.СопроводительныйДокументСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВопросыОбращения()
	
	Если Не РегламентированныйУчетОбращений Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСОбращениямиВызовСервера.ЗаполнитьСвязанныеДокументы(
		Объект.Ссылка, СвязанныеДокументыПоВопросам);
	
	НомерСтроки = 1;
	Для Каждого Строка Из Объект.ВопросыОбращения Цикл 
		
		СтрокиСопроводительныеДокументы = СвязанныеДокументыПоВопросам.НайтиСтроки(
			Новый Структура("Вопрос", Строка.Вопрос));
			
		Если СтрокиСопроводительныеДокументы.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(Строка, СтрокиСопроводительныеДокументы[0]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ОтветныйДокументСтрока) Тогда 
			Строка.Документ = Строка.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(Строка.СопроводительныйДокументСтрока) Тогда 
			Строка.Документ = Строка.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		Если НомерСтроки = 1 Тогда 
			Раздел = Строка.Раздел;
			Вопрос = Строка.Вопрос;
			Тематика = Строка.Тематика;
			Тема = Строка.Тема;
			ОрганДляПередачи = Строка.ОрганДляПередачи;
			РезультатРассмотрения = Строка.РезультатРассмотрения;
			
			СопроводительныйДокумент = Строка.СопроводительныйДокумент;
			СопроводительныйДокументСтрока = Строка.СопроводительныйДокументСтрока;
			
			ОтветныйДокумент = Строка.ОтветныйДокумент;
			ОтветныйДокументСтрока = Строка.ОтветныйДокументСтрока;
			
			ДатаОтвета = Строка.ДатаОтвета;
			КодВопроса = Строка.КодВопроса;
			МнениеАвтораОРезультатах = Строка.МнениеАвтораОРезультатах;
			МнениеАвтораОМерах = Строка.МнениеАвтораОМерах;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	НесколькоВопросов = Объект.ВопросыОбращения.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКодов()
	
	Элементы.СтраницаВопросы.Видимость = РегламентированныйУчетОбращений;
	
	Если РегламентированныйУчетОбращений Тогда 
		
		Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Ложь;
		Элементы.ГурппаОтветныйДокумент.Видимость = Ложь;
		Элементы.ДатаОтвета.Видимость = Ложь;
		Элементы.ГруппаМнениеАвтора.Видимость = Ложь;
		
		Если НесколькоВопросов Тогда 
			Элементы.ГруппаВопросИРезультаты.Видимость = Ложь;
			Элементы.РезультатРассмотрения.Видимость = Ложь;
			Элементы.ГруппаРузультат.Видимость = Ложь;
			Элементы.ГруппаВопросыСписком.Видимость = Истина;
			Элементы.ГруппаМнениеАвтора.Видимость = Ложь;
		Иначе 
			Элементы.ГруппаВопросИРезультаты.Видимость = Истина;
			Элементы.РезультатРассмотрения.Видимость = Истина;
			Элементы.ГруппаРузультат.Видимость = Истина;
			Элементы.ГруппаВопросыСписком.Видимость = Ложь;
			
			Если РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.НаправленоВИнойОрган") Тогда 
				Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Истина;
				Если Не ЗначениеЗаполнено(ДатаОтвета) Тогда 
					ДатаОтвета = ТекущаяДата();
				КонецЕсли;
				
			ИначеЕсли РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.ВТомЧислеМерыПриняты")
				Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.НеПоддержано")
				Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Поддержано")
				Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Разъяснено") Тогда 
				Элементы.ДатаОтвета.Видимость = Истина;
				Элементы.ДатаОтвета.Заголовок = НСтр("ru = 'Дата ответа'");
				Элементы.ГруппаМнениеАвтора.Видимость = Истина;
				
				Если Не ЗначениеЗаполнено(ДатаОтвета) Тогда 
					ДатаОтвета = ТекущаяДата();
				КонецЕсли;
				
				Если РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.ВТомЧислеМерыПриняты")
					Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Поддержано")
					Или РезультатРассмотрения = ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.Разъяснено") Тогда 
					Элементы.ГурппаОтветныйДокумент.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//{{MRG[ <-> ]
#КонецОбласти

#Область ОтчетностьВКонтролирующиеОрганыОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДокументВКотролирующийОрган(Команда)
	
	ПоказатьЗначение(, ЭлектронныйДокументОтчетностьВКО);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОтчетностьВКонтролирующиеОрганы

&НаСервере
Процедура ОбновитьСведенияПоОтчетностиВКО()
	
	ОбзорДокумента.ВывестиКартинкуОтчетностиВКО(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;

	// Общая настройка формы.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Команды формы.
	Элементы.ФормаКомандаЗаписатьИЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	Элементы.ФормаКомандаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаКомандаЗаписатьИЗакрыть.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	
	// Страницы.
	// Обзор.
	МобильныйКлиентКлиентСервер.АдаптироватьHtmlПодЭкранПриНеобходимости(ПредставлениеHTML);
	
	Элементы.МК_КомандыФайлов.Видимость = Истина;
	Элементы.ГруппаКоманды.Видимость = Ложь;
	Элементы.Переместить(Элементы.СоздатьФайл, Элементы.МК_КомандыФайлов);
	
	Элементы.Переместить(Элементы.ГруппаФайлы, Элементы.ГруппаОбзорФайлы);
	Элементы.Файлы.Шапка = Ложь;
	Элементы.ФайлыПодписанЗашифрован.Видимость = Ложь;
	Элементы.Описание.Видимость = Ложь;
	Элементы.ГруппаПрочиеДанныеФайла.Видимость = Ложь;
	Элементы.Оригинал.Видимость = Ложь;
	
	// Реквизиты.
	Элементы.ГруппаОсновные.ВыравниваниеЭлементовИЗаголовков = 
		ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
	Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	// Переадресован.
	Элементы.ТребуетсяОтветПереадресовавшему.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ТребуетсяОтветПереадресовавшему.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;

	// Резолюции.
	Элементы.СтраницаЕстьРезолюции.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.СтраницаНетРезолюций.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;

	// Связи.
	Элементы.ГруппаСвязи.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ДеревоСвязейОткрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	Элементы.ДеревоСвязейСтруктураСвязей.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Элементы.ПоказыватьТолькоОригиналыВСвязях.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ПоказыватьТолькоОригиналыВСвязях.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	// ЭП.
	Элементы.ЭлектронныеПодписи.Шапка = Ложь;
	Элементы.ТаблицаПодписейОткрытьПодпись.Видимость = Ложь;
	Элементы.ТаблицаПодписейПроверить.Видимость = Ложь;
	Элементы.ТаблицаПодписейСохранить.Видимость = Ложь;
	Элементы.ТаблицаПодписейУдалить.Видимость = Ложь;
	
	Элементы.ГруппаЭП.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ТаблицаПодписейПроверитьВсе.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	
	// Категории.
	Элементы.Категории.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Отображение = ОтображениеКнопки.Текст;
	
	// Рабочая группа.
	Элементы.РабочаяГруппаТаблица.Шапка = Ложь; 
	Элементы.ГруппаРабочаяГруппа.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Отображение = ОтображениеКнопки.Текст;
	
	Элементы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы.ПоложениеЗаголовка = 
		ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы.ГоризонтальноеПоложениеВГруппе = 
		ГоризонтальноеПоложениеЭлемента.Право;
	
	// Дополнительно.
	Элементы.ГруппаДополнительно.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
КонецПроцедуры

#КонецОбласти
