#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредыдущийТипСостояния = Объект.ТипСостояния;
	
	Если Не ЕстьПравоРедактирования() Тогда
		Элементы.ПроверитьДействие.Доступность = Ложь;
	КонецЕсли;
	
	АктивироватьПолеПоУмолчанию();
	
	Если Объект.Предопределенный Тогда
		
		Элементы.ПроверитьДействие.Доступность = Ложь;
		Элементы.СтраницаИсполняемоеДействие.ТолькоПросмотр = Истина;
		Элементы.ГруппаНастройки.ТолькоПросмотр = Истина;
		Элементы.ГруппаВложения.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Параметры, "ИмяПараметра");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Вложения, "Вложение");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Параметры.Сортировать("ИмяПараметра Возр");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗаполненияПараметровНаСервере(Отказ);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяПараметраПриИзменении(Элемент)
	
	Попытка
		
		Выполнить(Элемент.ТекстРедактирования + " = Неопределено;");
		
	Исключение
		
		Поле = "ИмяПараметра"; 
		СообщениеПользователю = Нстр("ru = 'Данное имя не может использоваться в качестве переменной'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,, Поле, "Объект.ИмяЗаполняемогоПараметра");
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормВложения

&НаКлиенте
Процедура ВложенияПриИзменении(Элемент)
	
	ОбновитьЗаголовокВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьНаОсновеШаблонаПослеВыбораШаблона", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ПараметрыФормы = Новый Структура("РежимВыбораПапкиИФайла", Истина);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках", 
		ПараметрыФормы, , , , , Обработчик, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры (см. выше).
Процедура ДобавитьНаОсновеШаблонаПослеВыбораШаблона(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовСтр = Объект.Вложения.Добавить();
	НовСтр.Вложение = Результат;
	ОбновитьЗаголовокВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВложениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Вложения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаПослеВыбораШаблона", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	Вложение = Элементы.Вложения.ТекущиеДанные.Вложение;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока, РежимВыбораПапкиИФайла", Вложение, Истина);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках", 
		ПараметрыФормы, , , , , Обработчик, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры (см. выше).
Процедура ВыборФайлаПослеВыбораШаблона(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.Вложения.ТекущиеДанные.Вложение = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметры

&НаКлиенте
Процедура ПараметрыИмяПараметраПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Выполнить(Элемент.ТекстРедактирования + " = Неопределено;");
	Исключение
		
		НомерСтроки = Элементы.Параметры.ТекущиеДанные.НомерСтроки;
		Поле = "Параметры["+ Строка(НомерСтроки - 1) + "].ИмяПараметра"; 
		СообщениеПользователю = Нстр("ru = 'Данное имя не может использоваться в качестве переменной'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,, Поле, "Объект");
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьДействие(Команда)
	
	ОчиститьСообщения();
	Если Модифицированность 
		И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЗначенияПараметров = ЗначенияПараметров();
		ПараметрыСостояния = ЗначенияПараметров.ПараметрыСостояния;
		ДействиеТекст = ЗначенияПараметров.ИнициализацияПараметров + Объект.Действие;
		
		Выполнить(ДействиеТекст);
		
	Исключение
		
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеПользователю = Нстр("ru = 'При выполнении кода возникли ошибки:'") 
			+ Символы.ПС
			+ ПредставлениеОшибки;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяНастройка(Команда)
	
	Если Объект.ТипСостояния = ПредопределенноеЗначение("Перечисление.ТипыСостоянийЧатБота.Действие") Тогда
		Объект.ТипСостояния = ПредопределенноеЗначение("Перечисление.ТипыСостоянийЧатБота.Высказывание");
	Иначе 
		Объект.ТипСостояния = ПредопределенноеЗначение("Перечисление.ТипыСостоянийЧатБота.Действие");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовФормы(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура АктивироватьПолеПоУмолчанию()

	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		Элементы.Наименование.АктивизироватьПоУмолчанию = Истина;
		
	ИначеЕсли Объект.ТипСостояния = Перечисления.ТипыСостоянийЧатБота.Действие
		И Не ЗначениеЗаполнено(Объект.Действие) Тогда
		
		Элементы.Действие.АктивизироватьПоУмолчанию = Истина;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Высказывание) Тогда
		
		Элементы.Высказывание.АктивизироватьПоУмолчанию = Истина;
		
	Иначе
		
		Элементы.КлючевыеСлова.АктивизироватьПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ЕстьПравоРедактирования()

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ОбъектМетаданных = Метаданные.Справочники.СостоянияЧатБота;
	
	Возврат ПравоДоступа("Редактирование", ОбъектМетаданных, ТекущийПользователь);

КонецФункции

&НаСервере
Функция ЗначенияПараметров()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыСостояния = Новый Структура();
	ИнициализацияПараметров = "";
	
	Для каждого Параметр Из Объект.Параметры Цикл
		
		ИнициализацияПараметров = ИнициализацияПараметров
		+ Параметр.ИмяПараметра + " = ПараметрыСостояния." + Параметр.ИмяПараметра
		+ ";" + Символы.ПС;
		
		Если ТипЗнч(Параметр.Значение) = Тип("СправочникСсылка.ВычисляемыеПараметрыЧатБота") Тогда
		
			ЗначениеПараметра = "";
			Выполнить(Параметр.Значение.Скрипт);
			ПараметрыСостояния.Вставить(Параметр.ИмяПараметра, ЗначениеПараметра);
		
		Иначе
		
			ПараметрыСостояния.Вставить(Параметр.ИмяПараметра, Параметр.Значение);
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущееСостояние = Объект.Родитель;
	
	Пока ТекущееСостояние.ТипСостояния = Перечисления.ТипыСостоянийЧатБота.Вопрос Цикл
		
		
		ЗапрашиваемыйПараметр = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущееСостояние, "ИмяЗаполняемогоПараметра, ПримерЗаполняемогоПараметра, Родитель");
		ПараметрыСостояния.Вставить(ЗапрашиваемыйПараметр.ИмяЗаполняемогоПараметра,
									ЗапрашиваемыйПараметр.ПримерЗаполняемогоПараметра);
		ИнициализацияПараметров = ИнициализацияПараметров  
		+ ЗапрашиваемыйПараметр.ИмяЗаполняемогоПараметра + " = ПараметрыСостояния." 
		+ ЗапрашиваемыйПараметр.ИмяЗаполняемогоПараметра + ";" + Символы.ПС; 
		ТекущееСостояние = ЗапрашиваемыйПараметр.Родитель;
		
	КонецЦикла;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ИнициализацияПараметров", ИнициализацияПараметров);
	ЗначенияПараметров.Вставить("ПараметрыСостояния", ПараметрыСостояния);
	
	Возврат ЗначенияПараметров;

КонецФункции 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияПараметровНаСервере(Отказ)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
	Для Каждого Параметр Из Объект.Параметры Цикл
	
		Попытка
			Выполнить (Параметр.ИмяПараметра + " = Неопределено;");
		Исключение
			
			Отказ = Истина;
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Неверно задано имя параметра в строке %1'"), Параметр.НомерСтроки);
			Поле = "Параметры["+ Строка(Параметр.НомерСтроки - 1) + "].ИмяПараметра";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения,, Поле, "Объект");
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда
		
			Отказ = Истина;
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Не задано значение параметра в строке %1'"), Параметр.НомерСтроки);
			Поле = "Параметры["+ Строка(Параметр.НомерСтроки - 1) + "].Значение";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения,, Поле, "Объект");
		
		КонецЕсли;
	
	КонецЦикла;
	
	Отказ = Отказ Или ЕстьПовторяющиесяПараметры();
	
	Если Объект.ТипСостояния = Перечисления.ТипыСостоянийЧатБота.Вопрос Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ИмяЗаполняемогоПараметра) Тогда
		
			Поле = "ИмяПараметра";
			ТекстПредупреждения = НСтр("ru = 'Не задано имя параметра'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения,, Поле, "Объект");
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ПримерЗаполняемогоПараметра) Тогда
		
			Поле = "ЗначениеПараметра";
			ТекстПредупреждения = НСтр("ru = 'Не задан пример значения параметра'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения,, Поле, "Объект");
			Отказ = Истина;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЕстьПовторяющиесяПараметры()
	
	МассивПараметров = Новый Массив();
	Результат = Ложь;
	
	Для каждого Параметр Из Объект.Параметры Цикл
	
		Если МассивПараметров.Найти(Параметр.ИмяПараметра) = Неопределено Тогда
		
			МассивПараметров.Добавить(Параметр.ИмяПараметра);
			
		Иначе
			
			Поле = "Параметры["+ Строка(Параметр.НомерСтроки - 1) + "].ИмяПараметра"; 
			СообщениеПользователю = СтрШаблон(Нстр("ru = 'Данное имя(%1) уже использовано'"), 
				Параметр.ИмяПараметра);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,, Поле, "Объект");
			Результат = Истина;
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьЭлементовФормы(Форма, ПереключитьВкладку = Ложь)
	
	Элементы = Форма.Элементы;
	Элементы.РасширеннаяНастройка.Пометка = Ложь;
	Элементы.СтраницыОбщее.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Форма.Объект.ТипСостояния = ПредопределенноеЗначение("Перечисление.ТипыСостоянийЧатБота.Действие") Тогда
		Элементы.РасширеннаяНастройка.Пометка = Истина;
		Элементы.СтраницыОбщее.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Если ПереключитьВкладку Тогда 
			Элементы.СтраницыОбщее.ТекущаяСтраница = Элементы.СтраницаИсполняемоеДействие;
		КонецЕсли;
		
	ИначеЕсли ПереключитьВкладку Тогда 
		Элементы.СтраницыОбщее.ТекущаяСтраница = Элементы.СтраницаНастройки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокВложений()
	
	Если Объект.Вложения.Количество() > 0 Тогда 
		Элементы.ВложенияЗаголовок.Заголовок = СтрШаблон(НСтр("ru = 'Вложения (%1):'") , Объект.Вложения.Количество()); 
	Иначе 
		Элементы.ВложенияЗаголовок.Заголовок = НСтр("ru = 'Вложения:'"); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
