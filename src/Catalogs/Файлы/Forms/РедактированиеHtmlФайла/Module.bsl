&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Параметры.Файл;
	ДанныеФайла = Параметры.ДанныеФайла;
	ИмяОткрываемогоФайла = Параметры.ИмяОткрываемогоФайла;
	Если Параметры.Свойство("УникальныйИдентификатор") Тогда
		ИдентификаторРодительскойФормы = Параметры.УникальныйИдентификатор;
	КонецЕсли;
	
	КодФайла = Файл.Код;
	
	ЭтаФорма.АвтоНавигационнаяСсылка = Ложь;
	ЭтаФорма.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Файл);
	
	Если ДанныеФайла.РедактируетТекущийПользователь Тогда
		РежимРедактирования = Истина;
	КонецЕсли;	
	
	Если ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
		РежимРедактирования = Ложь;
	КонецЕсли;	
	
	Элементы.Редактировать.Доступность = Не РежимРедактирования;
	Элементы.ЗакончитьРедактирование.Доступность = РежимРедактирования;
	Элементы.ЗаписатьИЗакрыть.Доступность = РежимРедактирования;
	Элементы.Записать.Доступность = РежимРедактирования;
	
	Элементы.КомандыHTML.Видимость = РежимРедактирования;
	Элементы.ТекстHtmlКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактирования;
	
	Если ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
		Элементы.Редактировать.Доступность = Ложь;
	КонецЕсли;	
	
	Права = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Файл);
	Если Не Права.Изменение Тогда
		Элементы.Редактировать.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не РежимРедактирования Тогда
		Элементы.ЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ЗакончитьРедактирование.Видимость = Ложь;
		Элементы.Записать.Видимость = Ложь;
	КонецЕсли;	
	
	ЗаголовокСтрока = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, 
		ДанныеФайла.Расширение);
	Если Не РежимРедактирования Тогда
		ЗаголовокСтрока = ЗаголовокСтрока + НСтр("ru=' (только просмотр)'");
	КонецЕсли;
	Заголовок = ЗаголовокСтрока;
	
	Если ЗначениеЗаполнено(ДанныеФайла.Версия) Тогда
		КодировкаТекстаФайла = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(ДанныеФайла.Версия);
		
		Если ЗначениеЗаполнено(КодировкаТекстаФайла) Тогда
			СписокКодировок = РаботаСоСтроками.ПолучитьСписокКодировок();
			ЭлементСписка = СписокКодировок.НайтиПоЗначению(КодировкаТекстаФайла);
			Если ЭлементСписка = Неопределено Тогда
				КодировкаПредставление = КодировкаТекстаФайла;
			Иначе	
				КодировкаПредставление = ЭлементСписка.Представление;
			КонецЕсли;
		Иначе	
			КодировкаПредставление = НСтр("ru='По умолчанию'");
		КонецЕсли;
		
	КонецЕсли;	
	
	НастройкаШрифтОтображения = Новый Шрифт("Arial", 10);
	
	НастроитьОтображениеКомандРаботыСПроцессамиИЗадачами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючУникальности = КодФайла;
	
	ПрочитатьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	// выбираем путь к файлу на диске
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	ИмяСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, 
		ДанныеФайла.Расширение);
	ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
	Фильтр = СтрШаблон(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
	ВыборФайла.Фильтр = Фильтр;
	
	Если ВыборФайла.Выбрать() Тогда
		
		ВыбранноеПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
		
		КодировкаТекстаДляЗаписи = КодировкаТекстаФайла;
		Если Не ЗначениеЗаполнено(КодировкаТекстаДляЗаписи) Тогда
			КодировкаТекстаДляЗаписи = Неопределено;
		КонецЕсли;	
		
		ТекстHTMLПриЗаписи = ПолучитьТекстВПоле();
		ЗаписьТекста = Новый ЗаписьТекста(ВыбранноеПолноеИмяФайла);
		ЗаписьТекста.Записать(ТекстHTMLПриЗаписи);
		
		Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыбранноеПолноеИмяФайла);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Задачи(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи", 
		Новый Структура("Предмет, НезависимоеОкно", Файл, Истина));	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ПоказатьЗначение(,Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийРедактор(Команда)
	
	ЗаписатьТекст();
	РаботаСФайламиКлиент.ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	КомандыРаботыСФайламиКлиент.Редактировать(Файл, ПолучитьУникальныйИдентификатор());
	
	ВключитьРежимРедактированияHTMLКлиент();
	Элементы.КомандыHTML.Видимость = РежимРедактирования;
	Элементы.ТекстHtmlКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактирования;
	Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
	Элементы.Записать.Видимость = Ложь;
	Элементы.ЗакончитьРедактирование.Видимость = Истина;
	Элементы.Редактировать.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРедактированияHTMLКлиент()
	
	Если Найти(ТекстHtml, "<body contentEditable") = 0 И Найти(ТекстHtml, "<BODY contentEditable") = 0 Тогда
	
		Если Найти(ТекстHtml, "<body") <> 0 Или Найти(ТекстHtml, "<BODY") <> 0 Тогда
			ТекстHtml = СтрЗаменить(ТекстHtml, "<body", "<body contentEditable=true");
			ТекстHtml = СтрЗаменить(ТекстHtml, "<BODY", "<BODY contentEditable=true");
		Иначе	
			ТекстHtml = СтрЗаменить(ТекстHtml, "<html>", "<html><body contentEditable=true>");
			ТекстHtml = СтрЗаменить(ТекстHtml, "</html>", "</body></html>");
			
			ТекстHtml = СтрЗаменить(ТекстHtml, "<HTML>", "<HTML><BODY contentEditable=true>");
			ТекстHtml = СтрЗаменить(ТекстHtml, "</HTML>", "</BODY></HTML>");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРежимРедактированияHTMLКлиент()
	
	ТекстHTMLВПоле = ПолучитьТекстВПоле();
	ТекстHtml = СтрЗаменить(ТекстHTMLВПоле, " contentEditable=true", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФайлРедактировался" И Параметр = Файл Тогда
		РежимРедактирования = Истина;
		УстановитьДоступностьКоманд();
		Элементы.КомандыHTML.Видимость = РежимРедактирования;
		Элементы.ТекстHtmlКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактирования;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ФайлВОповещении = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Файл") Тогда
			ФайлВОповещении = Параметр.Файл;
		Иначе	
			ФайлВОповещении = Источник;
		КонецЕсли;	
		
		Если ФайлВОповещении = Файл Тогда
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
			
			РежимРедактирования = Ложь;
			
			Если ДанныеФайла.РедактируетТекущийПользователь Тогда
				РежимРедактирования = Истина;
			КонецЕсли;	
			
			Если ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
				РежимРедактирования = Ложь;
			КонецЕсли;	
			
			УстановитьДоступностьКоманд();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьТекст();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстВПоле()
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	ТекстВПоле = "";
	Если HTMLДокумент <> Неопределено Тогда
		ТекстВПоле = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
		
		Попытка
			ТекстHead = HTMLДокумент.head.innerHTML;
			РаботаС_HTML.ПеренестиHead(ТекстВПоле, ТекстHead, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТекстВПоле;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьТекст()
	
	ТекстHTMLПриЗаписи = ПолучитьТекстВПоле();
	
	Если ТекстHTMLПриЗаписи <> ТекстПриОткрытии Тогда
		ЗаписьТекста = Новый ЗаписьТекста(ИмяОткрываемогоФайла);
		ЗаписьТекста.Записать(ТекстHTMLПриЗаписи);
		
		ТекстПриОткрытии = ТекстHTMLПриЗаписи;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУникальныйИдентификатор()
	
	Если ЗначениеЗаполнено(ИдентификаторРодительскойФормы) Тогда
		Возврат ИдентификаторРодительскойФормы;
	КонецЕсли;
	
	Возврат УникальныйИдентификатор;
	
КонецФункции	

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ЗаписатьТекст();
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, Файл, 
		ПолучитьУникальныйИдентификатор());
	ПараметрыОбновленияФайла.Кодировка = КодировкаТекстаФайла;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		РежимРедактирования = Ложь;
	КонецЕсли;	
	УстановитьДоступностьКоманд();
	
	ОтключитьРежимРедактированияHTMLКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	Если HTMLДокумент <> Неопределено Тогда
		
		ТекстПередЗакрытием = ПолучитьТекстВПоле();
		
		Если ТекстПередЗакрытием <> ТекстПриОткрытии Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность И Не БылЗаданВопросПередЗакрытием Тогда
		
		Отказ = Истина;
		
		ИмяИРасширение = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, 
			ДанныеФайла.Расширение);
			
		ТекстВопроса = СтрШаблон(
			НСтр("ru ='Файл ""%1"" был изменен.
			|Сохранить изменения?'"), ИмяИРасширение);
			
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаПередЗакрытием", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сохранить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сохранять'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
		БылЗаданВопросПередЗакрытием = Истина;
		
	ИначеЕсли РежимРедактирования И Не БылЗаданВопросПередЗакрытием Тогда	
		
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, Файл, 
			ПолучитьУникальныйИдентификатор());
		ПараметрыОбновленияФайла.СоздатьНовуюВерсию = ДанныеФайла.ХранитьВерсии;
		ПараметрыОбновленияФайла.Кодировка = КодировкаТекстаФайла;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПередЗакрытием(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда 
		
		ЗаписатьТекст();

		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, Файл, 
			ПолучитьУникальныйИдентификатор());
		ПараметрыОбновленияФайла.Кодировка = КодировкаТекстаФайла;
		ПараметрыОбновленияФайла.СоздатьНовуюВерсию = ДанныеФайла.ХранитьВерсии;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
		БылЗаданВопросПередЗакрытием = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ВерсииФайлов.Форма.ФормаВыбораСпособаСравненияВерсий") Тогда
		
		Если ВыбранноеЗначение <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		// Повторное чтение настройки
		СпособСравненияВерсийФайлов = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СпособСравненияВерсийФайлов;
		Если СпособСравненияВерсийФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПродолжитьСравнениеВерсий(СпособСравненияВерсийФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд()
	
	Элементы.Редактировать.Доступность = Не РежимРедактирования;
	Элементы.ЗакончитьРедактирование.Доступность = РежимРедактирования;
	Элементы.ЗаписатьИЗакрыть.Доступность = РежимРедактирования;
	Элементы.Записать.Доступность = РежимРедактирования;
	
	ЗаголовокСтрока = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, 
		ДанныеФайла.Расширение);
	Если Не РежимРедактирования Тогда
		ЗаголовокСтрока = ЗаголовокСтрока + НСтр("ru=' (только просмотр)'");
	КонецЕсли;
	Заголовок = ЗаголовокСтрока;
	
	Элементы.КомандыHTML.Видимость = РежимРедактирования;
	Элементы.ТекстHtmlКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактирования;
	
	Если Не РежимРедактирования Тогда
		Элементы.ЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.Записать.Видимость = Ложь;
		Элементы.ЗакончитьРедактирование.Видимость = Ложь;
		Элементы.Редактировать.Видимость = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
		Элементы.Записать.Видимость = Ложь;
		Элементы.ЗакончитьРедактирование.Видимость = Истина;
		Элементы.Редактировать.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьТекст()
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяОткрываемогоФайла);
	ТекстHtml = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если СтрНайти(ТекстHtml, "charset=utf-8") <> 0 
		Или СтрНайти(ТекстHtml, "charset=""utf-8""") <> 0 Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяОткрываемогоФайла, "UTF-8");
		ТекстHtml = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
	КонецЕсли;	
	
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHtml);
	
	Если РежимРедактирования Тогда
		ВключитьРежимРедактированияHTMLКлиент();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		
		ЗаписатьТекст();
		
		Обработчик = Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект);
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, Файл, 
			ПолучитьУникальныйИдентификатор());
		ПараметрыОбновленияФайла.Кодировка = КодировкаТекстаФайла;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
		Возврат;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбъекты(Команда)
	
	ОбработчикОтветаНаВопрос = 
		Новый ОписаниеОповещения("ПродолжитьОтправкуПослеВопросОЗавершенииРедактирования", ЭтотОбъект);
	
	Если РежимРедактирования Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед отправкой необходимо закончить редактирование файла.
			|
			|Закончить редактирование и отправить?'");
		
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
			ОбработчикОтветаНаВопрос, 
			ТекстВопроса,
			НСтр("ru = 'Да'"),
			НСтр("ru = 'Нет'"),
			КодВозвратаДиалога.Да);
			
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработчикОтветаНаВопрос, КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Продолжение процедуры ОтправитьОбъекты
//
&НаКлиенте
Процедура ПродолжитьОтправкуПослеВопросОЗавершенииРедактирования(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПродолжитьОтправкуПослеЗавершенияРедактирования", ЭтотОбъект);
	
	Если РежимРедактирования Тогда
		
		ЗаписатьТекст();
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, Файл, 
			ПолучитьУникальныйИдентификатор());
		ПараметрыОбновленияФайла.Кодировка = КодировкаТекстаФайла;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Обработчик, Истина);
	
КонецПроцедуры

// Продолжение ПродолжитьОтправкуПослеВопросОЗавершенииРедактирования
//
&НаКлиенте
Процедура ПродолжитьОтправкуПослеЗавершенияРедактирования(
	Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПомощникОтправитьКлиент.ОтправитьОбъекты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Файл), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСравнениеВерсий(СпособСравненияВерсийФайлов)
	#Если НЕ ВебКлиент Тогда
		
		ЗаписатьТекст();
		
		ДанныеФайлаДляСохранения = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Файл, Неопределено, УникальныйИдентификатор);
		
		АдресФайла = ДанныеФайлаДляСохранения.НавигационнаяСсылкаТекущейВерсии;
		
		Если ДанныеФайла.ТекущаяВерсия <> ДанныеФайла.Версия Тогда
			АдресФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ДанныеФайла.Версия, УникальныйИдентификатор);
		КонецЕсли;
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
		
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу, АдресФайла);
		ПередаваемыеФайлы.Добавить(Описание);
		
		// Сохраним Файл из БД на диск
		Если Не ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		РаботаСФайламиКлиент.СравнитьФайлы(ПутьКФайлу, ИмяОткрываемогоФайла, СпособСравненияВерсийФайлов);
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	Элементы.ТекстHtml.Документ.execCommand("Print"); 

КонецПроцедуры

&НаКлиенте
Процедура ТекстHtmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, 
		СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHtmlДокументСформирован(Элемент)
	
	ТекстПриОткрытии = ПолучитьТекстВПоле();
		
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКомандРаботыСПроцессамиИЗадачами()
	
	ДоступнаОтправкаФайла = 
		РаботаСФайламиВызовСервера.ДоступнаОтправкаФайлаИзВстроенногоРедактораФайла(ДанныеФайла);
	
	Элементы.ОтправитьОбъекты.Видимость = ДоступнаОтправкаФайла;
	Элементы.Задачи.Видимость = ДоступнаОтправкаФайла;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовHTMLПисьма

&НаКлиенте
Процедура ВыполнитьHTMLКоманду(Команда)
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	HTMLДокумент.execCommand(Команда);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Полужирный(Команда)
	
	ВыполнитьHTMLКоманду("Bold");
	
КонецПроцедуры

&НаКлиенте
Процедура Наклонный(Команда)
	
	ВыполнитьHTMLКоманду("italic");
	
КонецПроцедуры

&НаКлиенте
Процедура Подчеркнутый(Команда)
	
	ВыполнитьHTMLКоманду("underline");
	
КонецПроцедуры

&НаКлиенте
Процедура МаркированныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertUnorderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура НумерованныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertOrderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВлево(Команда)
	
	ВыполнитьHTMLКоманду("outdent");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВправо(Команда)
	ВыполнитьHTMLКоманду("indent");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВлево(Команда)
	ВыполнитьHTMLКоманду("justifyLeft");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоЦентру(Команда)
	ВыполнитьHTMLКоманду("justifyCenter");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВправо(Команда)
	ВыполнитьHTMLКоманду("justifyRight");
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекста(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветТекста", ЭтотОбъект);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораЦвета",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветТекста(Цвет, Параметры) Экспорт

	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		HTMLДокумент.execCommand("foreColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветФона", ЭтотОбъект);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораЦветаФона",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветФона(Цвет, Параметры) Экспорт
	
	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		HTMLДокумент.execCommand("backColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормат(Команда)
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	HTMLДокумент.execCommand("removeFormat", Ложь, "");
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстHtml;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьШрифтПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораШрифта",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
		
	ИначеЕсли Результат = "Шрифт по умолчанию" Тогда 
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, НастройкаШрифтОтображения.Имя);
		Модифицированность = Истина;
		
	ИначеЕсли Результат = "Другой.." Тогда 
		ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьШрифт", ЭтотОбъект);
		ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
		
	Иначе 
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстHtml;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьШрифт(Шрифт, Параметры) Экспорт

	Если Шрифт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Шрифт.Имя) Тогда
		
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Шрифт.Имя);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РазмерШрифта = 2;
	
	Если Шрифт.Размер <> -1 Тогда
		Если Шрифт.Размер < 8 Тогда
			РазмерШрифта = 1;
		ИначеЕсли Шрифт.Размер <= 10 Тогда
			РазмерШрифта = 2;	
		ИначеЕсли Шрифт.Размер <= 12 Тогда
			РазмерШрифта = 3;	
		ИначеЕсли Шрифт.Размер <= 14 Тогда
			РазмерШрифта = 4;	
		ИначеЕсли Шрифт.Размер <= 16 Тогда
			РазмерШрифта = 5;	
		ИначеЕсли Шрифт.Размер <= 18 Тогда
			РазмерШрифта = 6;	
		Иначе
			РазмерШрифта = 7;	
		КонецЕсли;	
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	HTMLДокумент.execCommand("fontSize", Ложь, РазмерШрифта);
	Модифицированность = Истина;
	
	Если Шрифт.Зачеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		ВыполнитьHTMLКоманду("strikeThrough");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Жирный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		ВыполнитьHTMLКоманду("Bold");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Наклонный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		ВыполнитьHTMLКоманду("italic");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Подчеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		ВыполнитьHTMLКоманду("underline");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 2;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер + 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстHtml;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстHtml.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 3;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер - 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстHtml;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСсылку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставитьСсылку", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, , НСтр("ru='Ссылка'"),,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВставитьСсылку(ТекстСсылки, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ТекстСсылки) Тогда
		HTMLДокумент = Элементы.ТекстHtml.Документ; 
		HTMLДокумент.execCommand("createLink", Ложь, ТекстСсылки);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверткаРазвертка(Команда)
	Элементы.ГруппаСправа.Видимость = Не Элементы.ГруппаСправа.Видимость;
КонецПроцедуры

#КонецОбласти
